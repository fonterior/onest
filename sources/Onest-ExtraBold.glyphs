{
.appVersion = "3112";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = PYRS;
},
{
name = panose;
value = (
2,
11,
5,
3,
3,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
9,
31,
33,
35,
37,
38,
47
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
NULL,
CR,
space,
B,
D,
E,
F,
H,
I,
L,
M,
N,
P,
R,
U,
V,
W,
X,
Y,
Z,
b,
d,
h,
i,
l,
m,
n,
p,
q,
u,
v,
w,
x,
z,
period,
comma,
A,
breve,
circumflex,
uni0326,
exclam,
quotedbl,
quotesingle,
numbersign,
percent,
asterisk,
plus,
slash,
colon,
semicolon,
less,
equal,
greater,
at,
bracketleft,
bracketright,
backslash,
asciicircum,
underscore,
braceleft,
bar,
braceright,
Euro,
quotedblbase,
quotesinglbase,
quotedblright,
quoteright,
quotedblleft,
quoteleft,
minus,
hyphen,
endash,
emdash,
grave,
acute,
guillemotright,
guilsinglright,
guillemotleft,
guilsinglleft,
uni00AD,
ellipsis,
uni0445,
uni0431,
uni0432,
uni0433,
uni0434,
uni0436,
uni043A,
uni0438,
uni0439,
uni043B,
uni043C,
uni043D,
uni043F,
uni0442,
uni0444,
uni0446,
uni0447,
uni0448,
uni0449,
uni044A,
uni044B,
uni044C,
uni044E,
uni044F,
u_alt,
uni0410,
uni0415,
uni041C,
uni041D,
uni0420,
uni0422,
uni0425,
T,
uni0412,
uni041F,
uni0413,
uni041B,
uni0414,
uni0411,
uni0416,
uni0417,
uni0418,
uni0419,
uni041A,
uni0423,
uni0424,
uni0426,
uni0427,
uni0428,
uni0429,
uni042A,
uni042B,
uni042C,
uni042D,
uni042E,
uni042F,
uni0440,
O,
be_alt,
a,
c,
e,
f,
g,
j,
o,
r,
t,
y_alt,
y2_alt,
uni0443,
uni0451,
uni0437,
uni044D,
C,
S,
uni0421,
G,
uni041E,
Q,
J,
K_alt,
K,
k_alt,
k,
i_alt,
j_alt,
s_alt,
s,
c_alt,
copyright,
ampersand,
dollar,
parenleft,
parenright,
cent,
section,
uni04C1,
uni04C2,
w_alt,
W_alt,
zero,
one,
two,
three,
four,
seven,
eight,
nine,
uni0430,
uni0435,
uni043E,
uni0441,
uni0218,
uni0219,
uni021A,
uni021B,
question,
uni2116,
uni0401,
asciitilde,
trademark,
registered,
degree,
bullet,
uni27F5,
uni27F6,
arrowup,
arrowdown,
uni21BA,
uni21BB,
uni21B7,
uni21B6,
five,
six,
dieresis,
cedilla,
dotlessi,
ccedilla,
uni0162,
uni0163,
Ccedilla,
scedilla,
uni21A9,
uni2713,
divide,
multiply,
yen,
uni20BD,
uni20B4,
sterling,
Scedilla,
t_alt,
alt_1,
colon.uc,
t2.alt,
hyphen.uc,
uni00AD.uc,
endash.uc,
emdash.uc,
uni2117,
f_alt,
g_alt,
y,
a_alt,
uni0490,
uni0491,
uni0406,
uni0456,
uni0404,
uni0454,
uni0407,
uni0457,
map,
logo,
uni202F,
uni2009,
uni00A0,
t0163.alt,
t021b.alt,
a00E2.alt,
a0103.alt,
a00E4.alt,
a2_alt,
logom,
greaterequal,
lessequal,
plusminus,
notequal,
approxequal,
twosuperior,
threesuperior,
tab_1,
I_alt,
l_alt,
l2_alt,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE008,
uniE009,
arrowright,
arrowleft,
uni2197,
uni2198,
uni2196,
uni2199,
uniE010,
uniE011,
uniE012,
uniE013,
uniE014,
uniE015,
uniE016,
uniE017,
uniE018,
uniE019,
uniE020,
uniE021,
uniE022,
questiondown,
exclamdown,
uni1E9E,
ordfeminine,
ordmasculine,
macron,
paragraph,
periodcentered,
caron,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
uni0308,
gravecomb,
acutecomb,
uni0302,
tildecomb,
uni0304,
uni0306,
uni0307,
uni030A,
uni030B,
uni030C,
uni0312,
uni0327,
uni0328,
AE,
Eth,
Oslash,
Thorn,
germandbls,
oslash,
eth,
thorn,
ae,
OE,
oe,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
agrave,
aacute,
atilde,
acircumflex,
adieresis,
aring,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
ydieresis,
Dcroat,
Amacron,
amacron,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
Hcircumflex,
hcircumflex,
Hbar,
hbar,
Lslash,
lslash,
Eng,
eng,
Abreve,
abreve,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
Idotaccent,
Jcircumflex,
jcircumflex,
Lacute,
lacute,
Nacute,
nacute,
Ncaron,
ncaron,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
Racute,
racute,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scaron,
scaron,
Tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
IJ,
ij,
kgreenlandic,
Tbar,
tbar,
uni0136,
uni0137,
uni013B,
uni013C,
uni0145,
uni0146,
uni0156,
uni0157,
uni0122,
uni0123,
ldot,
Ldot,
dcroat,
lcaron,
dcaron,
napostrophe,
Lcaron,
tcaron,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
uni0405,
uni0455,
uni0458,
uni0408,
uni040E,
uni045E,
uni0237
);
}
);
date = "2022-02-06 07:41:12 +0000";
familyName = Onest;
featurePrefixes = (
{
code = "lookup SUB_22 {
	sub colon by colon.uc;
	sub hyphen by hyphen.uc;
	sub endash by endash.uc;
	sub emdash by emdash.uc;
	sub uni00AD by uni00AD.uc;
	sub t by t2.alt;
	sub uni021B by t021b.alt;
	sub uni0163 by t0163.alt;
} SUB_22;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_0;
lookup SUB_0;
script cyrl;
language dflt;
lookup SUB_0;
lookup SUB_1 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_1;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
lookup SUB_2 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_2;
lookup SUB_0;
language AZE;
lookup SUB_0;
lookup SUB_0;
language MOL;
lookup SUB_0;
lookup SUB_0;
language ROM;
lookup SUB_0;
lookup SUB_0;
language TRK;
lookup SUB_0;
lookup SUB_0;
";
tag = salt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 useExtension {
	sub colon by colon.uc;
} SUB_3;
script cyrl;
language dflt;
lookup SUB_3;
script latn;
language dflt;
lookup SUB_3;
language AZE;
lookup SUB_3;
language MOL;
lookup SUB_3;
language ROM;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	@SUB_4_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_0_BT_0 colon' lookup SUB_22;
	@SUB_4_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_1_BT_0 hyphen' lookup SUB_22;
	@SUB_4_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_2_BT_0 endash' lookup SUB_22;
	@SUB_4_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_3_BT_0 emdash' lookup SUB_22;
	@SUB_4_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_4_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_4_5_LA_0;
	@SUB_4_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_4_6_LA_0;
	@SUB_4_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_4_7_LA_0;
} SUB_4;
lookup SUB_5 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_5;
script cyrl;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6 {
	@SUB_6_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_0_BT_0 colon' lookup SUB_22;
	@SUB_6_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_1_BT_0 hyphen' lookup SUB_22;
	@SUB_6_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_2_BT_0 endash' lookup SUB_22;
	@SUB_6_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_3_BT_0 emdash' lookup SUB_22;
	@SUB_6_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_6_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_6_5_LA_0;
	@SUB_6_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_6_6_LA_0;
	@SUB_6_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_6_7_LA_0;
} SUB_6;
lookup SUB_7 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_7;
script latn;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8 {
	@SUB_8_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_0_BT_0 colon' lookup SUB_22;
	@SUB_8_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_1_BT_0 hyphen' lookup SUB_22;
	@SUB_8_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_2_BT_0 endash' lookup SUB_22;
	@SUB_8_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_3_BT_0 emdash' lookup SUB_22;
	@SUB_8_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_8_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_8_5_LA_0;
	@SUB_8_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_8_6_LA_0;
	@SUB_8_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_8_7_LA_0;
} SUB_8;
lookup SUB_9 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_9;
language AZE;
lookup SUB_4;
lookup SUB_5;
language MOL;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language ROM;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language TRK;
lookup SUB_4;
lookup SUB_5;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_10;
script cyrl;
language dflt;
lookup SUB_10;
lookup SUB_11 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_11;
script latn;
language dflt;
lookup SUB_10;
lookup SUB_12 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_12;
language AZE;
lookup SUB_10;
language MOL;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_13;
script cyrl;
language dflt;
lookup SUB_13;
lookup SUB_14 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_14;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_15;
language AZE;
lookup SUB_13;
language MOL;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_16;
script cyrl;
language dflt;
lookup SUB_16;
lookup SUB_18 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_18;
script latn;
language dflt;
lookup SUB_16;
lookup SUB_17 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_17;
language AZE;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TRK;
lookup SUB_16;
script cyrl;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_19;
script cyrl;
language dflt;
lookup SUB_19;
lookup SUB_21 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_21;
script latn;
language dflt;
lookup SUB_19;
lookup SUB_20 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_20;
language AZE;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
script cyrl;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
";
tag = tnum;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 970;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 49 29 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 4 36 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01262 2 46 6 27 5 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123648 2368 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01258 4 38 8 20 7 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    157,\012    157,\012    145,\012    145,\012    708,\012    0,\012    527,\012    0,\012    \"-210\",\012    970,\012    \"-305\",\012    717,\012    \"-7\",\012    538,\012    \"-8\",\012    \"-264\",\012    970,\012    \"-305\",\012    157,\012    157,\012    145,\012    145,\012    708,\012    0,\012    708,\012    527,\012    0,\012    \"-210\",\012    970,\012    \"-305\",\012    717,\012    \"-8\",\012    775,\012    538,\012    \"-8\",\012    \"-261\",\012    970,\012    \"-305\",\012    24,\012    24,\012    24,\012    24,\012    760,\012    372,\012    970,\012    \"-305\",\012    760,\012    368,\012    970,\012    \"-305\"\012)";
}
);
id = m01;
metricValues = (
{
pos = 970;
},
{
pos = 708;
},
{
pos = 527;
},
{
},
{
pos = -305;
},
{
}
);
name = ExtraBold;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(540,-295,l),
(540,960,l),
(20,960,l),
(20,-295,l)
);
},
{
closed = 1;
nodes = (
(530,950,l),
(530,-285,l),
(30,-285,l),
(30,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 0 95 0 0 0 68 77 0 2 2 1 95 0 1 1 69 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = ".notdef";
},
{
glyphname = NULL;
layers = (
{
layerId = m01;
width = 0;
}
);
note = NULL;
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 193;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 280;
}
);
note = space;
unicode = 32;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,0,o),
(516,19,o),
(601,67,o),
(656,151,o),
(656,217,qs),
(656,278,o),
(603,365,o),
(551,385,q),
(589,408,o),
(624,481,o),
(624,525,qs),
(624,576,o),
(588,646,o),
(528,689,o),
(449,708,o),
(406,708,qs),
(73,708,l),
(73,0,l),
(358,0,ls)
);
},
{
closed = 1;
nodes = (
(236,560,l),
(366,560,ls),
(385,560,o),
(420,556,o),
(447,543,o),
(464,518,o),
(464,498,qs),
(464,458,o),
(401,427,o),
(351,427,qs),
(236,427,l)
);
},
{
closed = 1;
nodes = (
(377,292,ls),
(400,292,o),
(442,288,o),
(474,274,o),
(493,247,o),
(493,225,qs),
(493,200,o),
(472,169,o),
(436,153,o),
(387,147,o),
(359,147,qs),
(236,147,l),
(236,292,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
10 1 5 2 1 76 7 1 2 0 5 4 2 5 103 0 3 3 0 95 0 0 0 38 77 0 4 4 1 95 6 1 1 1 39 1 78 20 19 0 0 42 40 32 30 28 26 19 29 20 29 0 18 0 17 33 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = B;
unicode = 66;
},
{
glyphname = D;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(519,0,o),
(702,179,o),
(702,354,qs),
(702,441,o),
(652,573,o),
(559,663,o),
(426,708,o),
(343,708,qs),
(74,708,l),
(74,0,l),
(347,0,ls)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(341,559,ls),
(441,559,o),
(536,455,o),
(536,353,qs),
(536,306,o),
(516,230,o),
(471,176,o),
(400,147,o),
(349,147,qs),
(237,147,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 3 0 95 0 0 0 38 77 5 1 2 2 1 95 4 1 1 1 39 1 78 12 11 0 0 20 18 11 21 12 21 0 10 0 9 33 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,257,l),
(524,257,l),
(524,403,l),
(237,403,l),
(237,559,l),
(582,559,l),
(582,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 0 2 3 1 2 103 0 0 0 4 95 5 1 4 4 38 77 0 3 3 39 3 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
note = F;
unicode = 70;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,276,l),
(522,276,l),
(522,0,l),
(685,0,l),
(685,708,l),
(522,708,l),
(522,423,l),
(237,423,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 38 77 4 1 2 2 39 2 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = I;
unicode = 73;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(580,0,l),
(580,147,l),
(237,147,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,469,l),
(424,161,l),
(492,161,l),
(677,469,l),
(677,0,l),
(840,0,l),
(840,708,l),
(652,708,l),
(461,386,l),
(268,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 6 1 3 2 0 1 76 0 2 0 1 0 2 1 128 5 4 2 0 0 38 77 3 1 1 1 39 1 78 0 0 0 12 0 12 18 18 17 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 914;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,435,l),
(557,0,l),
(710,0,l),
(710,708,l),
(547,708,l),
(547,270,l),
(230,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
6 1 2 1 0 1 76 4 3 2 0 0 38 77 2 1 1 1 39 1 78 0 0 0 9 0 9 18 17 18 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = N;
unicode = 78;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,204,l),
(360,204,ls),
(419,204,o),
(521,236,o),
(596,301,o),
(638,397,o),
(638,462,qs),
(638,530,o),
(597,624,o),
(523,682,o),
(420,708,o),
(358,708,qs),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(355,559,ls),
(416,559,o),
(478,510,o),
(478,453,qs),
(476,402,o),
(410,348,o),
(356,348,qs),
(237,348,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 3 0 1 2 3 1 103 0 4 4 0 95 5 1 0 0 38 77 0 2 2 39 2 78 16 15 1 0 22 20 15 23 16 23 13 12 11 9 0 14 1 14 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = P;
unicode = 80;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,246,l),
(338,246,l),
(477,0,l),
(661,0,l),
(501,267,l),
(572,289,o),
(644,403,o),
(646,481,qs),
(646,551,o),
(596,640,o),
(516,690,o),
(416,708,o),
(367,708,qs),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(369,559,ls),
(394,559,o),
(437,552,o),
(468,533,o),
(486,500,o),
(485,475,qs),
(483,427,o),
(419,387,o),
(366,387,qs),
(237,387,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
8 1 2 4 1 76 7 1 4 0 2 1 4 2 103 0 5 5 0 95 6 1 0 0 38 77 3 1 1 1 39 1 78 17 16 1 0 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = R;
unicode = 82;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 38 77 0 2 2 0 97 4 1 0 0 47 0 78 1 0 20 19 14 12 7 6 0 25 1 25 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,708,l),
(1,708,l),
(276,0,l),
(440,0,l),
(716,708,l),
(539,708,l),
(362,204,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
6 1 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,0,l),
(819,0,l),
(995,708,l),
(812,708,l),
(712,206,l),
(603,708,l),
(395,708,l),
(284,206,l),
(184,708,l),
(0,708,l),
(176,0,l),
(389,0,l),
(497,492,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
12 7 4 3 0 1 1 76 3 2 2 1 1 38 77 4 1 0 0 39 0 78 17 18 18 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 995;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,708,l),
(9,708,l),
(249,355,l),
(1,0,l),
(185,0,l),
(345,234,l),
(499,0,l),
(692,0,l),
(447,354,l),
(686,708,l),
(496,708,l),
(350,473,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 693;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,708,l),
(272,263,l),
(272,0,l),
(435,0,l),
(435,264,l),
(434,264,l),
(435,264,l),
(703,708,l),
(519,708,l),
(477,634,o),
(396,488,o),
(355,414,q),
(189,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
10 5 2 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 18 20 19 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,128,l),
(31,0,l),
(597,0,l),
(597,147,l),
(241,147,l),
(604,580,l),
(604,708,l),
(39,708,l),
(39,559,l),
(394,559,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 3 0 8 1 2 1 2 76 4 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = Z;
unicode = 90;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(211,62,l),
(244,27,o),
(324,-8,o),
(379,-8,qs),
(434,-8,o),
(520,32,o),
(579,105,o),
(608,206,o),
(608,268,qs),
(608,329,o),
(578,428,o),
(519,499,o),
(434,538,o),
(381,538,qs),
(332,538,o),
(244,502,o),
(212,467,q),
(212,708,l)
);
},
{
closed = 1;
nodes = (
(408,373,o),
(436,336,o),
(450,290,o),
(450,266,qs),
(450,239,o),
(438,192,o),
(411,156,o),
(367,134,o),
(335,134,qs),
(274,136,o),
(212,212,o),
(212,267,qs),
(212,292,o),
(228,337,o),
(258,372,o),
(303,394,o),
(332,394,qs),
(364,394,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 16 1 1 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 16 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 3 38 77 6 1 4 4 0 97 0 0 0 49 77 0 5 5 1 97 2 1 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 38 77 6 1 4 4 0 97 0 0 0 49 77 0 2 2 39 77 0 5 5 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 30 28 21 38 22 38 17 19 40 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = b;
unicode = 98;
},
{
glyphname = d;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,708,l),
(430,708,l),
(430,489,l),
(402,514,o),
(328,538,o),
(284,538,qs),
(224,538,o),
(133,497,o),
(69,423,o),
(34,322,o),
(34,262,qs),
(34,205,o),
(65,106,o),
(126,33,o),
(214,-8,o),
(273,-8,qs),
(329,-6,o),
(403,23,o),
(434,57,q),
(438,0,l),
(588,0,l)
);
},
{
closed = 1;
nodes = (
(235,155,o),
(206,189,o),
(192,235,o),
(192,262,qs),
(192,287,o),
(205,334,o),
(234,371,o),
(279,392,o),
(311,392,qs),
(341,392,o),
(387,372,o),
(416,336,o),
(430,290,o),
(430,264,qs),
(430,237,o),
(416,191,o),
(386,156,o),
(341,134,o),
(311,133,qs),
(280,133,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
17 1 5 1 1 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
17 1 5 1 1 1 3 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 2 38 77 0 5 5 1 97 0 1 1 49 77 7 1 4 4 0 97 6 3 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 38 77 0 5 5 1 97 0 1 1 49 77 6 1 3 3 39 77 7 1 4 4 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 21 0 0 32 30 21 40 22 40 0 20 0 20 19 40 35 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = d;
unicode = 100;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(212,271,ls),
(212,292,o),
(221,335,o),
(244,372,o),
(282,394,o),
(311,394,qs),
(339,394,o),
(378,372,o),
(400,336,o),
(409,295,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,343,o),
(544,434,o),
(497,501,o),
(420,538,o),
(366,538,qs),
(349,538,o),
(311,533,o),
(271,518,o),
(230,493,o),
(212,474,q),
(212,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 1 2 0 1 76 0 2 0 1 0 2 1 128 0 4 4 38 77 0 0 0 49 77 3 1 1 1 39 1 78 17 21 37 21 36 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,527,l),
(65,0,l),
(222,0,l),
(222,527,l)
);
},
{
closed = 1;
nodes = (
(46,724,o),
(46,680,qs),
(46,633,o),
(103,585,o),
(143,585,qs),
(185,585,o),
(240,634,o),
(240,680,qs),
(240,724,o),
(185,774,o),
(143,774,qs),
(104,774,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = i;
unicode = 105;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(212,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,278,ls),
(212,297,o),
(216,338,o),
(232,372,o),
(267,394,o),
(293,394,qs),
(318,394,o),
(346,373,o),
(361,342,o),
(363,310,o),
(363,300,qs),
(363,0,l),
(520,0,l),
(520,254,ls),
(520,268,o),
(520,315,o),
(532,361,o),
(568,394,o),
(597,394,qs),
(621,394,o),
(650,374,o),
(665,345,o),
(669,313,o),
(669,300,qs),
(669,0,l),
(826,0,l),
(826,331,ls),
(826,377,o),
(807,452,o),
(766,507,o),
(702,537,o),
(655,537,qs),
(610,537,o),
(528,503,o),
(493,460,q),
(470,502,o),
(401,537,o),
(355,537,qs),
(318,537,o),
(242,507,o),
(210,465,q),
(198,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
6 1 3 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
6 1 3 7 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 3 0 97 7 1 2 0 0 49 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 7 7 41 77 5 1 3 3 0 97 1 1 0 0 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 21 37 21 37 21 36 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,266,ls),
(212,288,o),
(221,332,o),
(243,369,o),
(285,394,o),
(313,394,qs),
(341,394,o),
(379,375,o),
(401,341,o),
(409,299,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,347,o),
(545,441,o),
(516,476,qs),
(490,505,o),
(415,538,o),
(365,538,qs),
(327,537,o),
(245,507,o),
(210,469,q),
(202,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 21 37 22 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = n;
unicode = 110;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,-210,l),
(212,-210,l),
(212,52,l),
(272,-8,o),
(377,-8,qs),
(431,-8,o),
(518,33,o),
(577,106,o),
(608,208,o),
(608,269,qs),
(608,329,o),
(576,428,o),
(515,499,o),
(429,538,o),
(375,538,qs),
(328,538,o),
(243,504,o),
(211,465,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(408,373,o),
(436,336,o),
(450,290,o),
(450,266,qs),
(450,239,o),
(438,192,o),
(411,156,o),
(367,134,o),
(335,134,qs),
(274,136,o),
(212,212,o),
(212,267,qs),
(212,292,o),
(228,337,o),
(259,373,o),
(303,394,o),
(332,394,qs),
(364,394,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 0 97 3 1 0 0 49 77 0 5 5 1 97 0 1 1 47 77 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 4 4 0 97 3 1 0 0 49 77 0 5 5 1 97 0 1 1 47 77 0 2 2 0 97 3 1 0 0 49 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 0 97 0 0 0 49 77 0 5 5 1 97 0 1 1 47 77 0 2 2 3 95 0 3 3 41 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
21 20 29 27 20 37 21 37 17 18 40 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,-210,l),
(589,527,l),
(447,527,l),
(436,475,l),
(410,508,o),
(334,538,o),
(289,538,qs),
(230,538,o),
(136,497,o),
(70,424,o),
(34,323,o),
(34,263,qs),
(34,206,o),
(65,108,o),
(125,34,o),
(219,-9,o),
(280,-9,qs),
(321,-9,o),
(402,14,o),
(431,43,q),
(431,-210,l)
);
},
{
closed = 1;
nodes = (
(236,155,o),
(207,191,o),
(192,238,o),
(192,265,qs),
(192,290,o),
(206,336,o),
(236,372,o),
(282,392,o),
(312,392,qs),
(371,392,o),
(430,318,o),
(430,264,qs),
(430,237,o),
(415,190,o),
(386,155,o),
(341,133,o),
(312,133,qs),
(282,133,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
16 1 5 1 0 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
16 1 5 2 0 1 0 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 1 97 2 1 1 1 49 77 6 1 4 4 0 97 0 0 0 47 77 0 3 3 43 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 5 5 1 97 2 1 1 1 49 77 6 1 4 4 0 97 0 0 0 47 77 0 3 3 1 97 2 1 1 1 49 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 1 97 0 1 1 49 77 6 1 4 4 0 97 0 0 0 47 77 0 3 3 2 95 0 2 2 41 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 30 28 21 38 22 38 17 19 40 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = q;
unicode = 113;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 41 77 4 1 0 0 2 97 0 2 2 47 2 78 1 0 20 19 14 12 7 6 0 23 1 23 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,527,l),
(1,527,l),
(195,0,l),
(380,0,l),
(574,527,l),
(401,527,l),
(288,174,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
6 1 1 0 1 76 2 1 0 0 41 77 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,328,l),
(534,0,l),
(707,0,l),
(872,527,l),
(705,527,l),
(619,186,l),
(522,527,l),
(359,527,l),
(262,186,l),
(175,527,l),
(1,527,l),
(166,0,l),
(341,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 41 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 873;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,527,l),
(10,527,l),
(179,268,l),
(1,0,l),
(178,0,l),
(278,164,l),
(379,0,l),
(562,0,l),
(379,266,l),
(550,527,l),
(372,527,l),
(283,370,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 41 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = x;
unicode = 120;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,527,l),
(34,387,l),
(273,387,l),
(34,115,l),
(34,0,l),
(480,0,l),
(480,140,l),
(240,140,l),
(480,412,l),
(480,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 5 1 1 0 2 76 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = z;
unicode = 122;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,129,o),
(54,83,qs),
(54,35,o),
(108,-13,o),
(149,-13,qs),
(189,-13,o),
(243,35,o),
(243,83,qs),
(243,130,o),
(189,180,o),
(149,180,qs),
(109,180,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 47 1 78 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,-54,o),
(96,-81,o),
(67,-103,o),
(54,-110,q),
(97,-175,l),
(128,-165,o),
(188,-123,o),
(236,-64,o),
(266,9,o),
(267,48,qs),
(269,102,o),
(216,176,o),
(164,176,qs),
(124,176,o),
(64,128,o),
(64,81,qs),
(64,39,o),
(114,-6,o),
(148,-9,q),
(143,-24,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = comma;
unicode = 44;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,263,l),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 1 0 2 1 76 0 0 5 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 3 3 3 10 3 10 17 17 19 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = A;
unicode = 65;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,668,o),
(207,583,o),
(295,583,qs),
(383,583,o),
(489,668,o),
(490,760,q),
(364,760,l),
(363,726,o),
(330,690,o),
(295,690,qs),
(260,690,o),
(227,726,o),
(226,760,q),
(100,760,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
4 3 2 1 0 0 1 112 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 13 0 13 34 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 590;
}
);
note = breve;
unicode = 728;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,769,l),
(100,584,l),
(246,584,l),
(309,671,l),
(374,584,l),
(520,584,l),
(360,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 620;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-318,-212,o),
(-337,-231,o),
(-360,-247,o),
(-370,-253,q),
(-337,-301,l),
(-313,-292,o),
(-266,-261,o),
(-231,-217,o),
(-210,-165,o),
(-210,-136,qs),
(-210,-100,o),
(-252,-46,o),
(-290,-46,qs),
(-322,-46,o),
(-363,-82,o),
(-363,-115,qs),
(-363,-145,o),
(-326,-178,o),
(-300,-180,q),
(-303,-190,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
15 14 0 3 0 73 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,131,o),
(64,84,qs),
(64,37,o),
(122,-9,o),
(161,-9,qs),
(180,-9,o),
(214,3,o),
(240,26,o),
(256,61,o),
(256,84,qs),
(256,131,o),
(201,179,o),
(161,179,qs),
(121,179,o)
);
},
{
closed = 1;
nodes = (
(76,708,l),
(88,242,l),
(233,242,l),
(246,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 2 3 95 0 3 3 38 77 4 1 0 0 1 97 0 1 1 47 1 78 1 0 17 16 15 14 9 7 0 13 1 13 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,708,l),
(261,425,l),
(367,425,l),
(391,708,l)
);
},
{
closed = 1;
nodes = (
(46,708,l),
(65,425,l),
(171,425,l),
(194,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 38 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,708,l),
(76,425,l),
(182,425,l),
(206,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 38 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 260;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(439,708,l),
(418,542,l),
(313,542,l),
(332,708,l),
(204,708,l),
(183,542,l),
(74,542,l),
(74,406,l),
(167,406,l),
(154,301,l),
(155,301,l),
(46,301,l),
(46,165,l),
(138,165,l),
(117,0,l),
(248,0,l),
(268,165,l),
(373,165,l),
(354,0,l),
(482,0,l),
(487,42,o),
(497,122,o),
(503,165,q),
(611,165,l),
(611,301,l),
(519,301,l),
(532,406,l),
(640,406,l),
(640,542,l),
(548,542,l),
(568,708,l)
);
},
{
closed = 1;
nodes = (
(296,406,l),
(402,406,l),
(390,301,l),
(284,301,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
16 15 8 3 2 7 5 2 3 4 2 3 103 13 1 11 11 38 77 14 9 2 1 1 0 95 12 10 2 0 0 41 77 6 1 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
12 10 2 0 14 9 2 1 2 0 1 104 16 15 8 3 2 7 5 2 3 4 2 3 103 13 1 11 11 38 77 6 1 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
31 31 31 34 31 34 33 32 30 29 28 27 26 25 24 23 22 21 17 17 17 17 19 17 17 17 16 17 8 31 
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(788,15,o),
(835,62,o),
(861,127,o),
(861,167,qs),
(861,251,o),
(764,348,o),
(682,348,qs),
(641,348,o),
(575,322,o),
(528,275,o),
(502,208,o),
(502,167,qs),
(502,127,o),
(528,62,o),
(575,15,o),
(641,-11,o),
(682,-11,qs),
(722,-11,o)
);
},
{
closed = 1;
nodes = (
(332,387,o),
(378,434,o),
(404,500,o),
(404,540,qs),
(404,623,o),
(307,720,o),
(225,720,qs),
(184,720,o),
(118,694,o),
(72,647,o),
(46,580,o),
(46,540,qs),
(46,500,o),
(71,434,o),
(117,387,o),
(184,361,o),
(225,361,qs),
(265,361,o)
);
},
{
closed = 1;
nodes = (
(764,708,l),
(604,708,l),
(138,0,l),
(301,0,l)
);
},
{
closed = 1;
nodes = (
(284,564,o),
(284,540,qs),
(284,515,o),
(257,477,o),
(225,477,qs),
(191,477,o),
(165,516,o),
(165,542,qs),
(165,566,o),
(193,603,o),
(225,603,qs),
(257,603,o)
);
},
{
closed = 1;
nodes = (
(741,192,o),
(741,167,qs),
(741,142,o),
(714,104,o),
(682,104,qs),
(648,104,o),
(622,142,o),
(622,168,qs),
(622,193,o),
(651,231,o),
(682,231,qs),
(714,231,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 11 1 2 1 7 2 105 0 1 14 1 8 9 1 8 106 13 1 6 6 3 97 4 1 3 3 46 77 0 9 9 0 97 12 5 10 3 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 7 11 1 2 1 7 2 105 0 1 14 1 8 9 1 8 106 0 4 4 38 77 13 1 6 6 3 97 0 3 3 46 77 0 9 9 0 97 12 5 10 3 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 7 11 1 2 1 7 2 105 0 1 14 1 8 9 1 8 106 0 4 4 38 77 13 1 6 6 3 97 0 3 3 46 77 12 1 5 5 39 77 0 9 9 0 97 10 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
53 52 41 40 36 36 19 18 1 0 59 57 52 63 53 63 47 45 40 51 41 51 36 39 36 39 38 37 29 27 18 35 19 35 11 9 0 17 1 17 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 907;
}
);
note = percent;
unicode = 37;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,545,l),
(155,523,l),
(87,447,l),
(192,371,l),
(243,458,l),
(294,371,l),
(399,447,l),
(382,466,o),
(349,504,o),
(332,523,q),
(431,545,l),
(391,668,l),
(298,627,l),
(300,653,o),
(305,702,o),
(308,727,q),
(179,727,l),
(181,702,o),
(186,653,o),
(189,627,q),
(96,668,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 19 18 17 16 15 14 13 10 9 8 7 12 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 0 0 38 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
19 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 487;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(543,430,l),
(370,430,l),
(370,603,l),
(233,603,l),
(233,430,l),
(61,430,l),
(61,292,l),
(233,292,l),
(233,117,l),
(370,117,l),
(370,292,l),
(543,292,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 3 87 4 1 2 6 5 2 1 0 2 1 103 0 3 3 0 95 0 0 3 0 79 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = plus;
unicode = 43;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,781,l),
(339,781,l),
(260,543,o),
(104,73,o),
(26,-165,q),
(180,-165,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 5 0 5 19 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = slash;
unicode = 47;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,475,o),
(54,430,qs),
(54,382,o),
(109,334,o),
(150,334,qs),
(192,334,o),
(246,382,o),
(246,430,qs),
(246,475,o),
(192,528,o),
(150,528,qs),
(110,528,o)
);
},
{
closed = 1;
nodes = (
(54,132,o),
(54,87,qs),
(54,39,o),
(109,-9,o),
(150,-9,qs),
(192,-9,o),
(246,39,o),
(246,87,qs),
(246,132,o),
(192,184,o),
(150,184,qs),
(110,184,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 0 97 4 1 0 0 41 77 5 1 2 2 3 97 0 3 3 47 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 300;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,-52,o),
(97,-79,o),
(67,-102,o),
(54,-109,q),
(98,-175,l),
(131,-164,o),
(192,-120,o),
(239,-60,o),
(267,12,o),
(267,51,qs),
(267,76,o),
(255,122,o),
(229,157,o),
(191,177,o),
(164,177,qs),
(123,177,o),
(65,130,o),
(65,82,qs),
(65,41,o),
(113,-5,o),
(148,-8,q),
(143,-22,o)
);
},
{
closed = 1;
nodes = (
(68,475,o),
(68,430,qs),
(68,382,o),
(123,334,o),
(165,334,qs),
(206,334,o),
(260,382,o),
(260,430,qs),
(260,475,o),
(206,528,o),
(165,528,qs),
(124,528,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
17 16 2 0 73 0 0 2 0 134 0 2 2 1 97 3 1 1 1 41 2 78 23 22 29 27 22 33 23 33 37 4 8 23 
CALL[ ]	/* CallFunction */";
};
width = 321;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(26,398,l),
(26,318,l),
(443,71,l),
(443,232,l),
(221,363,l),
(443,491,l),
(443,648,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 3 1 50 
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,547,l),
(56,547,l),
(56,410,l),
(520,410,l)
);
},
{
closed = 1;
nodes = (
(520,294,l),
(56,294,l),
(56,156,l),
(520,156,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 41 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 4 1 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 5 1 3 2 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,323,l),
(472,403,l),
(56,649,l),
(56,489,l),
(277,359,l),
(56,230,l),
(56,72,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 3 1 50 
CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = greater;
unicode = 62;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,346,o),
(443,378,o),
(482,397,o),
(508,397,qs),
(529,397,o),
(559,380,o),
(579,352,o),
(588,317,o),
(588,299,qs),
(588,279,o),
(579,233,o),
(556,194,o),
(518,168,o),
(489,168,qs),
(443,170,o),
(402,236,o),
(402,280,qs),
(403,303,o)
);
},
{
closed = 1;
nodes = (
(629,-143,q),
(611,-15,l),
(581,-23,o),
(526,-31,o),
(485,-31,qs),
(413,-31,o),
(303,15,o),
(229,96,o),
(191,207,o),
(191,273,qs),
(192,343,o),
(237,462,o),
(322,550,o),
(446,600,o),
(527,600,qs),
(598,600,o),
(708,560,o),
(783,485,o),
(822,379,o),
(822,312,qs),
(822,290,o),
(817,239,o),
(801,195,o),
(773,165,o),
(751,165,qs),
(735,166,o),
(716,179,o),
(705,198,o),
(701,223,o),
(701,235,qs),
(701,284,o),
(722,411,o),
(736,483,q),
(648,494,l),
(628,447,l),
(620,466,o),
(591,493,o),
(555,509,o),
(517,516,o),
(499,516,qs),
(452,516,o),
(373,480,o),
(314,415,o),
(280,325,o),
(279,270,qs),
(279,223,o),
(304,143,o),
(352,83,o),
(422,49,o),
(468,49,qs),
(487,49,o),
(530,58,o),
(570,77,o),
(606,107,o),
(619,127,q),
(629,101,o),
(660,68,o),
(697,50,o),
(736,44,o),
(753,44,qs),
(804,45,o),
(878,91,o),
(926,166,o),
(949,263,o),
(949,315,qs),
(949,413,o),
(887,566,o),
(776,671,o),
(620,726,o),
(527,726,qs),
(432,726,o),
(261,668,o),
(132,552,o),
(57,377,o),
(57,261,qs),
(57,162,o),
(119,6,o),
(231,-102,o),
(387,-161,o),
(480,-162,qs),
(557,-162,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
65 64 63 3 1 6 43 1 4 0 96 1 9 4 97 1 2 9 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
65 64 63 3 1 6 43 1 5 0 96 1 9 4 97 1 2 9 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 0 5 1 4 9 0 4 105 0 9 10 1 2 9 2 101 0 8 8 3 97 0 3 3 46 77 0 1 1 6 97 0 6 6 41 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 0 1 0 6 1 105 0 5 4 0 5 89 7 1 0 0 4 9 0 4 105 0 9 10 1 2 9 2 101 0 8 8 3 97 0 3 3 46 8 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
19 18 94 92 84 82 74 72 59 57 49 47 39 37 29 27 18 98 19 98 40 34 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 1005;
}
);
note = at;
unicode = 64;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,-166,l),
(347,-30,l),
(227,-30,l),
(227,645,l),
(347,645,l),
(347,781,l),
(74,781,l),
(74,-166,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,781,l),
(22,645,l),
(141,645,l),
(141,-30,l),
(22,-30,l),
(22,-166,l),
(294,-166,l),
(294,781,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,781,l),
(26,781,l),
(339,-166,l),
(494,-166,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,709,l),
(222,709,l),
(46,444,l),
(193,444,l),
(279,585,l),
(363,444,l),
(514,444,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
1 1 0 1 1 76 0 1 0 1 133 3 2 2 0 0 118 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 560;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,-17,l),
(-16,-17,l),
(-16,-153,l),
(448,-153,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 432;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,392,o),
(267,427,qs),
(267,592,ls),
(267,601,o),
(269,620,o),
(278,635,o),
(296,645,o),
(313,645,qs),
(377,645,l),
(377,781,l),
(260,781,ls),
(193,781,o),
(116,721,o),
(116,648,qs),
(116,454,ls),
(116,444,o),
(114,417,o),
(103,393,o),
(79,376,o),
(57,376,qs),
(24,376,l),
(24,240,l),
(57,240,ls),
(79,240,o),
(103,223,o),
(114,199,o),
(116,173,o),
(116,163,qs),
(116,-31,ls),
(116,-105,o),
(194,-165,o),
(260,-165,qs),
(377,-165,l),
(377,-29,l),
(313,-29,ls),
(296,-29,o),
(278,-19,o),
(269,-3,o),
(267,16,o),
(267,24,qs),
(267,189,ls),
(267,223,o),
(246,292,o),
(218,308,q),
(246,324,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
4 1 0 2 1 76 0 4 0 5 3 4 5 105 0 3 0 2 0 3 2 105 0 0 1 1 0 89 0 0 0 1 95 0 1 0 1 79 33 39 33 39 33 40 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,797,l),
(74,797,l),
(74,-169,l),
(219,-169,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,273,o),
(161,241,o),
(156,205,o),
(156,189,qs),
(156,25,ls),
(156,16,o),
(154,-4,o),
(145,-19,o),
(126,-29,o),
(110,-29,qs),
(46,-29,l),
(46,-165,l),
(164,-165,ls),
(231,-165,o),
(307,-103,o),
(307,-31,qs),
(307,163,ls),
(307,173,o),
(309,199,o),
(320,223,o),
(344,240,o),
(366,240,qs),
(399,240,l),
(399,376,l),
(366,376,ls),
(344,376,o),
(320,392,o),
(309,416,o),
(307,443,o),
(307,454,qs),
(307,648,ls),
(307,720,o),
(232,781,o),
(164,781,qs),
(46,781,l),
(46,645,l),
(110,645,ls),
(126,645,o),
(145,635,o),
(154,620,o),
(156,601,o),
(156,592,qs),
(156,427,ls),
(156,410,o),
(161,373,o),
(172,340,o),
(191,314,o),
(206,308,q),
(192,300,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 1 0 0 2 1 0 105 0 2 0 3 5 2 3 105 0 5 4 4 5 89 0 5 5 4 95 0 4 5 4 79 33 39 33 39 33 42 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(669,37,o),
(715,88,q),
(632,199,l),
(600,167,o),
(525,137,o),
(478,137,qs),
(429,137,o),
(345,172,o),
(328,210,q),
(515,210,l),
(520,241,o),
(532,300,o),
(538,331,q),
(296,331,l),
(296,342,o),
(295,366,o),
(296,378,q),
(544,378,l),
(567,499,l),
(329,499,l),
(351,539,o),
(434,575,o),
(478,575,qs),
(505,575,o),
(547,566,o),
(582,550,o),
(612,529,o),
(626,516,q),
(707,625,l),
(656,676,o),
(545,715,o),
(472,715,qs),
(418,715,o),
(320,688,o),
(238,634,o),
(175,553,o),
(156,499,q),
(66,499,l),
(61,468,o),
(48,408,o),
(43,378,q),
(136,378,l),
(136,331,l),
(60,331,l),
(36,210,l),
(154,210,l),
(168,157,o),
(227,76,o),
(311,20,o),
(415,-8,o),
(475,-8,qs),
(550,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
22 1 6 5 23 1 4 6 48 1 11 1 49 1 0 11 4 76 7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 0 11 11 0 97 12 1 0 0 47 0 78 1 0 46 44 42 41 38 37 34 33 32 31 29 27 20 18 14 13 10 9 8 7 6 5 0 51 1 51 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,-49,o),
(95,-74,o),
(67,-97,o),
(54,-104,q),
(95,-165,l),
(126,-155,o),
(184,-113,o),
(229,-56,o),
(256,12,o),
(256,49,qs),
(256,73,o),
(244,116,o),
(220,149,o),
(183,169,o),
(158,169,qs),
(119,169,o),
(64,124,o),
(64,79,qs),
(64,40,o),
(109,-5,o),
(143,-7,q),
(139,-21,o)
);
},
{
closed = 1;
nodes = (
(359,-49,o),
(334,-74,o),
(306,-97,o),
(293,-104,q),
(334,-165,l),
(365,-155,o),
(423,-113,o),
(468,-56,o),
(495,12,o),
(495,49,qs),
(495,73,o),
(484,116,o),
(460,149,o),
(423,169,o),
(398,169,qs),
(359,169,o),
(303,124,o),
(303,79,qs),
(303,40,o),
(348,-5,o),
(382,-7,q),
(378,-21,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
39 38 17 16 4 0 73 3 1 1 1 0 97 2 1 0 0 47 0 78 36 31 36 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,-49,o),
(95,-74,o),
(67,-97,o),
(54,-104,q),
(95,-165,l),
(125,-156,o),
(183,-114,o),
(228,-57,o),
(256,12,o),
(256,49,qs),
(256,73,o),
(244,116,o),
(220,149,o),
(183,169,o),
(158,169,qs),
(119,169,o),
(64,124,o),
(64,79,qs),
(64,40,o),
(109,-5,o),
(142,-7,q),
(139,-21,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
17 16 2 0 73 0 1 1 0 97 0 0 0 47 0 78 36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,522,o),
(95,496,o),
(67,474,o),
(54,467,q),
(64,451,o),
(85,421,o),
(95,405,q),
(126,415,o),
(184,457,o),
(229,513,o),
(256,582,o),
(256,619,qs),
(256,643,o),
(244,686,o),
(220,719,o),
(183,739,o),
(158,739,qs),
(119,739,o),
(64,694,o),
(64,649,qs),
(64,610,o),
(109,565,o),
(143,563,q),
(139,550,o)
);
},
{
closed = 1;
nodes = (
(359,522,o),
(334,496,o),
(306,474,o),
(293,467,q),
(303,451,o),
(324,421,o),
(334,405,q),
(365,415,o),
(423,457,o),
(468,513,o),
(495,582,o),
(495,619,qs),
(495,643,o),
(484,686,o),
(460,719,o),
(423,739,o),
(398,739,qs),
(359,739,o),
(303,694,o),
(303,649,qs),
(303,610,o),
(348,565,o),
(382,563,q),
(378,550,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
43 40 19 16 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 0 1 97 3 1 1 1 46 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
31 29 25 24 36 16 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,522,o),
(95,496,o),
(67,474,o),
(54,467,q),
(64,451,o),
(85,421,o),
(95,405,q),
(125,414,o),
(183,456,o),
(228,513,o),
(256,582,o),
(256,619,qs),
(256,643,o),
(244,686,o),
(220,719,o),
(183,739,o),
(158,739,qs),
(119,739,o),
(64,694,o),
(64,649,qs),
(64,610,o),
(109,565,o),
(142,563,q),
(139,550,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
19 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 97 0 1 1 46 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,650,o),
(455,676,o),
(483,697,o),
(496,705,q),
(486,721,o),
(465,751,o),
(455,767,q),
(424,756,o),
(366,714,o),
(321,658,o),
(294,590,o),
(294,553,qs),
(294,529,o),
(305,485,o),
(329,452,o),
(366,432,o),
(392,432,qs),
(430,431,o),
(486,478,o),
(486,523,qs),
(486,561,o),
(441,606,o),
(407,608,q),
(411,622,o)
);
},
{
closed = 1;
nodes = (
(191,650,o),
(216,676,o),
(244,697,o),
(257,705,q),
(247,721,o),
(226,751,o),
(216,767,q),
(185,756,o),
(127,714,o),
(82,658,o),
(55,590,o),
(55,553,qs),
(55,529,o),
(66,485,o),
(90,452,o),
(127,432,o),
(152,432,qs),
(191,431,o),
(247,478,o),
(247,523,qs),
(247,561,o),
(202,606,o),
(168,608,q),
(172,622,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
43 40 19 16 4 0 74 2 1 0 1 1 0 89 2 1 0 0 1 97 3 1 1 0 1 81 31 29 25 24 36 16 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,650,o),
(216,676,o),
(244,697,o),
(257,705,q),
(215,767,l),
(184,756,o),
(127,714,o),
(82,658,o),
(55,590,o),
(55,553,qs),
(55,529,o),
(66,485,o),
(90,452,o),
(127,432,o),
(152,432,qs),
(190,431,o),
(247,478,o),
(247,523,qs),
(247,561,o),
(201,606,o),
(168,608,q),
(172,622,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
17 16 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,430,l),
(61,430,l),
(61,292,l),
(524,292,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,362,l),
(61,224,l),
(406,224,l),
(406,362,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,362,l),
(61,224,l),
(574,224,l),
(574,362,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,362,l),
(61,224,l),
(795,224,l),
(795,362,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 856;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,769,l),
(46,769,l),
(199,584,l),
(329,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 421;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,584,l),
(375,769,l),
(212,769,l),
(92,584,l),
(92,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 421;
}
);
note = acute;
unicode = 180;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,79,l),
(197,79,l),
(332,273,l),
(197,468,l),
(46,468,l),
(184,273,l)
);
},
{
closed = 1;
nodes = (
(288,79,l),
(439,79,l),
(576,273,l),
(439,468,l),
(288,468,l),
(426,273,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,79,l),
(210,79,l),
(346,274,l),
(210,468,l),
(46,468,l),
(185,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,468,l),
(26,274,l),
(162,79,l),
(314,79,l),
(176,274,l),
(314,468,l)
);
},
{
closed = 1;
nodes = (
(403,468,l),
(268,274,l),
(403,79,l),
(556,79,l),
(418,274,l),
(556,468,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 0 1 1 76 3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(161,468,l),
(26,274,l),
(161,79,l),
(325,79,l),
(187,274,l),
(325,468,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,361,l),
(61,225,l),
(406,225,l),
(406,361,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,133,o),
(44,87,qs),
(44,39,o),
(100,-9,o),
(140,-9,qs),
(181,-9,o),
(236,39,o),
(236,87,qs),
(236,133,o),
(181,184,o),
(140,184,qs),
(101,184,o)
);
},
{
closed = 1;
nodes = (
(305,133,o),
(305,87,qs),
(305,39,o),
(361,-9,o),
(401,-9,qs),
(442,-9,o),
(497,39,o),
(497,87,qs),
(497,133,o),
(442,184,o),
(401,184,qs),
(362,184,o)
);
},
{
closed = 1;
nodes = (
(564,133,o),
(564,87,qs),
(564,39,o),
(620,-9,o),
(661,-9,qs),
(701,-9,o),
(756,39,o),
(756,87,qs),
(756,133,o),
(701,184,o),
(661,184,qs),
(622,184,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 4 7 2 6 5 0 0 1 97 5 3 2 1 1 47 1 78 25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = uni0445;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,527,l),
(10,527,l),
(179,268,l),
(1,0,l),
(178,0,l),
(278,164,l),
(379,0,l),
(562,0,l),
(379,266,l),
(550,527,l),
(372,527,l),
(283,370,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 22 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = uni0445;
unicode = 1093;
},
{
glyphname = uni0431;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,148,o),
(131,53,o),
(239,-7,o),
(318,-8,qs),
(379,-8,o),
(481,29,o),
(553,100,o),
(594,201,o),
(594,265,qs),
(594,316,o),
(563,403,o),
(503,468,o),
(417,504,o),
(364,504,qs),
(340,504,o),
(291,496,o),
(242,477,o),
(199,445,o),
(181,422,q),
(181,464,o),
(205,518,o),
(246,553,o),
(301,571,o),
(360,580,o),
(420,583,o),
(446,584,qs),
(479,586,o),
(539,592,o),
(563,600,q),
(563,760,l),
(551,755,o),
(523,751,o),
(485,745,o),
(430,738,o),
(399,735,qs),
(362,732,o),
(286,721,o),
(216,703,o),
(154,670,o),
(127,644,qs),
(74,589,o),
(34,433,o),
(34,334,qs),
(35,271,o)
);
},
{
closed = 1;
nodes = (
(244,154,o),
(217,186,o),
(204,228,o),
(204,249,qs),
(204,297,o),
(271,358,o),
(324,358,qs),
(379,358,o),
(435,292,o),
(435,246,qs),
(435,225,o),
(420,182,o),
(392,152,o),
(347,133,o),
(319,133,qs),
(289,133,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
24 1 4 1 1 76 14 13 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 0 133 0 4 4 1 97 0 1 1 22 77 5 1 3 3 2 97 0 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 1 0 133 0 1 0 4 3 1 4 105 5 1 3 3 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
45 44 53 51 44 59 45 59 40 38 30 28 19 16 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = uni0431;
unicode = 1073;
},
{
glyphname = uni0432;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,0,l),
(324,0,ls),
(358,0,o),
(434,12,o),
(499,47,o),
(541,111,o),
(541,162,qs),
(541,204,o),
(504,267,o),
(468,282,q),
(494,297,o),
(524,354,o),
(524,385,qs),
(524,427,o),
(492,483,o),
(440,515,o),
(376,527,o),
(344,527,qs),
(55,527,l)
);
},
{
closed = 1;
nodes = (
(212,211,l),
(332,211,ls),
(357,211,o),
(384,192,o),
(384,171,qs),
(384,145,o),
(346,124,o),
(322,124,qs),
(212,124,l)
);
},
{
closed = 1;
nodes = (
(212,403,l),
(325,403,ls),
(347,403,o),
(373,381,o),
(372,363,qs),
(372,344,o),
(342,323,o),
(322,323,qs),
(212,323,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
8 1 3 4 1 76 8 1 4 0 3 2 4 3 103 0 5 5 0 95 6 1 0 0 22 77 7 1 2 2 1 95 0 1 1 21 1 78 29 28 20 19 1 0 35 33 28 36 29 36 26 24 19 27 20 27 17 15 0 18 1 18 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni0432;
unicode = 1074;
},
{
glyphname = uni0433;
kernLeft = uni0432;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,0,l),
(212,0,l),
(212,387,l),
(446,387,l),
(446,527,l),
(55,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 2 95 3 1 2 2 22 77 0 1 1 21 1 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = uni0433;
unicode = 1075;
},
{
glyphname = uni0434;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,467,o),
(113,345,o),
(105,284,qs),
(102,262,o),
(90,211,o),
(67,168,o),
(33,138,o),
(9,138,q),
(9,-142,l),
(164,-142,l),
(164,0,l),
(474,0,l),
(474,-142,l),
(630,-142,l),
(630,140,l),
(563,140,l),
(563,527,l),
(117,527,l)
);
},
{
closed = 1;
nodes = (
(235,168,o),
(248,229,o),
(254,294,o),
(255,358,o),
(257,387,q),
(405,387,l),
(405,140,l),
(222,140,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
3 1 1 0 1 83 0 6 6 5 95 8 1 5 5 22 77 9 7 4 3 0 0 2 95 0 2 2 21 2 78 18 18 0 0 18 25 18 25 20 19 0 17 0 17 17 17 17 17 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = uni0434;
unicode = 1076;
},
{
glyphname = uni0436;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(676,0,l),
(857,0,l),
(710,276,l),
(849,527,l),
(675,527,l),
(581,331,l),
(508,331,l),
(508,527,l),
(350,527,l),
(350,331,l),
(278,331,l),
(182,527,l),
(9,527,l),
(146,276,l),
(1,0,l),
(182,0,l),
(274,191,l),
(350,191,l),
(350,0,l),
(508,0,l),
(508,191,l),
(585,191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
18 7 2 1 4 1 76 6 1 4 10 9 2 1 0 4 1 103 7 5 2 3 3 22 77 8 2 2 0 0 21 0 78 0 0 0 21 0 21 18 17 17 17 17 18 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 859;
}
);
note = uni0436;
unicode = 1078;
},
{
glyphname = uni043A;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(397,0,l),
(581,0,l),
(422,279,l),
(579,527,l),
(398,527,l),
(286,332,l),
(212,332,l),
(212,527,l),
(55,527,l),
(55,0,l),
(212,0,l),
(212,191,l),
(292,191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 22 77 4 1 0 0 21 0 78 0 0 0 12 0 12 18 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni043A;
unicode = 1082;
},
{
glyphname = uni0438;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(194,0,l),
(411,272,l),
(411,0,l),
(569,0,l),
(569,527,l),
(437,527,l),
(212,244,l),
(212,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
5 0 2 1 0 1 76 3 1 0 0 22 77 2 1 1 1 21 1 78 17 18 17 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = uni0438;
unicode = 1080;
},
{
glyphname = uni0439;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,645,o),
(522,731,q),
(390,731,l),
(381,672,o),
(321,672,qs),
(295,672,o),
(258,702,o),
(253,731,q),
(120,731,l),
(123,689,o),
(156,625,o),
(208,583,o),
(279,562,o),
(321,562,qs),
(407,562,o)
);
},
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(194,0,l),
(411,272,l),
(411,0,l),
(569,0,l),
(569,527,l),
(437,527,l),
(212,244,l),
(212,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 15 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 8 1 0 4 2 0 106 3 1 1 1 20 77 7 1 4 4 22 77 6 1 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
3 1 1 2 1 133 0 2 8 1 0 4 2 0 106 7 1 4 4 22 77 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 24 23 22 21 19 18 17 16 12 11 10 8 6 5 0 14 1 14 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = uni0439;
unicode = 1081;
},
{
glyphname = uni043B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,509,o),
(103,458,o),
(102,400,o),
(100,333,o),
(98,306,qs),
(96,272,o),
(86,210,o),
(67,165,o),
(32,137,o),
(6,137,q),
(6,0,l),
(48,0,ls),
(81,0,o),
(140,10,o),
(188,42,o),
(223,101,o),
(231,148,qs),
(242,207,o),
(245,331,o),
(246,386,q),
(377,386,l),
(377,0,l),
(534,0,l),
(534,527,l),
(103,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
19 1 3 1 1 76 0 1 1 4 95 5 1 4 4 22 77 0 3 3 0 97 2 1 0 0 21 0 78 0 0 0 24 0 24 17 39 17 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = uni043B;
unicode = 1083;
},
{
glyphname = uni043C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,298,l),
(530,0,l),
(688,0,l),
(688,527,l),
(518,527,l),
(373,307,l),
(227,527,l),
(55,527,l),
(55,0,l),
(212,0,l),
(212,299,l),
(351,94,l),
(394,94,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 1 3 4 1 1 76 5 1 4 1 0 1 4 0 128 2 1 1 1 22 77 3 1 0 0 21 0 78 0 0 0 12 0 12 17 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = uni043C;
unicode = 1084;
},
{
glyphname = uni043D;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,193,l),
(392,193,l),
(392,0,l),
(549,0,l),
(549,527,l),
(392,527,l),
(392,333,l),
(212,333,l),
(212,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 22 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = uni043D;
unicode = 1085;
},
{
glyphname = uni043F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,0,l),
(212,0,l),
(212,387,l),
(389,387,l),
(389,0,l),
(546,0,l),
(546,527,l),
(55,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 1 3 95 4 1 3 3 22 77 2 1 0 0 21 0 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = uni043F;
unicode = 1087;
},
{
glyphname = uni0442;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,0,l),
(324,0,l),
(324,387,l),
(495,387,l),
(495,527,l),
(-4,527,l),
(-4,387,l),
(167,387,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 22 77 0 2 2 21 2 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 491;
}
);
note = uni0442;
unicode = 1090;
},
{
glyphname = uni0444;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,537,l),
(260,537,o),
(152,503,o),
(74,434,o),
(30,331,o),
(31,264,qs),
(32,197,o),
(77,97,o),
(155,30,o),
(261,-4,o),
(323,-6,q),
(323,-211,l),
(481,-211,l),
(481,-7,l),
(543,-4,o),
(649,30,o),
(726,96,o),
(771,194,o),
(773,261,qs),
(773,330,o),
(730,433,o),
(652,502,o),
(544,536,o),
(481,537,q),
(481,705,l),
(323,705,l)
);
},
{
closed = 1;
nodes = (
(261,134,o),
(192,206,o),
(192,265,qs),
(192,323,o),
(260,395,o),
(323,395,q),
(323,133,l)
);
},
{
closed = 1;
nodes = (
(544,395,o),
(612,323,o),
(612,265,qs),
(612,206,o),
(543,134,o),
(481,133,q),
(481,395,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
10 1 5 5 20 77 9 1 6 6 0 97 4 1 0 0 29 77 8 1 7 7 1 97 3 1 1 1 28 77 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 1 6 6 0 97 4 1 0 0 29 77 8 1 7 7 1 97 3 1 1 1 28 77 0 2 2 5 95 10 1 5 5 20 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 39 38 34 33 32 31 27 26 0 25 0 25 24 17 17 24 17 11 7 27 
CALL[ ]	/* CallFunction */";
};
width = 803;
}
);
note = uni0444;
unicode = 1092;
},
{
glyphname = uni0446;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,-142,l),
(621,-142,l),
(621,140,l),
(550,140,l),
(550,527,l),
(393,527,l),
(393,140,l),
(212,140,l),
(212,527,l),
(55,527,l),
(55,0,l),
(467,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 4 1 4 84 2 1 0 0 22 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni0446;
unicode = 1094;
},
{
glyphname = uni0447;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,326,o),
(55,246,o),
(82,218,qs),
(110,189,o),
(192,165,o),
(243,163,qs),
(270,163,o),
(315,166,o),
(347,170,q),
(347,0,l),
(505,0,l),
(505,527,l),
(347,527,l),
(347,311,l),
(332,309,o),
(291,305,o),
(271,305,qs),
(244,306,o),
(212,317,o),
(195,340,o),
(189,374,o),
(189,396,qs),
(189,527,l),
(31,527,l),
(31,386,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 22 77 0 3 3 21 3 78 50 17 19 37 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = uni0447;
unicode = 1095;
},
{
glyphname = uni0448;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(804,527,l),
(646,527,l),
(646,140,l),
(508,140,l),
(508,527,l),
(350,527,l),
(350,140,l),
(212,140,l),
(212,527,l),
(55,527,l),
(55,0,l),
(804,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 2 0 0 22 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 859;
}
);
note = uni0448;
unicode = 1096;
},
{
glyphname = uni0449;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(720,-142,l),
(876,-142,l),
(876,140,l),
(805,140,l),
(805,527,l),
(647,527,l),
(647,140,l),
(509,140,l),
(509,527,l),
(351,527,l),
(351,140,l),
(212,140,l),
(212,527,l),
(55,527,l),
(55,0,l),
(720,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 6 1 6 84 4 2 2 0 0 22 77 5 3 2 1 1 7 96 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 885;
}
);
note = uni0449;
unicode = 1097;
},
{
glyphname = uni044A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,0,l),
(342,0,ls),
(384,0,o),
(471,17,o),
(541,62,o),
(587,138,o),
(587,198,qs),
(587,247,o),
(553,316,o),
(496,357,o),
(418,375,o),
(373,375,qs),
(274,375,l),
(274,527,l),
(1,527,l),
(1,387,l),
(116,387,l)
);
},
{
closed = 1;
nodes = (
(274,241,l),
(363,241,ls),
(391,241,o),
(429,218,o),
(429,192,qs),
(429,162,o),
(389,136,o),
(354,136,qs),
(274,136,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 0 5 4 1 5 103 6 1 3 3 0 95 0 0 0 22 77 7 1 4 4 2 95 0 2 2 21 2 78 18 17 0 0 24 22 17 25 18 25 0 16 0 16 40 33 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = uni044A;
unicode = 1098;
},
{
glyphname = uni044B;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,0,l),
(268,0,ls),
(307,0,o),
(392,17,o),
(462,62,o),
(507,137,o),
(507,196,qs),
(507,247,o),
(473,317,o),
(415,358,o),
(337,375,o),
(294,375,qs),
(212,375,l),
(212,527,l),
(55,527,l)
);
},
{
closed = 1;
nodes = (
(212,241,l),
(283,241,ls),
(309,241,o),
(349,219,o),
(349,192,qs),
(349,163,o),
(310,136,o),
(275,136,qs),
(212,136,l)
);
},
{
closed = 1;
nodes = (
(567,527,l),
(567,0,l),
(724,0,l),
(724,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 0 0 4 3 0 4 103 6 7 2 2 2 22 77 8 1 3 3 1 96 5 1 1 1 21 1 78 16 15 0 0 27 26 25 24 22 20 15 23 16 23 0 14 0 14 40 33 9 7 24 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = uni044B;
unicode = 1099;
},
{
glyphname = uni044C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,0,l),
(294,0,ls),
(334,0,o),
(419,17,o),
(490,62,o),
(535,137,o),
(535,196,qs),
(535,245,o),
(503,314,o),
(445,357,o),
(368,375,o),
(322,375,qs),
(212,375,l),
(212,527,l),
(55,527,l)
);
},
{
closed = 1;
nodes = (
(212,241,l),
(310,241,ls),
(337,241,o),
(377,221,o),
(377,192,qs),
(377,163,o),
(335,136,o),
(303,136,qs),
(212,136,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 4 3 0 4 103 5 1 2 2 22 77 6 1 3 3 1 96 0 1 1 21 1 78 16 15 0 0 22 20 15 23 16 23 0 14 0 14 40 33 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = uni044C;
unicode = 1100;
},
{
glyphname = uni044E;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,372,o),
(623,335,o),
(635,288,o),
(635,263,qs),
(635,237,o),
(623,191,o),
(596,156,o),
(554,134,o),
(526,134,qs),
(497,134,o),
(456,156,o),
(428,190,o),
(415,236,o),
(415,263,qs),
(415,288,o),
(428,335,o),
(456,372,o),
(497,394,o),
(526,394,qs),
(556,394,o)
);
},
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,193,l),
(273,193,l),
(289,97,o),
(419,-8,o),
(526,-8,qs),
(653,-8,o),
(792,134,o),
(792,265,qs),
(792,328,o),
(754,430,o),
(685,501,o),
(587,538,o),
(526,538,qs),
(420,538,o),
(290,427,o),
(273,334,q),
(212,334,l),
(212,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 0 5 1 2 5 103 8 1 0 0 3 97 7 1 3 3 29 77 0 1 1 4 97 6 1 4 4 30 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 5 1 2 5 103 0 7 7 22 77 8 1 0 0 3 97 0 3 3 29 77 0 1 1 4 97 6 1 4 4 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 0 5 1 2 5 103 0 7 7 22 77 8 1 0 0 3 97 0 3 3 29 77 0 6 6 21 77 0 1 1 4 97 0 4 4 30 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 40 39 38 37 36 35 33 31 25 23 21 20 11 9 0 19 1 19 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 822;
}
);
note = uni044E;
unicode = 1102;
},
{
glyphname = uni044F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,527,o),
(152,510,o),
(89,469,o),
(52,400,o),
(52,347,qs),
(52,290,o),
(115,205,o),
(167,188,q),
(21,0,l),
(210,0,l),
(319,159,l),
(379,159,l),
(379,0,l),
(536,0,l),
(536,527,l),
(273,527,ls)
);
},
{
closed = 1;
nodes = (
(274,288,o),
(246,293,o),
(225,305,o),
(211,326,o),
(211,342,qs),
(211,368,o),
(245,394,o),
(275,394,qs),
(379,394,l),
(379,288,l),
(287,288,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
7 1 1 5 1 76 7 1 5 0 1 0 5 1 103 0 4 4 3 95 6 1 3 3 22 77 2 1 0 0 21 0 78 16 16 0 0 16 26 16 25 19 17 0 15 0 14 17 17 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni044F;
unicode = 1103;
},
{
glyphname = u_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,0,l),
(563,527,l),
(405,527,l),
(405,267,ls),
(405,250,o),
(399,198,o),
(386,178,qs),
(375,161,o),
(334,135,o),
(304,134,qs),
(274,133,o),
(235,155,o),
(214,189,o),
(207,232,o),
(207,254,qs),
(207,527,l),
(49,527,l),
(49,235,ls),
(49,186,o),
(67,98,o),
(113,31,o),
(192,-8,o),
(251,-8,qs),
(296,-8,o),
(383,20,o),
(414,64,q),
(419,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
3 1 1 1 22 77 0 2 2 0 98 4 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
3 1 1 1 22 77 0 4 4 21 77 0 2 2 0 98 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 37 21 34 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = u_alt;
},
{
glyphname = uni0410;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,463,o),
(436,330,o),
(459,263,q),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 2 1 76 0 0 5 1 4 1 0 4 104 0 2 2 20 77 3 1 1 1 21 1 78 5 5 5 12 5 12 17 17 21 16 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = uni0410;
unicode = 1040;
},
{
glyphname = uni0415;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 20 77 0 3 3 4 95 0 4 4 21 4 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = uni0415;
unicode = 1045;
},
{
glyphname = uni041C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,470,l),
(424,161,l),
(492,161,l),
(677,470,l),
(677,0,l),
(840,0,l),
(840,708,l),
(651,708,l),
(461,386,l),
(269,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 6 1 3 2 0 1 76 0 2 0 1 0 2 1 128 5 4 2 0 0 20 77 3 1 1 1 21 1 78 0 0 0 12 0 12 18 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 914;
}
);
note = uni041C;
unicode = 1052;
},
{
glyphname = uni041D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,276,l),
(515,276,l),
(515,0,l),
(678,0,l),
(678,708,l),
(515,708,l),
(515,423,l),
(237,423,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 20 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = uni041D;
unicode = 1053;
},
{
glyphname = uni0420;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,204,l),
(360,204,ls),
(419,204,o),
(521,236,o),
(596,301,o),
(638,397,o),
(638,462,qs),
(638,530,o),
(597,624,o),
(523,682,o),
(420,708,o),
(358,708,qs),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(355,559,ls),
(416,559,o),
(478,510,o),
(478,453,qs),
(476,402,o),
(409,348,o),
(356,348,qs),
(237,348,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 3 0 1 2 3 1 103 0 4 4 0 95 5 1 0 0 20 77 0 2 2 21 2 78 16 15 1 0 22 20 15 23 16 23 13 12 11 9 0 14 1 14 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = uni0420;
unicode = 1056;
},
{
glyphname = uni0422;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,0,l),
(384,0,l),
(384,559,l),
(601,559,l),
(601,708,l),
(5,708,l),
(5,559,l),
(221,559,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 20 77 0 2 2 21 2 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
note = uni0422;
unicode = 1058;
},
{
glyphname = uni0425;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,708,l),
(9,708,l),
(249,355,l),
(1,0,l),
(185,0,l),
(345,234,l),
(499,0,l),
(692,0,l),
(447,354,l),
(686,708,l),
(496,708,l),
(350,473,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 693;
}
);
note = uni0425;
unicode = 1061;
},
{
glyphname = T;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,0,l),
(384,0,l),
(384,559,l),
(600,559,l),
(600,708,l),
(5,708,l),
(5,559,l),
(221,559,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = T;
unicode = 84;
},
{
glyphname = uni0412;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,0,o),
(516,19,o),
(601,67,o),
(656,151,o),
(656,217,qs),
(656,278,o),
(603,365,o),
(551,385,q),
(589,408,o),
(624,481,o),
(624,525,qs),
(624,576,o),
(588,646,o),
(528,689,o),
(449,708,o),
(406,708,qs),
(73,708,l),
(73,0,l),
(358,0,ls)
);
},
{
closed = 1;
nodes = (
(236,560,l),
(366,560,ls),
(385,560,o),
(420,556,o),
(447,543,o),
(464,518,o),
(464,498,qs),
(464,458,o),
(401,427,o),
(351,427,qs),
(236,427,l)
);
},
{
closed = 1;
nodes = (
(377,292,ls),
(400,292,o),
(442,288,o),
(474,274,o),
(493,247,o),
(493,225,qs),
(493,200,o),
(472,169,o),
(436,153,o),
(387,147,o),
(359,147,qs),
(236,147,l),
(236,292,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
10 1 5 2 1 76 7 1 2 0 5 4 2 5 103 0 3 3 0 95 0 0 0 20 77 0 4 4 1 95 6 1 1 1 21 1 78 20 19 0 0 42 40 32 30 28 26 19 29 20 29 0 18 0 17 33 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni0412;
unicode = 1042;
},
{
glyphname = uni041F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,560,l),
(511,560,l),
(511,0,l),
(674,0,l),
(674,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 1 3 95 4 1 3 3 20 77 2 1 0 0 21 0 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = uni041F;
unicode = 1055;
},
{
glyphname = uni0413;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,559,l),
(575,559,l),
(575,708,l),
(74,708,l),
(74,0,l),
(237,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 20 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = uni0413;
unicode = 1043;
},
{
glyphname = uni041B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(628,0,l),
(628,708,l),
(118,708,l),
(117,655,o),
(117,558,o),
(116,457,o),
(113,348,o),
(109,283,qs),
(107,257,o),
(96,208,o),
(74,171,o),
(35,148,o),
(1,148,q),
(1,-1,l),
(30,-1,ls),
(98,-1,o),
(196,40,o),
(223,88,qs),
(240,118,o),
(258,193,o),
(267,273,o),
(269,354,o),
(269,390,qs),
(270,559,l),
(465,559,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
16 1 1 4 1 76 5 1 4 4 2 95 0 2 2 20 77 0 1 1 0 97 3 1 0 0 21 0 78 0 0 0 25 0 25 17 25 17 40 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 702;
}
);
note = uni041B;
unicode = 1051;
},
{
glyphname = uni0414;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,163,o),
(267,216,o),
(276,275,o),
(280,332,o),
(280,352,qs),
(282,392,o),
(283,485,o),
(284,559,q),
(491,559,l),
(491,147,l),
(245,147,l)
);
},
{
closed = 1;
nodes = (
(654,147,l),
(654,708,l),
(133,708,l),
(133,682,o),
(132,594,o),
(129,492,o),
(124,384,o),
(121,338,qs),
(119,307,o),
(110,242,o),
(87,188,o),
(45,150,o),
(9,147,q),
(9,-173,l),
(168,-173,l),
(168,0,l),
(580,0,l),
(580,-173,l),
(740,-173,l),
(740,147,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
17 1 1 1 75 4 1 2 1 2 83 0 0 0 5 95 0 5 5 20 77 6 7 2 1 1 3 95 0 3 3 21 3 78 0 0 30 29 28 27 16 15 14 13 12 11 0 10 0 10 17 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = uni0414;
unicode = 1044;
},
{
glyphname = uni0411;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,1,o),
(511,21,o),
(595,72,o),
(649,161,o),
(650,231,qs),
(650,292,o),
(612,373,o),
(544,422,o),
(450,442,o),
(394,442,qs),
(237,442,l),
(237,559,l),
(604,559,l),
(604,708,l),
(74,708,l),
(74,0,l),
(355,0,ls)
);
},
{
closed = 1;
nodes = (
(367,300,ls),
(390,300,o),
(434,296,o),
(468,281,o),
(489,253,o),
(489,228,qs),
(489,201,o),
(466,168,o),
(428,152,o),
(382,147,o),
(359,147,qs),
(237,147,l),
(237,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 2 0 5 4 2 5 103 0 1 1 0 95 0 0 0 20 77 0 4 4 3 95 6 1 3 3 21 3 78 0 0 29 27 19 17 0 16 0 15 33 17 17 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni0411;
unicode = 1041;
},
{
glyphname = uni0416;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(809,0,l),
(998,0,l),
(794,369,l),
(997,708,l),
(812,708,l),
(657,425,l),
(581,425,l),
(581,708,l),
(418,708,l),
(418,425,l),
(341,425,l),
(188,708,l),
(2,708,l),
(205,369,l),
(1,0,l),
(189,0,l),
(334,279,l),
(418,279,l),
(418,0,l),
(581,0,l),
(581,279,l),
(665,279,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
18 7 2 1 4 1 76 6 1 4 10 9 2 1 0 4 1 103 7 5 2 3 3 20 77 8 2 2 0 0 21 0 78 0 0 0 21 0 21 18 17 17 17 17 18 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 999;
}
);
note = uni0416;
unicode = 1046;
},
{
glyphname = uni0417;
kernLeft = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(36,165,o),
(90,73,o),
(174,17,o),
(284,-7,o),
(345,-7,qs),
(394,-7,o),
(497,13,o),
(583,65,o),
(638,154,o),
(638,223,qs),
(638,277,o),
(591,363,o),
(537,383,q),
(612,434,o),
(612,525,qs),
(612,582,o),
(560,656,o),
(480,699,o),
(383,716,o),
(338,716,qs),
(281,716,o),
(177,692,o),
(97,638,o),
(48,552,o),
(46,489,q),
(202,489,l),
(207,531,o),
(279,568,o),
(333,568,qs),
(352,568,o),
(394,562,o),
(428,547,o),
(450,521,o),
(451,500,qs),
(451,479,o),
(432,450,o),
(401,434,o),
(360,427,o),
(337,427,qs),
(255,427,l),
(255,294,l),
(367,294,ls),
(387,294,o),
(426,289,o),
(457,274,o),
(476,247,o),
(476,225,qs),
(476,201,o),
(453,169,o),
(417,151,o),
(372,144,o),
(349,144,qs),
(323,144,o),
(270,151,o),
(225,170,o),
(192,204,o),
(186,232,q),
(31,232,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
44 1 1 2 1 76 0 4 3 2 3 4 2 128 8 1 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 27 77 0 0 0 6 97 0 6 6 28 6 78 0 0 0 57 0 57 45 36 18 40 33 40 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uni0417;
unicode = 1047;
},
{
glyphname = uni0418;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(204,0,l),
(533,421,l),
(533,0,l),
(696,0,l),
(696,708,l),
(566,708,l),
(237,281,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
5 0 2 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 17 18 17 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = uni0418;
unicode = 1048;
},
{
glyphname = uni0419;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,828,o),
(592,916,q),
(459,916,l),
(456,887,o),
(420,857,o),
(392,857,qs),
(365,857,o),
(328,887,o),
(324,916,q),
(192,916,l),
(199,828,o),
(307,745,o),
(392,745,qs),
(476,745,o)
);
},
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(204,0,l),
(533,421,l),
(533,0,l),
(696,0,l),
(696,708,l),
(566,708,l),
(237,281,l),
(237,708,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 14 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 2 2 1 112 0 2 8 1 0 4 2 0 106 7 1 4 4 20 77 6 1 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
3 1 1 2 1 133 0 2 8 1 0 4 2 0 106 7 1 4 4 20 77 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 23 22 21 20 18 17 16 15 11 10 8 6 4 3 0 13 1 13 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = uni0419;
unicode = 1049;
},
{
glyphname = uni041A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,0,l),
(691,0,l),
(460,370,l),
(690,708,l),
(503,708,l),
(324,426,l),
(237,426,l),
(237,708,l),
(74,708,l),
(74,0,l),
(237,0,l),
(237,278,l),
(333,278,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 20 77 4 1 0 0 21 0 78 0 0 0 12 0 12 18 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni041A;
unicode = 1050;
},
{
glyphname = uni0423;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,708,l),
(17,708,l),
(272,217,l),
(260,195,o),
(231,169,o),
(198,155,o),
(161,150,o),
(142,150,qs),
(114,150,l),
(114,0,l),
(158,0,ls),
(233,0,o),
(332,42,o),
(399,115,o),
(446,212,o),
(470,266,qs),
(518,377,o),
(612,596,o),
(660,708,q),
(482,708,l),
(357,378,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
20 17 2 2 0 1 76 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 21 33 39 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = uni0423;
unicode = 1059;
},
{
glyphname = uni0424;
kernLeft = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,639,o),
(158,605,o),
(79,537,o),
(36,433,o),
(35,363,qs),
(35,290,o),
(83,187,o),
(168,122,o),
(288,92,o),
(360,92,q),
(360,-17,l),
(523,-17,l),
(523,92,l),
(598,92,o),
(719,122,o),
(803,188,o),
(848,292,o),
(849,367,qs),
(849,439,o),
(800,542,o),
(713,608,o),
(594,639,o),
(523,639,q),
(523,737,l),
(360,737,l),
(360,639,l),
(339,639,ls)
);
},
{
closed = 1;
nodes = (
(614,500,o),
(690,426,o),
(690,365,qs),
(690,294,o),
(608,231,o),
(523,231,q),
(523,500,l),
(542,500,ls)
);
},
{
closed = 1;
nodes = (
(269,231,o),
(193,303,o),
(193,366,qs),
(193,405,o),
(217,457,o),
(261,487,o),
(323,500,o),
(360,500,q),
(360,231,l),
(341,231,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
10 5 2 1 8 11 2 7 6 1 7 105 12 9 2 6 4 1 2 3 6 2 105 0 0 0 3 95 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 1 3 0 87 10 5 2 1 8 11 2 7 6 1 7 105 12 9 2 6 4 1 2 3 6 2 105 0 0 0 3 95 0 3 0 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
35 35 27 27 0 0 35 44 35 43 37 36 27 34 27 33 29 28 0 26 0 25 17 17 24 17 17 13 7 27 
CALL[ ]	/* CallFunction */";
};
width = 884;
}
);
note = uni0424;
unicode = 1060;
},
{
glyphname = uni0426;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,708,l),
(74,708,l),
(74,0,l),
(583,0,l),
(583,-174,l),
(746,-174,l),
(746,147,l),
(662,147,l),
(662,708,l),
(499,708,l),
(499,147,l),
(237,147,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 84 4 1 0 0 20 77 6 5 2 1 1 3 96 0 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = uni0426;
unicode = 1062;
},
{
glyphname = uni0427;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,408,o),
(86,309,o),
(126,277,qs),
(163,248,o),
(260,224,o),
(314,223,qs),
(351,222,o),
(427,227,o),
(466,233,q),
(466,0,l),
(629,0,l),
(629,708,l),
(466,708,l),
(466,385,l),
(434,379,o),
(378,374,o),
(348,374,qs),
(313,374,o),
(262,384,o),
(229,410,o),
(214,454,o),
(214,488,qs),
(214,708,l),
(51,708,l),
(51,474,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 20 77 0 3 3 21 3 78 50 17 19 37 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = uni0427;
unicode = 1063;
},
{
glyphname = uni0428;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(945,708,l),
(782,708,l),
(782,147,l),
(591,147,l),
(591,708,l),
(428,708,l),
(428,147,l),
(237,147,l),
(237,708,l),
(74,708,l),
(74,0,l),
(945,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 2 0 0 20 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1019;
}
);
note = uni0428;
unicode = 1064;
},
{
glyphname = uni0429;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(865,-174,l),
(1028,-174,l),
(1028,147,l),
(944,147,l),
(944,708,l),
(781,708,l),
(781,147,l),
(591,147,l),
(591,708,l),
(428,708,l),
(428,147,l),
(237,147,l),
(237,708,l),
(74,708,l),
(74,0,l),
(865,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 6 1 6 84 4 2 2 0 0 20 77 5 3 2 1 1 7 96 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = uni0429;
unicode = 1065;
},
{
glyphname = uni042A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(499,0,o),
(604,22,o),
(685,76,o),
(734,167,o),
(734,236,qs),
(734,300,o),
(692,386,o),
(620,438,o),
(526,459,o),
(474,459,qs),
(322,459,l),
(322,708,l),
(1,708,l),
(1,559,l),
(159,559,l),
(159,0,l),
(444,0,ls)
);
},
{
closed = 1;
nodes = (
(463,315,ls),
(511,315,o),
(575,282,o),
(575,237,qs),
(575,208,o),
(552,172,o),
(515,153,o),
(465,147,o),
(438,147,qs),
(322,147,l),
(322,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 20 77 0 4 4 3 95 6 1 3 3 21 3 78 0 0 27 25 19 17 0 16 0 15 33 17 17 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 771;
}
);
note = uni042A;
unicode = 1066;
},
{
glyphname = uni042B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,0,o),
(480,22,o),
(562,76,o),
(611,167,o),
(613,236,qs),
(613,299,o),
(571,384,o),
(499,436,o),
(404,459,o),
(351,459,qs),
(237,459,l),
(237,708,l),
(74,708,l),
(74,0,l),
(315,0,ls)
);
},
{
closed = 1;
nodes = (
(330,315,ls),
(354,315,o),
(398,309,o),
(433,293,o),
(453,262,o),
(453,237,qs),
(453,209,o),
(431,174,o),
(394,154,o),
(345,147,o),
(318,147,qs),
(237,147,l),
(237,315,l)
);
},
{
closed = 1;
nodes = (
(862,0,l),
(862,708,l),
(699,708,l),
(699,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 1 0 4 3 1 4 103 5 1 0 0 20 77 0 3 3 2 96 6 7 2 2 2 21 2 78 0 0 31 30 29 28 27 25 17 15 0 14 0 13 33 17 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 936;
}
);
note = uni042B;
unicode = 1067;
},
{
glyphname = uni042C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,0,o),
(512,22,o),
(596,76,o),
(647,167,o),
(647,236,qs),
(647,298,o),
(609,383,o),
(540,436,o),
(444,459,o),
(386,459,qs),
(236,459,l),
(236,708,l),
(73,708,l),
(73,0,l),
(346,0,ls)
);
},
{
closed = 1;
nodes = (
(371,315,ls),
(395,315,o),
(437,308,o),
(468,291,o),
(487,261,o),
(487,237,qs),
(487,208,o),
(466,173,o),
(428,154,o),
(380,147,o),
(353,147,qs),
(236,147,l),
(236,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 0 4 3 1 4 103 0 0 0 20 77 0 3 3 2 96 5 1 2 2 21 2 78 0 0 27 25 17 15 0 14 0 13 33 17 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = uni042C;
unicode = 1068;
},
{
glyphname = uni042D;
kernLeft = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,283,l),
(519,283,l),
(515,220,o),
(431,145,o),
(357,143,qs),
(335,143,o),
(284,152,o),
(237,175,o),
(200,214,o),
(192,244,q),
(35,244,l),
(42,178,o),
(101,83,o),
(189,22,o),
(297,-7,o),
(353,-7,qs),
(435,-7,o),
(561,46,o),
(646,142,o),
(690,275,o),
(690,355,qs),
(690,432,o),
(650,565,o),
(567,662,o),
(442,717,o),
(358,717,qs),
(299,717,o),
(190,685,o),
(103,621,o),
(46,527,o),
(39,464,q),
(197,464,l),
(209,512,o),
(291,568,o),
(357,568,qs),
(397,568,o),
(456,545,o),
(495,505,o),
(516,453,o),
(518,425,q),
(257,425,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 8 1 7 0 6 4 7 6 103 0 0 0 2 97 0 2 2 27 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 40 0 40 18 36 20 40 36 18 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni042D;
unicode = 1069;
},
{
glyphname = uni042E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(491,468,o),
(533,529,o),
(601,567,o),
(650,567,qs),
(699,567,o),
(768,530,o),
(810,470,o),
(829,394,o),
(829,355,qs),
(829,316,o),
(809,239,o),
(766,179,o),
(698,142,o),
(650,142,qs),
(602,142,o),
(534,179,o),
(492,239,o),
(473,316,o),
(473,356,qs),
(473,393,o)
);
},
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,277,l),
(319,277,l),
(327,214,o),
(379,109,o),
(463,34,o),
(579,-7,o),
(650,-7,qs),
(732,-8,o),
(861,46,o),
(950,142,o),
(996,277,o),
(996,357,qs),
(996,438,o),
(949,571,o),
(860,665,o),
(731,716,o),
(649,716,qs),
(580,716,o),
(464,673,o),
(378,595,o),
(324,487,o),
(317,422,q),
(237,422,l),
(237,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 0 5 0 2 5 103 0 1 1 3 97 7 1 3 3 27 77 0 0 0 4 97 6 1 4 4 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 5 0 2 5 103 0 7 7 20 77 0 1 1 3 97 0 3 3 27 77 0 6 6 21 77 0 0 0 4 97 0 4 4 30 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 20 40 36 20 40 36 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 1031;
}
);
note = uni042E;
unicode = 1070;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(304,708,o),
(198,686,o),
(118,632,o),
(70,540,o),
(70,470,qs),
(70,387,o),
(151,277,o),
(234,254,q),
(42,0,l),
(235,0,l),
(397,232,l),
(481,232,l),
(481,0,l),
(644,0,l),
(644,708,l),
(363,708,ls)
);
},
{
closed = 1;
nodes = (
(342,375,o),
(294,383,o),
(255,404,o),
(230,439,o),
(230,466,qs),
(230,491,o),
(246,525,o),
(276,547,o),
(315,558,o),
(338,559,qs),
(481,559,l),
(481,375,l),
(367,375,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
7 1 1 5 1 76 7 1 5 0 1 0 5 1 103 0 4 4 3 95 6 1 3 3 20 77 2 1 0 0 21 0 78 16 16 0 0 16 28 16 27 19 17 0 15 0 14 17 17 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = uni042F;
unicode = 1071;
},
{
glyphname = uni0440;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,-210,l),
(212,-210,l),
(212,52,l),
(272,-8,o),
(377,-8,qs),
(431,-8,o),
(518,33,o),
(577,106,o),
(608,208,o),
(608,269,qs),
(608,329,o),
(576,428,o),
(515,499,o),
(429,537,o),
(375,537,qs),
(329,537,o),
(243,503,o),
(211,464,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(408,373,o),
(436,336,o),
(450,290,o),
(450,266,qs),
(450,239,o),
(438,192,o),
(411,156,o),
(367,134,o),
(335,134,qs),
(274,136,o),
(212,212,o),
(212,267,qs),
(212,292,o),
(228,337,o),
(259,373,o),
(303,394,o),
(332,394,qs),
(364,394,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 0 97 3 1 0 0 29 77 0 5 5 1 97 0 1 1 30 77 0 2 2 24 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 4 4 0 97 3 1 0 0 29 77 0 5 5 1 97 0 1 1 30 77 0 2 2 0 97 3 1 0 0 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 0 97 0 0 0 29 77 0 5 5 1 97 0 1 1 30 77 0 2 2 3 95 0 3 3 22 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
21 20 29 27 20 37 21 37 17 18 40 34 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni0440;
unicode = 1088;
},
{
glyphname = O;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 3 3 0 97 4 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 1 0 36 34 26 24 11 9 0 19 1 19 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = O;
unicode = 79;
},
{
glyphname = be_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,704,o),
(199,684,qs),
(150,658,o),
(86,589,o),
(47,503,o),
(31,397,o),
(31,334,qs),
(31,272,o),
(60,149,o),
(124,53,o),
(232,-7,o),
(312,-8,qs),
(374,-8,o),
(475,29,o),
(546,100,o),
(586,201,o),
(586,265,qs),
(586,320,o),
(551,409,o),
(492,471,o),
(409,503,o),
(361,503,qs),
(310,503,o),
(223,473,o),
(187,435,q),
(190,471,o),
(222,520,o),
(274,553,o),
(339,576,o),
(411,597,o),
(486,618,o),
(520,634,qs),
(565,655,o),
(585,695,q),
(502,808,l),
(488,794,o),
(416,762,o),
(370,746,qs),
(325,731,o)
);
},
{
closed = 1;
nodes = (
(242,155,o),
(215,187,o),
(201,229,o),
(201,250,qs),
(201,299,o),
(267,357,o),
(318,357,qs),
(373,357,o),
(427,292,o),
(427,246,qs),
(427,226,o),
(413,186,o),
(386,154,o),
(342,134,o),
(314,134,qs),
(285,134,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
13 1 3 0 1 76 4 3 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 22 77 4 1 2 2 1 97 0 1 1 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
40 39 48 46 39 54 40 54 40 47 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = be_alt;
},
{
glyphname = a;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(358,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(114,291,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 8 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 8 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
12 12 12 47 12 47 36 18 34 41 40 36 32 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = a;
unicode = 97;
},
{
glyphname = c;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,155,o),
(203,190,o),
(192,235,o),
(192,262,qs),
(192,286,o),
(202,333,o),
(226,370,o),
(268,393,o),
(298,393,qs),
(333,393,o),
(377,360,o),
(383,333,q),
(542,333,l),
(537,384,o),
(498,461,o),
(435,512,o),
(351,538,o),
(303,538,qs),
(240,538,o),
(141,500,o),
(72,429,o),
(34,327,o),
(34,264,qs),
(34,134,o),
(171,-8,o),
(299,-8,qs),
(345,-8,o),
(431,16,o),
(498,66,o),
(540,142,o),
(545,195,q),
(383,195,l),
(378,169,o),
(334,134,o),
(298,134,qs),
(269,134,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 49 77 6 1 0 0 2 97 0 2 2 47 2 78 1 0 27 25 23 22 18 16 10 8 4 3 0 35 1 35 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = c;
unicode = 99;
},
{
glyphname = e;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 1 4 0 4 1 0 128 8 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 7 1 0 0 2 97 0 2 2 47 2 78 29 29 1 0 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,565,ls),
(256,616,o),
(308,616,qs),
(381,616,l),
(381,756,l),
(286,756,ls),
(190,756,o),
(98,674,o),
(98,582,qs),
(98,527,l),
(19,527,l),
(19,386,l),
(98,386,l),
(98,0,l),
(256,0,l),
(256,386,l),
(381,386,l),
(381,527,l),
(256,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 3 4 5 103 2 1 0 0 3 95 7 6 2 3 3 41 77 0 1 1 39 1 78 0 0 0 18 0 18 33 35 17 17 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,11,o),
(421,-44,o),
(396,-88,o),
(350,-115,o),
(315,-115,qs),
(275,-115,o),
(225,-83,o),
(220,-61,q),
(56,-61,l),
(64,-113,o),
(111,-189,o),
(181,-237,o),
(268,-261,o),
(315,-261,qs),
(346,-261,o),
(413,-250,o),
(476,-222,o),
(526,-180,o),
(545,-150,qs),
(562,-122,o),
(581,-62,o),
(588,2,o),
(590,69,o),
(590,102,qs),
(590,527,l),
(450,527,l),
(435,475,l),
(378,538,o),
(286,538,qs),
(221,538,o),
(129,493,o),
(65,416,o),
(34,318,o),
(34,261,qs),
(34,207,o),
(63,109,o),
(121,34,o),
(211,-8,o),
(277,-8,qs),
(327,-8,o),
(403,21,o),
(430,55,q),
(430,38,ls)
);
},
{
closed = 1;
nodes = (
(235,154,o),
(207,188,o),
(193,233,o),
(193,259,qs),
(193,284,o),
(206,332,o),
(234,371,o),
(280,394,o),
(312,394,qs),
(371,394,o),
(432,319,o),
(432,266,qs),
(432,238,o),
(418,191,o),
(388,155,o),
(342,133,o),
(311,133,qs),
(281,133,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
15 1 7 1 0 1 0 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
15 1 7 2 0 1 0 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 0 5 0 4 5 128 0 7 7 1 97 2 1 1 1 49 77 8 1 6 6 0 97 0 0 0 47 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 8 1 6 6 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 8 1 6 6 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
44 43 52 50 43 60 44 60 34 20 42 18 40 34 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = g;
unicode = 103;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,-39,o),
(58,-62,o),
(43,-79,o),
(19,-90,o),
(1,-90,qs),
(-44,-90,l),
(-44,-231,l),
(41,-231,ls),
(136,-231,o),
(220,-142,o),
(220,-51,qs),
(220,527,l),
(63,527,l),
(63,-28,ls)
);
},
{
closed = 1;
nodes = (
(45,725,o),
(45,680,qs),
(45,633,o),
(102,584,o),
(143,584,qs),
(184,584,o),
(240,632,o),
(240,680,qs),
(240,725,o),
(184,775,o),
(143,775,qs),
(103,775,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 3 97 5 1 3 3 48 77 0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 0 4 0 3 4 105 0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 3 0 4 0 3 4 105 0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
15 14 21 19 14 25 15 25 33 35 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = j;
unicode = 106;
},
{
glyphname = o;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
4 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 5 1 2 2 47 2 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = o;
unicode = 111;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,238,ls),
(212,284,o),
(235,347,o),
(265,366,qs),
(278,374,o),
(313,381,o),
(350,384,o),
(386,383,o),
(400,383,q),
(400,534,l),
(393,536,o),
(368,537,o),
(355,537,qs),
(312,537,o),
(237,510,o),
(206,469,q),
(196,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
6 1 3 0 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 23 34 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = r;
unicode = 114;
},
{
glyphname = t;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,527,l),
(251,527,l),
(251,664,l),
(94,664,l),
(94,527,l),
(16,527,l),
(16,386,l),
(94,386,l),
(94,176,ls),
(94,77,o),
(195,-2,o),
(301,0,qs),
(358,0,l),
(358,140,l),
(308,140,ls),
(275,140,o),
(251,173,o),
(251,199,qs),
(251,386,l),
(365,386,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 7 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 0 0 0 19 0 19 17 17 17 19 33 35 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 381;
}
);
note = t;
unicode = 116;
},
{
glyphname = y_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,-84,o),
(220,-62,q),
(55,-62,l),
(63,-114,o),
(109,-190,o),
(176,-238,o),
(261,-262,o),
(308,-262,qs),
(381,-262,o),
(491,-214,o),
(526,-164,qs),
(545,-136,o),
(567,-75,o),
(577,-6,o),
(579,67,o),
(579,105,qs),
(579,527,l),
(421,527,l),
(421,299,ls),
(421,267,o),
(418,200,o),
(400,175,qs),
(389,159,o),
(348,134,o),
(319,134,qs),
(287,134,o),
(247,157,o),
(226,193,o),
(219,238,o),
(219,261,qs),
(219,527,l),
(62,527,l),
(62,234,ls),
(62,180,o),
(84,90,o),
(134,26,o),
(213,-8,o),
(269,-8,qs),
(313,-8,o),
(394,15,o),
(422,47,q),
(422,15,o),
(414,-43,o),
(390,-88,o),
(346,-115,o),
(311,-115,qs),
(273,-115,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 1 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 1 0 1 6 0 128 4 1 2 2 22 77 0 3 3 1 98 0 1 1 30 77 7 1 0 0 5 97 0 5 5 31 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 6 1 0 1 6 0 128 7 1 0 0 5 0 5 101 4 1 2 2 22 77 0 3 3 1 98 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 44 43 39 37 29 28 22 20 15 14 9 7 0 46 1 46 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = y_alt;
},
{
glyphname = y2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,527,l),
(1,527,l),
(231,-37,l),
(211,-76,o),
(149,-110,o),
(99,-110,qs),
(81,-110,l),
(81,-264,l),
(119,-264,ls),
(192,-264,o),
(293,-222,o),
(366,-141,o),
(418,-23,o),
(442,55,qs),
(588,527,l),
(416,527,l),
(316,153,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
16 13 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 37 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = y2_alt;
},
{
glyphname = uni0443;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,527,l),
(8,527,l),
(231,-37,l),
(211,-76,o),
(149,-110,o),
(99,-110,qs),
(81,-110,l),
(81,-264,l),
(119,-264,ls),
(192,-264,o),
(293,-222,o),
(366,-141,o),
(418,-23,o),
(442,55,qs),
(588,527,l),
(414,527,l),
(316,154,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
16 13 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 37 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = uni0443;
unicode = 1091;
},
{
glyphname = uni0451;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,703,o),
(83,661,qs),
(83,617,o),
(135,571,o),
(174,571,qs),
(212,571,o),
(266,617,o),
(266,661,qs),
(266,703,o),
(212,749,o),
(174,749,qs),
(136,749,o)
);
},
{
closed = 1;
nodes = (
(334,703,o),
(334,661,qs),
(334,617,o),
(387,571,o),
(425,571,qs),
(464,571,o),
(516,617,o),
(516,661,qs),
(516,703,o),
(464,749,o),
(425,749,qs),
(387,749,o)
);
},
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
0 5 8 4 8 5 4 128 12 2 11 3 0 3 1 1 7 0 1 105 14 1 10 0 8 5 10 8 103 0 9 9 7 97 0 7 7 29 77 13 1 4 4 6 97 0 6 6 30 6 78 53 53 25 24 13 12 1 0 53 59 53 59 57 55 50 49 42 40 34 32 28 27 24 52 25 52 19 17 12 23 13 23 7 5 0 11 1 11 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = uni0451;
unicode = 1105;
},
{
glyphname = uni0437;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,346,o),
(501,377,qs),
(501,424,o),
(462,487,o),
(399,523,o),
(321,538,o),
(284,538,qs),
(241,538,o),
(159,522,o),
(90,482,o),
(41,410,o),
(34,355,q),
(183,355,l),
(185,370,o),
(204,390,o),
(230,402,o),
(262,408,o),
(277,408,qs),
(291,408,o),
(318,404,o),
(340,395,o),
(354,378,o),
(354,366,qs),
(354,344,o),
(322,322,o),
(284,322,qs),
(218,322,l),
(218,209,l),
(304,209,ls),
(366,209,o),
(366,169,qs),
(366,156,o),
(349,138,o),
(325,127,o),
(295,123,o),
(280,123,qs),
(263,123,o),
(229,128,o),
(200,141,o),
(181,163,o),
(178,179,q),
(24,179,l),
(28,126,o),
(76,55,o),
(146,11,o),
(231,-8,o),
(273,-8,qs),
(315,-8,o),
(401,7,o),
(471,46,o),
(515,115,o),
(517,168,qs),
(517,204,o),
(485,269,o),
(452,285,q),
(473,299,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 29 77 0 2 2 0 97 0 0 0 30 0 78 36 20 38 33 37 36 20 39 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = uni0437;
unicode = 1079;
},
{
glyphname = uni044D;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(199,144,o),
(186,162,q),
(26,162,l),
(36,115,o),
(87,51,o),
(155,9,o),
(234,-9,o),
(274,-9,qs),
(404,-9,o),
(534,137,o),
(534,264,qs),
(534,392,o),
(403,536,o),
(279,536,qs),
(234,536,o),
(152,514,o),
(84,469,o),
(35,401,o),
(26,356,q),
(187,356,l),
(195,375,o),
(248,400,o),
(280,400,qs),
(325,400,o),
(374,357,o),
(378,326,q),
(202,326,l),
(202,201,l),
(379,201,l),
(379,173,o),
(328,125,o),
(280,125,qs),
(249,125,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 3 2 3 4 2 128 0 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 29 77 8 1 0 0 6 97 0 6 6 28 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 4 3 2 3 4 2 128 0 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 29 77 8 1 0 0 6 97 0 6 6 30 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 30 29 25 23 19 17 13 12 10 8 6 5 4 3 0 32 1 32 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = uni044D;
unicode = 1101;
},
{
glyphname = C;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,473,o),
(266,532,o),
(334,567,o),
(383,567,qs),
(445,567,o),
(519,511,o),
(531,461,q),
(686,461,l),
(680,527,o),
(628,623,o),
(547,686,o),
(442,717,o),
(382,717,qs),
(301,717,o),
(172,664,o),
(83,568,o),
(35,435,o),
(35,355,qs),
(35,273,o),
(81,140,o),
(170,45,o),
(298,-7,o),
(381,-7,qs),
(439,-7,o),
(547,25,o),
(631,89,o),
(685,184,o),
(690,247,q),
(533,247,l),
(522,197,o),
(445,143,o),
(383,143,qs),
(335,143,o),
(266,180,o),
(223,240,o),
(203,316,o),
(203,356,qs),
(203,397,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 34 20 40 36 18 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = C;
unicode = 67;
},
{
glyphname = S;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,549,o),
(555,632,o),
(487,688,o),
(398,717,o),
(345,717,qs),
(294,717,o),
(198,698,o),
(117,649,o),
(65,565,o),
(65,501,qs),
(65,437,o),
(116,359,o),
(205,311,o),
(323,281,o),
(391,266,qs),
(419,259,o),
(456,232,o),
(456,206,qs),
(456,188,o),
(437,163,o),
(409,148,o),
(373,142,o),
(357,142,qs),
(331,142,o),
(282,151,o),
(243,171,o),
(215,204,o),
(209,229,q),
(44,229,l),
(49,164,o),
(103,74,o),
(187,17,o),
(291,-8,o),
(346,-8,qs),
(401,-8,o),
(501,18,o),
(576,72,o),
(620,157,o),
(620,216,qs),
(618,282,o),
(569,356,o),
(490,398,o),
(390,420,o),
(338,434,qs),
(312,441,o),
(271,453,o),
(242,469,o),
(227,491,o),
(227,508,qs),
(227,524,o),
(244,548,o),
(272,563,o),
(307,570,o),
(325,570,qs),
(376,570,o),
(439,530,o),
(445,492,q),
(604,492,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 57 0 57 53 51 35 33 29 28 24 22 34 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni0421;
kernLeft = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,472,o),
(265,531,o),
(333,567,o),
(382,567,qs),
(444,567,o),
(519,511,o),
(531,461,q),
(686,461,l),
(680,527,o),
(628,623,o),
(546,686,o),
(441,717,o),
(381,717,qs),
(300,717,o),
(172,664,o),
(82,568,o),
(35,435,o),
(35,355,qs),
(35,273,o),
(81,140,o),
(169,45,o),
(297,-7,o),
(380,-7,qs),
(438,-7,o),
(546,25,o),
(631,89,o),
(685,184,o),
(690,247,q),
(533,247,l),
(522,197,o),
(444,143,o),
(382,143,qs),
(334,143,o),
(266,180,o),
(223,240,o),
(203,316,o),
(203,356,qs),
(203,396,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 27 77 0 0 0 2 97 0 2 2 28 2 78 34 20 40 36 18 36 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni0421;
unicode = 1057;
},
{
glyphname = G;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,470,o),
(266,530,o),
(336,567,o),
(386,567,qs),
(444,567,o),
(522,516,o),
(532,467,q),
(692,467,l),
(685,530,o),
(631,624,o),
(548,686,o),
(443,717,o),
(385,717,qs),
(302,717,o),
(172,666,o),
(82,571,o),
(35,437,o),
(35,354,qs),
(35,273,o),
(82,140,o),
(172,45,o),
(302,-7,o),
(385,-7,qs),
(463,-7,o),
(589,47,o),
(630,96,qs),
(655,126,o),
(685,194,o),
(700,267,o),
(705,345,o),
(705,385,q),
(366,385,l),
(366,250,l),
(539,250,l),
(535,222,o),
(508,181,o),
(467,155,o),
(416,143,o),
(389,143,qs),
(339,143,o),
(268,178,o),
(223,237,o),
(203,314,o),
(203,355,qs),
(203,394,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 34 20 40 39 17 20 36 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = G;
unicode = 71;
},
{
glyphname = uni041E;
kernLeft = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 3 3 0 97 4 1 0 0 27 77 0 2 2 1 97 0 1 1 30 1 78 1 0 36 34 26 24 11 9 0 19 1 19 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = uni041E;
unicode = 1054;
},
{
glyphname = Q;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,471,o),
(271,530,o),
(342,567,o),
(392,567,qs),
(441,567,o),
(513,531,o),
(559,471,o),
(581,395,o),
(581,355,qs),
(581,315,o),
(558,239,o),
(512,179,o),
(441,143,o),
(393,143,qs),
(343,143,o),
(270,179,o),
(224,239,o),
(202,315,o),
(202,356,qs),
(202,395,o)
);
},
{
closed = 1;
nodes = (
(721,14,o),
(675,73,o),
(652,102,q),
(698,150,o),
(748,277,o),
(748,358,qs),
(748,439,o),
(698,572,o),
(605,666,o),
(474,717,o),
(393,717,qs),
(311,717,o),
(179,664,o),
(86,569,o),
(35,435,o),
(35,354,qs),
(35,274,o),
(84,141,o),
(176,46,o),
(308,-7,o),
(391,-7,qs),
(423,-7,o),
(490,4,o),
(519,15,q),
(545,-17,o),
(594,-79,o),
(619,-111,q),
(744,-15,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
44 23 2 2 0 1 76 47 1 2 73 0 1 1 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 40 41 40 36 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = Q;
unicode = 81;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,708,l),
(370,240,ls),
(370,200,o),
(330,141,o),
(284,141,qs),
(257,141,o),
(221,161,o),
(200,193,o),
(192,233,o),
(192,253,q),
(29,253,l),
(29,244,ls),
(29,126,o),
(164,-7,o),
(289,-7,qs),
(414,-7,o),
(533,127,o),
(533,254,qs),
(533,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 3 2 2 1 114 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 3 1 2 128 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 3 2 2 1 114 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 3 1 2 128 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 36 19 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = J;
unicode = 74;
},
{
glyphname = K_alt;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,235,l),
(296,293,l),
(499,0,l),
(693,0,l),
(414,400,l),
(704,708,l),
(500,708,l),
(237,421,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 3 0 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 17 19 18 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = K_alt;
},
{
glyphname = K;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,0,l),
(690,0,l),
(459,370,l),
(689,708,l),
(502,708,l),
(323,426,l),
(237,426,l),
(237,708,l),
(74,708,l),
(74,0,l),
(237,0,l),
(237,278,l),
(332,278,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 38 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = K;
unicode = 75;
},
{
glyphname = k_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,708,l),
(55,708,l),
(55,0,l),
(212,0,l),
(212,159,l),
(261,207,l),
(401,0,l),
(580,0,l),
(371,308,l),
(582,527,l),
(385,527,l),
(212,336,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
11 6 5 2 4 1 0 1 76 0 3 3 20 77 0 0 0 22 77 2 1 1 1 21 1 78 17 19 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = k_alt;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,0,l),
(578,0,l),
(405,276,l),
(565,527,l),
(385,527,l),
(273,332,l),
(212,332,l),
(212,708,l),
(55,708,l),
(55,0,l),
(212,0,l),
(212,192,l),
(277,192,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 0 1 1 38 77 0 3 3 41 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = k;
unicode = 107;
},
{
glyphname = i_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,386,l),
(77,0,l),
(234,0,l),
(234,527,l),
(-1,527,l),
(-1,386,l)
);
},
{
closed = 1;
nodes = (
(57,727,o),
(57,682,qs),
(57,636,o),
(112,587,o),
(154,587,qs),
(195,587,o),
(250,635,o),
(250,682,qs),
(250,727,o),
(195,777,o),
(154,777,qs),
(114,777,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 4 0 3 4 105 0 2 2 0 95 0 0 0 22 77 0 1 1 21 1 78 7 6 13 11 6 17 7 17 17 17 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = i_alt;
},
{
glyphname = j_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,727,o),
(56,682,qs),
(56,636,o),
(112,587,o),
(155,587,qs),
(195,587,o),
(251,635,o),
(251,682,qs),
(251,727,o),
(195,778,o),
(155,778,qs),
(114,778,o)
);
},
{
closed = 1;
nodes = (
(75,386,l),
(75,-18,ls),
(75,-31,o),
(70,-57,o),
(55,-77,o),
(27,-89,o),
(5,-89,qs),
(-31,-89,l),
(-31,-231,l),
(54,-231,ls),
(148,-231,o),
(234,-140,o),
(232,-49,qs),
(232,527,l),
(-9,527,l),
(-9,386,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 1 2 0 1 105 0 5 5 2 95 0 2 2 22 77 0 4 4 3 95 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 0 0 1 2 0 1 105 0 4 0 3 4 3 99 0 5 5 2 95 0 2 2 22 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 27 26 21 19 18 16 13 12 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = j_alt;
},
{
glyphname = s_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,385,o),
(361,354,q),
(513,354,l),
(510,403,o),
(470,474,o),
(405,518,o),
(323,538,o),
(279,538,qs),
(241,538,o),
(161,522,o),
(93,484,o),
(48,420,o),
(48,372,qs),
(48,321,o),
(96,261,o),
(168,227,o),
(251,212,o),
(323,199,o),
(371,181,o),
(371,161,qs),
(371,121,o),
(295,121,qs),
(277,121,o),
(240,127,o),
(211,142,o),
(191,166,o),
(189,183,q),
(30,183,l),
(33,131,o),
(81,58,o),
(154,11,o),
(244,-11,o),
(292,-11,qs),
(325,-11,o),
(406,4,o),
(477,43,o),
(525,110,o),
(525,163,qs),
(525,221,o),
(473,282,o),
(391,311,o),
(294,324,o),
(249,336,qs),
(228,342,o),
(201,359,o),
(201,373,qs),
(201,395,o),
(244,410,o),
(274,409,qs),
(309,408,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 47 46 42 40 28 26 22 21 17 15 0 49 1 49 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = s_alt;
},
{
glyphname = s;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,388,o),
(325,363,q),
(478,363,l),
(474,410,o),
(436,477,o),
(378,519,o),
(301,538,o),
(259,538,qs),
(218,538,o),
(139,520,o),
(78,481,o),
(40,416,o),
(40,370,qs),
(40,328,o),
(77,272,o),
(131,240,o),
(205,217,o),
(244,209,qs),
(260,206,o),
(292,199,o),
(319,191,o),
(337,176,o),
(337,159,qs),
(335,140,o),
(303,121,o),
(276,121,qs),
(243,121,o),
(194,146,o),
(188,173,q),
(26,173,l),
(32,121,o),
(79,53,o),
(147,10,o),
(231,-8,o),
(274,-8,qs),
(313,-8,o),
(391,9,o),
(452,51,o),
(491,117,o),
(492,166,qs),
(491,221,o),
(439,282,o),
(363,312,o),
(273,327,o),
(233,338,qs),
(210,344,o),
(193,361,o),
(193,375,qs),
(195,394,o),
(229,409,o),
(253,409,qs),
(281,409,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
3 1 5 0 28 1 3 2 2 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 49 48 44 42 26 24 22 21 17 15 0 51 1 51 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = s;
unicode = 115;
},
{
glyphname = c_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,153,o),
(197,188,o),
(186,236,o),
(186,265,qs),
(186,289,o),
(197,335,o),
(223,372,o),
(263,394,o),
(292,394,qs),
(327,394,o),
(372,363,o),
(379,336,q),
(541,336,l),
(535,388,o),
(493,463,o),
(429,513,o),
(345,537,o),
(298,537,qs),
(235,537,o),
(135,498,o),
(67,426,o),
(30,326,o),
(30,265,qs),
(30,135,o),
(164,-8,o),
(293,-8,qs),
(335,-8,o),
(416,12,o),
(481,55,o),
(528,121,o),
(537,169,q),
(373,169,l),
(364,152,o),
(321,132,o),
(294,132,qs),
(265,132,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 29 77 6 1 0 0 2 97 0 2 2 30 2 78 1 0 27 25 23 22 18 16 10 8 4 3 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = c_alt;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(705,-32,o),
(813,73,o),
(872,225,o),
(872,321,qs),
(872,412,o),
(812,562,o),
(703,670,o),
(552,729,o),
(461,729,qs),
(368,729,o),
(215,672,o),
(106,566,o),
(46,415,o),
(46,321,qs),
(46,225,o),
(105,74,o),
(213,-31,o),
(366,-87,o),
(461,-87,qs),
(553,-87,o)
);
},
{
closed = 1;
nodes = (
(282,68,o),
(206,146,o),
(166,254,o),
(166,320,qs),
(166,384,o),
(207,492,o),
(285,570,o),
(396,614,o),
(465,614,qs),
(535,614,o),
(644,570,o),
(719,492,o),
(758,384,o),
(758,320,qs),
(758,254,o),
(719,145,o),
(645,68,o),
(535,26,o),
(465,26,qs),
(394,26,o)
);
},
{
closed = 1;
nodes = (
(413,241,o),
(395,268,o),
(388,303,o),
(388,322,qs),
(388,340,o),
(395,375,o),
(413,402,o),
(444,418,o),
(468,418,qs),
(494,418,o),
(530,393,o),
(532,373,q),
(658,373,l),
(647,456,o),
(547,530,o),
(472,530,qs),
(426,530,o),
(350,502,o),
(295,449,o),
(264,372,o),
(264,322,qs),
(264,219,o),
(371,111,o),
(467,111,qs),
(504,111,o),
(569,128,o),
(620,165,o),
(653,225,o),
(659,267,q),
(533,267,l),
(530,249,o),
(496,224,o),
(469,224,qs),
(444,224,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 8 9 5 9 8 114 0 5 4 9 5 4 126 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 4 0 6 2 4 6 105 11 1 2 0 0 2 89 11 1 2 2 0 98 10 1 0 2 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 8 9 5 9 8 5 128 0 5 4 9 5 4 126 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 4 0 6 2 4 6 105 11 1 2 0 0 2 89 11 1 2 2 0 98 10 1 0 2 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
41 40 21 20 1 0 65 63 61 60 58 56 50 48 44 43 40 73 41 73 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 918;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(579,154,l),
(607,198,o),
(635,293,o),
(640,344,q),
(505,344,l),
(504,325,o),
(493,274,o),
(482,252,q),
(390,352,l),
(415,368,o),
(462,405,o),
(498,452,o),
(520,507,o),
(520,541,qs),
(520,582,o),
(488,645,o),
(436,689,o),
(366,712,o),
(329,714,qs),
(284,714,o),
(204,690,o),
(143,642,o),
(108,569,o),
(108,520,qs),
(108,478,o),
(142,408,o),
(169,379,q),
(121,350,o),
(54,258,o),
(54,190,qs),
(54,138,o),
(92,62,o),
(156,12,o),
(239,-12,o),
(284,-12,qs),
(339,-12,o),
(440,16,o),
(479,48,q),
(526,0,l),
(720,0,l)
);
},
{
closed = 1;
nodes = (
(374,136,o),
(327,121,o),
(303,121,qs),
(283,121,o),
(245,129,o),
(216,147,o),
(198,176,o),
(198,197,qs),
(198,220,o),
(226,265,o),
(260,287,q),
(390,147,l)
);
},
{
closed = 1;
nodes = (
(247,503,o),
(247,526,qs),
(247,552,o),
(283,587,o),
(316,587,qs),
(346,587,o),
(377,552,o),
(377,530,qs),
(377,518,o),
(362,492,o),
(339,469,o),
(311,448,o),
(297,441,q),
(276,461,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
30 12 2 2 5 51 38 31 3 4 2 1 1 0 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
30 12 2 2 5 51 38 31 3 4 2 1 1 3 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 5 1 97 0 1 1 46 77 0 2 2 0 97 6 3 2 0 0 47 77 0 4 4 0 97 6 3 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 1 97 0 1 1 46 77 0 2 2 3 95 6 1 3 3 39 77 0 4 4 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 61 59 49 47 0 39 0 39 29 46 35 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(611,533,o),
(581,611,o),
(527,668,o),
(454,704,o),
(410,709,q),
(410,852,l),
(266,852,l),
(266,710,l),
(227,705,o),
(155,674,o),
(101,623,o),
(68,550,o),
(68,502,qs),
(68,452,o),
(100,381,o),
(162,330,o),
(249,297,o),
(305,285,qs),
(329,280,o),
(360,273,o),
(381,268,o),
(394,265,o),
(399,264,qs),
(425,257,o),
(466,233,o),
(466,206,qs),
(466,187,o),
(446,162,o),
(415,148,o),
(374,142,o),
(353,142,qs),
(328,142,o),
(279,152,o),
(239,175,o),
(211,211,o),
(207,237,q),
(46,237,l),
(50,137,o),
(167,21,o),
(262,1,q),
(262,-140,l),
(407,-140,l),
(407,-3,l),
(451,2,o),
(531,31,o),
(591,84,o),
(627,162,o),
(627,216,qs),
(627,267,o),
(598,334,o),
(547,376,o),
(477,401,o),
(437,411,qs),
(409,418,o),
(345,430,o),
(298,444,qs),
(267,453,o),
(229,483,o),
(229,508,qs),
(229,528,o),
(248,553,o),
(279,567,o),
(317,572,o),
(336,571,qs),
(384,569,o),
(452,530,o),
(457,486,q),
(613,486,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
62 59 2 0 4 27 24 2 1 3 2 76 6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 4 0 0 5 4 0 105 0 3 1 1 3 89 0 3 3 1 95 0 1 3 1 79 0 0 0 67 0 67 61 60 37 35 31 30 26 25 34 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,-80,o),
(217,-189,q),
(409,-189,l),
(359,-137,o),
(286,-16,o),
(238,112,o),
(214,244,o),
(213,308,qs),
(214,372,o),
(238,504,o),
(286,633,o),
(359,753,o),
(409,806,q),
(217,806,l),
(133,696,o),
(52,442,o),
(52,308,qs),
(52,174,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
26 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,696,o),
(149,806,q),
(-43,806,l),
(6,753,o),
(80,633,o),
(128,504,o),
(152,372,o),
(153,308,qs),
(152,244,o),
(128,112,o),
(80,-16,o),
(6,-137,o),
(-43,-189,q),
(149,-189,l),
(232,-80,o),
(314,174,o),
(314,308,qs),
(314,442,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
26 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,154,o),
(215,190,o),
(204,237,o),
(204,264,qs),
(204,289,o),
(215,337,o),
(240,376,o),
(282,398,o),
(312,398,qs),
(347,398,o),
(393,362,o),
(398,335,q),
(559,335,l),
(550,422,o),
(455,522,o),
(382,534,q),
(382,682,l),
(236,682,l),
(236,532,l),
(192,523,o),
(122,477,o),
(73,407,o),
(46,317,o),
(46,264,qs),
(46,155,o),
(140,16,o),
(236,-4,q),
(236,-145,l),
(383,-145,l),
(383,-5,l),
(456,9,o),
(553,108,o),
(563,193,q),
(398,193,l),
(393,168,o),
(348,132,o),
(313,132,qs),
(283,132,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
21 18 2 5 3 10 7 2 2 0 2 76 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 3 0 5 4 3 5 105 6 1 0 2 2 0 89 6 1 0 0 2 95 0 2 0 2 79 1 0 29 27 25 24 20 19 9 8 4 3 0 37 1 37 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = cent;
unicode = 162;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,576,o),
(360,550,q),
(515,550,l),
(512,595,o),
(474,658,o),
(413,698,o),
(334,716,o),
(290,716,qs),
(253,716,o),
(174,701,o),
(108,665,o),
(66,605,o),
(66,560,qs),
(66,528,o),
(94,472,o),
(117,457,q),
(91,440,o),
(60,386,o),
(60,355,qs),
(60,309,o),
(103,251,o),
(176,214,o),
(273,192,o),
(327,182,qs),
(345,178,o),
(365,162,o),
(365,147,qs),
(365,127,o),
(322,108,o),
(293,109,qs),
(261,110,o),
(209,140,o),
(203,172,q),
(46,172,l),
(48,121,o),
(90,50,o),
(158,6,o),
(247,-13,o),
(296,-13,qs),
(335,-13,o),
(416,5,o),
(481,44,o),
(522,106,o),
(523,150,qs),
(524,179,o),
(503,235,o),
(480,255,q),
(502,275,o),
(526,330,o),
(526,359,qs),
(526,404,o),
(488,458,o),
(427,490,o),
(348,506,o),
(308,513,qs),
(298,515,o),
(270,520,o),
(243,530,o),
(224,547,o),
(224,560,qs),
(224,572,o),
(237,587,o),
(259,596,o),
(279,597,o),
(288,597,qs),
(316,596,o)
);
},
{
closed = 1;
nodes = (
(295,397,o),
(325,389,qs),
(343,384,o),
(377,365,o),
(377,344,qs),
(377,332,o),
(365,309,o),
(354,301,q),
(330,306,o),
(280,314,o),
(238,327,o),
(212,349,o),
(212,367,qs),
(212,379,o),
(223,402,o),
(235,409,q),
(251,405,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
74 49 18 3 2 5 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 2 0 63 62 58 56 36 34 32 31 27 25 0 65 2 65 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = section;
unicode = 167;
},
{
glyphname = uni04C1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(693,840,o),
(701,926,q),
(568,926,l),
(565,897,o),
(529,867,o),
(501,867,qs),
(474,867,o),
(437,897,o),
(433,926,q),
(301,926,l),
(308,840,o),
(416,759,o),
(501,759,qs),
(586,759,o)
);
},
{
closed = 1;
nodes = (
(807,0,l),
(998,0,l),
(781,369,l),
(997,708,l),
(810,708,l),
(644,425,l),
(581,425,l),
(581,708,l),
(418,708,l),
(418,425,l),
(354,425,l),
(189,708,l),
(2,708,l),
(218,369,l),
(1,0,l),
(191,0,l),
(349,279,l),
(418,279,l),
(418,0,l),
(581,0,l),
(581,279,l),
(650,279,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 5 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
3 1 1 2 2 1 112 0 2 14 1 0 7 2 0 106 10 1 8 15 13 2 5 4 8 5 103 11 9 2 7 7 20 77 12 6 2 4 4 21 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
3 1 1 2 1 133 0 2 14 1 0 7 2 0 106 10 1 8 15 13 2 5 4 8 5 103 11 9 2 7 7 20 77 12 6 2 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
14 14 1 0 14 35 14 35 34 33 31 30 29 28 27 26 25 24 23 22 20 19 18 17 16 15 11 10 8 6 4 3 0 13 1 13 16 7 22 
CALL[ ]	/* CallFunction */";
};
width = 999;
}
);
note = uni04C1;
unicode = 1217;
},
{
glyphname = uni04C2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(620,647,o),
(628,736,q),
(494,736,l),
(491,707,o),
(455,676,o),
(426,676,qs),
(399,676,o),
(362,707,o),
(358,736,q),
(224,736,l),
(231,647,o),
(340,567,o),
(426,567,qs),
(512,567,o)
);
},
{
closed = 1;
nodes = (
(668,0,l),
(851,0,l),
(694,276,l),
(843,527,l),
(668,527,l),
(566,331,l),
(505,331,l),
(505,527,l),
(347,527,l),
(347,331,l),
(288,331,l),
(184,527,l),
(9,527,l),
(158,276,l),
(1,0,l),
(184,0,l),
(284,191,l),
(347,191,l),
(347,0,l),
(505,0,l),
(505,191,l),
(569,191,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 5 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
3 1 1 2 2 1 112 0 2 14 1 0 7 2 0 106 10 1 8 15 13 2 5 4 8 5 103 11 9 2 7 7 22 77 12 6 2 4 4 21 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
3 1 1 2 1 133 0 2 14 1 0 7 2 0 106 10 1 8 15 13 2 5 4 8 5 103 11 9 2 7 7 22 77 12 6 2 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
14 14 1 0 14 35 14 35 34 33 31 30 29 28 27 26 25 24 23 22 20 19 18 17 16 15 11 10 8 6 4 3 0 13 1 13 16 7 22 
CALL[ ]	/* CallFunction */";
};
width = 852;
}
);
note = uni04C2;
unicode = 1218;
},
{
glyphname = w_alt;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,255,l),
(495,0,l),
(665,0,l),
(829,527,l),
(663,527,l),
(573,186,l),
(495,423,l),
(342,423,l),
(264,186,l),
(175,527,l),
(1,527,l),
(165,0,l),
(338,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 3 3 3 1 1 76 0 1 0 3 0 1 3 128 2 1 0 0 22 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 830;
}
);
note = w_alt;
},
{
glyphname = W_alt;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,0,l),
(775,0,l),
(951,708,l),
(768,708,l),
(668,206,l),
(568,558,l),
(384,558,l),
(284,206,l),
(184,708,l),
(0,708,l),
(176,0,l),
(379,0,l),
(475,342,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
12 7 4 3 0 2 1 76 0 2 1 0 1 2 0 128 3 1 1 1 20 77 4 1 0 0 21 0 78 17 18 18 17 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 951;
}
);
note = W_alt;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,176,o),
(215,234,o),
(204,312,o),
(204,355,qs),
(204,398,o),
(216,475,o),
(245,533,o),
(294,567,o),
(331,567,qs),
(367,567,o),
(414,533,o),
(443,474,o),
(454,397,o),
(454,355,qs),
(454,311,o),
(442,234,o),
(414,175,o),
(365,141,o),
(329,141,qs),
(292,141,o)
);
},
{
closed = 1;
nodes = (
(152,667,o),
(80,574,o),
(44,439,o),
(44,355,qs),
(44,270,o),
(79,136,o),
(149,43,o),
(257,-7,o),
(329,-7,qs),
(401,-7,o),
(508,43,o),
(579,136,o),
(614,270,o),
(614,355,qs),
(614,439,o),
(578,573,o),
(507,667,o),
(401,717,o),
(331,717,qs),
(260,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 2 97 5 1 2 2 46 77 4 1 0 0 3 97 0 3 3 47 3 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,708,l),
(166,661,o),
(72,624,o),
(12,624,q),
(12,504,l),
(151,504,l),
(151,0,l),
(314,0,l),
(314,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 38 77 0 0 0 39 0 78 18 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 408;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,0,l),
(512,147,l),
(257,147,l),
(299,180,o),
(391,253,o),
(469,335,o),
(520,437,o),
(520,496,qs),
(520,551,o),
(481,633,o),
(415,688,o),
(326,716,o),
(277,716,qs),
(224,716,o),
(131,688,o),
(61,632,o),
(19,547,o),
(17,491,q),
(168,491,l),
(173,522,o),
(218,566,o),
(269,566,qs),
(314,566,o),
(357,519,o),
(357,485,qs),
(357,454,o),
(326,399,o),
(281,353,o),
(213,293,qs),
(165,251,o),
(70,172,o),
(22,133,q),
(22,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
0 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 0 3 3 4 95 0 4 4 39 4 78 17 25 36 18 41 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,531,o),
(257,569,o),
(298,569,qs),
(334,569,o),
(381,534,o),
(382,503,qs),
(382,494,o),
(377,467,o),
(358,443,o),
(322,426,o),
(293,426,qs),
(238,426,l),
(238,292,l),
(320,292,ls),
(368,292,o),
(406,250,o),
(406,222,qs),
(406,200,o),
(389,169,o),
(361,150,o),
(324,142,o),
(304,142,qs),
(260,142,o),
(190,179,o),
(180,223,q),
(20,223,l),
(27,112,o),
(187,-7,o),
(302,-7,qs),
(348,-7,o),
(441,13,o),
(523,65,o),
(574,151,o),
(575,216,qs),
(576,273,o),
(523,364,o),
(470,384,q),
(506,405,o),
(549,481,o),
(549,524,qs),
(549,577,o),
(507,650,o),
(438,696,o),
(349,717,o),
(303,717,qs),
(251,717,o),
(160,691,o),
(90,637,o),
(45,554,o),
(40,497,q),
(198,497,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
13 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 103 0 6 6 0 97 0 0 0 46 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 50 0 50 38 33 38 34 18 46 36 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,708,l),
(29,247,l),
(29,127,l),
(374,127,l),
(374,0,l),
(537,0,l),
(537,127,l),
(613,127,l),
(613,272,l),
(537,272,l),
(537,708,l)
);
},
{
closed = 1;
nodes = (
(374,272,l),
(213,272,l),
(374,519,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
13 1 0 4 8 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 0 4 4 38 77 0 2 2 39 2 78 17 18 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = four;
unicode = 52;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,589,l),
(506,708,l),
(-1,708,l),
(-1,559,l),
(320,559,l),
(60,0,l),
(242,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,358,o),
(482,381,q),
(516,402,o),
(558,477,o),
(558,519,qs),
(558,573,o),
(517,648,o),
(450,696,o),
(362,717,o),
(316,717,qs),
(269,717,o),
(181,696,o),
(112,649,o),
(70,574,o),
(70,519,qs),
(70,477,o),
(110,404,o),
(145,381,q),
(91,357,o),
(44,268,o),
(44,208,qs),
(45,149,o),
(92,67,o),
(168,16,o),
(264,-8,o),
(315,-8,qs),
(364,-8,o),
(460,16,o),
(536,67,o),
(583,148,o),
(584,206,qs),
(584,269,o)
);
},
{
closed = 1;
nodes = (
(400,538,o),
(400,503,qs),
(400,468,o),
(356,425,o),
(314,425,qs),
(274,425,o),
(227,467,o),
(227,502,qs),
(227,538,o),
(273,578,o),
(314,578,qs),
(352,578,o)
);
},
{
closed = 1;
nodes = (
(404,166,o),
(375,145,o),
(336,134,o),
(314,134,qs),
(292,134,o),
(252,145,o),
(222,166,o),
(205,199,o),
(205,221,qs),
(205,263,o),
(267,306,o),
(313,306,qs),
(359,306,o),
(421,264,o),
(421,221,qs),
(421,199,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
29 13 2 4 3 1 76 0 3 0 4 5 3 4 105 6 1 2 2 1 97 0 1 1 46 77 0 5 5 0 97 0 0 0 47 0 78 33 32 56 54 48 46 39 37 32 43 33 43 46 36 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,516,o),
(401,473,qs),
(401,456,o),
(389,423,o),
(364,397,o),
(327,381,o),
(303,381,qs),
(254,381,o),
(201,435,o),
(201,477,qs),
(201,519,o),
(256,570,o),
(304,570,qs),
(347,570,o)
);
},
{
closed = 1;
nodes = (
(49,146,o),
(93,68,o),
(161,17,o),
(249,-7,o),
(298,-7,qs),
(375,-7,o),
(482,52,o),
(550,151,o),
(580,280,o),
(580,349,qs),
(580,415,o),
(554,546,o),
(491,650,o),
(385,715,o),
(305,715,qs),
(251,715,o),
(155,683,o),
(83,621,o),
(41,529,o),
(41,469,qs),
(41,417,o),
(74,334,o),
(134,275,o),
(219,244,o),
(271,244,qs),
(289,244,o),
(331,250,o),
(373,265,o),
(413,290,o),
(430,309,q),
(429,276,o),
(412,215,o),
(380,167,o),
(331,139,o),
(299,139,qs),
(264,139,o),
(206,169,o),
(198,199,q),
(43,199,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
22 1 3 1 1 76 8 1 6 3 2 3 6 2 128 0 1 0 3 6 1 3 105 7 1 0 0 4 97 0 4 4 46 77 0 2 2 5 97 0 5 5 47 5 78 14 14 1 0 14 52 14 52 48 46 38 36 28 26 18 16 7 5 0 13 1 13 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni0430;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(359,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(112,290,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 29 77 0 1 1 2 97 8 7 2 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 29 77 8 1 7 7 21 77 0 1 1 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
12 12 12 47 12 47 36 18 34 41 40 36 32 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = uni0430;
unicode = 1072;
},
{
glyphname = uni0435;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 1 4 0 4 1 0 128 8 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 29 77 7 1 0 0 2 97 0 2 2 30 2 78 29 29 1 0 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = uni0435;
unicode = 1077;
},
{
glyphname = uni043E;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
4 1 0 0 3 97 0 3 3 29 77 0 1 1 2 97 5 1 2 2 30 2 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = uni043E;
unicode = 1086;
},
{
glyphname = uni0441;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,156,o),
(203,190,o),
(192,236,o),
(192,263,qs),
(192,287,o),
(202,334,o),
(227,371,o),
(268,393,o),
(298,393,qs),
(333,393,o),
(377,360,o),
(383,333,q),
(542,333,l),
(537,384,o),
(498,461,o),
(435,512,o),
(351,538,o),
(303,538,qs),
(240,538,o),
(141,500,o),
(72,429,o),
(34,327,o),
(34,264,qs),
(34,134,o),
(171,-8,o),
(299,-8,qs),
(345,-8,o),
(431,16,o),
(498,66,o),
(540,142,o),
(545,195,q),
(383,195,l),
(378,169,o),
(334,134,o),
(298,134,qs),
(269,134,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 29 77 6 1 0 0 2 97 0 2 2 30 2 78 1 0 27 25 23 22 18 16 10 8 4 3 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = uni0441;
unicode = 1089;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,-212,o),
(279,-231,o),
(256,-247,o),
(246,-253,q),
(279,-301,l),
(303,-292,o),
(350,-261,o),
(385,-217,o),
(406,-165,o),
(406,-136,qs),
(406,-100,o),
(365,-47,o),
(325,-46,qs),
(293,-46,o),
(253,-82,o),
(253,-115,qs),
(253,-145,o),
(290,-178,o),
(316,-180,q),
(313,-190,o)
);
},
{
closed = 1;
nodes = (
(589,549,o),
(546,632,o),
(478,688,o),
(389,715,o),
(337,717,qs),
(289,717,o),
(189,698,o),
(108,649,o),
(56,565,o),
(56,501,qs),
(56,437,o),
(107,360,o),
(196,311,o),
(314,282,o),
(382,266,qs),
(410,259,o),
(447,232,o),
(447,206,qs),
(447,188,o),
(428,163,o),
(400,148,o),
(364,142,o),
(348,142,qs),
(322,142,o),
(273,151,o),
(234,171,o),
(206,204,o),
(200,229,q),
(35,229,l),
(40,164,o),
(94,74,o),
(178,18,o),
(282,-7,o),
(338,-7,qs),
(392,-7,o),
(491,18,o),
(566,72,o),
(611,156,o),
(611,216,qs),
(609,282,o),
(560,356,o),
(481,398,o),
(381,420,o),
(329,434,qs),
(303,441,o),
(262,453,o),
(233,469,o),
(218,491,o),
(218,508,qs),
(218,524,o),
(235,548,o),
(263,563,o),
(298,570,o),
(316,570,qs),
(367,570,o),
(430,530,o),
(436,492,q),
(595,492,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
15 14 0 3 0 73 7 1 6 1 3 1 6 3 128 0 3 4 1 3 4 126 0 0 2 0 134 0 1 1 5 97 0 5 5 46 77 0 4 4 2 97 0 2 2 47 2 78 20 20 20 77 20 77 73 71 55 53 49 48 44 42 47 37 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,389,o),
(329,363,q),
(482,363,l),
(478,410,o),
(440,477,o),
(382,519,o),
(305,538,o),
(263,538,qs),
(222,538,o),
(143,520,o),
(82,481,o),
(44,416,o),
(44,370,qs),
(44,328,o),
(79,274,o),
(135,238,o),
(209,216,o),
(248,209,qs),
(264,205,o),
(296,199,o),
(323,190,o),
(341,173,o),
(341,158,qs),
(341,137,o),
(301,121,o),
(280,121,qs),
(247,121,o),
(198,146,o),
(192,173,q),
(30,173,l),
(36,121,o),
(84,53,o),
(154,11,o),
(238,-6,o),
(281,-6,qs),
(319,-6,o),
(396,11,o),
(457,52,o),
(495,117,o),
(496,166,qs),
(495,203,o),
(471,254,o),
(431,287,o),
(380,307,o),
(322,320,o),
(264,330,o),
(237,337,qs),
(214,343,o),
(196,361,o),
(197,375,qs),
(198,394,o),
(236,409,o),
(257,409,qs),
(285,409,o)
);
},
{
closed = 1;
nodes = (
(250,-214,o),
(231,-233,o),
(208,-249,o),
(198,-256,q),
(231,-304,l),
(256,-295,o),
(303,-264,o),
(338,-219,o),
(360,-167,o),
(360,-137,qs),
(360,-101,o),
(319,-46,o),
(281,-46,qs),
(248,-46,o),
(205,-83,o),
(205,-116,qs),
(205,-146,o),
(242,-180,o),
(269,-182,q),
(266,-192,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
3 1 5 0 1 76 69 68 54 3 6 73 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 7 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 61 59 51 50 46 44 28 26 24 23 19 17 0 53 1 53 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,0,l),
(383,0,l),
(383,559,l),
(598,559,l),
(598,708,l),
(5,708,l),
(5,559,l),
(220,559,l)
);
},
{
closed = 1;
nodes = (
(272,-212,o),
(253,-231,o),
(230,-247,o),
(220,-253,q),
(253,-301,l),
(277,-292,o),
(324,-261,o),
(359,-217,o),
(380,-165,o),
(380,-136,qs),
(380,-100,o),
(340,-46,o),
(302,-46,qs),
(271,-45,o),
(227,-82,o),
(227,-115,qs),
(227,-145,o),
(264,-178,o),
(290,-180,q),
(287,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
23 22 8 3 4 73 0 4 2 4 134 5 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 0 0 15 13 0 7 0 7 17 17 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,527,l),
(251,527,l),
(251,664,l),
(94,664,l),
(94,527,l),
(16,527,l),
(16,386,l),
(94,386,l),
(94,176,ls),
(94,125,o),
(118,59,o),
(168,17,o),
(241,0,o),
(291,0,qs),
(358,0,l),
(358,140,l),
(308,140,ls),
(276,140,o),
(251,173,o),
(251,199,qs),
(251,386,l),
(363,386,l)
);
},
{
closed = 1;
nodes = (
(194,-214,o),
(175,-233,o),
(152,-249,o),
(141,-256,q),
(175,-304,l),
(199,-295,o),
(246,-264,o),
(282,-219,o),
(303,-167,o),
(303,-137,qs),
(303,-101,o),
(263,-46,o),
(224,-46,qs),
(193,-45,o),
(148,-83,o),
(148,-116,qs),
(148,-146,o),
(186,-180,o),
(212,-182,q),
(209,-192,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
37 36 22 3 7 73 0 4 3 4 133 0 7 1 7 134 8 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 0 0 29 27 0 21 0 21 17 17 17 21 33 35 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,133,o),
(163,86,qs),
(163,38,o),
(218,-9,o),
(260,-9,qs),
(301,-9,o),
(356,38,o),
(356,86,qs),
(356,133,o),
(301,181,o),
(260,181,qs),
(218,181,o)
);
},
{
closed = 1;
nodes = (
(329,273,o),
(371,326,o),
(398,353,qs),
(427,381,o),
(465,426,o),
(487,466,o),
(497,504,o),
(498,525,qs),
(498,578,o),
(459,651,o),
(395,697,o),
(312,717,o),
(268,717,qs),
(150,717,o),
(24,603,o),
(24,499,q),
(177,499,l),
(179,537,o),
(225,570,o),
(265,570,qs),
(300,570,o),
(338,539,o),
(338,510,qs),
(338,490,o),
(315,457,o),
(281,425,o),
(240,392,o),
(206,353,o),
(182,306,o),
(181,276,qs),
(181,266,o),
(182,245,o),
(184,233,q),
(330,233,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 3 2 5 2 3 114 7 1 5 0 2 5 0 126 0 2 2 4 97 0 4 4 46 77 6 1 0 0 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 5 2 3 5 128 7 1 5 0 2 5 0 126 0 2 2 4 97 0 4 4 46 77 6 1 0 0 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
12 12 1 0 12 45 12 45 33 31 29 28 26 24 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = question;
unicode = 63;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,0,l),
(206,0,l),
(206,416,l),
(470,0,l),
(622,0,l),
(622,708,l),
(462,708,l),
(462,290,l),
(200,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(1031,214,l),
(1031,334,l),
(708,334,l),
(708,214,l)
);
},
{
closed = 1;
nodes = (
(975,391,o),
(1023,437,o),
(1049,502,o),
(1049,542,qs),
(1049,581,o),
(1024,645,o),
(978,692,o),
(912,717,o),
(870,717,qs),
(829,717,o),
(763,692,o),
(717,646,o),
(691,582,o),
(691,542,qs),
(691,502,o),
(717,437,o),
(764,391,o),
(830,366,o),
(870,366,qs),
(909,366,o)
);
},
{
closed = 1;
nodes = (
(907,590,o),
(921,572,o),
(927,551,o),
(927,542,qs),
(927,521,o),
(901,483,o),
(870,483,qs),
(838,483,o),
(812,521,o),
(812,542,qs),
(812,551,o),
(818,572,o),
(832,590,o),
(854,601,o),
(870,601,qs),
(885,601,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
6 1 6 9 1 1 5 4 2 76 10 3 2 0 7 8 7 0 8 128 2 1 1 5 1 134 0 7 12 1 8 9 7 8 105 0 9 11 1 6 4 9 6 105 0 4 5 5 4 87 0 4 4 5 95 0 5 4 5 79 35 34 15 14 0 0 43 41 34 49 35 49 25 23 14 33 15 33 13 12 11 10 0 9 0 9 18 17 18 13 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1095;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = uni0401;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(125,895,o),
(125,854,qs),
(125,812,o),
(177,766,o),
(215,766,qs),
(253,766,o),
(305,812,o),
(305,854,qs),
(305,896,o),
(253,941,o),
(215,941,qs),
(177,941,o)
);
},
{
closed = 1;
nodes = (
(373,895,o),
(373,854,qs),
(373,812,o),
(425,766,o),
(463,766,qs),
(501,766,o),
(553,812,o),
(553,854,qs),
(553,896,o),
(501,941,o),
(463,941,qs),
(425,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
12 8 11 3 6 9 1 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 20 77 0 3 3 4 95 0 4 4 21 4 78 25 24 13 12 0 0 31 29 24 35 25 35 19 17 12 23 13 23 0 11 0 11 17 17 17 17 17 13 7 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = uni0401;
unicode = 1025;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,249,o),
(217,282,o),
(223,312,o),
(239,334,o),
(255,334,qs),
(271,334,o),
(307,302,o),
(353,264,o),
(413,232,o),
(454,232,qs),
(508,232,o),
(573,278,o),
(608,349,o),
(618,434,o),
(616,474,q),
(472,474,l),
(473,464,o),
(474,433,o),
(468,404,o),
(453,383,o),
(438,383,qs),
(421,383,o),
(386,414,o),
(343,450,o),
(285,481,o),
(245,481,qs),
(190,481,o),
(122,436,o),
(84,366,o),
(73,280,o),
(75,238,q),
(220,238,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 1 0 2 1 128 0 1 4 3 1 89 0 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 0 1 0 2 1 128 6 1 5 4 3 4 5 3 128 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 31 0 31 35 36 20 35 36 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 691;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,384,l),
(251,599,l),
(345,599,l),
(345,708,l),
(46,708,l),
(46,599,l),
(139,599,l),
(139,384,l)
);
},
{
closed = 1;
nodes = (
(590,464,o),
(625,521,o),
(643,547,q),
(643,384,l),
(743,384,l),
(743,708,l),
(638,708,l),
(562,586,l),
(542,616,o),
(504,677,o),
(485,708,q),
(379,708,l),
(379,384,l),
(480,384,l),
(480,547,l),
(498,521,o),
(534,464,o),
(551,438,q),
(573,438,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
23 18 11 3 8 0 1 76 9 1 8 0 3 0 8 3 128 7 4 2 3 3 132 6 5 2 1 0 0 1 87 6 5 2 1 1 0 95 2 1 0 1 0 79 8 8 8 26 8 26 17 20 17 21 17 17 17 16 10 6 30 
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,707,o),
(70,656,o),
(39,582,o),
(39,534,qs),
(39,486,o),
(69,413,o),
(124,364,o),
(199,338,o),
(244,338,qs),
(288,338,o),
(363,364,o),
(417,414,o),
(447,487,o),
(447,534,qs),
(447,581,o),
(417,656,o),
(363,707,o),
(289,734,o),
(244,734,qs),
(200,734,o)
);
},
{
closed = 1;
nodes = (
(383,602,o),
(383,534,qs),
(383,467,o),
(305,399,o),
(243,399,qs),
(181,399,o),
(103,467,o),
(103,534,qs),
(103,602,o),
(181,674,o),
(243,674,qs),
(306,674,o)
);
},
{
closed = 1;
nodes = (
(331,531,o),
(329,574,qs),
(329,609,o),
(284,641,o),
(249,641,qs),
(167,641,l),
(167,441,l),
(222,441,l),
(222,506,l),
(237,506,l),
(278,441,l),
(341,441,l),
(293,514,l)
);
},
{
closed = 1;
nodes = (
(261,593,o),
(276,586,o),
(276,573,qs),
(276,561,o),
(261,552,o),
(250,552,qs),
(222,552,l),
(222,593,l),
(249,593,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
44 1 5 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 7 2 9 0 7 114 12 1 9 8 2 9 112 0 8 5 2 8 5 126 0 5 4 9 5 112 6 1 4 3 2 4 3 126 10 1 0 11 1 2 7 0 2 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 7 2 9 2 7 9 128 12 1 9 8 2 9 112 0 8 5 2 8 5 126 0 5 4 2 5 4 126 6 1 4 3 2 4 3 126 10 1 0 11 1 2 7 0 2 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
0 7 2 9 2 7 9 128 12 1 9 8 2 9 8 126 0 8 5 2 8 5 126 0 5 4 2 5 4 126 6 1 4 3 2 4 3 126 10 1 0 11 1 2 7 0 2 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
45 45 21 20 1 0 45 53 45 52 48 46 40 38 37 36 35 34 33 32 27 25 20 31 21 31 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 486;
}
);
note = registered;
unicode = 174;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,732,o),
(72,690,o),
(46,629,o),
(46,590,qs),
(46,551,o),
(72,491,o),
(117,450,o),
(177,430,o),
(212,430,qs),
(247,430,o),
(308,450,o),
(353,491,o),
(378,551,o),
(378,590,qs),
(378,629,o),
(353,690,o),
(308,733,o),
(247,755,o),
(212,755,qs),
(177,755,o)
);
},
{
closed = 1;
nodes = (
(273,619,o),
(273,591,qs),
(273,563,o),
(239,532,o),
(213,532,qs),
(187,532,o),
(154,563,o),
(154,591,qs),
(154,619,o),
(187,651,o),
(213,651,qs),
(239,651,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 424;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,432,o),
(46,363,qs),
(46,294,o),
(129,218,o),
(193,218,qs),
(256,218,o),
(338,294,o),
(338,363,qs),
(338,396,o),
(316,450,o),
(278,488,o),
(224,509,o),
(193,509,qs),
(129,509,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 41 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 9 7 0 13 1 13 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = uni27F5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,274,l),
(419,-57,l),
(506,51,l),
(323,204,l),
(1360,204,l),
(1360,342,l),
(323,342,l),
(506,494,l),
(418,604,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
7 1 1 0 1 76 8 1 0 74 6 5 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1406;
}
);
note = uni27F5;
unicode = 10229;
},
{
glyphname = uni27F6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1082,342,l),
(46,342,l),
(46,204,l),
(1082,204,l),
(900,51,l),
(987,-57,l),
(1360,274,l),
(987,604,l),
(900,494,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 0 1 1 76 8 1 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1406;
}
);
note = uni27F6;
unicode = 10230;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,414,l),
(315,0,l),
(451,0,l),
(451,414,l),
(610,228,l),
(719,320,l),
(382,680,l),
(46,320,l),
(155,228,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
8 7 4 3 2 1 6 0 74 0 0 0 118 21 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,-3,l),
(719,356,l),
(610,449,l),
(451,263,l),
(451,677,l),
(315,677,l),
(315,263,l),
(155,449,l),
(46,356,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
8 7 6 5 4 1 6 0 73 0 0 0 118 18 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni21BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(921,723,l),
(516,758,l),
(514,658,o),
(510,460,o),
(508,360,q),
(633,360,l),
(633,405,o),
(632,494,o),
(632,539,q),
(659,510,o),
(692,453,o),
(709,401,o),
(714,355,o),
(714,339,qs),
(714,291,o),
(679,204,o),
(613,136,o),
(517,96,o),
(456,96,qs),
(392,96,o),
(295,140,o),
(229,212,o),
(196,304,o),
(196,353,qs),
(196,414,o),
(250,534,o),
(310,578,q),
(214,686,l),
(129,626,o),
(47,454,o),
(47,354,qs),
(48,266,o),
(107,119,o),
(213,14,o),
(362,-44,o),
(454,-44,qs),
(546,-44,o),
(696,10,o),
(803,109,o),
(863,245,o),
(864,328,qs),
(864,368,o),
(847,450,o),
(814,527,o),
(766,593,o),
(736,619,q),
(907,598,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
46 44 37 19 18 5 2 74 0 2 1 2 133 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 28 47 41 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 967;
}
);
note = uni21BA;
unicode = 8634;
},
{
glyphname = uni21BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,594,o),
(153,528,o),
(120,453,o),
(103,372,o),
(103,333,qs),
(103,250,o),
(161,112,o),
(267,11,o),
(418,-45,o),
(510,-45,qs),
(603,-45,o),
(754,14,o),
(861,120,o),
(919,268,o),
(919,357,qs),
(919,456,o),
(837,627,o),
(752,686,q),
(729,659,o),
(680,605,o),
(657,578,q),
(718,533,o),
(771,412,o),
(771,350,qs),
(771,300,o),
(736,209,o),
(669,139,o),
(571,97,o),
(507,97,qs),
(445,98,o),
(349,141,o),
(284,210,o),
(251,298,o),
(251,345,qs),
(251,392,o),
(289,494,o),
(335,539,q),
(333,360,l),
(459,360,l),
(457,460,o),
(453,658,o),
(451,758,q),
(46,723,l),
(49,691,o),
(56,630,o),
(60,598,q),
(230,619,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
46 28 25 9 4 5 0 74 0 0 1 0 133 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 37 35 40 23 3 6 24 
CALL[ ]	/* CallFunction */";
};
width = 966;
}
);
note = uni21BB;
unicode = 8635;
},
{
glyphname = uni21B7;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(819,213,o),
(847,310,o),
(845,361,qs),
(843,445,o),
(786,582,o),
(682,679,o),
(539,733,o),
(452,733,qs),
(364,733,o),
(217,679,o),
(109,578,o),
(48,433,o),
(46,342,q),
(191,342,l),
(192,398,o),
(231,490,o),
(299,555,o),
(391,591,o),
(446,591,qs),
(505,591,o),
(600,553,o),
(666,487,o),
(701,397,o),
(701,346,qs),
(701,312,o),
(681,240,o),
(664,211,q),
(610,388,l),
(480,344,l),
(619,-36,l),
(1001,111,l),
(951,237,l),
(793,171,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 3 2 1 0 1 76 32 5 2 1 4 1 73 0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 36 20 44 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1047;
}
);
note = uni21B7;
unicode = 8631;
},
{
glyphname = uni21B6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,111,l),
(428,-36,l),
(567,343,l),
(437,387,l),
(383,216,l),
(366,245,o),
(346,312,o),
(346,346,qs),
(346,397,o),
(381,487,o),
(447,553,o),
(542,591,o),
(602,591,qs),
(657,591,o),
(748,555,o),
(815,490,o),
(854,398,o),
(856,342,q),
(1001,342,l),
(999,433,o),
(938,578,o),
(830,679,o),
(683,733,o),
(596,733,qs),
(509,733,o),
(365,680,o),
(261,582,o),
(202,446,o),
(201,362,qs),
(200,311,o),
(228,213,o),
(254,171,q),
(96,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
29 28 2 1 2 1 76 32 31 30 27 4 1 73 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 36 20 39 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1047;
}
);
note = uni21B6;
unicode = 8630;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,315,o),
(278,335,o),
(310,335,qs),
(335,335,o),
(372,318,o),
(398,291,o),
(411,256,o),
(411,238,qs),
(411,196,o),
(361,142,o),
(306,142,qs),
(266,144,o),
(215,187,o),
(208,219,q),
(49,219,l),
(62,100,o),
(198,-7,o),
(309,-7,qs),
(366,-7,o),
(464,26,o),
(535,91,o),
(576,184,o),
(576,244,qs),
(576,296,o),
(546,381,o),
(487,441,o),
(401,474,o),
(346,474,qs),
(315,474,o),
(252,461,o),
(220,444,q),
(223,473,o),
(228,533,o),
(230,562,q),
(548,562,l),
(548,708,l),
(88,708,l),
(83,607,o),
(68,400,o),
(61,297,q),
(203,297,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
8 1 7 6 4 6 7 4 128 0 4 5 5 4 112 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 98 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 98 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 40 0 40 38 34 18 40 37 17 19 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,157,o),
(237,184,o),
(226,220,o),
(226,239,qs),
(228,275,o),
(281,327,o),
(322,328,qs),
(373,329,o),
(422,274,o),
(422,232,qs),
(422,194,o),
(369,139,o),
(323,139,qs),
(298,140,o)
);
},
{
closed = 1;
nodes = (
(578,563,o),
(536,641,o),
(471,692,o),
(391,716,o),
(343,716,qs),
(264,715,o),
(148,652,o),
(75,543,o),
(45,412,o),
(45,342,qs),
(45,273,o),
(75,147,o),
(143,51,o),
(253,-6,o),
(332,-6,qs),
(383,-6,o),
(474,28,o),
(543,91,o),
(584,181,o),
(584,238,qs),
(584,348,o),
(463,465,o),
(357,465,qs),
(339,465,o),
(296,458,o),
(253,442,o),
(211,415,o),
(194,395,q),
(194,427,o),
(211,490,o),
(246,539,o),
(300,570,o),
(336,570,qs),
(372,570,o),
(422,538,o),
(430,509,q),
(583,509,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
22 1 1 3 1 76 8 1 6 2 3 2 6 3 128 0 3 0 1 0 3 1 105 0 2 2 5 97 0 5 5 46 77 7 1 0 0 4 97 0 4 4 47 4 78 14 14 1 0 14 50 14 50 46 44 36 34 28 26 18 16 7 5 0 13 1 13 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = six;
unicode = 54;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,713,o),
(94,672,qs),
(94,629,o),
(146,583,o),
(184,583,qs),
(222,583,o),
(274,629,o),
(274,672,qs),
(274,714,o),
(222,760,o),
(184,760,qs),
(146,760,o)
);
},
{
closed = 1;
nodes = (
(362,713,o),
(362,672,qs),
(362,629,o),
(414,583,o),
(452,583,qs),
(490,583,o),
(543,629,o),
(543,672,qs),
(543,714,o),
(490,760,o),
(452,760,qs),
(415,760,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 637;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,-98,l),
(214,-96,o),
(242,-93,o),
(257,-93,qs),
(282,-93,o),
(316,-110,o),
(316,-127,qs),
(316,-144,o),
(288,-163,o),
(256,-163,qs),
(245,-163,o),
(219,-160,o),
(204,-158,q),
(204,-249,l),
(237,-255,o),
(270,-255,qs),
(299,-255,o),
(357,-240,o),
(404,-208,o),
(433,-158,o),
(433,-122,qs),
(433,-71,o),
(372,-22,o),
(328,-22,q),
(348,39,l),
(249,39,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 57 values pushed */
24 12 2 2 3 11 1 1 2 2 76 0 0 4 3 4 0 3 128 5 1 4 0 3 2 4 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 0 0 0 25 0 25 36 36 38 17 6 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 621;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 41 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = ccedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,155,o),
(200,189,o),
(189,234,o),
(189,261,qs),
(189,285,o),
(199,332,o),
(223,370,o),
(265,393,o),
(295,393,qs),
(330,393,o),
(374,360,o),
(380,333,q),
(539,333,l),
(534,384,o),
(495,461,o),
(432,512,o),
(348,538,o),
(300,538,qs),
(237,538,o),
(138,500,o),
(69,429,o),
(31,327,o),
(31,264,qs),
(31,150,o),
(135,12,o),
(236,-3,q),
(206,-112,l),
(215,-111,o),
(244,-108,o),
(262,-108,qs),
(285,-108,o),
(317,-123,o),
(317,-142,qs),
(317,-160,o),
(289,-180,o),
(256,-180,qs),
(244,-180,o),
(219,-177,o),
(204,-175,q),
(204,-267,l),
(220,-270,o),
(253,-274,o),
(274,-274,qs),
(304,-274,o),
(362,-257,o),
(407,-222,o),
(435,-171,o),
(435,-135,qs),
(435,-82,o),
(378,-35,o),
(337,-35,qs),
(329,-35,l),
(337,-5,l),
(377,-1,o),
(448,28,o),
(503,78,o),
(538,148,o),
(542,195,q),
(380,195,l),
(375,169,o),
(331,134,o),
(295,134,qs),
(266,134,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
36 1 2 0 35 23 2 4 5 22 1 3 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 7 8 1 8 7 1 128 0 1 0 8 1 0 126 0 2 0 5 0 2 5 128 9 1 0 0 5 4 0 5 105 0 8 8 6 97 0 6 6 49 77 0 4 4 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 7 8 1 8 7 1 128 0 1 0 8 1 0 126 0 2 0 5 0 2 5 128 9 1 0 0 5 4 0 5 105 0 4 0 3 4 3 101 0 8 8 6 97 0 6 6 49 8 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 54 52 50 49 45 43 33 31 27 25 20 18 12 10 4 3 0 62 1 62 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = uni0162;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,0,l),
(252,0,l),
(220,-110,l),
(228,-108,o),
(255,-106,o),
(270,-106,qs),
(296,-106,o),
(330,-122,o),
(330,-141,qs),
(330,-156,o),
(303,-176,o),
(271,-176,qs),
(260,-176,o),
(234,-173,o),
(219,-171,q),
(219,-194,o),
(218,-239,o),
(218,-262,q),
(235,-264,o),
(267,-268,o),
(288,-268,qs),
(317,-268,o),
(373,-253,o),
(417,-220,o),
(446,-171,o),
(448,-136,qs),
(448,-109,o),
(433,-71,o),
(406,-47,o),
(370,-35,o),
(350,-35,qs),
(342,-35,l),
(352,0,l),
(385,0,l),
(385,559,l),
(601,559,l),
(601,708,l),
(5,708,l),
(5,559,l),
(222,559,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
36 24 2 5 6 21 1 4 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 3 2 6 2 3 6 128 0 6 5 2 6 5 126 9 8 2 1 1 0 95 0 0 0 38 77 7 1 2 2 39 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 6 2 3 6 128 0 6 5 2 6 5 126 0 5 0 4 5 4 101 9 8 2 1 1 0 95 0 0 0 38 77 7 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 39 0 39 19 36 39 40 33 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,527,l),
(251,527,l),
(251,664,l),
(94,664,l),
(94,527,l),
(16,527,l),
(16,386,l),
(94,386,l),
(94,176,ls),
(94,115,o),
(131,38,o),
(174,20,q),
(135,-112,l),
(143,-110,o),
(171,-108,o),
(186,-108,qs),
(197,-108,o),
(219,-110,o),
(236,-117,o),
(246,-131,o),
(246,-142,qs),
(246,-160,o),
(219,-180,o),
(186,-180,qs),
(175,-180,o),
(149,-177,o),
(134,-175,q),
(134,-267,l),
(148,-270,o),
(178,-274,o),
(195,-274,qs),
(273,-274,o),
(364,-206,o),
(366,-139,qs),
(366,-85,o),
(309,-35,o),
(267,-35,qs),
(259,-35,l),
(269,0,l),
(358,0,l),
(358,140,l),
(308,140,ls),
(275,140,o),
(251,173,o),
(251,199,qs),
(251,386,l),
(363,386,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
34 1 1 0 33 19 2 4 5 18 1 3 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 5 1 2 5 128 0 8 0 5 4 8 5 105 11 10 2 6 6 7 95 9 1 7 7 41 77 0 0 0 1 95 0 1 1 39 77 0 4 4 3 98 0 3 3 51 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 5 1 2 5 128 0 8 0 5 4 8 5 105 0 4 0 3 4 3 102 11 10 2 6 6 7 95 9 1 7 7 41 77 0 0 0 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 46 0 46 45 44 17 17 23 38 37 36 33 17 35 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,472,o),
(266,531,o),
(334,567,o),
(383,567,qs),
(445,567,o),
(519,511,o),
(531,461,q),
(686,461,l),
(680,527,o),
(628,623,o),
(547,686,o),
(442,717,o),
(382,717,qs),
(301,717,o),
(172,664,o),
(83,568,o),
(35,435,o),
(35,355,qs),
(35,281,o),
(73,156,o),
(147,63,o),
(255,5,o),
(324,-3,q),
(294,-109,l),
(301,-107,o),
(328,-105,o),
(344,-105,qs),
(371,-105,o),
(404,-120,o),
(404,-138,qs),
(404,-155,o),
(376,-174,o),
(343,-174,qs),
(332,-174,o),
(307,-172,o),
(292,-170,q),
(292,-261,l),
(308,-263,o),
(340,-267,o),
(361,-267,qs),
(390,-267,o),
(448,-251,o),
(493,-218,o),
(521,-168,o),
(521,-133,qs),
(521,-81,o),
(464,-34,o),
(424,-34,qs),
(416,-34,l),
(424,-4,l),
(475,1,o),
(568,38,o),
(639,101,o),
(685,190,o),
(690,247,q),
(533,247,l),
(522,197,o),
(445,143,o),
(383,143,qs),
(335,143,o),
(266,180,o),
(223,240,o),
(203,316,o),
(203,356,qs),
(203,396,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
41 1 2 0 40 28 2 4 5 27 1 3 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 1 8 7 1 128 0 1 0 8 1 0 126 0 2 0 5 0 2 5 128 0 0 0 5 4 0 5 105 0 8 8 6 97 0 6 6 46 77 0 4 4 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 7 8 1 8 7 1 128 0 1 0 8 1 0 126 0 2 0 5 0 2 5 128 0 0 0 5 4 0 5 105 0 4 0 3 4 3 101 0 8 8 6 97 0 6 6 46 8 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 20 44 36 37 38 38 18 36 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = scedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,389,o),
(329,363,q),
(482,363,l),
(478,410,o),
(440,477,o),
(382,519,o),
(305,538,o),
(263,538,qs),
(222,538,o),
(144,520,o),
(83,481,o),
(44,417,o),
(44,371,qs),
(44,321,o),
(90,263,o),
(162,228,o),
(249,209,o),
(289,199,qs),
(313,194,o),
(341,176,o),
(341,159,qs),
(341,140,o),
(310,121,o),
(280,121,qs),
(247,121,o),
(198,146,o),
(192,173,q),
(30,173,l),
(34,132,o),
(67,72,o),
(115,29,o),
(175,4,o),
(206,-1,q),
(174,-113,l),
(183,-112,o),
(213,-109,o),
(228,-109,qs),
(254,-109,o),
(285,-124,o),
(285,-142,qs),
(285,-160,o),
(257,-180,o),
(224,-180,qs),
(213,-180,o),
(188,-177,o),
(173,-175,q),
(173,-198,o),
(172,-243,o),
(172,-267,q),
(190,-270,o),
(223,-273,o),
(242,-273,qs),
(271,-273,o),
(327,-258,o),
(374,-224,o),
(403,-172,o),
(403,-135,qs),
(402,-84,o),
(345,-37,o),
(305,-37,qs),
(297,-37,l),
(305,-7,l),
(341,-4,o),
(409,17,o),
(463,59,o),
(495,121,o),
(496,166,qs),
(495,203,o),
(471,255,o),
(430,289,o),
(378,309,o),
(321,322,o),
(263,332,o),
(237,339,qs),
(214,345,o),
(197,360,o),
(197,374,qs),
(198,393,o),
(232,409,o),
(256,409,qs),
(284,409,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
47 1 1 6 46 34 2 3 4 31 1 2 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 8 0 5 0 8 5 128 0 5 6 0 5 6 126 0 1 6 4 6 1 4 128 0 6 0 4 3 6 4 105 9 1 0 0 7 97 0 7 7 49 77 0 3 3 2 97 0 2 2 51 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 0 5 0 8 5 128 0 5 6 0 5 6 126 0 1 6 4 6 1 4 128 0 6 0 4 3 6 4 105 0 3 0 2 3 2 101 9 1 0 0 7 97 0 7 7 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 78 77 73 71 57 55 53 52 44 42 38 36 29 27 21 19 0 80 1 80 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni21A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(836,536,o),
(912,507,o),
(967,455,o),
(999,382,o),
(999,338,qs),
(999,294,o),
(968,220,o),
(913,167,o),
(837,137,o),
(793,137,qs),
(322,137,l),
(504,290,l),
(418,399,l),
(46,69,l),
(419,-262,l),
(504,-154,l),
(321,0,l),
(811,0,ls),
(882,0,o),
(1003,52,o),
(1092,143,o),
(1143,265,o),
(1143,336,qs),
(1143,408,o),
(1093,531,o),
(1004,622,o),
(883,674,o),
(811,674,qs),
(167,674,l),
(167,536,l),
(793,536,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
18 17 2 2 3 16 1 1 2 2 76 15 14 2 1 73 0 0 4 1 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 0 0 0 30 0 29 38 40 33 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1189;
}
);
note = uni21A9;
unicode = 8617;
},
{
glyphname = uni2713;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,372,l),
(402,-16,l),
(1046,723,l),
(938,826,l),
(400,209,l),
(151,477,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 1092;
}
);
note = uni2713;
unicode = 10003;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,428,l),
(46,428,l),
(46,294,l),
(521,294,l)
);
},
{
closed = 1;
nodes = (
(189,603,o),
(189,560,qs),
(189,514,o),
(243,468,o),
(282,468,qs),
(322,468,o),
(374,515,o),
(374,560,qs),
(374,603,o),
(322,653,o),
(282,653,qs),
(244,653,o)
);
},
{
closed = 1;
nodes = (
(189,203,o),
(189,159,qs),
(189,114,o),
(243,67,o),
(282,67,qs),
(322,67,o),
(374,114,o),
(374,159,qs),
(374,203,o),
(322,253,o),
(282,253,qs),
(244,253,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
7 1 2 0 3 0 2 3 105 0 0 6 1 1 4 0 1 103 8 1 4 5 5 4 89 8 1 4 4 5 97 0 5 4 5 81 17 16 5 4 0 0 23 21 16 27 17 27 11 9 4 15 5 15 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = divide;
unicode = 247;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(547,211,l),
(393,361,l),
(545,512,l),
(447,606,l),
(299,455,l),
(147,606,l),
(50,511,l),
(202,361,l),
(50,210,l),
(146,113,l),
(298,267,l),
(449,113,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,708,l),
(26,708,l),
(79,621,o),
(184,450,o),
(238,363,q),
(239,363,l),
(142,363,l),
(142,248,l),
(297,248,l),
(297,193,l),
(142,193,l),
(142,80,l),
(297,80,l),
(297,0,l),
(460,0,l),
(460,80,l),
(614,80,l),
(614,193,l),
(460,193,l),
(460,248,l),
(614,248,l),
(614,363,l),
(517,363,l),
(570,450,o),
(675,621,o),
(729,708,q),
(542,708,l),
(380,413,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
27 1 1 0 1 76 9 1 1 8 1 2 3 1 2 104 7 1 3 6 1 4 5 3 4 103 10 1 0 0 38 77 0 5 5 39 5 78 26 25 21 20 17 17 17 17 17 17 17 19 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,383,l),
(128,383,l),
(46,383,l),
(46,253,l),
(127,253,l),
(127,193,l),
(46,193,l),
(46,72,l),
(127,72,l),
(127,0,l),
(290,0,l),
(290,72,l),
(472,72,l),
(472,193,l),
(290,193,l),
(290,253,l),
(403,253,ls),
(458,253,o),
(555,278,o),
(627,333,o),
(669,419,o),
(669,480,qs),
(669,547,o),
(626,635,o),
(550,687,o),
(448,708,o),
(390,708,qs),
(127,708,l)
);
},
{
closed = 1;
nodes = (
(290,559,l),
(384,559,ls),
(442,559,o),
(508,523,o),
(508,472,qs),
(508,448,o),
(489,414,o),
(456,393,o),
(411,383,o),
(385,383,qs),
(290,383,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
12 9 2 8 7 1 1 2 8 1 103 6 1 2 5 1 3 4 2 3 103 0 10 10 0 95 11 1 0 0 38 77 0 4 4 39 4 78 29 28 1 0 37 35 28 38 29 38 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 9 0 27 1 27 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B4;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,695,o),
(106,648,o),
(60,569,o),
(60,510,q),
(216,510,l),
(218,528,o),
(236,552,o),
(262,564,o),
(289,569,o),
(309,569,qs),
(348,568,o),
(388,538,o),
(388,516,qs),
(388,504,o),
(374,477,o),
(360,469,q),
(34,469,l),
(34,373,l),
(233,373,l),
(219,365,o),
(175,338,o),
(158,328,q),
(34,328,l),
(34,233,l),
(79,233,l),
(70,222,o),
(59,183,o),
(59,164,qs),
(59,115,o),
(103,48,o),
(171,8,o),
(253,-10,o),
(291,-10,qs),
(340,-10,o),
(433,11,o),
(505,58,o),
(549,136,o),
(549,193,q),
(394,193,l),
(389,161,o),
(339,135,o),
(298,136,qs),
(262,137,o),
(218,165,o),
(218,193,qs),
(218,203,o),
(231,226,o),
(242,233,q),
(565,233,l),
(565,328,l),
(374,328,l),
(446,373,l),
(565,373,l),
(565,470,l),
(526,470,l),
(537,484,o),
(548,525,o),
(548,542,qs),
(548,591,o),
(505,657,o),
(439,698,o),
(358,715,o),
(319,715,qs),
(272,715,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 47 7 78 1 0 59 58 54 52 47 46 45 44 41 40 39 38 31 29 25 24 22 20 15 14 13 12 11 10 9 8 0 63 1 63 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = uni20B4;
unicode = 8372;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,506,ls),
(287,538,o),
(319,587,o),
(360,587,qs),
(380,587,o),
(407,575,o),
(423,554,o),
(430,526,o),
(431,511,q),
(579,511,l),
(575,620,o),
(463,717,o),
(360,717,qs),
(311,717,o),
(227,691,o),
(165,637,o),
(129,556,o),
(129,502,qs),
(129,407,l),
(130,407,l),
(46,407,l),
(46,268,l),
(129,268,l),
(129,147,l),
(47,147,l),
(47,0,l),
(587,0,l),
(587,147,l),
(287,147,l),
(287,268,l),
(496,268,l),
(496,407,l),
(287,407,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 8 5 8 7 114 10 9 2 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 7 8 5 8 7 5 128 10 9 2 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 32 0 32 36 18 38 17 17 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = Scedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,549,o),
(545,634,o),
(475,690,o),
(383,717,o),
(329,717,qs),
(282,717,o),
(185,696,o),
(106,646,o),
(56,563,o),
(56,501,qs),
(56,448,o),
(92,377,o),
(157,328,o),
(246,297,o),
(299,285,qs),
(363,270,ls),
(380,266,o),
(410,256,o),
(433,242,o),
(447,221,o),
(447,206,qs),
(447,188,o),
(430,163,o),
(403,149,o),
(368,143,o),
(349,143,qs),
(323,143,o),
(274,151,o),
(234,171,o),
(206,204,o),
(200,229,q),
(35,229,l),
(39,175,o),
(80,93,o),
(143,36,o),
(224,3,o),
(270,-3,q),
(240,-112,l),
(250,-110,o),
(278,-108,o),
(293,-108,qs),
(318,-108,o),
(350,-122,o),
(350,-141,qs),
(350,-158,o),
(322,-177,o),
(290,-177,qs),
(279,-177,o),
(254,-175,o),
(238,-172,q),
(238,-263,l),
(254,-266,o),
(286,-270,o),
(307,-270,qs),
(335,-270,o),
(393,-254,o),
(438,-221,o),
(467,-171,o),
(467,-136,qs),
(467,-83,o),
(410,-36,o),
(370,-36,qs),
(362,-36,l),
(369,-6,l),
(418,-3,o),
(506,25,o),
(572,79,o),
(611,160,o),
(611,216,qs),
(609,267,o),
(577,334,o),
(525,378,o),
(455,404,o),
(416,413,qs),
(340,431,ls),
(314,437,o),
(270,450,o),
(237,467,o),
(218,491,o),
(218,508,qs),
(218,524,o),
(235,548,o),
(263,563,o),
(298,570,o),
(316,570,qs),
(367,570,o),
(430,530,o),
(436,492,q),
(595,492,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
51 1 1 7 50 38 2 4 5 37 1 3 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
10 1 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 7 1 0 7 1 126 0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 0 0 8 97 0 8 8 46 77 0 1 1 47 77 0 4 4 3 98 0 3 3 51 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
10 1 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 7 1 0 7 1 126 0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 4 0 3 4 3 102 0 0 0 8 97 0 8 8 46 77 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 88 0 88 84 82 63 61 57 56 48 46 42 40 35 33 27 25 24 23 34 11 8 23 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = t_alt;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,527,l),
(251,527,l),
(251,664,l),
(121,664,l),
(97,527,l),
(16,527,l),
(16,386,l),
(94,386,l),
(94,176,ls),
(94,77,o),
(195,-2,o),
(301,0,qs),
(358,0,l),
(358,140,l),
(309,140,ls),
(277,140,o),
(251,174,o),
(251,200,qs),
(251,386,l),
(363,386,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 7 6 2 2 2 3 95 5 1 3 3 22 77 0 0 0 1 98 0 1 1 21 1 78 0 0 0 19 0 19 17 17 17 19 33 35 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = t_alt;
},
{
glyphname = alt_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,145,l),
(34,0,l),
(522,0,l),
(522,145,l),
(368,145,l),
(368,708,l),
(247,708,l),
(234,683,o),
(193,651,o),
(143,633,o),
(85,626,o),
(56,626,q),
(56,505,l),
(204,505,l),
(204,145,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 0 3 1 0 103 0 2 2 20 77 5 1 3 3 4 96 0 4 4 21 4 78 17 17 17 20 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = alt_1;
},
{
glyphname = colon.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,554,o),
(54,509,qs),
(54,461,o),
(109,413,o),
(150,413,qs),
(192,413,o),
(246,461,o),
(246,509,qs),
(246,554,o),
(192,606,o),
(150,606,qs),
(110,606,o)
);
},
{
closed = 1;
nodes = (
(54,210,o),
(54,165,qs),
(54,117,o),
(109,69,o),
(150,69,qs),
(192,69,o),
(246,117,o),
(246,165,qs),
(246,210,o),
(192,262,o),
(150,262,qs),
(110,262,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 300;
}
);
note = colon.uc;
},
{
glyphname = t2.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,188,o),
(253,221,qs),
(253,386,l),
(409,386,l),
(409,527,l),
(253,527,l),
(253,665,l),
(95,665,l),
(95,527,l),
(16,527,l),
(16,386,l),
(95,386,l),
(95,184,ls),
(95,94,o),
(190,-7,o),
(287,-7,qs),
(302,-7,o),
(341,-2,o),
(382,9,o),
(421,26,o),
(436,38,q),
(394,162,l),
(384,155,o),
(343,138,o),
(320,138,qs),
(280,139,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
3 1 0 2 4 1 1 0 2 76 0 4 3 4 133 6 1 2 2 3 95 5 1 3 3 22 77 7 1 0 0 1 98 0 1 1 28 1 78 1 0 22 21 20 19 18 17 16 15 14 13 10 8 0 25 1 25 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = t2.alt;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,428,l),
(61,290,l),
(404,290,l),
(404,428,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 465;
}
);
note = hyphen.uc;
},
{
glyphname = uni00AD.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,428,l),
(61,290,l),
(404,290,l),
(404,428,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 465;
}
);
note = uni00AD.uc;
},
{
glyphname = endash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(571,428,l),
(61,428,l),
(61,290,l),
(571,290,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(791,428,l),
(61,428,l),
(61,290,l),
(791,290,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 852;
}
);
note = emdash.uc;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(703,-29,o),
(812,75,o),
(872,225,o),
(872,321,qs),
(872,412,o),
(809,562,o),
(698,669,o),
(548,727,o),
(461,727,qs),
(372,727,o),
(220,670,o),
(109,565,o),
(46,415,o),
(46,321,qs),
(46,225,o),
(108,74,o),
(218,-29,o),
(370,-84,o),
(461,-84,qs),
(552,-84,o)
);
},
{
closed = 1;
nodes = (
(284,71,o),
(208,146,o),
(168,254,o),
(168,320,qs),
(168,385,o),
(209,492,o),
(286,568,o),
(396,610,o),
(465,610,qs),
(534,610,o),
(642,567,o),
(717,491,o),
(756,384,o),
(756,320,qs),
(756,254,o),
(718,147,o),
(645,71,o),
(536,30,o),
(465,30,qs),
(394,30,o)
);
},
{
closed = 1;
nodes = (
(530,219,o),
(593,238,o),
(640,278,o),
(667,337,o),
(668,378,qs),
(668,423,o),
(641,484,o),
(593,522,o),
(527,538,o),
(488,538,qs),
(315,538,l),
(315,87,l),
(425,87,l),
(425,219,l),
(493,219,ls)
);
},
{
closed = 1;
nodes = (
(560,440,o),
(560,376,qs),
(560,348,o),
(522,312,o),
(489,312,qs),
(425,312,l),
(425,440,l),
(488,440,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
0 4 6 2 6 4 2 128 0 1 0 3 5 1 3 105 0 5 12 1 8 7 5 8 105 0 7 11 1 6 4 7 6 105 10 1 2 0 0 2 89 10 1 2 2 0 97 9 1 0 2 0 81 55 55 40 40 21 20 1 0 55 62 55 61 58 56 40 54 40 53 45 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 13 6 22 
CALL[ ]	/* CallFunction */";
};
width = 918;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = f_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,558,ls),
(253,587,o),
(288,621,o),
(320,620,qs),
(339,620,o),
(370,611,o),
(381,604,q),
(421,731,l),
(395,746,o),
(331,759,o),
(298,759,qs),
(256,759,o),
(181,737,o),
(125,692,o),
(95,622,o),
(95,574,qs),
(95,527,l),
(16,527,l),
(16,386,l),
(95,386,l),
(95,0,l),
(253,0,l),
(253,386,l),
(379,386,l),
(379,527,l),
(253,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
17 1 5 4 18 1 3 5 2 76 0 4 0 5 3 4 5 105 2 1 0 0 3 95 7 6 2 3 3 22 77 0 1 1 21 1 78 0 0 0 25 0 25 37 37 17 17 17 17 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = f_alt;
},
{
glyphname = g_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,-39,o),
(380,-85,o),
(318,-112,o),
(270,-112,qs),
(215,-112,o),
(128,-82,o),
(102,-65,q),
(91,-97,o),
(69,-164,o),
(56,-196,q),
(106,-228,o),
(228,-261,o),
(292,-261,qs),
(365,-261,o),
(486,-215,o),
(524,-168,qs),
(546,-140,o),
(572,-75,o),
(585,-3,o),
(586,72,o),
(586,108,qs),
(586,527,l),
(446,527,l),
(431,476,l),
(397,513,o),
(316,536,o),
(279,536,qs),
(219,536,o),
(127,495,o),
(64,421,o),
(30,320,o),
(30,261,qs),
(30,203,o),
(61,106,o),
(120,34,o),
(209,-7,o),
(268,-8,qs),
(288,-8,o),
(332,-2,o),
(375,11,o),
(413,35,o),
(428,55,q),
(428,21,o)
);
},
{
closed = 1;
nodes = (
(233,154,o),
(204,189,o),
(189,234,o),
(189,260,qs),
(189,285,o),
(202,333,o),
(231,370,o),
(277,392,o),
(309,392,qs),
(338,392,o),
(383,372,o),
(413,336,o),
(428,291,o),
(428,266,qs),
(428,238,o),
(414,191,o),
(385,155,o),
(339,133,o),
(308,133,qs),
(278,133,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
18 1 6 1 0 1 0 5 35 1 4 0 32 1 3 4 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
18 1 6 2 0 1 0 5 35 1 4 0 32 1 3 4 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 6 6 1 97 2 1 1 1 29 77 7 1 5 5 0 97 0 0 0 30 77 0 4 4 3 97 0 3 3 31 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 3 4 3 101 0 6 6 1 97 2 1 1 1 29 77 7 1 5 5 0 97 0 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 4 3 101 0 2 2 22 77 0 6 6 1 97 0 1 1 29 77 7 1 5 5 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
44 43 54 52 43 62 44 62 39 40 19 40 36 8 7 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = g_alt;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,-83,o),
(104,-64,q),
(91,-96,o),
(67,-163,o),
(55,-196,q),
(106,-229,o),
(221,-261,o),
(281,-261,qs),
(356,-261,o),
(476,-215,o),
(516,-167,qs),
(538,-139,o),
(564,-74,o),
(576,-2,o),
(577,74,o),
(577,110,qs),
(577,527,l),
(419,527,l),
(419,263,ls),
(419,242,o),
(411,197,o),
(388,160,o),
(348,134,o),
(317,134,qs),
(286,134,o),
(246,157,o),
(225,193,o),
(217,238,o),
(217,261,qs),
(217,527,l),
(60,527,l),
(60,235,ls),
(60,173,o),
(84,80,o),
(113,48,qs),
(138,22,o),
(215,-8,o),
(267,-8,qs),
(285,-8,o),
(326,-2,o),
(368,11,o),
(405,33,o),
(419,51,q),
(420,3,o),
(395,-60,o),
(352,-97,o),
(298,-112,o),
(269,-112,qs),
(219,-112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
5 1 1 3 46 1 0 1 43 1 5 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 1 2 3 1 128 4 1 2 2 41 77 0 1 1 47 77 6 1 0 0 5 98 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 3 2 1 2 3 1 128 6 1 0 0 5 0 5 102 4 1 2 2 41 77 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 41 39 31 30 25 23 18 17 11 9 0 48 1 48 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = y;
unicode = 121;
},
{
glyphname = a_alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,164,o),
(325,133,o),
(282,115,o),
(257,115,qs),
(228,115,o),
(194,140,o),
(194,165,qs),
(194,186,o),
(228,212,o),
(290,222,o),
(352,226,o),
(376,227,q),
(375,204,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,337,o),
(509,429,o),
(481,465,q),
(445,504,o),
(348,537,o),
(288,537,qs),
(244,537,o),
(163,519,o),
(96,478,o),
(52,409,o),
(45,359,q),
(206,359,l),
(214,385,o),
(263,405,o),
(293,405,qs),
(331,405,o),
(375,372,o),
(375,333,q),
(350,332,o),
(294,330,o),
(234,324,o),
(173,311,o),
(146,301,qs),
(97,283,o),
(36,208,o),
(36,150,qs),
(36,106,o),
(69,45,o),
(121,8,o),
(184,-8,o),
(216,-8,qs),
(243,-8,o),
(300,3,o),
(361,37,o),
(378,59,q),
(380,44,o),
(382,14,o),
(383,0,q),
(527,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
16 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
16 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 105 0 4 4 6 97 0 6 6 29 77 0 1 1 2 97 8 7 2 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 105 0 4 4 6 97 0 6 6 29 77 8 1 7 7 21 77 0 1 1 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
13 13 13 52 13 52 36 18 34 42 42 37 32 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = a_alt;
},
{
glyphname = uni0490;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,559,l),
(575,559,l),
(575,869,l),
(412,869,l),
(412,708,l),
(74,708,l),
(74,0,l),
(237,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = uni0490;
unicode = 1168;
},
{
glyphname = uni0491;
kernLeft = uni0433;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,527,l),
(55,527,l),
(55,0,l),
(212,0,l),
(212,387,l),
(452,387,l),
(452,682,l),
(298,682,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 2 3 133 0 0 0 2 95 0 2 2 22 77 0 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 468;
}
);
note = uni0491;
unicode = 1169;
},
{
glyphname = uni0406;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 20 77 0 0 0 21 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni0406;
unicode = 1030;
},
{
glyphname = uni0456;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,527,l),
(65,0,l),
(222,0,l),
(222,527,l)
);
},
{
closed = 1;
nodes = (
(46,724,o),
(46,680,qs),
(46,633,o),
(103,585,o),
(143,585,qs),
(185,585,o),
(240,634,o),
(240,680,qs),
(240,724,o),
(185,774,o),
(143,774,qs),
(104,774,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 22 77 0 0 0 21 0 78 5 4 11 9 4 15 5 15 17 16 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = uni0456;
unicode = 1110;
},
{
glyphname = uni0404;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,568,o),
(368,568,qs),
(395,568,o),
(446,557,o),
(489,532,o),
(521,492,o),
(528,464,q),
(686,464,l),
(679,525,o),
(626,620,o),
(544,684,o),
(437,717,o),
(377,717,qs),
(294,717,o),
(167,665,o),
(80,570,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(79,142,o),
(165,46,o),
(291,-7,o),
(374,-7,qs),
(434,-7,o),
(542,24,o),
(628,86,o),
(683,181,o),
(690,244,q),
(533,244,l),
(526,216,o),
(493,177,o),
(450,153,o),
(399,143,o),
(373,143,qs),
(341,143,o),
(282,161,o),
(237,196,o),
(208,248,o),
(206,283,q),
(468,283,l),
(468,425,l),
(207,425,l),
(212,494,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 7 0 7 6 0 128 0 3 1 2 1 3 2 128 0 0 0 1 3 0 1 103 0 7 7 5 97 0 5 5 27 77 0 2 2 4 97 0 4 4 28 4 78 36 20 40 36 20 36 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni0404;
unicode = 1028;
},
{
glyphname = uni0454;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,134,o),
(206,153,o),
(186,181,o),
(186,201,q),
(365,201,l),
(365,326,l),
(187,326,l),
(192,365,o),
(253,400,o),
(289,400,qs),
(315,400,o),
(367,382,o),
(378,356,q),
(537,356,l),
(528,401,o),
(483,469,o),
(419,514,o),
(339,536,o),
(296,536,qs),
(231,536,o),
(132,498,o),
(65,426,o),
(30,325,o),
(30,264,qs),
(30,134,o),
(167,-9,o),
(298,-9,qs),
(339,-9,o),
(418,11,o),
(482,54,o),
(528,118,o),
(537,162,q),
(379,162,l),
(367,139,o),
(315,125,o),
(291,125,qs),
(274,125,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 6 5 4 6 128 0 1 7 0 7 1 0 128 0 6 0 7 1 6 7 103 0 5 5 3 97 0 3 3 29 77 8 1 0 0 2 97 0 2 2 28 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 6 5 4 6 128 0 1 7 0 7 1 0 128 0 6 0 7 1 6 7 103 0 5 5 3 97 0 3 3 29 77 8 1 0 0 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 32 31 30 29 27 25 23 22 18 16 10 8 4 3 0 36 1 36 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = uni0454;
unicode = 1108;
},
{
glyphname = uni0407;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-22,882,o),
(-22,843,qs),
(-22,803,o),
(24,757,o),
(61,757,qs),
(99,757,o),
(145,803,o),
(145,843,qs),
(145,883,o),
(99,928,o),
(61,928,qs),
(25,928,o)
);
},
{
closed = 1;
nodes = (
(166,882,o),
(166,843,qs),
(166,803,o),
(212,757,o),
(250,757,qs),
(287,757,o),
(333,803,o),
(333,843,qs),
(333,883,o),
(287,928,o),
(250,928,qs),
(214,928,o)
);
},
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 2 6 3 0 3 1 1 5 0 1 105 0 5 5 20 77 0 4 4 21 4 78 13 12 1 0 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = uni0407;
unicode = 1031;
},
{
glyphname = uni0457;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-36,716,o),
(-36,677,qs),
(-36,635,o),
(10,589,o),
(47,589,qs),
(86,589,o),
(132,635,o),
(132,677,qs),
(132,717,o),
(86,763,o),
(47,763,qs),
(11,763,o)
);
},
{
closed = 1;
nodes = (
(154,716,o),
(154,677,qs),
(154,635,o),
(200,589,o),
(238,589,qs),
(276,589,o),
(322,635,o),
(322,677,qs),
(322,717,o),
(276,763,o),
(238,763,qs),
(202,763,o)
);
},
{
closed = 1;
nodes = (
(65,527,l),
(65,0,l),
(222,0,l),
(222,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 2 6 3 0 3 1 1 5 0 1 105 0 5 5 22 77 0 4 4 21 4 78 13 12 1 0 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = uni0457;
unicode = 1111;
},
{
glyphname = map;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,664,qs),
(34,662,ls),
(34,657,o),
(39,657,qs),
(81,657,ls),
(83,657,o),
(85,655,qs),
(108,632,ls),
(109,631,o),
(109,628,qs),
(109,602,ls),
(109,600,o),
(111,598,qs),
(132,577,ls),
(134,575,o),
(134,573,qs),
(134,544,ls),
(134,541,o),
(135,540,qs),
(166,510,ls),
(167,509,o),
(167,506,qs),
(167,480,ls),
(167,479,o),
(169,477,qs),
(215,431,ls),
(216,430,o),
(216,427,qs),
(216,406,ls),
(216,404,o),
(218,402,qs),
(264,355,l),
(266,355,o),
(266,352,qs),
(266,329,ls),
(266,326,o),
(267,325,qs),
(280,313,ls),
(281,312,o),
(281,309,qs),
(281,190,ls),
(281,187,o),
(280,186,qs),
(266,173,ls),
(265,172,o),
(265,169,qs),
(265,84,ls),
(265,81,o),
(266,80,qs),
(278,68,l),
(284,64,o),
(278,60,q),
(266,48,ls),
(262,44,o),
(266,41,qs),
(275,32,ls),
(277,30,o),
(277,28,qs),
(277,5,ls),
(277,0,o),
(282,0,qs),
(285,0,ls),
(287,0,o),
(288,1,o),
(289,1,q),
(303,16,ls),
(304,17,o),
(307,17,qs),
(327,17,ls),
(332,17,o),
(332,23,qs),
(332,61,ls),
(332,63,o),
(334,65,qs),
(344,75,ls),
(345,76,o),
(347,76,qs),
(356,76,ls),
(357,76,o),
(359,78,qs),
(371,90,ls),
(373,92,o),
(373,94,qs),
(373,106,ls),
(373,108,o),
(374,109,qs),
(396,131,ls),
(398,133,o),
(398,135,qs),
(398,160,ls),
(398,163,o),
(399,164,qs),
(419,184,ls),
(422,187,o),
(419,191,qs),
(409,201,ls),
(408,202,o),
(408,205,qs),
(408,232,ls),
(408,234,o),
(409,235,qs),
(431,257,ls),
(433,259,o),
(440,257,o),
(440,253,qs),
(440,219,ls),
(440,213,o),
(445,213,qs),
(454,213,ls),
(455,213,o),
(457,215,qs),
(484,242,l),
(489,245,o),
(492,242,qs),
(507,227,ls),
(510,224,o),
(515,227,q),
(526,238,ls),
(529,241,o),
(533,238,qs),
(542,229,ls),
(543,228,o),
(545,228,qs),
(559,228,l),
(578,228,ls),
(583,228,o),
(583,233,qs),
(583,236,o),
(582,237,qs),
(561,257,ls),
(557,261,o),
(561,265,qs),
(567,270,ls),
(569,272,o),
(569,274,qs),
(569,311,ls),
(569,313,o),
(567,315,qs),
(551,332,ls),
(550,333,o),
(547,333,qs),
(535,333,ls),
(533,333,o),
(531,335,qs),
(509,357,ls),
(507,359,o),
(507,361,qs),
(507,398,l),
(507,432,ls),
(507,437,o),
(502,437,qs),
(490,437,ls),
(488,437,o),
(487,438,qs),
(428,497,ls),
(424,501,o),
(428,505,qs),
(434,511,ls),
(436,513,o),
(436,515,qs),
(436,594,ls),
(436,599,o),
(430,599,qs),
(424,599,ls),
(421,599,o),
(420,598,qs),
(410,588,ls),
(406,584,o),
(403,588,q),
(383,608,ls),
(381,610,o),
(381,612,qs),
(381,638,ls),
(381,643,o),
(376,643,qs),
(344,643,ls),
(341,643,o),
(340,642,qs),
(324,625,ls),
(323,624,o),
(320,624,qs),
(314,624,ls),
(308,624,o),
(308,629,qs),
(308,654,ls),
(308,659,o),
(303,659,qs),
(270,659,ls),
(268,659,o),
(267,660,qs),
(221,706,ls),
(219,708,o),
(217,708,qs),
(121,708,ls),
(119,708,o),
(117,706,qs),
(98,687,ls),
(97,686,o),
(94,686,qs),
(55,686,ls),
(53,686,o),
(51,684,qs),
(35,668,ls),
(34,667,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
201 1 8 0 193 30 19 18 4 3 8 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
201 1 2 0 193 30 19 18 4 3 8 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
201 1 2 0 18 1 4 8 193 30 19 3 3 4 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 6 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 8 8 0 95 2 1 2 0 0 20 77 4 1 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 8 0 2 8 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 4 1 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 1 1 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 3 0 7 3 7 99 0 1 1 20 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
199 196 135 134 80 77 52 49 50 37 51 51 49 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = map;
},
{
glyphname = logo;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(786,512,qs),
(786,520,o),
(780,526,qs),
(768,539,ls),
(762,545,o),
(754,545,qs),
(728,545,l),
(727,546,o),
(726,546,o),
(725,547,qs),
(694,572,ls),
(689,576,o),
(682,576,qs),
(643,576,l),
(638,589,o),
(625,589,qs),
(617,589,o),
(611,583,qs),
(604,576,l),
(549,576,ls),
(542,576,o),
(535,571,q),
(531,566,l),
(531,586,l),
(557,613,l),
(693,613,l),
(712,593,l),
(719,588,o),
(726,588,qs),
(738,588,ls),
(745,588,o),
(752,593,q),
(765,606,ls),
(771,612,o),
(771,620,qs),
(771,627,o),
(766,632,q),
(771,639,o),
(771,645,qs),
(771,653,o),
(765,659,qs),
(752,671,ls),
(746,677,o),
(738,677,qs),
(726,677,ls),
(718,677,o),
(712,671,qs),
(693,652,l),
(657,652,l),
(657,680,l),
(669,680,o),
(682,710,o),
(682,721,qs),
(682,758,ls),
(682,766,o),
(671,778,o),
(663,778,qs),
(612,778,ls),
(604,778,o),
(593,766,o),
(593,758,qs),
(593,721,ls),
(593,710,o),
(606,680,o),
(618,680,q),
(618,652,l),
(593,652,l),
(593,654,o),
(594,656,o),
(594,657,qs),
(594,665,o),
(583,677,o),
(575,677,qs),
(565,677,o),
(561,671,q),
(524,635,l),
(519,639,o),
(511,639,qs),
(503,639,o),
(492,628,o),
(492,620,qs),
(492,464,l),
(430,402,l),
(430,473,l),
(462,505,ls),
(468,511,o),
(468,519,qs),
(468,526,o),
(459,538,o),
(448,538,qs),
(440,538,o),
(435,533,qs),
(430,528,l),
(430,612,l),
(525,707,l),
(531,711,o),
(531,721,qs),
(531,739,l),
(537,739,ls),
(545,739,o),
(556,750,o),
(556,758,qs),
(556,766,o),
(545,778,o),
(537,778,qs),
(531,778,l),
(531,784,ls),
(531,792,o),
(519,803,o),
(511,803,qs),
(503,803,o),
(492,792,o),
(492,784,qs),
(492,778,l),
(486,778,ls),
(478,778,o),
(467,766,o),
(467,758,qs),
(467,750,o),
(478,739,o),
(486,739,qs),
(492,739,l),
(492,729,l),
(430,667,l),
(430,787,l),
(432,789,o),
(432,790,q),
(487,845,ls),
(493,851,o),
(493,859,qs),
(493,867,o),
(487,873,qs),
(475,886,l),
(472,888,o),
(468,890,q),
(468,910,ls),
(468,918,o),
(462,924,qs),
(450,936,ls),
(444,942,o),
(436,942,qs),
(429,942,o),
(425,939,q),
(419,945,o),
(411,945,qs),
(402,945,o),
(396,939,q),
(391,942,o),
(385,942,qs),
(376,942,o),
(372,936,q),
(359,924,ls),
(353,918,o),
(353,910,qs),
(353,890,l),
(351,889,o),
(348,888,o),
(346,886,qs),
(334,873,ls),
(328,867,o),
(328,859,qs),
(328,851,o),
(334,845,qs),
(389,790,l),
(389,789,o),
(391,787,q),
(391,667,l),
(329,729,l),
(329,739,l),
(335,739,ls),
(343,739,o),
(354,750,o),
(354,758,qs),
(354,766,o),
(343,778,o),
(335,778,qs),
(329,778,l),
(329,784,ls),
(329,792,o),
(318,803,o),
(310,803,qs),
(302,803,o),
(290,792,o),
(290,784,qs),
(290,778,l),
(284,778,ls),
(276,778,o),
(265,766,o),
(265,758,qs),
(265,750,o),
(276,739,o),
(284,739,qs),
(290,739,l),
(290,721,ls),
(290,711,o),
(296,707,q),
(391,612,l),
(391,528,l),
(387,533,l),
(380,538,o),
(373,538,qs),
(365,538,o),
(353,527,o),
(353,519,qs),
(353,511,o),
(359,505,qs),
(391,473,l),
(391,402,l),
(329,464,l),
(329,620,ls),
(329,628,o),
(318,639,o),
(310,639,qs),
(302,639,o),
(297,635,q),
(261,671,ls),
(255,677,o),
(247,677,qs),
(238,677,o),
(227,665,o),
(227,657,qs),
(227,654,o),
(228,652,q),
(203,652,l),
(203,680,l),
(215,680,o),
(228,710,o),
(228,721,qs),
(228,758,ls),
(228,766,o),
(217,778,o),
(209,778,qs),
(158,778,ls),
(150,778,o),
(139,766,o),
(139,758,qs),
(139,721,ls),
(139,710,o),
(152,680,o),
(164,680,q),
(164,652,l),
(129,652,l),
(109,671,ls),
(103,677,o),
(95,677,qs),
(83,677,ls),
(75,677,o),
(69,671,qs),
(56,659,l),
(51,652,o),
(51,645,qs),
(51,637,o),
(55,632,q),
(51,628,o),
(51,620,qs),
(51,613,o),
(56,606,q),
(69,593,l),
(76,588,o),
(83,588,qs),
(95,588,ls),
(102,588,o),
(109,593,q),
(129,613,l),
(264,613,l),
(290,586,l),
(290,566,l),
(286,571,l),
(279,576,o),
(272,576,qs),
(217,576,l),
(210,583,ls),
(204,589,o),
(196,589,qs),
(183,589,o),
(178,576,q),
(139,576,ls),
(132,576,o),
(127,572,qs),
(96,547,ls),
(94,545,o),
(94,545,q),
(67,545,ls),
(59,545,o),
(53,539,qs),
(41,526,ls),
(34,519,o),
(34,512,qs),
(34,504,o),
(44,495,o),
(51,493,q),
(51,485,o),
(62,474,o),
(70,474,q),
(72,459,o),
(89,459,qs),
(96,459,o),
(103,464,q),
(115,477,ls),
(121,483,o),
(121,491,qs),
(121,517,l),
(146,537,l),
(264,537,l),
(290,511,l),
(290,475,l),
(184,475,l),
(183,475,l),
(146,475,ls),
(139,475,o),
(132,470,q),
(107,444,ls),
(100,437,o),
(100,430,qs),
(100,422,o),
(113,411,o),
(121,411,qs),
(158,411,ls),
(167,411,o),
(172,417,q),
(192,436,l),
(302,436,l),
(395,342,l),
(397,342,o),
(405,335,o),
(411,335,qs),
(416,335,o),
(424,342,o),
(426,342,q),
(520,436,l),
(629,436,l),
(649,417,ls),
(655,411,o),
(663,411,qs),
(701,411,ls),
(709,411,o),
(720,422,o),
(720,430,qs),
(720,438,o),
(714,444,qs),
(689,470,ls),
(684,475,o),
(675,475,qs),
(531,475,l),
(531,511,l),
(557,537,l),
(675,537,l),
(700,517,l),
(700,491,ls),
(700,483,o),
(706,477,qs),
(718,464,l),
(725,459,o),
(732,459,qs),
(748,459,o),
(751,474,q),
(759,474,o),
(771,485,o),
(771,493,q),
(781,496,o),
(785,505,qs),
(786,507,o)
);
},
{
closed = 1;
nodes = (
(262,235,o),
(266,235,qs),
(268,235,o),
(269,234,qs),
(387,116,l),
(398,107,o),
(409,107,qs),
(410,107,ls),
(421,107,o),
(432,116,q),
(550,234,ls),
(551,235,o),
(552,235,qs),
(556,235,o),
(556,232,qs),
(556,13,ls),
(556,0,o),
(569,0,qs),
(630,0,ls),
(642,0,o),
(642,13,qs),
(642,362,ls),
(642,375,o),
(630,375,qs),
(569,375,ls),
(557,375,o),
(548,366,qs),
(416,234,ls),
(414,232,o),
(409,232,qs),
(405,232,o),
(403,234,qs),
(271,366,ls),
(262,375,o),
(250,375,qs),
(189,375,ls),
(177,375,o),
(177,362,qs),
(177,13,ls),
(177,0,o),
(189,0,qs),
(250,0,ls),
(262,0,o),
(262,13,qs),
(262,232,ls)
);
},
{
closed = 1;
nodes = (
(771,351,o),
(719,299,o),
(690,228,o),
(690,188,qs),
(690,143,o),
(720,71,o),
(773,21,o),
(846,-6,o),
(889,-6,qs),
(932,-6,o),
(1005,23,o),
(1058,74,o),
(1088,145,o),
(1088,188,qs),
(1088,233,o),
(1058,304,o),
(1005,354,o),
(932,381,o),
(889,381,qs),
(844,381,o)
);
},
{
closed = 1;
nodes = (
(827,91,o),
(798,122,o),
(781,164,o),
(781,188,qs),
(781,239,o),
(842,301,o),
(889,301,qs),
(934,301,o),
(997,239,o),
(997,188,qs),
(997,141,o),
(942,74,o),
(889,74,qs),
(866,74,o)
);
},
{
closed = 1;
nodes = (
(1132,0,o),
(1141,0,qs),
(1361,0,ls),
(1370,0,o),
(1370,9,qs),
(1370,72,ls),
(1370,81,o),
(1361,81,qs),
(1222,81,ls),
(1217,81,o),
(1217,85,qs),
(1217,366,ls),
(1217,375,o),
(1208,375,qs),
(1141,375,ls),
(1132,375,o),
(1132,366,qs),
(1132,9,ls)
);
},
{
closed = 1;
nodes = (
(1418,0,o),
(1427,0,qs),
(1454,0,o),
(1517,-1,o),
(1532,-1,qs),
(1585,-1,o),
(1665,29,o),
(1719,82,o),
(1746,152,o),
(1746,191,qs),
(1746,228,o),
(1723,295,o),
(1672,346,o),
(1592,376,o),
(1536,376,qs),
(1527,376,o),
(1497,376,o),
(1464,375,o),
(1435,375,o),
(1427,375,qs),
(1418,375,o),
(1418,366,qs),
(1418,9,ls)
);
},
{
closed = 1;
nodes = (
(1529,296,o),
(1535,296,qs),
(1587,296,o),
(1655,243,o),
(1655,191,qs),
(1655,137,o),
(1590,80,o),
(1534,80,qs),
(1526,80,o),
(1503,79,o),
(1503,85,qs),
(1503,290,ls),
(1503,295,o),
(1508,295,qs),
(1515,296,o)
);
},
{
closed = 1;
nodes = (
(1870,351,o),
(1818,299,o),
(1789,228,o),
(1789,188,qs),
(1789,143,o),
(1819,71,o),
(1872,21,o),
(1945,-6,o),
(1988,-6,qs),
(2031,-6,o),
(2104,23,o),
(2157,74,o),
(2187,145,o),
(2187,188,qs),
(2187,233,o),
(2157,304,o),
(2104,354,o),
(2031,381,o),
(1988,381,qs),
(1943,381,o)
);
},
{
closed = 1;
nodes = (
(1926,91,o),
(1897,122,o),
(1880,164,o),
(1880,188,qs),
(1880,239,o),
(1941,301,o),
(1988,301,qs),
(2033,301,o),
(2096,239,o),
(2096,188,qs),
(2096,141,o),
(2041,74,o),
(1988,74,qs),
(1965,74,o)
);
},
{
closed = 1;
nodes = (
(2547,367,o),
(2548,368,o),
(2548,369,qs),
(2548,375,o),
(2542,375,qs),
(2472,375,ls),
(2463,375,o),
(2459,366,qs),
(2372,132,l),
(2372,131,o),
(2371,130,q),
(2369,130,o),
(2369,132,q),
(2278,366,ls),
(2274,375,o),
(2266,375,qs),
(2190,375,ls),
(2184,375,o),
(2184,369,qs),
(2184,367,o),
(2185,366,q),
(2331,9,ls),
(2335,0,o),
(2343,0,qs),
(2392,0,ls),
(2401,0,o),
(2405,9,qs),
(2547,366,l)
);
},
{
closed = 1;
nodes = (
(2476,8,o),
(2476,6,qs),
(2476,0,o),
(2482,0,qs),
(2547,0,ls),
(2555,0,o),
(2559,9,qs),
(2583,75,ls),
(2585,79,o),
(2589,79,qs),
(2722,79,ls),
(2726,79,o),
(2728,75,qs),
(2753,9,l),
(2755,0,o),
(2764,0,qs),
(2834,0,ls),
(2840,0,o),
(2840,6,qs),
(2840,7,o),
(2839,8,o),
(2839,9,q),
(2698,367,l),
(2694,375,o),
(2686,375,qs),
(2630,375,ls),
(2622,375,o),
(2618,367,q),
(2477,9,l)
);
},
{
closed = 1;
nodes = (
(2654,261,o),
(2656,262,q),
(2657,261,l),
(2694,163,l),
(2694,162,ls),
(2694,159,o),
(2691,159,qs),
(2620,159,ls),
(2617,159,o),
(2617,162,qs),
(2617,163,l),
(2654,261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 88 values pushed */
234 226 218 214 207 206 195 7 20 31 300 125 2 26 20 238 193 2 19 26 295 237 194 3 24 17 324 285 280 146 4 15 24 337 267 164 95 4 12 15 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 13 76 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 18 267 164 2 16 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 67 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 168 values pushed */
43 41 21 3 19 26 17 15 19 114 44 39 2 24 17 15 17 24 15 128 9 1 1 11 2 3 1 114 0 56 79 77 79 56 77 128 42 36 35 34 29 28 27 7 20 37 33 30 3 26 19 20 26 105 45 40 23 22 18 5 17 47 46 16 3 15 12 17 15 105 50 49 48 14 13 5 12 11 3 12 90 8 1 2 7 6 4 3 3 53 2 3 106 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 181 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 44 39 24 22 4 18 17 15 17 18 15 128 9 1 1 11 2 4 1 114 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 16 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 49 48 14 13 5 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 182 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 44 39 24 22 4 18 17 15 17 18 15 128 9 1 1 11 2 11 1 2 128 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 16 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 49 48 14 13 5 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 196 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 11 2 11 1 2 128 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 217 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 25 2 25 1 2 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 98 51 1 11 11 29 77 0 62 62 52 98 78 76 72 69 65 63 58 55 8 52 52 21 77 83 70 66 81 4 59 59 52 97 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 213 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 25 2 25 1 2 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 57 12 3 105 82 68 80 3 57 53 60 57 89 32 1 31 0 5 60 31 5 105 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 98 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 28 58 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 214 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 25 2 25 1 2 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 57 12 3 105 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 98 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 28 58 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 170 values pushed */
518 517 498 497 428 427 408 407 592 588 583 581 577 576 572 569 562 560 553 551 542 540 534 532 524 522 517 530 518 530 508 506 497 516 498 516 496 493 489 487 480 475 467 460 457 454 451 449 445 442 434 432 427 440 428 440 418 416 407 426 408 426 400 397 389 386 383 380 372 369 366 363 355 351 348 347 346 344 342 340 336 335 332 330 317 315 313 312 311 310 304 302 297 296 288 287 284 282 272 270 263 261 257 255 252 250 247 245 241 239 216 215 212 211 192 190 186 184 181 179 176 174 170 168 161 159 149 147 143 142 138 137 136 135 129 127 122 121 120 119 116 114 101 99 97 96 91 90 87 86 85 83 79 77 66 64 58 57 71 34 19 35 19 38 34 23 22 84 7 31 
CALL[ ]	/* CallFunction */";
};
width = 2914;
}
);
note = logo;
},
{
glyphname = uni202F;
layers = (
{
layerId = m01;
width = 130;
}
);
note = uni202F;
unicode = 8239;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 130;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 280;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = t0163.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,176,o),
(253,223,qs),
(253,386,l),
(409,386,l),
(409,527,l),
(253,527,l),
(253,665,l),
(95,665,l),
(95,527,l),
(16,527,l),
(16,386,l),
(95,386,l),
(95,184,ls),
(95,94,o),
(142,43,qs),
(160,24,o),
(185,12,q),
(150,-112,l),
(159,-110,o),
(186,-108,o),
(201,-108,qs),
(212,-108,o),
(233,-110,o),
(251,-117,o),
(262,-131,o),
(262,-142,qs),
(262,-160,o),
(234,-180,o),
(201,-180,qs),
(190,-180,o),
(165,-177,o),
(149,-175,q),
(149,-267,l),
(164,-270,o),
(193,-274,o),
(213,-274,qs),
(283,-274,o),
(379,-203,o),
(381,-139,qs),
(381,-85,o),
(324,-35,o),
(282,-35,qs),
(274,-35,l),
(281,-7,l),
(287,-7,ls),
(302,-7,o),
(341,-2,o),
(382,9,o),
(421,26,o),
(436,38,q),
(394,162,l),
(384,155,o),
(343,138,o),
(322,138,qs),
(288,137,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 0 6 37 4 2 1 0 36 22 2 4 5 21 1 3 4 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 5 1 2 5 128 0 8 0 5 4 8 5 105 10 1 6 6 7 95 9 1 7 7 22 77 11 1 0 0 1 97 0 1 1 28 77 0 4 4 3 98 0 3 3 31 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 5 1 2 5 128 0 8 0 5 4 8 5 105 0 4 0 3 4 3 102 10 1 6 6 7 95 9 1 7 7 22 77 11 1 0 0 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
1 0 51 50 49 48 47 46 45 44 43 42 34 32 26 24 19 17 13 11 9 8 0 54 1 54 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = t0163.alt;
},
{
glyphname = t021b.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,-214,o),
(197,-233,o),
(174,-249,o),
(164,-256,q),
(197,-304,l),
(221,-295,o),
(269,-264,o),
(304,-219,o),
(325,-167,o),
(325,-137,qs),
(325,-101,o),
(285,-46,o),
(246,-46,qs),
(215,-45,o),
(171,-83,o),
(171,-116,qs),
(171,-146,o),
(208,-180,o),
(234,-182,q),
(231,-192,o)
);
},
{
closed = 1;
nodes = (
(253,188,o),
(253,221,qs),
(253,386,l),
(409,386,l),
(409,527,l),
(253,527,l),
(253,665,l),
(95,665,l),
(95,527,l),
(16,527,l),
(16,386,l),
(95,386,l),
(95,184,ls),
(95,94,o),
(190,-7,o),
(287,-7,qs),
(302,-7,o),
(341,-2,o),
(382,9,o),
(421,26,o),
(436,38,q),
(394,162,l),
(384,155,o),
(343,138,o),
(320,138,qs),
(280,139,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
23 1 1 3 24 1 2 1 2 76 15 14 0 3 0 73 0 5 4 5 133 0 0 2 0 134 7 1 3 3 4 95 6 1 4 4 22 77 8 1 1 1 2 98 0 2 2 28 2 78 21 20 42 41 40 39 38 37 36 35 34 33 30 28 20 45 21 45 37 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = t021b.alt;
},
{
glyphname = a00E2.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,573,l),
(232,573,l),
(247,593,o),
(278,634,o),
(294,654,q),
(357,573,l),
(505,573,l),
(463,625,o),
(379,729,o),
(336,781,q),
(251,781,l)
);
},
{
closed = 1;
nodes = (
(357,164,o),
(325,133,o),
(282,115,o),
(257,115,qs),
(233,115,o),
(194,136,o),
(194,161,qs),
(194,183,o),
(231,211,o),
(290,222,o),
(352,226,o),
(376,227,q),
(375,204,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,337,o),
(509,429,o),
(481,465,q),
(445,504,o),
(348,537,o),
(288,537,qs),
(244,537,o),
(163,519,o),
(96,478,o),
(52,409,o),
(45,359,q),
(206,359,l),
(214,385,o),
(263,405,o),
(293,405,qs),
(331,405,o),
(375,372,o),
(375,333,q),
(350,332,o),
(294,330,o),
(234,324,o),
(173,311,o),
(145,301,qs),
(98,283,o),
(36,208,o),
(36,150,qs),
(36,106,o),
(69,45,o),
(120,8,o),
(184,-8,o),
(216,-8,qs),
(232,-8,o),
(275,-3,o),
(318,11,o),
(361,37,o),
(378,59,q),
(380,44,o),
(382,14,o),
(383,0,q),
(527,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
5 1 0 2 27 1 5 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
5 1 0 2 27 1 10 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
11 1 2 0 2 133 1 1 0 9 0 133 0 8 7 6 7 8 6 128 0 4 3 5 3 4 5 128 0 6 0 3 4 6 3 105 0 7 7 9 97 0 9 9 29 77 12 10 2 5 5 30 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
11 1 2 0 2 133 1 1 0 9 0 133 0 8 7 6 7 8 6 128 0 4 3 10 3 4 10 128 0 6 0 3 4 6 3 105 0 7 7 9 97 0 9 9 29 77 12 1 10 10 21 77 0 5 5 30 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
24 24 0 0 24 64 24 64 58 56 52 51 49 47 45 43 33 31 20 18 13 11 0 10 0 10 20 19 13 7 24 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = a00E2.alt;
},
{
glyphname = a0103.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,662,o),
(499,750,q),
(365,750,l),
(362,722,o),
(324,691,o),
(297,691,qs),
(271,691,o),
(232,721,o),
(228,750,q),
(95,750,l),
(102,662,o),
(211,579,o),
(297,579,qs),
(383,579,o)
);
},
{
closed = 1;
nodes = (
(357,164,o),
(325,133,o),
(282,115,o),
(257,115,qs),
(233,115,o),
(194,136,o),
(194,161,qs),
(194,183,o),
(231,211,o),
(290,222,o),
(352,226,o),
(376,227,q),
(375,204,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,337,o),
(509,429,o),
(481,465,q),
(445,504,o),
(348,537,o),
(288,537,qs),
(244,537,o),
(163,519,o),
(96,478,o),
(52,409,o),
(45,359,q),
(206,359,l),
(214,385,o),
(263,405,o),
(293,405,qs),
(331,405,o),
(375,372,o),
(375,333,q),
(350,332,o),
(294,330,o),
(234,324,o),
(173,311,o),
(145,301,qs),
(98,283,o),
(36,208,o),
(36,150,qs),
(36,106,o),
(69,45,o),
(120,8,o),
(184,-8,o),
(216,-8,qs),
(232,-8,o),
(275,-3,o),
(318,11,o),
(361,37,o),
(378,59,q),
(380,44,o),
(382,14,o),
(383,0,q),
(527,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
30 1 6 5 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
30 1 11 5 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
3 1 1 2 2 1 112 0 9 8 7 8 9 7 128 0 5 4 6 4 5 6 128 0 7 0 4 5 7 4 105 12 1 0 0 2 97 0 2 2 20 77 0 8 8 10 97 0 10 10 29 77 13 11 2 6 6 30 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
3 1 1 2 1 133 0 9 8 7 8 9 7 128 0 5 4 6 4 5 6 128 0 7 0 4 5 7 4 105 12 1 0 0 2 97 0 2 2 20 77 0 8 8 10 97 0 10 10 29 77 13 11 2 6 6 30 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
3 1 1 2 1 133 0 9 8 7 8 9 7 128 0 5 4 11 4 5 11 128 0 2 12 1 0 10 2 0 106 0 7 0 4 5 7 4 105 0 8 8 10 97 0 10 10 29 77 13 1 11 11 21 77 0 6 6 30 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
27 27 1 0 27 67 27 67 61 59 55 54 52 50 48 46 36 34 23 21 16 14 11 10 8 6 4 3 0 13 1 13 14 7 22 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = a0103.alt;
},
{
glyphname = a00E4.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,699,o),
(83,658,qs),
(83,614,o),
(136,568,o),
(175,568,qs),
(213,568,o),
(266,614,o),
(266,658,qs),
(266,700,o),
(213,746,o),
(175,746,qs),
(136,746,o)
);
},
{
closed = 1;
nodes = (
(327,699,o),
(327,658,qs),
(327,614,o),
(380,568,o),
(418,568,qs),
(457,568,o),
(509,614,o),
(509,658,qs),
(509,700,o),
(457,746,o),
(418,746,qs),
(380,746,o)
);
},
{
closed = 1;
nodes = (
(357,164,o),
(325,133,o),
(282,115,o),
(257,115,qs),
(233,115,o),
(194,136,o),
(194,161,qs),
(194,183,o),
(231,211,o),
(290,222,o),
(352,226,o),
(376,227,q),
(375,204,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,337,o),
(509,429,o),
(481,465,q),
(445,504,o),
(348,537,o),
(288,537,qs),
(244,537,o),
(163,519,o),
(96,478,o),
(52,409,o),
(45,359,q),
(206,359,l),
(214,385,o),
(263,405,o),
(293,405,qs),
(331,405,o),
(375,372,o),
(375,333,q),
(350,332,o),
(294,330,o),
(234,324,o),
(173,311,o),
(145,301,qs),
(98,283,o),
(36,208,o),
(36,150,qs),
(36,106,o),
(69,45,o),
(120,8,o),
(184,-8,o),
(216,-8,qs),
(232,-8,o),
(275,-3,o),
(318,11,o),
(361,37,o),
(378,59,q),
(380,44,o),
(382,14,o),
(383,0,q),
(527,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
40 1 6 5 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
40 1 11 5 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 9 8 7 8 9 7 128 0 5 4 6 4 5 6 128 13 2 12 3 0 3 1 1 10 0 1 105 0 7 0 4 5 7 4 105 0 8 8 10 97 0 10 10 29 77 14 11 2 6 6 30 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 9 8 7 8 9 7 128 0 5 4 11 4 5 11 128 13 2 12 3 0 3 1 1 10 0 1 105 0 7 0 4 5 7 4 105 0 8 8 10 97 0 10 10 29 77 14 1 11 11 21 77 0 6 6 30 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
37 37 13 12 1 0 37 77 37 77 71 69 65 64 62 60 58 56 46 44 33 31 26 24 19 17 12 23 13 23 7 5 0 11 1 11 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = a00E4.alt;
},
{
glyphname = a2_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,0,l),
(589,527,l),
(444,527,l),
(436,484,l),
(407,512,o),
(334,537,o),
(296,537,qs),
(230,537,o),
(136,497,o),
(70,424,o),
(34,323,o),
(34,263,qs),
(34,206,o),
(65,108,o),
(124,33,o),
(220,-9,o),
(281,-9,qs),
(322,-9,o),
(400,12,o),
(436,43,q),
(443,0,l)
);
},
{
closed = 1;
nodes = (
(236,155,o),
(207,191,o),
(192,238,o),
(192,265,qs),
(192,290,o),
(206,336,o),
(236,372,o),
(282,392,o),
(312,392,qs),
(371,392,o),
(430,318,o),
(430,264,qs),
(430,237,o),
(415,190,o),
(386,155,o),
(341,133,o),
(312,133,qs),
(282,133,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
16 1 5 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
16 1 5 2 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 5 1 97 2 1 1 1 29 77 6 1 4 4 0 97 3 1 0 0 28 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 5 1 97 2 1 1 1 29 77 6 1 4 4 0 97 3 1 0 0 30 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 22 77 0 5 5 1 97 0 1 1 29 77 6 1 4 4 0 97 3 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 22 77 0 5 5 1 97 0 1 1 29 77 0 3 3 21 77 6 1 4 4 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 30 28 21 38 22 38 17 19 40 34 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = a2_alt;
},
{
glyphname = logom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(784,529,qs),
(776,537,o),
(768,545,o),
(760,548,o),
(746,548,o),
(731,548,q),
(697,575,l),
(692,580,o),
(685,580,qs),
(646,580,l),
(641,592,o),
(628,592,qs),
(620,592,o),
(612,585,o),
(607,580,q),
(552,580,ls),
(545,580,o),
(538,574,o),
(533,569,q),
(533,590,l),
(560,616,l),
(696,616,l),
(715,597,ls),
(721,591,o),
(729,591,qs),
(737,591,o),
(751,592,o),
(756,597,qs),
(763,604,o),
(780,624,o),
(770,636,q),
(780,650,o),
(769,663,qs),
(762,670,o),
(750,681,o),
(742,681,qs),
(732,681,o),
(723,680,o),
(715,676,o),
(706,666,o),
(696,656,q),
(660,656,l),
(660,684,l),
(672,689,o),
(686,711,o),
(686,725,qs),
(686,763,ls),
(686,771,o),
(674,783,o),
(666,783,qs),
(615,783,ls),
(607,783,o),
(595,771,o),
(595,763,qs),
(595,725,ls),
(595,711,o),
(609,689,o),
(621,684,q),
(621,656,l),
(596,656,l),
(598,663,o),
(592,676,o),
(582,682,o),
(568,681,o),
(563,675,q),
(526,639,l),
(516,647,o),
(494,636,o),
(494,623,qs),
(494,467,l),
(432,404,l),
(432,476,l),
(464,508,ls),
(473,517,o),
(464,542,o),
(450,542,qs),
(443,542,o),
(436,536,o),
(432,531,q),
(432,615,l),
(528,711,ls),
(533,717,o),
(533,733,o),
(533,743,q),
(539,743,ls),
(549,743,o),
(558,755,o),
(558,770,o),
(549,783,o),
(539,783,qs),
(533,783,l),
(533,788,ls),
(533,798,o),
(521,807,o),
(506,807,o),
(494,798,o),
(494,788,qs),
(494,783,l),
(488,783,ls),
(478,783,o),
(468,770,o),
(468,755,o),
(478,743,o),
(488,743,qs),
(494,743,l),
(494,733,l),
(432,671,l),
(432,792,ls),
(432,793,o),
(448,810,o),
(468,830,o),
(486,848,o),
(489,851,qs),
(495,856,o),
(495,873,o),
(489,879,qs),
(485,883,o),
(475,894,o),
(470,896,q),
(470,906,o),
(470,923,o),
(464,929,qs),
(460,933,o),
(452,941,o),
(443,947,o),
(433,949,o),
(427,945,q),
(423,950,o),
(405,952,o),
(397,945,q),
(383,954,o),
(373,942,qs),
(365,934,o),
(357,926,o),
(354,919,o),
(354,908,o),
(354,896,q),
(349,894,o),
(339,883,o),
(335,879,qs),
(329,873,o),
(329,856,o),
(335,851,qs),
(338,848,o),
(356,830,o),
(376,810,o),
(392,793,o),
(392,792,qs),
(392,671,l),
(330,733,l),
(330,743,l),
(336,743,ls),
(346,743,o),
(355,755,o),
(355,770,o),
(346,783,o),
(336,783,qs),
(330,783,l),
(330,788,ls),
(330,798,o),
(318,807,o),
(303,807,o),
(291,798,o),
(291,788,qs),
(291,783,l),
(285,783,ls),
(275,783,o),
(265,770,o),
(265,755,o),
(275,743,o),
(285,743,qs),
(291,743,l),
(291,733,o),
(291,717,o),
(297,711,qs),
(392,615,l),
(392,531,l),
(388,536,ls),
(381,543,o),
(365,541,o),
(355,530,o),
(353,515,o),
(360,508,qs),
(392,476,l),
(392,404,l),
(330,467,l),
(330,623,ls),
(330,631,o),
(318,643,o),
(310,643,qs),
(305,643,o),
(301,641,qs),
(299,640,o),
(298,639,q),
(261,675,l),
(256,681,o),
(242,682,o),
(232,676,o),
(226,663,o),
(228,656,q),
(203,656,l),
(203,684,l),
(215,689,o),
(229,711,o),
(229,725,qs),
(229,763,ls),
(229,771,o),
(217,783,o),
(209,783,qs),
(158,783,ls),
(150,783,o),
(138,771,o),
(138,763,qs),
(138,725,ls),
(138,711,o),
(152,689,o),
(164,684,q),
(164,656,l),
(128,656,l),
(109,675,ls),
(103,681,o),
(95,681,qs),
(87,681,o),
(73,681,o),
(68,675,qs),
(65,672,o),
(55,663,o),
(49,654,o),
(49,642,o),
(54,636,q),
(44,622,o),
(55,609,qs),
(62,602,o),
(74,591,o),
(82,591,qs),
(92,591,o),
(101,591,o),
(109,596,o),
(118,606,o),
(128,616,q),
(264,616,l),
(291,590,l),
(291,569,l),
(286,574,o),
(279,580,o),
(272,580,qs),
(217,580,l),
(210,587,ls),
(202,594,o),
(182,590,o),
(178,580,q),
(139,580,ls),
(132,580,o),
(127,575,q),
(93,548,l),
(79,548,o),
(65,548,o),
(56,545,o),
(48,537,o),
(40,529,qs),
(32,521,o),
(38,498,o),
(50,496,q),
(50,488,o),
(61,477,o),
(69,477,q),
(71,465,o),
(94,459,o),
(102,467,qs),
(110,475,o),
(118,483,o),
(121,492,o),
(121,506,o),
(121,520,q),
(146,540,l),
(264,540,l),
(291,514,l),
(291,478,l),
(145,478,ls),
(137,478,o),
(131,472,qs),
(106,447,ls),
(97,437,o),
(107,413,o),
(120,413,qs),
(158,413,ls),
(166,413,o),
(172,419,qs),
(192,439,l),
(302,439,l),
(397,344,l),
(403,336,o),
(420,336,o),
(427,344,qs),
(522,439,l),
(632,439,l),
(644,427,o),
(654,416,o),
(665,412,o),
(684,413,o),
(704,413,qs),
(717,413,o),
(727,438,o),
(718,447,qs),
(693,472,ls),
(687,478,o),
(679,478,qs),
(533,478,l),
(533,514,l),
(560,540,l),
(678,540,l),
(703,520,l),
(703,506,o),
(703,492,o),
(706,483,o),
(714,475,o),
(722,467,qs),
(730,459,o),
(753,466,o),
(755,477,q),
(763,477,o),
(774,488,o),
(774,496,q),
(784,499,o),
(789,508,qs),
(794,520,o)
);
},
{
closed = 1;
nodes = (
(263,235,o),
(267,238,o),
(269,236,qs),
(389,116,ls),
(398,108,o),
(424,108,o),
(433,116,qs),
(552,236,ls),
(554,238,o),
(559,235,o),
(559,233,qs),
(559,13,ls),
(559,0,o),
(572,0,qs),
(633,0,ls),
(645,0,o),
(645,13,qs),
(645,364,ls),
(645,377,o),
(633,377,qs),
(572,377,ls),
(561,377,o),
(550,368,q),
(417,235,ls),
(411,229,o),
(404,235,qs),
(272,368,l),
(261,377,o),
(250,377,qs),
(189,377,ls),
(176,377,o),
(176,364,qs),
(176,13,ls),
(176,0,o),
(189,0,qs),
(250,0,ls),
(263,0,o),
(263,13,qs),
(263,233,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 77 values pushed */
271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 18 14 294 259 131 95 4 12 18 305 245 149 83 4 10 12 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 10 76 233 228 206 198 195 177 166 161 8 16 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 15 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 37 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 114 values pushed */
32 30 2 18 14 12 14 18 12 128 38 37 36 11 4 10 12 9 1 10 114 8 1 0 9 1 3 0 114 6 1 2 3 41 0 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 26 25 22 21 20 7 16 28 24 23 3 19 14 16 19 105 33 17 15 3 14 35 34 13 3 12 10 14 12 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 124 values pushed */
26 1 21 16 21 133 32 30 18 17 4 15 14 12 14 15 12 128 38 37 36 11 4 10 13 9 1 10 114 8 1 0 9 1 3 0 114 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 13 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 126 values pushed */
26 1 21 16 21 133 32 30 18 17 4 15 14 12 14 15 12 128 38 37 36 11 4 10 13 9 13 10 9 128 8 1 0 9 1 9 0 1 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 13 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 132 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 38 37 36 11 4 10 13 9 13 10 9 128 8 1 0 9 1 9 0 1 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 13 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 139 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 0 37 12 13 12 37 13 128 38 36 11 3 10 13 9 13 10 9 128 8 1 0 9 1 9 0 1 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 37 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 143 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 0 37 12 13 12 37 13 128 38 36 11 3 10 13 9 13 10 9 128 8 1 0 29 1 29 0 1 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 37 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 1 9 9 29 77 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 145 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 0 37 12 13 12 37 13 128 38 36 11 3 10 13 9 13 10 9 128 39 1 9 29 13 9 29 126 8 1 0 29 1 29 0 1 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 37 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 84 values pushed */
359 358 351 348 345 342 336 333 330 327 321 319 316 315 314 312 310 308 304 303 301 299 289 288 284 283 275 273 266 265 250 248 240 239 236 235 231 230 226 225 222 220 173 172 169 168 164 163 159 158 155 153 136 134 125 124 116 114 107 106 104 101 90 88 85 84 79 78 74 72 70 68 18 36 50 18 18 19 53 18 30 45 7 31 
CALL[ ]	/* CallFunction */";
};
width = 825;
}
);
note = logom;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,364,l),
(504,447,l),
(50,661,l),
(50,505,l),
(280,402,l),
(50,300,l),
(50,145,l)
);
},
{
closed = 1;
nodes = (
(504,138,l),
(50,138,l),
(50,0,l),
(504,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 7 7 7 10 7 10 24 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,443,l),
(50,359,l),
(504,145,l),
(504,301,l),
(274,405,l),
(504,507,l),
(504,661,l)
);
},
{
closed = 1;
nodes = (
(504,138,l),
(50,138,l),
(50,0,l),
(504,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 7 7 7 10 7 10 24 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(538,489,l),
(365,489,l),
(365,662,l),
(228,662,l),
(228,489,l),
(56,489,l),
(56,351,l),
(228,351,l),
(228,190,l),
(365,190,l),
(365,351,l),
(538,351,l)
);
},
{
closed = 1;
nodes = (
(538,138,l),
(56,138,l),
(56,0,l),
(538,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
4 1 2 8 5 2 1 0 2 1 103 0 3 0 0 6 3 0 103 0 6 6 7 95 9 1 7 7 39 7 78 12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(190,294,l),
(56,294,l),
(56,156,l),
(127,156,l),
(56,0,l),
(205,0,l),
(276,156,l),
(520,156,l),
(520,294,l),
(339,294,l),
(392,410,l),
(520,410,l),
(520,547,l),
(455,547,l),
(526,703,l),
(377,703,l),
(306,547,l),
(56,547,l),
(56,410,l),
(243,410,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 1 0 1 133 0 6 5 6 134 2 1 0 10 9 2 3 4 0 3 103 8 1 4 5 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,164,o),
(198,187,o),
(205,206,o),
(220,218,o),
(232,218,qs),
(247,218,o),
(286,190,o),
(334,157,o),
(394,129,o),
(431,129,qs),
(479,129,o),
(541,163,o),
(577,217,o),
(591,286,o),
(591,321,q),
(450,321,l),
(450,311,o),
(448,290,o),
(442,272,o),
(429,260,o),
(417,260,qs),
(401,260,o),
(365,287,o),
(320,318,o),
(262,345,o),
(224,345,qs),
(175,345,o),
(110,312,o),
(72,259,o),
(56,190,o),
(56,154,q),
(197,154,l)
);
},
{
closed = 1;
nodes = (
(197,396,o),
(198,419,o),
(205,438,o),
(220,450,o),
(232,450,qs),
(247,450,o),
(286,422,o),
(334,389,o),
(394,362,o),
(431,362,qs),
(479,362,o),
(541,396,o),
(577,450,o),
(591,518,o),
(591,553,q),
(450,553,l),
(450,543,o),
(448,522,o),
(442,504,o),
(429,493,o),
(417,493,qs),
(401,493,o),
(365,520,o),
(320,551,o),
(262,578,o),
(224,578,qs),
(175,578,o),
(110,545,o),
(72,491,o),
(56,422,o),
(56,386,q),
(197,386,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
0 8 6 7 7 8 114 13 1 11 10 9 10 11 114 0 2 0 1 1 2 114 12 1 5 4 3 4 5 114 0 6 0 10 11 6 10 105 0 7 0 9 0 7 9 106 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 8 6 7 7 8 114 13 1 11 10 9 10 11 9 128 0 2 0 1 1 2 114 12 1 5 4 3 4 5 3 128 0 6 0 10 11 6 10 105 0 7 0 9 0 7 9 106 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 8 6 7 6 8 7 128 13 1 11 10 9 10 11 9 128 0 2 0 1 0 2 1 128 12 1 5 4 3 4 5 3 128 0 6 0 10 11 6 10 105 0 7 0 9 0 7 9 106 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
32 32 0 0 32 63 32 63 59 57 54 52 48 47 43 41 38 36 0 31 0 31 35 36 20 35 36 14 6 27 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,518,o),
(313,560,o),
(336,608,o),
(336,637,qs),
(336,667,o),
(315,712,o),
(278,744,o),
(228,760,o),
(200,760,qs),
(134,760,o),
(57,691,o),
(55,624,q),
(152,624,l),
(153,644,o),
(172,663,o),
(195,663,qs),
(211,663,o),
(231,647,o),
(231,630,qs),
(231,616,o),
(216,591,o),
(195,568,o),
(170,548,o),
(161,539,qs),
(135,517,o),
(84,475,o),
(58,454,q),
(58,372,l),
(332,372,l),
(332,467,l),
(217,467,l),
(236,482,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 2 0 2 3 114 0 2 2 4 97 0 4 4 58 77 0 0 0 1 95 0 1 1 59 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 2 0 2 3 0 128 0 2 2 4 97 0 4 4 58 77 0 0 0 1 95 0 1 1 59 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
34 18 43 17 16 5 9 27 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,631,o),
(348,651,qs),
(348,680,o),
(325,722,o),
(287,748,o),
(238,760,o),
(212,760,qs),
(146,760,o),
(65,694,o),
(66,631,q),
(166,631,l),
(166,665,o),
(209,665,qs),
(221,665,o),
(243,652,o),
(243,638,qs),
(243,621,o),
(223,608,o),
(207,608,qs),
(169,608,l),
(169,524,l),
(221,524,ls),
(235,524,o),
(255,512,o),
(255,496,qs),
(255,476,o),
(229,464,o),
(213,464,qs),
(187,464,o),
(159,485,o),
(156,503,q),
(55,503,l),
(55,438,o),
(142,368,o),
(214,368,qs),
(244,368,o),
(297,383,o),
(337,414,o),
(361,461,o),
(362,494,qs),
(362,521,o),
(338,568,o),
(313,580,q),
(333,592,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 6 5 4 5 6 114 0 1 3 2 2 1 114 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
37 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 4 5 6 114 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
34 17 36 33 36 34 18 39 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = tab_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,149,l),
(92,0,l),
(580,0,l),
(580,149,l),
(425,149,l),
(425,708,l),
(304,708,l),
(291,684,o),
(270,667,qs),
(250,650,o),
(224,641,qs),
(211,636,o),
(185,631,o),
(171,629,qs),
(157,627,o),
(124,626,o),
(110,626,q),
(110,505,l),
(261,505,l),
(261,149,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 0 3 1 0 103 0 2 2 20 77 5 1 3 3 4 96 0 4 4 21 4 78 17 17 17 24 33 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = tab_1;
},
{
glyphname = I_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,708,l),
(37,559,l),
(223,559,l),
(223,149,l),
(37,149,l),
(37,0,l),
(572,0,l),
(572,149,l),
(386,149,l),
(386,559,l),
(572,559,l),
(572,708,l),
(572,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 0 0 5 95 0 5 5 20 77 3 1 1 1 2 95 0 2 2 21 2 78 17 17 17 17 17 17 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = I_alt;
},
{
glyphname = l_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,176,ls),
(55,78,o),
(105,37,qs),
(131,17,o),
(202,0,o),
(256,0,qs),
(315,0,l),
(315,140,l),
(272,140,ls),
(212,140,o),
(212,199,qs),
(212,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 20 77 0 0 0 1 98 0 1 1 21 1 78 21 33 33 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 331;
}
);
note = l_alt;
},
{
glyphname = l2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,186,o),
(213,221,qs),
(213,708,l),
(55,708,l),
(55,184,ls),
(55,87,o),
(156,-7,o),
(252,-7,qs),
(287,-7,o),
(362,15,o),
(390,38,q),
(348,162,l),
(333,151,o),
(299,138,o),
(280,138,qs),
(241,139,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 0 2 4 1 1 0 2 76 0 2 2 20 77 3 1 0 0 1 98 0 1 1 28 1 78 1 0 12 11 8 6 0 15 1 15 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 392;
}
);
note = l2_alt;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,667,o),
(86,574,o),
(50,439,o),
(50,355,qs),
(50,270,o),
(85,136,o),
(155,43,o),
(263,-7,o),
(335,-7,qs),
(407,-7,o),
(514,43,o),
(585,136,o),
(620,270,o),
(620,355,qs),
(620,439,o),
(584,573,o),
(513,667,o),
(407,717,o),
(337,717,qs),
(266,717,o)
);
},
{
closed = 1;
nodes = (
(250,176,o),
(221,234,o),
(210,312,o),
(210,355,qs),
(210,398,o),
(222,475,o),
(251,533,o),
(300,567,o),
(337,567,qs),
(373,567,o),
(420,533,o),
(449,474,o),
(460,397,o),
(460,355,qs),
(460,311,o),
(448,234,o),
(420,175,o),
(371,141,o),
(335,141,qs),
(298,141,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 0 97 4 1 0 0 27 77 5 1 2 2 1 97 0 1 1 28 1 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,708,l),
(269,661,o),
(175,624,o),
(115,624,q),
(115,504,l),
(254,504,l),
(254,0,l),
(417,0,l),
(417,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 20 77 0 0 0 21 0 78 18 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,0,l),
(576,147,l),
(321,147,l),
(363,180,o),
(455,253,o),
(534,337,o),
(584,437,o),
(584,496,qs),
(584,551,o),
(545,633,o),
(479,688,o),
(390,716,o),
(341,716,qs),
(288,716,o),
(195,688,o),
(125,632,o),
(83,547,o),
(81,491,q),
(232,491,l),
(237,522,o),
(282,566,o),
(333,566,qs),
(378,566,o),
(421,519,o),
(421,485,qs),
(421,454,o),
(390,399,o),
(345,352,o),
(277,293,qs),
(229,251,o),
(134,172,o),
(86,133,q),
(86,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
0 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 27 77 0 3 3 4 95 0 4 4 21 4 78 17 25 36 18 41 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,531,o),
(289,569,o),
(330,569,qs),
(366,569,o),
(413,534,o),
(414,503,qs),
(414,494,o),
(409,467,o),
(390,443,o),
(354,426,o),
(325,426,qs),
(270,426,l),
(270,292,l),
(352,292,ls),
(400,292,o),
(438,250,o),
(438,222,qs),
(438,200,o),
(421,169,o),
(393,150,o),
(356,142,o),
(336,142,qs),
(292,142,o),
(222,179,o),
(212,223,q),
(52,223,l),
(64,107,o),
(219,-7,o),
(334,-7,qs),
(380,-7,o),
(476,13,o),
(555,65,o),
(606,151,o),
(607,216,qs),
(608,273,o),
(555,364,o),
(502,384,q),
(538,405,o),
(581,481,o),
(581,524,qs),
(581,577,o),
(539,650,o),
(470,696,o),
(381,717,o),
(335,717,qs),
(283,717,o),
(192,691,o),
(122,637,o),
(77,554,o),
(72,497,q),
(230,497,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
13 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 103 0 6 6 0 97 0 0 0 27 77 0 3 3 1 97 0 1 1 28 1 78 0 0 0 50 0 50 38 33 38 34 18 46 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,708,l),
(45,247,l),
(45,127,l),
(390,127,l),
(390,0,l),
(553,0,l),
(553,127,l),
(629,127,l),
(629,272,l),
(553,272,l),
(553,708,l)
);
},
{
closed = 1;
nodes = (
(390,272,l),
(229,272,l),
(390,519,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
13 1 0 4 8 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 0 4 4 20 77 0 2 2 21 2 78 17 18 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE004;
unicode = 57348;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,315,o),
(304,335,o),
(336,335,qs),
(361,335,o),
(398,318,o),
(424,291,o),
(437,256,o),
(437,238,qs),
(437,196,o),
(387,142,o),
(332,142,qs),
(292,144,o),
(241,187,o),
(234,219,q),
(75,219,l),
(88,100,o),
(226,-7,o),
(335,-7,qs),
(392,-7,o),
(490,26,o),
(561,91,o),
(602,184,o),
(602,244,qs),
(602,296,o),
(572,381,o),
(513,441,o),
(427,474,o),
(372,474,qs),
(341,474,o),
(278,461,o),
(246,444,q),
(249,473,o),
(254,533,o),
(256,562,q),
(574,562,l),
(574,708,l),
(114,708,l),
(109,607,o),
(94,400,o),
(87,297,q),
(229,297,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
8 1 7 6 4 6 7 4 128 0 4 5 5 4 112 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 98 0 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 98 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 40 0 40 38 34 18 40 37 17 19 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE005;
unicode = 57349;
},
{
glyphname = uniE006;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,157,o),
(244,184,o),
(233,220,o),
(233,239,qs),
(235,275,o),
(288,327,o),
(329,328,qs),
(380,329,o),
(429,274,o),
(429,232,qs),
(429,194,o),
(376,139,o),
(330,139,qs),
(305,140,o)
);
},
{
closed = 1;
nodes = (
(585,563,o),
(543,641,o),
(478,692,o),
(398,716,o),
(350,716,qs),
(271,715,o),
(155,652,o),
(82,543,o),
(52,412,o),
(52,342,qs),
(52,273,o),
(82,147,o),
(150,51,o),
(260,-6,o),
(339,-6,qs),
(390,-6,o),
(481,28,o),
(550,91,o),
(591,181,o),
(591,238,qs),
(591,348,o),
(470,465,o),
(364,465,qs),
(346,465,o),
(303,458,o),
(260,442,o),
(218,415,o),
(201,395,q),
(201,427,o),
(218,490,o),
(252,540,o),
(307,570,o),
(343,570,qs),
(379,570,o),
(429,538,o),
(437,509,q),
(590,509,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
22 1 1 3 1 76 8 1 6 2 3 2 6 3 128 0 3 0 1 0 3 1 105 0 2 2 5 97 0 5 5 27 77 7 1 0 0 4 97 0 4 4 28 4 78 14 14 1 0 14 50 14 50 46 44 36 34 28 26 18 16 7 5 0 13 1 13 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE006;
unicode = 57350;
},
{
glyphname = uniE007;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,589,l),
(592,708,l),
(85,708,l),
(85,559,l),
(406,559,l),
(146,0,l),
(328,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE007;
unicode = 57351;
},
{
glyphname = uniE008;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,358,o),
(503,381,q),
(537,402,o),
(579,477,o),
(579,519,qs),
(579,573,o),
(538,648,o),
(471,696,o),
(383,717,o),
(337,717,qs),
(290,717,o),
(202,696,o),
(133,649,o),
(91,574,o),
(91,519,qs),
(91,477,o),
(131,404,o),
(166,381,q),
(112,357,o),
(65,268,o),
(65,208,qs),
(66,149,o),
(113,67,o),
(189,16,o),
(285,-8,o),
(336,-8,qs),
(385,-8,o),
(481,16,o),
(557,67,o),
(604,148,o),
(605,206,qs),
(605,269,o)
);
},
{
closed = 1;
nodes = (
(421,538,o),
(421,503,qs),
(421,468,o),
(377,425,o),
(335,425,qs),
(295,425,o),
(248,467,o),
(248,502,qs),
(248,538,o),
(294,578,o),
(335,578,qs),
(373,578,o)
);
},
{
closed = 1;
nodes = (
(425,166,o),
(396,145,o),
(357,134,o),
(335,134,qs),
(313,134,o),
(273,145,o),
(243,166,o),
(226,199,o),
(226,221,qs),
(226,263,o),
(288,306,o),
(334,306,qs),
(380,306,o),
(442,264,o),
(442,221,qs),
(442,199,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
29 13 2 4 3 1 76 0 3 0 4 5 3 4 105 6 1 2 2 1 97 0 1 1 27 77 0 5 5 0 97 0 0 0 30 0 78 33 32 56 54 48 46 39 37 32 43 33 43 46 36 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE008;
unicode = 57352;
},
{
glyphname = uniE009;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(439,516,o),
(439,473,qs),
(439,456,o),
(427,423,o),
(402,397,o),
(365,381,o),
(341,381,qs),
(292,381,o),
(239,435,o),
(239,477,qs),
(239,519,o),
(294,570,o),
(342,570,qs),
(385,570,o)
);
},
{
closed = 1;
nodes = (
(87,146,o),
(131,68,o),
(199,17,o),
(287,-7,o),
(336,-7,qs),
(413,-7,o),
(520,52,o),
(588,151,o),
(618,280,o),
(618,349,qs),
(618,415,o),
(592,546,o),
(529,650,o),
(423,715,o),
(343,715,qs),
(289,715,o),
(193,683,o),
(121,621,o),
(79,529,o),
(79,469,qs),
(79,417,o),
(112,334,o),
(172,275,o),
(257,244,o),
(309,244,qs),
(327,244,o),
(369,250,o),
(411,265,o),
(451,290,o),
(468,309,q),
(467,276,o),
(450,215,o),
(418,167,o),
(369,139,o),
(337,139,qs),
(302,139,o),
(244,169,o),
(236,199,q),
(81,199,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
22 1 3 1 1 76 8 1 6 3 2 3 6 2 128 0 1 0 3 6 1 3 105 7 1 0 0 4 97 0 4 4 27 77 0 2 2 5 97 0 5 5 28 5 78 14 14 1 0 14 52 14 52 48 46 38 36 28 26 18 16 7 5 0 13 1 13 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uniE009;
unicode = 57353;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,407,l),
(42,407,l),
(42,271,l),
(456,271,l),
(270,112,l),
(362,3,l),
(722,340,l),
(362,676,l),
(270,567,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 0 1 1 76 8 1 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,273,l),
(722,273,l),
(722,409,l),
(308,409,l),
(494,568,l),
(402,677,l),
(42,340,l),
(402,4,l),
(494,113,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 1 0 1 76 3 2 2 0 74 8 1 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = uni2197;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,440,l),
(94,147,l),
(190,51,l),
(483,344,l),
(464,100,l),
(606,88,l),
(622,580,l),
(130,563,l),
(142,421,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 73 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = uni2197;
unicode = 8599;
},
{
glyphname = uni2198;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,335,l),
(189,628,l),
(93,532,l),
(386,239,l),
(142,258,l),
(130,116,l),
(622,100,l),
(605,592,l),
(463,580,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 0 7 0 74 0 0 0 118 17 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = uni2198;
unicode = 8600;
},
{
glyphname = uni2196;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,345,l),
(575,52,l),
(671,148,l),
(378,441,l),
(622,422,l),
(634,564,l),
(142,580,l),
(159,88,l),
(301,100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 0 7 0 73 0 0 0 118 17 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = uni2196;
unicode = 8598;
},
{
glyphname = uni2199;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,240,l),
(670,533,l),
(574,629,l),
(281,336,l),
(300,580,l),
(158,592,l),
(142,100,l),
(634,117,l),
(622,259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 74 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = uni2199;
unicode = 8601;
},
{
glyphname = uniE010;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,129,o),
(75,83,qs),
(75,35,o),
(129,-13,o),
(170,-13,qs),
(210,-13,o),
(264,35,o),
(264,83,qs),
(264,130,o),
(210,180,o),
(170,180,qs),
(130,180,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 0 0 1 97 0 1 1 30 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 0 0 1 97 0 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 0 0 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 7 5 0 11 1 11 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 339;
}
);
note = uniE010;
unicode = 57360;
},
{
glyphname = uniE011;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,-54,o),
(110,-81,o),
(81,-103,o),
(68,-110,q),
(111,-175,l),
(142,-165,o),
(202,-123,o),
(250,-64,o),
(280,9,o),
(281,48,qs),
(283,102,o),
(230,176,o),
(178,176,qs),
(138,176,o),
(78,128,o),
(78,81,qs),
(78,39,o),
(128,-6,o),
(162,-9,q),
(157,-24,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = uniE011;
unicode = 57361;
},
{
glyphname = uniE012;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,475,o),
(75,430,qs),
(75,382,o),
(130,334,o),
(171,334,qs),
(213,334,o),
(267,382,o),
(267,430,qs),
(267,475,o),
(213,528,o),
(171,528,qs),
(131,528,o)
);
},
{
closed = 1;
nodes = (
(75,132,o),
(75,87,qs),
(75,39,o),
(130,-9,o),
(171,-9,qs),
(213,-9,o),
(267,39,o),
(267,87,qs),
(267,132,o),
(213,184,o),
(171,184,qs),
(131,184,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 1 0 97 4 1 0 0 22 77 5 1 2 2 3 97 0 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 1 0 97 4 1 0 0 22 77 5 1 2 2 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = uniE012;
unicode = 57362;
},
{
glyphname = uniE013;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,-52,o),
(112,-79,o),
(82,-102,o),
(69,-109,q),
(113,-175,l),
(146,-164,o),
(207,-120,o),
(254,-60,o),
(282,12,o),
(282,51,qs),
(282,76,o),
(270,122,o),
(244,157,o),
(206,177,o),
(179,177,qs),
(138,177,o),
(80,130,o),
(80,82,qs),
(80,41,o),
(128,-5,o),
(163,-8,q),
(158,-22,o)
);
},
{
closed = 1;
nodes = (
(83,475,o),
(83,430,qs),
(83,382,o),
(138,334,o),
(180,334,qs),
(221,334,o),
(275,382,o),
(275,430,qs),
(275,475,o),
(221,528,o),
(180,528,qs),
(139,528,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
17 16 2 0 73 0 0 2 0 134 0 2 2 1 97 3 1 1 1 22 2 78 23 22 29 27 22 33 23 33 37 4 7 23 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = uniE013;
unicode = 57363;
},
{
glyphname = uniE014;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,708,l),
(113,425,l),
(219,425,l),
(243,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 20 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 334;
}
);
note = uniE014;
unicode = 57364;
},
{
glyphname = uniE015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,708,l),
(265,425,l),
(371,425,l),
(395,708,l)
);
},
{
closed = 1;
nodes = (
(50,708,l),
(69,425,l),
(175,425,l),
(198,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 20 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 445;
}
);
note = uniE015;
unicode = 57365;
},
{
glyphname = uniE016;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,522,o),
(109,496,o),
(81,474,o),
(68,467,q),
(78,451,o),
(99,421,o),
(109,405,q),
(139,414,o),
(197,456,o),
(242,513,o),
(270,582,o),
(270,619,qs),
(270,643,o),
(258,686,o),
(234,719,o),
(197,739,o),
(172,739,qs),
(133,739,o),
(78,694,o),
(78,649,qs),
(78,610,o),
(123,565,o),
(156,563,q),
(153,550,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
19 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 97 0 1 1 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 345;
}
);
note = uniE016;
unicode = 57366;
},
{
glyphname = uniE017;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,522,o),
(63,496,o),
(35,474,o),
(22,467,q),
(32,451,o),
(53,421,o),
(63,405,q),
(94,415,o),
(152,457,o),
(197,513,o),
(224,582,o),
(224,619,qs),
(224,643,o),
(212,686,o),
(188,719,o),
(151,739,o),
(126,739,qs),
(87,739,o),
(32,694,o),
(32,649,qs),
(32,610,o),
(77,565,o),
(111,563,q),
(107,550,o)
);
},
{
closed = 1;
nodes = (
(327,522,o),
(302,496,o),
(274,474,o),
(261,467,q),
(271,451,o),
(292,421,o),
(302,405,q),
(333,415,o),
(391,457,o),
(436,513,o),
(463,582,o),
(463,619,qs),
(463,643,o),
(452,686,o),
(428,719,o),
(391,739,o),
(366,739,qs),
(327,739,o),
(271,694,o),
(271,649,qs),
(271,610,o),
(316,565,o),
(350,563,q),
(346,550,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
43 40 19 16 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 0 1 97 3 1 1 1 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
31 29 25 24 36 16 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = uniE017;
unicode = 57367;
},
{
glyphname = uniE018;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,650,o),
(230,676,o),
(258,697,o),
(271,705,q),
(229,767,l),
(198,756,o),
(141,714,o),
(96,658,o),
(69,590,o),
(69,553,qs),
(69,529,o),
(80,485,o),
(104,452,o),
(142,432,o),
(166,432,qs),
(204,431,o),
(261,478,o),
(261,523,qs),
(261,561,o),
(215,606,o),
(182,608,q),
(186,622,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
17 16 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 346;
}
);
note = uniE018;
unicode = 57368;
},
{
glyphname = uniE019;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(397,650,o),
(422,676,o),
(450,697,o),
(463,705,q),
(453,721,o),
(432,751,o),
(422,767,q),
(391,756,o),
(333,714,o),
(288,658,o),
(261,590,o),
(261,553,qs),
(261,529,o),
(272,485,o),
(296,452,o),
(333,432,o),
(359,432,qs),
(397,431,o),
(453,478,o),
(453,523,qs),
(453,561,o),
(408,606,o),
(374,608,q),
(378,622,o)
);
},
{
closed = 1;
nodes = (
(158,650,o),
(183,676,o),
(211,697,o),
(224,705,q),
(214,721,o),
(193,751,o),
(183,767,q),
(152,756,o),
(94,714,o),
(49,658,o),
(22,590,o),
(22,553,qs),
(22,529,o),
(33,485,o),
(57,452,o),
(94,432,o),
(119,432,qs),
(158,431,o),
(214,478,o),
(214,523,qs),
(214,561,o),
(169,606,o),
(135,608,q),
(139,622,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
43 40 19 16 4 0 74 2 1 0 1 1 0 89 2 1 0 0 1 97 3 1 1 0 1 81 31 29 25 24 36 16 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = uniE019;
unicode = 57369;
},
{
glyphname = uniE020;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,-49,o),
(109,-74,o),
(81,-97,o),
(68,-104,q),
(109,-165,l),
(139,-156,o),
(197,-114,o),
(242,-57,o),
(270,12,o),
(270,49,qs),
(270,73,o),
(258,116,o),
(234,149,o),
(197,169,o),
(172,169,qs),
(133,169,o),
(78,124,o),
(78,79,qs),
(78,40,o),
(123,-5,o),
(156,-7,q),
(153,-21,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
17 16 2 0 73 0 1 1 0 97 0 0 0 28 0 78 36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 346;
}
);
note = uniE020;
unicode = 57376;
},
{
glyphname = uniE021;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,-49,o),
(63,-74,o),
(35,-97,o),
(22,-104,q),
(63,-165,l),
(94,-155,o),
(152,-113,o),
(197,-56,o),
(224,12,o),
(224,49,qs),
(224,73,o),
(212,116,o),
(188,149,o),
(151,169,o),
(126,169,qs),
(87,169,o),
(32,124,o),
(32,79,qs),
(32,40,o),
(77,-5,o),
(111,-7,q),
(107,-21,o)
);
},
{
closed = 1;
nodes = (
(327,-49,o),
(302,-74,o),
(274,-97,o),
(261,-104,q),
(302,-165,l),
(333,-155,o),
(391,-113,o),
(436,-56,o),
(463,12,o),
(463,49,qs),
(463,73,o),
(452,116,o),
(428,149,o),
(391,169,o),
(366,169,qs),
(327,169,o),
(271,124,o),
(271,79,qs),
(271,40,o),
(316,-5,o),
(350,-7,q),
(346,-21,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
39 38 17 16 4 0 73 3 1 1 1 0 97 2 1 0 0 28 0 78 36 31 36 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = uniE021;
unicode = 57377;
},
{
glyphname = uniE022;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,554,o),
(75,509,qs),
(75,461,o),
(130,413,o),
(171,413,qs),
(213,413,o),
(267,461,o),
(267,509,qs),
(267,554,o),
(213,606,o),
(171,606,qs),
(131,606,o)
);
},
{
closed = 1;
nodes = (
(75,210,o),
(75,165,qs),
(75,117,o),
(130,69,o),
(171,69,qs),
(213,69,o),
(267,117,o),
(267,165,qs),
(267,210,o),
(213,262,o),
(171,262,qs),
(131,262,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = uniE022;
unicode = 57378;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,396,o),
(377,443,qs),
(377,491,o),
(322,538,o),
(280,538,qs),
(239,538,o),
(184,491,o),
(184,443,qs),
(184,396,o),
(239,348,o),
(280,348,qs),
(322,348,o)
);
},
{
closed = 1;
nodes = (
(211,256,o),
(169,203,o),
(142,176,qs),
(113,148,o),
(75,103,o),
(53,63,o),
(43,25,o),
(42,4,qs),
(42,-49,o),
(81,-122,o),
(145,-168,o),
(228,-188,o),
(272,-188,qs),
(390,-188,o),
(516,-74,o),
(516,30,q),
(363,30,l),
(361,-8,o),
(315,-41,o),
(275,-41,qs),
(240,-41,o),
(202,-10,o),
(202,19,qs),
(202,39,o),
(225,72,o),
(259,104,o),
(300,137,o),
(334,176,o),
(358,223,o),
(359,253,qs),
(359,263,o),
(358,284,o),
(356,296,q),
(210,296,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 2 3 112 6 1 0 0 1 97 0 1 1 49 77 0 2 2 4 98 0 4 4 43 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 2 3 112 0 2 0 4 2 4 102 6 1 0 0 1 97 0 1 1 49 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 0 3 2 126 0 2 0 4 2 4 102 6 1 0 0 1 97 0 1 1 49 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
12 12 1 0 12 45 12 45 33 31 29 28 26 24 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,400,o),
(256,445,qs),
(256,489,o),
(202,538,o),
(163,538,qs),
(140,538,o),
(106,526,o),
(80,502,o),
(64,465,o),
(64,445,qs),
(64,399,o),
(118,350,o),
(160,350,qs),
(201,350,o)
);
},
{
closed = 1;
nodes = (
(244,-179,l),
(232,287,l),
(87,287,l),
(74,-179,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 2 3 99 4 1 0 0 1 97 0 1 1 49 0 78 1 0 17 16 15 14 9 7 0 13 1 13 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,0,l),
(237,463,ls),
(237,491,o),
(257,531,o),
(289,556,o),
(330,567,o),
(351,567,qs),
(366,567,o),
(398,561,o),
(427,547,o),
(450,525,o),
(456,509,q),
(327,337,l),
(350,328,o),
(400,310,o),
(425,300,qs),
(452,289,o),
(501,268,o),
(538,242,o),
(561,211,o),
(561,192,qs),
(561,171,o),
(529,138,o),
(503,138,qs),
(474,138,o),
(440,164,o),
(438,186,q),
(291,186,l),
(293,96,o),
(408,-7,o),
(509,-7,qs),
(560,-7,o),
(638,22,o),
(692,73,o),
(720,144,o),
(720,186,qs),
(720,232,o),
(685,299,o),
(656,324,qs),
(627,350,o),
(557,385,o),
(522,398,q),
(634,531,l),
(620,580,o),
(564,651,o),
(489,696,o),
(401,717,o),
(354,717,qs),
(294,717,o),
(192,687,o),
(117,626,o),
(74,536,o),
(74,476,qs),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
41 40 11 10 4 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 4 3 3 2 114 0 4 4 0 97 0 0 0 46 77 0 3 3 1 98 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 3 3 1 98 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 5 5 39 77 0 3 3 1 98 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
21 47 34 18 47 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 760;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,442,l),
(332,612,ls),
(332,686,o),
(263,764,o),
(190,764,qs),
(164,764,o),
(115,751,o),
(76,724,o),
(50,683,o),
(47,655,q),
(144,655,l),
(146,671,o),
(177,681,o),
(190,681,qs),
(237,681,o),
(240,634,q),
(182,634,ls),
(157,634,o),
(107,627,o),
(66,606,o),
(40,569,o),
(40,538,qs),
(40,490,o),
(99,438,o),
(146,438,qs),
(175,438,o),
(226,457,o),
(244,482,q),
(245,442,l)
);
},
{
closed = 1;
nodes = (
(200,514,o),
(174,514,qs),
(160,513,o),
(135,526,o),
(135,543,qs),
(135,561,o),
(164,571,o),
(179,571,qs),
(241,571,l),
(239,544,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 1 5 7 1 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 1 0 7 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
0 1 5 7 1 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 2 1 2 3 1 128 0 7 6 5 6 7 5 128 0 5 0 6 5 0 126 0 0 6 0 111 0 1 0 6 7 1 6 105 0 2 2 4 97 0 4 4 58 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 1 2 3 1 128 0 7 6 0 6 7 0 128 5 1 0 0 132 0 1 0 6 7 1 6 105 0 2 2 4 97 0 4 4 58 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 3 2 1 2 3 1 128 0 7 6 5 6 7 5 128 0 5 0 6 5 0 126 0 0 0 132 0 1 0 6 7 1 6 105 0 2 2 4 97 0 4 4 58 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 33 19 36 18 33 38 34 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,739,o),
(57,695,o),
(40,635,o),
(40,599,qs),
(40,563,o),
(57,504,o),
(93,461,o),
(148,437,o),
(186,437,qs),
(224,437,o),
(279,461,o),
(315,504,o),
(332,563,o),
(332,599,qs),
(332,635,o),
(315,695,o),
(280,738,o),
(225,763,o),
(187,763,qs),
(149,763,o)
);
},
{
closed = 1;
nodes = (
(226,665,o),
(238,642,o),
(242,614,o),
(242,600,qs),
(242,586,o),
(237,557,o),
(225,534,o),
(203,519,o),
(186,519,qs),
(168,519,o),
(146,534,o),
(134,557,o),
(130,586,o),
(130,600,qs),
(130,614,o),
(135,643,o),
(148,666,o),
(170,680,o),
(187,680,qs),
(204,680,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 3 0 1 3 1 101 5 1 2 2 0 97 4 1 0 0 58 2 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 9 22 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,620,l),
(477,620,l),
(477,753,l),
(100,753,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 577;
}
);
note = macron;
unicode = 175;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,708,ls),
(161,708,o),
(89,680,o),
(36,630,o),
(5,561,o),
(5,519,qs),
(5,473,o),
(34,398,o),
(87,344,o),
(161,315,o),
(207,315,qs),
(221,315,l),
(221,0,l),
(379,0,l),
(379,562,l),
(479,562,l),
(479,0,l),
(636,0,l),
(636,562,l),
(737,562,l),
(737,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 4 0 1 0 4 1 128 2 1 0 0 5 95 0 5 5 38 77 3 1 1 1 39 1 78 40 33 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,398,o),
(40,356,qs),
(40,314,o),
(92,263,o),
(134,263,qs),
(176,263,o),
(229,314,o),
(229,356,qs),
(229,398,o),
(176,449,o),
(134,449,qs),
(93,449,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,769,l),
(374,769,l),
(311,682,l),
(246,769,l),
(100,769,l),
(259,584,l),
(362,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 620;
}
);
note = caron;
unicode = 711;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,718,o),
(100,676,qs),
(100,634,o),
(152,583,o),
(194,583,qs),
(236,583,o),
(289,633,o),
(289,676,qs),
(289,718,o),
(236,769,o),
(194,769,qs),
(153,769,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 389;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,802,o),
(119,770,o),
(100,727,o),
(100,700,qs),
(100,645,o),
(171,582,o),
(224,582,qs),
(278,582,o),
(349,644,o),
(349,700,qs),
(349,754,o),
(277,819,o),
(224,819,qs),
(198,819,o)
);
},
{
closed = 1;
nodes = (
(265,718,o),
(265,700,qs),
(265,682,o),
(241,661,o),
(224,661,qs),
(206,661,o),
(184,682,o),
(184,700,qs),
(184,717,o),
(207,739,o),
(224,739,qs),
(241,739,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 15 14 1 0 21 19 14 25 15 25 7 5 0 13 1 13 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 449;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,-1,o),
(120,-62,o),
(120,-100,qs),
(120,-128,o),
(140,-171,o),
(175,-200,o),
(220,-215,o),
(246,-215,qs),
(268,-216,o),
(309,-208,o),
(328,-197,q),
(313,-109,l),
(292,-118,o),
(272,-118,qs),
(251,-118,o),
(222,-91,o),
(223,-68,qs),
(224,-42,o),
(264,-6,o),
(286,2,q),
(199,13,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
9 1 1 0 1 76 20 8 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 37 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 448;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,599,o),
(222,621,o),
(228,641,o),
(241,655,o),
(252,655,qs),
(264,655,o),
(292,633,o),
(328,608,o),
(370,586,o),
(397,586,qs),
(430,586,o),
(474,612,o),
(501,654,o),
(512,708,o),
(512,737,qs),
(512,742,o),
(512,753,o),
(512,758,q),
(409,758,l),
(410,749,o),
(410,728,o),
(405,710,o),
(392,699,o),
(381,699,qs),
(368,699,o),
(342,719,o),
(311,744,o),
(272,764,o),
(246,764,qs),
(214,764,o),
(167,742,o),
(137,705,o),
(121,654,o),
(120,624,qs),
(120,609,o),
(121,596,o),
(122,591,q),
(223,591,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 1 0 2 1 128 0 1 4 3 1 89 0 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 0 1 0 2 1 128 6 1 5 4 3 4 5 3 128 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 37 0 37 35 39 20 35 39 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 632;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,584,l),
(323,769,l),
(172,769,l),
(94,584,l)
);
},
{
closed = 1;
nodes = (
(401,584,l),
(543,769,l),
(391,769,l),
(280,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 585;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-505,713,o),
(-505,672,qs),
(-505,629,o),
(-453,583,o),
(-415,583,qs),
(-377,583,o),
(-325,629,o),
(-325,672,qs),
(-325,714,o),
(-377,760,o),
(-415,760,qs),
(-453,760,o)
);
},
{
closed = 1;
nodes = (
(-237,713,o),
(-237,672,qs),
(-237,629,o),
(-185,583,o),
(-147,583,qs),
(-109,583,o),
(-56,629,o),
(-56,672,qs),
(-56,714,o),
(-109,760,o),
(-147,760,qs),
(-184,760,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-297,769,l),
(-460,769,l),
(-307,584,l),
(-177,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-230,584,l),
(-77,769,l),
(-240,769,l),
(-360,584,l),
(-360,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-337,769,l),
(-495,584,l),
(-349,584,l),
(-286,671,l),
(-221,584,l),
(-75,584,l),
(-235,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-379,599,o),
(-378,621,o),
(-372,641,o),
(-359,655,o),
(-348,655,qs),
(-336,655,o),
(-308,633,o),
(-272,608,o),
(-230,586,o),
(-203,586,qs),
(-170,586,o),
(-126,612,o),
(-99,654,o),
(-88,708,o),
(-88,737,qs),
(-88,742,o),
(-88,753,o),
(-88,758,q),
(-191,758,l),
(-190,749,o),
(-190,728,o),
(-195,710,o),
(-208,699,o),
(-219,699,qs),
(-232,699,o),
(-258,719,o),
(-289,744,o),
(-328,764,o),
(-354,764,qs),
(-386,764,o),
(-433,742,o),
(-463,705,o),
(-479,654,o),
(-480,624,qs),
(-480,609,o),
(-479,596,o),
(-478,591,q),
(-377,591,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 1 0 2 1 128 0 1 4 3 1 89 0 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 0 1 0 2 1 128 6 1 5 4 3 4 5 3 128 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 37 0 37 35 39 20 35 39 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-480,620,l),
(-103,620,l),
(-103,753,l),
(-480,753,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-474,668,o),
(-368,583,o),
(-280,583,qs),
(-192,583,o),
(-86,668,o),
(-85,760,q),
(-211,760,l),
(-212,726,o),
(-245,690,o),
(-280,690,qs),
(-315,690,o),
(-348,726,o),
(-349,760,q),
(-475,760,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
4 3 2 1 0 0 1 112 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 13 0 13 34 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-385,718,o),
(-385,676,qs),
(-385,634,o),
(-333,583,o),
(-291,583,qs),
(-249,583,o),
(-196,633,o),
(-196,676,qs),
(-196,718,o),
(-249,769,o),
(-291,769,qs),
(-332,769,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-357,802,o),
(-391,770,o),
(-410,727,o),
(-410,700,qs),
(-410,645,o),
(-339,582,o),
(-286,582,qs),
(-232,582,o),
(-161,644,o),
(-161,700,qs),
(-161,754,o),
(-233,819,o),
(-286,819,qs),
(-312,819,o)
);
},
{
closed = 1;
nodes = (
(-245,718,o),
(-245,700,qs),
(-245,682,o),
(-269,661,o),
(-286,661,qs),
(-304,661,o),
(-326,682,o),
(-326,700,qs),
(-326,717,o),
(-303,739,o),
(-286,739,qs),
(-269,739,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 15 14 1 0 21 19 14 25 15 25 7 5 0 13 1 13 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-334,584,l),
(-221,769,l),
(-372,769,l),
(-450,584,l)
);
},
{
closed = 1;
nodes = (
(-143,584,l),
(-1,769,l),
(-153,769,l),
(-264,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-60,769,l),
(-206,769,l),
(-269,682,l),
(-334,769,l),
(-480,769,l),
(-321,584,l),
(-218,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-240,780,o),
(-216,804,o),
(-189,823,o),
(-177,830,q),
(-217,886,l),
(-247,876,o),
(-301,838,o),
(-345,787,o),
(-370,726,o),
(-370,692,qs),
(-370,671,o),
(-360,630,o),
(-337,601,o),
(-300,583,o),
(-277,583,qs),
(-241,582,o),
(-186,625,o),
(-186,665,qs),
(-186,699,o),
(-231,741,o),
(-262,742,q),
(-258,754,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
17 16 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-398,-98,l),
(-390,-96,o),
(-362,-93,o),
(-347,-93,qs),
(-322,-93,o),
(-288,-110,o),
(-288,-127,qs),
(-288,-144,o),
(-316,-163,o),
(-348,-163,qs),
(-359,-163,o),
(-385,-160,o),
(-400,-158,q),
(-400,-249,l),
(-367,-255,o),
(-334,-255,qs),
(-305,-255,o),
(-247,-240,o),
(-200,-208,o),
(-171,-158,o),
(-171,-122,qs),
(-171,-71,o),
(-232,-22,o),
(-276,-22,q),
(-256,39,l),
(-355,39,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 57 values pushed */
24 12 2 2 3 11 1 1 2 2 76 0 0 4 3 4 0 3 128 5 1 4 0 3 2 4 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 0 0 0 25 0 25 36 36 38 17 6 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-189,-1,o),
(-235,-62,o),
(-235,-100,qs),
(-235,-128,o),
(-215,-171,o),
(-180,-200,o),
(-135,-215,o),
(-109,-215,qs),
(-87,-216,o),
(-46,-208,o),
(-27,-197,q),
(-42,-109,l),
(-63,-118,o),
(-83,-118,qs),
(-104,-118,o),
(-133,-91,o),
(-132,-68,qs),
(-131,-42,o),
(-91,-6,o),
(-69,2,q),
(-156,13,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
9 1 1 0 1 76 20 8 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 37 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(440,559,l),
(440,280,l),
(297,280,l),
(414,559,l)
);
},
{
closed = 1;
nodes = (
(938,0,l),
(938,147,l),
(603,147,l),
(603,278,l),
(884,278,l),
(884,423,l),
(603,423,l),
(603,559,l),
(938,559,l),
(938,708,l),
(320,708,l),
(0,0,l),
(176,0,l),
(234,134,l),
(440,134,l),
(440,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 6 0 7 8 6 7 103 0 0 0 2 3 0 2 103 5 1 1 1 4 95 0 4 4 38 77 0 8 8 3 95 9 1 3 3 39 3 78 19 18 17 17 17 17 17 17 17 17 16 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 973;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(347,0,ls),
(521,0,o),
(702,179,o),
(702,354,qs),
(702,439,o),
(653,571,o),
(561,661,o),
(427,708,o),
(343,708,qs),
(74,708,l),
(74,420,l),
(-9,420,l),
(-9,287,l),
(74,287,l)
);
},
{
closed = 1;
nodes = (
(364,420,l),
(237,420,l),
(237,559,l),
(341,559,ls),
(443,559,o),
(536,452,o),
(536,353,qs),
(536,305,o),
(515,229,o),
(470,176,o),
(399,147,o),
(349,147,qs),
(237,147,l),
(237,287,l),
(364,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
6 1 0 9 7 8 3 3 4 0 3 103 0 5 5 1 95 0 1 1 38 77 0 4 4 2 95 0 2 2 39 2 78 15 15 0 0 15 29 15 29 28 27 26 24 18 16 0 14 0 14 38 33 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,-7,qs),
(471,-8,o),
(603,46,o),
(696,143,o),
(747,278,o),
(747,358,qs),
(747,406,o),
(728,498,o),
(687,579,o),
(625,647,o),
(582,671,q),
(636,820,l),
(484,820,l),
(446,714,l),
(419,717,o),
(392,717,qs),
(311,717,o),
(179,664,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,306,o),
(55,213,o),
(95,131,o),
(158,62,o),
(202,38,q),
(148,-111,l),
(299,-111,l),
(338,-4,l),
(363,-7,o)
);
},
{
closed = 1;
nodes = (
(202,311,o),
(202,356,qs),
(202,399,o),
(227,476,o),
(275,534,o),
(346,567,o),
(392,567,qs),
(400,567,l),
(264,192,l),
(231,224,o)
);
},
{
closed = 1;
nodes = (
(580,399,o),
(580,354,qs),
(580,312,o),
(556,235,o),
(509,177,o),
(440,143,o),
(394,143,qs),
(383,143,l),
(520,517,l),
(552,485,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
18 1 4 1 3 1 3 5 2 76 0 2 1 2 133 0 0 3 0 134 0 4 4 1 97 0 1 1 46 77 0 5 5 3 97 0 3 3 47 3 78 40 34 42 18 42 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,708,l),
(74,708,l),
(74,0,l),
(237,0,l),
(237,102,l),
(360,102,ls),
(421,102,o),
(523,135,o),
(597,199,o),
(638,296,o),
(638,359,qs),
(638,426,o),
(597,521,o),
(524,579,o),
(421,606,o),
(359,606,qs),
(237,606,l)
);
},
{
closed = 1;
nodes = (
(237,457,l),
(354,457,ls),
(410,457,o),
(478,412,o),
(478,351,qs),
(478,297,o),
(411,246,o),
(356,246,qs),
(237,246,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 0 0 5 4 0 5 103 7 1 4 0 1 2 4 1 103 0 3 3 38 77 0 2 2 39 2 78 18 17 1 0 24 22 17 25 18 25 15 14 13 12 11 9 0 16 1 16 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,0,l),
(212,544,ls),
(212,582,o),
(259,616,o),
(294,616,qs),
(308,616,o),
(336,609,o),
(358,594,o),
(372,572,o),
(372,556,qs),
(371,531,o),
(342,490,o),
(308,448,o),
(280,401,o),
(280,371,qs),
(280,323,o),
(329,272,o),
(369,255,qs),
(453,219,ls),
(473,211,o),
(495,187,o),
(495,164,qs),
(495,144,o),
(467,121,o),
(444,121,qs),
(416,121,o),
(387,149,o),
(387,171,q),
(239,171,l),
(241,127,o),
(275,60,o),
(331,15,o),
(404,-8,o),
(446,-8,qs),
(488,-8,o),
(563,13,o),
(618,57,o),
(651,122,o),
(651,166,qs),
(651,221,o),
(603,291,o),
(558,312,qs),
(484,346,ls),
(467,354,o),
(434,373,o),
(434,396,qs),
(434,414,o),
(465,449,o),
(503,490,o),
(534,541,o),
(534,576,qs),
(534,624,o),
(491,690,o),
(422,731,o),
(338,750,o),
(297,750,qs),
(249,750,o),
(162,730,o),
(95,684,o),
(55,610,o),
(55,556,qs),
(55,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 3 3 1 97 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 5 5 39 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
61 60 57 55 37 35 33 32 28 26 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = oslash;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,30,o),
(537,102,o),
(574,203,o),
(574,266,qs),
(574,329,o),
(528,447,o),
(477,486,q),
(545,634,l),
(392,634,l),
(349,535,l),
(329,538,o),
(308,538,qs),
(247,538,o),
(146,499,o),
(74,428,o),
(34,327,o),
(34,266,qs),
(34,202,o),
(78,83,o),
(131,44,q),
(62,-105,l),
(214,-105,l),
(258,-5,l),
(279,-8,o),
(303,-8,qs),
(366,-8,o)
);
},
{
closed = 1;
nodes = (
(198,203,o),
(190,245,o),
(190,265,qs),
(190,317,o),
(246,391,o),
(302,392,q),
(209,186,l)
);
},
{
closed = 1;
nodes = (
(408,322,o),
(416,284,o),
(416,265,qs),
(416,212,o),
(364,138,o),
(307,136,q),
(399,339,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
18 1 4 2 39 32 2 5 4 5 1 0 5 3 76 0 3 2 3 133 0 1 0 1 134 0 4 4 2 97 0 2 2 49 77 0 5 5 0 97 6 1 0 0 47 0 78 1 0 34 33 27 26 17 16 14 12 4 3 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = eth;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,579,l),
(372,567,o),
(401,529,o),
(425,484,o),
(440,438,o),
(440,419,q),
(411,461,o),
(322,498,o),
(272,498,qs),
(218,498,o),
(131,460,o),
(68,394,o),
(34,304,o),
(34,252,qs),
(34,192,o),
(72,94,o),
(143,24,o),
(239,-12,o),
(299,-12,qs),
(365,-12,o),
(476,34,o),
(516,86,qs),
(553,135,o),
(583,256,o),
(583,317,qs),
(583,367,o),
(573,455,o),
(547,536,o),
(504,612,o),
(471,651,q),
(543,694,l),
(489,785,l),
(381,723,l),
(337,750,o),
(239,782,o),
(195,788,q),
(178,675,l),
(195,671,o),
(247,659,o),
(266,648,q),
(196,607,l),
(247,517,l)
);
},
{
closed = 1;
nodes = (
(191,190,o),
(191,242,qs),
(191,292,o),
(250,351,o),
(301,351,qs),
(353,351,o),
(416,294,o),
(416,241,qs),
(416,190,o),
(358,128,o),
(307,128,qs),
(254,128,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
35 1 3 1 1 76 41 40 11 10 9 8 5 4 1 9 1 74 0 1 0 3 2 1 3 105 4 1 2 2 0 97 0 0 0 47 0 78 43 42 49 47 42 53 43 53 33 31 23 21 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = eth;
unicode = 240;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,-210,l),
(212,-210,l),
(212,52,l),
(272,-8,o),
(377,-8,qs),
(437,-8,o),
(524,38,o),
(581,114,o),
(608,215,o),
(608,269,qs),
(608,323,o),
(579,421,o),
(521,495,o),
(433,538,o),
(375,538,qs),
(327,538,o),
(243,504,o),
(212,466,q),
(212,708,l)
);
},
{
closed = 1;
nodes = (
(450,321,o),
(450,266,qs),
(450,238,o),
(437,190,o),
(409,154,o),
(365,134,o),
(335,134,qs),
(275,136,o),
(212,209,o),
(212,267,qs),
(212,293,o),
(229,339,o),
(260,374,o),
(305,394,o),
(332,394,qs),
(389,394,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 15 1 1 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 38 77 6 1 4 4 0 97 0 0 0 49 77 0 5 5 1 97 0 1 1 47 77 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 0 97 0 0 0 49 77 0 5 5 1 97 0 1 1 47 77 0 2 2 3 95 0 3 3 38 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
21 20 29 27 20 35 21 35 17 18 40 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(578,-8,o),
(633,-8,qs),
(677,-8,o),
(755,11,o),
(819,53,o),
(864,118,o),
(875,163,q),
(715,163,l),
(703,140,o),
(656,123,o),
(632,123,qs),
(587,124,o),
(527,169,o),
(524,216,q),
(874,216,l),
(876,232,o),
(880,262,o),
(880,278,qs),
(880,336,o),
(847,432,o),
(783,501,o),
(691,538,o),
(632,538,qs),
(590,538,o),
(496,508,o),
(461,473,q),
(426,510,o),
(335,538,o),
(288,538,qs),
(243,538,o),
(161,518,o),
(96,475,o),
(52,407,o),
(46,359,q),
(206,359,l),
(209,372,o),
(227,390,o),
(251,401,o),
(278,404,o),
(290,404,qs),
(329,404,o),
(375,362,o),
(375,322,q),
(281,322,ls),
(239,322,o),
(152,310,o),
(81,274,o),
(36,210,o),
(36,158,qs),
(36,113,o),
(72,51,o),
(98,31,qs),
(125,11,o),
(200,-8,o),
(242,-8,qs),
(264,-8,o),
(313,-3,o),
(365,14,o),
(417,44,o),
(442,70,q),
(480,26,o)
);
},
{
closed = 1;
nodes = (
(530,366,o),
(588,407,o),
(630,407,qs),
(669,407,o),
(729,365,o),
(729,322,q),
(526,322,l)
);
},
{
closed = 1;
nodes = (
(359,153,o),
(329,127,o),
(289,114,o),
(267,114,qs),
(254,114,o),
(228,120,o),
(207,132,o),
(194,153,o),
(194,168,qs),
(194,186,o),
(212,205,o),
(239,214,o),
(270,216,o),
(284,216,qs),
(376,216,l),
(376,191,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 14 11 2 1 12 1 6 8 1 6 103 10 1 2 2 4 97 5 1 4 4 49 77 13 1 7 7 0 97 9 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 14 11 2 1 12 1 6 8 1 6 103 10 1 2 2 4 97 5 1 4 4 49 77 0 7 7 0 97 9 1 0 0 47 77 0 13 13 0 97 9 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
61 61 80 78 71 68 61 67 61 67 65 63 59 57 18 34 23 36 36 20 34 41 36 15 8 31 
CALL[ ]	/* CallFunction */";
};
width = 914;
}
);
note = ae;
unicode = 230;
},
{
glyphname = OE;
kernLeft = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(571,668,l),
(554,683,o),
(508,702,o),
(459,713,o),
(411,717,o),
(392,717,qs),
(311,717,o),
(179,664,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,274,o),
(85,141,o),
(177,45,o),
(308,-7,o),
(390,-7,qs),
(409,-7,o),
(460,-3,o),
(511,8,o),
(557,27,o),
(571,42,q),
(571,0,l),
(1091,0,l),
(1091,147,l),
(734,147,l),
(734,278,l),
(1037,278,l),
(1037,423,l),
(734,423,l),
(734,559,l),
(1091,559,l),
(1091,708,l),
(571,708,l)
);
},
{
closed = 1;
nodes = (
(227,476,o),
(275,534,o),
(346,567,o),
(392,567,qs),
(438,567,o),
(508,533,o),
(556,475,o),
(580,397,o),
(580,354,qs),
(580,312,o),
(556,235,o),
(509,177,o),
(440,143,o),
(394,143,qs),
(346,143,o),
(274,175,o),
(226,232,o),
(202,310,o),
(202,356,qs),
(202,399,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
31 1 0 6 11 1 4 3 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
31 1 0 7 11 1 4 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
31 1 9 7 11 1 4 3 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 2 3 1 2 103 9 1 0 0 6 97 10 7 2 6 6 46 77 8 1 3 3 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 9 1 0 0 6 97 0 6 6 46 77 9 1 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 0 2 3 1 2 103 0 9 9 6 97 0 6 6 46 77 0 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 1 0 2 3 1 2 103 0 9 9 6 97 0 6 6 46 77 0 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 95 0 4 4 39 77 8 1 3 3 5 97 0 5 5 47 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 49 47 39 37 0 32 0 32 40 37 17 17 17 17 17 11 8 29 
CALL[ ]	/* CallFunction */";
};
width = 1126;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,22,o),
(487,56,q),
(523,25,o),
(614,-8,o),
(673,-8,qs),
(717,-8,o),
(796,11,o),
(861,53,o),
(907,118,o),
(918,163,q),
(758,163,l),
(745,140,o),
(699,123,o),
(675,123,qs),
(630,124,o),
(572,169,o),
(567,216,q),
(917,216,l),
(919,232,o),
(923,262,o),
(923,278,qs),
(923,336,o),
(889,432,o),
(824,501,o),
(730,538,o),
(671,538,qs),
(620,538,o),
(529,505,o),
(492,470,q),
(454,505,o),
(359,538,o),
(308,538,qs),
(247,538,o),
(146,499,o),
(74,428,o),
(34,327,o),
(34,266,qs),
(34,203,o),
(71,102,o),
(140,31,o),
(240,-8,o),
(303,-8,qs),
(353,-8,o)
);
},
{
closed = 1;
nodes = (
(573,366,o),
(631,407,o),
(673,407,qs),
(712,407,o),
(772,365,o),
(772,322,q),
(569,322,l)
);
},
{
closed = 1;
nodes = (
(375,372,o),
(402,338,o),
(416,292,o),
(416,265,qs),
(416,211,o),
(362,136,o),
(304,136,qs),
(275,136,o),
(232,156,o),
(204,191,o),
(190,238,o),
(190,265,qs),
(190,291,o),
(205,337,o),
(233,372,o),
(276,392,o),
(304,392,qs),
(332,392,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
13 1 7 1 40 1 0 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 3 4 3 5 4 128 12 1 8 0 3 5 8 3 103 13 9 2 7 7 1 97 2 1 1 1 49 77 10 1 4 4 0 97 6 11 2 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 5 3 4 3 5 4 128 12 1 8 0 3 5 8 3 103 0 7 7 1 97 2 1 1 1 49 77 13 1 9 9 1 97 2 1 1 1 49 77 10 1 4 4 0 97 6 11 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 5 3 10 3 5 10 128 12 1 8 0 3 5 8 3 103 0 7 7 1 97 2 1 1 1 49 77 13 1 9 9 1 97 2 1 1 1 49 77 0 10 10 0 97 6 11 2 0 0 47 77 0 4 4 0 97 6 11 2 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
51 50 43 43 1 0 61 59 50 67 51 67 43 49 43 49 47 45 38 36 32 31 29 27 25 24 17 15 11 9 0 42 1 42 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 957;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,463,o),
(436,330,o),
(459,263,q),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(346,950,l),
(183,950,l),
(336,765,l),
(466,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 7 1 4 1 0 4 104 8 1 6 6 5 95 0 5 5 44 77 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 8 1 6 2 5 6 103 0 0 7 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
13 13 5 5 13 16 13 16 15 14 5 12 5 12 17 17 21 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,463,o),
(436,330,o),
(459,263,q),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(412,765,l),
(565,950,l),
(402,950,l),
(282,765,l),
(282,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 7 1 4 1 0 4 104 0 6 6 5 95 0 5 5 44 77 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 6 2 5 6 103 0 0 7 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
5 5 17 16 15 14 5 12 5 12 17 17 21 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,463,o),
(436,330,o),
(459,263,q),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(316,950,l),
(158,765,l),
(304,765,l),
(367,852,l),
(432,765,l),
(578,765,l),
(418,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
15 1 5 7 4 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
6 1 5 7 2 7 5 2 128 0 0 8 1 4 1 0 4 104 0 7 7 44 77 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 7 5 7 133 6 1 5 2 5 133 0 0 8 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
5 5 19 18 17 16 14 13 5 12 5 12 17 17 21 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,463,o),
(436,330,o),
(459,263,q),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(274,780,o),
(275,802,o),
(281,822,o),
(294,836,o),
(305,836,qs),
(317,836,o),
(345,814,o),
(381,789,o),
(423,767,o),
(450,767,qs),
(483,767,o),
(527,793,o),
(554,835,o),
(565,889,o),
(565,918,qs),
(565,923,o),
(565,934,o),
(565,939,q),
(462,939,l),
(463,930,o),
(463,909,o),
(458,891,o),
(445,880,o),
(434,880,qs),
(421,880,o),
(395,900,o),
(364,925,o),
(325,945,o),
(299,945,qs),
(267,945,o),
(220,923,o),
(190,886,o),
(174,835,o),
(173,805,qs),
(173,790,o),
(174,777,o),
(175,772,q),
(276,772,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
7 1 5 0 9 8 5 9 105 0 6 12 10 2 8 2 6 8 106 0 0 11 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 7 5 6 5 7 6 128 0 5 0 9 8 5 9 105 0 6 12 10 2 8 2 6 8 106 0 0 11 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 5 6 5 7 6 128 12 1 10 9 8 9 10 8 128 0 5 0 9 10 5 9 105 0 6 0 8 2 6 8 106 0 0 11 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
13 13 5 5 13 50 13 50 46 44 41 39 32 31 27 25 22 20 5 12 5 12 17 17 21 16 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,463,o),
(436,330,o),
(459,263,q),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(144,894,o),
(144,853,qs),
(144,810,o),
(196,764,o),
(234,764,qs),
(272,764,o),
(324,810,o),
(324,853,qs),
(324,895,o),
(272,941,o),
(234,941,qs),
(196,941,o)
);
},
{
closed = 1;
nodes = (
(412,894,o),
(412,853,qs),
(412,810,o),
(464,764,o),
(502,764,qs),
(540,764,o),
(593,810,o),
(593,853,qs),
(593,895,o),
(540,941,o),
(502,941,qs),
(465,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
4 1 0 2 1 76 11 7 10 3 5 8 1 6 2 5 6 105 0 0 9 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 26 25 14 13 5 5 32 30 25 36 26 36 20 18 13 24 14 24 5 12 5 12 17 17 21 16 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,463,o),
(436,330,o),
(459,263,q),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(293,952,o),
(259,920,o),
(240,877,o),
(240,850,qs),
(240,795,o),
(311,732,o),
(364,732,qs),
(418,732,o),
(489,794,o),
(489,850,qs),
(489,904,o),
(417,969,o),
(364,969,qs),
(338,969,o)
);
},
{
closed = 1;
nodes = (
(405,868,o),
(405,850,qs),
(405,832,o),
(381,811,o),
(364,811,qs),
(346,811,o),
(324,832,o),
(324,850,qs),
(324,867,o),
(347,889,o),
(364,889,qs),
(381,889,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
4 1 0 2 1 76 0 8 0 6 2 8 6 105 0 0 9 1 4 1 0 4 104 11 1 7 7 5 97 10 1 5 5 44 77 0 2 2 38 77 3 1 1 1 39 1 78 28 27 14 13 5 5 34 32 27 38 28 38 20 18 13 26 14 26 5 12 5 12 17 17 21 16 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(318,950,l),
(155,950,l),
(308,765,l),
(438,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 2 3 1 2 103 9 1 7 7 6 95 0 6 6 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 6 9 1 7 5 6 7 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(383,765,l),
(536,950,l),
(373,950,l),
(253,765,l),
(253,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 0 2 3 1 2 103 0 7 7 6 95 0 6 6 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 6 0 7 5 6 7 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 16 15 14 13 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(281,950,l),
(123,765,l),
(269,765,l),
(332,852,l),
(397,765,l),
(543,765,l),
(383,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
7 1 6 8 5 8 6 5 128 0 1 0 2 3 1 2 103 0 8 8 44 77 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 8 6 8 133 7 1 6 5 6 133 0 1 0 2 3 1 2 103 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 18 17 16 15 13 12 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(111,894,o),
(111,853,qs),
(111,810,o),
(163,764,o),
(201,764,qs),
(239,764,o),
(291,810,o),
(291,853,qs),
(291,895,o),
(239,941,o),
(201,941,qs),
(163,941,o)
);
},
{
closed = 1;
nodes = (
(379,894,o),
(379,853,qs),
(379,810,o),
(431,764,o),
(469,764,qs),
(507,764,o),
(560,810,o),
(560,853,qs),
(560,895,o),
(507,941,o),
(469,941,qs),
(432,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
12 8 11 3 6 9 1 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 25 24 13 12 0 0 31 29 24 35 25 35 19 17 12 23 13 23 0 11 0 11 17 17 17 17 17 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(128,950,l),
(-35,950,l),
(118,765,l),
(248,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 95 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 4 1 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(194,765,l),
(347,950,l),
(184,950,l),
(64,765,l),
(64,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 2 95 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(108,950,l),
(-50,765,l),
(96,765,l),
(159,852,l),
(224,765,l),
(370,765,l),
(210,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
3 1 2 4 1 4 2 1 128 0 4 4 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 4 2 4 133 3 1 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(-59,894,o),
(-59,853,qs),
(-59,810,o),
(-7,764,o),
(31,764,qs),
(69,764,o),
(121,810,o),
(121,853,qs),
(121,895,o),
(69,941,o),
(31,941,qs),
(-7,941,o)
);
},
{
closed = 1;
nodes = (
(189,894,o),
(189,853,qs),
(189,810,o),
(241,764,o),
(279,764,qs),
(317,764,o),
(370,810,o),
(370,853,qs),
(370,895,o),
(317,941,o),
(279,941,qs),
(242,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,435,l),
(557,0,l),
(710,0,l),
(710,708,l),
(547,708,l),
(547,270,l),
(230,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(303,780,o),
(304,802,o),
(310,822,o),
(323,836,o),
(334,836,qs),
(346,836,o),
(374,814,o),
(410,789,o),
(452,767,o),
(479,767,qs),
(512,767,o),
(556,793,o),
(583,835,o),
(594,889,o),
(594,918,qs),
(594,923,o),
(594,934,o),
(594,939,q),
(491,939,l),
(492,930,o),
(492,909,o),
(487,891,o),
(474,880,o),
(463,880,qs),
(450,880,o),
(424,900,o),
(393,925,o),
(354,945,o),
(328,945,qs),
(296,945,o),
(249,923,o),
(219,886,o),
(203,835,o),
(202,805,qs),
(202,790,o),
(203,777,o),
(204,772,q),
(305,772,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 1 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 0 5 7 106 10 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 4 5 4 6 5 128 0 4 0 8 7 4 8 105 0 5 11 9 2 7 0 5 7 106 10 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 6 4 5 4 6 5 128 11 1 9 8 7 8 9 7 128 0 4 0 8 9 4 8 105 0 5 0 7 0 5 7 106 10 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
10 10 0 0 10 47 10 47 43 41 38 36 29 28 24 22 19 17 0 9 0 9 18 17 18 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(357,950,l),
(194,950,l),
(347,765,l),
(477,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 5 4 95 0 4 4 44 77 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 7 1 5 0 4 5 103 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
40 40 1 0 40 43 40 43 42 41 36 34 26 24 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(429,765,l),
(582,950,l),
(419,950,l),
(299,765,l),
(299,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 95 0 4 4 44 77 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 0 4 5 103 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 44 43 42 41 36 34 26 24 11 9 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(341,950,l),
(183,765,l),
(329,765,l),
(392,852,l),
(457,765,l),
(603,765,l),
(443,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
42 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
5 1 4 6 0 6 4 0 128 0 6 6 44 77 0 3 3 0 97 7 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 6 4 6 133 5 1 4 0 4 133 0 3 3 0 97 7 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 46 45 44 43 41 40 36 34 26 24 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(302,780,o),
(303,802,o),
(309,822,o),
(322,836,o),
(333,836,qs),
(345,836,o),
(373,814,o),
(409,789,o),
(451,767,o),
(478,767,qs),
(511,767,o),
(555,793,o),
(582,835,o),
(593,889,o),
(593,918,qs),
(593,923,o),
(593,934,o),
(593,939,q),
(490,939,l),
(491,930,o),
(491,909,o),
(486,891,o),
(473,880,o),
(462,880,qs),
(449,880,o),
(423,900,o),
(392,925,o),
(353,945,o),
(327,945,qs),
(295,945,o),
(248,923,o),
(218,886,o),
(202,835,o),
(201,805,qs),
(201,790,o),
(202,777,o),
(203,772,q),
(304,772,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 0 5 7 106 0 3 3 0 97 10 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 6 4 5 4 6 5 128 0 4 0 8 7 4 8 105 0 5 11 9 2 7 0 5 7 106 0 3 3 0 97 10 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 4 5 4 6 5 128 11 1 9 8 7 8 9 7 128 0 4 0 8 9 4 8 105 0 5 0 7 0 5 7 106 0 3 3 0 97 10 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
40 40 1 0 40 77 40 77 73 71 68 66 59 58 54 52 49 47 36 34 26 24 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(168,894,o),
(168,853,qs),
(168,810,o),
(220,764,o),
(258,764,qs),
(296,764,o),
(348,810,o),
(348,853,qs),
(348,895,o),
(296,941,o),
(258,941,qs),
(220,941,o)
);
},
{
closed = 1;
nodes = (
(436,894,o),
(436,853,qs),
(436,810,o),
(488,764,o),
(526,764,qs),
(564,764,o),
(617,810,o),
(617,853,qs),
(617,895,o),
(564,941,o),
(526,941,qs),
(489,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
10 6 9 3 4 7 1 5 0 4 5 105 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 53 52 41 40 1 0 59 57 52 63 53 63 47 45 40 51 41 51 36 34 26 24 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(344,950,l),
(181,950,l),
(334,765,l),
(464,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 5 4 95 0 4 4 44 77 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 7 1 5 1 4 5 103 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
26 26 1 0 26 29 26 29 28 27 20 19 14 12 7 6 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(426,765,l),
(579,950,l),
(416,950,l),
(296,765,l),
(296,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 4 95 0 4 4 44 77 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 5 1 4 5 103 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 30 29 28 27 20 19 14 12 7 6 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(327,950,l),
(169,765,l),
(315,765,l),
(378,852,l),
(443,765,l),
(589,765,l),
(429,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
28 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
5 1 4 6 1 6 4 1 128 0 6 6 44 77 3 1 1 1 38 77 0 2 2 0 98 7 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 6 4 6 133 5 1 4 1 4 133 3 1 1 1 38 77 0 2 2 0 98 7 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 32 31 30 29 27 26 20 19 14 12 7 6 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(154,894,o),
(154,853,qs),
(154,810,o),
(206,764,o),
(244,764,qs),
(282,764,o),
(334,810,o),
(334,853,qs),
(334,895,o),
(282,941,o),
(244,941,qs),
(206,941,o)
);
},
{
closed = 1;
nodes = (
(422,894,o),
(422,853,qs),
(422,810,o),
(474,764,o),
(512,764,qs),
(550,764,o),
(603,810,o),
(603,853,qs),
(603,895,o),
(550,941,o),
(512,941,qs),
(475,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
10 6 9 3 4 7 1 5 1 4 5 105 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 47 0 78 39 38 27 26 1 0 45 43 38 49 39 49 33 31 26 37 27 37 20 19 14 12 7 6 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,708,l),
(272,263,l),
(272,0,l),
(435,0,l),
(435,264,l),
(434,264,l),
(435,264,l),
(703,708,l),
(519,708,l),
(477,634,o),
(396,488,o),
(355,414,q),
(189,708,l)
);
},
{
closed = 1;
nodes = (
(409,765,l),
(562,950,l),
(399,950,l),
(279,765,l),
(279,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
10 5 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 4 4 3 95 0 3 3 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 4 0 3 4 103 2 1 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 18 20 19 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = agrave;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(359,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(112,290,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(261,769,l),
(98,769,l),
(251,584,l),
(381,584,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 4 3 4 5 3 128 0 8 11 1 9 6 8 9 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 10 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 128 0 8 11 1 9 6 8 9 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 10 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
48 48 12 12 48 51 48 51 50 49 12 47 12 47 36 18 34 41 40 36 32 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(359,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(112,290,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(328,584,l),
(481,769,l),
(318,769,l),
(198,584,l),
(198,584,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 3 4 5 3 128 0 8 0 9 6 8 9 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 10 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 4 3 4 5 3 128 0 8 0 9 6 8 9 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 10 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 52 51 50 49 12 47 12 47 36 18 34 41 40 36 32 11 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = atilde;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(359,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(112,290,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(204,599,o),
(205,621,o),
(211,641,o),
(224,655,o),
(235,655,qs),
(247,655,o),
(275,633,o),
(311,608,o),
(353,586,o),
(380,586,qs),
(413,586,o),
(457,612,o),
(484,654,o),
(495,708,o),
(495,737,qs),
(495,742,o),
(495,753,o),
(495,758,q),
(392,758,l),
(393,749,o),
(393,728,o),
(388,710,o),
(375,699,o),
(364,699,qs),
(351,699,o),
(325,719,o),
(294,744,o),
(255,764,o),
(229,764,qs),
(197,764,o),
(150,742,o),
(120,705,o),
(104,654,o),
(103,624,qs),
(103,609,o),
(104,596,o),
(105,591,q),
(206,591,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 12 12 8 97 10 1 8 8 48 77 15 13 2 11 11 9 97 0 9 9 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 14 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 5 4 3 4 5 3 128 10 1 8 0 12 11 8 12 105 0 3 0 0 1 3 0 103 15 13 2 11 11 9 97 0 9 9 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 14 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 5 4 3 4 5 3 128 10 1 8 0 12 11 8 12 105 0 3 0 0 1 3 0 103 15 13 2 11 11 9 97 0 9 9 38 77 0 4 4 6 97 0 6 6 49 77 14 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
0 10 8 9 8 10 9 128 0 5 4 3 4 5 3 128 0 8 0 12 11 8 12 105 0 3 0 0 1 3 0 103 15 13 2 11 11 9 97 0 9 9 38 77 0 4 4 6 97 0 6 6 49 77 14 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 78 values pushed */
0 10 8 9 8 10 9 128 15 1 13 12 11 12 13 11 128 0 5 4 3 4 5 3 128 0 8 0 12 13 8 12 105 0 3 0 0 1 3 0 103 0 11 11 9 97 0 9 9 38 77 0 4 4 6 97 0 6 6 49 77 14 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
48 48 12 12 48 85 48 85 81 79 76 74 67 66 62 60 57 55 12 47 12 47 36 18 34 41 40 36 32 16 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = acircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(359,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(112,290,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(244,769,l),
(86,584,l),
(232,584,l),
(295,671,l),
(360,584,l),
(506,584,l),
(346,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
50 1 8 10 13 1 2 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
50 1 8 10 13 1 7 1 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 10 8 10 133 9 1 8 6 8 133 0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 11 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 10 8 10 133 9 1 8 6 8 133 0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 11 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
12 12 54 53 52 51 49 48 12 47 12 47 36 18 34 41 40 36 32 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(359,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(112,290,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(72,713,o),
(72,672,qs),
(72,629,o),
(124,583,o),
(162,583,qs),
(200,583,o),
(252,629,o),
(252,672,qs),
(252,714,o),
(200,760,o),
(162,760,qs),
(124,760,o)
);
},
{
closed = 1;
nodes = (
(340,713,o),
(340,672,qs),
(340,629,o),
(392,583,o),
(430,583,qs),
(468,583,o),
(521,629,o),
(521,672,qs),
(521,714,o),
(468,760,o),
(430,760,qs),
(393,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 11 1 9 9 8 97 14 10 13 3 8 8 48 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 12 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 5 4 3 4 5 3 128 14 10 13 3 8 11 1 9 6 8 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 12 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 5 4 3 4 5 3 128 14 10 13 3 8 11 1 9 6 8 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 12 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
61 60 49 48 12 12 67 65 60 71 61 71 55 53 48 59 49 59 12 47 12 47 36 18 34 41 40 36 32 15 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(359,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(112,290,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(225,802,o),
(191,770,o),
(172,727,o),
(172,700,qs),
(172,645,o),
(243,582,o),
(296,582,qs),
(350,582,o),
(421,644,o),
(421,700,qs),
(421,754,o),
(349,819,o),
(296,819,qs),
(270,819,o)
);
},
{
closed = 1;
nodes = (
(337,718,o),
(337,700,qs),
(337,682,o),
(313,661,o),
(296,661,qs),
(278,661,o),
(256,682,o),
(256,700,qs),
(256,717,o),
(279,739,o),
(296,739,qs),
(313,739,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 5 4 3 4 5 3 128 13 1 8 14 1 10 11 8 10 105 0 11 0 9 6 11 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 12 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 5 4 3 4 5 3 128 13 1 8 14 1 10 11 8 10 105 0 11 0 9 6 11 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 12 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
63 62 49 48 12 12 69 67 62 73 63 73 55 53 48 61 49 61 12 47 12 47 36 18 34 41 40 36 32 15 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = aring;
unicode = 229;
},
{
glyphname = egrave;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(277,769,l),
(114,769,l),
(267,584,l),
(397,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
0 1 4 0 4 1 0 128 0 7 11 1 8 3 7 8 103 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 36 36 29 29 1 0 36 39 36 39 38 37 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(337,584,l),
(490,769,l),
(327,769,l),
(207,584,l),
(207,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 1 4 0 4 1 0 128 0 7 0 8 3 7 8 103 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 29 29 1 0 40 39 38 37 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(251,769,l),
(93,584,l),
(239,584,l),
(302,671,l),
(367,584,l),
(513,584,l),
(353,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
38 1 7 9 1 76 0 9 7 9 133 8 1 7 3 7 133 0 1 4 0 4 1 0 128 11 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 10 1 0 0 2 97 0 2 2 47 2 78 29 29 1 0 42 41 40 39 37 36 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(73,713,o),
(73,672,qs),
(73,629,o),
(125,583,o),
(163,583,qs),
(201,583,o),
(253,629,o),
(253,672,qs),
(253,714,o),
(201,760,o),
(163,760,qs),
(125,760,o)
);
},
{
closed = 1;
nodes = (
(341,713,o),
(341,672,qs),
(341,629,o),
(393,583,o),
(431,583,qs),
(469,583,o),
(522,629,o),
(522,672,qs),
(522,714,o),
(469,760,o),
(431,760,qs),
(394,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 1 4 0 4 1 0 128 12 1 6 0 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 48 77 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 1 4 0 4 1 0 128 14 9 13 3 7 10 1 8 3 7 8 105 12 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 41 values pushed */
49 48 37 36 29 29 1 0 55 53 48 59 49 59 43 41 36 47 37 47 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
},
{
closed = 1;
nodes = (
(107,769,l),
(-56,769,l),
(97,584,l),
(227,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 103 0 1 1 41 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
},
{
closed = 1;
nodes = (
(172,584,l),
(325,769,l),
(162,769,l),
(42,584,l),
(42,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 3 1 2 3 103 0 1 1 41 77 0 0 0 39 0 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
},
{
closed = 1;
nodes = (
(81,769,l),
(-77,584,l),
(69,584,l),
(132,671,l),
(197,584,l),
(343,584,l),
(183,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 1 2 4 1 76 0 4 2 4 133 3 1 2 1 2 133 0 1 1 41 77 0 0 0 39 0 78 17 18 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
},
{
closed = 1;
nodes = (
(-71,713,o),
(-71,672,qs),
(-71,629,o),
(-19,583,o),
(19,583,qs),
(57,583,o),
(109,629,o),
(109,672,qs),
(109,714,o),
(57,760,o),
(19,760,qs),
(-19,760,o)
);
},
{
closed = 1;
nodes = (
(157,713,o),
(157,672,qs),
(157,629,o),
(209,583,o),
(247,583,qs),
(285,583,o),
(338,629,o),
(338,672,qs),
(338,714,o),
(285,760,o),
(247,760,qs),
(210,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,266,ls),
(212,288,o),
(221,332,o),
(243,369,o),
(285,394,o),
(313,394,qs),
(341,394,o),
(379,375,o),
(401,341,o),
(409,299,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,347,o),
(545,441,o),
(516,476,qs),
(490,505,o),
(415,538,o),
(365,538,qs),
(327,537,o),
(245,507,o),
(210,469,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(225,599,o),
(226,621,o),
(232,641,o),
(245,655,o),
(256,655,qs),
(268,655,o),
(296,633,o),
(332,608,o),
(374,586,o),
(401,586,qs),
(434,586,o),
(478,612,o),
(505,654,o),
(516,708,o),
(516,737,qs),
(516,742,o),
(516,753,o),
(516,758,q),
(413,758,l),
(414,749,o),
(414,728,o),
(409,710,o),
(396,699,o),
(385,699,qs),
(372,699,o),
(346,719,o),
(315,744,o),
(276,764,o),
(250,764,qs),
(218,764,o),
(171,742,o),
(141,705,o),
(125,654,o),
(124,624,qs),
(124,609,o),
(125,596,o),
(126,591,q),
(227,591,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 9 9 5 97 7 1 5 5 48 77 11 10 2 8 8 6 97 0 6 6 38 77 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 5 0 9 8 5 9 105 11 10 2 8 8 6 97 0 6 6 38 77 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
7 1 5 0 9 8 5 9 105 11 10 2 8 8 6 97 0 6 6 38 77 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 5 6 5 7 6 128 0 5 0 9 8 5 9 105 11 10 2 8 8 6 97 0 6 6 38 77 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 5 6 5 7 6 128 11 1 10 9 8 9 10 8 128 0 5 0 9 10 5 9 105 0 8 8 6 97 0 6 6 38 77 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
27 27 27 64 27 64 60 58 39 20 35 40 17 21 37 22 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(283,769,l),
(120,769,l),
(273,584,l),
(403,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 4 8 1 5 3 4 5 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 47 2 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(350,584,l),
(503,769,l),
(340,769,l),
(220,584,l),
(220,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 4 0 5 3 4 5 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 47 2 78 21 20 1 0 44 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(258,769,l),
(100,584,l),
(246,584,l),
(309,671,l),
(374,584,l),
(520,584,l),
(360,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
42 1 4 6 1 76 0 6 4 6 133 5 1 4 3 4 133 7 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 8 1 2 2 47 2 78 21 20 1 0 46 45 44 43 41 40 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(215,599,o),
(216,621,o),
(222,641,o),
(235,655,o),
(246,655,qs),
(258,655,o),
(286,633,o),
(322,608,o),
(364,586,o),
(391,586,qs),
(424,586,o),
(468,612,o),
(495,654,o),
(506,708,o),
(506,737,qs),
(506,742,o),
(506,753,o),
(506,758,q),
(403,758,l),
(404,749,o),
(404,728,o),
(399,710,o),
(386,699,o),
(375,699,qs),
(362,699,o),
(336,719,o),
(305,744,o),
(266,764,o),
(240,764,qs),
(208,764,o),
(161,742,o),
(131,705,o),
(115,654,o),
(114,624,qs),
(114,609,o),
(115,596,o),
(116,591,q),
(217,591,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 8 8 4 97 6 1 4 4 48 77 12 9 2 7 7 5 97 0 5 5 38 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
6 1 4 0 8 7 4 8 105 12 9 2 7 7 5 97 0 5 5 38 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 6 4 5 4 6 5 128 0 4 0 8 7 4 8 105 12 9 2 7 7 5 97 0 5 5 38 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 6 4 5 4 6 5 128 12 1 9 8 7 8 9 7 128 0 4 0 8 9 4 8 105 0 7 7 5 97 0 5 5 38 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
40 40 21 20 1 0 40 77 40 77 73 71 68 66 59 58 54 52 49 47 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(82,713,o),
(82,672,qs),
(82,629,o),
(134,583,o),
(172,583,qs),
(210,583,o),
(262,629,o),
(262,672,qs),
(262,714,o),
(210,760,o),
(172,760,qs),
(134,760,o)
);
},
{
closed = 1;
nodes = (
(350,713,o),
(350,672,qs),
(350,629,o),
(402,583,o),
(440,583,qs),
(478,583,o),
(531,629,o),
(531,672,qs),
(531,714,o),
(478,760,o),
(440,760,qs),
(403,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 5 5 4 97 11 6 10 3 4 4 48 77 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
11 6 10 3 4 7 1 5 3 4 5 105 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
53 52 41 40 21 20 1 0 59 57 52 63 53 63 47 45 40 51 41 51 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(255,769,l),
(92,769,l),
(245,584,l),
(375,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 4 7 1 5 1 4 5 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 24 24 1 0 24 27 24 27 26 25 20 19 14 12 7 6 0 23 1 23 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(347,584,l),
(500,769,l),
(337,769,l),
(217,584,l),
(217,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 5 1 4 5 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 1 0 28 27 26 25 20 19 14 12 7 6 0 23 1 23 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(246,769,l),
(88,584,l),
(234,584,l),
(297,671,l),
(362,584,l),
(508,584,l),
(348,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
26 1 4 6 1 76 0 6 4 6 133 5 1 4 1 4 133 3 1 1 1 41 77 7 1 0 0 2 98 0 2 2 47 2 78 1 0 30 29 28 27 25 24 20 19 14 12 7 6 0 23 1 23 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(75,713,o),
(75,672,qs),
(75,629,o),
(127,583,o),
(165,583,qs),
(203,583,o),
(255,629,o),
(255,672,qs),
(255,714,o),
(203,760,o),
(165,760,qs),
(127,760,o)
);
},
{
closed = 1;
nodes = (
(343,713,o),
(343,672,qs),
(343,629,o),
(395,583,o),
(433,583,qs),
(471,583,o),
(524,629,o),
(524,672,qs),
(524,714,o),
(471,760,o),
(433,760,qs),
(396,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 5 4 97 10 6 9 3 4 4 48 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
10 6 9 3 4 7 1 5 1 4 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
37 36 25 24 1 0 43 41 36 47 37 47 31 29 24 35 25 35 20 19 14 12 7 6 0 23 1 23 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,-83,o),
(104,-64,q),
(91,-96,o),
(67,-163,o),
(55,-196,q),
(106,-229,o),
(221,-261,o),
(281,-261,qs),
(356,-261,o),
(476,-215,o),
(516,-167,qs),
(538,-139,o),
(564,-74,o),
(576,-2,o),
(577,74,o),
(577,110,qs),
(577,527,l),
(419,527,l),
(419,263,ls),
(419,242,o),
(411,197,o),
(388,160,o),
(348,134,o),
(317,134,qs),
(286,134,o),
(246,157,o),
(225,193,o),
(217,238,o),
(217,261,qs),
(217,527,l),
(60,527,l),
(60,235,ls),
(60,173,o),
(84,80,o),
(113,48,qs),
(138,22,o),
(215,-8,o),
(267,-8,qs),
(285,-8,o),
(326,-2,o),
(368,11,o),
(405,33,o),
(419,51,q),
(420,3,o),
(395,-60,o),
(352,-97,o),
(298,-112,o),
(269,-112,qs),
(219,-112,o)
);
},
{
closed = 1;
nodes = (
(374,584,l),
(527,769,l),
(364,769,l),
(244,584,l),
(244,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
5 1 1 3 46 1 0 1 43 1 5 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 6 0 7 2 6 7 103 4 1 2 2 41 77 0 1 1 47 77 8 1 0 0 5 98 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 3 2 1 2 3 1 128 0 6 0 7 2 6 7 103 8 1 0 0 5 0 5 102 4 1 2 2 41 77 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 53 52 51 50 41 39 31 30 25 23 18 17 11 9 0 48 1 48 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,-83,o),
(104,-64,q),
(91,-96,o),
(67,-163,o),
(55,-196,q),
(106,-229,o),
(221,-261,o),
(281,-261,qs),
(356,-261,o),
(476,-215,o),
(516,-167,qs),
(538,-139,o),
(564,-74,o),
(576,-2,o),
(577,74,o),
(577,110,qs),
(577,527,l),
(419,527,l),
(419,263,ls),
(419,242,o),
(411,197,o),
(388,160,o),
(348,134,o),
(317,134,qs),
(286,134,o),
(246,157,o),
(225,193,o),
(217,238,o),
(217,261,qs),
(217,527,l),
(60,527,l),
(60,235,ls),
(60,173,o),
(84,80,o),
(113,48,qs),
(138,22,o),
(215,-8,o),
(267,-8,qs),
(285,-8,o),
(326,-2,o),
(368,11,o),
(405,33,o),
(419,51,q),
(420,3,o),
(395,-60,o),
(352,-97,o),
(298,-112,o),
(269,-112,qs),
(219,-112,o)
);
},
{
closed = 1;
nodes = (
(94,713,o),
(94,672,qs),
(94,629,o),
(146,583,o),
(184,583,qs),
(222,583,o),
(274,629,o),
(274,672,qs),
(274,714,o),
(222,760,o),
(184,760,qs),
(146,760,o)
);
},
{
closed = 1;
nodes = (
(362,713,o),
(362,672,qs),
(362,629,o),
(414,583,o),
(452,583,qs),
(490,583,o),
(543,629,o),
(543,672,qs),
(543,714,o),
(490,760,o),
(452,760,qs),
(415,760,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
5 1 1 3 46 1 0 1 43 1 5 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 3 2 1 2 3 1 128 9 1 7 7 6 97 12 8 11 3 6 6 48 77 4 1 2 2 41 77 0 1 1 47 77 10 1 0 0 5 98 0 5 5 51 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 12 8 11 3 6 9 1 7 2 6 7 105 4 1 2 2 41 77 0 1 1 47 77 10 1 0 0 5 98 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 1 2 3 1 128 12 8 11 3 6 9 1 7 2 6 7 105 10 1 0 0 5 0 5 102 4 1 2 2 41 77 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
62 61 50 49 1 0 68 66 61 72 62 72 56 54 49 60 50 60 41 39 31 30 25 23 18 17 11 9 0 48 1 48 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(347,0,ls),
(521,0,o),
(702,179,o),
(702,354,qs),
(702,439,o),
(653,571,o),
(561,661,o),
(427,708,o),
(343,708,qs),
(74,708,l),
(74,420,l),
(-9,420,l),
(-9,287,l),
(74,287,l)
);
},
{
closed = 1;
nodes = (
(364,420,l),
(237,420,l),
(237,559,l),
(341,559,ls),
(443,559,o),
(536,452,o),
(536,353,qs),
(536,305,o),
(515,229,o),
(470,176,o),
(399,147,o),
(349,147,qs),
(237,147,l),
(237,287,l),
(364,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
6 1 0 9 7 8 3 3 4 0 3 103 0 5 5 1 95 0 1 1 38 77 0 4 4 2 95 0 2 2 39 2 78 15 15 0 0 15 29 15 29 28 27 26 24 18 16 0 14 0 14 38 33 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,263,l),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(182,801,l),
(559,801,l),
(559,934,l),
(182,934,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
2 1 0 2 1 76 8 1 6 0 5 2 6 5 103 0 0 7 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 11 11 3 3 11 14 11 14 13 12 3 10 3 10 17 17 19 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(358,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(114,291,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(97,620,l),
(474,620,l),
(474,753,l),
(97,753,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 4 3 4 5 3 128 11 1 9 0 8 6 9 8 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 10 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 128 11 1 9 0 8 6 9 8 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 10 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
48 48 12 12 48 51 48 51 50 49 12 47 12 47 36 18 34 41 40 36 32 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,263,l),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(575,0,l),
(557,-12,o),
(543,-31,qs),
(520,-62,o),
(520,-100,qs),
(520,-128,o),
(540,-171,o),
(575,-200,o),
(620,-215,o),
(646,-215,qs),
(668,-216,o),
(709,-208,o),
(728,-197,q),
(713,-109,l),
(692,-118,o),
(672,-118,qs),
(651,-118,o),
(622,-91,o),
(623,-68,qs),
(624,-42,o),
(644,-24,qs),
(661,-8,o),
(680,0,q),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
2 1 0 2 18 1 4 1 19 1 5 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 8 1 7 1 0 7 104 0 2 2 38 77 6 3 2 1 1 39 77 0 4 4 5 97 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 8 1 7 1 0 7 104 0 4 0 5 4 5 101 0 2 2 38 77 6 3 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
3 3 3 33 3 33 24 36 38 17 17 19 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(384,-12,o),
(370,-31,qs),
(347,-62,o),
(347,-100,qs),
(347,-128,o),
(367,-171,o),
(402,-200,o),
(447,-215,o),
(473,-215,qs),
(495,-216,o),
(536,-208,o),
(555,-197,q),
(540,-109,l),
(519,-118,o),
(499,-118,qs),
(478,-118,o),
(449,-91,o),
(450,-68,qs),
(451,-42,o),
(471,-24,qs),
(488,-8,o),
(507,0,q),
(527,0,l),
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(358,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(114,291,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(402,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
13 1 2 1 57 1 8 2 58 1 9 8 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
13 1 7 1 57 1 8 2 58 1 9 8 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 95 11 10 7 3 2 2 39 77 0 8 8 9 97 0 9 9 43 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 8 0 9 8 9 101 0 4 4 6 97 0 6 6 49 77 0 1 1 2 95 11 10 7 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 8 0 9 8 9 101 0 4 4 6 97 0 6 6 49 77 11 10 2 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 12 70 12 70 62 60 38 21 36 18 34 41 40 36 32 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,473,o),
(266,532,o),
(334,567,o),
(383,567,qs),
(445,567,o),
(519,511,o),
(531,461,q),
(686,461,l),
(680,527,o),
(628,623,o),
(547,686,o),
(442,717,o),
(382,717,qs),
(301,717,o),
(172,664,o),
(83,568,o),
(35,435,o),
(35,355,qs),
(35,273,o),
(81,140,o),
(170,45,o),
(298,-7,o),
(381,-7,qs),
(439,-7,o),
(547,25,o),
(631,89,o),
(685,184,o),
(690,247,q),
(533,247,l),
(522,197,o),
(445,143,o),
(383,143,qs),
(335,143,o),
(266,180,o),
(223,240,o),
(203,316,o),
(203,356,qs),
(203,397,o)
);
},
{
closed = 1;
nodes = (
(418,765,l),
(571,950,l),
(408,950,l),
(288,765,l),
(288,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 7 6 95 0 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 6 0 7 3 6 7 103 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 21 34 20 40 36 18 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,155,o),
(203,190,o),
(192,235,o),
(192,262,qs),
(192,286,o),
(202,333,o),
(226,370,o),
(268,393,o),
(298,393,qs),
(333,393,o),
(377,360,o),
(383,333,q),
(542,333,l),
(537,384,o),
(498,461,o),
(435,512,o),
(351,538,o),
(303,538,qs),
(240,538,o),
(141,500,o),
(72,429,o),
(34,327,o),
(34,264,qs),
(34,134,o),
(171,-8,o),
(299,-8,qs),
(345,-8,o),
(431,16,o),
(498,66,o),
(540,142,o),
(545,195,q),
(383,195,l),
(378,169,o),
(334,134,o),
(298,134,qs),
(269,134,o)
);
},
{
closed = 1;
nodes = (
(339,584,l),
(492,769,l),
(329,769,l),
(209,584,l),
(209,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 6 0 7 3 6 7 103 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 47 2 78 1 0 40 39 38 37 27 25 23 22 18 16 10 8 4 3 0 35 1 35 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,473,o),
(266,532,o),
(334,567,o),
(383,567,qs),
(445,567,o),
(519,511,o),
(531,461,q),
(686,461,l),
(680,527,o),
(628,623,o),
(547,686,o),
(442,717,o),
(382,717,qs),
(301,717,o),
(172,664,o),
(83,568,o),
(35,435,o),
(35,355,qs),
(35,273,o),
(81,140,o),
(170,45,o),
(298,-7,o),
(381,-7,qs),
(439,-7,o),
(547,25,o),
(631,89,o),
(685,184,o),
(690,247,q),
(533,247,l),
(522,197,o),
(445,143,o),
(383,143,qs),
(335,143,o),
(266,180,o),
(223,240,o),
(203,316,o),
(203,356,qs),
(203,397,o)
);
},
{
closed = 1;
nodes = (
(328,950,l),
(170,765,l),
(316,765,l),
(379,852,l),
(444,765,l),
(590,765,l),
(430,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
7 1 6 8 3 8 6 3 128 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 8 8 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 6 8 133 7 1 6 3 6 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 20 34 20 40 36 18 36 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,155,o),
(203,190,o),
(192,235,o),
(192,262,qs),
(192,286,o),
(202,333,o),
(226,370,o),
(268,393,o),
(298,393,qs),
(333,393,o),
(377,360,o),
(383,333,q),
(542,333,l),
(537,384,o),
(498,461,o),
(435,512,o),
(351,538,o),
(303,538,qs),
(240,538,o),
(141,500,o),
(72,429,o),
(34,327,o),
(34,264,qs),
(34,134,o),
(171,-8,o),
(299,-8,qs),
(345,-8,o),
(431,16,o),
(498,66,o),
(540,142,o),
(545,195,q),
(383,195,l),
(378,169,o),
(334,134,o),
(298,134,qs),
(269,134,o)
);
},
{
closed = 1;
nodes = (
(245,769,l),
(87,584,l),
(233,584,l),
(296,671,l),
(361,584,l),
(507,584,l),
(347,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
38 1 6 8 1 76 0 8 6 8 133 7 1 6 3 6 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 1 0 42 41 40 39 37 36 27 25 23 22 18 16 10 8 4 3 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,473,o),
(266,532,o),
(334,567,o),
(383,567,qs),
(445,567,o),
(519,511,o),
(531,461,q),
(686,461,l),
(680,527,o),
(628,623,o),
(547,686,o),
(442,717,o),
(382,717,qs),
(301,717,o),
(172,664,o),
(83,568,o),
(35,435,o),
(35,355,qs),
(35,273,o),
(81,140,o),
(170,45,o),
(298,-7,o),
(381,-7,qs),
(439,-7,o),
(547,25,o),
(631,89,o),
(685,184,o),
(690,247,q),
(533,247,l),
(522,197,o),
(445,143,o),
(383,143,qs),
(335,143,o),
(266,180,o),
(223,240,o),
(203,316,o),
(203,356,qs),
(203,397,o)
);
},
{
closed = 1;
nodes = (
(285,899,o),
(285,857,qs),
(285,815,o),
(337,764,o),
(379,764,qs),
(421,764,o),
(474,814,o),
(474,857,qs),
(474,899,o),
(421,950,o),
(379,950,qs),
(338,950,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 7 6 97 8 1 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 8 1 6 0 7 3 6 7 105 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
39 38 45 43 38 49 39 49 34 20 40 36 18 36 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,155,o),
(203,190,o),
(192,235,o),
(192,262,qs),
(192,286,o),
(202,333,o),
(226,370,o),
(268,393,o),
(298,393,qs),
(333,393,o),
(377,360,o),
(383,333,q),
(542,333,l),
(537,384,o),
(498,461,o),
(435,512,o),
(351,538,o),
(303,538,qs),
(240,538,o),
(141,500,o),
(72,429,o),
(34,327,o),
(34,264,qs),
(34,134,o),
(171,-8,o),
(299,-8,qs),
(345,-8,o),
(431,16,o),
(498,66,o),
(540,142,o),
(545,195,q),
(383,195,l),
(378,169,o),
(334,134,o),
(298,134,qs),
(269,134,o)
);
},
{
closed = 1;
nodes = (
(204,718,o),
(204,676,qs),
(204,634,o),
(256,583,o),
(298,583,qs),
(340,583,o),
(393,633,o),
(393,676,qs),
(393,718,o),
(340,769,o),
(298,769,qs),
(257,769,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 7 6 97 9 1 6 6 48 77 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 9 1 6 0 7 3 6 7 105 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
37 36 1 0 43 41 36 47 37 47 27 25 23 22 18 16 10 8 4 3 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,473,o),
(266,532,o),
(334,567,o),
(383,567,qs),
(445,567,o),
(519,511,o),
(531,461,q),
(686,461,l),
(680,527,o),
(628,623,o),
(547,686,o),
(442,717,o),
(382,717,qs),
(301,717,o),
(172,664,o),
(83,568,o),
(35,435,o),
(35,355,qs),
(35,273,o),
(81,140,o),
(170,45,o),
(298,-7,o),
(381,-7,qs),
(439,-7,o),
(547,25,o),
(631,89,o),
(685,184,o),
(690,247,q),
(533,247,l),
(522,197,o),
(445,143,o),
(383,143,qs),
(335,143,o),
(266,180,o),
(223,240,o),
(203,316,o),
(203,356,qs),
(203,397,o)
);
},
{
closed = 1;
nodes = (
(585,950,l),
(439,950,l),
(376,863,l),
(311,950,l),
(165,950,l),
(324,765,l),
(427,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
41 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 8 6 3 6 8 3 128 0 4 5 1 5 4 114 0 1 0 5 1 0 126 7 1 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 98 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
9 1 8 6 3 6 8 3 128 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 7 1 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 98 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
7 1 6 8 6 133 9 1 8 3 8 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
38 38 38 44 38 44 18 21 34 20 40 36 18 36 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,155,o),
(203,190,o),
(192,235,o),
(192,262,qs),
(192,286,o),
(202,333,o),
(226,370,o),
(268,393,o),
(298,393,qs),
(333,393,o),
(377,360,o),
(383,333,q),
(542,333,l),
(537,384,o),
(498,461,o),
(435,512,o),
(351,538,o),
(303,538,qs),
(240,538,o),
(141,500,o),
(72,429,o),
(34,327,o),
(34,264,qs),
(34,134,o),
(171,-8,o),
(299,-8,qs),
(345,-8,o),
(431,16,o),
(498,66,o),
(540,142,o),
(545,195,q),
(383,195,l),
(378,169,o),
(334,134,o),
(298,134,qs),
(269,134,o)
);
},
{
closed = 1;
nodes = (
(507,769,l),
(361,769,l),
(298,682,l),
(233,769,l),
(87,769,l),
(246,584,l),
(349,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
39 1 8 6 1 76 10 1 8 6 3 6 8 3 128 0 1 4 0 4 1 0 128 7 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 98 0 2 2 47 2 78 36 36 1 0 36 42 36 42 41 40 38 37 27 25 23 22 18 16 10 8 4 3 0 35 1 35 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(519,0,o),
(702,179,o),
(702,354,qs),
(702,441,o),
(652,573,o),
(559,663,o),
(426,708,o),
(343,708,qs),
(74,708,l),
(74,0,l),
(347,0,ls)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(341,559,ls),
(441,559,o),
(536,455,o),
(536,353,qs),
(536,306,o),
(516,230,o),
(471,176,o),
(400,147,o),
(349,147,qs),
(237,147,l)
);
},
{
closed = 1;
nodes = (
(561,950,l),
(415,950,l),
(352,863,l),
(287,950,l),
(141,950,l),
(300,765,l),
(403,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 6 4 0 4 6 0 128 5 1 4 4 44 77 0 3 3 0 95 0 0 0 38 77 8 1 2 2 1 95 7 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
5 1 4 6 4 133 9 1 6 0 6 133 0 3 3 0 95 0 0 0 38 77 8 1 2 2 1 95 7 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
22 22 12 11 0 0 22 28 22 28 27 26 24 23 20 18 11 21 12 21 0 10 0 9 33 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(144,801,l),
(521,801,l),
(521,934,l),
(144,934,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
9 1 7 0 6 5 7 6 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(110,620,l),
(487,620,l),
(487,753,l),
(110,753,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
0 1 4 0 4 1 0 128 11 1 8 0 7 3 8 7 103 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 36 36 29 29 1 0 36 39 36 39 38 37 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(143,849,o),
(249,764,o),
(337,764,qs),
(425,764,o),
(531,849,o),
(532,941,q),
(406,941,l),
(405,907,o),
(372,871,o),
(337,871,qs),
(302,871,o),
(269,907,o),
(268,941,q),
(142,941,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
11 9 2 7 6 6 7 112 0 6 0 8 5 6 8 106 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
11 9 2 7 6 7 133 0 6 0 8 5 6 8 106 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
12 12 0 0 12 25 12 25 23 21 19 18 16 14 0 11 0 11 17 17 17 17 17 12 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(103,668,o),
(209,583,o),
(297,583,qs),
(385,583,o),
(491,668,o),
(492,760,q),
(366,760,l),
(365,726,o),
(332,690,o),
(297,690,qs),
(262,690,o),
(229,726,o),
(228,760,q),
(102,760,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
13 10 2 8 7 7 8 112 0 1 4 0 4 1 0 128 12 1 6 0 4 1 6 4 103 0 9 9 7 97 0 7 7 38 77 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
13 10 2 8 7 8 133 0 1 4 0 4 1 0 128 12 1 6 0 4 1 6 4 103 0 9 9 7 97 0 7 7 38 77 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
13 10 2 8 7 8 133 0 1 4 0 4 1 0 128 0 7 0 9 3 7 9 106 12 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
36 36 29 29 1 0 36 49 36 49 47 45 43 42 40 38 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(245,899,o),
(245,857,qs),
(245,815,o),
(297,764,o),
(339,764,qs),
(381,764,o),
(434,814,o),
(434,857,qs),
(434,899,o),
(381,950,o),
(339,950,qs),
(298,950,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 2 3 1 2 103 0 7 7 6 97 9 1 6 6 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
9 1 6 0 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
13 12 0 0 19 17 12 23 13 23 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(207,718,o),
(207,676,qs),
(207,634,o),
(259,583,o),
(301,583,qs),
(343,583,o),
(396,633,o),
(396,676,qs),
(396,718,o),
(343,769,o),
(301,769,qs),
(260,769,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 4 0 4 1 0 128 10 1 6 0 4 1 6 4 103 0 8 8 7 97 11 1 7 7 48 77 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 1 4 0 4 1 0 128 11 1 7 0 8 3 7 8 105 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
37 36 29 29 1 0 43 41 36 47 37 47 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(296,0,l),
(278,-12,o),
(264,-31,qs),
(241,-62,o),
(241,-100,qs),
(241,-128,o),
(261,-171,o),
(296,-200,o),
(341,-215,o),
(367,-215,qs),
(389,-216,o),
(430,-208,o),
(449,-197,q),
(434,-109,l),
(413,-118,o),
(393,-118,qs),
(372,-118,o),
(343,-91,o),
(344,-68,qs),
(345,-42,o),
(365,-24,qs),
(382,-8,o),
(401,0,q),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 5 4 20 1 6 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 2 3 1 2 103 0 0 0 8 95 9 1 8 8 38 77 0 3 3 4 95 7 1 4 4 39 77 0 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 2 3 1 2 103 0 5 0 6 5 6 101 0 0 0 8 95 9 1 8 8 38 77 0 3 3 4 95 7 1 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 34 0 34 24 36 38 17 17 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(103,63,qs),
(158,7,o),
(246,-5,q),
(232,-16,o),
(221,-31,qs),
(198,-62,o),
(198,-100,qs),
(198,-128,o),
(218,-171,o),
(253,-200,o),
(298,-215,o),
(324,-215,qs),
(346,-216,o),
(387,-208,o),
(406,-197,q),
(391,-109,l),
(370,-118,o),
(350,-118,qs),
(329,-118,o),
(300,-91,o),
(301,-68,qs),
(301,-44,o),
(322,-24,qs),
(335,-12,o),
(348,-4,q),
(365,-2,o),
(380,1,qs),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
39 26 2 4 2 27 1 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 7 2 7 3 2 128 9 1 2 4 7 2 4 126 8 1 1 0 7 3 1 7 103 0 0 0 6 97 0 6 6 49 77 0 4 4 5 98 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 7 2 7 3 2 128 9 1 2 4 7 2 4 126 8 1 1 0 7 3 1 7 103 0 4 0 5 4 5 102 0 0 0 6 97 0 6 6 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
8 7 0 0 57 56 49 47 31 29 25 23 11 10 7 59 8 59 0 6 0 6 34 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(594,0,l),
(594,147,l),
(237,147,l),
(237,278,l),
(540,278,l),
(540,423,l),
(237,423,l),
(237,559,l),
(594,559,l),
(594,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(552,950,l),
(406,950,l),
(343,863,l),
(278,950,l),
(132,950,l),
(291,765,l),
(394,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
10 1 8 6 5 6 8 5 128 0 1 0 2 3 1 2 103 7 1 6 6 44 77 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 6 8 6 133 10 1 8 5 8 133 0 1 0 2 3 1 2 103 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 12 0 0 12 18 12 18 17 16 14 13 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,178,o),
(192,216,q),
(542,216,l),
(545,233,o),
(548,262,o),
(548,278,qs),
(548,334,o),
(515,430,o),
(451,500,o),
(357,538,o),
(296,538,qs),
(235,538,o),
(138,497,o),
(71,424,o),
(34,324,o),
(34,266,qs),
(34,135,o),
(173,-8,o),
(298,-8,qs),
(341,-8,o),
(420,11,o),
(486,53,o),
(532,117,o),
(543,163,q),
(383,163,l),
(373,144,o),
(331,123,o),
(300,123,qs),
(247,124,o)
);
},
{
closed = 1;
nodes = (
(197,356,o),
(247,407,o),
(298,407,qs),
(344,407,o),
(397,359,o),
(397,322,q),
(194,322,l)
);
},
{
closed = 1;
nodes = (
(509,769,l),
(363,769,l),
(300,682,l),
(235,769,l),
(89,769,l),
(248,584,l),
(351,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
39 1 9 7 1 76 8 1 7 9 7 133 12 1 9 3 9 133 0 1 4 0 4 1 0 128 11 1 6 0 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 10 1 0 0 2 97 0 2 2 47 2 78 36 36 29 29 1 0 36 42 36 42 41 40 38 37 29 35 29 35 33 31 26 25 18 16 10 8 4 3 0 28 1 28 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,470,o),
(266,530,o),
(336,567,o),
(386,567,qs),
(444,567,o),
(522,516,o),
(532,467,q),
(692,467,l),
(685,530,o),
(631,624,o),
(548,686,o),
(443,717,o),
(385,717,qs),
(302,717,o),
(172,666,o),
(82,571,o),
(35,437,o),
(35,354,qs),
(35,273,o),
(82,140,o),
(172,45,o),
(302,-7,o),
(385,-7,qs),
(463,-7,o),
(589,47,o),
(630,96,qs),
(655,126,o),
(685,194,o),
(700,267,o),
(705,345,o),
(705,385,q),
(366,385,l),
(366,250,l),
(539,250,l),
(535,222,o),
(508,181,o),
(467,155,o),
(416,143,o),
(389,143,qs),
(339,143,o),
(268,178,o),
(223,237,o),
(203,314,o),
(203,355,qs),
(203,394,o)
);
},
{
closed = 1;
nodes = (
(332,950,l),
(174,765,l),
(320,765,l),
(383,852,l),
(448,765,l),
(594,765,l),
(434,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
47 1 7 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
8 1 7 9 4 9 7 4 128 0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 9 9 44 77 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 9 7 9 133 8 1 7 4 7 133 0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
51 50 18 20 34 20 40 39 17 20 36 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,11,o),
(421,-44,o),
(396,-88,o),
(350,-115,o),
(315,-115,qs),
(275,-115,o),
(225,-83,o),
(220,-61,q),
(56,-61,l),
(64,-113,o),
(111,-189,o),
(181,-237,o),
(268,-261,o),
(315,-261,qs),
(346,-261,o),
(413,-250,o),
(476,-222,o),
(526,-180,o),
(545,-150,qs),
(562,-122,o),
(581,-62,o),
(588,2,o),
(590,69,o),
(590,102,qs),
(590,527,l),
(450,527,l),
(435,475,l),
(378,538,o),
(286,538,qs),
(221,538,o),
(129,493,o),
(65,416,o),
(34,318,o),
(34,261,qs),
(34,207,o),
(63,109,o),
(121,34,o),
(211,-8,o),
(277,-8,qs),
(327,-8,o),
(403,21,o),
(430,55,q),
(430,38,ls)
);
},
{
closed = 1;
nodes = (
(235,154,o),
(207,188,o),
(193,233,o),
(193,259,qs),
(193,284,o),
(206,332,o),
(234,371,o),
(280,394,o),
(312,394,qs),
(371,394,o),
(432,319,o),
(432,266,qs),
(432,238,o),
(418,191,o),
(388,155,o),
(342,133,o),
(311,133,qs),
(281,133,o)
);
},
{
closed = 1;
nodes = (
(265,769,l),
(107,584,l),
(253,584,l),
(316,671,l),
(381,584,l),
(527,584,l),
(367,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
63 1 8 10 15 1 7 1 0 1 0 6 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
63 1 8 10 15 1 7 2 0 1 0 6 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 10 8 10 133 9 1 8 1 8 133 0 4 0 5 0 4 5 128 0 7 7 1 97 2 1 1 1 49 77 11 1 6 6 0 97 0 0 0 47 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 10 8 10 133 9 1 8 1 8 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 11 1 6 6 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 10 8 10 133 9 1 8 1 8 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 11 1 6 6 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
44 43 67 66 65 64 62 61 52 50 43 60 44 60 34 20 42 18 40 34 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,470,o),
(266,530,o),
(336,567,o),
(386,567,qs),
(444,567,o),
(522,516,o),
(532,467,q),
(692,467,l),
(685,530,o),
(631,624,o),
(548,686,o),
(443,717,o),
(385,717,qs),
(302,717,o),
(172,666,o),
(82,571,o),
(35,437,o),
(35,354,qs),
(35,273,o),
(82,140,o),
(172,45,o),
(302,-7,o),
(385,-7,qs),
(463,-7,o),
(589,47,o),
(630,96,qs),
(655,126,o),
(685,194,o),
(700,267,o),
(705,345,o),
(705,385,q),
(366,385,l),
(366,250,l),
(539,250,l),
(535,222,o),
(508,181,o),
(467,155,o),
(416,143,o),
(389,143,qs),
(339,143,o),
(268,178,o),
(223,237,o),
(203,314,o),
(203,355,qs),
(203,394,o)
);
},
{
closed = 1;
nodes = (
(192,849,o),
(298,764,o),
(386,764,qs),
(474,764,o),
(580,849,o),
(581,941,q),
(455,941,l),
(454,907,o),
(421,871,o),
(386,871,qs),
(351,871,o),
(318,907,o),
(317,941,q),
(191,941,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
11 10 2 8 7 7 8 112 0 5 6 2 6 5 2 128 0 7 0 9 4 7 9 106 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
11 10 2 8 7 8 133 0 5 6 2 6 5 2 128 0 7 0 9 4 7 9 106 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
45 45 45 58 45 58 56 54 18 38 34 20 40 39 17 20 36 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,11,o),
(421,-44,o),
(396,-88,o),
(350,-115,o),
(315,-115,qs),
(275,-115,o),
(225,-83,o),
(220,-61,q),
(56,-61,l),
(64,-113,o),
(111,-189,o),
(181,-237,o),
(268,-261,o),
(315,-261,qs),
(346,-261,o),
(413,-250,o),
(476,-222,o),
(526,-180,o),
(545,-150,qs),
(562,-122,o),
(581,-62,o),
(588,2,o),
(590,69,o),
(590,102,qs),
(590,527,l),
(450,527,l),
(435,475,l),
(378,538,o),
(286,538,qs),
(221,538,o),
(129,493,o),
(65,416,o),
(34,318,o),
(34,261,qs),
(34,207,o),
(63,109,o),
(121,34,o),
(211,-8,o),
(277,-8,qs),
(327,-8,o),
(403,21,o),
(430,55,q),
(430,38,ls)
);
},
{
closed = 1;
nodes = (
(235,154,o),
(207,188,o),
(193,233,o),
(193,259,qs),
(193,284,o),
(206,332,o),
(234,371,o),
(280,394,o),
(312,394,qs),
(371,394,o),
(432,319,o),
(432,266,qs),
(432,238,o),
(418,191,o),
(388,155,o),
(342,133,o),
(311,133,qs),
(281,133,o)
);
},
{
closed = 1;
nodes = (
(131,668,o),
(237,583,o),
(325,583,qs),
(413,583,o),
(519,668,o),
(520,760,q),
(394,760,l),
(393,726,o),
(360,690,o),
(325,690,qs),
(290,690,o),
(257,726,o),
(256,760,q),
(130,760,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
15 1 7 1 0 1 0 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
15 1 7 2 0 1 0 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
13 11 2 9 8 8 9 112 0 4 0 5 0 4 5 128 0 10 10 8 97 0 8 8 38 77 0 7 7 1 97 2 1 1 1 49 77 12 1 6 6 0 97 0 0 0 47 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
13 11 2 9 8 8 9 112 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 10 10 8 97 0 8 8 38 77 0 7 7 1 97 2 1 1 1 49 77 12 1 6 6 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
13 11 2 9 8 9 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 10 10 8 97 0 8 8 38 77 0 7 7 1 97 2 1 1 1 49 77 12 1 6 6 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
13 11 2 9 8 9 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 10 10 8 97 0 8 8 38 77 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 12 1 6 6 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
13 11 2 9 8 9 133 0 4 0 5 0 4 5 128 0 8 0 10 1 8 10 106 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 12 1 6 6 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
61 61 44 43 61 74 61 74 72 70 68 67 65 63 52 50 43 60 44 60 34 20 42 18 40 34 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,470,o),
(266,530,o),
(336,567,o),
(386,567,qs),
(444,567,o),
(522,516,o),
(532,467,q),
(692,467,l),
(685,530,o),
(631,624,o),
(548,686,o),
(443,717,o),
(385,717,qs),
(302,717,o),
(172,666,o),
(82,571,o),
(35,437,o),
(35,354,qs),
(35,273,o),
(82,140,o),
(172,45,o),
(302,-7,o),
(385,-7,qs),
(463,-7,o),
(589,47,o),
(630,96,qs),
(655,126,o),
(685,194,o),
(700,267,o),
(705,345,o),
(705,385,q),
(366,385,l),
(366,250,l),
(539,250,l),
(535,222,o),
(508,181,o),
(467,155,o),
(416,143,o),
(389,143,qs),
(339,143,o),
(268,178,o),
(223,237,o),
(203,314,o),
(203,355,qs),
(203,394,o)
);
},
{
closed = 1;
nodes = (
(291,899,o),
(291,857,qs),
(291,815,o),
(343,764,o),
(385,764,qs),
(427,764,o),
(480,814,o),
(480,857,qs),
(480,899,o),
(427,950,o),
(385,950,qs),
(344,950,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 8 8 7 97 9 1 7 7 44 77 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 5 6 2 6 5 2 128 9 1 7 0 8 4 7 8 105 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
46 45 52 50 45 56 46 56 34 20 40 39 17 20 36 10 8 29 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,11,o),
(421,-44,o),
(396,-88,o),
(350,-115,o),
(315,-115,qs),
(275,-115,o),
(225,-83,o),
(220,-61,q),
(56,-61,l),
(64,-113,o),
(111,-189,o),
(181,-237,o),
(268,-261,o),
(315,-261,qs),
(346,-261,o),
(413,-250,o),
(476,-222,o),
(526,-180,o),
(545,-150,qs),
(562,-122,o),
(581,-62,o),
(588,2,o),
(590,69,o),
(590,102,qs),
(590,527,l),
(450,527,l),
(435,475,l),
(378,538,o),
(286,538,qs),
(221,538,o),
(129,493,o),
(65,416,o),
(34,318,o),
(34,261,qs),
(34,207,o),
(63,109,o),
(121,34,o),
(211,-8,o),
(277,-8,qs),
(327,-8,o),
(403,21,o),
(430,55,q),
(430,38,ls)
);
},
{
closed = 1;
nodes = (
(235,154,o),
(207,188,o),
(193,233,o),
(193,259,qs),
(193,284,o),
(206,332,o),
(234,371,o),
(280,394,o),
(312,394,qs),
(371,394,o),
(432,319,o),
(432,266,qs),
(432,238,o),
(418,191,o),
(388,155,o),
(342,133,o),
(311,133,qs),
(281,133,o)
);
},
{
closed = 1;
nodes = (
(217,718,o),
(217,676,qs),
(217,634,o),
(269,583,o),
(311,583,qs),
(353,583,o),
(406,633,o),
(406,676,qs),
(406,718,o),
(353,769,o),
(311,769,qs),
(270,769,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
15 1 7 1 0 1 0 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
15 1 7 2 0 1 0 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 4 0 5 0 4 5 128 0 9 9 8 97 11 1 8 8 48 77 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 47 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 0 5 0 4 5 128 11 1 8 0 9 1 8 9 105 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 47 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 4 0 5 0 4 5 128 11 1 8 0 9 1 8 9 105 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 4 0 5 0 4 5 128 11 1 8 0 9 1 8 9 105 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 10 1 6 6 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
62 61 44 43 68 66 61 72 62 72 52 50 43 60 44 60 34 20 42 18 40 34 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,276,l),
(522,276,l),
(522,0,l),
(685,0,l),
(685,708,l),
(522,708,l),
(522,423,l),
(237,423,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(331,950,l),
(173,765,l),
(319,765,l),
(382,852,l),
(447,765,l),
(593,765,l),
(433,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 6 8 1 8 6 1 128 0 0 0 3 2 0 3 104 0 8 8 44 77 5 1 1 1 38 77 4 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 8 6 8 133 7 1 6 1 6 133 0 0 0 3 2 0 3 104 5 1 1 1 38 77 4 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 17 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(212,271,ls),
(212,292,o),
(221,335,o),
(244,372,o),
(282,394,o),
(311,394,qs),
(339,394,o),
(378,372,o),
(400,336,o),
(409,295,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,343,o),
(544,434,o),
(497,501,o),
(420,538,o),
(366,538,qs),
(349,538,o),
(311,533,o),
(271,518,o),
(230,493,o),
(212,474,q),
(212,708,l)
);
},
{
closed = 1;
nodes = (
(274,949,l),
(116,764,l),
(262,764,l),
(325,851,l),
(390,764,l),
(536,764,l),
(376,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
30 1 5 7 0 1 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
6 1 5 7 4 7 5 4 128 0 4 4 38 77 0 0 0 49 77 0 2 2 7 95 0 7 7 44 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
6 1 5 7 4 7 5 4 128 0 7 0 2 1 7 2 105 0 4 4 38 77 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 18 17 17 21 37 21 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(8,497,l),
(74,497,l),
(74,0,l),
(237,0,l),
(237,268,l),
(522,268,l),
(522,0,l),
(685,0,l),
(685,497,l),
(752,497,l),
(752,626,l),
(685,626,l),
(685,708,l),
(522,708,l),
(522,626,l),
(237,626,l),
(237,708,l),
(74,708,l),
(74,626,l),
(8,626,l)
);
},
{
closed = 1;
nodes = (
(237,415,l),
(237,497,l),
(522,497,l),
(522,415,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
12 9 3 3 1 10 8 2 4 11 1 4 103 0 11 0 6 5 11 6 103 2 1 0 0 38 77 7 1 5 5 39 5 78 0 0 23 22 21 20 0 19 0 19 17 17 17 17 17 17 17 17 17 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-9,554,l),
(55,554,l),
(55,0,l),
(212,0,l),
(212,271,ls),
(212,295,o),
(223,339,o),
(247,374,o),
(284,394,o),
(311,394,qs),
(337,394,o),
(374,375,o),
(398,343,o),
(409,300,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,340,o),
(546,430,o),
(499,498,o),
(422,538,o),
(366,538,qs),
(322,538,o),
(243,506,o),
(212,474,q),
(212,554,l),
(308,554,l),
(308,653,l),
(212,653,l),
(212,708,l),
(55,708,l),
(55,653,l),
(-9,653,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
7 1 5 3 1 76 9 8 2 1 7 1 2 3 1 2 103 0 0 0 38 77 0 5 5 3 97 0 3 3 49 77 6 1 4 4 39 4 78 0 0 0 33 0 33 17 21 37 21 35 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,328,l),
(373,409,l),
(305,523,l),
(237,483,l),
(237,708,l),
(74,708,l),
(74,386,l),
(-40,319,l),
(27,204,l),
(74,232,l),
(74,0,l),
(580,0,l),
(580,147,l),
(237,147,l),
(237,147,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
13 12 11 10 7 6 5 4 8 0 2 1 76 0 2 2 38 77 3 1 0 0 1 96 0 1 1 39 1 78 1 0 9 8 3 2 0 14 1 14 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,399,l),
(280,514,l),
(212,474,l),
(212,708,l),
(55,708,l),
(55,381,l),
(-65,309,l),
(2,194,l),
(55,226,l),
(55,0,l),
(212,0,l),
(212,319,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 10 9 8 5 4 3 2 8 0 1 1 76 0 1 1 38 77 0 0 0 39 0 78 21 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,435,l),
(553,5,l),
(553,-28,ls),
(553,-90,o),
(491,-90,qs),
(436,-90,l),
(436,-231,l),
(531,-231,ls),
(625,-231,o),
(710,-145,o),
(710,-51,qs),
(710,708,l),
(547,708,l),
(547,270,l),
(230,708,l),
(74,708,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
14 13 1 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 4 2 0 0 38 77 0 3 3 39 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 0 1 2 1 100 5 4 2 0 0 38 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 17 0 17 20 33 35 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,266,ls),
(212,291,o),
(222,337,o),
(246,373,o),
(287,394,o),
(313,394,qs),
(341,394,o),
(378,376,o),
(400,344,o),
(409,301,o),
(409,277,qs),
(409,-28,ls),
(409,-90,o),
(347,-90,qs),
(302,-90,l),
(302,-231,l),
(388,-231,ls),
(482,-231,o),
(567,-145,o),
(567,-51,qs),
(567,290,ls),
(567,341,o),
(547,432,o),
(500,499,o),
(422,538,o),
(365,538,qs),
(319,538,o),
(241,502,o),
(210,469,q),
(202,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 3 0 97 5 1 0 0 49 77 0 4 4 39 77 0 2 2 1 95 0 1 1 43 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 1 2 1 99 0 3 3 0 97 5 1 0 0 49 77 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 0 1 2 1 99 0 5 5 41 77 0 3 3 0 97 0 0 0 49 77 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 21 38 33 39 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,263,l),
(269,263,l),
(365,530,l)
);
},
{
closed = 1;
nodes = (
(551,0,l),
(728,0,l),
(453,708,l),
(279,708,l),
(0,0,l),
(176,0,l),
(219,117,l),
(509,117,l)
);
},
{
closed = 1;
nodes = (
(174,849,o),
(280,764,o),
(368,764,qs),
(456,764,o),
(562,849,o),
(563,941,q),
(437,941,l),
(436,907,o),
(403,871,o),
(368,871,qs),
(333,871,o),
(300,907,o),
(299,941,q),
(173,941,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
10 8 2 6 5 5 6 112 0 5 0 7 2 5 7 106 0 0 9 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
10 8 2 6 5 6 133 0 5 0 7 2 5 7 106 0 0 9 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
11 11 3 3 11 24 11 24 22 20 18 17 15 13 3 10 3 10 17 17 19 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,155,o),
(325,127,o),
(284,114,o),
(262,114,qs),
(231,114,o),
(194,142,o),
(194,168,qs),
(194,195,o),
(241,223,o),
(284,223,qs),
(376,223,l),
(376,196,o)
);
},
{
closed = 1;
nodes = (
(527,284,ls),
(527,335,o),
(506,429,o),
(451,498,o),
(358,538,o),
(288,538,qs),
(244,538,o),
(163,519,o),
(96,476,o),
(52,407,o),
(46,359,q),
(206,359,l),
(211,383,o),
(261,405,o),
(290,404,qs),
(332,404,o),
(375,358,o),
(375,321,q),
(281,321,ls),
(233,321,o),
(146,308,o),
(114,291,qs),
(78,272,o),
(36,203,o),
(36,158,qs),
(36,116,o),
(65,54,o),
(115,11,o),
(176,-8,o),
(211,-8,qs),
(254,-8,o),
(313,10,o),
(362,43,o),
(380,68,q),
(381,0,l),
(527,0,l)
);
},
{
closed = 1;
nodes = (
(102,668,o),
(208,583,o),
(296,583,qs),
(384,583,o),
(490,668,o),
(491,760,q),
(365,760,l),
(364,726,o),
(331,690,o),
(296,690,qs),
(261,690,o),
(228,726,o),
(227,760,q),
(101,760,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
13 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
13 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
13 11 2 9 8 8 9 112 0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 10 10 8 97 0 8 8 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 12 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
13 11 2 9 8 9 133 0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 10 10 8 97 0 8 8 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 12 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
13 11 2 9 8 9 133 0 5 4 3 4 5 3 128 0 8 0 10 6 8 10 106 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 12 7 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
13 11 2 9 8 9 133 0 5 4 3 4 5 3 128 0 8 0 10 6 8 10 106 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 12 1 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
48 48 12 12 48 61 48 61 59 57 55 54 52 50 12 47 12 47 36 18 34 41 40 36 32 14 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(72,780,o),
(73,802,o),
(79,822,o),
(92,836,o),
(103,836,qs),
(115,836,o),
(143,814,o),
(179,789,o),
(221,767,o),
(248,767,qs),
(281,767,o),
(325,793,o),
(352,835,o),
(363,889,o),
(363,918,qs),
(363,923,o),
(363,934,o),
(363,939,q),
(260,939,l),
(261,930,o),
(261,909,o),
(256,891,o),
(243,880,o),
(232,880,qs),
(219,880,o),
(193,900,o),
(162,925,o),
(123,945,o),
(97,945,qs),
(65,945,o),
(18,923,o),
(-12,886,o),
(-28,835,o),
(-29,805,qs),
(-29,790,o),
(-28,777,o),
(-27,772,q),
(74,772,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
4 1 2 0 6 5 2 6 105 0 3 8 7 2 5 1 3 5 106 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 2 3 2 4 3 128 0 2 0 6 5 2 6 105 0 3 8 7 2 5 1 3 5 106 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 2 3 2 4 3 128 8 1 7 6 5 6 7 5 128 0 2 0 6 7 2 6 105 0 3 0 5 1 3 5 106 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
4 4 4 41 4 41 35 39 20 35 40 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
},
{
closed = 1;
nodes = (
(47,599,o),
(48,621,o),
(54,641,o),
(67,655,o),
(78,655,qs),
(90,655,o),
(118,633,o),
(154,608,o),
(196,586,o),
(223,586,qs),
(256,586,o),
(300,612,o),
(327,654,o),
(338,708,o),
(338,737,qs),
(338,742,o),
(338,753,o),
(338,758,q),
(235,758,l),
(236,749,o),
(236,728,o),
(231,710,o),
(218,699,o),
(207,699,qs),
(194,699,o),
(168,719,o),
(137,744,o),
(98,764,o),
(72,764,qs),
(40,764,o),
(-7,742,o),
(-37,705,o),
(-53,654,o),
(-54,624,qs),
(-54,609,o),
(-53,596,o),
(-52,591,q),
(49,591,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 2 97 4 1 2 2 48 77 8 7 2 5 5 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
4 1 2 0 6 5 2 6 105 8 7 2 5 5 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 2 3 2 4 3 128 0 2 0 6 5 2 6 105 8 7 2 5 5 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 4 2 3 2 4 3 128 8 1 7 6 5 6 7 5 128 0 2 0 6 7 2 6 105 0 5 5 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
4 4 4 41 4 41 35 39 20 35 40 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(-13,801,l),
(324,801,l),
(324,934,l),
(-13,934,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 38 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
},
{
closed = 1;
nodes = (
(-15,620,l),
(282,620,l),
(282,753,l),
(-15,753,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 41 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(-39,849,o),
(67,764,o),
(155,764,qs),
(243,764,o),
(349,849,o),
(350,941,q),
(224,941,l),
(223,907,o),
(190,871,o),
(155,871,qs),
(120,871,o),
(87,907,o),
(86,941,q),
(-40,941,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
6 5 2 3 2 2 3 112 0 2 0 4 1 2 4 106 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 3 2 3 133 0 2 0 4 1 2 4 106 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
4 4 4 17 4 17 34 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,527,l)
);
},
{
closed = 1;
nodes = (
(-60,668,o),
(46,583,o),
(134,583,qs),
(222,583,o),
(328,668,o),
(329,760,q),
(203,760,l),
(202,726,o),
(169,690,o),
(134,690,qs),
(99,690,o),
(66,726,o),
(65,760,q),
(-61,760,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 5 2 3 2 2 3 112 0 4 4 2 97 0 2 2 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 5 2 3 2 3 133 0 4 4 2 97 0 2 2 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
6 5 2 3 2 3 133 0 2 0 4 1 2 4 106 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
4 4 4 17 4 17 34 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(104,0,l),
(86,-12,o),
(72,-31,qs),
(49,-62,o),
(49,-100,qs),
(49,-128,o),
(69,-171,o),
(104,-200,o),
(149,-215,o),
(175,-215,qs),
(197,-216,o),
(238,-208,o),
(257,-197,q),
(242,-109,l),
(221,-118,o),
(201,-118,qs),
(180,-118,o),
(151,-91,o),
(152,-68,qs),
(153,-42,o),
(173,-24,qs),
(190,-8,o),
(209,0,q),
(237,0,l),
(237,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 1 0 11 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 4 4 38 77 3 1 0 0 39 77 0 1 1 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 1 2 101 0 4 4 38 77 3 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 24 36 38 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,724,o),
(46,680,qs),
(46,633,o),
(103,585,o),
(143,585,qs),
(185,585,o),
(240,634,o),
(240,680,qs),
(240,724,o),
(185,774,o),
(143,774,qs),
(104,774,o)
);
},
{
closed = 1;
nodes = (
(65,527,l),
(65,0,l),
(91,0,l),
(73,-12,o),
(59,-31,qs),
(36,-62,o),
(36,-100,qs),
(36,-128,o),
(56,-171,o),
(91,-200,o),
(136,-215,o),
(162,-215,qs),
(184,-216,o),
(225,-208,o),
(244,-197,q),
(229,-109,l),
(208,-118,o),
(188,-118,qs),
(167,-118,o),
(138,-91,o),
(139,-68,qs),
(140,-42,o),
(160,-24,qs),
(177,-8,o),
(196,0,q),
(222,0,l),
(222,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 3 2 23 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 0 97 7 1 0 0 48 77 0 6 6 41 77 5 1 2 2 39 77 0 3 3 4 97 0 4 4 43 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
7 1 0 0 1 6 0 1 105 0 6 6 41 77 5 1 2 2 39 77 0 3 3 4 97 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
7 1 0 0 1 6 0 1 105 0 3 0 4 3 4 101 0 6 6 41 77 5 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 38 37 36 35 27 25 21 19 13 12 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(61,899,o),
(61,857,qs),
(61,815,o),
(113,764,o),
(155,764,qs),
(197,764,o),
(250,814,o),
(250,857,qs),
(250,899,o),
(197,950,o),
(155,950,qs),
(114,950,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,708,l),
(370,240,ls),
(370,200,o),
(330,141,o),
(284,141,qs),
(257,141,o),
(221,161,o),
(200,193,o),
(192,233,o),
(192,253,q),
(29,253,l),
(29,244,ls),
(29,126,o),
(164,-7,o),
(289,-7,qs),
(414,-7,o),
(533,127,o),
(533,254,qs),
(533,708,l)
);
},
{
closed = 1;
nodes = (
(369,950,l),
(211,765,l),
(357,765,l),
(420,852,l),
(485,765,l),
(631,765,l),
(471,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
5 1 4 6 3 6 4 3 128 0 1 3 2 2 1 114 0 6 6 44 77 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
5 1 4 6 3 6 4 3 128 0 1 3 2 3 1 2 128 0 6 6 44 77 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
5 1 4 6 3 6 4 3 128 0 1 3 2 2 1 114 0 6 6 44 77 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
5 1 4 6 3 6 4 3 128 0 1 3 2 3 1 2 128 0 6 6 44 77 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 4 6 133 5 1 4 3 4 133 0 1 3 2 3 1 2 128 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 18 17 19 36 19 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,-39,o),
(58,-62,o),
(43,-79,o),
(19,-90,o),
(1,-90,qs),
(-44,-90,l),
(-44,-231,l),
(41,-231,ls),
(136,-231,o),
(220,-142,o),
(220,-51,qs),
(220,527,l),
(63,527,l),
(63,-28,ls)
);
},
{
closed = 1;
nodes = (
(87,769,l),
(-71,584,l),
(75,584,l),
(138,671,l),
(203,584,l),
(349,584,l),
(189,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 3 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 5 3 5 133 4 1 3 0 3 133 0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 3 5 133 4 1 3 0 3 133 0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 18 21 33 35 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(580,0,l),
(580,147,l),
(237,147,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(232,765,l),
(385,950,l),
(222,950,l),
(102,765,l),
(102,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 4 3 95 0 3 3 44 77 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 4 2 3 4 103 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(212,708,l)
);
},
{
closed = 1;
nodes = (
(179,764,l),
(332,949,l),
(169,949,l),
(49,764,l),
(49,764,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 2 95 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,435,l),
(557,0,l),
(710,0,l),
(710,708,l),
(547,708,l),
(547,270,l),
(230,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(430,765,l),
(583,950,l),
(420,950,l),
(300,765,l),
(300,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 1 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 5 4 95 0 4 4 44 77 6 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 4 0 5 0 4 5 103 6 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 14 13 12 11 0 9 0 9 18 17 18 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,266,ls),
(212,288,o),
(221,332,o),
(243,369,o),
(285,394,o),
(313,394,qs),
(341,394,o),
(379,375,o),
(401,341,o),
(409,299,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,347,o),
(545,441,o),
(516,476,qs),
(490,505,o),
(415,538,o),
(365,538,qs),
(327,537,o),
(245,507,o),
(210,469,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(357,584,l),
(510,769,l),
(347,769,l),
(227,584,l),
(227,584,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 6 0 5 6 103 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 6 0 5 6 103 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 18 17 21 37 22 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,435,l),
(557,0,l),
(710,0,l),
(710,708,l),
(547,708,l),
(547,270,l),
(230,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(605,950,l),
(459,950,l),
(396,863,l),
(331,950,l),
(185,950,l),
(344,765,l),
(447,765,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
13 1 6 4 6 1 2 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
10 10 0 0 10 16 10 16 15 14 12 11 0 9 0 9 18 17 18 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,266,ls),
(212,288,o),
(221,332,o),
(243,369,o),
(285,394,o),
(313,394,qs),
(341,394,o),
(379,375,o),
(401,341,o),
(409,299,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,347,o),
(545,441,o),
(516,476,qs),
(490,505,o),
(415,538,o),
(365,538,qs),
(327,537,o),
(245,507,o),
(210,469,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(542,769,l),
(396,769,l),
(333,682,l),
(268,769,l),
(122,769,l),
(281,584,l),
(384,584,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 7 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 7 5 133 8 1 7 0 7 133 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
6 1 5 7 5 133 8 1 7 0 7 133 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
27 27 27 33 27 33 18 18 17 21 37 22 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(205,801,l),
(582,801,l),
(582,934,l),
(205,934,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
7 1 5 0 4 0 5 4 103 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 40 40 1 0 40 43 40 43 42 41 36 34 26 24 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(120,620,l),
(497,620,l),
(497,753,l),
(120,753,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
8 1 5 0 4 3 5 4 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 47 2 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(200,849,o),
(306,764,o),
(394,764,qs),
(482,764,o),
(588,849,o),
(589,941,q),
(463,941,l),
(462,907,o),
(429,871,o),
(394,871,qs),
(359,871,o),
(326,907,o),
(325,941,q),
(199,941,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 7 2 5 4 4 5 112 0 4 0 6 0 4 6 106 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
9 7 2 5 4 5 133 0 4 0 6 0 4 6 106 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
40 40 1 0 40 53 40 53 51 49 47 46 44 42 36 34 26 24 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(113,668,o),
(219,583,o),
(307,583,qs),
(395,583,o),
(501,668,o),
(502,760,q),
(376,760,l),
(375,726,o),
(342,690,o),
(307,690,qs),
(272,690,o),
(239,726,o),
(238,760,q),
(112,760,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 7 2 5 4 4 5 112 0 6 6 4 97 0 4 4 38 77 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
10 7 2 5 4 5 133 0 6 6 4 97 0 4 4 38 77 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
10 7 2 5 4 5 133 0 4 0 6 3 4 6 106 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
40 40 21 20 1 0 40 53 40 53 51 49 47 46 44 42 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,665,o),
(86,569,o),
(35,436,o),
(35,355,qs),
(35,275,o),
(84,142,o),
(176,46,o),
(307,-7,o),
(390,-7,qs),
(472,-8,o),
(604,46,o),
(697,144,o),
(747,278,o),
(747,358,qs),
(747,439,o),
(697,571,o),
(604,666,o),
(473,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(225,472,o),
(271,531,o),
(343,567,o),
(392,567,qs),
(442,567,o),
(513,529,o),
(559,469,o),
(580,393,o),
(580,354,qs),
(580,315,o),
(558,239,o),
(512,179,o),
(442,143,o),
(394,143,qs),
(344,144,o),
(272,180,o),
(225,239,o),
(202,315,o),
(202,356,qs),
(202,396,o)
);
},
{
closed = 1;
nodes = (
(362,765,l),
(475,950,l),
(324,950,l),
(246,765,l)
);
},
{
closed = 1;
nodes = (
(553,765,l),
(695,950,l),
(543,950,l),
(432,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
7 1 5 5 4 95 6 1 4 4 44 77 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 7 1 5 0 4 5 103 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 47 46 45 44 43 42 41 40 36 34 26 24 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,371,o),
(404,334,o),
(416,289,o),
(416,265,qs),
(416,238,o),
(404,192,o),
(377,158,o),
(334,136,o),
(304,136,qs),
(274,136,o),
(231,157,o),
(203,192,o),
(190,238,o),
(190,265,qs),
(190,289,o),
(203,334,o),
(231,371,o),
(274,392,o),
(304,392,qs),
(334,392,o)
);
},
{
closed = 1;
nodes = (
(464,28,o),
(534,98,o),
(574,200,o),
(574,266,qs),
(574,329,o),
(535,430,o),
(466,501,o),
(368,538,o),
(308,538,qs),
(248,538,o),
(148,501,o),
(76,430,o),
(34,329,o),
(34,266,qs),
(34,200,o),
(74,98,o),
(144,28,o),
(243,-8,o),
(303,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(276,584,l),
(389,769,l),
(238,769,l),
(160,584,l)
);
},
{
closed = 1;
nodes = (
(467,584,l),
(609,769,l),
(457,769,l),
(346,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 4 7 1 5 3 4 5 103 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 21 20 1 0 47 46 45 44 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,246,l),
(338,246,l),
(477,0,l),
(661,0,l),
(501,267,l),
(572,289,o),
(644,403,o),
(646,481,qs),
(646,551,o),
(596,640,o),
(516,690,o),
(416,708,o),
(367,708,qs),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(369,559,ls),
(394,559,o),
(437,552,o),
(468,533,o),
(486,500,o),
(485,475,qs),
(483,427,o),
(419,387,o),
(366,387,qs),
(237,387,l)
);
},
{
closed = 1;
nodes = (
(387,765,l),
(540,950,l),
(377,950,l),
(257,765,l),
(257,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
9 1 4 0 2 1 4 2 103 0 7 7 6 95 0 6 6 44 77 0 5 5 0 95 8 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 0 7 0 6 7 103 9 1 4 0 2 1 4 2 103 0 5 5 0 95 8 1 0 0 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
17 16 1 0 31 30 29 28 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,238,ls),
(212,284,o),
(235,347,o),
(265,366,qs),
(278,374,o),
(313,381,o),
(350,384,o),
(386,383,o),
(400,383,q),
(400,534,l),
(393,536,o),
(368,537,o),
(355,537,qs),
(312,537,o),
(237,510,o),
(206,469,q),
(196,527,l)
);
},
{
closed = 1;
nodes = (
(284,584,l),
(437,769,l),
(274,769,l),
(154,584,l),
(154,584,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
6 1 3 0 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 5 0 4 5 103 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 5 0 4 5 103 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 18 17 23 34 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,246,l),
(338,246,l),
(477,0,l),
(661,0,l),
(501,267,l),
(572,289,o),
(644,403,o),
(646,481,qs),
(646,551,o),
(596,640,o),
(516,690,o),
(416,708,o),
(367,708,qs),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(369,559,ls),
(394,559,o),
(437,552,o),
(468,533,o),
(486,500,o),
(485,475,qs),
(483,427,o),
(419,387,o),
(366,387,qs),
(237,387,l)
);
},
{
closed = 1;
nodes = (
(566,950,l),
(420,950,l),
(357,863,l),
(292,950,l),
(146,950,l),
(305,765,l),
(408,765,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
30 1 8 6 8 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
11 1 8 6 0 6 8 0 128 10 1 4 0 2 1 4 2 103 7 1 6 6 44 77 0 5 5 0 95 9 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
11 1 8 6 0 6 8 0 128 10 1 4 0 2 1 4 2 103 0 5 5 0 95 9 1 0 0 38 77 7 1 6 6 1 95 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
27 27 17 16 1 0 27 33 27 33 32 31 29 28 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,238,ls),
(212,284,o),
(235,347,o),
(265,366,qs),
(278,374,o),
(313,381,o),
(350,384,o),
(386,383,o),
(400,383,q),
(400,534,l),
(393,536,o),
(368,537,o),
(355,537,qs),
(312,537,o),
(237,510,o),
(206,469,q),
(196,527,l)
);
},
{
closed = 1;
nodes = (
(458,769,l),
(312,769,l),
(249,682,l),
(184,769,l),
(38,769,l),
(197,584,l),
(300,584,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
23 1 6 4 6 1 1 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
23 1 6 4 6 1 3 0 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 6 4 133 7 1 6 0 6 133 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 4 133 7 1 6 0 6 133 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
20 20 20 26 20 26 18 18 17 23 34 50 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,549,o),
(555,632,o),
(487,688,o),
(398,717,o),
(345,717,qs),
(294,717,o),
(198,698,o),
(117,649,o),
(65,565,o),
(65,501,qs),
(65,437,o),
(116,359,o),
(205,311,o),
(323,281,o),
(391,266,qs),
(419,259,o),
(456,232,o),
(456,206,qs),
(456,188,o),
(437,163,o),
(409,148,o),
(373,142,o),
(357,142,qs),
(331,142,o),
(282,151,o),
(243,171,o),
(215,204,o),
(209,229,q),
(44,229,l),
(49,164,o),
(103,74,o),
(187,17,o),
(291,-8,o),
(346,-8,qs),
(401,-8,o),
(501,18,o),
(576,72,o),
(620,157,o),
(620,216,qs),
(618,282,o),
(569,356,o),
(490,398,o),
(390,420,o),
(338,434,qs),
(312,441,o),
(271,453,o),
(242,469,o),
(227,491,o),
(227,508,qs),
(227,524,o),
(244,548,o),
(272,563,o),
(307,570,o),
(325,570,qs),
(376,570,o),
(439,530,o),
(445,492,q),
(604,492,l)
);
},
{
closed = 1;
nodes = (
(381,765,l),
(534,950,l),
(371,950,l),
(251,765,l),
(251,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 7 7 6 95 0 6 6 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 0 7 4 6 7 103 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 62 61 60 59 0 57 0 57 53 51 35 33 29 28 24 22 34 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,388,o),
(325,363,q),
(478,363,l),
(474,410,o),
(436,477,o),
(378,519,o),
(301,538,o),
(259,538,qs),
(218,538,o),
(139,520,o),
(78,481,o),
(40,416,o),
(40,370,qs),
(40,328,o),
(77,272,o),
(131,240,o),
(205,217,o),
(244,209,qs),
(260,206,o),
(292,199,o),
(319,191,o),
(337,176,o),
(337,159,qs),
(335,140,o),
(303,121,o),
(276,121,qs),
(243,121,o),
(194,146,o),
(188,173,q),
(26,173,l),
(32,121,o),
(79,53,o),
(147,10,o),
(231,-8,o),
(274,-8,qs),
(313,-8,o),
(391,9,o),
(452,51,o),
(491,117,o),
(492,166,qs),
(491,221,o),
(439,282,o),
(363,312,o),
(273,327,o),
(233,338,qs),
(210,344,o),
(193,361,o),
(193,375,qs),
(195,394,o),
(229,409,o),
(253,409,qs),
(281,409,o)
);
},
{
closed = 1;
nodes = (
(313,584,l),
(466,769,l),
(303,769,l),
(183,584,l),
(183,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
3 1 5 0 28 1 3 2 2 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 0 7 4 6 7 103 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 56 55 54 53 49 48 44 42 26 24 22 21 17 15 0 51 1 51 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,549,o),
(555,632,o),
(487,688,o),
(398,717,o),
(345,717,qs),
(294,717,o),
(198,698,o),
(117,649,o),
(65,565,o),
(65,501,qs),
(65,437,o),
(116,359,o),
(205,311,o),
(323,281,o),
(391,266,qs),
(419,259,o),
(456,232,o),
(456,206,qs),
(456,188,o),
(437,163,o),
(409,148,o),
(373,142,o),
(357,142,qs),
(331,142,o),
(282,151,o),
(243,171,o),
(215,204,o),
(209,229,q),
(44,229,l),
(49,164,o),
(103,74,o),
(187,17,o),
(291,-8,o),
(346,-8,qs),
(401,-8,o),
(501,18,o),
(576,72,o),
(620,157,o),
(620,216,qs),
(618,282,o),
(569,356,o),
(490,398,o),
(390,420,o),
(338,434,qs),
(312,441,o),
(271,453,o),
(242,469,o),
(227,491,o),
(227,508,qs),
(227,524,o),
(244,548,o),
(272,563,o),
(307,570,o),
(325,570,qs),
(376,570,o),
(439,530,o),
(445,492,q),
(604,492,l)
);
},
{
closed = 1;
nodes = (
(292,950,l),
(134,765,l),
(280,765,l),
(343,852,l),
(408,765,l),
(554,765,l),
(394,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
60 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
7 1 6 8 4 8 6 4 128 9 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 8 8 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 8 6 8 133 7 1 6 4 6 133 9 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 64 63 62 61 59 58 0 57 0 57 53 51 35 33 29 28 24 22 34 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,388,o),
(325,363,q),
(478,363,l),
(474,410,o),
(436,477,o),
(378,519,o),
(301,538,o),
(259,538,qs),
(218,538,o),
(139,520,o),
(78,481,o),
(40,416,o),
(40,370,qs),
(40,328,o),
(77,272,o),
(131,240,o),
(205,217,o),
(244,209,qs),
(260,206,o),
(292,199,o),
(319,191,o),
(337,176,o),
(337,159,qs),
(335,140,o),
(303,121,o),
(276,121,qs),
(243,121,o),
(194,146,o),
(188,173,q),
(26,173,l),
(32,121,o),
(79,53,o),
(147,10,o),
(231,-8,o),
(274,-8,qs),
(313,-8,o),
(391,9,o),
(452,51,o),
(491,117,o),
(492,166,qs),
(491,221,o),
(439,282,o),
(363,312,o),
(273,327,o),
(233,338,qs),
(210,344,o),
(193,361,o),
(193,375,qs),
(195,394,o),
(229,409,o),
(253,409,qs),
(281,409,o)
);
},
{
closed = 1;
nodes = (
(214,769,l),
(56,584,l),
(202,584,l),
(265,671,l),
(330,584,l),
(476,584,l),
(316,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
54 1 6 8 3 1 5 0 28 1 3 2 3 76 0 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 58 57 56 55 53 52 49 48 44 42 26 24 22 21 17 15 0 51 1 51 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,549,o),
(555,632,o),
(487,688,o),
(398,717,o),
(345,717,qs),
(294,717,o),
(198,698,o),
(117,649,o),
(65,565,o),
(65,501,qs),
(65,437,o),
(116,359,o),
(205,311,o),
(323,281,o),
(391,266,qs),
(419,259,o),
(456,232,o),
(456,206,qs),
(456,188,o),
(437,163,o),
(409,148,o),
(373,142,o),
(357,142,qs),
(331,142,o),
(282,151,o),
(243,171,o),
(215,204,o),
(209,229,q),
(44,229,l),
(49,164,o),
(103,74,o),
(187,17,o),
(291,-8,o),
(346,-8,qs),
(401,-8,o),
(501,18,o),
(576,72,o),
(620,157,o),
(620,216,qs),
(618,282,o),
(569,356,o),
(490,398,o),
(390,420,o),
(338,434,qs),
(312,441,o),
(271,453,o),
(242,469,o),
(227,491,o),
(227,508,qs),
(227,524,o),
(244,548,o),
(272,563,o),
(307,570,o),
(325,570,qs),
(376,570,o),
(439,530,o),
(445,492,q),
(604,492,l)
);
},
{
closed = 1;
nodes = (
(550,950,l),
(404,950,l),
(341,863,l),
(276,950,l),
(130,950,l),
(289,765,l),
(392,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
61 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 0 0 0 4 97 0 4 4 46 77 9 1 5 5 6 95 7 1 6 6 44 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 9 1 5 2 6 5 103 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
58 58 0 0 58 64 58 64 63 62 60 59 0 57 0 57 53 51 35 33 29 28 24 22 34 11 8 23 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,388,o),
(325,363,q),
(478,363,l),
(474,410,o),
(436,477,o),
(378,519,o),
(301,538,o),
(259,538,qs),
(218,538,o),
(139,520,o),
(78,481,o),
(40,416,o),
(40,370,qs),
(40,328,o),
(77,272,o),
(131,240,o),
(205,217,o),
(244,209,qs),
(260,206,o),
(292,199,o),
(319,191,o),
(337,176,o),
(337,159,qs),
(335,140,o),
(303,121,o),
(276,121,qs),
(243,121,o),
(194,146,o),
(188,173,q),
(26,173,l),
(32,121,o),
(79,53,o),
(147,10,o),
(231,-8,o),
(274,-8,qs),
(313,-8,o),
(391,9,o),
(452,51,o),
(491,117,o),
(492,166,qs),
(491,221,o),
(439,282,o),
(363,312,o),
(273,327,o),
(233,338,qs),
(210,344,o),
(193,361,o),
(193,375,qs),
(195,394,o),
(229,409,o),
(253,409,qs),
(281,409,o)
);
},
{
closed = 1;
nodes = (
(482,769,l),
(336,769,l),
(273,682,l),
(208,769,l),
(62,769,l),
(221,584,l),
(324,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
55 1 8 6 3 1 5 0 28 1 3 2 3 76 10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 52 52 1 0 52 58 52 58 57 56 54 53 49 48 44 42 26 24 22 21 17 15 0 51 1 51 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcaron;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,0,l),
(384,0,l),
(384,559,l),
(600,559,l),
(600,708,l),
(5,708,l),
(5,559,l),
(221,559,l)
);
},
{
closed = 1;
nodes = (
(516,950,l),
(370,950,l),
(307,863,l),
(242,950,l),
(96,950,l),
(255,765,l),
(358,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
8 8 0 0 8 14 8 14 13 12 10 9 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(290,780,o),
(291,802,o),
(297,822,o),
(310,836,o),
(321,836,qs),
(333,836,o),
(361,814,o),
(397,789,o),
(439,767,o),
(466,767,qs),
(499,767,o),
(543,793,o),
(570,835,o),
(581,889,o),
(581,918,qs),
(581,923,o),
(581,934,o),
(581,939,q),
(478,939,l),
(479,930,o),
(479,909,o),
(474,891,o),
(461,880,o),
(450,880,qs),
(437,880,o),
(411,900,o),
(380,925,o),
(341,945,o),
(315,945,qs),
(283,945,o),
(236,923,o),
(206,886,o),
(190,835,o),
(189,805,qs),
(189,790,o),
(190,777,o),
(191,772,q),
(292,772,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 106 3 1 1 1 38 77 0 2 2 0 97 10 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 4 5 4 6 5 128 0 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 106 3 1 1 1 38 77 0 2 2 0 97 10 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 6 4 5 4 6 5 128 11 1 9 8 7 8 9 7 128 0 4 0 8 9 4 8 105 0 5 0 7 1 5 7 106 3 1 1 1 38 77 0 2 2 0 97 10 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
26 26 1 0 26 63 26 63 59 57 54 52 45 44 40 38 35 33 20 19 14 12 7 6 0 25 1 25 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(209,599,o),
(210,621,o),
(216,641,o),
(229,655,o),
(240,655,qs),
(252,655,o),
(280,633,o),
(316,608,o),
(358,586,o),
(385,586,qs),
(418,586,o),
(462,612,o),
(489,654,o),
(500,708,o),
(500,737,qs),
(500,742,o),
(500,753,o),
(500,758,q),
(397,758,l),
(398,749,o),
(398,728,o),
(393,710,o),
(380,699,o),
(369,699,qs),
(356,699,o),
(330,719,o),
(299,744,o),
(260,764,o),
(234,764,qs),
(202,764,o),
(155,742,o),
(125,705,o),
(109,654,o),
(108,624,qs),
(108,609,o),
(109,596,o),
(110,591,q),
(211,591,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 8 8 4 97 6 1 4 4 48 77 11 9 2 7 7 5 97 0 5 5 38 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
6 1 4 0 8 7 4 8 105 11 9 2 7 7 5 97 0 5 5 38 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 6 4 5 4 6 5 128 0 4 0 8 7 4 8 105 11 9 2 7 7 5 97 0 5 5 38 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 6 4 5 4 6 5 128 11 1 9 8 7 8 9 7 128 0 4 0 8 9 4 8 105 0 7 7 5 97 0 5 5 38 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
24 24 1 0 24 61 24 61 57 55 52 50 43 42 38 36 33 31 20 19 14 12 7 6 0 23 1 23 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(192,801,l),
(569,801,l),
(569,934,l),
(192,934,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
7 1 5 0 4 1 5 4 103 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 47 0 78 26 26 1 0 26 29 26 29 28 27 20 19 14 12 7 6 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(108,620,l),
(485,620,l),
(485,753,l),
(108,753,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
7 1 5 0 4 1 5 4 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 24 24 1 0 24 27 24 27 26 25 20 19 14 12 7 6 0 23 1 23 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(183,849,o),
(289,764,o),
(377,764,qs),
(465,764,o),
(571,849,o),
(572,941,q),
(446,941,l),
(445,907,o),
(412,871,o),
(377,871,qs),
(342,871,o),
(309,907,o),
(308,941,q),
(182,941,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
9 7 2 5 4 4 5 112 0 4 0 6 1 4 6 106 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 106 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
26 26 1 0 26 39 26 39 37 35 33 32 30 28 20 19 14 12 7 6 0 25 1 25 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(105,668,o),
(211,583,o),
(299,583,qs),
(387,583,o),
(493,668,o),
(494,760,q),
(368,760,l),
(367,726,o),
(334,690,o),
(299,690,qs),
(264,690,o),
(231,726,o),
(230,760,q),
(104,760,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
9 7 2 5 4 4 5 112 0 6 6 4 97 0 4 4 38 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
9 7 2 5 4 5 133 0 6 6 4 97 0 4 4 38 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 106 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
24 24 1 0 24 37 24 37 35 33 31 30 28 26 20 19 14 12 7 6 0 23 1 23 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(306,952,o),
(272,920,o),
(253,877,o),
(253,850,qs),
(253,795,o),
(324,732,o),
(377,732,qs),
(431,732,o),
(502,794,o),
(502,850,qs),
(502,904,o),
(430,969,o),
(377,969,qs),
(351,969,o)
);
},
{
closed = 1;
nodes = (
(418,868,o),
(418,850,qs),
(418,832,o),
(394,811,o),
(377,811,qs),
(359,811,o),
(337,832,o),
(337,850,qs),
(337,867,o),
(360,889,o),
(377,889,qs),
(394,889,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 7 0 5 1 7 5 105 10 1 6 6 4 97 9 1 4 4 44 77 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 47 0 78 41 40 27 26 1 0 47 45 40 51 41 51 33 31 26 39 27 39 20 19 14 12 7 6 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(227,802,o),
(193,770,o),
(174,727,o),
(174,700,qs),
(174,645,o),
(245,582,o),
(298,582,qs),
(352,582,o),
(423,644,o),
(423,700,qs),
(423,754,o),
(351,819,o),
(298,819,qs),
(272,819,o)
);
},
{
closed = 1;
nodes = (
(339,718,o),
(339,700,qs),
(339,682,o),
(315,661,o),
(298,661,qs),
(280,661,o),
(258,682,o),
(258,700,qs),
(258,717,o),
(281,739,o),
(298,739,qs),
(315,739,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
9 1 4 10 1 6 7 4 6 105 0 7 0 5 1 7 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 39 38 25 24 1 0 45 43 38 49 39 49 31 29 24 37 25 37 20 19 14 12 7 6 0 23 1 23 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(296,-8,o),
(377,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(341,765,l),
(454,950,l),
(303,950,l),
(225,765,l)
);
},
{
closed = 1;
nodes = (
(532,765,l),
(674,950,l),
(522,950,l),
(411,765,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 5 5 4 95 6 1 4 4 44 77 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 7 1 5 1 4 5 103 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 33 32 31 30 29 28 27 26 20 19 14 12 7 6 0 25 1 25 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(241,-8,o),
(298,-8,qs),
(350,-8,o),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
},
{
closed = 1;
nodes = (
(262,584,l),
(375,769,l),
(224,769,l),
(146,584,l)
);
},
{
closed = 1;
nodes = (
(453,584,l),
(595,769,l),
(443,769,l),
(332,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
6 1 4 7 1 5 1 4 5 103 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 1 0 31 30 29 28 27 26 25 24 20 19 14 12 7 6 0 23 1 23 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,-5,q),
(311,-16,o),
(300,-31,qs),
(277,-62,o),
(277,-100,qs),
(277,-128,o),
(297,-171,o),
(332,-200,o),
(377,-215,o),
(403,-215,qs),
(425,-216,o),
(466,-208,o),
(485,-197,q),
(470,-109,l),
(449,-118,o),
(429,-118,qs),
(408,-118,o),
(379,-91,o),
(380,-68,qs),
(381,-42,o),
(401,-24,qs),
(412,-13,o),
(425,-6,q),
(477,-1,o),
(517,14,qs),
(576,37,o),
(651,123,o),
(686,248,o),
(686,327,qs),
(686,708,l),
(523,708,l),
(523,315,ls),
(523,282,o),
(511,219,o),
(478,171,o),
(422,141,o),
(379,141,qs),
(337,141,o),
(280,170,o),
(246,218,o),
(232,281,o),
(232,315,qs),
(232,708,l),
(69,708,l),
(69,327,ls),
(69,247,o),
(104,123,o),
(179,37,o),
(237,14,qs),
(276,0,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
48 35 2 3 1 36 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 38 77 0 3 3 4 98 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 102 2 1 0 0 38 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 45 21 37 21 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,197,o),
(210,245,qs),
(210,527,l),
(53,527,l),
(53,236,ls),
(53,173,o),
(86,80,o),
(149,20,o),
(195,6,qs),
(218,-1,o),
(245,-4,q),
(231,-16,o),
(219,-31,qs),
(196,-62,o),
(196,-100,qs),
(196,-128,o),
(216,-171,o),
(251,-200,o),
(296,-215,o),
(322,-215,qs),
(344,-216,o),
(385,-208,o),
(404,-197,q),
(389,-109,l),
(368,-118,o),
(348,-118,qs),
(327,-118,o),
(298,-91,o),
(299,-68,qs),
(300,-42,o),
(320,-24,qs),
(332,-13,o),
(345,-5,q),
(371,-2,o),
(395,4,qs),
(441,17,o),
(507,75,o),
(544,169,o),
(544,236,qs),
(544,527,l),
(387,527,l),
(387,245,ls),
(387,223,o),
(380,183,o),
(361,153,o),
(326,134,o),
(299,134,qs),
(250,135,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
36 23 2 2 0 24 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 0 1 2 1 0 2 128 4 1 1 1 41 77 0 2 2 3 98 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 0 1 2 1 0 2 128 0 2 0 3 2 3 102 4 1 1 1 41 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 44 43 28 26 22 20 7 6 0 47 1 47 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,0,l),
(819,0,l),
(995,708,l),
(812,708,l),
(712,206,l),
(603,708,l),
(395,708,l),
(284,206,l),
(184,708,l),
(0,708,l),
(176,0,l),
(389,0,l),
(497,492,l)
);
},
{
closed = 1;
nodes = (
(447,950,l),
(289,765,l),
(435,765,l),
(498,852,l),
(563,765,l),
(709,765,l),
(549,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
15 1 5 7 12 7 4 3 0 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 5 7 1 7 5 1 128 0 7 7 44 77 3 2 2 1 1 38 77 4 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 7 5 7 133 6 1 5 1 5 133 3 2 2 1 1 38 77 4 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 18 18 17 18 18 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 995;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,328,l),
(534,0,l),
(707,0,l),
(872,527,l),
(705,527,l),
(619,186,l),
(522,527,l),
(359,527,l),
(262,186,l),
(175,527,l),
(1,527,l),
(166,0,l),
(341,0,l)
);
},
{
closed = 1;
nodes = (
(387,769,l),
(229,584,l),
(375,584,l),
(438,671,l),
(503,584,l),
(649,584,l),
(489,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
15 1 5 7 11 6 3 3 3 0 2 76 0 7 5 7 133 6 1 5 0 5 133 2 1 2 0 0 41 77 8 4 2 3 3 39 3 78 0 0 19 18 17 16 14 13 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 873;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,708,l),
(272,263,l),
(272,0,l),
(435,0,l),
(435,264,l),
(434,264,l),
(435,264,l),
(703,708,l),
(519,708,l),
(477,634,o),
(396,488,o),
(355,414,q),
(189,708,l)
);
},
{
closed = 1;
nodes = (
(304,950,l),
(146,765,l),
(292,765,l),
(355,852,l),
(420,765,l),
(566,765,l),
(406,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
15 1 3 5 10 5 2 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 5 0 5 3 0 128 0 5 5 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 5 0 5 3 0 128 2 1 0 0 38 77 0 5 5 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 18 17 18 20 19 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,-83,o),
(104,-64,q),
(91,-96,o),
(67,-163,o),
(55,-196,q),
(106,-229,o),
(221,-261,o),
(281,-261,qs),
(356,-261,o),
(476,-215,o),
(516,-167,qs),
(538,-139,o),
(564,-74,o),
(576,-2,o),
(577,74,o),
(577,110,qs),
(577,527,l),
(419,527,l),
(419,263,ls),
(419,242,o),
(411,197,o),
(388,160,o),
(348,134,o),
(317,134,qs),
(286,134,o),
(246,157,o),
(225,193,o),
(217,238,o),
(217,261,qs),
(217,527,l),
(60,527,l),
(60,235,ls),
(60,173,o),
(84,80,o),
(113,48,qs),
(138,22,o),
(215,-8,o),
(267,-8,qs),
(285,-8,o),
(326,-2,o),
(368,11,o),
(405,33,o),
(419,51,q),
(420,3,o),
(395,-60,o),
(352,-97,o),
(298,-112,o),
(269,-112,qs),
(219,-112,o)
);
},
{
closed = 1;
nodes = (
(269,769,l),
(111,584,l),
(257,584,l),
(320,671,l),
(385,584,l),
(531,584,l),
(371,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
51 1 6 8 5 1 1 3 46 1 0 1 43 1 5 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
7 1 6 8 2 8 6 2 128 0 3 2 1 2 3 1 128 4 1 2 2 41 77 0 8 8 1 97 0 1 1 47 77 9 1 0 0 5 98 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 6 8 2 8 6 2 128 0 3 2 1 2 3 1 128 9 1 0 0 5 0 5 102 4 1 2 2 41 77 0 8 8 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 55 54 53 52 50 49 41 39 31 30 25 23 18 17 11 9 0 48 1 48 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,708,l),
(272,263,l),
(272,0,l),
(435,0,l),
(435,264,l),
(434,264,l),
(435,264,l),
(703,708,l),
(519,708,l),
(477,634,o),
(396,488,o),
(355,414,q),
(189,708,l)
);
},
{
closed = 1;
nodes = (
(132,894,o),
(132,853,qs),
(132,810,o),
(184,764,o),
(222,764,qs),
(260,764,o),
(312,810,o),
(312,853,qs),
(312,895,o),
(260,941,o),
(222,941,qs),
(184,941,o)
);
},
{
closed = 1;
nodes = (
(400,894,o),
(400,853,qs),
(400,810,o),
(452,764,o),
(490,764,qs),
(528,764,o),
(581,810,o),
(581,853,qs),
(581,895,o),
(528,941,o),
(490,941,qs),
(453,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
10 5 2 1 0 1 76 8 5 7 3 3 6 1 4 0 3 4 105 2 1 0 0 38 77 0 1 1 39 1 78 26 25 14 13 32 30 25 36 26 36 20 18 13 24 14 24 18 20 19 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,128,l),
(31,0,l),
(597,0,l),
(597,147,l),
(241,147,l),
(604,580,l),
(604,708,l),
(39,708,l),
(39,559,l),
(394,559,l)
);
},
{
closed = 1;
nodes = (
(364,765,l),
(517,950,l),
(354,950,l),
(234,765,l),
(234,765,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 3 0 8 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 95 0 4 4 44 77 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 0 4 5 103 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 14 13 12 11 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,527,l),
(34,387,l),
(273,387,l),
(34,115,l),
(34,0,l),
(480,0,l),
(480,140,l),
(240,140,l),
(480,412,l),
(480,527,l)
);
},
{
closed = 1;
nodes = (
(295,584,l),
(448,769,l),
(285,769,l),
(165,584,l),
(165,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 1 2 3 5 1 1 0 2 76 0 4 0 5 3 4 5 103 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 18 17 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,128,l),
(31,0,l),
(597,0,l),
(597,147,l),
(241,147,l),
(604,580,l),
(604,708,l),
(39,708,l),
(39,559,l),
(394,559,l)
);
},
{
closed = 1;
nodes = (
(226,899,o),
(226,857,qs),
(226,815,o),
(278,764,o),
(320,764,qs),
(362,764,o),
(415,814,o),
(415,857,qs),
(415,899,o),
(362,950,o),
(320,950,qs),
(279,950,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 3 0 8 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 4 97 7 1 4 4 44 77 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
7 1 4 0 5 0 4 5 105 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
11 10 0 0 17 15 10 21 11 21 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,527,l),
(34,387,l),
(273,387,l),
(34,115,l),
(34,0,l),
(480,0,l),
(480,140,l),
(240,140,l),
(480,412,l),
(480,527,l)
);
},
{
closed = 1;
nodes = (
(166,718,o),
(166,676,qs),
(166,634,o),
(218,583,o),
(260,583,qs),
(302,583,o),
(355,633,o),
(355,676,qs),
(355,718,o),
(302,769,o),
(260,769,qs),
(219,769,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 2 3 5 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 97 6 1 4 4 48 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 0 5 3 4 5 105 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
11 10 17 15 10 21 11 21 17 18 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,128,l),
(31,0,l),
(597,0,l),
(597,147,l),
(241,147,l),
(604,580,l),
(604,708,l),
(39,708,l),
(39,559,l),
(394,559,l)
);
},
{
closed = 1;
nodes = (
(536,950,l),
(390,950,l),
(327,863,l),
(262,950,l),
(116,950,l),
(275,765,l),
(378,765,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
13 1 6 4 3 1 3 0 8 1 2 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
10 10 0 0 10 16 10 16 15 14 12 11 0 9 0 9 17 18 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,527,l),
(34,387,l),
(273,387,l),
(34,115,l),
(34,0,l),
(480,0,l),
(480,140,l),
(240,140,l),
(480,412,l),
(480,527,l)
);
},
{
closed = 1;
nodes = (
(480,769,l),
(334,769,l),
(271,682,l),
(206,769,l),
(60,769,l),
(219,584,l),
(322,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
13 1 6 4 0 1 2 3 5 1 1 0 3 76 5 1 4 6 4 133 7 1 6 3 6 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 10 10 10 16 10 16 18 18 17 18 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(237,0,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(621,708,l),
(621,240,ls),
(621,200,o),
(581,141,o),
(535,141,qs),
(508,141,o),
(472,161,o),
(451,193,o),
(443,233,o),
(443,253,q),
(280,253,l),
(280,244,ls),
(280,126,o),
(415,-7,o),
(540,-7,qs),
(665,-7,o),
(784,127,o),
(784,254,qs),
(784,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 1 4 4 3 114 5 1 1 1 38 77 0 4 4 0 98 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 1 4 1 3 4 128 5 1 1 1 38 77 0 4 4 0 98 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 1 4 4 3 114 5 1 1 1 38 77 0 4 4 0 98 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 1 4 1 3 4 128 5 1 1 1 38 77 0 4 4 0 98 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 3 1 4 1 3 4 128 5 1 1 1 38 77 0 0 0 39 77 0 4 4 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 36 19 35 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 853;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,527,l),
(65,0,l),
(222,0,l),
(222,527,l)
);
},
{
closed = 1;
nodes = (
(46,724,o),
(46,680,qs),
(46,633,o),
(103,585,o),
(143,585,qs),
(185,585,o),
(240,634,o),
(240,680,qs),
(240,724,o),
(185,774,o),
(143,774,qs),
(104,774,o)
);
},
{
closed = 1;
nodes = (
(330,-39,o),
(325,-62,o),
(310,-79,o),
(286,-90,o),
(268,-90,qs),
(223,-90,l),
(223,-231,l),
(308,-231,ls),
(403,-231,o),
(487,-142,o),
(487,-51,qs),
(487,527,l),
(330,527,l),
(330,-28,ls)
);
},
{
closed = 1;
nodes = (
(312,725,o),
(312,680,qs),
(312,633,o),
(369,584,o),
(410,584,qs),
(451,584,o),
(507,632,o),
(507,680,qs),
(507,725,o),
(451,775,o),
(410,775,qs),
(370,775,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 1 3 3 2 97 10 7 9 3 2 2 48 77 4 1 1 1 41 77 0 0 0 39 77 0 6 6 5 96 0 5 5 43 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
10 7 9 3 2 8 1 3 1 2 3 105 4 1 1 1 41 77 0 0 0 39 77 0 6 6 5 96 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
10 7 9 3 2 8 1 3 1 2 3 105 0 6 0 5 6 5 100 4 1 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
31 30 5 4 37 35 30 41 31 41 25 23 22 20 17 16 11 9 4 15 5 15 17 16 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = ij;
unicode = 307;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,0,l),
(578,0,l),
(405,276,l),
(565,527,l),
(385,527,l),
(273,332,l),
(212,332,l),
(212,527,l),
(55,527,l),
(55,0,l),
(212,0,l),
(212,192,l),
(277,192,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 41 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(384,559,l),
(600,559,l),
(600,708,l),
(5,708,l),
(5,559,l),
(221,559,l),
(221,362,l),
(116,362,l),
(116,229,l),
(221,229,l),
(221,0,l),
(384,0,l),
(384,229,l),
(493,229,l),
(493,362,l),
(384,362,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
8 7 2 3 2 1 0 1 3 0 103 6 1 4 4 5 95 0 5 5 38 77 0 1 1 39 1 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,386,l),
(365,386,l),
(365,527,l),
(251,527,l),
(251,664,l),
(94,664,l),
(94,527,l),
(16,527,l),
(16,386,l),
(94,386,l),
(94,330,l),
(16,330,l),
(16,197,l),
(94,197,l),
(94,176,ls),
(94,77,o),
(195,-2,o),
(301,0,qs),
(365,0,l),
(365,140,l),
(299,140,ls),
(274,140,o),
(251,163,o),
(251,197,q),
(365,197,l),
(365,330,l),
(251,330,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 7 6 7 133 11 10 2 4 3 1 0 1 4 0 103 9 1 5 5 6 95 8 1 6 6 41 77 0 1 1 2 98 0 2 2 39 2 78 0 0 0 26 0 26 25 24 17 17 17 17 17 19 33 34 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 381;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = uni0136;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,0,l),
(690,0,l),
(459,370,l),
(689,708,l),
(502,708,l),
(323,426,l),
(237,426,l),
(237,708,l),
(74,708,l),
(74,0,l),
(237,0,l),
(237,278,l),
(332,278,l)
);
},
{
closed = 1;
nodes = (
(342,-212,o),
(323,-231,o),
(300,-247,o),
(290,-253,q),
(323,-301,l),
(347,-292,o),
(394,-261,o),
(429,-217,o),
(450,-165,o),
(450,-136,qs),
(450,-100,o),
(409,-47,o),
(369,-46,qs),
(337,-46,o),
(297,-82,o),
(297,-115,qs),
(297,-145,o),
(334,-178,o),
(360,-180,q),
(357,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
9 1 5 2 1 76 28 27 13 3 6 73 0 6 0 6 134 0 2 7 1 5 0 2 5 103 3 1 1 1 38 77 4 1 0 0 39 0 78 0 0 20 18 0 12 0 12 18 17 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,0,l),
(578,0,l),
(405,276,l),
(565,527,l),
(385,527,l),
(273,332,l),
(212,332,l),
(212,708,l),
(55,708,l),
(55,0,l),
(212,0,l),
(212,192,l),
(277,192,l)
);
},
{
closed = 1;
nodes = (
(277,-212,o),
(258,-231,o),
(235,-247,o),
(225,-253,q),
(258,-301,l),
(282,-292,o),
(329,-261,o),
(364,-217,o),
(385,-165,o),
(385,-136,qs),
(385,-100,o),
(344,-47,o),
(304,-46,qs),
(272,-46,o),
(232,-82,o),
(232,-115,qs),
(232,-145,o),
(269,-178,o),
(295,-180,q),
(292,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
9 1 5 2 1 76 28 27 13 3 6 73 0 6 0 6 134 0 2 7 1 5 0 2 5 103 0 1 1 38 77 0 3 3 41 77 4 1 0 0 39 0 78 0 0 20 18 0 12 0 12 18 17 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(580,0,l),
(580,147,l),
(237,147,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(308,-212,o),
(289,-231,o),
(266,-247,o),
(256,-253,q),
(289,-301,l),
(313,-292,o),
(360,-261,o),
(395,-217,o),
(416,-165,o),
(416,-136,qs),
(416,-100,o),
(375,-47,o),
(335,-46,qs),
(303,-46,o),
(263,-82,o),
(263,-115,qs),
(263,-145,o),
(300,-178,o),
(326,-180,q),
(323,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
21 20 6 3 3 73 0 3 1 3 134 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 38 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(212,708,l)
);
},
{
closed = 1;
nodes = (
(102,-212,o),
(83,-231,o),
(60,-247,o),
(50,-253,q),
(83,-301,l),
(107,-292,o),
(154,-261,o),
(189,-217,o),
(210,-165,o),
(210,-136,qs),
(210,-100,o),
(169,-47,o),
(129,-46,qs),
(97,-46,o),
(57,-82,o),
(57,-115,qs),
(57,-145,o),
(94,-178,o),
(120,-180,q),
(117,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
19 18 4 3 2 73 0 2 0 2 134 0 1 1 38 77 0 0 0 39 0 78 38 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,435,l),
(557,0,l),
(710,0,l),
(710,708,l),
(547,708,l),
(547,270,l),
(230,708,l),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(370,-212,o),
(351,-231,o),
(328,-247,o),
(318,-253,q),
(351,-301,l),
(375,-292,o),
(422,-261,o),
(457,-217,o),
(478,-165,o),
(478,-136,qs),
(478,-100,o),
(437,-47,o),
(397,-46,qs),
(365,-46,o),
(325,-82,o),
(325,-115,qs),
(325,-145,o),
(362,-178,o),
(388,-180,q),
(385,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
6 1 2 1 0 1 76 25 24 10 3 4 73 0 4 1 4 134 5 3 2 0 0 38 77 2 1 1 1 39 1 78 0 0 17 15 0 9 0 9 18 17 18 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,266,ls),
(212,288,o),
(221,332,o),
(243,369,o),
(285,394,o),
(313,394,qs),
(341,394,o),
(379,375,o),
(401,341,o),
(409,299,o),
(409,277,qs),
(409,0,l),
(567,0,l),
(567,290,ls),
(567,347,o),
(545,441,o),
(516,476,qs),
(490,505,o),
(415,538,o),
(365,538,qs),
(327,537,o),
(245,507,o),
(210,469,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(284,-212,o),
(265,-231,o),
(242,-247,o),
(232,-253,q),
(265,-301,l),
(289,-292,o),
(336,-261,o),
(371,-217,o),
(392,-165,o),
(392,-136,qs),
(392,-100,o),
(351,-47,o),
(311,-46,qs),
(279,-46,o),
(239,-82,o),
(239,-115,qs),
(239,-145,o),
(276,-178,o),
(302,-180,q),
(299,-190,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
42 41 27 3 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 5 1 5 134 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 5 1 5 134 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 17 21 37 22 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,0,l),
(237,0,l),
(237,246,l),
(338,246,l),
(477,0,l),
(661,0,l),
(501,267,l),
(572,289,o),
(644,403,o),
(646,481,qs),
(646,551,o),
(596,640,o),
(516,690,o),
(416,708,o),
(367,708,qs),
(74,708,l)
);
},
{
closed = 1;
nodes = (
(237,559,l),
(369,559,ls),
(394,559,o),
(437,552,o),
(468,533,o),
(486,500,o),
(485,475,qs),
(483,427,o),
(419,387,o),
(366,387,qs),
(237,387,l)
);
},
{
closed = 1;
nodes = (
(329,-212,o),
(310,-231,o),
(287,-247,o),
(277,-253,q),
(310,-301,l),
(334,-292,o),
(381,-261,o),
(416,-217,o),
(437,-165,o),
(437,-136,qs),
(437,-100,o),
(396,-47,o),
(356,-46,qs),
(324,-46,o),
(284,-82,o),
(284,-115,qs),
(284,-145,o),
(321,-178,o),
(347,-180,q),
(344,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
8 1 2 4 1 76 42 41 27 3 6 73 0 6 1 6 134 8 1 4 0 2 1 4 2 103 0 5 5 0 95 7 1 0 0 38 77 3 1 1 1 39 1 78 17 16 1 0 34 32 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,527,l),
(55,0,l),
(212,0,l),
(212,238,ls),
(212,284,o),
(235,347,o),
(265,366,qs),
(278,374,o),
(313,381,o),
(350,384,o),
(386,383,o),
(400,383,q),
(400,534,l),
(393,536,o),
(368,537,o),
(355,537,qs),
(312,537,o),
(237,510,o),
(206,469,q),
(196,527,l)
);
},
{
closed = 1;
nodes = (
(103,-212,o),
(84,-231,o),
(61,-247,o),
(51,-253,q),
(84,-301,l),
(108,-292,o),
(155,-261,o),
(190,-217,o),
(211,-165,o),
(211,-136,qs),
(211,-100,o),
(170,-47,o),
(130,-46,qs),
(98,-46,o),
(58,-84,o),
(58,-115,qs),
(58,-145,o),
(95,-178,o),
(121,-180,q),
(118,-190,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
6 1 1 0 1 76 35 34 20 3 4 73 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
6 1 3 0 1 76 35 34 20 3 4 73 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 4 2 4 134 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 2 4 134 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 17 23 34 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = uni0122;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,470,o),
(266,530,o),
(336,567,o),
(386,567,qs),
(444,567,o),
(522,516,o),
(532,467,q),
(692,467,l),
(685,530,o),
(631,624,o),
(548,686,o),
(443,717,o),
(385,717,qs),
(302,717,o),
(172,666,o),
(82,571,o),
(35,437,o),
(35,354,qs),
(35,273,o),
(82,140,o),
(172,45,o),
(302,-7,o),
(385,-7,qs),
(463,-7,o),
(589,47,o),
(630,96,qs),
(655,126,o),
(685,194,o),
(700,267,o),
(705,345,o),
(705,385,q),
(366,385,l),
(366,250,l),
(539,250,l),
(535,222,o),
(508,181,o),
(467,155,o),
(416,143,o),
(389,143,qs),
(339,143,o),
(268,178,o),
(223,237,o),
(203,314,o),
(203,355,qs),
(203,394,o)
);
},
{
closed = 1;
nodes = (
(361,-212,o),
(342,-231,o),
(319,-247,o),
(309,-253,q),
(342,-301,l),
(366,-292,o),
(413,-261,o),
(448,-217,o),
(469,-165,o),
(469,-136,qs),
(469,-100,o),
(428,-47,o),
(388,-46,qs),
(356,-46,o),
(316,-82,o),
(316,-115,qs),
(316,-145,o),
(353,-178,o),
(379,-180,q),
(376,-190,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
60 59 45 3 7 73 0 5 6 2 6 5 2 128 0 7 3 7 134 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 41 34 20 40 39 17 20 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,11,o),
(421,-44,o),
(396,-88,o),
(350,-115,o),
(315,-115,qs),
(275,-115,o),
(225,-83,o),
(220,-61,q),
(56,-61,l),
(64,-113,o),
(111,-189,o),
(181,-237,o),
(268,-261,o),
(315,-261,qs),
(346,-261,o),
(413,-250,o),
(476,-222,o),
(526,-180,o),
(545,-150,qs),
(562,-122,o),
(581,-62,o),
(588,2,o),
(590,69,o),
(590,102,qs),
(590,527,l),
(450,527,l),
(435,475,l),
(378,538,o),
(286,538,qs),
(221,538,o),
(129,493,o),
(65,416,o),
(34,318,o),
(34,261,qs),
(34,207,o),
(63,109,o),
(121,34,o),
(211,-8,o),
(277,-8,qs),
(327,-8,o),
(403,21,o),
(430,55,q),
(430,38,ls)
);
},
{
closed = 1;
nodes = (
(235,154,o),
(207,188,o),
(193,233,o),
(193,259,qs),
(193,284,o),
(206,332,o),
(234,371,o),
(280,394,o),
(312,394,qs),
(371,394,o),
(432,319,o),
(432,266,qs),
(432,238,o),
(418,191,o),
(388,155,o),
(342,133,o),
(311,133,qs),
(281,133,o)
);
},
{
closed = 1;
nodes = (
(339,780,o),
(363,804,o),
(390,823,o),
(402,830,q),
(362,886,l),
(332,876,o),
(278,838,o),
(234,787,o),
(209,726,o),
(209,692,qs),
(209,671,o),
(219,630,o),
(242,601,o),
(279,583,o),
(302,583,qs),
(338,582,o),
(393,625,o),
(393,665,qs),
(393,699,o),
(348,741,o),
(317,742,q),
(321,754,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
15 1 7 1 0 1 0 6 2 76 78 77 2 8 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
15 1 7 2 0 1 0 6 2 76 78 77 2 8 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 4 0 5 0 4 5 128 0 9 9 8 97 0 8 8 46 77 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 47 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 9 9 8 97 0 8 8 46 77 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 4 0 5 0 4 5 128 0 8 0 9 1 8 9 105 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 10 1 6 6 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
44 43 68 66 62 61 52 50 43 60 44 60 34 20 42 18 40 34 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(212,708,l)
);
},
{
closed = 1;
nodes = (
(247,398,o),
(247,356,qs),
(247,314,o),
(299,263,o),
(341,263,qs),
(383,263,o),
(436,314,o),
(436,356,qs),
(436,398,o),
(383,449,o),
(341,449,qs),
(300,449,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 0 2 3 105 0 1 1 38 77 0 0 0 39 0 78 5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(580,0,l),
(580,147,l),
(237,147,l),
(237,708,l)
);
},
{
closed = 1;
nodes = (
(351,448,o),
(351,406,qs),
(351,364,o),
(403,313,o),
(445,313,qs),
(487,313,o),
(540,364,o),
(540,406,qs),
(540,448,o),
(487,499,o),
(445,499,qs),
(404,499,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 4 0 3 4 105 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 7 6 13 11 6 17 7 17 17 17 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = dcroat;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,155,o),
(206,189,o),
(192,235,o),
(192,262,qs),
(192,287,o),
(205,334,o),
(234,371,o),
(279,392,o),
(311,392,qs),
(341,392,o),
(387,372,o),
(416,336,o),
(430,290,o),
(430,264,qs),
(430,237,o),
(416,191,o),
(386,156,o),
(341,134,o),
(311,133,qs),
(280,133,o)
);
},
{
closed = 1;
nodes = (
(588,554,l),
(651,554,l),
(651,652,l),
(588,652,l),
(588,708,l),
(430,708,l),
(430,652,l),
(335,652,l),
(335,554,l),
(430,554,l),
(430,489,l),
(402,514,o),
(328,538,o),
(284,538,qs),
(224,538,o),
(133,497,o),
(69,423,o),
(34,322,o),
(34,262,qs),
(34,205,o),
(65,106,o),
(126,33,o),
(214,-8,o),
(273,-8,qs),
(329,-6,o),
(403,23,o),
(434,57,q),
(438,0,l),
(588,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
37 1 1 3 21 1 2 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
37 1 1 3 21 1 9 0 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 5 8 1 4 3 5 4 103 0 6 6 38 77 0 1 1 3 97 0 3 3 49 77 10 1 0 0 2 97 11 9 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
7 1 5 8 1 4 3 5 4 103 0 6 6 38 77 0 1 1 3 97 0 3 3 49 77 11 1 9 9 39 77 10 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
20 20 1 0 20 48 20 48 47 46 45 44 43 42 41 40 39 38 35 33 25 23 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(55,0,l),
(212,0,l),
(212,708,l)
);
},
{
closed = 1;
nodes = (
(260,433,o),
(271,417,q),
(302,426,o),
(357,465,o),
(398,516,o),
(422,577,o),
(423,610,qs),
(423,631,o),
(412,670,o),
(389,701,o),
(355,719,o),
(332,719,qs),
(294,719,o),
(243,676,o),
(243,636,qs),
(243,602,o),
(285,561,o),
(317,558,q),
(313,548,o),
(292,524,o),
(266,501,o),
(239,483,o),
(229,479,q),
(240,463,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
25 9 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 46 77 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
43 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = dcaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(636,433,o),
(647,417,q),
(678,426,o),
(733,465,o),
(774,516,o),
(798,577,o),
(799,610,qs),
(799,631,o),
(788,670,o),
(765,701,o),
(731,719,o),
(708,719,qs),
(670,719,o),
(619,676,o),
(619,636,qs),
(619,602,o),
(661,561,o),
(693,558,q),
(689,548,o),
(668,524,o),
(642,501,o),
(615,483,o),
(605,479,q),
(616,463,o)
);
},
{
closed = 1;
nodes = (
(588,708,l),
(430,708,l),
(430,489,l),
(402,514,o),
(328,538,o),
(284,538,qs),
(224,538,o),
(133,497,o),
(69,423,o),
(34,322,o),
(34,262,qs),
(34,205,o),
(65,106,o),
(126,33,o),
(214,-8,o),
(273,-8,qs),
(329,-6,o),
(403,23,o),
(434,57,q),
(438,0,l),
(588,0,l)
);
},
{
closed = 1;
nodes = (
(235,155,o),
(206,189,o),
(192,235,o),
(192,262,qs),
(192,287,o),
(205,334,o),
(234,371,o),
(279,392,o),
(311,392,qs),
(341,392,o),
(387,372,o),
(416,336,o),
(430,290,o),
(430,264,qs),
(430,237,o),
(416,191,o),
(386,156,o),
(341,134,o),
(311,133,qs),
(280,133,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 1 2 0 41 21 2 6 2 25 1 1 5 3 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 1 2 3 41 21 2 6 2 25 1 1 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 1 2 3 41 21 2 6 2 25 1 4 5 3 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
3 1 0 0 46 77 0 6 6 2 97 0 2 2 49 77 8 1 5 5 1 97 7 4 2 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 46 77 0 3 3 38 77 0 6 6 2 97 0 2 2 49 77 8 1 5 5 1 97 7 4 2 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 0 0 46 77 0 3 3 38 77 0 6 6 2 97 0 2 2 49 77 7 1 4 4 39 77 8 1 5 5 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
46 45 24 24 56 54 45 64 46 64 24 44 24 44 19 40 47 42 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,527,l),
(166,0,l),
(323,0,l),
(323,266,ls),
(323,288,o),
(332,332,o),
(354,369,o),
(396,394,o),
(424,394,qs),
(452,394,o),
(490,375,o),
(512,341,o),
(520,299,o),
(520,277,qs),
(520,0,l),
(678,0,l),
(678,290,ls),
(678,347,o),
(656,441,o),
(627,476,qs),
(601,505,o),
(526,538,o),
(476,538,qs),
(438,537,o),
(356,507,o),
(321,469,q),
(313,527,l)
);
},
{
closed = 1;
nodes = (
(1,433,o),
(12,417,q),
(43,426,o),
(98,465,o),
(139,516,o),
(163,577,o),
(164,610,qs),
(164,631,o),
(153,670,o),
(130,701,o),
(96,719,o),
(73,719,qs),
(35,719,o),
(-16,676,o),
(-16,636,qs),
(-16,602,o),
(26,561,o),
(58,558,q),
(54,548,o),
(33,524,o),
(7,501,o),
(-20,483,o),
(-30,479,q),
(-19,463,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
32 1 0 5 48 1 2 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
32 1 0 5 48 1 2 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 5 5 46 77 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 5 5 46 77 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
43 17 21 37 22 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,433,o),
(341,417,q),
(372,426,o),
(427,465,o),
(468,516,o),
(492,577,o),
(493,610,qs),
(493,631,o),
(482,670,o),
(459,701,o),
(424,719,o),
(401,719,qs),
(363,719,o),
(313,676,o),
(313,636,qs),
(313,602,o),
(355,561,o),
(387,558,q),
(383,548,o),
(362,524,o),
(336,501,o),
(309,483,o),
(299,479,q),
(310,463,o)
);
},
{
closed = 1;
nodes = (
(74,708,l),
(74,0,l),
(580,0,l),
(580,147,l),
(237,147,l),
(237,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
21 5 2 1 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
21 5 2 1 3 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 46 77 0 1 1 2 96 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 46 77 0 3 3 38 77 0 1 1 2 96 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 28 42 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,432,o),
(467,465,o),
(508,516,o),
(532,577,o),
(533,610,qs),
(533,631,o),
(522,670,o),
(499,701,o),
(465,719,o),
(442,719,qs),
(404,719,o),
(353,676,o),
(353,636,qs),
(353,602,o),
(395,561,o),
(427,558,q),
(423,548,o),
(403,523,o),
(382,503,o),
(363,489,o),
(353,484,q),
(387,422,l)
);
},
{
closed = 1;
nodes = (
(351,527,l),
(251,527,l),
(251,664,l),
(94,664,l),
(94,527,l),
(16,527,l),
(16,386,l),
(94,386,l),
(94,176,ls),
(94,77,o),
(195,-2,o),
(301,0,qs),
(388,0,l),
(388,140,l),
(308,140,ls),
(275,140,o),
(251,173,o),
(251,199,qs),
(251,386,l),
(351,386,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
5 1 4 5 21 1 3 4 2 76 0 5 0 4 0 5 4 128 0 0 0 46 77 8 7 2 3 3 4 95 6 1 4 4 41 77 0 1 1 2 96 0 2 2 39 2 78 22 22 22 41 22 41 17 17 17 19 33 45 42 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,0,l),
(819,0,l),
(995,708,l),
(812,708,l),
(712,206,l),
(603,708,l),
(395,708,l),
(284,206,l),
(184,708,l),
(0,708,l),
(176,0,l),
(389,0,l),
(497,492,l)
);
},
{
closed = 1;
nodes = (
(499,950,l),
(336,950,l),
(489,765,l),
(619,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
12 7 4 3 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
7 1 6 6 5 95 0 5 5 44 77 3 2 2 1 1 38 77 4 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 5 7 1 6 1 5 6 103 3 2 2 1 1 38 77 4 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
13 13 13 16 13 16 19 17 18 18 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 995;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,328,l),
(534,0,l),
(707,0,l),
(872,527,l),
(705,527,l),
(619,186,l),
(522,527,l),
(359,527,l),
(262,186,l),
(175,527,l),
(1,527,l),
(166,0,l),
(341,0,l)
);
},
{
closed = 1;
nodes = (
(418,769,l),
(255,769,l),
(408,584,l),
(538,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
11 6 3 3 3 0 1 76 0 5 8 1 6 0 5 6 103 2 1 2 0 0 41 77 7 4 2 3 3 39 3 78 13 13 0 0 13 16 13 16 15 14 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 873;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,0,l),
(819,0,l),
(995,708,l),
(812,708,l),
(712,206,l),
(603,708,l),
(395,708,l),
(284,206,l),
(184,708,l),
(0,708,l),
(176,0,l),
(389,0,l),
(497,492,l)
);
},
{
closed = 1;
nodes = (
(526,765,l),
(679,950,l),
(516,950,l),
(396,765,l),
(396,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
12 7 4 3 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 6 6 5 95 0 5 5 44 77 3 2 2 1 1 38 77 4 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 5 0 6 1 5 6 103 3 2 2 1 1 38 77 4 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 19 17 18 18 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 995;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,328,l),
(534,0,l),
(707,0,l),
(872,527,l),
(705,527,l),
(619,186,l),
(522,527,l),
(359,527,l),
(262,186,l),
(175,527,l),
(1,527,l),
(166,0,l),
(341,0,l)
);
},
{
closed = 1;
nodes = (
(485,584,l),
(638,769,l),
(475,769,l),
(355,584,l),
(355,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
11 6 3 3 3 0 1 76 0 5 0 6 0 5 6 103 2 1 2 0 0 41 77 7 4 2 3 3 39 3 78 0 0 17 16 15 14 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 873;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,0,l),
(819,0,l),
(995,708,l),
(812,708,l),
(712,206,l),
(603,708,l),
(395,708,l),
(284,206,l),
(184,708,l),
(0,708,l),
(176,0,l),
(389,0,l),
(497,492,l)
);
},
{
closed = 1;
nodes = (
(278,894,o),
(278,853,qs),
(278,810,o),
(330,764,o),
(368,764,qs),
(406,764,o),
(458,810,o),
(458,853,qs),
(458,895,o),
(406,941,o),
(368,941,qs),
(330,941,o)
);
},
{
closed = 1;
nodes = (
(546,894,o),
(546,853,qs),
(546,810,o),
(598,764,o),
(636,764,qs),
(674,764,o),
(727,810,o),
(727,853,qs),
(727,895,o),
(674,941,o),
(636,941,qs),
(599,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
12 7 4 3 0 1 1 76 10 7 9 3 5 8 1 6 1 5 6 105 3 2 2 1 1 38 77 4 1 0 0 39 0 78 26 25 14 13 32 30 25 36 26 36 20 18 13 24 14 24 17 18 18 17 16 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 995;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,328,l),
(534,0,l),
(707,0,l),
(872,527,l),
(705,527,l),
(619,186,l),
(522,527,l),
(359,527,l),
(262,186,l),
(175,527,l),
(1,527,l),
(166,0,l),
(341,0,l)
);
},
{
closed = 1;
nodes = (
(216,713,o),
(216,672,qs),
(216,629,o),
(268,583,o),
(306,583,qs),
(344,583,o),
(396,629,o),
(396,672,qs),
(396,714,o),
(344,760,o),
(306,760,qs),
(268,760,o)
);
},
{
closed = 1;
nodes = (
(484,713,o),
(484,672,qs),
(484,629,o),
(536,583,o),
(574,583,qs),
(612,583,o),
(665,629,o),
(665,672,qs),
(665,714,o),
(612,760,o),
(574,760,qs),
(537,760,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 6 6 5 97 11 7 10 3 5 5 48 77 2 1 2 0 0 41 77 9 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
11 7 10 3 5 8 1 6 0 5 6 105 2 1 2 0 0 41 77 9 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
26 25 14 13 0 0 32 30 25 36 26 36 20 18 13 24 14 24 0 12 0 12 17 18 18 17 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 873;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,708,l),
(272,263,l),
(272,0,l),
(435,0,l),
(435,264,l),
(434,264,l),
(435,264,l),
(703,708,l),
(519,708,l),
(477,634,o),
(396,488,o),
(355,414,q),
(189,708,l)
);
},
{
closed = 1;
nodes = (
(310,950,l),
(147,950,l),
(300,765,l),
(430,765,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
10 5 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 4 3 95 0 3 3 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 5 1 4 0 3 4 103 2 1 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
13 13 13 16 13 16 18 18 20 19 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,-83,o),
(104,-64,q),
(91,-96,o),
(67,-163,o),
(55,-196,q),
(106,-229,o),
(221,-261,o),
(281,-261,qs),
(356,-261,o),
(476,-215,o),
(516,-167,qs),
(538,-139,o),
(564,-74,o),
(576,-2,o),
(577,74,o),
(577,110,qs),
(577,527,l),
(419,527,l),
(419,263,ls),
(419,242,o),
(411,197,o),
(388,160,o),
(348,134,o),
(317,134,qs),
(286,134,o),
(246,157,o),
(225,193,o),
(217,238,o),
(217,261,qs),
(217,527,l),
(60,527,l),
(60,235,ls),
(60,173,o),
(84,80,o),
(113,48,qs),
(138,22,o),
(215,-8,o),
(267,-8,qs),
(285,-8,o),
(326,-2,o),
(368,11,o),
(405,33,o),
(419,51,q),
(420,3,o),
(395,-60,o),
(352,-97,o),
(298,-112,o),
(269,-112,qs),
(219,-112,o)
);
},
{
closed = 1;
nodes = (
(269,769,l),
(106,769,l),
(259,584,l),
(389,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
5 1 1 3 46 1 0 1 43 1 5 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 1 2 3 1 128 0 6 9 1 7 2 6 7 103 4 1 2 2 41 77 0 1 1 47 77 8 1 0 0 5 98 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 2 1 2 3 1 128 0 6 9 1 7 2 6 7 103 8 1 0 0 5 0 5 102 4 1 2 2 41 77 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
49 49 1 0 49 52 49 52 51 50 41 39 31 30 25 23 18 17 11 9 0 48 1 48 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni0405;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,549,o),
(555,632,o),
(487,688,o),
(398,717,o),
(345,717,qs),
(294,717,o),
(198,698,o),
(117,649,o),
(65,565,o),
(65,501,qs),
(65,437,o),
(116,359,o),
(205,311,o),
(323,281,o),
(391,266,qs),
(419,259,o),
(456,232,o),
(456,206,qs),
(456,188,o),
(437,163,o),
(409,148,o),
(373,142,o),
(357,142,qs),
(331,142,o),
(282,151,o),
(243,171,o),
(215,204,o),
(209,229,q),
(44,229,l),
(49,164,o),
(103,74,o),
(187,17,o),
(291,-8,o),
(346,-8,qs),
(401,-8,o),
(501,18,o),
(576,72,o),
(620,157,o),
(620,216,qs),
(618,282,o),
(569,356,o),
(490,398,o),
(390,420,o),
(338,434,qs),
(312,441,o),
(271,453,o),
(242,469,o),
(227,491,o),
(227,508,qs),
(227,524,o),
(244,548,o),
(272,563,o),
(307,570,o),
(325,570,qs),
(376,570,o),
(439,530,o),
(445,492,q),
(604,492,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 30 1 78 0 0 0 57 0 57 53 51 35 33 29 28 24 22 34 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = uni0405;
unicode = 1029;
},
{
glyphname = uni0455;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,388,o),
(325,363,q),
(478,363,l),
(474,410,o),
(436,477,o),
(378,519,o),
(301,538,o),
(259,538,qs),
(218,538,o),
(139,520,o),
(78,481,o),
(40,416,o),
(40,370,qs),
(40,328,o),
(77,272,o),
(131,240,o),
(205,217,o),
(244,209,qs),
(260,206,o),
(292,199,o),
(319,191,o),
(337,176,o),
(337,159,qs),
(335,140,o),
(303,121,o),
(276,121,qs),
(243,121,o),
(194,146,o),
(188,173,q),
(26,173,l),
(32,121,o),
(79,53,o),
(147,10,o),
(231,-8,o),
(274,-8,qs),
(313,-8,o),
(391,9,o),
(452,51,o),
(491,117,o),
(492,166,qs),
(491,221,o),
(439,282,o),
(363,312,o),
(273,327,o),
(233,338,qs),
(210,344,o),
(193,361,o),
(193,375,qs),
(195,394,o),
(229,409,o),
(253,409,qs),
(281,409,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
3 1 5 0 28 1 3 2 2 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 49 48 44 42 26 24 22 21 17 15 0 51 1 51 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = uni0455;
unicode = 1109;
},
{
glyphname = uni0458;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,-39,o),
(58,-62,o),
(43,-79,o),
(19,-90,o),
(1,-90,qs),
(-44,-90,l),
(-44,-231,l),
(41,-231,ls),
(136,-231,o),
(220,-142,o),
(220,-51,qs),
(220,527,l),
(63,527,l),
(63,-28,ls)
);
},
{
closed = 1;
nodes = (
(45,725,o),
(45,680,qs),
(45,633,o),
(102,584,o),
(143,584,qs),
(184,584,o),
(240,632,o),
(240,680,qs),
(240,725,o),
(184,775,o),
(143,775,qs),
(103,775,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 0 4 0 3 4 105 0 0 0 22 77 0 2 2 1 96 0 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 3 0 4 0 3 4 105 0 2 0 1 2 1 100 0 0 0 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
15 14 21 19 14 25 15 25 33 35 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = uni0458;
unicode = 1112;
},
{
glyphname = uni0408;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,708,l),
(370,240,ls),
(370,200,o),
(330,141,o),
(284,141,qs),
(257,141,o),
(221,161,o),
(200,193,o),
(192,233,o),
(192,253,q),
(29,253,l),
(29,244,ls),
(29,126,o),
(164,-7,o),
(289,-7,qs),
(414,-7,o),
(533,127,o),
(533,254,qs),
(533,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 3 2 2 1 114 0 3 3 20 77 0 2 2 0 98 0 0 0 28 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 3 1 2 128 0 3 3 20 77 0 2 2 0 98 0 0 0 28 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 3 2 2 1 114 0 3 3 20 77 0 2 2 0 98 0 0 0 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 3 1 2 128 0 3 3 20 77 0 2 2 0 98 0 0 0 28 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 36 19 34 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = uni0408;
unicode = 1032;
},
{
glyphname = uni040E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,708,l),
(17,708,l),
(272,217,l),
(260,195,o),
(231,169,o),
(198,155,o),
(161,150,o),
(142,150,qs),
(114,150,l),
(114,0,l),
(158,0,ls),
(233,0,o),
(332,42,o),
(399,115,o),
(446,212,o),
(470,266,qs),
(518,377,o),
(612,596,o),
(660,708,q),
(482,708,l),
(357,378,l)
);
},
{
closed = 1;
nodes = (
(152,849,o),
(258,764,o),
(346,764,qs),
(434,764,o),
(540,849,o),
(541,941,q),
(415,941,l),
(414,907,o),
(381,871,o),
(346,871,qs),
(311,871,o),
(278,907,o),
(277,941,q),
(151,941,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 17 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
8 7 2 5 4 4 5 112 0 4 0 6 0 4 6 106 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 106 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
21 21 21 34 21 34 34 18 36 21 33 39 16 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = uni040E;
unicode = 1038;
},
{
glyphname = uni045E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,527,l),
(8,527,l),
(231,-37,l),
(211,-76,o),
(149,-110,o),
(99,-110,qs),
(81,-110,l),
(81,-264,l),
(119,-264,ls),
(192,-264,o),
(293,-222,o),
(366,-141,o),
(418,-23,o),
(442,55,qs),
(588,527,l),
(414,527,l),
(316,154,l)
);
},
{
closed = 1;
nodes = (
(121,668,o),
(227,583,o),
(315,583,qs),
(403,583,o),
(509,668,o),
(510,760,q),
(384,760,l),
(383,726,o),
(350,690,o),
(315,690,qs),
(280,690,o),
(247,726,o),
(246,760,q),
(120,760,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
16 13 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
8 7 2 5 4 4 5 112 0 6 6 4 97 0 4 4 20 77 3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 7 2 5 4 4 5 112 0 2 0 1 2 1 102 0 6 6 4 97 0 4 4 20 77 3 1 0 0 22 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
8 7 2 5 4 5 133 0 2 0 1 2 1 102 0 6 6 4 97 0 4 4 20 77 3 1 0 0 22 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 106 0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
17 17 17 30 17 30 34 18 36 19 33 37 16 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = uni045E;
unicode = 1118;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,-39,o),
(58,-62,o),
(43,-79,o),
(19,-90,o),
(1,-90,qs),
(-44,-90,l),
(-44,-231,l),
(41,-231,ls),
(136,-231,o),
(220,-142,o),
(220,-51,qs),
(220,527,l),
(63,527,l),
(63,-28,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
33 35 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = uni0237;
unicode = 567;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = ExtraBold;
properties = (
{
key = styleNames;
values = (
{
language = ENG;
value = ExtraBold;
}
);
},
{
key = postscriptFullName;
value = "Onest ExtraBold";
},
{
key = postscriptFontName;
value = "Onest-ExtraBold";
}
);
weightClass = 800;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 15;
"@MMK_R_O" = -30;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_colon" = 20;
"@MMK_R_period" = 30;
"@MMK_R_uni0422" = -50;
"@MMK_R_w" = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -35;
"@MMK_R_O" = 10;
"@MMK_R_W" = -5;
"@MMK_R_Y" = -20;
"@MMK_R_period" = -20;
"@MMK_R_uni0417" = 10;
};
"@MMK_L_K_alt" = {
"@MMK_R_a" = -10;
"@MMK_R_uni0422" = 10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_O" = -5;
"@MMK_R_a" = -35;
"@MMK_R_period" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -60;
"@MMK_R_O" = -20;
"@MMK_R_a" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_d" = -70;
"@MMK_R_period" = -80;
"@MMK_R_r" = -30;
"@MMK_R_w" = -20;
};
"@MMK_L_period" = {
"@MMK_R_A" = 30;
"@MMK_R_O" = -20;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -80;
"@MMK_R_uni0422" = -80;
};
"@MMK_L_r" = {
"@MMK_R_d" = -10;
"@MMK_R_t" = 30;
};
"@MMK_L_uni0413" = {
"@MMK_R_colon" = -40;
"@MMK_R_period" = -100;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0432" = -40;
"@MMK_R_uni0433" = -50;
"@MMK_R_uni0444" = -80;
};
"@MMK_L_uni0414" = {
"@MMK_R_period" = 30;
};
"@MMK_L_uni0422" = {
"@MMK_R_A" = -50;
"@MMK_R_a" = -60;
"@MMK_R_colon" = -20;
"@MMK_R_d" = -50;
"@MMK_R_period" = -80;
"@MMK_R_r" = -20;
"@MMK_R_uni0422" = 40;
};
"@MMK_L_uni0433" = {
"@MMK_R_period" = -40;
"@MMK_R_uni0444" = -10;
};
"@MMK_L_uni0434" = {
"@MMK_R_period" = 40;
};
A = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aacute = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Acircumflex = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Adieresis = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Agrave = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Amacron = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aogonek = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aring = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Atilde = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
B = {
V = -10;
W = -10;
W_alt = -10;
Wacute = -10;
Wcircumflex = -10;
Wdieresis = -10;
Wgrave = -10;
X = -10;
Y = -10;
Yacute = -10;
Ycircumflex = -10;
Ydieresis = -10;
Ygrave = -10;
};
C = {
J = 10;
V = -25;
X = -40;
};
Cacute = {
J = 10;
V = -34;
X = -40;
};
Ccaron = {
J = 10;
V = -34;
X = -40;
};
Ccedilla = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ccircumflex = {
J = 10;
V = -34;
X = -40;
};
Cdotaccent = {
J = 10;
V = -34;
X = -40;
};
D = {
C = 15;
Cacute = 15;
Ccaron = 15;
Ccedilla = 15;
Ccircumflex = 15;
Cdotaccent = 15;
G = 15;
Gbreve = 15;
Gcircumflex = 15;
Gdotaccent = 15;
J = 10;
O = 15;
OE = 15;
Oacute = 15;
Obreve = 15;
Ocircumflex = 15;
Odieresis = 15;
Ograve = 15;
Ohungarumlaut = 15;
Omacron = 15;
Oslash = 15;
Otilde = 15;
Q = 15;
S = 15;
Sacute = 15;
Scaron = 15;
Scedilla = 15;
Scircumflex = 15;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
d = 10;
uni0122 = 15;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Dcaron = {
J = 10;
V = -34;
X = -40;
};
Dcroat = {
J = 10;
V = -34;
X = -40;
};
E = {
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
};
Eth = {
J = 10;
V = -34;
X = -40;
};
F = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
J = -30;
T = 20;
Tcaron = 20;
a = -30;
a00E2.alt = -30;
a00E4.alt = -30;
a0103.alt = -30;
a2_alt = -25;
a_alt = -30;
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
agrave = -30;
amacron = -30;
aogonek = -30;
aring = -30;
atilde = -30;
c = -25;
c_alt = -25;
cacute = -25;
ccaron = -25;
ccedilla = -25;
ccircumflex = -25;
cdotaccent = -25;
comma = -30;
d = -25;
dcaron = -25;
dcroat = -25;
e = -25;
eacute = -25;
ebreve = -25;
ecaron = -25;
ecircumflex = -25;
edieresis = -25;
edotaccent = -25;
egrave = -25;
emacron = -25;
eogonek = -25;
eth = -25;
g = -25;
gbreve = -25;
gcircumflex = -25;
gdotaccent = -25;
o = -25;
oacute = -25;
obreve = -25;
ocircumflex = -25;
odieresis = -25;
oe = -25;
ograve = -25;
ohungarumlaut = -25;
omacron = -25;
oslash = -25;
otilde = -25;
period = -30;
q = -25;
quotedblbase = -30;
quotedblright = 20;
quoteright = 20;
s = -25;
s_alt = -25;
sacute = -25;
scaron = -25;
scedilla = -25;
scircumflex = -25;
uni0123 = -25;
uni0162 = 20;
uni0219 = -25;
uni021A = 20;
uni0410 = -50;
uni0422 = 20;
uni0430 = -30;
};
G = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -40;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Gbreve = {
J = 10;
V = -34;
X = -40;
};
Gcircumflex = {
J = 10;
V = -34;
X = -40;
};
Gdotaccent = {
J = 10;
V = -34;
X = -40;
};
I = {
bracketright = 40;
};
J = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -10;
};
K = {
v = -30;
y2_alt = -40;
};
K_alt = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
d = -20;
uni0122 = -30;
v = -30;
w = -20;
w_alt = -20;
wacute = -20;
wcircumflex = -20;
wdieresis = -20;
wgrave = -20;
y2_alt = -40;
};
L = {
A = 20;
Aacute = 20;
Acircumflex = 20;
Adieresis = 20;
Agrave = 20;
Amacron = 20;
Aogonek = 20;
Aring = 20;
Atilde = 20;
J = 30;
T = -40;
Tcaron = -40;
V = -50;
W = -40;
W_alt = -40;
Wacute = -40;
Wcircumflex = -40;
Wdieresis = -40;
Wgrave = -40;
X = 10;
Y = -80;
Yacute = -80;
Ycircumflex = -80;
Ydieresis = -80;
Ygrave = -80;
a = 10;
a00E2.alt = 10;
a00E4.alt = 10;
a0103.alt = 10;
a2_alt = 10;
a_alt = 10;
aacute = 10;
abreve = 10;
acircumflex = 10;
adieresis = 10;
agrave = 10;
amacron = 10;
aogonek = 10;
aring = 10;
atilde = 10;
c = 10;
c_alt = 10;
cacute = 10;
ccaron = 10;
ccedilla = 10;
ccircumflex = 10;
cdotaccent = 10;
colon = 20;
comma = 40;
d = 10;
dcaron = 10;
dcroat = 10;
e = 10;
eacute = 10;
ebreve = 10;
ecaron = 10;
ecircumflex = 10;
edieresis = 10;
edotaccent = 10;
egrave = 10;
emacron = 10;
eogonek = 10;
eth = 10;
g = 10;
gbreve = 10;
gcircumflex = 10;
gdotaccent = 10;
j = 20;
o = 10;
oacute = 10;
obreve = 10;
ocircumflex = 10;
odieresis = 10;
oe = 10;
ograve = 10;
ohungarumlaut = 10;
omacron = 10;
oslash = 10;
otilde = 10;
period = 40;
q = 10;
quotedblbase = 40;
quoteright = -60;
s = 10;
s_alt = 10;
sacute = 10;
scaron = 10;
scedilla = 10;
scircumflex = 10;
semicolon = 20;
uni0123 = 10;
uni0162 = -40;
uni0219 = 10;
uni021A = -40;
uni0410 = 20;
uni0422 = -40;
uni0430 = 10;
y2_alt = -10;
z = 20;
};
O = {
J = 10;
V = -34;
X = -40;
};
Oacute = {
J = 10;
V = -34;
X = -40;
};
Obreve = {
J = 10;
V = -34;
X = -40;
};
Ocircumflex = {
J = 10;
V = -34;
X = -40;
};
Odieresis = {
J = 10;
V = -34;
X = -40;
};
Ograve = {
J = 10;
V = -34;
X = -40;
};
Ohungarumlaut = {
J = 10;
V = -34;
X = -40;
};
Omacron = {
J = 10;
V = -34;
X = -40;
};
Oslash = {
J = 10;
V = -34;
X = -40;
};
Otilde = {
J = 10;
V = -34;
X = -40;
};
P = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = 10;
Ccedilla = 10;
G = 10;
J = -50;
Q = 10;
S = 10;
X = -25;
Y = -15;
Yacute = -15;
Ycircumflex = -15;
Ydieresis = -15;
Ygrave = -15;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
j = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -90;
q = -10;
quotedblbase = -60;
quotedblright = 20;
quoteright = 20;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -50;
uni0430 = -20;
};
Q = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -40;
colon = 20;
semicolon = 20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
R = {
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
a = -10;
a00E2.alt = -10;
a00E4.alt = -10;
a0103.alt = -10;
a2_alt = -10;
a_alt = -10;
aacute = -10;
abreve = -10;
acircumflex = -10;
adieresis = -10;
agrave = -10;
amacron = -10;
aogonek = -10;
aring = -10;
atilde = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0430 = -10;
};
S = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Sacute = {
J = 10;
V = -34;
X = -40;
};
Scaron = {
J = 10;
V = -34;
X = -40;
};
Scedilla = {
J = 10;
V = -34;
X = -40;
};
Scircumflex = {
J = 10;
V = -34;
X = -40;
};
T = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
Tcaron = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
U = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -50;
q = -10;
quotedblbase = -60;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -10;
uni0430 = -20;
};
V = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = -25;
Cacute = -38;
Ccaron = -38;
Ccedilla = -25;
Ccircumflex = -38;
Cdotaccent = -38;
G = -25;
Gbreve = -38;
Gcircumflex = -38;
Gdotaccent = -38;
J = -80;
O = -38;
OE = -38;
Oacute = -38;
Obreve = -38;
Ocircumflex = -38;
Odieresis = -38;
Ograve = -38;
Ohungarumlaut = -38;
Omacron = -38;
Oslash = -38;
Otilde = -38;
Q = -25;
S = -25;
Sacute = -38;
Scaron = -38;
Scedilla = -38;
Scircumflex = -38;
a = -50;
a00E2.alt = -50;
a00E4.alt = -50;
a0103.alt = -50;
a2_alt = -50;
a_alt = -50;
aacute = -50;
abreve = -50;
acircumflex = -50;
adieresis = -50;
agrave = -50;
amacron = -50;
aogonek = -50;
aring = -50;
atilde = -50;
braceright = 20;
bracketright = 40;
c = -50;
c_alt = -50;
cacute = -50;
ccaron = -50;
ccedilla = -50;
ccircumflex = -50;
cdotaccent = -50;
colon = -20;
comma = -80;
d = -50;
dcaron = -50;
dcroat = -50;
e = -50;
eacute = -50;
ebreve = -50;
ecaron = -50;
ecircumflex = -50;
edieresis = -50;
edotaccent = -50;
egrave = -50;
emacron = -50;
eogonek = -50;
eth = -50;
g = -50;
gbreve = -50;
gcircumflex = -50;
gdotaccent = -50;
m = -20;
n = -20;
o = -50;
oacute = -50;
obreve = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
ohungarumlaut = -50;
omacron = -50;
oslash = -50;
otilde = -50;
p = -20;
period = -80;
q = -50;
quotedblbase = -80;
quotedblright = 10;
quoteright = 20;
r = -20;
racute = -20;
rcaron = -20;
s = -50;
s_alt = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
scircumflex = -50;
semicolon = -20;
space = -80;
u = -20;
uni0122 = -38;
uni0123 = -50;
uni0157 = -20;
uni0219 = -50;
uni0410 = -50;
uni0430 = -50;
z = -20;
};
W = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
W_alt = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
uni0410 = -40;
};
Wacute = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wcircumflex = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wdieresis = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wgrave = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
X = {
C = -40;
Cacute = -40;
Ccaron = -40;
Ccedilla = -30;
Ccircumflex = -40;
Cdotaccent = -40;
G = -40;
Gbreve = -40;
Gcircumflex = -40;
Gdotaccent = -40;
O = -40;
OE = -40;
Oacute = -40;
Obreve = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Ohungarumlaut = -40;
Omacron = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
S = -30;
Sacute = -40;
Scaron = -40;
Scedilla = -40;
Scircumflex = -40;
bracketright = 40;
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
uni0122 = -40;
};
Y = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Yacute = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ycircumflex = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ydieresis = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ygrave = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Z = {
bracketright = 20;
colon = 30;
quoteright = 20;
quotesingle = 40;
semicolon = 30;
};
b = {
c = 10;
d = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
backslash = {
a2_alt = 20;
backslash = -210;
uni0414 = 60;
uni0432 = 40;
uni0433 = 40;
uni0434 = 60;
uni0435 = 20;
uni0436 = 40;
uni0437 = 20;
uni0438 = 40;
uni043A = 40;
uni043C = 40;
uni043D = 40;
uni043E = 20;
uni043F = 40;
uni0440 = 40;
uni0441 = 20;
uni0444 = 20;
uni0446 = 40;
uni0447 = -20;
uni0448 = 40;
uni0449 = 40;
uni044B = 40;
uni044C = 40;
uni044D = 20;
uni044E = 40;
uni044F = 40;
uni0451 = 20;
uni0491 = 40;
};
braceleft = {
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
j = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0434 = 40;
};
bracketleft = {
I = 40;
T = 40;
Tcaron = 40;
V = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
X = 40;
Y = 40;
Yacute = 40;
Ycircumflex = 40;
Ydieresis = 40;
Ygrave = 40;
Z = 20;
i = 40;
j = 40;
l = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0425 = 40;
uni0434 = 40;
uni0443 = 20;
};
c = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
c_alt = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
cacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccedilla = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
ccircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
cdotaccent = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
colon = {
backslash = -70;
slash = -30;
};
comma = {
U = -60;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
two = 20;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -20;
uni0443 = -20;
v = -20;
y2_alt = -20;
};
dcaron = {
a2_alt = -75;
c = -75;
c_alt = -75;
cacute = -75;
ccaron = -75;
ccedilla = -75;
ccircumflex = -75;
cdotaccent = -75;
d = -75;
dcaron = -75;
dcroat = -75;
e = -75;
eacute = -75;
ebreve = -75;
ecaron = -75;
ecircumflex = -75;
edieresis = -75;
edotaccent = -75;
egrave = -75;
emacron = -75;
eogonek = -75;
eth = -75;
g = -75;
gbreve = -75;
gcircumflex = -75;
gdotaccent = -75;
o = -75;
oacute = -75;
obreve = -75;
ocircumflex = -75;
odieresis = -75;
oe = -75;
ograve = -75;
ohungarumlaut = -75;
omacron = -75;
oslash = -75;
otilde = -75;
q = -75;
s = -75;
s_alt = -75;
sacute = -75;
scaron = -75;
scedilla = -75;
scircumflex = -75;
uni0123 = -75;
uni0219 = -75;
};
e = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ebreve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edieresis = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edotaccent = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
egrave = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
emacron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eogonek = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eth = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
f = {
a2_alt = -10;
bracketright = 40;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 50;
quotesingle = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
four = {
four = 20;
};
i = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
j = {
bracketright = 40;
j = 20;
quoteright = 20;
};
k_alt = {
d = -10;
};
l = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
lcaron = {
a2_alt = -75;
c = -75;
c_alt = -75;
cacute = -75;
ccaron = -75;
ccedilla = -75;
ccircumflex = -75;
cdotaccent = -75;
d = -75;
dcaron = -75;
dcroat = -75;
e = -75;
eacute = -75;
ebreve = -75;
ecaron = -75;
ecircumflex = -75;
edieresis = -75;
edotaccent = -75;
egrave = -75;
emacron = -75;
eogonek = -75;
eth = -75;
g = -75;
gbreve = -75;
gcircumflex = -75;
gdotaccent = -75;
o = -75;
oacute = -75;
obreve = -75;
ocircumflex = -75;
odieresis = -75;
oe = -75;
ograve = -75;
ohungarumlaut = -75;
omacron = -75;
oslash = -75;
otilde = -75;
q = -75;
s = -75;
s_alt = -75;
sacute = -75;
scaron = -75;
scedilla = -75;
scircumflex = -75;
uni0123 = -75;
uni0219 = -75;
};
nine = {
seven = -20;
};
o = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
obreve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ocircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
odieresis = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oe = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ograve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ohungarumlaut = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
omacron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oslash = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
otilde = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
p = {
c = 10;
f = -20;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
t = -20;
t_alt = -20;
tbar = -20;
uni0163 = -20;
uni021B = -20;
x = -10;
y2_alt = -5;
};
parenleft = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
uni0414 = 40;
uni0422 = 40;
uni0434 = 40;
uni0443 = 10;
};
period = {
U = -50;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
two = 20;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -20;
uni0443 = -20;
v = -20;
y2_alt = -20;
};
q = {
j = 20;
};
quotedblbase = {
U = -60;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
two = 20;
uni0410 = 40;
uni0414 = 40;
uni0416 = 20;
uni0417 = -20;
uni041B = 20;
uni041E = -30;
uni0421 = -30;
uni0424 = -50;
uni0425 = 20;
uni0427 = -80;
uni042D = -30;
uni0434 = 60;
uni0436 = 20;
uni043B = 40;
uni0442 = -40;
uni0443 = -30;
uni0445 = 20;
uni0447 = -40;
v = -20;
y2_alt = -20;
};
quotedblleft = {
J = -100;
T = 40;
Tcaron = 40;
V = 10;
W = 10;
W_alt = 10;
Wacute = 10;
Wcircumflex = 10;
Wdieresis = 10;
Wgrave = 10;
a2_alt = -30;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -30;
uni0162 = 40;
uni0163 = 40;
uni0219 = -30;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -40;
uni0422 = 30;
uni0423 = 30;
uni0434 = -40;
uni043B = -40;
uni0442 = 40;
uni0443 = 40;
uni0444 = -30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quotedblright = {
comma = -50;
period = -50;
quotedblbase = -50;
};
quoteleft = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
J = -100;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
comma = -50;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
f = 40;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
period = -50;
q = -20;
quotedblbase = -50;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -20;
uni0162 = 40;
uni0163 = 40;
uni0219 = -20;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -20;
uni041B = -20;
uni0422 = 40;
uni0423 = 40;
uni042A = 20;
uni0434 = -30;
uni043B = -30;
uni0442 = 30;
uni0443 = 30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quoteright = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -60;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -30;
b = 20;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
j = 20;
k = 20;
k_alt = 20;
kgreenlandic = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
uni0123 = -30;
uni0137 = 20;
uni0162 = 40;
uni0219 = -30;
uni021A = 40;
uni0410 = -40;
uni0422 = 40;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0442 = 40;
uni0443 = 40;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
quotesingle = {
A = -20;
Aacute = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
J = -80;
T = 40;
Tcaron = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
Z = 40;
b = 40;
f = 40;
t = 40;
t_alt = 40;
tbar = 40;
uni0162 = 40;
uni0163 = 40;
uni021A = 40;
uni021B = 40;
uni0410 = -20;
uni0422 = 20;
uni0423 = 20;
uni0427 = 20;
uni0442 = 40;
};
r = {
quotedblright = 40;
quoteright = 40;
};
racute = {
quotedblright = 40;
quoteright = 40;
};
rcaron = {
quotedblright = 40;
quoteright = 40;
};
s = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
t = -10;
t_alt = -10;
tbar = -10;
uni0163 = -10;
uni021B = -10;
x = -15;
y2_alt = -5;
};
s_alt = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
sacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scedilla = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
scircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
seven = {
comma = -100;
four = -60;
one = 20;
period = -100;
quotedblbase = -100;
quotesingle = 20;
seven = 30;
three = -10;
};
slash = {
slash = -210;
uni0422 = 30;
uni0423 = 30;
};
space = {
V = -80;
W = -60;
W_alt = -60;
Wacute = -60;
Wcircumflex = -60;
Wdieresis = -60;
Wgrave = -60;
five = 40;
};
t = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
t_alt = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tbar = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tcaron = {
a2_alt = -75;
c = -75;
c_alt = -75;
cacute = -75;
ccaron = -75;
ccedilla = -75;
ccircumflex = -75;
cdotaccent = -75;
d = -75;
dcaron = -75;
dcroat = -75;
e = -75;
eacute = -75;
ebreve = -75;
ecaron = -75;
ecircumflex = -75;
edieresis = -75;
edotaccent = -75;
egrave = -75;
emacron = -75;
eogonek = -75;
eth = -75;
g = -75;
gbreve = -75;
gcircumflex = -75;
gdotaccent = -75;
o = -75;
oacute = -75;
obreve = -75;
ocircumflex = -75;
odieresis = -75;
oe = -75;
ograve = -75;
ohungarumlaut = -75;
omacron = -75;
oslash = -75;
otilde = -75;
q = -75;
s = -75;
s_alt = -75;
sacute = -75;
scaron = -75;
scedilla = -75;
scircumflex = -75;
uni0123 = -75;
uni0219 = -75;
};
two = {
four = -20;
two = 15;
};
uni0122 = {
J = 10;
V = -34;
X = -40;
};
uni0136 = {
v = -30;
y2_alt = -40;
};
uni0157 = {
quotedblright = 40;
quoteright = 40;
};
uni0162 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni0163 = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0219 = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
uni021A = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni021B = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0401 = {
quotedblright = 20;
uni043B = 10;
};
uni0405 = {
J = 10;
V = -34;
X = -40;
};
uni0410 = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quotedblleft = -40;
quotedblright = -40;
quoteright = -40;
quotesingle = -20;
uni0410 = 15;
uni0414 = 20;
uni0417 = -15;
uni041B = 10;
uni041E = -15;
uni0421 = -15;
uni0422 = -50;
uni0423 = -40;
uni0424 = -15;
uni0427 = -70;
uni042D = -15;
uni0434 = 10;
uni0436 = 10;
uni043B = 10;
uni0442 = -20;
uni0443 = -25;
uni0447 = -35;
v = -30;
x = 5;
y2_alt = -30;
};
uni0411 = {
uni0414 = -20;
uni042F = -20;
uni0434 = -10;
uni0436 = -20;
uni0445 = -20;
};
uni0412 = {
uni0423 = -30;
};
uni0413 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
};
uni0414 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0415 = {
quotedblright = 20;
uni043B = 10;
};
uni0416 = {
a2_alt = -20;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
uni0430 = -10;
uni0431 = -10;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0442 = -20;
uni0443 = -20;
uni0444 = -20;
uni0447 = -40;
uni044D = -20;
uni0451 = -20;
};
uni0417 = {
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni0417 = 15;
uni041B = -15;
uni041E = 15;
uni0421 = 15;
uni0422 = -20;
uni0423 = -20;
uni0424 = 15;
uni0425 = -20;
uni042D = 15;
uni0431 = 10;
uni0442 = 10;
uni0444 = 10;
};
uni041A = {
a2_alt = -20;
colon = 20;
semicolon = 20;
slash = 20;
uni0417 = -30;
uni041E = -30;
uni0421 = -30;
uni0424 = -30;
uni042D = -30;
uni0430 = -10;
uni0431 = -20;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0443 = -30;
uni0444 = -20;
uni044D = -20;
uni0451 = -20;
};
uni041E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -40;
uni0431 = 10;
uni0442 = 10;
};
uni0420 = {
a2_alt = -10;
comma = -90;
period = -90;
quotedblbase = -90;
quotedblleft = 20;
uni0410 = -60;
uni0414 = -50;
uni0416 = -20;
uni0417 = 10;
uni041E = 10;
uni0421 = 10;
uni0424 = 10;
uni0425 = -20;
uni042D = 10;
uni0430 = -10;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043B = -35;
uni043E = -10;
uni0441 = -10;
uni0442 = 20;
uni0444 = -10;
uni044D = -10;
uni044F = -10;
uni0451 = -10;
};
uni0421 = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -10;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0422 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
a2_alt = -50;
backslash = 40;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
parenright = 40;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
u = -20;
uni0410 = -50;
uni0414 = -10;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0422 = 20;
uni0423 = 10;
uni0424 = -20;
uni042D = -20;
uni0430 = -60;
uni0432 = -40;
uni0433 = -40;
uni0434 = -40;
uni0435 = -50;
uni0437 = -50;
uni0438 = -40;
uni043A = -40;
uni043B = -40;
uni043C = -40;
uni043D = -40;
uni043E = -50;
uni043F = -40;
uni0440 = -40;
uni0441 = -50;
uni0444 = -50;
uni0445 = -20;
uni0446 = -40;
uni0447 = -40;
uni0448 = -40;
uni0449 = -40;
uni044B = -40;
uni044C = -40;
uni044D = -50;
uni044E = -40;
uni044F = -40;
uni0451 = -30;
uni0491 = -40;
};
uni0423 = {
a2_alt = -55;
braceright = 40;
bracketright = 40;
colon = -20;
comma = -100;
period = -100;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
semicolon = -20;
slash = -30;
uni0410 = -70;
uni0414 = -40;
uni0417 = -15;
uni041E = -15;
uni0421 = -15;
uni0422 = 10;
uni0423 = 16;
uni0424 = -15;
uni042D = -15;
uni042F = -20;
uni0430 = -60;
uni0431 = -20;
uni0432 = -30;
uni0433 = -30;
uni0434 = -70;
uni0435 = -55;
uni0436 = -10;
uni0437 = -55;
uni0438 = -30;
uni0439 = -20;
uni043A = -30;
uni043B = -50;
uni043C = -30;
uni043D = -30;
uni043E = -55;
uni043F = -30;
uni0440 = -30;
uni0441 = -55;
uni0444 = -55;
uni0446 = -30;
uni0447 = -30;
uni0448 = -30;
uni0449 = -30;
uni044B = -30;
uni044C = -30;
uni044D = -55;
uni044E = -30;
uni044F = -30;
uni0451 = -30;
uni0491 = -30;
};
uni0424 = {
comma = -50;
period = -50;
quotedblbase = -50;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0434 = -20;
uni0442 = 10;
};
uni0425 = {
bracketright = 40;
uni0417 = -20;
uni041E = -40;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
};
uni0426 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0429 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni042A = {
quotedblright = -40;
quoteright = -20;
uni0422 = -50;
};
uni042C = {
quotedblleft = -60;
quotedblright = -40;
quoteright = -40;
uni0416 = -20;
uni0422 = -50;
uni0427 = -30;
};
uni042D = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni042E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0431 = {
quoteright = 20;
uni0431 = 15;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0444 = 10;
uni0445 = -10;
};
uni0432 = {
uni0436 = -10;
uni0445 = -15;
uni044F = -10;
};
uni0433 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
uni0434 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0435 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0436 = {
a2_alt = -10;
slash = 30;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0437 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni043A = {
a2_alt = -10;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni043E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0440 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0441 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0442 = {
colon = 20;
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
uni0434 = -20;
uni0442 = 30;
uni0443 = 20;
uni044A = 20;
};
uni0443 = {
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
uni0442 = 10;
uni0443 = 10;
};
uni0444 = {
quotedblright = -30;
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0445 = {
a2_alt = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0446 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0449 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni044C = {
quotedblright = -40;
uni0442 = -30;
uni044F = -10;
};
uni044D = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni044E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0451 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0490 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0433 = -40;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
uni0491 = -40;
};
uni0491 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
v = {
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
};
w = {
quotedblright = 40;
quoteright = 40;
};
w_alt = {
quotedblright = 40;
quoteright = 40;
};
wacute = {
quotedblright = 40;
quoteright = 40;
};
wcircumflex = {
quotedblright = 40;
quoteright = 40;
};
wdieresis = {
quotedblright = 40;
quoteright = 40;
};
wgrave = {
quotedblright = 40;
quoteright = 40;
};
x = {
a2_alt = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
y2_alt = {
a2_alt = -5;
c = -5;
c_alt = -5;
cacute = -5;
ccaron = -5;
ccedilla = -5;
ccircumflex = -5;
cdotaccent = -5;
comma = -20;
d = -5;
dcaron = -5;
dcroat = -5;
e = -5;
eacute = -5;
ebreve = -5;
ecaron = -5;
ecircumflex = -5;
edieresis = -5;
edotaccent = -5;
egrave = -5;
emacron = -5;
eogonek = -5;
eth = -5;
g = -5;
gbreve = -5;
gcircumflex = -5;
gdotaccent = -5;
o = -5;
oacute = -5;
obreve = -5;
ocircumflex = -5;
odieresis = -5;
oe = -5;
ograve = -5;
ohungarumlaut = -5;
omacron = -5;
oslash = -5;
otilde = -5;
period = -20;
q = -5;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
s = -5;
s_alt = -5;
sacute = -5;
scaron = -5;
scedilla = -5;
scircumflex = -5;
uni0123 = -5;
uni0219 = -5;
};
z = {
quotedblright = 40;
quoteright = 40;
};
zero = {
two = -15;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The Onest Project Authors (https://github.com/googlefonts/onest)";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Onest;
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Dmitri Voloshin, Andrey Kudryavtsev";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Andrey Kudryavtsev, Dmitri Voloshin";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://onest.md";
},
{
key = designerURL;
value = "https://onest.md";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
