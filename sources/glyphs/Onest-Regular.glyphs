{
.appVersion = "3112";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = PYRS;
},
{
name = panose;
value = (
2,
11,
5,
3,
3,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
9,
31,
33,
35,
37,
38,
47
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
uni0000,
uni000D,
space,
B,
D,
E,
F,
H,
I,
L,
M,
N,
P,
R,
U,
V,
W,
X,
Y,
Z,
b,
d,
h,
i,
l,
m,
n,
p,
q,
u,
v,
w,
x,
z,
period,
comma,
A,
breve,
circumflex,
uni0326,
abreve,
acircumflex,
Abreve,
Acircumflex,
Icircumflex,
exclam,
quotedbl,
quotesingle,
numbersign,
percent,
asterisk,
plus,
slash,
colon,
semicolon,
less,
equal,
greater,
at,
bracketleft,
bracketright,
backslash,
asciicircum,
underscore,
braceleft,
bar,
braceright,
Euro,
quotedblbase,
quotesinglbase,
quotedblright,
quoteright,
quotedblleft,
quoteleft,
minus,
hyphen,
endash,
emdash,
grave,
acute,
guillemotright,
guilsinglright,
guillemotleft,
guilsinglleft,
uni00AD,
ellipsis,
uni0445,
uni0431,
uni0432,
uni0433,
uni0434,
uni0436,
uni043A,
uni0438,
uni0439,
uni043B,
uni043C,
uni043D,
uni043F,
uni0442,
uni0444,
uni0446,
uni0447,
uni0448,
uni0449,
uni044A,
uni044B,
uni044C,
uni044E,
uni044F,
uni0410,
uni0415,
uni041C,
uni041D,
uni0420,
uni0422,
uni0425,
T,
uni0412,
uni041F,
uni0413,
uni041B,
uni0414,
uni0411,
uni0416,
uni0417,
uni0418,
uni0419,
uni041A,
uni0423,
uni0424,
uni0426,
uni0427,
uni0428,
uni0429,
uni042A,
uni042B,
uni042C,
uni042D,
uni042E,
uni042F,
uni0440,
O,
a,
c,
e,
f,
g,
j,
o,
r,
t,
y2_alt,
uni0443,
uni0451,
uni0437,
uni044D,
C,
S,
uni0421,
G,
uni041E,
Q,
J,
K_alt,
K,
k_alt,
k,
i_alt,
j_alt,
s_alt,
s,
c_alt,
copyright,
ampersand,
dollar,
parenleft,
parenright,
cent,
section,
uni04C1,
uni04C2,
w_alt,
W_alt,
zero,
one,
two,
three,
four,
seven,
eight,
nine,
uni0430,
uni0435,
uni043E,
uni0441,
uni0218,
uni0219,
uni021A,
uni021B,
icircumflex,
question,
uni2116,
uni0401,
asciitilde,
trademark,
registered,
degree,
bullet,
uni27F5,
uni27F6,
arrowup,
arrowdown,
uni21BA,
uni21BB,
uni21B7,
uni21B6,
five,
six,
dieresis,
adieresis,
Adieresis,
cedilla,
Ecircumflex,
ecircumflex,
Odieresis,
odieresis,
dotlessi,
Idotaccent,
udieresis,
Udieresis,
ccedilla,
uni0162,
uni0163,
Ccedilla,
scedilla,
uni21A9,
uni2713,
divide,
multiply,
yen,
uni20BD,
uni20B4,
sterling,
Scedilla,
t_alt,
alt_1,
uni2117,
colon.uc,
y_alt,
u_alt,
be_alt,
g_alt,
y,
t2.alt,
f_alt,
hyphen.uc,
uni00AD.uc,
endash.uc,
emdash.uc,
a_alt,
uni0490,
uni0491,
uni0406,
uni0456,
uni0404,
uni0454,
uni0407,
uni0457,
t0163.alt,
t021b.alt,
uni00A0,
uni2009,
uni202F,
map,
logo,
a00E2.alt,
a00E4.alt,
a0103.alt,
a2_alt,
logom,
plusminus,
twosuperior,
threesuperior,
greaterequal,
lessequal,
notequal,
approxequal,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE008,
uniE009,
uniE010,
uniE011,
uniE012,
uniE013,
uniE014,
uniE015,
uniE016,
uniE017,
uniE018,
uniE019,
uniE020,
uniE021,
uniE022,
arrowright,
uni2197,
uni2196,
arrowleft,
uni2198,
uni2199,
tab_1,
I_alt,
l_alt,
l2_alt,
questiondown,
exclamdown,
paragraph,
macron,
ordfeminine,
periodcentered,
ordmasculine,
caron,
dotaccent,
ring,
tilde,
ogonek,
hungarumlaut,
gravecomb,
acutecomb,
uni0302,
tildecomb,
uni0304,
uni0306,
uni0307,
uni0308,
uni030A,
uni030B,
uni030C,
uni0312,
uni0327,
uni0328,
Agrave,
Aacute,
Atilde,
Egrave,
Eacute,
agrave,
aacute,
Igrave,
Iacute,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Aring,
AE,
Eth,
Oslash,
Thorn,
germandbls,
ae,
eth,
thorn,
egrave,
eacute,
igrave,
iacute,
ograve,
oacute,
ocircumflex,
ugrave,
uacute,
ucircumflex,
yacute,
Ugrave,
Uacute,
Ucircumflex,
Yacute,
ydieresis,
aring,
atilde,
edieresis,
otilde,
idieresis,
ntilde,
Edieresis,
Idieresis,
oslash,
Amacron,
amacron,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
uni0122,
uni0123,
Hcircumflex,
hcircumflex,
Hbar,
hbar,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
IJ,
ij,
Jcircumflex,
jcircumflex,
uni0136,
uni0137,
kgreenlandic,
Lacute,
lacute,
uni013B,
uni013C,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
Ncaron,
ncaron,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
Racute,
racute,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scaron,
scaron,
Tcaron,
tcaron,
Tbar,
tbar,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
uni0237,
uni0145,
uni0146,
uni0156,
uni0157,
napostrophe,
Eng,
eng,
oe,
OE,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
uni1E9E,
uni0405,
uni0455,
uni0408,
uni0458,
uni040E,
uni045E
);
}
);
date = "2022-02-06 07:31:36 +0000";
familyName = Onest;
featurePrefixes = (
{
code = "lookup SUB_22 {
	sub colon by colon.uc;
	sub hyphen by hyphen.uc;
	sub endash by endash.uc;
	sub emdash by emdash.uc;
	sub uni00AD by uni00AD.uc;
	sub t by t2.alt;
	sub uni021B by t021b.alt;
	sub uni0163 by t0163.alt;
} SUB_22;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_0;
lookup SUB_0;
script cyrl;
language dflt;
lookup SUB_0;
lookup SUB_1 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_1;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
lookup SUB_2 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_2;
lookup SUB_0;
language AZE;
lookup SUB_0;
lookup SUB_0;
language MOL;
lookup SUB_0;
lookup SUB_0;
language ROM;
lookup SUB_0;
lookup SUB_0;
language TRK;
lookup SUB_0;
lookup SUB_0;
";
tag = salt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 useExtension {
	sub colon by colon.uc;
} SUB_3;
script cyrl;
language dflt;
lookup SUB_3;
script latn;
language dflt;
lookup SUB_3;
language AZE;
lookup SUB_3;
language MOL;
lookup SUB_3;
language ROM;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	@SUB_4_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_0_BT_0 colon' lookup SUB_22;
	@SUB_4_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_1_BT_0 hyphen' lookup SUB_22;
	@SUB_4_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_2_BT_0 endash' lookup SUB_22;
	@SUB_4_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_3_BT_0 emdash' lookup SUB_22;
	@SUB_4_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_4_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_4_5_LA_0;
	@SUB_4_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_4_6_LA_0;
	@SUB_4_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_4_7_LA_0;
} SUB_4;
lookup SUB_5 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_5;
script cyrl;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6 {
	@SUB_6_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_0_BT_0 colon' lookup SUB_22;
	@SUB_6_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_1_BT_0 hyphen' lookup SUB_22;
	@SUB_6_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_2_BT_0 endash' lookup SUB_22;
	@SUB_6_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_3_BT_0 emdash' lookup SUB_22;
	@SUB_6_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_6_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_6_5_LA_0;
	@SUB_6_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_6_6_LA_0;
	@SUB_6_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_6_7_LA_0;
} SUB_6;
lookup SUB_7 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_7;
script latn;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8 {
	@SUB_8_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_0_BT_0 colon' lookup SUB_22;
	@SUB_8_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_1_BT_0 hyphen' lookup SUB_22;
	@SUB_8_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_2_BT_0 endash' lookup SUB_22;
	@SUB_8_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_3_BT_0 emdash' lookup SUB_22;
	@SUB_8_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_8_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_8_5_LA_0;
	@SUB_8_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_8_6_LA_0;
	@SUB_8_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_8_7_LA_0;
} SUB_8;
lookup SUB_9 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_9;
language AZE;
lookup SUB_4;
lookup SUB_5;
language MOL;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language ROM;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language TRK;
lookup SUB_4;
lookup SUB_5;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub l by l_alt;
	sub abreve by a0103.alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
} SUB_10;
script cyrl;
language dflt;
lookup SUB_10;
lookup SUB_11 {
	sub l by l_alt;
	sub abreve by a0103.alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
} SUB_11;
script latn;
language dflt;
lookup SUB_10;
lookup SUB_12 {
	sub l by l_alt;
	sub abreve by a0103.alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
} SUB_12;
language AZE;
lookup SUB_10;
language MOL;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_13;
script cyrl;
language dflt;
lookup SUB_13;
lookup SUB_14 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_14;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_15;
language AZE;
lookup SUB_13;
language MOL;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_16;
script cyrl;
language dflt;
lookup SUB_16;
lookup SUB_18 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_18;
script latn;
language dflt;
lookup SUB_16;
lookup SUB_17 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_17;
language AZE;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TRK;
lookup SUB_16;
script cyrl;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_19;
script cyrl;
language dflt;
lookup SUB_19;
lookup SUB_21 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_21;
script latn;
language dflt;
lookup SUB_19;
lookup SUB_20 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_20;
language AZE;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
script cyrl;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
";
tag = tnum;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 970;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 49 29 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 4 36 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01262 2 46 6 27 5 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123648 2368 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01258 4 38 8 20 7 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    85,\012    85,\012    75,\012    75,\012    707,\012    0,\012    527,\012    0,\012    \"-180\",\012    970,\012    \"-305\",\012    715,\012    \"-8\",\012    533,\012    \"-6\",\012    \"-226\",\012    970,\012    \"-305\",\012    85,\012    85,\012    75,\012    75,\012    707,\012    0,\012    707,\012    527,\012    0,\012    \"-190\",\012    970,\012    \"-305\",\012    715,\012    \"-8\",\012    720,\012    533,\012    \"-6\",\012    \"-236\",\012    970,\012    \"-305\",\012    24,\012    24,\012    24,\012    24,\012    750,\012    380,\012    970,\012    \"-305\",\012    750,\012    376,\012    970,\012    \"-305\"\012)";
}
);
id = m01;
metricValues = (
{
pos = 970;
},
{
pos = 707;
},
{
pos = 527;
},
{
},
{
pos = -305;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,-295,l),
(520,960,l),
(20,960,l),
(20,-295,l)
);
},
{
closed = 1;
nodes = (
(510,950,l),
(510,-285,l),
(30,-285,l),
(30,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 0 95 0 0 0 68 77 0 2 2 1 95 0 1 1 69 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = ".notdef";
},
{
glyphname = uni0000;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0000;
},
{
glyphname = uni000D;
layers = (
{
layerId = m01;
width = 189;
}
);
note = uni000D;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 270;
}
);
note = space;
unicode = 32;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,0,ls),
(378,0,o),
(475,15,o),
(553,57,o),
(603,131,o),
(606,197,qs),
(606,269,o),
(538,360,o),
(470,372,q),
(521,392,o),
(570,476,o),
(570,530,qs),
(570,584,o),
(530,654,o),
(501,673,qs),
(468,695,o),
(385,707,o),
(334,707,qs),
(86,707,l),
(86,0,l)
);
},
{
closed = 1;
nodes = (
(365,628,o),
(419,621,o),
(461,599,o),
(485,558,o),
(485,524,qs),
(484,481,o),
(449,432,o),
(421,418,qs),
(397,405,o),
(337,397,o),
(309,397,qs),
(173,397,l),
(173,628,l),
(335,628,ls)
);
},
{
closed = 1;
nodes = (
(173,319,l),
(358,319,ls),
(388,319,o),
(446,309,o),
(491,283,o),
(518,237,o),
(518,201,qs),
(518,159,o),
(482,110,o),
(423,85,o),
(358,79,o),
(326,79,qs),
(173,79,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
10 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 38 77 7 1 4 4 1 95 0 1 1 39 1 78 35 34 20 20 45 43 34 46 35 46 20 33 20 32 34 47 32 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = B;
unicode = 66;
},
{
glyphname = D;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,0,ls),
(421,0,o),
(545,51,o),
(628,144,o),
(670,274,o),
(671,353,qs),
(671,432,o),
(629,563,o),
(545,656,o),
(420,707,o),
(338,707,qs),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(400,628,o),
(492,586,o),
(552,514,o),
(582,416,o),
(582,353,qs),
(582,292,o),
(552,191,o),
(520,154,qs),
(485,112,o),
(386,79,o),
(332,79,qs),
(174,79,l),
(174,628,l),
(337,628,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 13 13 13 26 13 25 34 40 32 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,283,l),
(513,283,l),
(513,363,l),
(174,363,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 5 1 4 4 39 4 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = F;
unicode = 70;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,707,l),
(87,707,l),
(87,0,l),
(174,0,l),
(174,307,l),
(553,307,l),
(553,0,l),
(640,0,l),
(640,707,l),
(553,707,l),
(553,387,l),
(174,387,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 1 5 0 2 1 5 2 103 4 1 0 0 38 77 3 1 1 1 39 1 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = I;
unicode = 73;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,615,l),
(409,185,l),
(449,185,l),
(682,615,l),
(682,0,l),
(769,0,l),
(769,707,l),
(640,707,l),
(431,318,l),
(219,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 3 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 38 77 5 4 2 2 2 39 2 78 0 0 0 12 0 12 18 17 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 856;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,587,l),
(545,0,l),
(654,0,l),
(654,707,l),
(567,707,l),
(567,118,l),
(198,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 38 77 4 3 2 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = N;
unicode = 78;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(174,233,l),
(314,233,ls),
(372,233,o),
(468,263,o),
(500,289,qs),
(538,319,o),
(581,411,o),
(581,472,qs),
(581,592,o),
(449,707,o),
(332,707,qs),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(174,628,l),
(328,628,ls),
(492,628,o),
(492,476,qs),
(492,430,o),
(466,372,o),
(443,352,qs),
(420,331,o),
(348,312,o),
(310,312,qs),
(174,312,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 38 77 0 2 2 39 2 78 15 14 23 21 14 24 15 24 17 39 32 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = P;
unicode = 80;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,0,l),
(595,0,l),
(447,280,l),
(478,289,o),
(536,322,o),
(579,373,o),
(605,442,o),
(605,486,qs),
(605,546,o),
(570,631,o),
(504,683,o),
(410,707,o),
(352,707,qs),
(87,707,l),
(87,0,l),
(174,0,l),
(174,265,l),
(359,265,l)
);
},
{
closed = 1;
nodes = (
(174,628,l),
(343,628,ls),
(427,628,o),
(516,565,o),
(516,489,qs),
(515,443,o),
(484,388,o),
(432,356,o),
(363,344,o),
(324,344,qs),
(174,344,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
14 1 3 4 1 76 7 1 4 6 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 19 18 0 0 27 25 18 28 19 28 0 17 0 17 26 33 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
note = R;
unicode = 82;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 0 25 0 25 37 21 37 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,0,l),
(405,0,l),
(669,707,l),
(575,707,l),
(342,75,l),
(109,707,l),
(14,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 1 0 1 76 3 2 2 0 0 38 77 0 1 1 39 1 78 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,707,l),
(273,75,l),
(112,707,l),
(14,707,l),
(206,0,l),
(337,0,l),
(491,624,l),
(645,0,l),
(777,0,l),
(969,707,l),
(875,707,l),
(714,75,l),
(560,707,l),
(560,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
11 6 1 3 1 0 1 76 4 3 2 0 0 38 77 2 1 1 1 39 1 78 18 17 18 17 18 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,707,l),
(21,707,l),
(241,353,l),
(14,0,l),
(116,0,l),
(296,283,l),
(474,0,l),
(579,0,l),
(351,356,l),
(571,707,l),
(466,707,l),
(297,425,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,707,l),
(14,707,l),
(264,265,l),
(264,0,l),
(351,0,l),
(351,266,l),
(600,707,l),
(501,707,l),
(309,353,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
8 5 2 3 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 18 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,69,l),
(44,0,l),
(546,0,l),
(546,79,l),
(156,79,l),
(553,639,l),
(553,707,l),
(57,707,l),
(57,628,l),
(436,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 3 0 8 1 2 1 2 76 4 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = Z;
unicode = 90;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,64,l),
(178,32,o),
(257,-6,o),
(311,-6,qs),
(322,-6,ls),
(383,-5,o),
(472,37,o),
(530,109,o),
(557,206,o),
(557,263,qs),
(557,320,o),
(530,419,o),
(473,491,o),
(386,533,o),
(326,533,qs),
(275,534,o),
(178,489,o),
(152,449,q),
(152,707,l),
(67,707,l),
(67,0,l),
(148,0,l)
);
},
{
closed = 1;
nodes = (
(187,120,o),
(169,158,qs),
(157,181,o),
(150,236,o),
(150,262,qs),
(150,286,o),
(160,338,o),
(171,361,qs),
(180,380,o),
(207,414,o),
(243,441,o),
(289,457,o),
(313,457,qs),
(356,457,o),
(417,426,o),
(455,374,o),
(472,303,o),
(472,263,qs),
(471,223,o),
(454,153,o),
(417,100,o),
(358,69,o),
(315,69,qs),
(261,69,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
3 1 4 5 20 1 2 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
3 1 4 5 20 1 3 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 38 77 0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 6 3 2 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 38 77 0 5 5 1 97 0 1 1 49 77 6 1 3 3 39 77 7 1 4 4 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 22 0 0 33 31 22 45 23 45 0 21 0 21 56 35 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = b;
unicode = 98;
},
{
glyphname = d;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,707,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(425,34,o),
(452,79,q),
(456,0,l),
(537,0,l),
(537,707,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,261,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
18 1 4 2 2 1 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 3 38 77 6 1 4 4 2 97 0 2 2 49 77 0 5 5 0 97 1 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 38 77 6 1 4 4 2 97 0 2 2 49 77 0 0 0 39 77 0 5 5 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 42 22 42 19 40 35 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = d;
unicode = 100;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,246,ls),
(152,286,o),
(167,362,o),
(190,393,qs),
(209,421,o),
(272,458,o),
(309,458,qs),
(354,458,o),
(406,423,o),
(434,369,o),
(442,300,o),
(442,264,qs),
(442,0,l),
(527,0,l),
(527,290,ls),
(527,342,o),
(508,431,o),
(461,496,o),
(384,533,o),
(327,533,qs),
(302,533,o),
(249,522,o),
(205,500,o),
(165,466,o),
(152,446,q),
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 2 3 1 76 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 0 0 0 28 0 28 37 21 37 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,689,o),
(59,664,qs),
(59,639,o),
(91,607,o),
(116,607,qs),
(140,607,o),
(174,639,o),
(174,664,qs),
(174,689,o),
(140,720,o),
(116,720,qs),
(91,720,o)
);
},
{
closed = 1;
nodes = (
(159,527,l),
(74,527,l),
(74,0,l),
(159,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 0 97 4 1 0 0 48 77 0 2 2 41 77 5 1 3 3 39 3 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = i;
unicode = 105;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,527,l),
(67,0,l),
(152,0,l),
(152,286,ls),
(152,314,o),
(163,375,o),
(192,425,o),
(239,458,o),
(275,458,qs),
(309,458,o),
(347,428,o),
(366,383,o),
(370,328,o),
(370,303,qs),
(370,0,l),
(455,0,l),
(455,287,ls),
(455,316,o),
(467,376,o),
(494,426,o),
(542,458,o),
(573,458,qs),
(607,458,o),
(647,428,o),
(667,383,o),
(672,328,o),
(672,302,qs),
(672,0,l),
(757,0,l),
(757,345,ls),
(757,385,o),
(739,453,o),
(701,504,o),
(639,533,o),
(596,533,qs),
(542,533,o),
(463,488,o),
(436,448,q),
(419,486,o),
(351,532,o),
(296,533,qs),
(251,533,o),
(178,499,o),
(153,464,q),
(149,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
0 1 3 0 6 1 2 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 1 3 7 6 1 2 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 3 0 97 7 1 2 0 0 49 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 7 7 41 77 5 1 3 3 0 97 1 1 0 0 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 21 37 21 37 21 36 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,241,ls),
(152,281,o),
(168,360,o),
(191,393,qs),
(210,419,o),
(274,458,o),
(314,458,qs),
(356,458,o),
(406,426,o),
(433,373,o),
(442,305,o),
(442,268,qs),
(442,0,l),
(527,0,l),
(527,291,ls),
(527,342,o),
(507,431,o),
(461,496,o),
(383,533,o),
(326,533,qs),
(302,533,o),
(251,523,o),
(205,501,o),
(166,469,o),
(153,447,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 3 0 97 1 1 0 0 41 77 5 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 28 0 28 37 21 37 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = n;
unicode = 110;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,66,l),
(178,32,o),
(262,-6,o),
(322,-6,qs),
(383,-6,o),
(471,35,o),
(529,107,o),
(557,205,o),
(557,263,qs),
(557,320,o),
(529,419,o),
(472,492,o),
(387,533,o),
(326,533,qs),
(272,532,o),
(179,489,o),
(152,448,q),
(148,527,l),
(67,527,l),
(67,-190,l),
(152,-190,l)
);
},
{
closed = 1;
nodes = (
(188,120,o),
(169,158,qs),
(158,181,o),
(150,232,o),
(150,262,qs),
(150,288,o),
(158,337,o),
(169,360,qs),
(188,402,o),
(262,457,o),
(313,457,qs),
(356,457,o),
(417,426,o),
(455,374,o),
(472,303,o),
(472,263,qs),
(471,223,o),
(454,153,o),
(417,100,o),
(358,69,o),
(315,69,qs),
(261,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 4 5 19 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 0 97 1 1 0 0 41 77 7 1 4 4 2 97 0 2 2 50 77 6 1 3 3 43 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 5 0 97 1 1 0 0 41 77 7 1 4 4 2 97 0 2 2 50 77 6 1 3 3 0 97 1 1 0 0 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 0 2 2 50 77 6 1 3 3 0 95 0 0 0 41 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 21 0 0 32 30 21 42 22 42 0 20 0 20 40 35 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,527,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(426,33,o),
(452,79,q),
(452,-190,l),
(537,-190,l),
(537,527,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,236,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,263,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 2 2 1 5 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 3 2 1 5 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 2 97 3 1 2 2 49 77 0 5 5 1 97 0 1 1 50 77 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 4 4 2 97 3 1 2 2 49 77 0 5 5 1 97 0 1 1 50 77 0 0 0 2 97 3 1 2 2 49 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 2 97 0 2 2 49 77 0 5 5 1 97 0 1 1 50 77 0 0 0 3 95 0 3 3 41 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 42 22 42 19 40 35 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = q;
unicode = 113;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 41 77 4 1 0 0 2 97 0 2 2 50 2 78 1 0 14 13 10 8 5 4 0 17 1 17 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,0,l),
(529,527,l),
(432,527,l),
(269,82,l),
(103,527,l),
(7,527,l),
(210,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 41 77 0 2 2 39 2 78 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,0,l),
(421,427,l),
(551,0,l),
(667,0,l),
(831,527,l),
(734,527,l),
(610,82,l),
(479,527,l),
(364,527,l),
(234,82,l),
(108,527,l),
(12,527,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 41 77 4 1 3 3 39 3 78 18 17 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 843;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,0,l),
(310,266,l),
(488,527,l),
(389,527,l),
(259,327,l),
(125,527,l),
(23,527,l),
(202,269,l),
(14,0,l),
(110,0,l),
(254,201,l),
(400,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 0 1 1 76 2 1 1 1 41 77 3 1 0 0 39 0 78 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = x;
unicode = 120;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,452,l),
(362,452,l),
(47,72,l),
(47,0,l),
(471,0,l),
(471,74,l),
(153,74,l),
(471,456,l),
(471,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 5 1 1 0 2 76 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = z;
unicode = 122;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,78,o),
(67,52,qs),
(67,26,o),
(101,-8,o),
(127,-8,qs),
(153,-8,o),
(187,26,o),
(187,52,qs),
(187,78,o),
(153,112,o),
(127,112,qs),
(101,112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 47 1 78 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 254;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,-74,o),
(67,-88,q),
(91,-121,l),
(111,-114,o),
(148,-82,o),
(176,-40,o),
(193,11,o),
(193,32,qs),
(193,70,o),
(158,112,o),
(129,112,qs),
(106,112,o),
(71,81,o),
(70,55,qs),
(70,30,o),
(102,0,o),
(128,-2,q),
(122,-26,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = comma;
unicode = 44;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,707,l),
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l)
);
},
{
closed = 1;
nodes = (
(189,231,l),
(335,631,l),
(481,231,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 4 0 0 1 4 0 104 0 2 2 38 77 5 3 2 1 1 39 1 78 0 0 10 9 0 7 0 7 17 17 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = A;
unicode = 65;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,699,o),
(191,734,q),
(113,734,l),
(115,669,o),
(204,601,o),
(283,601,qs),
(362,601,o),
(453,669,o),
(455,734,q),
(377,734,l),
(375,699,o),
(326,667,o),
(284,667,qs),
(242,667,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 133 4 1 0 2 2 0 89 4 1 0 0 2 97 0 2 0 2 81 1 0 11 10 8 6 4 3 0 13 1 13 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 569;
}
);
note = breve;
unicode = 728;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,606,l),
(201,606,l),
(279,702,l),
(357,606,l),
(443,606,l),
(309,769,l),
(249,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 559;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-340,-287,o),
(-360,-301,q),
(-336,-334,l),
(-316,-327,o),
(-279,-295,o),
(-251,-253,o),
(-234,-206,o),
(-234,-179,qs),
(-232,-148,o),
(-264,-100,o),
(-297,-100,qs),
(-321,-100,o),
(-357,-130,o),
(-357,-158,qs),
(-357,-183,o),
(-325,-213,o),
(-299,-215,q),
(-305,-239,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = abreve;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,698,o),
(196,740,q),
(118,740,l),
(118,667,o),
(207,604,o),
(289,604,qs),
(363,604,o),
(454,669,o),
(454,737,qs),
(454,740,l),
(376,740,l),
(374,698,o),
(327,667,o),
(287,667,qs),
(244,667,o)
);
},
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(132,13,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(308,0,o),
(355,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,237,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
12 1 0 0 2 8 0 2 105 3 1 1 0 7 5 1 7 103 0 5 13 1 10 11 5 10 104 0 6 6 8 97 0 8 8 49 77 0 11 11 4 97 9 1 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
12 1 0 0 2 8 0 2 105 3 1 1 0 7 5 1 7 103 0 5 13 1 10 11 5 10 104 0 6 6 8 97 0 8 8 49 77 0 9 9 39 77 0 11 11 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
53 51 1 0 62 60 51 65 53 65 50 49 44 42 38 37 35 33 31 29 21 19 12 11 9 7 4 3 0 14 1 14 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = acircumflex;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(132,13,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(308,0,o),
(355,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,237,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
},
{
closed = 1;
nodes = (
(120,606,l),
(205,606,l),
(283,702,l),
(361,606,l),
(447,606,l),
(313,769,l),
(253,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
54 1 8 10 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 3 2 1 2 3 1 128 0 1 11 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 3 2 1 2 3 1 128 0 1 11 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
51 51 38 36 51 57 51 57 56 55 53 52 47 45 36 50 38 50 21 36 18 34 40 36 13 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l),
(398,707,l)
);
},
{
closed = 1;
nodes = (
(335,631,l),
(481,231,l),
(189,231,l)
);
},
{
closed = 1;
nodes = (
(246,892,o),
(244,927,q),
(166,927,l),
(168,862,o),
(257,794,o),
(336,794,qs),
(415,794,o),
(506,862,o),
(508,927,q),
(430,927,l),
(428,892,o),
(379,860,o),
(337,860,qs),
(295,860,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
9 1 4 3 1 76 8 1 6 5 6 133 10 1 5 0 7 3 5 7 105 9 1 4 0 1 0 4 1 104 0 3 3 38 77 2 1 0 0 39 0 78 12 11 8 8 22 21 19 17 15 14 11 24 12 24 8 10 8 10 17 17 17 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l),
(398,707,l)
);
},
{
closed = 1;
nodes = (
(335,631,l),
(481,231,l),
(189,231,l)
);
},
{
closed = 1;
nodes = (
(176,786,l),
(261,786,l),
(339,883,l),
(417,786,l),
(503,786,l),
(369,949,l),
(309,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 5 7 9 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
6 1 5 7 3 7 5 3 128 8 1 4 0 1 0 4 1 104 9 1 7 7 44 77 0 3 3 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
9 1 7 5 7 133 6 1 5 3 5 133 8 1 4 0 1 0 4 1 104 0 3 3 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
11 11 8 8 11 17 11 17 16 15 13 12 8 10 8 10 17 17 17 16 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-69,792,l),
(16,792,l),
(103,914,l),
(190,792,l),
(276,792,l),
(133,982,l),
(73,982,l)
);
},
{
closed = 1;
nodes = (
(60,707,l),
(60,0,l),
(147,0,l),
(147,707,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
1 1 0 2 4 2 0 4 128 5 1 2 2 44 77 0 4 4 38 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 2 0 2 133 1 1 0 4 0 133 0 4 4 38 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 10 9 8 7 0 6 0 6 18 17 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 207;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,707,l),
(87,707,l),
(99,220,l),
(172,220,l)
);
},
{
closed = 1;
nodes = (
(77,78,o),
(77,52,qs),
(77,26,o),
(110,-8,o),
(136,-8,qs),
(161,-8,o),
(196,26,o),
(196,52,qs),
(196,78,o),
(161,112,o),
(136,112,qs),
(110,112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 2 2 3 97 0 3 3 47 3 78 5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,707,l),
(72,471,l),
(134,471,l),
(147,707,l)
);
},
{
closed = 1;
nodes = (
(212,707,l),
(225,471,l),
(287,471,l),
(300,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 38 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,707,l),
(80,471,l),
(142,471,l),
(155,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 38 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 222;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,448,l),
(184,448,l),
(163,259,l),
(59,259,l),
(59,179,l),
(155,179,l),
(135,0,l),
(220,0,l),
(239,179,l),
(376,179,l),
(357,0,l),
(441,0,l),
(460,179,l),
(565,179,l),
(565,259,l),
(469,259,l),
(489,448,l),
(594,448,l),
(594,527,l),
(498,527,l),
(517,707,l),
(433,707,l),
(413,527,l),
(277,527,l),
(296,707,l),
(211,707,l),
(193,527,l),
(88,527,l)
);
},
{
closed = 1;
nodes = (
(405,448,l),
(384,259,l),
(247,259,l),
(268,448,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
14 11 2 5 10 8 2 6 7 5 6 103 2 1 0 0 38 77 15 12 2 4 4 1 95 16 13 3 3 1 1 41 77 9 1 7 7 39 7 78 0 0 31 30 29 28 0 27 0 27 26 25 24 23 22 21 20 19 17 17 17 17 17 17 17 17 17 17 8 31 
CALL[ ]	/* CallFunction */";
};
width = 653;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,426,o),
(330,469,o),
(349,526,o),
(349,559,qs),
(349,628,o),
(275,715,o),
(205,715,qs),
(169,715,o),
(115,692,o),
(78,650,o),
(59,593,o),
(59,559,qs),
(59,526,o),
(78,469,o),
(114,426,o),
(169,402,o),
(205,402,qs),
(240,402,o)
);
},
{
closed = 1;
nodes = (
(662,707,l),
(574,707,l),
(139,0,l),
(228,0,l)
);
},
{
closed = 1;
nodes = (
(275,592,o),
(275,559,qs),
(275,525,o),
(243,473,o),
(205,473,qs),
(165,473,o),
(131,524,o),
(131,559,qs),
(131,592,o),
(165,644,o),
(205,644,qs),
(243,644,o)
);
},
{
closed = 1;
nodes = (
(689,18,o),
(726,61,o),
(745,118,o),
(745,151,qs),
(745,185,o),
(726,242,o),
(689,284,o),
(635,307,o),
(601,307,qs),
(565,307,o),
(511,284,o),
(473,242,o),
(454,185,o),
(454,151,qs),
(454,118,o),
(473,61,o),
(510,18,o),
(565,-6,o),
(601,-6,qs),
(635,-6,o)
);
},
{
closed = 1;
nodes = (
(670,184,o),
(670,151,qs),
(670,117,o),
(639,65,o),
(600,65,qs),
(561,65,o),
(527,116,o),
(527,151,qs),
(527,184,o),
(560,236,o),
(600,236,qs),
(639,236,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 10 1 0 7 5 0 105 0 7 14 1 8 9 7 8 106 12 1 4 4 1 97 2 1 1 1 46 77 0 9 9 3 97 13 6 11 3 3 3 39 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 10 1 0 7 5 0 105 0 7 14 1 8 9 7 8 106 0 2 2 38 77 12 1 4 4 1 97 0 1 1 46 77 0 9 9 3 97 13 6 11 3 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 10 1 0 7 5 0 105 0 7 14 1 8 9 7 8 106 0 2 2 38 77 12 1 4 4 1 97 0 1 1 46 77 11 1 3 3 39 77 0 9 9 6 97 13 1 6 6 50 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
55 54 35 34 23 22 18 18 1 0 61 59 54 65 55 65 45 43 34 53 35 53 29 27 22 33 23 33 18 21 18 21 20 19 11 9 0 17 1 17 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 804;
}
);
note = percent;
unicode = 37;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,633,l),
(86,663,l),
(69,609,l),
(161,579,l),
(104,501,l),
(150,467,l),
(207,545,l),
(264,467,l),
(310,501,l),
(253,579,l),
(345,609,l),
(327,663,l),
(236,633,l),
(236,730,l),
(178,730,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
13 12 11 10 9 8 7 6 5 4 3 2 1 13 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 38 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
0 0 0 14 0 14 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,315,l),
(221,160,l),
(299,160,l),
(299,315,l),
(447,315,l),
(447,392,l),
(299,392,l),
(299,547,l),
(221,547,l),
(221,392,l),
(74,392,l),
(74,315,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 5 1 3 4 0 3 103 0 4 4 1 95 0 1 1 41 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 1 87 2 1 0 5 1 3 4 0 3 103 0 1 1 4 95 0 4 1 4 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = plus;
unicode = 43;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,-168,l),
(438,801,l),
(348,801,l),
(39,-168,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = slash;
unicode = 47;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,434,o),
(67,408,qs),
(67,382,o),
(100,348,o),
(126,348,qs),
(151,348,o),
(186,381,o),
(186,408,qs),
(186,434,o),
(153,468,o),
(126,468,qs),
(100,468,o)
);
},
{
closed = 1;
nodes = (
(67,78,o),
(67,52,qs),
(67,26,o),
(100,-8,o),
(126,-8,qs),
(151,-8,o),
(186,26,o),
(186,52,qs),
(186,78,o),
(153,112,o),
(126,112,qs),
(100,112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 47 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,434,o),
(74,408,qs),
(74,382,o),
(107,348,o),
(133,348,qs),
(159,348,o),
(193,381,o),
(193,408,qs),
(193,434,o),
(159,468,o),
(133,468,qs),
(107,468,o)
);
},
{
closed = 1;
nodes = (
(87,-75,o),
(67,-89,q),
(91,-122,l),
(111,-115,o),
(148,-83,o),
(176,-41,o),
(193,6,o),
(193,29,qs),
(194,61,o),
(164,110,o),
(132,112,qs),
(106,113,o),
(70,82,o),
(70,54,qs),
(70,29,o),
(102,-1,o),
(128,-3,q),
(122,-27,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
27 26 2 2 73 0 2 1 2 134 3 1 0 1 1 0 89 3 1 0 0 1 97 0 1 0 1 81 1 0 19 17 7 5 0 11 1 11 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,99,l),
(377,192,l),
(136,351,l),
(377,509,l),
(377,602,l),
(39,372,l),
(39,329,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,444,l),
(473,522,l),
(69,522,l),
(69,444,l)
);
},
{
closed = 1;
nodes = (
(473,185,l),
(473,263,l),
(69,263,l),
(69,185,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 41 1 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,602,l),
(69,509,l),
(310,351,l),
(69,192,l),
(69,99,l),
(407,329,l),
(407,372,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = greater;
unicode = 62;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(685,33,o),
(733,33,qs),
(792,33,o),
(863,87,o),
(902,169,o),
(914,263,o),
(914,304,qs),
(914,390,o),
(862,540,o),
(762,651,o),
(616,715,o),
(522,715,qs),
(412,715,o),
(243,642,o),
(129,513,o),
(70,339,o),
(70,232,qs),
(70,144,o),
(125,-8,o),
(231,-121,o),
(384,-186,o),
(482,-186,qs),
(500,-186,o),
(530,-184,o),
(558,-181,o),
(586,-177,o),
(604,-173,q),
(597,-89,l),
(581,-92,o),
(558,-95,o),
(535,-98,o),
(510,-99,o),
(492,-99,qs),
(414,-99,o),
(290,-48,o),
(205,43,o),
(160,167,o),
(160,240,qs),
(160,321,o),
(206,465,o),
(297,572,o),
(432,634,o),
(522,634,qs),
(600,634,o),
(716,581,o),
(794,488,o),
(833,364,o),
(833,294,qs),
(833,272,o),
(826,208,o),
(807,148,o),
(771,105,o),
(738,105,qs),
(713,106,o),
(686,131,o),
(675,170,o),
(675,216,o),
(677,239,qs),
(682,294,o),
(696,405,o),
(705,460,q),
(650,466,l),
(623,414,l),
(606,453,o),
(538,485,o),
(498,486,qs),
(448,486,o),
(371,447,o),
(318,381,o),
(288,294,o),
(288,239,qs),
(288,204,o),
(306,133,o),
(346,76,o),
(411,39,o),
(458,38,qs),
(482,38,o),
(524,45,o),
(564,64,o),
(600,95,o),
(615,119,q),
(625,81,o)
);
},
{
closed = 1;
nodes = (
(389,341,o),
(419,383,o),
(465,410,o),
(497,410,qs),
(531,410,o),
(573,381,o),
(596,341,o),
(604,298,o),
(604,278,o),
(604,268,o),
(600,235,o),
(581,182,o),
(550,138,o),
(506,110,o),
(473,110,qs),
(440,111,o),
(399,140,o),
(377,180,o),
(370,224,o),
(370,241,qs),
(370,275,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
20 19 18 3 9 1 53 1 4 0 54 1 5 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
20 19 18 3 9 1 53 1 4 7 54 1 5 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 9 2 1 9 105 8 1 2 7 1 0 4 2 0 105 0 3 3 6 97 0 6 6 46 77 0 4 4 5 97 0 5 5 43 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 9 2 1 9 105 8 1 2 7 1 0 4 2 0 105 0 4 0 5 4 5 101 0 3 3 6 97 0 6 6 46 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 0 9 8 1 9 105 0 8 0 0 7 8 0 105 0 2 0 7 4 2 7 105 0 4 0 5 4 5 101 0 3 3 6 97 0 6 6 46 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
99 97 38 40 40 55 56 40 43 40 36 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = at;
unicode = 64;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,-114,l),
(170,-114,l),
(170,719,l),
(286,719,l),
(286,791,l),
(87,791,l),
(87,-186,l),
(286,-186,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 1 2 0 1 103 0 2 2 3 95 4 1 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 4 1 3 2 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 321;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,719,l),
(151,719,l),
(151,-114,l),
(35,-114,l),
(35,-186,l),
(234,-186,l),
(234,791,l),
(35,791,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 321;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,801,l),
(39,801,l),
(348,-168,l),
(438,-168,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 133 2 1 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,512,l),
(144,512,l),
(231,643,l),
(318,512,l),
(404,512,l),
(261,715,l),
(201,715,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 463;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,-174,l),
(466,-97,l),
(-3,-97,l),
(-3,-174,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 463;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,660,o),
(219,688,o),
(226,708,o),
(244,719,o),
(261,719,qs),
(330,719,l),
(330,791,l),
(252,791,ls),
(225,791,o),
(182,781,o),
(152,756,o),
(135,715,o),
(135,684,qs),
(135,465,ls),
(135,438,o),
(128,391,o),
(107,356,o),
(68,335,o),
(37,335,q),
(37,270,l),
(68,270,o),
(107,249,o),
(128,213,o),
(135,166,o),
(135,140,qs),
(135,-79,ls),
(135,-110,o),
(152,-151,o),
(182,-176,o),
(225,-186,o),
(252,-186,qs),
(330,-186,l),
(330,-114,l),
(261,-114,ls),
(244,-114,o),
(226,-103,o),
(219,-83,o),
(218,-55,o),
(218,-38,qs),
(218,168,ls),
(218,214,o),
(190,284,o),
(150,302,q),
(190,321,o),
(218,389,o),
(218,437,qs),
(218,643,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 0 5 3 4 5 105 0 3 0 2 0 3 2 105 0 0 0 1 95 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 0 5 3 4 5 105 0 3 0 2 0 3 2 105 0 0 1 1 0 89 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
33 41 17 25 33 43 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,801,l),
(87,801,l),
(87,-168,l),
(174,-168,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 133 2 1 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,389,o),
(199,321,o),
(238,302,q),
(199,284,o),
(171,214,o),
(171,168,qs),
(171,-38,ls),
(171,-55,o),
(170,-83,o),
(163,-103,o),
(145,-114,o),
(128,-114,qs),
(59,-114,l),
(59,-186,l),
(137,-186,ls),
(164,-186,o),
(207,-176,o),
(237,-151,o),
(254,-110,o),
(254,-79,qs),
(254,140,ls),
(254,166,o),
(261,213,o),
(282,249,o),
(320,270,o),
(352,270,q),
(352,335,l),
(320,335,o),
(282,356,o),
(261,391,o),
(254,438,o),
(254,465,qs),
(254,684,ls),
(254,715,o),
(237,756,o),
(207,781,o),
(164,791,o),
(137,791,qs),
(59,791,l),
(59,719,l),
(128,719,ls),
(145,719,o),
(163,708,o),
(170,688,o),
(171,660,o),
(171,643,qs),
(171,437,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 0 2 1 0 105 0 2 0 3 5 2 3 105 0 5 5 4 95 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 0 2 1 0 105 0 2 0 3 5 2 3 105 0 5 4 4 5 89 0 5 5 4 95 0 4 5 4 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
33 41 17 25 33 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(630,65,q),
(588,121,l),
(554,90,o),
(486,69,o),
(440,69,qs),
(359,69,o),
(258,156,o),
(241,225,q),
(470,225,l),
(483,303,l),
(229,303,l),
(227,313,o),
(225,335,o),
(225,347,qs),
(225,350,o),
(226,382,o),
(229,405,q),
(501,405,l),
(514,483,l),
(242,483,l),
(249,512,o),
(277,567,o),
(324,610,o),
(390,635,o),
(431,636,qs),
(477,636,o),
(547,611,o),
(579,583,q),
(623,646,l),
(585,683,o),
(492,715,o),
(432,715,qs),
(318,715,o),
(182,592,o),
(156,483,q),
(62,483,l),
(49,405,l),
(146,405,l),
(144,378,o),
(143,349,o),
(143,344,qs),
(143,334,o),
(144,314,o),
(145,303,q),
(62,303,l),
(49,225,l),
(151,225,l),
(177,113,o),
(320,-8,o),
(435,-8,qs),
(557,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
21 1 6 5 22 1 4 6 48 1 11 1 49 1 0 11 4 76 7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 0 11 11 0 97 12 1 0 0 47 0 78 1 0 46 44 42 41 40 39 33 32 31 30 26 24 19 17 15 14 13 12 6 5 4 3 0 50 1 50 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,-75,o),
(67,-89,q),
(91,-122,l),
(111,-115,o),
(148,-83,o),
(176,-41,o),
(193,6,o),
(193,33,qs),
(193,62,o),
(163,111,o),
(132,112,qs),
(105,112,o),
(70,82,o),
(70,54,qs),
(70,29,o),
(102,-1,o),
(128,-3,q),
(122,-27,o)
);
},
{
closed = 1;
nodes = (
(276,-75,o),
(256,-89,q),
(280,-122,l),
(300,-115,o),
(337,-83,o),
(365,-41,o),
(382,6,o),
(382,33,qs),
(382,62,o),
(352,111,o),
(321,112,qs),
(294,112,o),
(259,82,o),
(259,54,qs),
(259,29,o),
(291,-1,o),
(317,-3,q),
(311,-27,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
33 32 15 14 4 0 73 1 1 0 0 118 25 23 37 2 8 23 
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,-75,o),
(67,-89,q),
(91,-122,l),
(111,-115,o),
(148,-83,o),
(176,-41,o),
(193,6,o),
(193,36,qs),
(193,63,o),
(164,110,o),
(132,112,qs),
(105,112,o),
(70,82,o),
(70,54,qs),
(70,29,o),
(102,-1,o),
(128,-3,q),
(122,-27,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,545,o),
(67,531,q),
(91,498,l),
(111,505,o),
(148,537,o),
(176,579,o),
(193,626,o),
(193,653,qs),
(193,682,o),
(166,730,o),
(133,732,qs),
(106,732,o),
(70,702,o),
(70,674,qs),
(70,649,o),
(102,619,o),
(128,617,q),
(122,593,o)
);
},
{
closed = 1;
nodes = (
(276,545,o),
(256,531,q),
(280,498,l),
(300,505,o),
(337,537,o),
(365,579,o),
(382,626,o),
(382,653,qs),
(382,682,o),
(355,730,o),
(322,732,qs),
(295,732,o),
(259,702,o),
(259,674,qs),
(259,649,o),
(291,619,o),
(317,617,q),
(311,593,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 15 14 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 48 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
25 23 37 2 8 23 
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,545,o),
(67,531,q),
(91,498,l),
(111,505,o),
(148,537,o),
(176,579,o),
(193,626,o),
(193,653,qs),
(193,682,o),
(180,706,qs),
(163,732,o),
(132,732,qs),
(105,732,o),
(70,702,o),
(70,674,qs),
(70,649,o),
(102,619,o),
(128,617,q),
(122,593,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
16 15 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 0 0 48 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
37 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,698,o),
(383,712,q),
(359,745,l),
(339,738,o),
(302,706,o),
(274,664,o),
(257,616,o),
(257,588,qs),
(257,559,o),
(287,513,o),
(321,511,qs),
(346,511,o),
(380,541,o),
(380,569,qs),
(380,594,o),
(348,624,o),
(322,626,q),
(328,650,o)
);
},
{
closed = 1;
nodes = (
(174,698,o),
(194,712,q),
(170,745,l),
(150,738,o),
(113,706,o),
(85,664,o),
(68,616,o),
(68,588,qs),
(68,559,o),
(98,512,o),
(133,511,qs),
(156,511,o),
(191,541,o),
(191,569,qs),
(191,594,o),
(159,624,o),
(133,626,q),
(139,650,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
33 32 15 14 4 0 74 1 1 0 0 118 25 23 37 2 8 23 
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,698,o),
(194,712,q),
(170,745,l),
(150,738,o),
(113,706,o),
(85,664,o),
(68,616,o),
(68,590,qs),
(68,561,o),
(81,539,qs),
(98,512,o),
(133,511,qs),
(155,511,o),
(191,541,o),
(191,569,qs),
(191,594,o),
(159,624,o),
(133,626,q),
(139,650,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
16 15 2 0 74 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,315,l),
(430,392,l),
(74,392,l),
(74,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(384,243,l),
(384,321,l),
(74,321,l),
(74,243,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 458;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,243,l),
(504,321,l),
(74,321,l),
(74,243,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(685,243,l),
(685,321,l),
(74,321,l),
(74,243,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,769,l),
(49,769,l),
(149,628,l),
(226,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 335;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,628,l),
(286,769,l),
(194,769,l),
(109,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 335;
}
);
note = acute;
unicode = 180;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,90,l),
(324,90,l),
(437,264,l),
(324,438,l),
(233,438,l),
(351,264,l)
);
},
{
closed = 1;
nodes = (
(59,90,l),
(149,90,l),
(262,264,l),
(149,438,l),
(59,438,l),
(174,264,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,90,l),
(149,90,l),
(262,264,l),
(149,438,l),
(59,438,l),
(174,264,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,438,l),
(152,438,l),
(39,264,l),
(152,90,l),
(243,90,l),
(125,264,l)
);
},
{
closed = 1;
nodes = (
(417,438,l),
(327,438,l),
(214,264,l),
(327,90,l),
(417,90,l),
(302,264,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 0 1 1 76 3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,438,l),
(152,438,l),
(39,264,l),
(152,90,l),
(242,90,l),
(127,264,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,243,l),
(379,321,l),
(74,321,l),
(74,243,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,78,o),
(57,52,qs),
(57,26,o),
(90,-8,o),
(116,-8,qs),
(141,-8,o),
(176,26,o),
(176,52,qs),
(176,78,o),
(141,112,o),
(116,112,qs),
(90,112,o)
);
},
{
closed = 1;
nodes = (
(291,78,o),
(291,52,qs),
(291,26,o),
(324,-8,o),
(350,-8,qs),
(375,-8,o),
(410,26,o),
(410,52,qs),
(410,78,o),
(375,112,o),
(350,112,qs),
(324,112,o)
);
},
{
closed = 1;
nodes = (
(521,78,o),
(521,52,qs),
(521,26,o),
(554,-8,o),
(580,-8,qs),
(605,-8,o),
(640,26,o),
(640,52,qs),
(640,78,o),
(605,112,o),
(580,112,qs),
(554,112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 4 7 2 6 5 0 0 1 97 5 3 2 1 1 47 1 78 25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = uni0445;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,0,l),
(310,266,l),
(488,527,l),
(389,527,l),
(259,327,l),
(125,527,l),
(23,527,l),
(202,269,l),
(14,0,l),
(110,0,l),
(254,201,l),
(400,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 0 1 1 76 2 1 1 1 22 77 3 1 0 0 21 0 78 18 18 18 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = uni0445;
unicode = 1093;
},
{
glyphname = uni0431;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,521,o),
(168,549,qs),
(184,572,o),
(227,600,o),
(261,605,qs),
(307,612,o),
(352,617,o),
(395,622,o),
(415,625,qs),
(443,628,o),
(487,635,o),
(502,640,q),
(502,718,l),
(480,714,o),
(435,707,o),
(416,705,qs),
(394,702,o),
(275,685,o),
(258,682,qs),
(204,673,o),
(121,627,o),
(94,579,qs),
(77,550,o),
(58,475,o),
(54,435,qs),
(50,396,o),
(49,299,o),
(51,283,q),
(52,230,o),
(78,120,o),
(133,41,o),
(223,-6,o),
(289,-6,qs),
(347,-6,o),
(436,33,o),
(497,101,o),
(529,194,o),
(529,248,qs),
(529,302,o),
(499,390,o),
(442,453,o),
(359,487,o),
(305,487,qs),
(282,487,o),
(233,478,o),
(186,458,o),
(146,429,o),
(131,408,q),
(132,442,o)
);
},
{
closed = 1;
nodes = (
(196,97,o),
(158,145,o),
(139,208,o),
(139,243,qs),
(140,276,o),
(160,337,o),
(200,384,o),
(256,410,o),
(292,411,qs),
(331,411,o),
(385,386,o),
(423,341,o),
(444,280,o),
(444,245,qs),
(444,209,o),
(424,145,o),
(385,97,o),
(328,69,o),
(291,69,qs),
(253,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
20 0 2 2 3 1 76 36 35 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 50 49 60 58 49 68 50 68 40 36 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni0431;
unicode = 1073;
},
{
glyphname = uni0432;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,0,ls),
(356,0,o),
(424,22,o),
(471,61,o),
(497,114,o),
(498,156,qs),
(498,201,o),
(450,271,o),
(396,283,q),
(467,317,o),
(467,396,qs),
(467,430,o),
(442,480,o),
(420,495,qs),
(395,513,o),
(322,527,o),
(271,527,qs),
(67,527,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(281,452,o),
(323,450,o),
(359,437,o),
(384,410,o),
(384,381,qs),
(383,356,o),
(349,320,o),
(324,312,qs),
(304,305,o),
(252,302,o),
(227,302,qs),
(154,302,l),
(154,452,l),
(263,452,ls)
);
},
{
closed = 1;
nodes = (
(263,231,ls),
(290,231,o),
(340,229,o),
(360,223,qs),
(384,215,o),
(412,180,o),
(412,150,qs),
(411,127,o),
(391,97,o),
(359,80,o),
(316,74,o),
(293,74,qs),
(154,74,l),
(154,230,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 22 77 0 4 4 1 95 0 1 1 21 1 78 19 19 46 43 35 33 19 32 19 30 50 46 32 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = uni0432;
unicode = 1074;
},
{
glyphname = uni0433;
kernLeft = uni0432;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,452,l),
(431,452,l),
(431,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 22 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = uni0433;
unicode = 1075;
},
{
glyphname = uni0434;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,293,o),
(119,247,qs),
(115,205,o),
(99,130,o),
(85,110,qs),
(62,74,o),
(22,74,q),
(22,-162,l),
(104,-162,l),
(104,0,l),
(489,0,l),
(489,-162,l),
(571,-162,l),
(571,74,l),
(502,74,l),
(502,527,l),
(128,527,l),
(128,498,o),
(128,440,o),
(127,411,qs),
(127,384,o)
);
},
{
closed = 1;
nodes = (
(157,74,l),
(172,95,o),
(189,145,o),
(198,194,o),
(202,241,o),
(203,261,qs),
(206,306,o),
(208,410,o),
(209,452,q),
(417,452,l),
(417,74,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 6 0 95 0 0 0 22 77 7 5 2 1 1 3 95 0 3 3 21 77 7 5 2 1 1 2 95 4 1 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
4 1 2 1 2 83 0 6 6 0 95 0 0 0 22 77 7 5 2 1 1 3 95 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
24 23 17 17 17 17 17 19 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = uni0434;
unicode = 1076;
},
{
glyphname = uni0436;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(423,227,l),
(511,227,l),
(648,0,l),
(747,0,l),
(576,276,l),
(732,527,l),
(641,527,l),
(502,299,l),
(423,299,l),
(423,527,l),
(338,527,l),
(338,299,l),
(259,299,l),
(120,527,l),
(29,527,l),
(185,276,l),
(14,0,l),
(113,0,l),
(250,227,l),
(338,227,l),
(338,0,l),
(423,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
16 5 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 22 77 10 9 7 3 1 1 21 1 78 0 0 0 21 0 21 17 18 17 17 17 17 18 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = uni0436;
unicode = 1078;
},
{
glyphname = uni043A;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,226,l),
(254,226,l),
(412,0,l),
(512,0,l),
(321,276,l),
(497,527,l),
(400,527,l),
(244,300,l),
(152,300,l),
(152,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 12 0 12 17 18 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = uni043A;
unicode = 1082;
},
{
glyphname = uni0438;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,362,o),
(436,389,o),
(444,404,q),
(444,0,l),
(529,0,l),
(529,527,l),
(445,527,l),
(190,179,ls),
(183,170,o),
(159,137,o),
(152,123,q),
(152,527,l),
(67,527,l),
(67,0,l),
(150,0,l),
(409,352,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
12 4 2 0 1 1 76 2 1 1 1 22 77 3 1 0 0 21 0 78 17 21 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = uni0438;
unicode = 1080;
},
{
glyphname = uni0439;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,694,o),
(213,734,q),
(135,734,l),
(137,662,o),
(226,596,o),
(305,596,qs),
(384,596,o),
(475,662,o),
(477,734,q),
(399,734,l),
(399,694,o),
(348,662,o),
(306,662,qs),
(264,662,o)
);
},
{
closed = 1;
nodes = (
(417,362,o),
(436,389,o),
(444,404,q),
(444,0,l),
(529,0,l),
(529,527,l),
(445,527,l),
(190,179,ls),
(183,170,o),
(159,137,o),
(152,123,q),
(152,527,l),
(67,527,l),
(67,0,l),
(150,0,l),
(409,352,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
26 18 2 4 5 1 76 3 1 1 0 1 133 8 1 0 0 2 5 0 2 105 6 1 5 5 22 77 7 1 4 4 21 4 78 1 0 25 24 23 22 17 16 15 14 11 10 8 6 4 3 0 13 1 13 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = uni0439;
unicode = 1081;
},
{
glyphname = uni043B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,128,o),
(83,108,qs),
(59,74,o),
(19,74,q),
(19,-1,l),
(50,-1,ls),
(88,-1,o),
(146,35,o),
(163,64,qs),
(185,105,o),
(199,205,o),
(201,245,qs),
(210,452,l),
(408,452,l),
(408,0,l),
(493,0,l),
(493,527,l),
(127,527,l),
(126,455,o),
(121,319,o),
(116,247,qs),
(113,204,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 2 2 0 95 0 0 0 22 77 0 4 4 1 97 3 1 1 1 21 1 78 17 38 17 17 19 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = uni043B;
unicode = 1083;
},
{
glyphname = uni043C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,0,l),
(151,433,l),
(338,135,l),
(362,135,l),
(548,433,l),
(548,0,l),
(632,0,l),
(632,527,l),
(520,527,l),
(352,263,l),
(181,527,l),
(67,527,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 22 77 4 1 2 2 21 2 78 18 18 17 18 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = uni043C;
unicode = 1084;
},
{
glyphname = uni043D;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,221,l),
(416,221,l),
(416,0,l),
(501,0,l),
(501,527,l),
(416,527,l),
(416,296,l),
(152,296,l),
(152,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = uni043D;
unicode = 1085;
},
{
glyphname = uni043F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,452,l),
(419,452,l),
(419,0,l),
(504,0,l),
(504,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 2 2 0 95 0 0 0 22 77 4 3 2 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni043F;
unicode = 1087;
},
{
glyphname = uni0442;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(9,452,l),
(190,452,l),
(190,0,l),
(275,0,l),
(275,452,l),
(456,452,l),
(456,527,l),
(9,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 3 95 4 1 3 3 22 77 0 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 465;
}
);
note = uni0442;
unicode = 1090;
},
{
glyphname = uni0444;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,530,o),
(43,393,o),
(43,259,qs),
(43,192,o),
(83,94,o),
(156,29,o),
(257,-4,o),
(318,-6,q),
(318,-180,l),
(403,-180,l),
(403,-6,l),
(464,-4,o),
(566,29,o),
(639,94,o),
(679,192,o),
(679,259,qs),
(679,392,o),
(532,530,o),
(403,532,q),
(403,694,l),
(318,694,l),
(318,532,l)
);
},
{
closed = 1;
nodes = (
(497,459,o),
(594,359,o),
(594,262,qs),
(594,165,o),
(500,66,o),
(403,65,q),
(403,459,l)
);
},
{
closed = 1;
nodes = (
(222,66,o),
(128,165,o),
(128,262,qs),
(128,359,o),
(224,459,o),
(318,459,q),
(318,65,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 0 20 77 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 77 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 2 3 134 0 0 0 20 77 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 0 1 0 133 0 3 2 3 134 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
35 34 17 20 17 22 17 17 22 17 16 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = uni0444;
unicode = 1092;
},
{
glyphname = uni0446;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,527,l),
(67,527,l),
(67,0,l),
(479,0,l),
(479,-162,l),
(562,-162,l),
(562,74,l),
(493,74,l),
(493,527,l),
(407,527,l),
(407,74,l),
(152,74,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
4 1 0 0 22 77 6 5 2 1 1 3 96 0 3 3 21 77 6 5 2 1 1 2 96 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 1 2 84 4 1 0 0 22 77 6 5 2 1 1 3 96 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni0446;
unicode = 1094;
},
{
glyphname = uni0447;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,349,o),
(63,270,o),
(109,217,o),
(184,191,o),
(240,191,qs),
(268,191,o),
(339,196,o),
(377,203,q),
(377,0,l),
(462,0,l),
(462,527,l),
(377,527,l),
(377,278,l),
(348,272,o),
(281,266,o),
(251,266,qs),
(212,266,o),
(164,285,o),
(138,321,o),
(129,374,o),
(129,409,qs),
(129,527,l),
(44,527,l),
(44,403,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 22 77 0 3 3 21 3 78 50 17 19 37 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = uni0447;
unicode = 1095;
},
{
glyphname = uni0448;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(720,0,l),
(720,527,l),
(635,527,l),
(635,74,l),
(435,74,l),
(435,527,l),
(350,527,l),
(350,74,l),
(152,74,l),
(152,527,l),
(67,527,l),
(67,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 22 77 3 1 1 1 5 96 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = uni0448;
unicode = 1096;
},
{
glyphname = uni0449;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(707,0,l),
(707,-162,l),
(789,-162,l),
(789,74,l),
(720,74,l),
(720,527,l),
(635,527,l),
(635,74,l),
(435,74,l),
(435,527,l),
(350,527,l),
(350,74,l),
(152,74,l),
(152,527,l),
(67,527,l),
(67,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
4 2 2 0 0 22 77 5 3 2 1 1 7 96 0 7 7 21 77 5 3 2 1 1 6 96 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 6 1 6 84 4 2 2 0 0 22 77 5 3 2 1 1 7 96 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 811;
}
);
note = uni0449;
unicode = 1097;
},
{
glyphname = uni044A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,0,ls),
(389,0,o),
(469,20,o),
(496,43,qs),
(519,63,o),
(549,122,o),
(550,172,qs),
(550,214,o),
(521,273,o),
(495,293,qs),
(466,313,o),
(391,326,o),
(346,326,qs),
(229,326,l),
(229,527,l),
(14,527,l),
(14,452,l),
(142,452,l),
(142,0,l)
);
},
{
closed = 1;
nodes = (
(229,252,l),
(330,252,ls),
(353,252,o),
(401,248,o),
(440,231,o),
(464,198,o),
(464,169,qs),
(464,138,o),
(441,99,o),
(422,91,qs),
(394,77,o),
(317,74,o),
(279,74,qs),
(229,74,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 22 77 6 1 4 4 3 95 0 3 3 21 3 78 21 19 31 29 19 32 21 32 42 33 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = uni044A;
unicode = 1098;
},
{
glyphname = uni044B;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,0,ls),
(292,0,o),
(372,20,o),
(400,43,qs),
(423,63,o),
(452,122,o),
(454,167,qs),
(454,212,o),
(425,273,o),
(398,293,qs),
(369,313,o),
(294,326,o),
(249,326,qs),
(154,326,l),
(154,527,l),
(67,527,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(612,527,l),
(527,527,l),
(527,0,l),
(612,0,l)
);
},
{
closed = 1;
nodes = (
(154,252,l),
(233,252,ls),
(256,252,o),
(304,248,o),
(343,231,o),
(368,195,o),
(368,164,qs),
(367,138,o),
(344,99,o),
(325,91,qs),
(297,77,o),
(220,74,o),
(182,74,qs),
(154,74,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 1 0 6 5 1 6 103 3 1 0 0 22 77 8 1 5 5 2 96 7 4 2 2 2 21 2 78 23 21 17 17 33 31 21 34 23 34 17 20 17 20 18 42 33 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = uni044B;
unicode = 1099;
},
{
glyphname = uni044C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,0,ls),
(313,0,o),
(394,20,o),
(421,43,qs),
(444,63,o),
(474,122,o),
(475,167,qs),
(475,212,o),
(446,273,o),
(419,293,qs),
(391,313,o),
(315,326,o),
(270,326,qs),
(154,326,l),
(154,527,l),
(67,527,l),
(67,0,l)
);
},
{
closed = 1;
nodes = (
(154,252,l),
(254,252,ls),
(277,252,o),
(325,248,o),
(364,231,o),
(389,195,o),
(389,164,qs),
(388,138,o),
(365,99,o),
(346,91,qs),
(318,77,o),
(242,74,o),
(204,74,qs),
(154,74,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 1 0 4 3 1 4 103 0 0 0 22 77 5 1 3 3 2 96 0 2 2 21 2 78 19 17 29 27 17 30 19 30 42 33 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = uni044C;
unicode = 1100;
},
{
glyphname = uni044E;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,499,o),
(289,437,o),
(256,352,o),
(252,300,q),
(152,300,l),
(152,527,l),
(67,527,l),
(67,0,l),
(152,0,l),
(152,226,l),
(252,226,l),
(256,174,o),
(289,89,o),
(349,28,o),
(436,-6,o),
(494,-6,qs),
(557,-6,o),
(650,34,o),
(711,105,o),
(742,204,o),
(742,263,qs),
(742,322,o),
(711,421,o),
(650,493,o),
(557,533,o),
(494,533,qs),
(436,533,o)
);
},
{
closed = 1;
nodes = (
(390,99,o),
(352,152,o),
(334,222,o),
(334,263,qs),
(334,303,o),
(352,374,o),
(390,427,o),
(451,457,o),
(494,457,qs),
(537,457,o),
(599,427,o),
(638,374,o),
(657,303,o),
(657,263,qs),
(657,222,o),
(638,152,o),
(599,99,o),
(537,69,o),
(494,69,qs),
(451,69,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 0 2 6 5 2 103 0 7 7 0 97 4 8 2 0 0 29 77 9 1 6 6 1 97 3 1 1 1 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 0 2 6 5 2 103 0 4 4 22 77 0 7 7 0 97 8 1 0 0 29 77 0 3 3 21 77 9 1 6 6 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
28 27 1 0 38 36 27 46 28 46 22 21 20 19 18 17 16 15 11 9 0 26 1 26 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 785;
}
);
note = uni044E;
unicode = 1102;
},
{
glyphname = uni044F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,527,ls),
(213,527,o),
(139,516,o),
(111,496,qs),
(82,476,o),
(47,411,o),
(48,358,qs),
(50,297,o),
(114,224,o),
(171,208,q),
(34,0,l),
(133,0,l),
(261,195,l),
(382,195,l),
(382,0,l),
(467,0,l),
(467,527,l)
);
},
{
closed = 1;
nodes = (
(319,269,ls),
(281,269,o),
(210,273,o),
(181,287,qs),
(159,298,o),
(135,335,o),
(134,362,qs),
(135,391,o),
(156,428,o),
(173,438,qs),
(193,449,o),
(244,453,o),
(269,453,qs),
(382,452,l),
(382,269,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 1 1 5 1 76 0 5 0 1 0 5 1 103 0 4 4 3 95 0 3 3 22 77 2 1 0 0 21 0 78 57 33 41 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 534;
}
);
note = uni044F;
unicode = 1103;
},
{
glyphname = uni0410;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l),
(398,707,l)
);
},
{
closed = 1;
nodes = (
(335,631,l),
(481,231,l),
(189,231,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 3 1 76 5 1 4 0 1 0 4 1 104 0 3 3 20 77 2 1 0 0 21 0 78 8 8 8 10 8 10 17 17 17 16 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uni0410;
unicode = 1040;
},
{
glyphname = uni0415;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l),
(562,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = uni0415;
unicode = 1045;
},
{
glyphname = uni041C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,619,l),
(411,184,l),
(451,184,l),
(686,619,l),
(686,0,l),
(773,0,l),
(773,707,l),
(646,707,l),
(433,318,l),
(217,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 3 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 20 77 5 4 2 2 2 21 2 78 0 0 0 12 0 12 18 17 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 860;
}
);
note = uni041C;
unicode = 1052;
},
{
glyphname = uni041D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,307,l),
(553,307,l),
(553,0,l),
(640,0,l),
(640,707,l),
(553,707,l),
(553,387,l),
(174,387,l),
(174,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 20 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni041D;
unicode = 1053;
},
{
glyphname = uni0420;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,233,l),
(314,233,ls),
(372,233,o),
(468,263,o),
(500,289,qs),
(538,319,o),
(581,411,o),
(581,472,qs),
(581,592,o),
(449,707,o),
(332,707,qs),
(87,707,l),
(87,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(328,628,ls),
(492,628,o),
(492,476,qs),
(492,430,o),
(466,372,o),
(443,352,qs),
(420,331,o),
(348,312,o),
(310,312,qs),
(174,312,l),
(174,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 20 77 5 1 2 2 21 2 78 0 0 24 22 16 14 0 13 0 13 39 33 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = uni0420;
unicode = 1056;
},
{
glyphname = uni0422;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(555,628,l),
(555,707,l),
(14,707,l),
(14,628,l),
(241,628,l),
(241,0,l),
(328,0,l),
(328,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 1 1 2 95 0 2 2 20 77 0 0 0 21 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uni0422;
unicode = 1058;
},
{
glyphname = uni0425;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,707,l),
(21,707,l),
(241,353,l),
(14,0,l),
(116,0,l),
(296,283,l),
(474,0,l),
(579,0,l),
(351,356,l),
(571,707,l),
(466,707,l),
(297,425,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = uni0425;
unicode = 1061;
},
{
glyphname = T;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,628,l),
(555,628,l),
(555,707,l),
(14,707,l),
(14,628,l),
(241,628,l),
(241,0,l),
(328,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 1 95 0 1 1 38 77 4 1 3 3 39 3 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = T;
unicode = 84;
},
{
glyphname = uni0412;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,0,ls),
(378,0,o),
(475,15,o),
(553,57,o),
(603,131,o),
(606,197,qs),
(606,269,o),
(538,360,o),
(470,372,q),
(521,392,o),
(570,476,o),
(570,530,qs),
(570,584,o),
(530,654,o),
(501,673,qs),
(468,695,o),
(385,707,o),
(334,707,qs),
(86,707,l),
(86,0,l)
);
},
{
closed = 1;
nodes = (
(365,628,o),
(419,621,o),
(461,599,o),
(485,558,o),
(485,524,qs),
(484,481,o),
(449,432,o),
(421,418,qs),
(397,405,o),
(337,397,o),
(309,397,qs),
(173,397,l),
(173,628,l),
(335,628,ls)
);
},
{
closed = 1;
nodes = (
(173,319,l),
(358,319,ls),
(388,319,o),
(446,309,o),
(491,283,o),
(518,237,o),
(518,201,qs),
(518,159,o),
(482,110,o),
(423,85,o),
(358,79,o),
(326,79,qs),
(173,79,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
10 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 20 77 7 1 4 4 1 95 0 1 1 21 1 78 35 34 20 20 45 43 34 46 35 46 20 33 20 32 34 47 32 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = uni0412;
unicode = 1042;
},
{
glyphname = uni041F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,628,l),
(556,628,l),
(556,0,l),
(643,0,l),
(643,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
0 1 1 3 95 0 3 3 20 77 2 1 0 0 21 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = uni041F;
unicode = 1055;
},
{
glyphname = uni0413;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,628,l),
(542,628,l),
(542,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 20 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni0413;
unicode = 1043;
},
{
glyphname = uni041B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(606,707,l),
(135,707,l),
(135,619,o),
(130,440,o),
(128,352,qs),
(126,304,o),
(121,197,o),
(110,161,qs),
(102,126,o),
(51,79,o),
(14,79,q),
(14,-7,l),
(91,-5,o),
(173,55,o),
(190,106,qs),
(199,131,o),
(209,209,o),
(213,295,o),
(216,378,o),
(216,408,qs),
(217,462,o),
(220,574,o),
(222,628,q),
(519,628,l),
(519,0,l),
(606,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 3 95 0 3 3 20 77 0 2 2 1 97 5 4 2 1 1 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 3 95 0 3 3 20 77 5 1 4 4 21 77 0 2 2 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 25 0 25 24 17 26 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 693;
}
);
note = uni041B;
unicode = 1051;
},
{
glyphname = uni0414;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,0,l),
(600,0,l),
(600,-195,l),
(687,-195,l),
(687,79,l),
(602,79,l),
(602,707,l),
(150,707,l),
(149,607,o),
(143,407,o),
(136,307,qs),
(132,256,o),
(117,159,o),
(105,129,qs),
(95,106,o),
(58,79,o),
(22,79,q),
(22,-195,l),
(109,-195,l)
);
},
{
closed = 1;
nodes = (
(197,114,o),
(213,190,o),
(222,263,o),
(225,329,o),
(226,353,qs),
(235,628,l),
(515,628,l),
(515,79,l),
(183,79,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 0 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 6 1 95 0 1 1 20 77 9 7 2 3 0 0 4 95 0 4 4 21 77 9 7 2 3 0 0 3 95 8 5 2 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 5 2 3 0 3 83 0 6 6 1 95 0 1 1 20 77 9 7 2 3 0 0 4 95 0 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
19 19 0 0 19 27 19 27 21 20 0 18 0 18 17 17 17 24 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni0414;
unicode = 1044;
},
{
glyphname = uni0411;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,0,ls),
(386,0,o),
(484,22,o),
(557,72,o),
(599,153,o),
(599,218,qs),
(599,280,o),
(555,357,o),
(482,400,o),
(387,415,o),
(335,415,qs),
(174,415,l),
(174,628,l),
(568,628,l),
(568,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(325,336,ls),
(360,336,o),
(427,329,o),
(479,304,o),
(511,255,o),
(511,212,qs),
(511,169,o),
(479,117,o),
(425,88,o),
(356,79,o),
(320,79,qs),
(174,79,l),
(174,336,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 1 1 0 95 0 0 0 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = uni0411;
unicode = 1041;
},
{
glyphname = uni0416;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,307,l),
(581,307,l),
(744,0,l),
(846,0,l),
(653,357,l),
(844,707,l),
(750,707,l),
(581,386,l),
(473,386,l),
(473,707,l),
(386,707,l),
(386,386,l),
(280,386,l),
(111,707,l),
(15,707,l),
(206,357,l),
(14,0,l),
(115,0,l),
(278,307,l),
(386,307,l),
(386,0,l),
(473,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
16 5 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 20 77 10 9 7 3 1 1 21 1 78 0 0 0 21 0 21 17 18 17 17 17 17 18 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 860;
}
);
note = uni0416;
unicode = 1046;
},
{
glyphname = uni0417;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-8,o),
(313,-8,qs),
(363,-8,o),
(457,14,o),
(530,63,o),
(576,141,o),
(577,197,qs),
(577,203,ls),
(577,234,o),
(558,290,o),
(524,336,o),
(473,368,o),
(442,374,q),
(476,390,o),
(517,430,o),
(539,472,o),
(546,514,o),
(546,533,qs),
(546,583,o),
(507,653,o),
(443,696,o),
(360,715,o),
(315,715,qs),
(249,715,o),
(135,677,o),
(98,632,qs),
(83,611,o),
(63,559,o),
(63,537,qs),
(63,529,l),
(150,529,l),
(150,552,o),
(171,588,o),
(188,602,qs),
(211,620,o),
(275,636,o),
(309,636,qs),
(335,636,o),
(388,627,o),
(434,601,o),
(461,555,o),
(461,519,qs),
(460,483,o),
(422,433,o),
(394,419,qs),
(367,405,o),
(304,398,o),
(275,398,qs),
(224,398,l),
(224,320,l),
(310,320,ls),
(336,320,o),
(402,316,o),
(428,303,qs),
(453,291,o),
(488,240,o),
(488,198,qs),
(488,156,o),
(452,105,o),
(399,79,o),
(338,71,o),
(313,71,qs),
(297,71,o),
(255,74,o),
(212,85,o),
(172,105,o),
(157,122,qs),
(133,151,o),
(131,182,q),
(44,182,l),
(45,142,o),
(78,75,o),
(108,50,qs),
(147,18,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
60 1 2 3 1 76 0 5 4 3 4 5 3 128 0 0 2 1 2 0 1 128 0 3 0 2 0 3 2 103 0 4 4 6 97 0 6 6 27 77 0 1 1 7 97 0 7 7 28 7 78 72 70 38 21 41 33 56 38 19 8 7 29 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = uni0417;
unicode = 1047;
},
{
glyphname = uni0418;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,566,l),
(558,0,l),
(645,0,l),
(645,707,l),
(553,707,l),
(174,136,l),
(174,707,l),
(87,707,l),
(87,0,l),
(178,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 9 0 9 17 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 732;
}
);
note = uni0418;
unicode = 1048;
},
{
glyphname = uni0419;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,880,o),
(265,918,q),
(182,918,l),
(184,846,o),
(279,767,o),
(366,767,qs),
(453,767,o),
(548,846,o),
(550,918,q),
(467,918,l),
(465,880,o),
(411,839,o),
(366,839,qs),
(321,839,o)
);
},
{
closed = 1;
nodes = (
(558,566,l),
(558,0,l),
(645,0,l),
(645,707,l),
(553,707,l),
(174,136,l),
(174,707,l),
(87,707,l),
(87,0,l),
(178,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
22 17 2 6 4 1 76 3 1 1 0 1 133 8 1 0 0 2 4 0 2 105 5 1 4 4 20 77 9 7 2 6 6 21 6 78 14 14 1 0 14 23 14 23 21 20 19 18 16 15 11 10 8 6 4 3 0 13 1 13 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 732;
}
);
note = uni0419;
unicode = 1049;
},
{
glyphname = uni041A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,302,l),
(508,0,l),
(611,0,l),
(355,356,l),
(609,707,l),
(509,707,l),
(279,381,l),
(174,381,l),
(174,707,l),
(87,707,l),
(87,0,l),
(174,0,l),
(174,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
8 1 5 2 1 76 0 2 0 5 0 2 5 103 3 1 1 1 20 77 4 1 0 0 21 0 78 17 18 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = uni041A;
unicode = 1050;
},
{
glyphname = uni0423;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,-1,o),
(262,20,o),
(299,53,qs),
(323,75,o),
(366,141,o),
(385,179,qs),
(413,234,o),
(464,351,o),
(488,408,qs),
(520,484,o),
(583,635,o),
(615,707,q),
(521,707,l),
(343,269,l),
(118,707,l),
(15,707,l),
(293,179,l),
(276,147,o),
(239,109,o),
(197,88,o),
(147,81,o),
(116,81,q),
(116,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
8 5 2 0 1 1 76 2 1 1 1 20 77 0 0 0 3 97 0 3 3 21 3 78 27 18 21 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = uni0423;
unicode = 1059;
},
{
glyphname = uni0424;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(462,106,l),
(537,106,ls),
(597,107,o),
(691,150,o),
(755,223,o),
(789,323,o),
(789,382,qs),
(788,443,o),
(748,541,o),
(678,609,o),
(583,646,o),
(526,646,qs),
(462,646,l),
(462,746,l),
(375,746,l),
(375,646,l),
(310,646,ls),
(253,646,o),
(158,609,o),
(89,541,o),
(49,443,o),
(48,382,qs),
(48,323,o),
(80,223,o),
(143,150,o),
(235,107,o),
(295,106,qs),
(375,106,l),
(375,-9,l),
(462,-9,l)
);
},
{
closed = 1;
nodes = (
(375,181,l),
(313,181,ls),
(266,181,o),
(199,212,o),
(156,266,o),
(136,340,o),
(136,384,qs),
(136,425,o),
(161,494,o),
(208,543,o),
(275,571,o),
(317,571,qs),
(375,571,l)
);
},
{
closed = 1;
nodes = (
(520,571,ls),
(562,571,o),
(629,543,o),
(676,494,o),
(701,425,o),
(701,384,qs),
(701,340,o),
(681,266,o),
(638,212,o),
(571,181,o),
(524,181,qs),
(462,181,l),
(462,571,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
3 1 1 9 11 2 6 7 1 6 105 8 1 7 4 1 0 5 7 0 103 0 2 2 5 95 10 1 5 5 21 5 78 31 30 0 0 55 53 45 43 41 39 30 42 31 42 0 29 0 29 40 33 17 40 33 12 7 27 
CALL[ ]	/* CallFunction */";
};
width = 837;
}
);
note = uni0424;
unicode = 1060;
},
{
glyphname = uni0426;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(618,-195,l),
(705,-195,l),
(705,79,l),
(620,79,l),
(620,707,l),
(533,707,l),
(533,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l),
(618,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 20 77 3 1 1 1 5 96 6 1 5 5 21 77 3 1 1 1 4 96 0 4 4 24 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 1 4 84 2 1 0 0 20 77 3 1 1 1 5 96 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = uni0426;
unicode = 1062;
},
{
glyphname = uni0427;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,343,o),
(173,379,o),
(151,445,o),
(151,499,qs),
(151,707,l),
(64,707,l),
(64,475,ls),
(64,408,o),
(99,322,o),
(164,271,o),
(258,250,o),
(318,249,qs),
(336,249,o),
(376,249,o),
(468,256,o),
(487,258,q),
(487,0,l),
(574,0,l),
(574,707,l),
(487,707,l),
(487,336,l),
(458,332,o),
(397,328,o),
(333,328,qs),
(286,329,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 0 1 8 1 3 0 2 76 5 1 0 0 3 2 0 3 105 4 1 1 1 20 77 0 2 2 21 2 78 2 0 19 18 13 10 7 6 5 4 0 24 2 24 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 661;
}
);
note = uni0427;
unicode = 1063;
},
{
glyphname = uni0428;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(878,0,l),
(878,707,l),
(791,707,l),
(791,79,l),
(526,79,l),
(526,707,l),
(439,707,l),
(439,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 20 77 3 1 1 1 5 96 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 965;
}
);
note = uni0428;
unicode = 1064;
},
{
glyphname = uni0429;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(876,0,l),
(876,-195,l),
(963,-195,l),
(963,79,l),
(878,79,l),
(878,707,l),
(791,707,l),
(791,79,l),
(526,79,l),
(526,707,l),
(439,707,l),
(439,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
4 2 2 0 0 20 77 5 3 2 1 1 7 96 0 7 7 21 77 5 3 2 1 1 6 96 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 6 1 6 84 4 2 2 0 0 20 77 5 3 2 1 1 7 96 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 982;
}
);
note = uni0429;
unicode = 1065;
},
{
glyphname = uni042A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(411,0,ls),
(466,0,o),
(564,22,o),
(638,72,o),
(681,153,o),
(681,218,qs),
(681,280,o),
(637,357,o),
(564,400,o),
(469,415,o),
(417,415,qs),
(271,415,l),
(271,707,l),
(14,707,l),
(14,628,l),
(184,628,l),
(184,0,l)
);
},
{
closed = 1;
nodes = (
(407,336,ls),
(442,336,o),
(509,329,o),
(561,304,o),
(593,255,o),
(593,212,qs),
(593,169,o),
(561,117,o),
(507,88,o),
(438,79,o),
(402,79,qs),
(271,79,l),
(271,336,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
note = uni042A;
unicode = 1066;
},
{
glyphname = uni042B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,0,ls),
(350,0,o),
(448,22,o),
(521,72,o),
(563,153,o),
(563,218,qs),
(563,280,o),
(519,357,o),
(446,400,o),
(351,415,o),
(299,415,qs),
(174,415,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(754,707,l),
(667,707,l),
(667,0,l),
(754,0,l)
);
},
{
closed = 1;
nodes = (
(289,336,ls),
(324,336,o),
(391,329,o),
(443,304,o),
(475,255,o),
(475,212,qs),
(475,169,o),
(443,117,o),
(389,88,o),
(320,79,o),
(284,79,qs),
(174,79,l),
(174,336,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 6 5 1 6 103 3 1 0 0 20 77 0 5 5 2 96 7 4 2 2 2 21 2 78 15 15 31 29 21 19 15 18 15 18 18 40 33 16 8 7 26 
CALL[ ]	/* CallFunction */";
};
width = 841;
}
);
note = uni042B;
unicode = 1067;
},
{
glyphname = uni042C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(312,0,ls),
(367,0,o),
(466,21,o),
(540,72,o),
(583,155,o),
(583,218,qs),
(582,280,o),
(538,357,o),
(466,400,o),
(371,415,o),
(318,415,qs),
(173,415,l),
(173,707,l),
(86,707,l),
(86,0,l)
);
},
{
closed = 1;
nodes = (
(308,336,ls),
(343,336,o),
(410,329,o),
(462,304,o),
(494,255,o),
(494,212,qs),
(494,167,o),
(462,117,o),
(409,89,o),
(341,79,o),
(304,79,qs),
(173,79,l),
(173,336,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 1 0 4 3 1 4 103 0 0 0 20 77 0 3 3 2 96 0 2 2 21 2 78 40 33 40 33 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = uni042C;
unicode = 1068;
},
{
glyphname = uni042D;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,597,o),
(535,530,o),
(566,442,o),
(569,393,q),
(243,393,l),
(243,314,l),
(569,314,l),
(567,263,o),
(536,174,o),
(478,108,o),
(393,71,o),
(336,71,qs),
(261,71,o),
(158,133,o),
(143,185,q),
(48,185,l),
(71,97,o),
(216,-8,o),
(333,-8,qs),
(415,-8,o),
(538,45,o),
(619,139,o),
(660,270,o),
(660,348,qs),
(660,425,o),
(623,558,o),
(545,657,o),
(425,714,o),
(342,715,qs),
(292,715,o),
(200,693,o),
(125,646,o),
(70,573,o),
(58,522,q),
(146,522,l),
(161,574,o),
(263,636,o),
(338,636,qs),
(394,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 0 7 0 6 4 7 6 103 8 1 0 0 2 97 0 2 2 27 77 0 5 5 3 97 0 3 3 28 3 78 1 0 34 33 32 31 27 25 23 22 20 18 10 8 4 3 0 38 1 38 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = uni042D;
unicode = 1069;
},
{
glyphname = uni042E;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,314,l),
(289,314,l),
(293,244,o),
(337,126,o),
(417,40,o),
(533,-8,o),
(610,-8,qs),
(692,-8,o),
(817,47,o),
(901,143,o),
(943,275,o),
(943,353,qs),
(943,431,o),
(901,564,o),
(817,660,o),
(692,715,o),
(610,715,qs),
(533,715,o),
(417,667,o),
(337,581,o),
(293,463,o),
(289,393,q),
(174,393,l),
(174,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(764,591,o),
(824,514,o),
(853,411,o),
(853,353,qs),
(853,295,o),
(824,193,o),
(765,116,o),
(673,71,o),
(610,71,qs),
(547,71,o),
(458,116,o),
(402,194,o),
(376,296,o),
(376,353,qs),
(376,410,o),
(402,513,o),
(459,591,o),
(548,636,o),
(610,636,qs),
(673,636,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 0 4 7 1 4 103 9 1 6 6 0 97 2 1 0 0 20 77 0 7 7 3 97 8 5 2 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 4 7 1 4 103 0 0 0 20 77 9 1 6 6 2 97 0 2 2 27 77 8 1 5 5 21 77 0 7 7 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
28 27 0 0 38 36 27 46 28 46 0 26 0 26 20 40 36 17 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 991;
}
);
note = uni042E;
unicode = 1070;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,265,l),
(486,0,l),
(573,0,l),
(573,707,l),
(311,707,ls),
(253,707,o),
(158,682,o),
(91,628,o),
(55,544,o),
(55,484,qs),
(55,440,o),
(79,371,o),
(121,321,o),
(178,289,o),
(211,281,q),
(60,0,l),
(157,0,l),
(298,265,l)
);
},
{
closed = 1;
nodes = (
(298,344,o),
(229,356,o),
(174,388,o),
(143,442,o),
(143,487,qs),
(143,558,o),
(225,628,o),
(310,628,qs),
(486,628,l),
(486,344,l),
(337,344,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
2 1 3 5 1 76 6 1 5 0 3 0 5 3 103 0 4 4 1 95 0 1 1 20 77 2 1 0 0 21 0 78 18 18 18 28 18 27 34 17 17 42 16 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = uni042F;
unicode = 1071;
},
{
glyphname = uni0440;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,32,o),
(262,-6,o),
(322,-6,qs),
(383,-6,o),
(471,35,o),
(529,107,o),
(557,205,o),
(557,263,qs),
(557,320,o),
(529,419,o),
(472,492,o),
(387,533,o),
(326,533,qs),
(272,532,o),
(179,489,o),
(152,446,q),
(148,527,l),
(67,527,l),
(67,-190,l),
(152,-190,l),
(152,63,l)
);
},
{
closed = 1;
nodes = (
(188,120,o),
(169,158,qs),
(158,181,o),
(150,232,o),
(150,262,qs),
(150,288,o),
(158,337,o),
(169,360,qs),
(188,402,o),
(262,457,o),
(313,457,qs),
(356,457,o),
(417,426,o),
(455,374,o),
(472,303,o),
(472,263,qs),
(471,223,o),
(454,153,o),
(417,100,o),
(358,69,o),
(315,69,qs),
(261,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
4 1 4 5 20 1 3 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 1 97 2 1 1 1 22 77 6 1 4 4 3 97 0 3 3 30 77 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 5 5 1 97 2 1 1 1 22 77 6 1 4 4 3 97 0 3 3 30 77 0 0 0 1 97 2 1 1 1 22 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 2 97 0 2 2 29 77 6 1 4 4 3 97 0 3 3 30 77 0 0 0 1 95 0 1 1 22 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 42 22 42 40 35 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0440;
unicode = 1088;
},
{
glyphname = O;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 4 1 0 0 47 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = O;
unicode = 79;
},
{
glyphname = a;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
38 36 47 45 36 50 38 50 21 36 18 34 40 36 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = a;
unicode = 97;
},
{
glyphname = c;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,12,o),
(463,51,o),
(504,110,o),
(512,151,q),
(424,151,l),
(418,128,o),
(392,96,o),
(357,77,o),
(316,69,o),
(295,69,qs),
(252,69,o),
(190,100,o),
(151,153,o),
(132,223,o),
(132,262,qs),
(132,299,o),
(150,370,o),
(189,424,o),
(254,457,o),
(297,457,qs),
(341,458,o),
(406,420,o),
(421,376,q),
(508,376,l),
(499,419,o),
(459,479,o),
(404,516,o),
(342,533,o),
(302,533,qs),
(235,533,o),
(141,490,o),
(79,417,o),
(47,318,o),
(47,262,qs),
(47,204,o),
(77,106,o),
(137,34,o),
(229,-6,o),
(292,-6,qs),
(331,-6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 6 1 0 0 50 0 78 1 0 35 34 30 28 20 18 16 15 11 9 0 39 1 39 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = c;
unicode = 99;
},
{
glyphname = e;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 35 35 0 0 35 43 35 43 39 37 0 34 0 34 40 36 20 36 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,452,l),
(344,452,l),
(344,527,l),
(203,527,l),
(203,573,ls),
(203,624,o),
(239,678,o),
(293,678,qs),
(344,678,l),
(344,753,l),
(284,753,ls),
(194,753,o),
(118,671,o),
(118,583,qs),
(118,527,l),
(32,527,l),
(32,452,l),
(118,452,l),
(118,0,l),
(203,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 41 77 7 1 6 6 39 6 78 0 0 0 19 0 19 17 19 33 35 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,527,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(426,33,o),
(452,79,q),
(452,6,ls),
(452,-30,o),
(435,-91,o),
(399,-135,o),
(341,-160,o),
(301,-160,qs),
(280,-160,o),
(236,-152,o),
(198,-133,o),
(169,-102,o),
(163,-79,q),
(75,-79,l),
(83,-120,o),
(124,-179,o),
(183,-218,o),
(256,-236,o),
(296,-236,qs),
(417,-236,o),
(537,-108,o),
(537,4,qs),
(537,527,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,263,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 4 20 1 7 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 5 20 1 7 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 3 2 3 1 2 128 8 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 8 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 5 5 41 77 8 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
40 39 50 48 39 60 40 60 19 40 39 36 20 34 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = g;
unicode = 103;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,689,o),
(80,664,qs),
(80,639,o),
(112,607,o),
(137,607,qs),
(161,607,o),
(195,639,o),
(195,664,qs),
(195,689,o),
(161,720,o),
(137,720,qs),
(112,720,o)
);
},
{
closed = 1;
nodes = (
(95,-1,ls),
(95,-52,o),
(59,-106,o),
(5,-106,qs),
(-31,-106,l),
(-31,-180,l),
(15,-180,ls),
(104,-180,o),
(180,-98,o),
(180,-10,qs),
(180,527,l),
(95,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 97 5 1 0 0 48 77 6 1 4 4 41 77 0 3 3 2 98 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 2 3 2 102 0 1 1 0 97 5 1 0 0 48 77 6 1 4 4 41 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
12 12 1 0 12 23 12 23 20 18 17 15 7 5 0 11 1 11 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 254;
}
);
note = j;
unicode = 106;
},
{
glyphname = o;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 0 97 4 1 0 0 49 77 5 1 2 2 1 97 0 1 1 50 1 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = o;
unicode = 111;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,257,ls),
(152,297,o),
(171,369,o),
(212,422,o),
(278,453,o),
(325,453,qs),
(356,453,l),
(356,533,l),
(329,533,ls),
(272,533,o),
(182,491,o),
(153,445,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 1 1 0 0 41 77 4 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 4 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 15 0 15 33 35 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = r;
unicode = 114;
},
{
glyphname = t;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,684,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,170,ls),
(115,82,o),
(191,0,o),
(281,0,qs),
(338,0,l),
(338,74,l),
(299,74,ls),
(239,74,o),
(200,125,o),
(200,179,qs),
(200,452,l),
(341,452,l),
(341,527,l),
(200,527,l),
(200,684,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 19 33 35 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = t;
unicode = 116;
},
{
glyphname = y2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,527,l),
(17,527,l),
(248,-17,l),
(234,-50,o),
(207,-98,o),
(170,-130,o),
(120,-145,o),
(84,-145,q),
(84,-226,l),
(102,-226,ls),
(145,-226,o),
(213,-209,o),
(250,-176,qs),
(275,-154,o),
(316,-82,o),
(348,-1,o),
(377,80,o),
(388,112,qs),
(537,527,l),
(441,527,l),
(295,84,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 17 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
21 17 40 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 549;
}
);
note = y2_alt;
},
{
glyphname = uni0443;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,527,l),
(17,527,l),
(248,-17,l),
(234,-50,o),
(207,-98,o),
(170,-130,o),
(120,-145,o),
(84,-145,q),
(84,-226,l),
(102,-226,ls),
(145,-226,o),
(213,-209,o),
(250,-176,qs),
(275,-154,o),
(316,-82,o),
(349,-1,o),
(376,80,o),
(388,112,qs),
(537,527,l),
(441,527,l),
(295,83,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 17 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
21 17 40 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 549;
}
);
note = uni0443;
unicode = 1091;
},
{
glyphname = uni0451;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,676,o),
(125,651,qs),
(125,626,o),
(158,595,o),
(182,595,qs),
(207,595,o),
(240,626,o),
(240,651,qs),
(240,676,o),
(207,707,o),
(182,707,qs),
(158,707,o)
);
},
{
closed = 1;
nodes = (
(351,676,o),
(351,651,qs),
(351,626,o),
(383,595,o),
(407,595,qs),
(432,595,o),
(465,626,o),
(465,651,qs),
(465,676,o),
(432,707,o),
(407,707,qs),
(383,707,o)
);
},
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
0 5 8 4 8 5 4 128 14 1 10 13 1 8 5 10 8 103 3 1 1 1 0 97 12 2 11 3 0 0 20 77 0 9 9 7 97 0 7 7 29 77 0 4 4 6 97 0 6 6 30 6 78 59 59 24 24 13 12 1 0 59 67 59 67 63 61 24 58 24 58 51 49 41 39 35 34 30 28 19 17 12 23 13 23 7 5 0 11 1 11 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = uni0451;
unicode = 1105;
},
{
glyphname = uni0437;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,356,o),
(449,392,qs),
(449,432,o),
(415,486,o),
(361,519,o),
(292,533,o),
(257,533,qs),
(222,533,o),
(151,518,o),
(93,485,o),
(56,430,o),
(55,390,q),
(139,390,l),
(142,411,o),
(166,437,o),
(200,452,o),
(240,457,o),
(258,457,qs),
(277,457,o),
(316,450,o),
(347,433,o),
(366,405,o),
(366,384,qs),
(365,357,o),
(344,328,o),
(311,310,o),
(271,303,o),
(252,303,qs),
(175,303,l),
(175,228,l),
(269,228,ls),
(288,228,o),
(332,225,o),
(349,217,qs),
(368,208,o),
(386,173,o),
(386,152,qs),
(386,126,o),
(362,93,o),
(324,75,o),
(279,69,o),
(258,69,qs),
(240,69,o),
(195,76,o),
(154,93,o),
(124,120,o),
(120,141,q),
(37,141,l),
(39,98,o),
(80,42,o),
(142,8,o),
(219,-6,o),
(257,-6,qs),
(297,-6,o),
(373,12,o),
(433,50,o),
(470,110,o),
(471,152,qs),
(471,199,o),
(431,267,o),
(380,283,q),
(415,300,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 29 77 0 2 2 0 97 0 0 0 30 0 78 36 20 40 33 56 36 20 39 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = uni0437;
unicode = 1079;
},
{
glyphname = uni044D;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,224,l),
(418,224,l),
(417,192,o),
(397,136,o),
(360,94,o),
(303,69,o),
(266,69,qs),
(245,69,o),
(201,77,o),
(162,96,o),
(133,128,o),
(127,151,q),
(39,151,l),
(47,110,o),
(89,51,o),
(149,12,o),
(223,-6,o),
(262,-6,qs),
(325,-6,o),
(416,33,o),
(476,104,o),
(505,203,o),
(505,263,qs),
(505,321,o),
(477,420,o),
(419,492,o),
(330,533,o),
(265,533,qs),
(223,533,o),
(144,512,o),
(110,486,qs),
(86,466,o),
(52,412,o),
(44,376,q),
(130,376,l),
(136,399,o),
(164,430,o),
(201,449,o),
(244,457,o),
(266,457,qs),
(339,456,o),
(414,368,o),
(419,298,q),
(187,298,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 8 1 7 0 6 4 7 6 103 0 0 0 2 97 0 2 2 29 77 0 5 5 3 97 0 3 3 30 3 78 0 0 0 43 0 43 20 36 20 40 37 20 34 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = uni044D;
unicode = 1101;
},
{
glyphname = C;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,574,o),
(561,522,q),
(649,522,l),
(639,565,o),
(595,636,o),
(526,687,o),
(433,715,o),
(375,715,qs),
(292,715,o),
(170,660,o),
(88,563,o),
(48,431,o),
(48,353,qs),
(48,274,o),
(88,142,o),
(169,46,o),
(291,-8,o),
(373,-8,qs),
(491,-8,o),
(639,97,o),
(662,185,q),
(567,185,l),
(552,133,o),
(450,71,o),
(375,71,qs),
(313,71,o),
(223,116,o),
(165,193,o),
(137,297,o),
(137,356,qs),
(137,411,o),
(163,512,o),
(220,590,o),
(309,636,o),
(372,636,qs),
(447,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 1 0 33 32 28 26 18 16 14 13 11 9 0 35 1 35 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = C;
unicode = 67;
},
{
glyphname = S;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,625,o),
(456,599,o),
(485,557,o),
(489,526,q),
(574,526,l),
(571,589,o),
(511,669,o),
(466,689,qs),
(437,703,o),
(372,714,o),
(332,715,qs),
(283,715,o),
(196,695,o),
(126,649,o),
(82,573,o),
(82,517,qs),
(82,457,o),
(136,378,o),
(176,359,qs),
(201,346,o),
(261,327,o),
(323,313,o),
(385,301,o),
(413,292,qs),
(455,280,o),
(505,234,o),
(505,187,qs),
(505,156,o),
(479,112,o),
(435,84,o),
(378,71,o),
(348,71,qs),
(317,71,o),
(254,81,o),
(200,107,o),
(158,151,o),
(148,185,q),
(57,185,l),
(68,132,o),
(122,58,o),
(198,12,o),
(291,-8,o),
(342,-8,qs),
(393,-8,o),
(484,15,o),
(553,65,o),
(594,143,o),
(594,203,qs),
(594,267,o),
(521,345,o),
(460,366,qs),
(434,375,o),
(379,387,o),
(322,399,o),
(268,413,o),
(244,423,qs),
(214,436,o),
(172,485,o),
(172,525,qs),
(172,558,o),
(201,601,o),
(247,626,o),
(304,636,o),
(332,636,qs),
(361,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 60 59 54 52 33 31 27 26 22 20 0 64 1 64 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni0421;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,574,o),
(561,522,q),
(649,522,l),
(639,565,o),
(595,636,o),
(526,687,o),
(433,715,o),
(375,715,qs),
(292,715,o),
(170,660,o),
(88,563,o),
(48,431,o),
(48,353,qs),
(48,274,o),
(88,142,o),
(169,46,o),
(291,-8,o),
(373,-8,qs),
(491,-8,o),
(639,97,o),
(662,185,q),
(567,185,l),
(552,133,o),
(450,71,o),
(375,71,qs),
(313,71,o),
(223,116,o),
(165,193,o),
(137,297,o),
(137,356,qs),
(137,411,o),
(163,512,o),
(220,590,o),
(309,636,o),
(372,636,qs),
(447,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 27 77 0 1 1 3 97 0 3 3 28 3 78 1 0 33 32 28 26 18 16 14 13 11 9 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = uni0421;
unicode = 1057;
},
{
glyphname = G;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,574,o),
(559,522,q),
(654,522,l),
(631,610,o),
(487,715,o),
(370,715,qs),
(287,715,o),
(166,659,o),
(87,562,o),
(48,429,o),
(48,351,qs),
(48,273,o),
(87,141,o),
(168,46,o),
(289,-8,o),
(372,-8,qs),
(441,-8,o),
(550,36,o),
(590,74,qs),
(611,95,o),
(642,148,o),
(662,207,o),
(672,269,o),
(672,298,qs),
(672,357,l),
(357,357,l),
(357,278,l),
(589,278,l),
(589,233,o),
(563,159,o),
(532,127,qs),
(479,71,o),
(373,71,qs),
(311,71,o),
(222,115,o),
(165,192,o),
(137,294,o),
(137,353,qs),
(137,412,o),
(163,515,o),
(219,592,o),
(307,636,o),
(369,636,qs),
(444,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 7 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 1 0 41 40 38 36 28 26 18 17 16 15 11 9 0 43 1 43 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = G;
unicode = 71;
},
{
glyphname = uni041E;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 27 77 0 3 3 0 97 4 1 0 0 28 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = uni041E;
unicode = 1054;
},
{
glyphname = Q;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(698,-74,l),
(597,66,l),
(654,115,o),
(713,262,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(462,-8,o),
(524,19,q),
(630,-126,l)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
20 1 0 3 1 76 22 21 2 0 73 4 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 0 0 0 47 0 78 24 23 34 32 23 42 24 42 40 33 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Q;
unicode = 81;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,90,o),
(162,-8,o),
(266,-8,qs),
(324,-8,o),
(404,29,o),
(454,96,o),
(476,188,o),
(476,244,qs),
(476,707,l),
(389,707,l),
(389,226,ls),
(389,192,o),
(377,135,o),
(348,94,o),
(301,71,o),
(266,71,qs),
(200,72,o),
(136,138,o),
(130,195,q),
(42,195,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 0 0 0 19 0 19 37 21 34 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = J;
unicode = 74;
},
{
glyphname = K_alt;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,249,l),
(252,332,l),
(513,0,l),
(616,0,l),
(315,388,l),
(614,707,l),
(513,707,l),
(174,342,l),
(174,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 6 3 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = K_alt;
},
{
glyphname = K;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,302,l),
(286,302,l),
(508,0,l),
(611,0,l),
(355,356,l),
(609,707,l),
(509,707,l),
(278,381,l),
(174,381,l),
(174,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 38 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = K;
unicode = 75;
},
{
glyphname = k_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,176,l),
(228,254,l),
(414,0,l),
(513,0,l),
(289,309,l),
(501,527,l),
(402,527,l),
(152,270,l),
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
10 9 6 3 4 2 1 1 76 0 0 0 20 77 0 1 1 22 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = k_alt;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,226,l),
(254,226,l),
(413,0,l),
(513,0,l),
(322,276,l),
(498,527,l),
(402,527,l),
(244,300,l),
(152,300,l),
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = k;
unicode = 107;
},
{
glyphname = i_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,689,o),
(83,664,qs),
(83,639,o),
(116,607,o),
(140,607,qs),
(165,607,o),
(198,639,o),
(198,664,qs),
(198,689,o),
(165,720,o),
(140,720,qs),
(116,720,o)
);
},
{
closed = 1;
nodes = (
(183,527,l),
(12,527,l),
(12,452,l),
(98,452,l),
(98,0,l),
(183,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 1 1 0 97 5 1 0 0 27 77 0 2 2 3 95 0 3 3 22 77 6 1 4 4 21 4 78 12 12 1 0 12 17 12 17 16 15 14 13 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = i_alt;
},
{
glyphname = j_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,689,o),
(93,664,qs),
(93,639,o),
(125,607,o),
(150,607,qs),
(174,607,o),
(208,639,o),
(208,664,qs),
(208,689,o),
(174,720,o),
(150,720,qs),
(125,720,o)
);
},
{
closed = 1;
nodes = (
(21,527,l),
(21,452,l),
(108,452,l),
(108,-1,ls),
(108,-52,o),
(72,-106,o),
(18,-106,qs),
(-18,-106,l),
(-18,-180,l),
(28,-180,ls),
(117,-180,o),
(193,-98,o),
(193,-10,qs),
(193,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 0 97 6 1 0 0 27 77 0 4 4 5 95 0 5 5 22 77 0 3 3 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 0 2 3 2 101 0 1 1 0 97 6 1 0 0 27 77 0 4 4 5 95 0 5 5 22 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 25 24 23 22 19 17 16 14 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = j_alt;
},
{
glyphname = s_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,449,o),
(373,434,o),
(399,407,o),
(401,391,q),
(479,391,l),
(476,418,o),
(450,471,o),
(398,512,o),
(329,532,o),
(280,533,qs),
(240,533,o),
(166,520,o),
(103,487,o),
(62,427,o),
(61,382,qs),
(61,338,o),
(92,284,o),
(119,268,qs),
(140,255,o),
(197,239,o),
(258,228,o),
(318,219,o),
(342,214,qs),
(376,207,o),
(413,177,o),
(413,144,qs),
(413,119,o),
(383,89,o),
(341,74,o),
(298,70,o),
(275,70,qs),
(261,70,o),
(218,75,o),
(174,91,o),
(137,120,o),
(129,143,q),
(43,143,l),
(49,100,o),
(94,44,o),
(158,10,o),
(234,-6,o),
(280,-6,qs),
(321,-6,o),
(397,9,o),
(434,31,qs),
(462,50,o),
(498,107,o),
(498,156,qs),
(498,202,o),
(454,268,o),
(405,282,qs),
(392,285,o),
(349,293,o),
(299,300,o),
(250,308,o),
(232,312,qs),
(193,321,o),
(146,353,o),
(145,382,qs),
(145,407,o),
(171,437,o),
(210,452,o),
(254,457,o),
(271,457,qs),
(294,457,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 60 59 55 53 34 32 28 27 23 21 0 64 1 64 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = s_alt;
},
{
glyphname = s;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,420,o),
(372,391,q),
(451,391,l),
(447,422,o),
(415,478,o),
(386,498,qs),
(338,533,o),
(257,533,qs),
(219,533,o),
(151,519,o),
(121,501,qs),
(93,483,o),
(57,426,o),
(55,382,qs),
(55,340,o),
(89,282,o),
(117,265,qs),
(138,252,o),
(186,237,o),
(237,226,o),
(288,217,o),
(312,212,qs),
(346,205,o),
(385,175,o),
(385,145,qs),
(385,118,o),
(359,88,o),
(321,73,o),
(279,69,o),
(263,69,qs),
(241,69,o),
(206,75,o),
(167,91,o),
(133,119,o),
(125,143,q),
(39,143,l),
(45,100,o),
(88,43,o),
(149,8,o),
(223,-6,o),
(259,-6,qs),
(296,-6,o),
(371,8,o),
(430,42,o),
(469,101,o),
(470,149,qs),
(470,248,o),
(374,278,qs),
(362,282,o),
(327,290,o),
(288,297,o),
(248,304,o),
(231,308,qs),
(190,316,o),
(139,350,o),
(139,384,qs),
(140,408,o),
(165,437,o),
(200,452,o),
(237,457,o),
(255,457,qs),
(303,456,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 59 58 54 52 32 30 26 25 21 19 0 61 1 61 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = s;
unicode = 115;
},
{
glyphname = c_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,9,o),
(451,42,o),
(493,91,o),
(504,126,q),
(413,126,l),
(396,94,o),
(328,69,o),
(293,69,qs),
(250,69,o),
(188,101,o),
(147,154,o),
(128,224,o),
(128,263,qs),
(128,302,o),
(147,372,o),
(187,424,o),
(252,457,o),
(292,457,qs),
(326,459,o),
(396,429,o),
(413,394,q),
(501,394,l),
(480,465,o),
(375,533,o),
(297,533,qs),
(232,533,o),
(138,492,o),
(75,420,o),
(43,321,o),
(43,263,qs),
(43,204,o),
(73,106,o),
(136,34,o),
(229,-6,o),
(292,-6,qs),
(328,-6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 30 0 78 1 0 31 30 28 26 18 16 14 13 11 9 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = c_alt;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,656,o),
(119,547,o),
(59,392,o),
(59,296,qs),
(59,199,o),
(117,44,o),
(224,-64,o),
(373,-122,o),
(463,-122,qs),
(553,-122,o),
(703,-64,o),
(809,44,o),
(868,199,o),
(868,296,qs),
(868,392,o),
(808,547,o),
(701,656,o),
(552,715,o),
(463,715,qs),
(374,715,o)
);
},
{
closed = 1;
nodes = (
(653,593,o),
(739,503,o),
(787,375,o),
(787,296,qs),
(787,216,o),
(740,89,o),
(655,0,o),
(535,-48,o),
(463,-48,qs),
(391,-48,o),
(271,0,o),
(186,89,o),
(139,216,o),
(139,296,qs),
(139,375,o),
(187,503,o),
(273,593,o),
(392,641,o),
(463,641,qs),
(534,641,o)
);
},
{
closed = 1;
nodes = (
(635,149,o),
(649,218,q),
(566,218,l),
(557,183,o),
(506,156,o),
(471,156,qs),
(440,156,o),
(397,179,o),
(369,217,o),
(356,268,o),
(356,297,qs),
(356,325,o),
(369,376,o),
(396,414,o),
(439,437,o),
(470,437,qs),
(505,437,o),
(555,410,o),
(564,375,q),
(645,375,l),
(631,447,o),
(541,510,o),
(469,510,qs),
(421,510,o),
(348,478,o),
(300,421,o),
(275,343,o),
(275,297,qs),
(275,250,o),
(299,172,o),
(348,115,o),
(421,83,o),
(470,83,qs),
(540,83,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 10 1 0 11 1 2 5 0 2 105 0 5 0 7 6 5 7 105 0 8 12 1 4 3 8 4 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 41 40 21 20 1 0 71 70 68 66 58 56 54 53 51 49 40 73 41 73 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 927;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(653,0,l),
(541,126,l),
(568,164,o),
(608,255,o),
(613,312,q),
(529,312,l),
(524,276,o),
(502,210,o),
(485,187,q),
(335,365,l),
(366,381,o),
(421,422,o),
(462,471,o),
(486,527,o),
(486,559,qs),
(486,634,o),
(394,713,o),
(322,715,qs),
(279,715,o),
(214,693,o),
(166,649,o),
(136,585,o),
(136,541,qs),
(136,454,o),
(214,381,q),
(145,346,o),
(67,250,o),
(67,183,qs),
(67,135,o),
(102,63,o),
(162,16,o),
(240,-8,o),
(283,-8,qs),
(340,-8,o),
(441,24,o),
(483,62,q),
(539,0,l)
);
},
{
closed = 1;
nodes = (
(253,457,o),
(234,489,o),
(221,525,o),
(221,546,qs),
(222,588,o),
(270,636,o),
(315,636,qs),
(355,636,o),
(406,589,o),
(404,550,qs),
(403,529,o),
(379,489,o),
(345,455,o),
(304,427,o),
(286,417,q),
(276,429,o)
);
},
{
closed = 1;
nodes = (
(402,93,o),
(331,71,o),
(297,71,qs),
(271,71,o),
(221,85,o),
(182,113,o),
(158,156,o),
(158,185,qs),
(158,234,o),
(217,302,o),
(259,324,q),
(433,124,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
26 11 2 2 4 64 34 27 3 5 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 4 1 97 0 1 1 46 77 0 2 2 0 97 3 1 0 0 47 77 0 5 5 0 97 3 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 1 97 0 1 1 46 77 0 2 2 3 95 0 3 3 39 77 0 5 5 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
46 40 20 27 45 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,711,o),
(177,685,o),
(119,637,o),
(84,566,o),
(84,517,qs),
(84,457,o),
(136,380,o),
(178,358,qs),
(204,344,o),
(264,326,o),
(325,313,o),
(387,301,o),
(415,292,qs),
(457,280,o),
(507,234,o),
(507,187,qs),
(507,156,o),
(481,112,o),
(437,84,o),
(380,71,o),
(350,71,qs),
(319,71,o),
(256,81,o),
(202,107,o),
(160,151,o),
(150,185,q),
(59,185,l),
(68,139,o),
(111,71,o),
(173,25,o),
(249,-1,o),
(291,-5,q),
(291,-138,l),
(378,-138,l),
(378,-7,l),
(423,-4,o),
(503,23,o),
(562,73,o),
(596,148,o),
(596,199,qs),
(596,267,o),
(524,346,o),
(462,366,qs),
(436,374,o),
(380,387,o),
(324,400,o),
(269,414,o),
(245,424,qs),
(215,437,o),
(174,485,o),
(174,525,qs),
(174,558,o),
(203,601,o),
(249,626,o),
(306,636,o),
(334,636,qs),
(363,636,o),
(416,625,o),
(458,599,o),
(487,557,o),
(491,526,q),
(576,526,l),
(574,569,o),
(543,635,o),
(492,681,o),
(424,708,o),
(384,712,q),
(384,844,l),
(296,844,l),
(296,714,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
69 2 2 2 0 37 1 3 6 2 76 0 1 2 5 2 1 5 128 0 5 6 2 5 6 126 0 0 0 2 1 0 2 105 0 6 0 4 6 4 99 0 3 3 50 3 78 49 47 43 42 36 35 34 33 36 22 16 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(201,765,o),
(133,637,o),
(88,502,o),
(65,365,o),
(65,302,qs),
(65,239,o),
(87,103,o),
(132,-32,o),
(199,-159,o),
(244,-212,q),
(336,-212,l),
(286,-143,o),
(215,-15,o),
(170,111,o),
(150,236,o),
(150,302,qs),
(150,367,o),
(169,493,o),
(213,620,o),
(285,749,o),
(338,818,q),
(246,818,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 21 0 21 26 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,-159,o),
(175,-31,o),
(220,104,o),
(243,241,o),
(243,304,qs),
(243,367,o),
(221,503,o),
(176,638,o),
(109,765,o),
(64,818,q),
(-28,818,l),
(22,749,o),
(93,621,o),
(138,495,o),
(158,370,o),
(158,304,qs),
(158,239,o),
(138,113,o),
(94,-13,o),
(22,-143,o),
(-30,-212,q),
(62,-212,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 133 2 1 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 21 0 21 26 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,-160,l),
(344,-4,l),
(377,0,o),
(437,22,o),
(485,60,o),
(518,115,o),
(525,151,q),
(437,151,l),
(431,128,o),
(405,96,o),
(371,76,o),
(330,69,o),
(309,69,qs),
(270,69,o),
(204,101,o),
(163,154,o),
(144,224,o),
(144,263,qs),
(144,302,o),
(163,372,o),
(203,426,o),
(266,457,o),
(312,457,qs),
(356,457,o),
(422,420,o),
(434,376,q),
(521,376,l),
(507,450,o),
(413,525,o),
(344,531,q),
(344,671,l),
(257,671,l),
(257,529,l),
(208,521,o),
(134,475,o),
(84,405,o),
(59,315,o),
(59,263,qs),
(59,211,o),
(83,121,o),
(133,52,o),
(207,6,o),
(257,-2,q),
(257,-160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
13 10 2 2 0 41 0 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 22 20 40 34 20 27 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = cent;
unicode = 162;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,631,o),
(366,615,o),
(390,589,o),
(394,571,q),
(473,571,l),
(469,608,o),
(433,662,o),
(380,697,o),
(316,713,o),
(279,713,qs),
(242,713,o),
(176,700,o),
(119,667,o),
(81,608,o),
(80,565,qs),
(80,508,o),
(124,472,q),
(97,453,o),
(72,397,o),
(72,364,qs),
(72,326,o),
(108,266,o),
(135,252,qs),
(153,241,o),
(203,225,o),
(251,214,o),
(302,206,o),
(323,202,qs),
(338,199,o),
(368,193,o),
(391,179,o),
(405,156,o),
(405,137,qs),
(405,112,o),
(379,84,o),
(342,70,o),
(298,67,o),
(280,67,qs),
(266,67,o),
(227,74,o),
(187,89,o),
(153,117,o),
(145,141,q),
(59,141,l),
(65,98,o),
(108,42,o),
(169,8,o),
(242,-7,o),
(288,-8,qs),
(321,-8,o),
(392,6,o),
(450,40,o),
(489,98,o),
(490,143,qs),
(490,181,o),
(466,232,o),
(439,246,q),
(459,262,o),
(487,315,o),
(488,346,qs),
(488,392,o),
(448,452,o),
(397,467,qs),
(385,470,o),
(348,478,o),
(306,487,o),
(264,495,o),
(246,499,qs),
(232,502,o),
(202,511,o),
(177,525,o),
(161,549,o),
(161,567,qs),
(161,591,o),
(185,620,o),
(218,634,o),
(255,639,o),
(277,639,qs),
(299,639,o)
);
},
{
closed = 1;
nodes = (
(297,413,o),
(332,405,qs),
(366,397,o),
(407,369,o),
(407,335,qs),
(406,315,o),
(386,280,o),
(372,274,q),
(359,276,o),
(325,281,o),
(289,287,o),
(254,294,o),
(239,297,qs),
(203,303,o),
(155,336,o),
(155,368,qs),
(155,387,o),
(172,425,o),
(185,436,q),
(220,426,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
90 61 21 3 2 5 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 74 73 69 67 42 39 35 34 30 28 0 78 1 78 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = section;
unicode = 167;
},
{
glyphname = uni04C1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,885,o),
(337,920,q),
(259,920,l),
(261,854,o),
(350,787,o),
(429,787,qs),
(508,787,o),
(599,854,o),
(601,920,q),
(523,920,l),
(521,885,o),
(472,853,o),
(430,853,qs),
(388,853,o)
);
},
{
closed = 1;
nodes = (
(473,307,l),
(581,307,l),
(744,0,l),
(846,0,l),
(653,357,l),
(844,707,l),
(750,707,l),
(581,386,l),
(473,386,l),
(473,707,l),
(386,707,l),
(386,386,l),
(280,386,l),
(111,707,l),
(15,707,l),
(206,357,l),
(14,0,l),
(115,0,l),
(278,307,l),
(386,307,l),
(386,0,l),
(473,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
30 19 2 4 7 1 76 3 1 1 0 1 133 14 1 0 0 2 6 0 2 105 9 1 7 12 1 4 5 7 4 104 10 8 2 6 6 20 77 15 13 11 3 5 5 21 5 78 14 14 1 0 14 35 14 35 34 33 32 31 29 28 27 26 25 24 23 22 21 20 18 17 16 15 11 10 8 6 4 3 0 13 1 13 16 7 22 
CALL[ ]	/* CallFunction */";
};
width = 860;
}
);
note = uni04C1;
unicode = 1217;
},
{
glyphname = uni04C2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,704,o),
(288,739,q),
(210,739,l),
(212,673,o),
(301,606,o),
(380,606,qs),
(459,606,o),
(550,673,o),
(552,739,q),
(474,739,l),
(472,704,o),
(423,672,o),
(381,672,qs),
(339,672,o)
);
},
{
closed = 1;
nodes = (
(499,227,l),
(648,0,l),
(747,0,l),
(564,276,l),
(732,527,l),
(639,527,l),
(488,299,l),
(423,299,l),
(423,527,l),
(338,527,l),
(338,299,l),
(273,299,l),
(122,527,l),
(29,527,l),
(197,276,l),
(14,0,l),
(113,0,l),
(262,227,l),
(338,227,l),
(338,0,l),
(423,0,l),
(423,227,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
31 20 2 5 8 1 76 3 1 1 0 1 133 14 1 0 0 2 7 0 2 105 10 1 8 13 1 5 4 8 5 104 11 9 2 7 7 22 77 12 6 2 4 4 21 4 78 1 0 35 34 33 32 30 29 28 27 26 25 24 23 22 21 19 18 17 16 15 14 11 10 8 6 4 3 0 13 1 13 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = uni04C2;
unicode = 1218;
},
{
glyphname = w_alt;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,399,l),
(236,82,l),
(110,527,l),
(14,527,l),
(178,0,l),
(293,0,l),
(387,268,l),
(480,0,l),
(597,0,l),
(760,527,l),
(664,527,l),
(540,82,l),
(429,399,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
10 5 2 1 4 1 76 0 4 0 1 0 4 1 128 3 1 0 0 22 77 2 1 1 1 21 1 78 18 17 18 17 17 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 774;
}
);
note = w_alt;
},
{
glyphname = W_alt;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,0,l),
(722,0,l),
(915,707,l),
(821,707,l),
(658,75,l),
(519,538,l),
(415,538,l),
(275,75,l),
(112,707,l),
(14,707,l),
(207,0,l),
(339,0,l),
(466,417,l),
(466,417,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
8 5 2 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
3 1 1 1 20 77 0 2 2 22 77 4 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 20 77 4 1 0 0 21 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 18 17 17 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 929;
}
);
note = W_alt;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,551,o),
(518,653,o),
(412,715,o),
(333,715,qs),
(253,715,o),
(147,652,o),
(83,552,o),
(57,425,o),
(57,353,qs),
(57,281,o),
(83,155,o),
(147,54,o),
(253,-8,o),
(333,-8,qs),
(412,-8,o),
(518,54,o),
(582,155,o),
(609,285,o),
(609,353,qs),
(609,421,o)
);
},
{
closed = 1;
nodes = (
(160,500,o),
(200,583,o),
(273,636,o),
(333,636,qs),
(392,636,o),
(465,583,o),
(505,500,o),
(519,400,o),
(519,353,qs),
(519,305,o),
(505,205,o),
(465,123,o),
(392,71,o),
(333,71,qs),
(273,71,o),
(200,123,o),
(160,205,o),
(146,305,o),
(146,353,qs),
(146,400,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 46 77 0 2 2 0 97 0 0 0 47 0 78 40 40 40 36 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,707,l),
(181,683,o),
(147,653,o),
(105,635,o),
(55,628,o),
(25,626,q),
(25,567,l),
(169,567,l),
(169,0,l),
(256,0,l),
(256,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 38 77 0 0 0 39 0 78 20 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 363;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,0,l),
(516,0,l),
(516,79,l),
(156,79,l),
(335,230,ls),
(368,259,o),
(430,317,o),
(479,383,o),
(508,461,o),
(508,510,qs),
(508,559,o),
(475,636,o),
(415,688,o),
(333,715,o),
(284,715,qs),
(243,715,o),
(165,695,o),
(100,655,o),
(55,594,o),
(48,553,q),
(141,553,l),
(153,593,o),
(229,635,o),
(280,635,qs),
(344,635,o),
(422,566,o),
(420,502,qs),
(419,460,o),
(379,389,o),
(322,325,o),
(257,270,o),
(230,247,qs),
(30,72,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
32 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 0 3 3 4 95 0 4 4 39 4 78 17 26 36 18 39 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,16,o),
(503,67,o),
(542,146,o),
(542,201,qs),
(542,205,ls),
(542,269,o),
(472,360,o),
(405,373,q),
(439,387,o),
(481,429,o),
(503,471,o),
(511,514,o),
(511,533,qs),
(511,583,o),
(476,653,o),
(416,696,o),
(337,715,o),
(292,715,qs),
(251,715,o),
(172,697,o),
(107,657,o),
(63,595,o),
(57,551,q),
(144,551,l),
(150,574,o),
(180,607,o),
(219,627,o),
(264,636,o),
(285,636,qs),
(311,636,o),
(361,627,o),
(401,601,o),
(425,555,o),
(425,519,qs),
(424,483,o),
(386,428,o),
(354,413,qs),
(326,401,o),
(280,398,o),
(253,398,qs),
(212,398,l),
(212,320,l),
(280,320,ls),
(311,320,o),
(372,312,o),
(421,286,o),
(452,238,o),
(452,198,qs),
(452,156,o),
(419,105,o),
(370,79,o),
(314,71,o),
(292,71,qs),
(268,71,o),
(216,79,o),
(169,99,o),
(132,132,o),
(123,158,q),
(33,158,l),
(40,111,o),
(91,47,o),
(164,8,o),
(249,-8,o),
(291,-8,qs),
(343,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
56 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 46 77 0 2 2 0 97 8 1 0 0 47 0 78 1 0 47 45 41 40 36 34 26 23 22 20 12 10 6 5 0 64 1 64 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,206,l),
(42,141,l),
(426,141,l),
(426,0,l),
(513,0,l),
(513,141,l),
(596,141,l),
(596,220,l),
(513,220,l),
(513,707,l),
(388,707,l)
);
},
{
closed = 1;
nodes = (
(426,220,l),
(147,220,l),
(426,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
13 1 0 4 9 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 6 1 4 4 38 77 0 2 2 39 2 78 0 0 12 11 0 10 0 10 17 17 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = four;
unicode = 52;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,635,l),
(482,707,l),
(12,707,l),
(12,627,l),
(386,627,l),
(100,0,l),
(196,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,347,o),
(447,368,q),
(477,382,o),
(515,421,o),
(536,464,o),
(544,509,o),
(544,528,qs),
(544,577,o),
(504,648,o),
(439,694,o),
(355,715,o),
(311,715,qs),
(267,715,o),
(183,694,o),
(118,648,o),
(78,577,o),
(78,528,qs),
(78,509,o),
(85,464,o),
(106,419,o),
(144,379,o),
(174,365,q),
(119,344,o),
(57,257,o),
(57,197,qs),
(57,140,o),
(100,61,o),
(172,13,o),
(263,-8,o),
(311,-8,qs),
(359,-8,o),
(450,13,o),
(521,61,o),
(565,140,o),
(565,197,qs),
(565,257,o)
);
},
{
closed = 1;
nodes = (
(392,623,o),
(431,593,o),
(454,546,o),
(454,512,qs),
(453,483,o),
(429,439,o),
(390,411,o),
(339,397,o),
(311,397,qs),
(283,397,o),
(232,411,o),
(192,439,o),
(168,483,o),
(168,516,qs),
(168,548,o),
(190,593,o),
(229,622,o),
(281,636,o),
(311,636,qs),
(340,636,o)
);
},
{
closed = 1;
nodes = (
(401,307,o),
(447,277,o),
(475,230,o),
(475,196,qs),
(475,157,o),
(441,109,o),
(392,81,o),
(335,71,o),
(311,71,qs),
(287,71,o),
(230,81,o),
(180,109,o),
(146,157,o),
(146,196,qs),
(146,230,o),
(174,277,o),
(221,307,o),
(280,320,o),
(311,320,qs),
(342,320,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
33 13 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 46 77 0 5 5 0 97 0 0 0 47 0 78 57 56 37 36 67 65 56 75 57 75 47 45 36 55 37 55 24 22 36 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,327,o),
(478,277,o),
(468,222,o),
(450,165,o),
(435,142,qs),
(414,110,o),
(346,72,o),
(297,71,qs),
(256,71,o),
(175,108,o),
(158,146,q),
(62,146,l),
(72,107,o),
(116,50,o),
(176,11,o),
(249,-8,o),
(287,-8,qs),
(359,-8,o),
(462,40,o),
(494,82,qs),
(531,130,o),
(564,267,o),
(564,339,qs),
(564,404,o),
(540,538,o),
(480,646,o),
(378,715,o),
(300,715,qs),
(243,715,o),
(155,681,o),
(90,619,o),
(54,532,o),
(54,479,qs),
(54,425,o),
(90,343,o),
(151,287,o),
(233,258,o),
(280,258,qs),
(310,258,o),
(369,269,o),
(423,295,o),
(467,336,o),
(481,365,q),
(481,343,ls)
);
},
{
closed = 1;
nodes = (
(166,572,o),
(207,612,o),
(264,636,o),
(297,636,qs),
(330,636,o),
(386,613,o),
(427,572,o),
(450,515,o),
(450,481,qs),
(450,449,o),
(425,396,o),
(382,358,o),
(325,338,o),
(293,338,qs),
(224,339,o),
(143,417,o),
(143,487,qs),
(143,518,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 5 6 1 76 0 3 0 4 0 3 4 128 0 5 0 0 3 5 0 105 0 6 6 1 97 0 1 1 46 77 0 4 4 2 97 0 2 2 47 2 78 40 42 34 20 41 40 36 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni0430;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 7 7 0 97 5 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 5 5 21 77 0 7 7 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
38 36 47 45 36 50 38 50 21 36 18 34 40 36 9 7 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = uni0430;
unicode = 1072;
},
{
glyphname = uni0435;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 29 77 0 0 0 2 97 0 2 2 30 2 78 35 35 0 0 35 43 35 43 39 37 0 34 0 34 40 36 20 36 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = uni0435;
unicode = 1077;
},
{
glyphname = uni043E;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(235,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 0 97 4 1 0 0 29 77 5 1 2 2 1 97 0 1 1 30 1 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = uni043E;
unicode = 1086;
},
{
glyphname = uni0441;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,12,o),
(463,51,o),
(504,110,o),
(512,151,q),
(424,151,l),
(418,128,o),
(392,96,o),
(357,77,o),
(316,69,o),
(295,69,qs),
(252,69,o),
(190,100,o),
(151,153,o),
(132,223,o),
(132,262,qs),
(132,299,o),
(150,370,o),
(189,424,o),
(254,457,o),
(297,457,qs),
(341,458,o),
(406,420,o),
(421,376,q),
(508,376,l),
(499,419,o),
(459,479,o),
(404,516,o),
(342,533,o),
(302,533,qs),
(235,533,o),
(141,490,o),
(79,417,o),
(47,318,o),
(47,262,qs),
(47,204,o),
(77,106,o),
(137,34,o),
(229,-6,o),
(292,-6,qs),
(331,-6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 30 0 78 1 0 35 34 30 28 20 18 16 15 11 9 0 39 1 39 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = uni0441;
unicode = 1089;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,625,o),
(447,599,o),
(476,557,o),
(480,526,q),
(565,526,l),
(562,589,o),
(502,669,o),
(457,689,qs),
(428,703,o),
(362,714,o),
(318,715,qs),
(274,715,o),
(187,695,o),
(117,649,o),
(73,573,o),
(73,517,qs),
(73,457,o),
(125,382,o),
(167,359,qs),
(192,344,o),
(252,327,o),
(314,313,o),
(376,301,o),
(404,292,qs),
(446,280,o),
(496,234,o),
(496,187,qs),
(496,156,o),
(470,112,o),
(426,84,o),
(369,71,o),
(339,71,qs),
(308,71,o),
(245,81,o),
(191,107,o),
(149,151,o),
(139,185,q),
(48,185,l),
(59,132,o),
(112,58,o),
(188,12,o),
(281,-8,o),
(332,-8,qs),
(382,-8,o),
(474,15,o),
(544,65,o),
(585,143,o),
(585,203,qs),
(585,267,o),
(512,346,o),
(451,366,qs),
(425,375,o),
(370,387,o),
(313,399,o),
(259,413,o),
(235,423,qs),
(205,436,o),
(163,485,o),
(163,525,qs),
(163,558,o),
(192,601,o),
(238,626,o),
(295,636,o),
(323,636,qs),
(352,636,o)
);
},
{
closed = 1;
nodes = (
(283,-258,o),
(263,-272,q),
(287,-305,l),
(307,-298,o),
(344,-266,o),
(372,-224,o),
(389,-177,o),
(389,-150,qs),
(391,-119,o),
(359,-71,o),
(323,-71,qs),
(300,-71,o),
(266,-101,o),
(266,-129,qs),
(266,-154,o),
(298,-184,o),
(324,-186,q),
(318,-210,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
80 79 2 6 73 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 7 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 72 70 60 59 54 52 33 31 27 26 22 20 0 64 1 64 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,420,o),
(376,391,q),
(455,391,l),
(451,422,o),
(419,478,o),
(390,498,qs),
(343,533,o),
(261,533,qs),
(229,533,o),
(155,520,o),
(125,501,qs),
(97,483,o),
(61,428,o),
(59,386,qs),
(59,340,o),
(95,282,o),
(121,265,qs),
(142,252,o),
(190,237,o),
(241,226,o),
(292,217,o),
(316,212,qs),
(349,206,o),
(389,177,o),
(389,144,qs),
(389,119,o),
(361,87,o),
(325,73,o),
(282,69,o),
(264,69,qs),
(247,69,o),
(211,75,o),
(171,91,o),
(137,119,o),
(129,143,q),
(43,143,l),
(49,100,o),
(92,43,o),
(153,8,o),
(227,-6,o),
(263,-6,qs),
(300,-7,o),
(375,8,o),
(435,42,o),
(473,101,o),
(474,151,qs),
(474,248,o),
(378,278,qs),
(366,282,o),
(331,290,o),
(292,297,o),
(252,304,o),
(235,308,qs),
(194,316,o),
(143,350,o),
(143,384,qs),
(144,408,o),
(169,437,o),
(204,452,o),
(245,457,o),
(262,457,qs),
(307,456,o)
);
},
{
closed = 1;
nodes = (
(220,-258,o),
(200,-272,q),
(224,-305,l),
(244,-298,o),
(281,-266,o),
(309,-224,o),
(326,-177,o),
(326,-150,qs),
(328,-119,o),
(298,-72,o),
(261,-71,qs),
(239,-71,o),
(203,-101,o),
(203,-129,qs),
(203,-154,o),
(235,-184,o),
(261,-186,q),
(255,-210,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
77 76 2 6 73 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 7 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 69 67 59 58 54 52 32 30 26 25 21 19 0 61 1 61 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(555,628,l),
(555,707,l),
(14,707,l),
(14,628,l),
(241,628,l),
(241,0,l),
(328,0,l),
(328,628,l)
);
},
{
closed = 1;
nodes = (
(244,-258,o),
(224,-272,q),
(248,-305,l),
(268,-298,o),
(305,-266,o),
(333,-224,o),
(350,-177,o),
(350,-150,qs),
(352,-119,o),
(322,-72,o),
(285,-71,qs),
(263,-71,o),
(227,-101,o),
(227,-129,qs),
(227,-154,o),
(259,-184,o),
(285,-186,q),
(279,-210,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
23 22 2 4 73 0 4 0 4 134 3 1 1 1 2 95 0 2 2 38 77 0 0 0 39 0 78 38 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,684,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,170,ls),
(115,82,o),
(191,0,o),
(281,0,qs),
(338,0,l),
(338,74,l),
(299,74,ls),
(242,74,o),
(200,125,o),
(200,179,qs),
(200,452,l),
(341,452,l),
(341,527,l),
(200,527,l),
(200,684,l)
);
},
{
closed = 1;
nodes = (
(171,-258,o),
(151,-272,q),
(175,-305,l),
(195,-298,o),
(232,-266,o),
(260,-224,o),
(277,-177,o),
(277,-150,qs),
(279,-119,o),
(246,-71,o),
(214,-71,qs),
(190,-71,o),
(154,-101,o),
(154,-129,qs),
(154,-154,o),
(186,-184,o),
(212,-186,q),
(206,-210,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
35 34 2 7 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 7 3 7 134 0 6 6 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 6 0 6 133 0 7 3 7 134 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
38 17 17 19 33 35 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-34,606,l),
(51,606,l),
(129,702,l),
(207,606,l),
(293,606,l),
(159,769,l),
(99,769,l)
);
},
{
closed = 1;
nodes = (
(88,527,l),
(88,0,l),
(173,0,l),
(173,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 0 2 1 76 5 1 2 0 2 133 1 1 0 4 0 133 0 4 4 41 77 0 3 3 39 3 78 0 0 10 9 8 7 0 6 0 6 18 17 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,221,ls),
(278,234,o),
(283,266,o),
(291,279,qs),
(298,291,o),
(323,319,o),
(351,347,o),
(379,373,o),
(390,384,qs),
(421,417,o),
(457,491,o),
(458,537,qs),
(458,585,o),
(425,649,o),
(369,693,o),
(295,715,o),
(253,715,qs),
(214,715,o),
(141,695,o),
(82,656,o),
(42,596,o),
(37,556,q),
(125,556,l),
(130,578,o),
(156,609,o),
(192,628,o),
(233,636,o),
(254,636,qs),
(306,634,o),
(371,584,o),
(371,533,qs),
(371,508,o),
(346,456,o),
(327,434,qs),
(316,422,o),
(289,396,o),
(262,370,o),
(236,345,o),
(226,333,qs),
(202,306,o),
(190,258,o),
(190,234,qs),
(190,229,o),
(190,218,o),
(191,213,q),
(278,213,l)
);
},
{
closed = 1;
nodes = (
(174,78,o),
(174,52,qs),
(174,26,o),
(207,-8,o),
(233,-8,qs),
(259,-8,o),
(293,26,o),
(293,52,qs),
(293,78,o),
(259,112,o),
(233,112,qs),
(207,112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
44 0 2 3 1 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 5 1 3 3 4 97 0 4 4 47 4 78 47 46 53 51 46 57 47 57 29 27 23 22 18 16 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = question;
unicode = 63;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(946,426,o),
(983,469,o),
(1002,526,o),
(1002,559,qs),
(1002,593,o),
(983,650,o),
(946,692,o),
(892,715,o),
(858,715,qs),
(822,715,o),
(768,692,o),
(730,650,o),
(711,593,o),
(711,559,qs),
(711,526,o),
(730,469,o),
(767,426,o),
(822,402,o),
(858,402,qs),
(892,402,o)
);
},
{
closed = 1;
nodes = (
(146,587,l),
(504,0,l),
(613,0,l),
(613,707,l),
(526,707,l),
(526,118,l),
(170,707,l),
(59,707,l),
(59,0,l),
(146,0,l)
);
},
{
closed = 1;
nodes = (
(927,592,o),
(927,559,qs),
(927,525,o),
(896,473,o),
(857,473,qs),
(818,473,o),
(784,524,o),
(784,559,qs),
(784,592,o),
(817,644,o),
(857,644,qs),
(896,644,o)
);
},
{
closed = 1;
nodes = (
(997,273,l),
(997,350,l),
(716,350,l),
(716,273,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
28 1 7 6 23 1 4 9 2 76 3 1 2 1 6 1 2 6 128 11 5 2 4 9 4 134 0 1 12 1 6 7 1 6 105 0 7 10 1 0 8 7 0 105 0 8 9 9 8 87 0 8 8 9 95 0 9 8 9 79 31 30 20 20 1 0 45 44 43 42 37 35 30 41 31 41 20 29 20 29 27 26 25 24 22 21 11 9 0 19 1 19 13 6 22 
CALL[ ]	/* CallFunction */";
};
width = 1061;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = uni0401;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,872,o),
(158,845,qs),
(158,817,o),
(190,787,o),
(215,787,qs),
(241,787,o),
(272,817,o),
(272,845,qs),
(272,872,o),
(238,900,o),
(215,900,qs),
(192,900,o)
);
},
{
closed = 1;
nodes = (
(390,872,o),
(390,845,qs),
(390,817,o),
(421,787,o),
(447,787,qs),
(472,787,o),
(504,817,o),
(504,845,qs),
(504,872,o),
(470,900,o),
(447,900,qs),
(424,900,o)
);
},
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,307,l),
(523,307,l),
(523,387,l),
(174,387,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
11 2 10 3 0 3 1 1 4 0 1 105 0 6 0 7 8 6 7 103 0 5 5 4 95 0 4 4 20 77 0 8 8 9 95 0 9 9 21 9 78 13 12 1 0 35 34 33 32 31 30 29 28 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = uni0401;
unicode = 1025;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,286,o),
(165,322,o),
(177,355,o),
(200,377,o),
(220,377,qs),
(243,377,o),
(283,341,o),
(328,299,o),
(382,263,o),
(418,263,qs),
(458,263,o),
(510,294,o),
(540,343,o),
(553,406,o),
(554,439,q),
(479,439,l),
(479,424,o),
(476,387,o),
(464,354,o),
(440,332,o),
(420,332,qs),
(397,332,o),
(357,368,o),
(312,411,o),
(258,447,o),
(222,447,qs),
(182,447,o),
(130,416,o),
(99,367,o),
(87,304,o),
(87,271,q),
(162,271,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 4 1 0 4 105 0 1 3 3 1 89 0 1 1 3 97 6 5 2 3 1 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 0 4 0 2 4 128 6 1 5 1 3 1 5 3 128 0 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 31 0 31 35 36 20 35 36 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 641;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,707,l),
(318,707,l),
(318,445,l),
(381,445,l),
(381,643,l),
(447,499,l),
(484,499,l),
(550,643,l),
(550,445,l),
(613,445,l),
(613,707,l),
(518,707,l),
(466,592,l)
);
},
{
closed = 1;
nodes = (
(208,445,l),
(208,648,l),
(294,648,l),
(294,707,l),
(59,707,l),
(59,648,l),
(144,648,l),
(144,445,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
12 7 4 3 2 5 1 76 0 2 5 1 5 2 1 128 8 3 2 1 1 132 6 4 2 0 5 5 0 87 6 4 2 0 0 5 95 7 1 5 0 5 79 17 17 17 18 17 18 18 17 16 9 6 31 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,717,o),
(78,666,o),
(52,595,o),
(52,552,qs),
(52,464,o),
(154,365,o),
(242,365,qs),
(330,365,o),
(431,464,o),
(431,552,qs),
(431,595,o),
(405,666,o),
(356,717,o),
(286,744,o),
(242,744,qs),
(198,744,o)
);
},
{
closed = 1;
nodes = (
(382,618,o),
(382,552,qs),
(382,486,o),
(308,412,o),
(242,412,qs),
(176,412,o),
(100,486,o),
(100,552,qs),
(100,618,o),
(175,699,o),
(242,699,qs),
(309,699,o)
);
},
{
closed = 1;
nodes = (
(325,547,o),
(325,593,qs),
(325,628,o),
(285,656,o),
(253,656,qs),
(170,656,l),
(170,459,l),
(214,459,l),
(214,528,l),
(238,528,l),
(285,459,l),
(338,459,l),
(288,534,l)
);
},
{
closed = 1;
nodes = (
(214,614,l),
(256,614,ls),
(266,614,o),
(281,603,o),
(281,592,qs),
(281,580,o),
(265,568,o),
(253,568,qs),
(214,568,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
40 1 5 8 1 76 6 1 4 5 3 5 4 3 128 10 1 0 11 1 2 7 0 2 105 0 7 0 9 8 7 9 105 12 1 8 0 5 4 8 5 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 42 41 17 16 1 0 48 46 41 49 42 49 36 34 33 32 31 30 29 28 23 21 16 27 17 27 9 7 0 15 1 15 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 483;
}
);
note = registered;
unicode = 174;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,800,o),
(79,766,o),
(59,718,o),
(59,688,qs),
(59,628,o),
(129,564,o),
(183,564,qs),
(209,564,o),
(256,581,o),
(291,612,o),
(311,658,o),
(311,688,qs),
(311,718,o),
(291,766,o),
(257,800,o),
(211,818,o),
(186,818,qs),
(160,818,o)
);
},
{
closed = 1;
nodes = (
(117,655,o),
(117,690,qs),
(117,725,o),
(157,762,o),
(185,762,qs),
(213,762,o),
(252,725,o),
(252,690,qs),
(252,655,o),
(214,618,o),
(185,618,qs),
(156,618,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 3 2 0 3 105 5 1 2 1 1 2 89 5 1 2 2 1 97 0 1 2 1 81 19 18 1 0 25 23 18 29 19 29 11 9 0 17 1 17 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 370;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,416,o),
(59,364,qs),
(59,337,o),
(79,296,o),
(110,269,o),
(148,256,o),
(171,256,qs),
(216,256,o),
(281,315,o),
(281,364,qs),
(281,416,o),
(217,475,o),
(172,475,qs),
(124,475,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 13 1 13 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 340;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = uni27F5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,524,l),
(376,585,l),
(59,269,l),
(377,-48,l),
(427,13,l),
(197,230,l),
(1297,230,l),
(1297,307,l),
(196,307,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 0 1 1 76 7 6 2 1 74 4 3 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1356;
}
);
note = uni27F5;
unicode = 10229;
},
{
glyphname = uni27F6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(980,-48,l),
(1297,268,l),
(979,585,l),
(929,524,l),
(1159,307,l),
(59,307,l),
(59,230,l),
(1160,230,l),
(929,13,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 1 0 1 1 76 5 4 2 1 74 8 7 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1356;
}
);
note = uni27F6;
unicode = 10230;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(585,276,l),
(642,324,l),
(350,674,l),
(59,324,l),
(115,276,l),
(313,522,l),
(313,0,l),
(387,0,l),
(387,522,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 74 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,350,l),
(351,0,l),
(642,350,l),
(586,398,l),
(388,152,l),
(388,674,l),
(314,674,l),
(314,152,l),
(116,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 0 7 0 73 0 0 0 118 17 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni21BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(878,723,l),
(518,768,l),
(504,402,l),
(574,402,l),
(583,633,l),
(611,612,o),
(661,547,o),
(699,469,o),
(721,382,o),
(721,332,qs),
(719,275,o),
(684,167,o),
(614,84,o),
(507,34,o),
(434,34,qs),
(369,34,o),
(264,81,o),
(189,162,o),
(148,270,o),
(147,336,qs),
(147,408,o),
(202,545,o),
(253,599,q),
(195,662,l),
(129,599,o),
(60,433,o),
(60,336,qs),
(61,251,o),
(114,110,o),
(212,8,o),
(352,-49,o),
(440,-50,qs),
(528,-50,o),
(665,12,o),
(761,117,o),
(812,254,o),
(813,329,qs),
(813,384,o),
(792,480,o),
(747,572,o),
(679,656,o),
(631,689,q),
(868,651,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
42 40 37 19 18 5 2 74 0 2 1 2 133 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 26 47 41 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 937;
}
);
note = uni21BA;
unicode = 8634;
},
{
glyphname = uni21BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,656,o),
(190,572,o),
(145,480,o),
(124,384,o),
(124,329,qs),
(125,254,o),
(176,117,o),
(272,12,o),
(409,-50,o),
(497,-50,qs),
(585,-49,o),
(725,8,o),
(822,110,o),
(875,251,o),
(877,346,qs),
(877,433,o),
(808,599,o),
(742,662,q),
(684,599,l),
(735,545,o),
(790,408,o),
(790,336,qs),
(789,270,o),
(748,162,o),
(673,81,o),
(568,34,o),
(503,34,qs),
(430,34,o),
(323,84,o),
(253,167,o),
(218,275,o),
(216,332,qs),
(216,382,o),
(238,469,o),
(276,547,o),
(326,612,o),
(354,633,q),
(363,402,l),
(433,402,l),
(419,768,l),
(59,723,l),
(69,651,l),
(306,689,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
42 24 23 5 2 5 0 74 0 0 1 0 133 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 47 42 19 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 937;
}
);
note = uni21BB;
unicode = 8635;
},
{
glyphname = uni21B7;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(762,137,o),
(806,278,o),
(806,347,qs),
(806,431,o),
(754,574,o),
(658,679,o),
(520,738,o),
(434,738,qs),
(353,738,o),
(221,683,o),
(125,586,o),
(66,453,o),
(59,376,q),
(148,376,l),
(154,434,o),
(199,535,o),
(273,609,o),
(373,652,o),
(434,652,qs),
(501,652,o),
(607,604,o),
(681,522,o),
(720,410,o),
(720,347,qs),
(720,318,o),
(710,256,o),
(691,195,o),
(664,139,o),
(646,117,q),
(582,345,l),
(512,329,l),
(614,-27,l),
(953,99,l),
(926,166,l),
(717,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
34 5 4 3 2 1 6 1 73 0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 36 20 46 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1012;
}
);
note = uni21B7;
unicode = 8631;
},
{
glyphname = uni21B6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,99,l),
(398,-27,l),
(500,329,l),
(430,345,l),
(366,117,l),
(348,139,o),
(321,195,o),
(302,256,o),
(292,318,o),
(292,347,qs),
(292,410,o),
(331,522,o),
(405,604,o),
(511,652,o),
(578,652,qs),
(639,652,o),
(739,609,o),
(813,535,o),
(858,434,o),
(864,376,q),
(953,376,l),
(946,453,o),
(887,586,o),
(791,683,o),
(659,738,o),
(578,738,qs),
(492,738,o),
(354,679,o),
(258,574,o),
(206,431,o),
(206,347,qs),
(206,278,o),
(250,137,o),
(295,82,q),
(86,166,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
34 33 32 31 30 29 6 1 73 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 36 20 39 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1012;
}
);
note = uni21B6;
unicode = 8630;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(201,344,o),
(272,374,o),
(314,374,qs),
(384,374,o),
(472,296,o),
(472,223,qs),
(472,183,o),
(446,126,o),
(399,89,o),
(336,71,o),
(300,71,qs),
(277,71,o),
(231,83,o),
(190,106,o),
(158,139,o),
(150,160,q),
(62,160,l),
(71,116,o),
(117,52,o),
(183,11,o),
(264,-9,o),
(308,-9,qs),
(362,-9,o),
(455,23,o),
(523,85,o),
(562,172,o),
(562,228,qs),
(562,279,o),
(529,363,o),
(469,422,o),
(385,454,o),
(334,454,qs),
(277,454,o),
(199,427,o),
(172,405,q),
(192,627,l),
(537,627,l),
(537,707,l),
(114,707,l),
(82,318,l),
(172,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 97 0 3 3 47 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(161,498,o),
(206,582,o),
(282,636,o),
(339,636,qs),
(379,636,o),
(453,598,o),
(471,561,q),
(562,561,l),
(550,598,o),
(506,656,o),
(448,695,o),
(378,715,o),
(340,715,qs),
(255,715,o),
(145,642,o),
(82,531,o),
(58,398,o),
(58,317,qs),
(59,252,o),
(88,134,o),
(152,45,o),
(254,-8,o),
(328,-8,qs),
(380,-8,o),
(469,26,o),
(533,88,o),
(569,174,o),
(569,227,qs),
(569,277,o),
(535,359,o),
(475,417,o),
(392,451,o),
(338,451,qs),
(280,451,o),
(176,403,o),
(142,351,q),
(142,397,o)
);
},
{
closed = 1;
nodes = (
(457,133,o),
(416,94,o),
(359,71,o),
(326,71,qs),
(293,71,o),
(236,94,o),
(194,134,o),
(170,188,o),
(170,220,qs),
(170,254,o),
(197,310,o),
(241,349,o),
(298,370,o),
(330,370,qs),
(363,370,o),
(419,347,o),
(458,306,o),
(480,251,o),
(480,218,qs),
(480,187,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 6 5 1 76 0 3 4 0 4 3 0 128 0 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 46 77 0 6 6 1 97 0 1 1 47 1 78 40 40 34 20 40 40 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = six;
unicode = 54;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,687,o),
(117,662,qs),
(117,637,o),
(150,606,o),
(174,606,qs),
(199,606,o),
(232,637,o),
(232,662,qs),
(232,687,o),
(199,718,o),
(174,718,qs),
(150,718,o)
);
},
{
closed = 1;
nodes = (
(343,687,o),
(343,662,qs),
(343,637,o),
(375,606,o),
(399,606,qs),
(424,606,o),
(457,637,o),
(457,662,qs),
(457,687,o),
(424,718,o),
(399,718,qs),
(375,718,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 574;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = adieresis;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,676,o),
(110,651,qs),
(110,626,o),
(143,595,o),
(167,595,qs),
(192,595,o),
(225,626,o),
(225,651,qs),
(225,676,o),
(192,707,o),
(167,707,qs),
(143,707,o)
);
},
{
closed = 1;
nodes = (
(336,676,o),
(336,651,qs),
(336,626,o),
(368,595,o),
(392,595,qs),
(417,595,o),
(450,626,o),
(450,651,qs),
(450,676,o),
(417,707,o),
(392,707,qs),
(368,707,o)
);
},
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(132,13,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(308,0,o),
(355,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,237,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 7 6 5 6 7 5 128 0 5 14 1 10 11 5 10 103 3 1 1 1 0 97 13 2 12 3 0 0 38 77 0 6 6 8 97 0 8 8 49 77 0 11 11 4 97 9 1 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 6 5 6 7 5 128 0 5 14 1 10 11 5 10 103 3 1 1 1 0 97 13 2 12 3 0 0 38 77 0 6 6 8 97 0 8 8 49 77 0 9 9 39 77 0 11 11 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
62 60 13 12 1 0 71 69 60 74 62 74 59 58 53 51 47 46 44 42 40 38 30 28 19 17 12 23 13 23 7 5 0 11 1 11 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,869,o),
(169,844,qs),
(169,819,o),
(202,788,o),
(226,788,qs),
(251,788,o),
(284,819,o),
(284,844,qs),
(284,869,o),
(251,900,o),
(226,900,qs),
(202,900,o)
);
},
{
closed = 1;
nodes = (
(395,869,o),
(395,844,qs),
(395,819,o),
(427,788,o),
(451,788,qs),
(476,788,o),
(509,819,o),
(509,844,qs),
(509,869,o),
(476,900,o),
(451,900,qs),
(427,900,o)
);
},
{
closed = 1;
nodes = (
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l),
(398,707,l)
);
},
{
closed = 1;
nodes = (
(335,631,l),
(481,231,l),
(189,231,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
33 1 8 7 1 76 10 2 9 3 0 3 1 1 7 0 1 105 11 1 8 0 5 4 8 5 104 0 7 7 38 77 6 1 4 4 39 4 78 32 32 13 12 1 0 32 34 32 34 31 30 29 28 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,8,l),
(219,-119,l),
(232,-114,o),
(261,-110,o),
(271,-110,qs),
(276,-110,o),
(295,-111,o),
(314,-117,o),
(328,-133,o),
(328,-145,qs),
(328,-165,o),
(306,-186,o),
(273,-196,o),
(234,-198,o),
(217,-198,q),
(217,-253,l),
(246,-253,o),
(313,-247,o),
(344,-231,qs),
(367,-218,o),
(397,-171,o),
(397,-138,qs),
(397,-100,o),
(357,-57,o),
(318,-57,qs),
(313,-57,o),
(301,-58,o),
(295,-59,q),
(310,8,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
26 1 2 3 1 76 0 0 4 3 4 0 3 128 0 4 0 3 2 4 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 19 54 33 23 34 5 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 598;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l),
(562,0,l)
);
},
{
closed = 1;
nodes = (
(167,786,l),
(252,786,l),
(330,883,l),
(408,786,l),
(494,786,l),
(360,949,l),
(300,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
7 1 6 8 0 8 6 0 128 0 2 0 3 4 2 3 103 10 1 8 8 44 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 9 1 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
10 1 8 6 8 133 7 1 6 0 6 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 9 1 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 12 0 0 12 18 12 18 17 16 14 13 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = ecircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,241,o),
(522,259,o),
(522,268,qs),
(524,308,o),
(501,402,o),
(445,483,o),
(353,533,o),
(290,533,qs),
(228,533,o),
(138,493,o),
(76,421,o),
(43,322,o),
(43,263,qs),
(43,204,o),
(73,105,o),
(135,34,o),
(228,-6,o),
(291,-6,qs),
(328,-6,o),
(400,11,o),
(459,47,o),
(502,103,o),
(511,141,q),
(424,141,l),
(417,121,o),
(389,93,o),
(353,76,o),
(312,69,o),
(293,69,qs),
(254,69,o),
(195,94,o),
(155,138,o),
(132,197,o),
(129,232,q),
(520,232,l)
);
},
{
closed = 1;
nodes = (
(134,336,o),
(156,391,o),
(194,433,o),
(250,457,o),
(287,457,qs),
(354,457,o),
(434,373,o),
(436,306,q),
(131,306,l)
);
},
{
closed = 1;
nodes = (
(128,606,l),
(213,606,l),
(291,702,l),
(369,606,l),
(455,606,l),
(321,769,l),
(261,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
47 1 7 9 1 76 12 1 9 7 9 133 8 1 7 3 7 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 44 44 35 35 0 0 44 50 44 50 49 48 46 45 35 43 35 43 39 37 0 34 0 34 40 36 20 36 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,869,o),
(214,844,qs),
(214,819,o),
(247,788,o),
(271,788,qs),
(296,788,o),
(329,819,o),
(329,844,qs),
(329,869,o),
(296,900,o),
(271,900,qs),
(247,900,o)
);
},
{
closed = 1;
nodes = (
(440,869,o),
(440,844,qs),
(440,819,o),
(472,788,o),
(496,788,qs),
(521,788,o),
(554,819,o),
(554,844,qs),
(554,869,o),
(521,900,o),
(496,900,qs),
(472,900,o)
);
},
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
9 2 8 3 0 3 1 1 5 0 1 105 11 1 6 6 5 97 0 5 5 46 77 0 7 7 4 97 10 1 4 4 47 4 78 45 44 25 24 13 12 1 0 55 53 44 63 45 63 35 33 24 43 25 43 19 17 12 23 13 23 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = odieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,676,o),
(127,651,qs),
(127,626,o),
(160,595,o),
(184,595,qs),
(209,595,o),
(242,626,o),
(242,651,qs),
(242,676,o),
(209,707,o),
(184,707,qs),
(160,707,o)
);
},
{
closed = 1;
nodes = (
(353,676,o),
(353,651,qs),
(353,626,o),
(385,595,o),
(409,595,qs),
(434,595,o),
(467,626,o),
(467,651,qs),
(467,676,o),
(434,707,o),
(409,707,qs),
(385,707,o)
);
},
{
closed = 1;
nodes = (
(137,493,o),
(74,421,o),
(43,322,o),
(43,263,qs),
(43,204,o),
(74,105,o),
(137,34,o),
(230,-6,o),
(293,-6,qs),
(356,-6,o),
(450,34,o),
(513,105,o),
(544,204,o),
(544,263,qs),
(544,322,o),
(513,421,o),
(450,493,o),
(356,533,o),
(293,533,qs),
(230,533,o)
);
},
{
closed = 1;
nodes = (
(188,99,o),
(147,152,o),
(128,222,o),
(128,263,qs),
(128,303,o),
(147,374,o),
(188,427,o),
(250,457,o),
(293,457,qs),
(336,457,o),
(399,427,o),
(440,374,o),
(459,303,o),
(459,263,qs),
(459,222,o),
(440,152,o),
(399,99,o),
(336,69,o),
(293,69,qs),
(250,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
3 1 1 1 0 97 9 2 8 3 0 0 38 77 0 7 7 4 97 10 1 4 4 49 77 11 1 6 6 5 97 0 5 5 50 5 78 45 44 25 24 13 12 1 0 55 53 44 63 45 63 35 33 24 43 25 43 19 17 12 23 13 23 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,527,l),
(67,0,l),
(152,0,l),
(152,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 41 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,866,o),
(73,841,qs),
(73,816,o),
(105,784,o),
(130,784,qs),
(154,784,o),
(188,816,o),
(188,841,qs),
(188,866,o),
(154,897,o),
(130,897,qs),
(105,897,o)
);
},
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
4 1 0 0 1 3 0 1 105 0 3 3 38 77 0 2 2 39 2 78 1 0 15 14 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,676,o),
(117,651,qs),
(117,626,o),
(150,595,o),
(174,595,qs),
(199,595,o),
(232,626,o),
(232,651,qs),
(232,676,o),
(199,707,o),
(174,707,qs),
(150,707,o)
);
},
{
closed = 1;
nodes = (
(343,676,o),
(343,651,qs),
(343,626,o),
(375,595,o),
(399,595,qs),
(424,595,o),
(457,626,o),
(457,651,qs),
(457,676,o),
(424,707,o),
(399,707,qs),
(375,707,o)
);
},
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
3 1 1 1 0 97 9 2 8 3 0 0 38 77 7 1 5 5 41 77 10 1 4 4 6 97 0 6 6 50 6 78 25 24 13 12 1 0 38 37 34 32 29 28 24 41 25 41 19 17 12 23 13 23 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,868,o),
(193,843,qs),
(193,818,o),
(226,787,o),
(250,787,qs),
(275,787,o),
(308,818,o),
(308,843,qs),
(308,868,o),
(275,899,o),
(250,899,qs),
(226,899,o)
);
},
{
closed = 1;
nodes = (
(419,868,o),
(419,843,qs),
(419,818,o),
(451,787,o),
(475,787,qs),
(500,787,o),
(533,818,o),
(533,843,qs),
(533,868,o),
(500,899,o),
(475,899,qs),
(451,899,o)
);
},
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
9 2 8 3 0 3 1 1 5 0 1 105 10 7 2 5 5 38 77 0 6 6 4 97 0 4 4 47 4 78 24 24 13 12 1 0 24 49 24 49 44 42 37 36 31 29 19 17 12 23 13 23 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = ccedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,-187,o),
(283,-197,o),
(244,-199,o),
(227,-198,q),
(227,-250,l),
(235,-252,o),
(252,-253,o),
(260,-253,qs),
(274,-253,o),
(324,-246,o),
(373,-221,o),
(407,-174,o),
(407,-138,qs),
(406,-89,o),
(377,-71,qs),
(358,-58,o),
(328,-57,qs),
(323,-57,o),
(311,-58,o),
(305,-59,q),
(317,-4,l),
(351,-1,o),
(415,20,o),
(466,58,o),
(502,113,o),
(509,151,q),
(421,151,l),
(415,128,o),
(389,96,o),
(354,77,o),
(313,69,o),
(292,69,qs),
(249,69,o),
(187,100,o),
(148,153,o),
(129,223,o),
(129,262,qs),
(129,299,o),
(147,370,o),
(186,424,o),
(247,457,o),
(291,457,qs),
(336,458,o),
(405,422,o),
(418,376,q),
(505,376,l),
(488,458,o),
(379,533,o),
(291,533,qs),
(230,533,o),
(138,491,o),
(76,418,o),
(44,319,o),
(44,262,qs),
(44,208,o),
(69,115,o),
(122,45,o),
(201,1,o),
(255,-4,q),
(229,-119,l),
(242,-114,o),
(271,-110,o),
(281,-110,qs),
(286,-110,o),
(305,-111,o),
(324,-117,o),
(337,-132,o),
(338,-145,qs),
(338,-165,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
9 1 6 4 48 1 0 6 8 0 2 8 0 63 1 7 8 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 6 4 0 4 6 0 128 0 4 0 0 8 4 0 105 0 3 3 1 97 0 1 1 49 77 0 8 8 7 97 0 7 7 51 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 6 4 0 4 6 0 128 0 4 0 0 8 4 0 105 0 8 0 7 8 7 101 0 3 3 1 97 0 1 1 49 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 55 40 20 40 34 18 44 51 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = uni0162;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,628,l),
(555,628,l),
(555,707,l),
(14,707,l),
(14,628,l),
(241,628,l),
(241,0,l),
(252,0,l),
(224,-119,l),
(237,-114,o),
(266,-110,o),
(276,-110,qs),
(281,-110,o),
(300,-111,o),
(320,-117,o),
(333,-132,o),
(333,-145,qs),
(333,-165,o),
(311,-187,o),
(278,-197,o),
(239,-199,o),
(222,-198,q),
(222,-250,l),
(230,-252,o),
(247,-253,o),
(255,-253,qs),
(269,-254,o),
(319,-246,o),
(368,-221,o),
(403,-175,o),
(402,-138,qs),
(402,-91,o),
(369,-70,qs),
(349,-57,o),
(321,-57,qs),
(316,-57,o),
(305,-58,o),
(300,-59,q),
(313,0,l),
(328,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 3 0 30 1 2 3 16 1 1 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 0 4 3 4 0 3 128 0 3 2 4 3 2 126 7 1 5 5 6 95 0 6 6 38 77 9 8 2 4 4 39 77 0 2 2 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 0 4 3 4 0 3 128 0 3 2 4 3 2 126 0 2 0 1 2 1 101 7 1 5 5 6 95 0 6 6 38 77 9 8 2 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 39 0 39 17 17 17 19 54 34 40 35 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,684,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,170,ls),
(115,107,o),
(150,31,o),
(192,14,q),
(155,-119,l),
(168,-114,o),
(197,-110,o),
(207,-110,qs),
(212,-110,o),
(231,-111,o),
(252,-117,o),
(264,-132,o),
(264,-145,qs),
(264,-165,o),
(242,-187,o),
(209,-197,o),
(170,-199,o),
(153,-198,q),
(153,-251,l),
(161,-252,o),
(178,-253,o),
(186,-253,qs),
(200,-254,o),
(250,-246,o),
(299,-221,o),
(334,-175,o),
(333,-138,qs),
(333,-135,ls),
(333,-89,o),
(302,-70,qs),
(281,-57,o),
(254,-57,qs),
(249,-57,o),
(237,-58,o),
(231,-59,q),
(250,1,l),
(258,0,o),
(264,0,o),
(267,0,qs),
(338,0,l),
(338,74,l),
(299,74,ls),
(242,74,o),
(200,125,o),
(200,179,qs),
(200,452,l),
(341,452,l),
(341,527,l),
(200,527,l),
(200,684,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
45 1 3 2 14 1 7 4 44 1 6 7 30 1 5 6 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 10 10 38 77 8 1 1 1 0 95 9 1 0 0 41 77 0 2 2 3 95 0 3 3 39 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 0 10 10 38 77 8 1 1 1 0 95 9 1 0 0 41 77 0 2 2 3 95 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 10 0 10 133 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 8 1 1 1 0 95 9 1 0 0 41 77 0 2 2 3 95 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
54 53 52 51 23 54 34 41 36 49 35 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,574,o),
(561,522,q),
(649,522,l),
(639,565,o),
(595,636,o),
(526,687,o),
(433,715,o),
(375,715,qs),
(292,715,o),
(170,660,o),
(88,563,o),
(48,431,o),
(48,353,qs),
(48,279,o),
(83,152,o),
(155,58,o),
(263,0,o),
(336,-6,q),
(310,-121,l),
(323,-116,o),
(352,-112,o),
(362,-112,qs),
(367,-112,o),
(386,-113,o),
(405,-119,o),
(419,-134,o),
(419,-147,qs),
(419,-167,o),
(397,-189,o),
(364,-199,o),
(325,-201,o),
(308,-200,q),
(308,-253,l),
(317,-254,o),
(333,-255,o),
(341,-255,qs),
(363,-255,o),
(405,-248,o),
(454,-223,o),
(489,-171,o),
(488,-140,qs),
(488,-91,o),
(456,-72,qs),
(436,-59,o),
(409,-59,qs),
(404,-59,o),
(392,-60,o),
(386,-61,q),
(398,-7,l),
(504,-2,o),
(640,100,o),
(662,185,q),
(567,185,l),
(552,131,o),
(450,71,o),
(375,71,qs),
(313,71,o),
(223,116,o),
(165,193,o),
(137,297,o),
(137,356,qs),
(137,411,o),
(163,512,o),
(220,590,o),
(309,636,o),
(372,636,qs),
(447,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
48 1 4 3 18 1 7 4 47 1 6 7 33 1 5 6 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 112 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 50 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 50 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 64 63 59 57 45 42 36 34 32 29 22 20 17 16 14 13 11 9 0 66 1 66 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = scedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,420,o),
(376,391,q),
(455,391,l),
(451,422,o),
(419,478,o),
(390,498,qs),
(343,533,o),
(261,533,qs),
(226,533,o),
(156,519,o),
(125,501,qs),
(97,483,o),
(61,428,o),
(59,386,qs),
(59,340,o),
(95,282,o),
(121,265,qs),
(142,252,o),
(190,237,o),
(241,226,o),
(292,217,o),
(316,212,qs),
(352,206,o),
(389,177,o),
(389,144,qs),
(389,117,o),
(363,88,o),
(325,73,o),
(281,68,o),
(264,69,qs),
(242,70,o),
(211,76,o),
(171,91,o),
(137,119,o),
(129,143,q),
(43,143,l),
(48,105,o),
(82,52,o),
(132,17,o),
(194,-1,o),
(226,-4,q),
(200,-119,l),
(213,-114,o),
(242,-110,o),
(252,-110,qs),
(257,-110,o),
(276,-111,o),
(295,-117,o),
(309,-132,o),
(309,-145,qs),
(309,-165,o),
(287,-187,o),
(254,-197,o),
(215,-199,o),
(198,-198,q),
(198,-250,l),
(206,-251,o),
(223,-253,o),
(231,-253,qs),
(245,-254,o),
(295,-246,o),
(344,-221,o),
(379,-171,o),
(378,-135,qs),
(378,-89,o),
(348,-70,qs),
(326,-57,o),
(299,-57,qs),
(294,-57,o),
(282,-58,o),
(276,-59,q),
(288,-5,l),
(323,-3,o),
(389,14,o),
(441,49,o),
(473,104,o),
(474,151,qs),
(474,248,o),
(378,278,qs),
(366,282,o),
(331,290,o),
(292,297,o),
(252,304,o),
(235,308,qs),
(194,316,o),
(143,350,o),
(143,384,qs),
(144,408,o),
(169,437,o),
(204,452,o),
(245,457,o),
(262,457,qs),
(307,455,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 97 values pushed */
21 1 4 2 50 1 3 4 2 76 51 1 1 1 75 36 1 3 73 0 8 0 5 0 8 5 128 0 5 6 0 5 6 126 0 2 1 4 1 2 4 128 0 3 4 3 134 0 6 0 4 3 6 4 105 9 1 0 0 7 97 0 7 7 49 77 0 1 1 50 1 78 1 0 90 89 85 83 63 61 57 56 48 45 39 37 25 23 20 19 0 92 1 92 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni21A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,0,ls),
(834,0,o),
(953,50,o),
(1035,140,o),
(1079,265,o),
(1079,340,qs),
(1079,414,o),
(1035,539,o),
(953,629,o),
(834,679,o),
(758,679,qs),
(195,679,l),
(195,603,l),
(757,603,ls),
(815,603,o),
(905,562,o),
(967,491,o),
(999,395,o),
(999,340,qs),
(999,284,o),
(967,188,o),
(905,117,o),
(815,76,o),
(757,76,qs),
(194,76,l),
(422,296,l),
(377,354,l),
(59,39,l),
(377,-275,l),
(424,-221,l),
(194,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 3 2 0 1 2 1 3 0 2 76 1 1 3 73 0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 40 33 40 37 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 1138;
}
);
note = uni21A9;
unicode = 8617;
},
{
glyphname = uni2713;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,433,l),
(59,372,l),
(373,-1,l),
(980,766,l),
(913,827,l),
(374,141,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
2 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 1039;
}
);
note = uni2713;
unicode = 10003;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,560,o),
(177,534,qs),
(177,508,o),
(210,474,o),
(236,474,qs),
(262,474,o),
(296,508,o),
(296,534,qs),
(296,560,o),
(262,594,o),
(236,594,qs),
(210,594,o)
);
},
{
closed = 1;
nodes = (
(415,322,l),
(415,399,l),
(59,399,l),
(59,322,l)
);
},
{
closed = 1;
nodes = (
(177,205,o),
(177,179,qs),
(177,152,o),
(210,118,o),
(236,118,qs),
(262,118,o),
(296,152,o),
(296,179,qs),
(296,205,o),
(262,239,o),
(236,239,qs),
(210,239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 0 0 1 2 0 1 105 0 2 0 3 4 2 3 103 7 1 4 5 5 4 89 7 1 4 4 5 97 0 5 4 5 81 17 16 1 0 23 21 16 27 17 27 15 14 13 12 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 474;
}
);
note = divide;
unicode = 247;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,215,l),
(289,353,l),
(427,492,l),
(377,542,l),
(239,403,l),
(100,542,l),
(50,492,l),
(189,353,l),
(50,215,l),
(100,165,l),
(239,303,l),
(377,165,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,707,l),
(39,707,l),
(256,324,l),
(144,324,l),
(144,247,l),
(289,247,l),
(289,166,l),
(144,166,l),
(144,89,l),
(289,89,l),
(289,0,l),
(376,0,l),
(376,89,l),
(519,89,l),
(519,166,l),
(376,166,l),
(376,247,l),
(519,247,l),
(519,324,l),
(409,324,l),
(625,707,l),
(526,707,l),
(334,353,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
22 1 1 0 1 76 9 1 1 8 1 2 3 1 2 103 7 1 3 6 1 4 5 3 4 103 10 1 0 0 38 77 0 5 5 39 5 78 21 20 19 18 17 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,92,l),
(156,0,l),
(243,0,l),
(243,92,l),
(484,92,l),
(484,171,l),
(243,171,l),
(243,252,l),
(391,252,ls),
(447,252,o),
(542,279,o),
(611,336,o),
(650,423,o),
(650,482,qs),
(650,602,o),
(519,707,o),
(401,707,qs),
(156,707,l),
(156,332,l),
(59,332,l),
(59,252,l),
(156,252,l),
(156,171,l),
(59,171,l),
(59,92,l)
);
},
{
closed = 1;
nodes = (
(243,628,l),
(399,628,ls),
(481,628,o),
(562,562,o),
(562,483,qs),
(561,440,o),
(534,384,o),
(488,349,o),
(427,332,o),
(392,332,qs),
(243,332,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 9 2 2 4 1 1 0 2 1 103 5 1 0 8 1 6 7 0 6 103 0 10 10 3 95 0 3 3 38 77 0 7 7 39 7 78 26 25 34 32 25 35 26 35 17 17 17 17 38 33 17 17 16 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B4;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,697,o),
(146,660,o),
(105,602,o),
(99,562,q),
(191,562,l),
(197,586,o),
(222,615,o),
(256,630,o),
(297,636,o),
(315,636,qs),
(366,636,o),
(430,590,o),
(430,542,qs),
(429,514,o),
(398,463,o),
(382,454,q),
(47,454,l),
(47,375,l),
(287,375,l),
(170,292,l),
(47,292,l),
(47,213,l),
(111,213,l),
(103,196,o),
(95,161,o),
(95,149,qs),
(95,107,o),
(128,47,o),
(183,10,o),
(256,-8,o),
(295,-8,qs),
(335,-8,o),
(409,8,o),
(469,42,o),
(509,98,o),
(515,137,q),
(426,137,l),
(419,116,o),
(395,90,o),
(364,76,o),
(326,70,o),
(305,69,qs),
(283,68,o),
(239,78,o),
(203,99,o),
(181,134,o),
(181,160,qs),
(181,178,o),
(191,205,o),
(199,213,q),
(542,213,l),
(542,292,l),
(287,292,l),
(404,375,l),
(542,375,l),
(542,454,l),
(474,454,l),
(488,471,o),
(512,518,o),
(512,559,qs),
(512,601,o),
(479,660,o),
(425,697,o),
(355,715,o),
(318,715,qs),
(279,715,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 47 7 78 1 0 61 60 56 54 49 48 47 46 45 44 43 42 35 33 29 28 24 22 15 14 13 12 11 10 9 8 0 65 1 65 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = uni20B4;
unicode = 8372;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,518,ls),
(226,555,o),
(246,601,o),
(278,627,o),
(318,636,o),
(343,636,qs),
(378,636,o),
(433,600,o),
(438,567,q),
(521,567,l),
(518,604,o),
(487,660,o),
(439,697,o),
(376,715,o),
(340,715,qs),
(246,715,o),
(141,615,o),
(141,521,qs),
(141,376,l),
(59,376,l),
(59,297,l),
(141,297,l),
(141,79,l),
(59,79,l),
(59,0,l),
(525,0,l),
(525,79,l),
(226,79,l),
(226,297,l),
(434,297,l),
(434,376,l),
(226,376,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 7 8 5 8 7 5 128 10 9 2 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 0 0 0 31 0 31 34 20 35 17 17 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = Scedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,625,o),
(447,599,o),
(476,557,o),
(480,526,q),
(565,526,l),
(562,589,o),
(502,669,o),
(457,689,qs),
(428,703,o),
(362,714,o),
(320,715,qs),
(274,715,o),
(187,695,o),
(117,649,o),
(73,573,o),
(73,517,qs),
(73,457,o),
(125,382,o),
(167,359,qs),
(192,345,o),
(252,327,o),
(314,313,o),
(376,301,o),
(404,292,qs),
(446,280,o),
(496,234,o),
(496,187,qs),
(496,156,o),
(470,112,o),
(426,84,o),
(369,71,o),
(339,71,qs),
(308,71,o),
(245,81,o),
(191,107,o),
(149,151,o),
(139,185,q),
(48,185,l),
(57,138,o),
(101,70,o),
(163,24,o),
(241,-1,o),
(284,-5,q),
(258,-119,l),
(271,-114,o),
(300,-110,o),
(310,-110,qs),
(315,-110,o),
(334,-111,o),
(354,-117,o),
(367,-132,o),
(367,-145,qs),
(367,-164,o),
(345,-187,o),
(312,-197,o),
(273,-199,o),
(256,-198,q),
(256,-250,l),
(264,-252,o),
(281,-253,o),
(289,-253,qs),
(303,-254,o),
(353,-246,o),
(402,-221,o),
(438,-172,o),
(436,-135,qs),
(434,-91,o),
(408,-71,qs),
(389,-57,o),
(357,-57,qs),
(352,-57,o),
(340,-58,o),
(334,-59,q),
(345,-8,l),
(394,-7,o),
(481,18,o),
(547,68,o),
(585,145,o),
(585,203,qs),
(585,267,o),
(512,345,o),
(451,366,qs),
(425,375,o),
(370,387,o),
(313,399,o),
(259,413,o),
(235,423,qs),
(205,436,o),
(163,485,o),
(163,525,qs),
(163,558,o),
(192,601,o),
(238,626,o),
(295,636,o),
(323,636,qs),
(352,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
52 1 1 7 22 1 5 2 51 1 4 5 37 1 3 4 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 5 4 1 5 112 10 1 0 0 8 97 0 8 8 46 77 0 7 7 1 97 0 1 1 47 77 0 4 4 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 10 1 0 0 8 97 0 8 8 46 77 0 7 7 1 97 0 1 1 47 77 0 4 4 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 4 0 3 4 3 101 10 1 0 0 8 97 0 8 8 46 77 0 7 7 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 91 90 85 83 64 62 58 57 49 46 40 38 36 34 26 24 21 20 0 95 1 95 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = t_alt;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,684,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,170,ls),
(115,82,o),
(191,0,o),
(281,0,qs),
(338,0,l),
(338,74,l),
(299,74,ls),
(242,74,o),
(200,125,o),
(200,179,qs),
(200,452,l),
(341,452,l),
(341,527,l),
(200,527,l),
(200,684,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 20 77 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 98 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 98 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 19 33 35 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = t_alt;
},
{
glyphname = alt_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,707,l),
(242,681,o),
(203,650,o),
(156,631,o),
(102,623,o),
(73,621,q),
(73,567,l),
(231,567,l),
(231,79,l),
(47,79,l),
(47,0,l),
(470,0,l),
(470,79,l),
(318,79,l),
(318,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 0 4 3 103 0 5 5 20 77 2 1 0 0 1 96 0 1 1 21 1 78 20 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 489;
}
);
note = alt_1;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,656,o),
(119,547,o),
(59,392,o),
(59,296,qs),
(59,199,o),
(117,44,o),
(224,-64,o),
(373,-122,o),
(463,-122,qs),
(553,-122,o),
(703,-64,o),
(809,44,o),
(868,199,o),
(868,296,qs),
(868,392,o),
(808,547,o),
(701,656,o),
(552,715,o),
(463,715,qs),
(374,715,o)
);
},
{
closed = 1;
nodes = (
(653,593,o),
(739,503,o),
(787,375,o),
(787,296,qs),
(787,216,o),
(740,89,o),
(655,0,o),
(535,-48,o),
(463,-48,qs),
(391,-48,o),
(271,0,o),
(186,89,o),
(139,216,o),
(139,296,qs),
(139,375,o),
(187,503,o),
(273,593,o),
(392,641,o),
(463,641,qs),
(534,641,o)
);
},
{
closed = 1;
nodes = (
(480,206,ls),
(516,206,o),
(577,225,o),
(622,263,o),
(648,320,o),
(648,365,qs),
(648,438,o),
(566,507,o),
(491,507,qs),
(330,507,l),
(330,72,l),
(407,72,l),
(407,206,l)
);
},
{
closed = 1;
nodes = (
(407,434,l),
(486,434,ls),
(570,434,o),
(570,360,qs),
(569,314,o),
(516,279,o),
(477,279,qs),
(407,279,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 4 6 3 6 4 3 128 9 1 0 10 1 2 5 0 2 105 0 5 0 8 7 5 8 103 11 1 7 0 6 4 7 6 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 54 53 21 20 1 0 59 57 53 60 54 60 52 50 44 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 927;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = colon.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,547,o),
(67,521,qs),
(67,495,o),
(100,461,o),
(126,461,qs),
(151,461,o),
(186,494,o),
(186,521,qs),
(186,547,o),
(151,581,o),
(126,581,qs),
(100,581,o)
);
},
{
closed = 1;
nodes = (
(67,191,o),
(67,165,qs),
(67,139,o),
(100,105,o),
(126,105,qs),
(151,105,o),
(186,139,o),
(186,165,qs),
(186,191,o),
(151,225,o),
(126,225,qs),
(100,225,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = colon.uc;
},
{
glyphname = y_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,273,ls),
(445,235,o),
(432,163,o),
(413,133,qs),
(396,104,o),
(333,66,o),
(288,66,qs),
(243,67,o),
(190,100,o),
(161,154,o),
(152,223,o),
(152,259,qs),
(152,527,l),
(67,527,l),
(67,235,ls),
(67,181,o),
(87,92,o),
(134,28,o),
(213,-8,o),
(273,-9,qs),
(278,-9,ls),
(302,-9,o),
(351,0,o),
(392,18,o),
(433,49,o),
(446,73,q),
(446,6,ls),
(446,-30,o),
(429,-91,o),
(393,-135,o),
(335,-160,o),
(294,-160,qs),
(273,-160,o),
(229,-152,o),
(191,-133,o),
(162,-102,o),
(156,-79,q),
(68,-79,l),
(76,-120,o),
(117,-179,o),
(176,-218,o),
(249,-236,o),
(289,-236,qs),
(404,-236,o),
(530,-114,o),
(530,1,qs),
(530,527,l),
(445,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 3 2 3 1 2 128 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 47 0 47 37 21 57 36 20 35 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = y_alt;
},
{
glyphname = u_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,273,ls),
(434,235,o),
(422,163,o),
(403,133,qs),
(385,104,o),
(323,66,o),
(278,66,qs),
(233,67,o),
(181,99,o),
(154,151,o),
(147,219,o),
(147,255,qs),
(147,527,l),
(62,527,l),
(62,233,ls),
(62,180,o),
(82,92,o),
(130,27,o),
(208,-9,o),
(265,-9,qs),
(289,-9,o),
(340,0,o),
(387,21,o),
(428,53,o),
(442,76,q),
(448,0,l),
(519,0,l),
(519,527,l),
(434,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
5 4 2 2 2 22 77 0 3 3 0 97 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 4 2 2 2 22 77 0 0 0 21 77 0 3 3 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 28 0 28 37 21 37 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = u_alt;
},
{
glyphname = be_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,120,o),
(127,41,o),
(218,-6,o),
(284,-6,qs),
(342,-6,o),
(431,33,o),
(492,101,o),
(523,194,o),
(523,248,qs),
(523,301,o),
(493,389,o),
(436,452,o),
(353,488,o),
(299,487,qs),
(253,487,o),
(163,451,o),
(131,413,q),
(132,446,o),
(148,508,o),
(166,533,qs),
(189,568,o),
(234,587,qs),
(288,610,o),
(405,646,o),
(460,666,qs),
(480,674,o),
(514,695,o),
(524,715,q),
(477,782,l),
(461,766,o),
(429,748,o),
(414,742,qs),
(361,723,o),
(249,685,o),
(198,661,qs),
(155,641,o),
(99,586,o),
(78,541,qs),
(66,514,o),
(52,448,o),
(46,384,o),
(44,322,o),
(44,307,qs),
(44,226,o)
);
},
{
closed = 1;
nodes = (
(191,98,o),
(153,145,o),
(134,205,o),
(134,236,qs),
(134,276,o),
(155,337,o),
(194,384,o),
(252,410,o),
(291,411,qs),
(325,411,o),
(379,386,o),
(417,341,o),
(438,280,o),
(438,245,qs),
(438,209,o),
(418,145,o),
(379,97,o),
(322,69,o),
(285,69,qs),
(247,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
26 1 3 0 1 76 15 14 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 45 44 55 53 44 63 45 63 40 38 30 28 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = be_alt;
},
{
glyphname = g_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,527,l),
(448,461,l),
(418,499,o),
(324,533,o),
(278,533,qs),
(217,533,o),
(129,491,o),
(71,418,o),
(43,319,o),
(43,262,qs),
(43,205,o),
(70,108,o),
(126,36,o),
(214,-5,o),
(274,-6,qs),
(326,-6,o),
(422,33,o),
(448,79,q),
(448,8,ls),
(448,-28,o),
(431,-90,o),
(395,-135,o),
(337,-160,o),
(297,-160,qs),
(246,-160,o),
(159,-124,o),
(120,-93,q),
(83,-160,l),
(128,-202,o),
(234,-235,o),
(294,-236,qs),
(301,-236,ls),
(412,-236,o),
(533,-115,o),
(533,0,qs),
(533,527,l)
);
},
{
closed = 1;
nodes = (
(399,417,o),
(419,388,qs),
(436,362,o),
(449,302,o),
(449,266,qs),
(449,237,o),
(437,178,o),
(423,153,qs),
(403,117,o),
(337,69,o),
(286,69,qs),
(242,69,o),
(182,100,o),
(144,152,o),
(128,219,o),
(128,263,qs),
(128,303,o),
(145,374,o),
(182,426,o),
(242,457,o),
(285,457,qs),
(333,457,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
33 1 5 3 17 1 6 5 8 1 1 2 3 76 7 1 1 1 75 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
33 1 5 4 17 1 6 5 8 1 1 2 3 76 7 1 1 1 75 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 5 3 97 4 1 3 3 29 77 0 6 6 2 97 0 2 2 30 77 0 1 1 0 97 0 0 0 31 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 0 1 0 101 7 1 5 5 3 97 4 1 3 3 29 77 0 6 6 2 97 0 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 0 1 0 101 0 4 4 22 77 7 1 5 5 3 97 0 3 3 29 77 0 6 6 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
37 36 47 45 36 57 37 57 19 40 39 37 50 8 7 27 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g_alt;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,274,ls),
(445,236,o),
(432,164,o),
(413,134,qs),
(396,105,o),
(333,67,o),
(288,67,qs),
(243,67,o),
(189,100,o),
(161,154,o),
(152,224,o),
(152,260,qs),
(152,527,l),
(67,527,l),
(67,236,ls),
(67,182,o),
(87,93,o),
(134,29,o),
(213,-7,o),
(273,-8,qs),
(299,-8,o),
(350,1,o),
(395,20,o),
(434,51,o),
(447,71,q),
(447,8,ls),
(447,-28,o),
(430,-90,o),
(393,-135,o),
(335,-160,o),
(294,-160,qs),
(245,-160,o),
(156,-124,o),
(117,-93,q),
(80,-160,l),
(125,-202,o),
(232,-235,o),
(299,-236,qs),
(410,-236,o),
(530,-115,o),
(530,0,qs),
(530,527,l),
(445,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
17 1 4 3 8 1 1 2 2 76 7 1 1 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 0 1 0 101 6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 42 0 42 37 21 41 37 35 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = y;
unicode = 121;
},
{
glyphname = t2.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,685,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,167,ls),
(115,128,o),
(127,66,o),
(144,43,qs),
(164,19,o),
(222,-6,o),
(265,-6,qs),
(299,-6,o),
(355,12,o),
(381,34,q),
(344,96,l),
(332,85,o),
(297,69,o),
(274,69,qs),
(249,70,o),
(220,87,o),
(205,116,o),
(200,155,o),
(200,178,qs),
(200,452,l),
(362,452,l),
(362,527,l),
(200,527,l),
(200,685,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 2 1 13 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 20 77 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 22 37 37 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 396;
}
);
note = t2.alt;
},
{
glyphname = f_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,452,l),
(359,452,l),
(359,527,l),
(200,527,l),
(200,567,ls),
(200,590,o),
(204,630,o),
(218,660,o),
(246,678,o),
(270,679,qs),
(293,679,o),
(329,663,o),
(341,652,q),
(379,716,l),
(353,738,o),
(298,754,o),
(265,754,qs),
(222,754,o),
(164,728,o),
(144,705,qs),
(126,683,o),
(115,620,o),
(115,581,qs),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,0,l),
(200,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
14 1 3 2 15 1 1 3 2 76 0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 22 77 7 1 6 6 21 6 78 0 0 0 28 0 28 17 21 37 38 17 17 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = f_alt;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(384,299,l),
(384,377,l),
(74,377,l),
(74,299,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 458;
}
);
note = hyphen.uc;
},
{
glyphname = uni00AD.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,300,l),
(379,378,l),
(74,378,l),
(74,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni00AD.uc;
},
{
glyphname = endash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,300,l),
(504,378,l),
(74,378,l),
(74,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(685,300,l),
(685,378,l),
(74,378,l),
(74,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = emdash.uc;
},
{
glyphname = a_alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,288,ls),
(490,341,o),
(470,431,o),
(422,496,o),
(341,533,o),
(280,533,qs),
(247,533,o),
(178,518,o),
(120,485,o),
(78,433,o),
(71,397,q),
(161,397,l),
(178,432,o),
(241,458,o),
(281,458,qs),
(344,457,o),
(407,383,o),
(407,319,q),
(344,313,o),
(236,301,o),
(193,292,qs),
(160,284,o),
(112,261,o),
(72,226,o),
(49,176,o),
(49,143,qs),
(49,103,o),
(78,47,o),
(128,11,o),
(188,-5,o),
(224,-5,qs),
(277,-5,o),
(319,10,qs),
(369,26,o),
(407,64,q),
(414,0,l)
);
},
{
closed = 1;
nodes = (
(190,221,o),
(240,228,qs),
(263,232,o),
(394,247,o),
(407,249,q),
(407,214,ls),
(407,169,o),
(378,121,o),
(354,105,qs),
(329,88,o),
(272,69,o),
(236,69,qs),
(221,69,o),
(188,74,o),
(156,90,o),
(134,122,o),
(134,146,qs),
(134,179,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
49 17 2 5 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 5 1 2 5 128 0 1 1 3 97 0 3 3 29 77 0 5 5 0 97 4 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 5 1 2 5 128 0 1 1 3 97 0 3 3 29 77 0 4 4 21 77 0 5 5 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 21 36 18 46 35 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = a_alt;
},
{
glyphname = uni0490;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,628,l),
(542,628,l),
(542,842,l),
(455,842,l),
(455,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni0490;
unicode = 1168;
},
{
glyphname = uni0491;
kernLeft = uni0433;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,452,l),
(431,452,l),
(431,667,l),
(347,667,l),
(347,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 22 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = uni0491;
unicode = 1169;
},
{
glyphname = uni0406;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 20 77 0 0 0 21 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = uni0406;
unicode = 1030;
},
{
glyphname = uni0456;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,689,o),
(59,664,qs),
(59,639,o),
(91,607,o),
(116,607,qs),
(140,607,o),
(174,639,o),
(174,664,qs),
(174,689,o),
(140,720,o),
(116,720,qs),
(91,720,o)
);
},
{
closed = 1;
nodes = (
(159,527,l),
(74,527,l),
(74,0,l),
(159,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 0 97 4 1 0 0 27 77 0 2 2 22 77 5 1 3 3 21 3 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = uni0456;
unicode = 1110;
},
{
glyphname = uni0404;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,624,o),
(513,597,o),
(553,553,o),
(562,522,q),
(649,522,l),
(637,573,o),
(583,647,o),
(508,694,o),
(417,715,o),
(368,715,qs),
(286,714,o),
(165,657,o),
(86,558,o),
(48,425,o),
(48,348,qs),
(48,270,o),
(89,139,o),
(170,44,o),
(292,-8,o),
(374,-8,qs),
(422,-8,o),
(513,15,o),
(590,63,o),
(646,135,o),
(659,185,q),
(566,185,l),
(557,153,o),
(517,110,o),
(464,83,o),
(403,71,o),
(373,71,qs),
(318,71,o),
(232,107,o),
(173,172,o),
(141,261,o),
(139,314,q),
(465,314,l),
(465,393,l),
(139,393,l),
(142,444,o),
(174,533,o),
(232,598,o),
(316,636,o),
(370,636,qs),
(400,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 7 0 1 0 7 1 128 0 4 2 3 2 4 3 128 0 1 0 2 4 1 2 103 8 1 0 0 6 97 0 6 6 27 77 0 3 3 5 97 0 5 5 28 5 78 1 0 40 39 35 33 25 23 19 18 14 12 8 7 6 5 0 44 1 44 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = uni0404;
unicode = 1028;
},
{
glyphname = uni0454;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,456,o),
(282,457,qs),
(303,457,o),
(347,449,o),
(384,430,o),
(412,399,o),
(418,376,q),
(503,376,l),
(494,416,o),
(454,476,o),
(398,514,o),
(327,533,o),
(288,533,qs),
(226,533,o),
(134,493,o),
(73,421,o),
(43,322,o),
(43,263,qs),
(43,203,o),
(71,104,o),
(129,33,o),
(220,-6,o),
(283,-6,qs),
(321,-6,o),
(395,13,o),
(456,52,o),
(500,111,o),
(508,151,q),
(421,151,l),
(415,128,o),
(386,96,o),
(348,77,o),
(304,69,o),
(283,69,qs),
(213,70,o),
(132,155,o),
(130,224,q),
(361,224,l),
(361,298,l),
(129,298,l),
(133,367,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 7 0 7 6 0 128 0 3 1 2 1 3 2 128 0 0 0 1 3 0 1 103 0 7 7 5 97 0 5 5 29 77 0 2 2 4 97 0 4 4 30 4 78 36 20 40 36 20 34 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = uni0454;
unicode = 1108;
},
{
glyphname = uni0407;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(1,871,o),
(1,847,qs),
(1,823,o),
(31,793,o),
(54,793,qs),
(77,793,o),
(108,824,o),
(108,847,qs),
(108,870,o),
(77,900,o),
(54,900,qs),
(31,900,o)
);
},
{
closed = 1;
nodes = (
(153,871,o),
(153,847,qs),
(153,823,o),
(182,793,o),
(206,793,qs),
(229,793,o),
(259,824,o),
(259,847,qs),
(259,870,o),
(229,900,o),
(206,900,qs),
(183,900,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 20 77 0 0 0 21 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 260;
}
);
note = uni0407;
unicode = 1031;
},
{
glyphname = uni0457;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,527,l),
(74,527,l),
(74,0,l),
(159,0,l)
);
},
{
closed = 1;
nodes = (
(-8,678,o),
(-8,655,qs),
(-8,631,o),
(22,601,o),
(45,601,qs),
(68,601,o),
(99,631,o),
(99,655,qs),
(99,678,o),
(68,707,o),
(45,707,qs),
(22,707,o)
);
},
{
closed = 1;
nodes = (
(135,678,o),
(135,655,qs),
(135,631,o),
(164,601,o),
(188,601,qs),
(211,601,o),
(241,631,o),
(241,655,qs),
(241,678,o),
(211,707,o),
(188,707,qs),
(165,707,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
5 1 3 3 2 97 8 4 7 3 2 2 20 77 0 0 0 22 77 6 1 1 1 21 1 78 17 16 5 4 0 0 23 21 16 27 17 27 11 9 4 15 5 15 0 3 0 3 17 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = uni0457;
unicode = 1111;
},
{
glyphname = t0163.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,685,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,167,ls),
(115,128,o),
(127,66,o),
(144,43,qs),
(163,20,o),
(190,7,q),
(155,-119,l),
(168,-114,o),
(197,-110,o),
(207,-110,qs),
(212,-110,o),
(231,-111,o),
(252,-117,o),
(264,-132,o),
(264,-145,qs),
(264,-165,o),
(242,-187,o),
(209,-197,o),
(170,-199,o),
(153,-198,q),
(153,-251,l),
(161,-252,o),
(178,-253,o),
(186,-253,qs),
(200,-254,o),
(250,-246,o),
(299,-221,o),
(334,-175,o),
(333,-138,qs),
(333,-89,o),
(302,-70,qs),
(281,-57,o),
(254,-57,qs),
(249,-57,o),
(237,-58,o),
(231,-59,q),
(248,-5,l),
(256,-6,o),
(265,-6,qs),
(299,-6,o),
(355,12,o),
(381,34,q),
(344,96,l),
(332,85,o),
(297,69,o),
(274,69,qs),
(249,70,o),
(220,87,o),
(205,116,o),
(202,135,qs),
(200,148,o),
(200,165,qs),
(200,452,l),
(362,452,l),
(362,527,l),
(200,527,l),
(200,685,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
13 1 2 1 50 14 2 3 2 20 1 7 4 49 1 6 7 35 1 5 6 5 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 0 10 10 20 77 8 1 1 1 0 95 9 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 10 0 10 133 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 8 1 1 1 0 95 9 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
61 60 59 58 25 54 34 40 36 37 38 17 16 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = t0163.alt;
},
{
glyphname = t021b.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,-258,o),
(158,-272,q),
(182,-305,l),
(202,-298,o),
(239,-266,o),
(267,-224,o),
(284,-177,o),
(284,-150,qs),
(286,-119,o),
(253,-71,o),
(221,-71,qs),
(197,-71,o),
(161,-101,o),
(161,-129,qs),
(161,-154,o),
(193,-184,o),
(219,-186,q),
(213,-210,o)
);
},
{
closed = 1;
nodes = (
(115,685,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,167,ls),
(115,128,o),
(127,66,o),
(144,43,qs),
(164,19,o),
(222,-6,o),
(265,-6,qs),
(299,-6,o),
(355,12,o),
(381,34,q),
(344,96,l),
(332,85,o),
(297,69,o),
(274,69,qs),
(249,70,o),
(220,87,o),
(205,116,o),
(200,155,o),
(200,178,qs),
(200,452,l),
(362,452,l),
(362,527,l),
(200,527,l),
(200,685,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
30 1 3 2 31 1 4 3 2 76 15 14 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 0 4 0 134 0 7 7 20 77 5 1 2 2 1 95 6 1 1 1 22 77 0 3 3 4 97 0 4 4 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 7 1 7 133 0 0 4 0 134 5 1 2 2 1 95 6 1 1 1 22 77 0 3 3 4 97 0 4 4 30 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 22 37 37 17 27 37 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = t021b.alt;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 270;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni202F;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni202F;
unicode = 8239;
},
{
glyphname = map;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,664,qs),
(47,662,ls),
(47,657,o),
(52,657,qs),
(94,657,ls),
(96,657,o),
(98,655,qs),
(121,632,ls),
(122,631,o),
(122,628,qs),
(122,602,ls),
(122,600,o),
(124,598,qs),
(145,577,ls),
(147,575,o),
(147,573,qs),
(147,544,ls),
(147,541,o),
(148,540,qs),
(179,510,ls),
(180,509,o),
(180,506,qs),
(180,480,ls),
(180,479,o),
(182,477,qs),
(228,431,ls),
(229,430,o),
(229,427,qs),
(229,406,ls),
(229,404,o),
(231,402,qs),
(277,355,l),
(279,355,o),
(279,352,qs),
(279,329,ls),
(279,326,o),
(280,325,qs),
(293,313,ls),
(294,312,o),
(294,309,qs),
(294,190,ls),
(294,187,o),
(293,186,qs),
(279,173,ls),
(278,172,o),
(278,169,qs),
(278,84,ls),
(278,81,o),
(279,80,qs),
(291,68,l),
(297,64,o),
(291,60,q),
(279,48,ls),
(275,44,o),
(279,41,qs),
(288,32,ls),
(290,30,o),
(290,28,qs),
(290,5,ls),
(290,0,o),
(295,0,qs),
(298,0,ls),
(300,0,o),
(301,1,o),
(302,1,q),
(316,16,ls),
(317,17,o),
(320,17,qs),
(340,17,ls),
(345,17,o),
(345,23,qs),
(345,61,ls),
(345,63,o),
(347,65,qs),
(357,75,ls),
(358,76,o),
(360,76,qs),
(369,76,ls),
(370,76,o),
(372,78,qs),
(384,90,ls),
(386,92,o),
(386,94,qs),
(386,106,ls),
(386,108,o),
(387,109,qs),
(409,131,ls),
(411,133,o),
(411,135,qs),
(411,160,ls),
(411,163,o),
(412,164,qs),
(432,184,ls),
(435,187,o),
(432,191,qs),
(422,201,ls),
(421,202,o),
(421,205,qs),
(421,232,ls),
(421,234,o),
(422,235,qs),
(444,257,ls),
(446,259,o),
(453,257,o),
(453,253,qs),
(453,219,ls),
(453,213,o),
(458,213,qs),
(467,213,ls),
(468,213,o),
(470,215,qs),
(497,242,l),
(502,245,o),
(505,242,qs),
(520,227,ls),
(523,224,o),
(528,227,q),
(539,238,ls),
(542,241,o),
(546,238,qs),
(555,229,ls),
(556,228,o),
(558,228,qs),
(572,228,l),
(591,228,ls),
(596,228,o),
(596,233,qs),
(596,236,o),
(595,237,qs),
(574,257,ls),
(570,261,o),
(574,265,qs),
(580,270,ls),
(582,272,o),
(582,274,qs),
(582,311,ls),
(582,313,o),
(580,315,qs),
(564,332,ls),
(563,333,o),
(560,333,qs),
(548,333,ls),
(546,333,o),
(544,335,qs),
(522,357,ls),
(520,359,o),
(520,361,qs),
(520,398,l),
(520,432,ls),
(520,437,o),
(515,437,qs),
(503,437,ls),
(501,437,o),
(500,438,qs),
(441,497,ls),
(437,501,o),
(441,505,qs),
(447,511,ls),
(449,513,o),
(449,515,qs),
(449,594,ls),
(449,599,o),
(443,599,qs),
(437,599,ls),
(434,599,o),
(433,598,qs),
(423,588,ls),
(419,584,o),
(416,588,q),
(396,608,ls),
(394,610,o),
(394,612,qs),
(394,638,ls),
(394,643,o),
(389,643,qs),
(357,643,ls),
(354,643,o),
(353,642,qs),
(337,625,ls),
(336,624,o),
(333,624,qs),
(327,624,ls),
(321,624,o),
(321,629,qs),
(321,654,ls),
(321,659,o),
(316,659,qs),
(283,659,ls),
(281,659,o),
(280,660,qs),
(234,706,ls),
(232,708,o),
(230,708,qs),
(134,708,ls),
(132,708,o),
(130,706,qs),
(111,687,ls),
(110,686,o),
(107,686,qs),
(68,686,ls),
(66,686,o),
(64,684,qs),
(48,668,ls),
(47,667,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
201 1 2 0 18 1 4 8 193 30 19 3 3 4 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 6 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 1 1 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 3 0 7 3 7 99 0 1 1 20 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
199 196 135 134 80 77 52 49 50 37 51 51 49 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = map;
},
{
glyphname = logo;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(799,512,qs),
(799,520,o),
(793,526,qs),
(781,539,ls),
(775,545,o),
(767,545,qs),
(741,545,l),
(740,546,o),
(739,546,o),
(738,547,qs),
(707,572,ls),
(702,576,o),
(695,576,qs),
(656,576,l),
(651,589,o),
(638,589,qs),
(630,589,o),
(624,583,qs),
(617,576,l),
(562,576,ls),
(555,576,o),
(548,571,q),
(544,566,l),
(544,586,l),
(570,613,l),
(706,613,l),
(725,593,l),
(732,588,o),
(739,588,qs),
(751,588,ls),
(758,588,o),
(765,593,q),
(778,606,ls),
(784,612,o),
(784,620,qs),
(784,627,o),
(779,632,q),
(784,639,o),
(784,645,qs),
(784,653,o),
(778,659,qs),
(765,671,ls),
(759,677,o),
(751,677,qs),
(739,677,ls),
(731,677,o),
(725,671,qs),
(706,652,l),
(670,652,l),
(670,680,l),
(682,680,o),
(695,710,o),
(695,721,qs),
(695,758,ls),
(695,766,o),
(684,778,o),
(676,778,qs),
(625,778,ls),
(617,778,o),
(606,766,o),
(606,758,qs),
(606,721,ls),
(606,710,o),
(619,680,o),
(631,680,q),
(631,652,l),
(606,652,l),
(606,654,o),
(607,656,o),
(607,657,qs),
(607,665,o),
(596,677,o),
(588,677,qs),
(578,677,o),
(574,671,q),
(537,635,l),
(532,639,o),
(524,639,qs),
(516,639,o),
(505,628,o),
(505,620,qs),
(505,464,l),
(443,402,l),
(443,473,l),
(475,505,ls),
(481,511,o),
(481,519,qs),
(481,526,o),
(472,538,o),
(461,538,qs),
(453,538,o),
(448,533,qs),
(443,528,l),
(443,612,l),
(538,707,l),
(544,711,o),
(544,721,qs),
(544,739,l),
(550,739,ls),
(558,739,o),
(569,750,o),
(569,758,qs),
(569,766,o),
(558,778,o),
(550,778,qs),
(544,778,l),
(544,784,ls),
(544,792,o),
(532,803,o),
(524,803,qs),
(516,803,o),
(505,792,o),
(505,784,qs),
(505,778,l),
(499,778,ls),
(491,778,o),
(480,766,o),
(480,758,qs),
(480,750,o),
(491,739,o),
(499,739,qs),
(505,739,l),
(505,729,l),
(443,667,l),
(443,787,l),
(445,789,o),
(445,790,q),
(500,845,ls),
(506,851,o),
(506,859,qs),
(506,867,o),
(500,873,qs),
(488,886,l),
(485,888,o),
(481,890,q),
(481,910,ls),
(481,918,o),
(475,924,qs),
(463,936,ls),
(457,942,o),
(449,942,qs),
(442,942,o),
(438,939,q),
(432,945,o),
(424,945,qs),
(415,945,o),
(409,939,q),
(404,942,o),
(398,942,qs),
(389,942,o),
(385,936,q),
(372,924,ls),
(366,918,o),
(366,910,qs),
(366,890,l),
(364,889,o),
(361,888,o),
(359,886,qs),
(347,873,ls),
(341,867,o),
(341,859,qs),
(341,851,o),
(347,845,qs),
(402,790,l),
(402,789,o),
(404,787,q),
(404,667,l),
(342,729,l),
(342,739,l),
(348,739,ls),
(356,739,o),
(367,750,o),
(367,758,qs),
(367,766,o),
(356,778,o),
(348,778,qs),
(342,778,l),
(342,784,ls),
(342,792,o),
(331,803,o),
(323,803,qs),
(315,803,o),
(303,792,o),
(303,784,qs),
(303,778,l),
(297,778,ls),
(289,778,o),
(278,766,o),
(278,758,qs),
(278,750,o),
(289,739,o),
(297,739,qs),
(303,739,l),
(303,721,ls),
(303,711,o),
(309,707,q),
(404,612,l),
(404,528,l),
(400,533,l),
(393,538,o),
(386,538,qs),
(378,538,o),
(366,527,o),
(366,519,qs),
(366,511,o),
(372,505,qs),
(404,473,l),
(404,402,l),
(342,464,l),
(342,620,ls),
(342,628,o),
(331,639,o),
(323,639,qs),
(315,639,o),
(310,635,q),
(274,671,ls),
(268,677,o),
(260,677,qs),
(251,677,o),
(240,665,o),
(240,657,qs),
(240,654,o),
(241,652,q),
(216,652,l),
(216,680,l),
(228,680,o),
(241,710,o),
(241,721,qs),
(241,758,ls),
(241,766,o),
(230,778,o),
(222,778,qs),
(171,778,ls),
(163,778,o),
(152,766,o),
(152,758,qs),
(152,721,ls),
(152,710,o),
(165,680,o),
(177,680,q),
(177,652,l),
(142,652,l),
(122,671,ls),
(116,677,o),
(108,677,qs),
(96,677,ls),
(88,677,o),
(82,671,qs),
(69,659,l),
(64,652,o),
(64,645,qs),
(64,637,o),
(68,632,q),
(64,628,o),
(64,620,qs),
(64,613,o),
(69,606,q),
(82,593,l),
(89,588,o),
(96,588,qs),
(108,588,ls),
(115,588,o),
(122,593,q),
(142,613,l),
(277,613,l),
(303,586,l),
(303,566,l),
(299,571,l),
(292,576,o),
(285,576,qs),
(230,576,l),
(223,583,ls),
(217,589,o),
(209,589,qs),
(196,589,o),
(191,576,q),
(152,576,ls),
(145,576,o),
(140,572,qs),
(109,547,ls),
(107,545,o),
(107,545,q),
(80,545,ls),
(72,545,o),
(66,539,qs),
(54,526,ls),
(47,519,o),
(47,512,qs),
(47,504,o),
(57,495,o),
(64,493,q),
(64,485,o),
(75,474,o),
(83,474,q),
(85,459,o),
(102,459,qs),
(109,459,o),
(116,464,q),
(128,477,ls),
(134,483,o),
(134,491,qs),
(134,517,l),
(159,537,l),
(277,537,l),
(303,511,l),
(303,475,l),
(197,475,l),
(196,475,l),
(159,475,ls),
(152,475,o),
(145,470,q),
(120,444,ls),
(113,437,o),
(113,430,qs),
(113,422,o),
(126,411,o),
(134,411,qs),
(171,411,ls),
(180,411,o),
(185,417,q),
(205,436,l),
(315,436,l),
(408,342,l),
(410,342,o),
(418,335,o),
(424,335,qs),
(429,335,o),
(437,342,o),
(439,342,q),
(533,436,l),
(642,436,l),
(662,417,ls),
(668,411,o),
(676,411,qs),
(714,411,ls),
(722,411,o),
(733,422,o),
(733,430,qs),
(733,438,o),
(727,444,qs),
(702,470,ls),
(697,475,o),
(688,475,qs),
(544,475,l),
(544,511,l),
(570,537,l),
(688,537,l),
(713,517,l),
(713,491,ls),
(713,483,o),
(719,477,qs),
(731,464,l),
(738,459,o),
(745,459,qs),
(761,459,o),
(764,474,q),
(772,474,o),
(784,485,o),
(784,493,q),
(794,496,o),
(798,505,qs),
(799,507,o)
);
},
{
closed = 1;
nodes = (
(275,235,o),
(279,235,qs),
(281,235,o),
(282,234,qs),
(400,116,l),
(411,107,o),
(422,107,qs),
(423,107,ls),
(434,107,o),
(445,116,q),
(563,234,ls),
(564,235,o),
(565,235,qs),
(569,235,o),
(569,232,qs),
(569,13,ls),
(569,0,o),
(582,0,qs),
(643,0,ls),
(655,0,o),
(655,13,qs),
(655,362,ls),
(655,375,o),
(643,375,qs),
(582,375,ls),
(570,375,o),
(561,366,qs),
(429,234,ls),
(427,232,o),
(422,232,qs),
(418,232,o),
(416,234,qs),
(284,366,ls),
(275,375,o),
(263,375,qs),
(202,375,ls),
(190,375,o),
(190,362,qs),
(190,13,ls),
(190,0,o),
(202,0,qs),
(263,0,ls),
(275,0,o),
(275,13,qs),
(275,232,ls)
);
},
{
closed = 1;
nodes = (
(784,351,o),
(732,299,o),
(703,228,o),
(703,188,qs),
(703,143,o),
(733,71,o),
(786,21,o),
(859,-6,o),
(902,-6,qs),
(945,-6,o),
(1018,23,o),
(1071,74,o),
(1101,145,o),
(1101,188,qs),
(1101,233,o),
(1071,304,o),
(1018,354,o),
(945,381,o),
(902,381,qs),
(857,381,o)
);
},
{
closed = 1;
nodes = (
(840,91,o),
(811,122,o),
(794,164,o),
(794,188,qs),
(794,239,o),
(855,301,o),
(902,301,qs),
(947,301,o),
(1010,239,o),
(1010,188,qs),
(1010,141,o),
(955,74,o),
(902,74,qs),
(879,74,o)
);
},
{
closed = 1;
nodes = (
(1145,0,o),
(1154,0,qs),
(1374,0,ls),
(1383,0,o),
(1383,9,qs),
(1383,72,ls),
(1383,81,o),
(1374,81,qs),
(1235,81,ls),
(1230,81,o),
(1230,85,qs),
(1230,366,ls),
(1230,375,o),
(1221,375,qs),
(1154,375,ls),
(1145,375,o),
(1145,366,qs),
(1145,9,ls)
);
},
{
closed = 1;
nodes = (
(1431,0,o),
(1440,0,qs),
(1467,0,o),
(1530,-1,o),
(1545,-1,qs),
(1598,-1,o),
(1678,29,o),
(1732,82,o),
(1759,152,o),
(1759,191,qs),
(1759,228,o),
(1736,295,o),
(1685,346,o),
(1605,376,o),
(1549,376,qs),
(1540,376,o),
(1510,376,o),
(1477,375,o),
(1448,375,o),
(1440,375,qs),
(1431,375,o),
(1431,366,qs),
(1431,9,ls)
);
},
{
closed = 1;
nodes = (
(1542,296,o),
(1548,296,qs),
(1600,296,o),
(1668,243,o),
(1668,191,qs),
(1668,137,o),
(1603,80,o),
(1547,80,qs),
(1539,80,o),
(1516,79,o),
(1516,85,qs),
(1516,290,ls),
(1516,295,o),
(1521,295,qs),
(1528,296,o)
);
},
{
closed = 1;
nodes = (
(1883,351,o),
(1831,299,o),
(1802,228,o),
(1802,188,qs),
(1802,143,o),
(1832,71,o),
(1885,21,o),
(1958,-6,o),
(2001,-6,qs),
(2044,-6,o),
(2117,23,o),
(2170,74,o),
(2200,145,o),
(2200,188,qs),
(2200,233,o),
(2170,304,o),
(2117,354,o),
(2044,381,o),
(2001,381,qs),
(1956,381,o)
);
},
{
closed = 1;
nodes = (
(1939,91,o),
(1910,122,o),
(1893,164,o),
(1893,188,qs),
(1893,239,o),
(1954,301,o),
(2001,301,qs),
(2046,301,o),
(2109,239,o),
(2109,188,qs),
(2109,141,o),
(2054,74,o),
(2001,74,qs),
(1978,74,o)
);
},
{
closed = 1;
nodes = (
(2560,367,o),
(2561,368,o),
(2561,369,qs),
(2561,375,o),
(2555,375,qs),
(2485,375,ls),
(2476,375,o),
(2472,366,qs),
(2385,132,l),
(2385,131,o),
(2384,130,q),
(2382,130,o),
(2382,132,q),
(2291,366,ls),
(2287,375,o),
(2279,375,qs),
(2203,375,ls),
(2197,375,o),
(2197,369,qs),
(2197,367,o),
(2198,366,q),
(2344,9,ls),
(2348,0,o),
(2356,0,qs),
(2405,0,ls),
(2414,0,o),
(2418,9,qs),
(2560,366,l)
);
},
{
closed = 1;
nodes = (
(2489,8,o),
(2489,6,qs),
(2489,0,o),
(2495,0,qs),
(2560,0,ls),
(2568,0,o),
(2572,9,qs),
(2596,75,ls),
(2598,79,o),
(2602,79,qs),
(2735,79,ls),
(2739,79,o),
(2741,75,qs),
(2766,9,l),
(2768,0,o),
(2777,0,qs),
(2847,0,ls),
(2853,0,o),
(2853,6,qs),
(2853,7,o),
(2852,8,o),
(2852,9,q),
(2711,367,l),
(2707,375,o),
(2699,375,qs),
(2643,375,ls),
(2635,375,o),
(2631,367,q),
(2490,9,l)
);
},
{
closed = 1;
nodes = (
(2667,261,o),
(2669,262,q),
(2670,261,l),
(2707,163,l),
(2707,162,ls),
(2707,159,o),
(2704,159,qs),
(2633,159,ls),
(2630,159,o),
(2630,162,qs),
(2630,163,l),
(2667,261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 18 267 164 2 16 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 67 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 174 values pushed */
35 1 28 31 20 31 28 20 128 7 1 3 4 53 4 3 114 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 39 24 22 4 18 47 1 15 16 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 49 48 14 13 5 12 9 1 1 2 12 1 103 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 187 values pushed */
35 1 28 31 20 31 28 20 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 53 4 3 114 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 208 values pushed */
35 1 28 31 20 31 28 20 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 53 4 3 114 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 0 62 62 52 98 78 76 72 69 65 63 58 55 8 52 52 21 77 83 70 66 81 4 59 59 52 97 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 204 values pushed */
35 1 28 31 20 31 28 20 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 53 60 57 89 32 1 31 0 5 60 31 5 105 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 30 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 202 values pushed */
35 1 28 31 20 31 28 20 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 53 60 57 89 32 1 31 0 5 60 31 5 105 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 30 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 203 values pushed */
35 1 28 31 20 31 28 20 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 30 58 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 204 values pushed */
35 1 28 31 20 31 28 20 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 57 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 30 58 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 170 values pushed */
518 517 498 497 428 427 408 407 592 588 583 581 577 576 572 569 562 560 553 551 542 540 534 532 524 522 517 530 518 530 508 506 497 516 498 516 496 493 489 487 480 475 467 460 457 454 451 449 445 442 434 432 427 440 428 440 418 416 407 426 408 426 400 397 389 386 383 380 372 369 366 363 355 351 348 347 346 344 342 340 336 335 332 330 317 315 313 312 311 310 304 302 297 296 288 287 284 282 272 270 263 261 257 255 252 250 247 245 241 239 216 215 212 211 192 190 186 184 181 179 176 174 170 168 161 159 149 147 143 142 138 137 136 135 129 127 122 121 120 119 116 114 101 99 97 96 91 90 87 86 85 83 79 77 66 64 58 57 71 34 19 35 19 38 34 23 22 84 7 31 
CALL[ ]	/* CallFunction */";
};
width = 2940;
}
);
note = logo;
},
{
glyphname = a00E2.alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,610,l),
(198,610,l),
(285,728,l),
(372,610,l),
(458,610,l),
(315,796,l),
(255,796,l)
);
},
{
closed = 1;
nodes = (
(490,0,l),
(490,288,ls),
(490,341,o),
(470,431,o),
(422,496,o),
(341,533,o),
(280,533,qs),
(247,533,o),
(178,518,o),
(120,485,o),
(78,433,o),
(71,397,q),
(161,397,l),
(178,432,o),
(241,458,o),
(281,458,qs),
(344,457,o),
(407,383,o),
(407,319,q),
(344,313,o),
(236,301,o),
(193,292,qs),
(160,284,o),
(112,261,o),
(72,226,o),
(49,176,o),
(49,143,qs),
(49,103,o),
(78,47,o),
(128,11,o),
(188,-5,o),
(224,-5,qs),
(277,-5,o),
(319,10,qs),
(369,26,o),
(407,64,q),
(414,0,l)
);
},
{
closed = 1;
nodes = (
(190,221,o),
(240,228,qs),
(263,232,o),
(394,247,o),
(407,249,q),
(407,214,ls),
(407,169,o),
(378,121,o),
(354,105,qs),
(329,88,o),
(272,69,o),
(236,69,qs),
(221,69,o),
(188,74,o),
(156,90,o),
(134,122,o),
(134,146,qs),
(134,179,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 0 2 56 24 2 8 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
9 1 2 0 2 133 1 1 0 6 0 133 0 5 4 8 4 5 8 128 0 4 4 6 97 0 6 6 29 77 0 8 8 3 97 7 1 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
9 1 2 0 2 133 1 1 0 6 0 133 0 5 4 8 4 5 8 128 0 4 4 6 97 0 6 6 29 77 0 7 7 21 77 0 8 8 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
0 0 50 48 43 42 37 35 31 30 28 26 12 10 0 6 0 6 18 17 10 7 24 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = a00E2.alt;
},
{
glyphname = a00E4.alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,681,o),
(120,656,qs),
(120,631,o),
(153,600,o),
(177,600,qs),
(202,600,o),
(235,631,o),
(235,656,qs),
(235,681,o),
(202,712,o),
(177,712,qs),
(153,712,o)
);
},
{
closed = 1;
nodes = (
(346,681,o),
(346,656,qs),
(346,631,o),
(378,600,o),
(402,600,qs),
(427,600,o),
(460,631,o),
(460,656,qs),
(460,681,o),
(427,712,o),
(402,712,qs),
(378,712,o)
);
},
{
closed = 1;
nodes = (
(490,0,l),
(490,288,ls),
(490,341,o),
(470,431,o),
(422,496,o),
(341,533,o),
(280,533,qs),
(247,533,o),
(178,518,o),
(120,485,o),
(78,433,o),
(71,397,q),
(161,397,l),
(178,432,o),
(241,458,o),
(281,458,qs),
(344,457,o),
(407,383,o),
(407,319,q),
(344,313,o),
(236,301,o),
(193,292,qs),
(160,284,o),
(112,261,o),
(72,226,o),
(49,176,o),
(49,143,qs),
(49,103,o),
(78,47,o),
(128,11,o),
(188,-5,o),
(224,-5,qs),
(277,-5,o),
(319,10,qs),
(369,26,o),
(407,64,q),
(414,0,l)
);
},
{
closed = 1;
nodes = (
(190,221,o),
(240,228,qs),
(263,232,o),
(394,247,o),
(407,249,q),
(407,214,ls),
(407,169,o),
(378,121,o),
(354,105,qs),
(329,88,o),
(272,69,o),
(236,69,qs),
(221,69,o),
(188,74,o),
(156,90,o),
(134,122,o),
(134,146,qs),
(134,179,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
73 41 2 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 9 5 6 9 128 3 1 1 1 0 97 11 2 10 3 0 0 27 77 0 5 5 7 97 0 7 7 29 77 0 9 9 4 97 8 1 4 4 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 9 5 6 9 128 3 1 1 1 0 97 11 2 10 3 0 0 27 77 0 5 5 7 97 0 7 7 29 77 0 8 8 21 77 0 9 9 4 97 0 4 4 30 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
13 12 1 0 67 65 60 59 54 52 48 47 45 43 29 27 19 17 12 23 13 23 7 5 0 11 1 11 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = a00E4.alt;
},
{
glyphname = a0103.alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,698,o),
(194,737,qs),
(194,740,l),
(116,740,l),
(116,737,ls),
(116,667,o),
(205,604,o),
(287,604,qs),
(361,604,o),
(452,669,o),
(452,737,qs),
(452,740,l),
(374,740,l),
(372,698,o),
(325,667,o),
(285,667,qs),
(242,667,o)
);
},
{
closed = 1;
nodes = (
(490,0,l),
(490,288,ls),
(490,341,o),
(470,431,o),
(422,496,o),
(341,533,o),
(280,533,qs),
(247,533,o),
(178,518,o),
(120,485,o),
(78,433,o),
(71,397,q),
(161,397,l),
(178,432,o),
(241,458,o),
(281,458,qs),
(344,457,o),
(407,383,o),
(407,319,q),
(344,313,o),
(236,301,o),
(193,292,qs),
(160,284,o),
(112,261,o),
(72,226,o),
(49,176,o),
(49,143,qs),
(49,103,o),
(78,47,o),
(128,11,o),
(188,-5,o),
(224,-5,qs),
(277,-5,o),
(319,10,qs),
(369,26,o),
(407,64,q),
(414,0,l)
);
},
{
closed = 1;
nodes = (
(190,221,o),
(240,228,qs),
(263,232,o),
(394,247,o),
(407,249,q),
(407,214,ls),
(407,169,o),
(378,121,o),
(354,105,qs),
(329,88,o),
(272,69,o),
(236,69,qs),
(221,69,o),
(188,74,o),
(156,90,o),
(134,122,o),
(134,146,qs),
(134,179,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
66 34 2 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
10 1 0 0 2 7 0 2 105 3 1 1 0 6 9 1 6 103 0 5 5 7 97 0 7 7 29 77 0 9 9 4 97 8 1 4 4 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
10 1 0 0 2 7 0 2 105 0 6 9 1 6 87 0 5 5 7 97 0 7 7 29 77 3 1 1 1 8 95 0 8 8 21 77 0 9 9 4 97 0 4 4 30 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 60 58 53 52 47 45 41 40 38 36 22 20 13 11 9 7 4 3 0 16 1 16 11 7 22 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = a0103.alt;
},
{
glyphname = a2_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,527,l),
(452,463,l),
(422,499,o),
(337,533,o),
(291,533,qs),
(224,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(276,-6,qs),
(332,-6,o),
(424,34,o),
(452,71,q),
(452,0,l),
(537,0,l),
(537,527,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,236,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(339,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,263,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 2 2 1 5 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 3 2 1 5 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
6 1 4 4 2 97 3 1 2 2 29 77 0 5 5 0 97 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 22 77 6 1 4 4 2 97 0 2 2 29 77 0 0 0 21 77 0 5 5 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 42 22 42 19 40 35 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = a2_alt;
},
{
glyphname = logom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(795,529,qs),
(787,537,o),
(779,545,o),
(771,548,o),
(757,548,o),
(742,548,q),
(708,575,l),
(703,580,o),
(696,580,qs),
(657,580,l),
(652,592,o),
(639,592,qs),
(631,592,o),
(623,585,o),
(618,580,q),
(563,580,ls),
(556,580,o),
(549,574,o),
(544,569,q),
(544,590,l),
(571,616,l),
(707,616,l),
(726,597,ls),
(732,591,o),
(740,591,qs),
(748,591,o),
(762,592,o),
(767,597,qs),
(774,604,o),
(791,624,o),
(781,636,q),
(791,650,o),
(780,663,qs),
(773,670,o),
(761,681,o),
(753,681,qs),
(743,681,o),
(734,680,o),
(726,676,o),
(717,666,o),
(707,656,q),
(671,656,l),
(671,684,l),
(683,689,o),
(697,711,o),
(697,725,qs),
(697,763,ls),
(697,771,o),
(685,783,o),
(677,783,qs),
(626,783,ls),
(618,783,o),
(606,771,o),
(606,763,qs),
(606,725,ls),
(606,711,o),
(620,689,o),
(632,684,q),
(632,656,l),
(607,656,l),
(609,663,o),
(603,676,o),
(593,682,o),
(579,681,o),
(574,675,q),
(537,639,l),
(527,647,o),
(505,636,o),
(505,623,qs),
(505,467,l),
(443,404,l),
(443,476,l),
(475,508,ls),
(484,517,o),
(475,542,o),
(461,542,qs),
(454,542,o),
(447,536,o),
(443,531,q),
(443,615,l),
(539,711,ls),
(544,717,o),
(544,733,o),
(544,743,q),
(550,743,ls),
(560,743,o),
(569,755,o),
(569,770,o),
(560,783,o),
(550,783,qs),
(544,783,l),
(544,788,ls),
(544,798,o),
(532,807,o),
(517,807,o),
(505,798,o),
(505,788,qs),
(505,783,l),
(499,783,ls),
(489,783,o),
(479,770,o),
(479,755,o),
(489,743,o),
(499,743,qs),
(505,743,l),
(505,733,l),
(443,671,l),
(443,792,ls),
(443,793,o),
(459,810,o),
(479,830,o),
(497,848,o),
(500,851,qs),
(506,856,o),
(506,873,o),
(500,879,qs),
(496,883,o),
(486,894,o),
(481,896,q),
(481,906,o),
(481,923,o),
(475,929,qs),
(471,933,o),
(463,941,o),
(454,947,o),
(444,949,o),
(438,945,q),
(434,950,o),
(416,952,o),
(408,945,q),
(394,954,o),
(384,942,qs),
(376,934,o),
(368,926,o),
(365,919,o),
(365,908,o),
(365,896,q),
(360,894,o),
(350,883,o),
(346,879,qs),
(340,873,o),
(340,856,o),
(346,851,qs),
(349,848,o),
(367,830,o),
(387,810,o),
(403,793,o),
(403,792,qs),
(403,671,l),
(341,733,l),
(341,743,l),
(347,743,ls),
(357,743,o),
(366,755,o),
(366,770,o),
(357,783,o),
(347,783,qs),
(341,783,l),
(341,788,ls),
(341,798,o),
(329,807,o),
(314,807,o),
(302,798,o),
(302,788,qs),
(302,783,l),
(296,783,ls),
(286,783,o),
(276,770,o),
(276,755,o),
(286,743,o),
(296,743,qs),
(302,743,l),
(302,733,o),
(302,717,o),
(308,711,qs),
(403,615,l),
(403,531,l),
(399,536,ls),
(392,543,o),
(376,541,o),
(366,530,o),
(364,515,o),
(371,508,qs),
(403,476,l),
(403,404,l),
(341,467,l),
(341,623,ls),
(341,631,o),
(329,643,o),
(321,643,qs),
(316,643,o),
(312,641,qs),
(310,640,o),
(309,639,q),
(272,675,l),
(267,681,o),
(253,682,o),
(243,676,o),
(237,663,o),
(239,656,q),
(214,656,l),
(214,684,l),
(226,689,o),
(240,711,o),
(240,725,qs),
(240,763,ls),
(240,771,o),
(228,783,o),
(220,783,qs),
(169,783,ls),
(161,783,o),
(149,771,o),
(149,763,qs),
(149,725,ls),
(149,711,o),
(163,689,o),
(175,684,q),
(175,656,l),
(139,656,l),
(120,675,ls),
(114,681,o),
(106,681,qs),
(98,681,o),
(84,681,o),
(79,675,qs),
(76,672,o),
(66,663,o),
(60,654,o),
(60,642,o),
(65,636,q),
(55,622,o),
(66,609,qs),
(73,602,o),
(85,591,o),
(93,591,qs),
(103,591,o),
(112,591,o),
(120,596,o),
(129,606,o),
(139,616,q),
(275,616,l),
(302,590,l),
(302,569,l),
(297,574,o),
(290,580,o),
(283,580,qs),
(228,580,l),
(221,587,ls),
(213,594,o),
(193,590,o),
(189,580,q),
(150,580,ls),
(143,580,o),
(138,575,q),
(104,548,l),
(90,548,o),
(76,548,o),
(67,545,o),
(59,537,o),
(51,529,qs),
(43,521,o),
(49,498,o),
(61,496,q),
(61,488,o),
(72,477,o),
(80,477,q),
(82,465,o),
(105,459,o),
(113,467,qs),
(121,475,o),
(129,483,o),
(132,492,o),
(132,506,o),
(132,520,q),
(157,540,l),
(275,540,l),
(302,514,l),
(302,478,l),
(156,478,ls),
(148,478,o),
(142,472,qs),
(117,447,ls),
(108,437,o),
(118,413,o),
(131,413,qs),
(169,413,ls),
(177,413,o),
(183,419,qs),
(203,439,l),
(313,439,l),
(408,344,l),
(414,336,o),
(431,336,o),
(438,344,qs),
(533,439,l),
(643,439,l),
(655,427,o),
(665,416,o),
(676,412,o),
(695,413,o),
(715,413,qs),
(728,413,o),
(738,438,o),
(729,447,qs),
(704,472,ls),
(698,478,o),
(690,478,qs),
(544,478,l),
(544,514,l),
(571,540,l),
(689,540,l),
(714,520,l),
(714,506,o),
(714,492,o),
(717,483,o),
(725,475,o),
(733,467,qs),
(741,459,o),
(764,466,o),
(766,477,q),
(774,477,o),
(785,488,o),
(785,496,q),
(795,499,o),
(800,508,qs),
(805,520,o)
);
},
{
closed = 1;
nodes = (
(274,235,o),
(278,238,o),
(280,236,qs),
(400,116,ls),
(409,108,o),
(435,108,o),
(444,116,qs),
(563,236,ls),
(565,238,o),
(570,235,o),
(570,233,qs),
(570,13,ls),
(570,0,o),
(583,0,qs),
(644,0,ls),
(656,0,o),
(656,13,qs),
(656,364,ls),
(656,377,o),
(644,377,qs),
(583,377,ls),
(572,377,o),
(561,368,q),
(428,235,ls),
(422,229,o),
(415,235,qs),
(283,368,l),
(272,377,o),
(261,377,qs),
(200,377,ls),
(187,377,o),
(187,364,qs),
(187,13,ls),
(187,0,o),
(200,0,qs),
(261,0,ls),
(274,0,o),
(274,13,qs),
(274,233,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 15 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 37 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
26 1 21 16 21 133 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 18 17 4 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 38 37 36 11 4 10 8 1 0 1 10 0 103 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 118 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 38 37 36 11 4 10 8 1 0 1 10 0 103 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 124 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 127 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 29 2 9 10 0 10 9 0 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 131 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 132 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 84 values pushed */
359 358 351 348 345 342 336 333 330 327 321 319 316 315 314 312 310 308 304 303 301 299 289 288 284 283 275 273 266 265 250 248 240 239 236 235 231 230 226 225 222 220 173 172 169 168 164 163 159 158 155 153 136 134 125 124 116 114 107 106 104 101 90 88 85 84 79 78 74 72 70 68 18 36 50 18 18 19 53 18 30 45 7 31 
CALL[ ]	/* CallFunction */";
};
width = 847;
}
);
note = logom;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,369,l),
(221,256,l),
(299,256,l),
(299,369,l),
(447,369,l),
(447,446,l),
(299,446,l),
(299,596,l),
(221,596,l),
(221,446,l),
(74,446,l),
(74,369,l)
);
},
{
closed = 1;
nodes = (
(447,137,l),
(447,214,l),
(74,214,l),
(74,137,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
2 1 0 5 1 3 4 0 3 103 0 1 0 4 6 1 4 103 0 6 7 7 6 87 0 6 6 7 95 0 7 6 7 79 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,380,l),
(308,380,l),
(308,446,l),
(166,446,l),
(184,462,o),
(220,490,o),
(238,506,qs),
(268,532,o),
(312,595,o),
(312,639,qs),
(312,693,o),
(243,751,o),
(189,750,qs),
(163,750,o),
(117,737,o),
(82,710,o),
(61,670,o),
(60,642,q),
(130,642,l),
(132,664,o),
(164,682,o),
(184,683,qs),
(210,684,o),
(241,655,o),
(240,628,qs),
(239,614,o),
(222,585,o),
(198,558,o),
(171,535,o),
(161,526,qs),
(62,441,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
5 1 3 1 30 1 4 3 2 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 58 77 0 3 3 4 95 0 4 4 59 4 78 17 24 36 18 39 5 9 27 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,663,o),
(178,684,o),
(199,684,qs),
(219,684,o),
(252,665,o),
(251,641,qs),
(250,618,o),
(213,596,o),
(193,596,qs),
(168,596,l),
(168,535,l),
(205,535,ls),
(226,535,o),
(264,519,o),
(264,493,qs),
(264,465,o),
(226,443,o),
(201,443,qs),
(178,443,o),
(141,462,o),
(134,486,q),
(60,486,l),
(64,457,o),
(89,415,o),
(127,388,o),
(174,376,o),
(201,376,qs),
(228,376,o),
(276,388,o),
(314,415,o),
(337,457,o),
(338,486,qs),
(339,518,o),
(311,567,o),
(279,578,q),
(300,589,o),
(324,630,o),
(324,654,qs),
(324,681,o),
(303,717,o),
(268,740,o),
(223,750,o),
(200,750,qs),
(146,750,o),
(75,698,o),
(70,642,q),
(143,642,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
11 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 105 0 6 6 0 97 0 0 0 58 77 0 3 3 1 97 0 1 1 63 1 78 0 0 0 46 0 46 36 33 36 34 20 46 34 9 9 29 
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,137,l),
(438,137,l),
(438,215,l),
(69,215,l),
(69,215,l)
);
},
{
closed = 1;
nodes = (
(438,466,l),
(69,618,l),
(69,531,l),
(322,430,l),
(69,327,l),
(69,242,l),
(438,394,l),
(438,394,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
12 11 10 9 8 7 6 7 0 74 2 1 0 1 1 0 87 2 1 0 0 1 95 0 1 0 1 79 1 0 3 2 0 4 1 4 3 6 22 
CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,137,l),
(438,137,l),
(438,215,l),
(69,215,l),
(69,215,l)
);
},
{
closed = 1;
nodes = (
(69,394,l),
(438,242,l),
(438,328,l),
(184,430,l),
(438,533,l),
(438,618,l),
(69,466,l),
(69,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
12 11 10 9 8 7 6 7 0 74 2 1 0 1 1 0 87 2 1 0 0 1 95 0 1 0 1 79 1 0 3 2 0 4 1 4 3 6 22 
CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,444,l),
(269,444,l),
(187,263,l),
(69,263,l),
(69,185,l),
(152,185,l),
(69,0,l),
(157,0,l),
(240,185,l),
(473,185,l),
(473,263,l),
(275,263,l),
(356,444,l),
(473,444,l),
(473,522,l),
(392,522,l),
(473,703,l),
(385,703,l),
(304,522,l),
(69,522,l),
(69,522,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 1 0 1 133 0 6 5 6 134 2 10 2 0 9 1 3 4 0 3 103 8 1 4 5 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 1 0 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 0 20 1 20 11 6 22 
CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,315,o),
(87,270,o),
(71,210,o),
(69,177,q),
(147,177,l),
(148,191,o),
(153,223,o),
(165,250,o),
(187,267,o),
(205,267,qs),
(228,267,o),
(270,230,o),
(316,185,o),
(372,148,o),
(408,148,qs),
(445,148,o),
(495,174,o),
(528,219,o),
(544,277,o),
(546,310,q),
(469,310,l),
(468,296,o),
(463,264,o),
(450,238,o),
(428,221,o),
(410,221,qs),
(387,221,o),
(345,258,o),
(299,303,o),
(244,341,o),
(207,341,qs),
(170,341,o)
);
},
{
closed = 1;
nodes = (
(119,527,o),
(87,482,o),
(71,423,o),
(69,390,q),
(147,390,l),
(148,404,o),
(153,435,o),
(165,462,o),
(187,479,o),
(205,479,qs),
(228,479,o),
(270,442,o),
(316,397,o),
(372,360,o),
(408,360,qs),
(445,360,o),
(495,386,o),
(528,431,o),
(544,491,o),
(546,524,q),
(469,524,l),
(468,509,o),
(463,477,o),
(450,450,o),
(428,433,o),
(410,433,qs),
(395,433,o),
(366,451,o),
(337,477,o),
(306,509,o),
(272,535,o),
(231,553,o),
(207,553,qs),
(170,553,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 109 values pushed */
0 8 6 10 6 8 10 128 0 11 7 9 7 11 9 128 0 2 0 4 0 2 4 128 0 5 1 3 1 5 3 128 13 1 6 0 10 7 6 10 105 0 7 0 9 0 7 9 105 12 1 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 33 32 1 0 61 60 56 54 51 49 45 44 40 38 32 65 33 65 27 26 22 20 17 15 11 10 6 4 0 31 1 31 14 6 22 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(585,551,o),
(521,653,o),
(415,715,o),
(336,715,qs),
(256,715,o),
(150,652,o),
(86,552,o),
(60,425,o),
(60,353,qs),
(60,281,o),
(86,155,o),
(150,54,o),
(256,-8,o),
(336,-8,qs),
(415,-8,o),
(521,54,o),
(585,155,o),
(612,285,o),
(612,353,qs),
(612,421,o)
);
},
{
closed = 1;
nodes = (
(163,500,o),
(203,583,o),
(276,636,o),
(336,636,qs),
(395,636,o),
(468,583,o),
(508,500,o),
(522,400,o),
(522,353,qs),
(522,305,o),
(508,205,o),
(468,123,o),
(395,71,o),
(336,71,qs),
(276,71,o),
(203,123,o),
(163,205,o),
(149,305,o),
(149,353,qs),
(149,400,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 27 77 0 2 2 0 97 0 0 0 28 0 78 40 40 40 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(345,707,l),
(331,683,o),
(297,653,o),
(255,635,o),
(204,627,o),
(175,626,q),
(175,567,l),
(319,567,l),
(319,0,l),
(406,0,l),
(406,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 20 77 0 0 0 21 0 78 20 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,0,l),
(578,0,l),
(578,79,l),
(218,79,l),
(397,230,ls),
(430,259,o),
(492,318,o),
(541,383,o),
(570,461,o),
(570,510,qs),
(570,559,o),
(537,636,o),
(477,688,o),
(395,715,o),
(346,715,qs),
(305,715,o),
(227,695,o),
(162,655,o),
(117,594,o),
(110,553,q),
(203,553,l),
(215,593,o),
(291,635,o),
(342,635,qs),
(406,635,o),
(484,566,o),
(482,502,qs),
(481,460,o),
(441,389,o),
(384,325,o),
(319,270,o),
(292,247,qs),
(92,72,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
32 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 27 77 0 3 3 4 95 0 4 4 21 4 78 17 26 36 18 39 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(483,16,o),
(551,67,o),
(590,146,o),
(590,205,qs),
(590,269,o),
(520,360,o),
(453,373,q),
(487,387,o),
(529,429,o),
(551,471,o),
(559,514,o),
(559,533,qs),
(559,583,o),
(524,653,o),
(464,696,o),
(385,715,o),
(340,715,qs),
(299,715,o),
(220,697,o),
(155,657,o),
(111,595,o),
(105,551,q),
(192,551,l),
(198,574,o),
(228,607,o),
(267,627,o),
(312,636,o),
(333,636,qs),
(359,636,o),
(409,627,o),
(449,601,o),
(473,555,o),
(473,519,qs),
(472,483,o),
(434,428,o),
(402,413,qs),
(374,401,o),
(328,398,o),
(301,398,qs),
(260,398,l),
(260,320,l),
(328,320,ls),
(359,320,o),
(420,312,o),
(469,286,o),
(500,238,o),
(500,198,qs),
(500,156,o),
(467,105,o),
(418,79,o),
(362,71,o),
(340,71,qs),
(316,71,o),
(264,79,o),
(217,99,o),
(180,132,o),
(171,158,q),
(81,158,l),
(88,111,o),
(139,47,o),
(212,8,o),
(297,-8,o),
(339,-8,qs),
(391,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
56 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 27 77 0 2 2 0 97 8 1 0 0 28 0 78 1 0 47 45 41 40 36 34 26 23 22 20 12 10 6 5 0 63 1 63 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,206,l),
(55,141,l),
(439,141,l),
(439,0,l),
(526,0,l),
(526,141,l),
(609,141,l),
(609,220,l),
(526,220,l),
(526,707,l),
(401,707,l)
);
},
{
closed = 1;
nodes = (
(439,220,l),
(160,220,l),
(439,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
13 1 0 4 9 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 6 1 4 4 20 77 0 2 2 21 2 78 0 0 12 11 0 10 0 10 17 17 17 17 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE004;
unicode = 57348;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,344,o),
(297,374,o),
(339,374,qs),
(409,374,o),
(497,296,o),
(497,223,qs),
(497,183,o),
(471,126,o),
(424,89,o),
(361,71,o),
(325,71,qs),
(302,71,o),
(256,83,o),
(215,106,o),
(183,139,o),
(175,160,q),
(87,160,l),
(96,116,o),
(142,52,o),
(208,11,o),
(289,-9,o),
(333,-9,qs),
(387,-9,o),
(480,23,o),
(548,85,o),
(587,172,o),
(587,228,qs),
(587,279,o),
(554,363,o),
(494,422,o),
(410,454,o),
(359,454,qs),
(302,454,o),
(224,427,o),
(197,405,q),
(217,627,l),
(562,627,l),
(562,707,l),
(139,707,l),
(107,318,l),
(197,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE005;
unicode = 57349;
},
{
glyphname = uniE006;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,498,o),
(225,582,o),
(301,636,o),
(358,636,qs),
(398,636,o),
(472,598,o),
(490,561,q),
(581,561,l),
(569,598,o),
(525,656,o),
(467,695,o),
(397,715,o),
(359,715,qs),
(274,715,o),
(164,642,o),
(101,531,o),
(77,398,o),
(77,317,qs),
(78,252,o),
(107,134,o),
(171,45,o),
(273,-8,o),
(347,-8,qs),
(399,-8,o),
(488,26,o),
(552,88,o),
(588,174,o),
(588,227,qs),
(588,277,o),
(554,359,o),
(494,417,o),
(411,451,o),
(357,451,qs),
(299,451,o),
(195,403,o),
(161,351,q),
(161,397,o)
);
},
{
closed = 1;
nodes = (
(476,133,o),
(435,94,o),
(378,71,o),
(345,71,qs),
(312,71,o),
(255,94,o),
(213,134,o),
(189,188,o),
(189,220,qs),
(189,254,o),
(216,310,o),
(260,349,o),
(317,370,o),
(349,370,qs),
(382,370,o),
(438,347,o),
(477,306,o),
(499,251,o),
(499,218,qs),
(499,187,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 6 5 1 76 0 3 4 0 4 3 0 128 0 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 27 77 0 6 6 1 97 0 1 1 28 1 78 40 40 34 20 40 40 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE006;
unicode = 57350;
},
{
glyphname = uniE007;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(578,635,l),
(578,707,l),
(108,707,l),
(108,627,l),
(482,627,l),
(196,0,l),
(292,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE007;
unicode = 57351;
},
{
glyphname = uniE008;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(529,347,o),
(472,368,q),
(502,382,o),
(540,421,o),
(561,464,o),
(569,509,o),
(569,528,qs),
(569,577,o),
(529,648,o),
(464,694,o),
(380,715,o),
(336,715,qs),
(292,715,o),
(208,694,o),
(143,648,o),
(103,577,o),
(103,528,qs),
(103,509,o),
(110,464,o),
(131,419,o),
(169,379,o),
(199,365,q),
(144,344,o),
(82,257,o),
(82,197,qs),
(82,140,o),
(125,61,o),
(197,13,o),
(288,-8,o),
(336,-8,qs),
(384,-8,o),
(475,13,o),
(546,61,o),
(590,140,o),
(590,197,qs),
(590,257,o)
);
},
{
closed = 1;
nodes = (
(417,623,o),
(456,593,o),
(479,546,o),
(479,512,qs),
(478,483,o),
(454,439,o),
(415,411,o),
(364,397,o),
(336,397,qs),
(308,397,o),
(257,411,o),
(217,439,o),
(193,483,o),
(193,516,qs),
(193,548,o),
(215,593,o),
(254,622,o),
(306,636,o),
(336,636,qs),
(365,636,o)
);
},
{
closed = 1;
nodes = (
(426,307,o),
(472,277,o),
(500,230,o),
(500,196,qs),
(500,157,o),
(466,109,o),
(417,81,o),
(360,71,o),
(336,71,qs),
(312,71,o),
(255,81,o),
(205,109,o),
(171,157,o),
(171,196,qs),
(171,230,o),
(199,277,o),
(246,307,o),
(305,320,o),
(336,320,qs),
(367,320,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
33 13 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 27 77 0 5 5 0 97 0 0 0 28 0 78 57 56 37 36 67 65 56 75 57 75 47 45 36 55 37 55 24 22 36 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE008;
unicode = 57352;
},
{
glyphname = uniE009;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(523,327,o),
(520,277,o),
(510,222,o),
(492,165,o),
(477,142,qs),
(456,110,o),
(388,72,o),
(339,71,qs),
(298,71,o),
(217,108,o),
(200,146,q),
(104,146,l),
(114,107,o),
(158,50,o),
(218,11,o),
(291,-8,o),
(329,-8,qs),
(401,-8,o),
(504,40,o),
(536,82,qs),
(573,130,o),
(606,267,o),
(606,339,qs),
(606,404,o),
(583,535,o),
(522,646,o),
(420,715,o),
(342,715,qs),
(285,715,o),
(197,681,o),
(132,619,o),
(96,532,o),
(96,479,qs),
(96,425,o),
(132,343,o),
(193,287,o),
(275,258,o),
(322,258,qs),
(352,258,o),
(411,269,o),
(465,295,o),
(509,336,o),
(523,365,q),
(523,343,ls)
);
},
{
closed = 1;
nodes = (
(208,572,o),
(249,612,o),
(306,636,o),
(339,636,qs),
(372,636,o),
(428,613,o),
(469,572,o),
(492,515,o),
(492,481,qs),
(492,449,o),
(467,396,o),
(424,358,o),
(367,338,o),
(335,338,qs),
(266,339,o),
(185,417,o),
(185,487,qs),
(185,518,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 5 6 1 76 0 3 0 4 0 3 4 128 0 5 0 0 3 5 0 105 0 6 6 1 97 0 1 1 27 77 0 4 4 2 97 0 2 2 28 2 78 40 42 34 20 41 40 36 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = uniE009;
unicode = 57353;
},
{
glyphname = uniE010;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,78,o),
(75,52,qs),
(75,26,o),
(109,-8,o),
(135,-8,qs),
(161,-8,o),
(195,26,o),
(195,52,qs),
(195,78,o),
(161,112,o),
(135,112,qs),
(109,112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 28 1 78 1 0 7 5 0 11 1 11 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE010;
unicode = 57360;
},
{
glyphname = uniE011;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,-75,o),
(68,-89,q),
(92,-122,l),
(112,-115,o),
(149,-83,o),
(177,-41,o),
(194,10,o),
(194,31,qs),
(194,69,o),
(159,111,o),
(130,111,qs),
(107,111,o),
(72,81,o),
(71,54,qs),
(71,29,o),
(103,-1,o),
(129,-3,q),
(123,-27,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE011;
unicode = 57361;
},
{
glyphname = uniE012;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,78,o),
(75,52,qs),
(75,26,o),
(109,-8,o),
(135,-8,qs),
(161,-8,o),
(195,26,o),
(195,52,qs),
(195,78,o),
(161,112,o),
(135,112,qs),
(109,112,o)
);
},
{
closed = 1;
nodes = (
(75,434,o),
(75,408,qs),
(75,382,o),
(109,348,o),
(135,348,qs),
(161,348,o),
(195,382,o),
(195,408,qs),
(195,434,o),
(161,468,o),
(135,468,qs),
(109,468,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
5 1 2 0 3 0 2 3 105 4 1 0 0 1 97 0 1 1 28 1 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE012;
unicode = 57362;
},
{
glyphname = uniE013;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,434,o),
(75,408,qs),
(75,382,o),
(109,348,o),
(135,348,qs),
(161,348,o),
(195,382,o),
(195,408,qs),
(195,434,o),
(161,468,o),
(135,468,qs),
(109,468,o)
);
},
{
closed = 1;
nodes = (
(89,-74,o),
(69,-88,q),
(93,-121,l),
(113,-114,o),
(150,-82,o),
(178,-40,o),
(195,11,o),
(195,32,qs),
(195,70,o),
(160,112,o),
(131,112,qs),
(108,112,o),
(72,83,o),
(72,55,qs),
(72,30,o),
(104,0,o),
(130,-2,q),
(124,-26,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
27 26 2 2 73 0 2 1 2 134 3 1 0 1 1 0 89 3 1 0 0 1 97 0 1 0 1 81 1 0 19 17 7 5 0 11 1 11 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE013;
unicode = 57363;
},
{
glyphname = uniE014;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,707,l),
(104,471,l),
(166,471,l),
(179,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 20 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE014;
unicode = 57364;
},
{
glyphname = uniE015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,707,l),
(63,471,l),
(125,471,l),
(138,707,l)
);
},
{
closed = 1;
nodes = (
(198,707,l),
(211,471,l),
(273,471,l),
(286,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 20 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = uniE015;
unicode = 57365;
},
{
glyphname = uniE016;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,546,o),
(68,532,q),
(92,499,l),
(112,506,o),
(149,538,o),
(177,580,o),
(195,631,o),
(194,652,qs),
(194,690,o),
(159,732,o),
(130,732,qs),
(107,732,o),
(71,703,o),
(71,675,qs),
(71,650,o),
(103,620,o),
(129,618,q),
(123,594,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
15 14 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 0 0 27 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
37 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE016;
unicode = 57366;
},
{
glyphname = uniE017;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,546,o),
(22,532,q),
(46,499,l),
(66,506,o),
(103,538,o),
(131,580,o),
(148,631,o),
(148,652,qs),
(148,690,o),
(113,732,o),
(84,732,qs),
(61,732,o),
(25,703,o),
(25,675,qs),
(25,650,o),
(57,620,o),
(83,618,q),
(77,594,o)
);
},
{
closed = 1;
nodes = (
(207,546,o),
(187,532,q),
(211,499,l),
(231,506,o),
(268,538,o),
(296,580,o),
(313,631,o),
(313,652,qs),
(313,690,o),
(278,732,o),
(249,732,qs),
(226,732,o),
(190,703,o),
(190,675,qs),
(190,650,o),
(222,620,o),
(248,618,q),
(242,594,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 15 14 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 27 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
25 23 37 2 7 23 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = uniE017;
unicode = 57367;
},
{
glyphname = uniE018;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,697,o),
(195,711,q),
(171,744,l),
(151,737,o),
(114,705,o),
(83,659,o),
(69,610,o),
(69,589,qs),
(69,553,o),
(104,511,o),
(133,511,qs),
(156,511,o),
(192,540,o),
(192,568,qs),
(192,593,o),
(160,623,o),
(134,625,q),
(140,649,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 74 0 0 0 118 37 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE018;
unicode = 57368;
},
{
glyphname = uniE019;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,699,o),
(313,713,q),
(289,746,l),
(269,739,o),
(232,707,o),
(204,665,o),
(187,614,o),
(187,593,qs),
(187,555,o),
(222,513,o),
(251,513,qs),
(274,513,o),
(310,542,o),
(310,570,qs),
(310,595,o),
(278,625,o),
(252,627,q),
(258,651,o)
);
},
{
closed = 1;
nodes = (
(128,699,o),
(148,713,q),
(124,746,l),
(104,739,o),
(67,707,o),
(39,665,o),
(22,614,o),
(22,593,qs),
(22,555,o),
(57,513,o),
(86,513,qs),
(109,513,o),
(145,542,o),
(145,570,qs),
(145,595,o),
(113,625,o),
(87,627,q),
(93,651,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
33 32 15 14 4 0 74 1 1 0 0 118 25 23 37 2 7 23 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = uniE019;
unicode = 57369;
},
{
glyphname = uniE020;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,-75,o),
(68,-89,q),
(92,-122,l),
(112,-115,o),
(149,-83,o),
(177,-41,o),
(194,10,o),
(194,31,qs),
(194,69,o),
(159,111,o),
(130,111,qs),
(107,111,o),
(71,82,o),
(71,54,qs),
(71,29,o),
(103,-1,o),
(129,-3,q),
(123,-27,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE020;
unicode = 57376;
},
{
glyphname = uniE021;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,-74,o),
(22,-88,q),
(46,-121,l),
(66,-114,o),
(103,-82,o),
(131,-40,o),
(148,11,o),
(148,32,qs),
(148,70,o),
(113,112,o),
(84,112,qs),
(61,112,o),
(25,83,o),
(25,55,qs),
(25,30,o),
(57,0,o),
(83,-2,q),
(77,-26,o)
);
},
{
closed = 1;
nodes = (
(207,-74,o),
(187,-88,q),
(211,-121,l),
(231,-114,o),
(268,-82,o),
(296,-40,o),
(313,11,o),
(313,32,qs),
(313,70,o),
(278,112,o),
(249,112,qs),
(226,112,o),
(190,83,o),
(190,55,qs),
(190,30,o),
(222,0,o),
(248,-2,q),
(242,-26,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
33 32 15 14 4 0 73 1 1 0 0 118 25 23 37 2 7 23 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = uniE021;
unicode = 57377;
},
{
glyphname = uniE022;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,191,o),
(75,165,qs),
(75,139,o),
(109,105,o),
(135,105,qs),
(161,105,o),
(195,139,o),
(195,165,qs),
(195,191,o),
(161,225,o),
(135,225,qs),
(109,225,o)
);
},
{
closed = 1;
nodes = (
(75,547,o),
(75,521,qs),
(75,495,o),
(109,461,o),
(135,461,qs),
(161,461,o),
(195,495,o),
(195,521,qs),
(195,547,o),
(161,581,o),
(135,581,qs),
(109,581,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
5 1 2 0 3 0 2 3 105 4 1 0 1 1 0 89 4 1 0 0 1 97 0 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = uniE022;
unicode = 57378;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(289,102,l),
(337,45,l),
(687,337,l),
(337,628,l),
(289,572,l),
(535,374,l),
(13,374,l),
(13,300,l),
(535,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 1 0 1 76 4 3 2 0 74 7 6 2 1 73 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = uni2197;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,128,l),
(547,121,l),
(588,575,l),
(135,534,l),
(141,460,l),
(455,494,l),
(86,125,l),
(138,73,l),
(507,442,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni2197;
unicode = 8599;
},
{
glyphname = uni2196;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(559,460,l),
(566,534,l),
(112,575,l),
(153,122,l),
(227,128,l),
(193,442,l),
(562,73,l),
(614,125,l),
(245,494,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni2196;
unicode = 8598;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,628,l),
(13,336,l),
(363,45,l),
(411,101,l),
(165,299,l),
(687,299,l),
(687,373,l),
(165,373,l),
(411,571,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 1 1 0 1 76 8 7 2 0 74 5 4 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = uni2198;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,140,l),
(589,99,l),
(547,553,l),
(474,547,l),
(508,233,l),
(139,602,l),
(86,550,l),
(455,181,l),
(141,215,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni2198;
unicode = 8600;
},
{
glyphname = uni2199;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,552,l),
(112,98,l),
(566,140,l),
(560,213,l),
(246,179,l),
(615,548,l),
(563,601,l),
(194,232,l),
(228,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni2199;
unicode = 8601;
},
{
glyphname = tab_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,707,l),
(335,682,o),
(295,648,o),
(267,636,qs),
(253,630,o),
(219,623,o),
(187,619,o),
(153,618,o),
(140,618,q),
(140,564,l),
(319,564,l),
(319,79,l),
(112,79,l),
(112,0,l),
(587,0,l),
(587,79,l),
(406,79,l),
(406,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 0 4 3 103 0 5 5 20 77 2 1 0 0 1 96 0 1 1 21 1 78 22 33 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = tab_1;
},
{
glyphname = I_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,0,l),
(520,79,l),
(326,79,l),
(326,628,l),
(520,628,l),
(520,707,l),
(45,707,l),
(45,628,l),
(239,628,l),
(239,79,l),
(45,79,l),
(45,0,l),
(45,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
3 1 1 1 2 95 0 2 2 20 77 4 1 0 0 5 95 0 5 5 21 5 78 17 17 17 17 17 17 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = I_alt;
},
{
glyphname = l_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,219,ls),
(67,163,o),
(75,75,o),
(98,46,qs),
(115,23,o),
(177,0,o),
(228,0,qs),
(290,0,l),
(290,75,l),
(248,75,ls),
(184,75,o),
(166,106,qs),
(153,127,o),
(152,189,o),
(152,224,qs),
(152,707,l),
(67,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 1 2 2 20 77 0 0 0 1 97 0 1 1 21 1 78 0 0 0 16 0 16 33 37 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = l_alt;
},
{
glyphname = l2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,707,l),
(70,167,ls),
(70,136,o),
(79,70,o),
(99,43,qs),
(121,17,o),
(183,-6,o),
(220,-6,qs),
(250,-6,o),
(310,11,o),
(336,34,q),
(299,96,l),
(285,84,o),
(249,69,o),
(229,69,qs),
(210,70,o),
(177,83,o),
(167,101,qs),
(159,118,o),
(156,155,o),
(155,178,qs),
(155,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
9 1 0 2 10 1 1 0 2 76 0 2 2 20 77 0 0 0 1 97 0 1 1 30 1 78 22 37 37 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 326;
}
);
note = l2_alt;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,304,ls),
(235,291,o),
(230,259,o),
(222,246,qs),
(215,234,o),
(190,206,o),
(162,178,o),
(134,152,o),
(123,141,qs),
(92,108,o),
(56,34,o),
(55,-12,qs),
(55,-60,o),
(88,-124,o),
(144,-168,o),
(218,-190,o),
(260,-190,qs),
(299,-190,o),
(372,-170,o),
(431,-131,o),
(471,-71,o),
(476,-31,q),
(388,-31,l),
(383,-53,o),
(357,-84,o),
(321,-103,o),
(280,-111,o),
(259,-111,qs),
(207,-109,o),
(142,-59,o),
(142,-8,qs),
(142,17,o),
(167,69,o),
(186,91,qs),
(197,103,o),
(224,129,o),
(251,155,o),
(277,180,o),
(287,192,qs),
(311,219,o),
(323,267,o),
(323,291,qs),
(323,296,o),
(323,307,o),
(322,312,q),
(235,312,l)
);
},
{
closed = 1;
nodes = (
(339,447,o),
(339,473,qs),
(339,499,o),
(306,533,o),
(280,533,qs),
(254,533,o),
(220,499,o),
(220,473,qs),
(220,447,o),
(254,413,o),
(280,413,qs),
(306,413,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
44 0 2 1 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 3 0 3 1 0 128 5 1 3 3 4 97 0 4 4 49 77 0 0 0 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 3 0 3 1 0 128 0 0 0 2 0 2 101 5 1 3 3 4 97 0 4 4 49 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
47 46 53 51 46 57 47 57 29 27 23 22 18 16 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,-182,l),
(186,-182,l),
(174,305,l),
(101,305,l)
);
},
{
closed = 1;
nodes = (
(196,447,o),
(196,473,qs),
(196,499,o),
(163,533,o),
(137,533,qs),
(112,533,o),
(77,499,o),
(77,473,qs),
(77,447,o),
(112,413,o),
(137,413,qs),
(163,413,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 2 2 3 97 0 3 3 49 77 4 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 1 0 0 1 0 99 5 1 2 2 3 97 0 3 3 49 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,628,l),
(431,628,l),
(431,0,l),
(518,0,l),
(518,628,l),
(605,628,l),
(605,707,l),
(235,707,ls),
(193,707,o),
(123,683,o),
(66,636,o),
(30,562,o),
(30,518,qs),
(30,461,o),
(67,383,o),
(130,335,o),
(213,314,o),
(260,314,q),
(260,0,l),
(347,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 0 2 3 2 0 3 128 4 1 2 2 1 95 0 1 1 38 77 6 5 2 3 3 39 3 78 0 0 0 19 0 19 17 17 17 40 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,633,l),
(441,707,l),
(122,707,l),
(122,633,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 563;
}
);
note = macron;
unicode = 175;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(306,410,l),
(306,574,ls),
(306,605,o),
(294,658,o),
(265,696,o),
(218,718,o),
(184,718,qs),
(137,718,o),
(69,675,o),
(60,627,q),
(126,627,l),
(131,646,o),
(163,659,o),
(184,659,qs),
(216,658,o),
(243,623,o),
(245,593,q),
(169,593,ls),
(146,593,o),
(103,584,o),
(70,563,o),
(50,527,o),
(50,500,qs),
(50,477,o),
(67,442,o),
(97,419,o),
(136,407,o),
(158,407,qs),
(182,407,o),
(229,423,o),
(250,442,q),
(255,410,l)
);
},
{
closed = 1;
nodes = (
(238,494,o),
(224,483,qs),
(211,472,o),
(180,465,o),
(164,465,qs),
(142,464,o),
(112,483,o),
(112,504,qs),
(112,518,o),
(129,535,o),
(155,539,o),
(182,540,o),
(192,540,qs),
(245,540,l),
(245,523,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 0 0 7 89 0 7 7 0 97 5 1 0 7 0 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 3 2 1 2 3 1 128 0 5 7 0 7 5 0 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 5 0 7 89 0 7 7 0 97 0 0 7 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 0 0 7 89 0 7 7 0 97 5 1 0 7 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
37 49 21 34 18 34 40 34 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,404,qs),
(67,389,o),
(67,364,qs),
(67,339,o),
(83,323,qs),
(98,307,o),
(124,307,qs),
(148,307,o),
(165,323,qs),
(182,340,o),
(182,364,qs),
(182,389,o),
(165,404,qs),
(148,420,o),
(124,420,qs),
(98,420,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 9 7 0 15 1 15 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,609,o),
(145,637,o),
(172,655,o),
(193,655,qs),
(215,655,o),
(241,637,o),
(256,609,o),
(261,575,o),
(261,559,qs),
(261,544,o),
(256,510,o),
(241,481,o),
(215,463,o),
(193,463,qs),
(171,463,o),
(145,481,o),
(130,509,o),
(125,543,o),
(125,559,qs),
(125,575,o)
);
},
{
closed = 1;
nodes = (
(313,645,o),
(281,688,o),
(230,715,o),
(193,715,qs),
(156,715,o),
(105,688,o),
(74,645,o),
(60,589,o),
(60,559,qs),
(60,529,o),
(74,474,o),
(105,430,o),
(156,404,o),
(193,404,qs),
(230,404,o),
(281,430,o),
(313,474,o),
(327,529,o),
(327,559,qs),
(327,589,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 1 0 3 1 105 0 0 0 2 97 0 2 2 59 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 1 0 3 1 105 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 1 0 3 1 105 0 0 0 2 97 0 2 2 59 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 1 0 3 1 105 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 1 0 3 1 105 0 0 0 2 97 0 2 2 59 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 1 0 3 1 105 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
40 40 40 36 4 9 26 
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,769,l),
(358,769,l),
(280,673,l),
(202,769,l),
(116,769,l),
(250,606,l),
(310,606,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 559;
}
);
note = caron;
unicode = 711;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,687,o),
(231,662,qs),
(231,637,o),
(262,605,o),
(288,605,qs),
(312,605,o),
(346,637,o),
(346,662,qs),
(346,686,o),
(311,719,o),
(288,718,qs),
(263,718,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 577;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,734,o),
(186,690,qs),
(186,646,o),
(240,595,o),
(284,595,qs),
(327,595,o),
(383,646,o),
(383,690,qs),
(383,733,o),
(329,791,o),
(285,791,qs),
(241,791,o)
);
},
{
closed = 1;
nodes = (
(241,672,o),
(241,692,qs),
(241,712,o),
(264,737,o),
(284,737,qs),
(304,737,o),
(327,712,o),
(327,692,qs),
(327,672,o),
(304,647,o),
(284,647,qs),
(264,647,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 3 2 0 3 105 5 1 2 1 1 2 89 5 1 2 2 1 97 0 1 2 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 569;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,638,o),
(435,674,o),
(444,721,o),
(445,745,q),
(375,745,l),
(375,737,o),
(375,713,o),
(369,692,o),
(356,677,o),
(344,677,qs),
(332,677,o),
(306,700,o),
(275,727,o),
(237,750,o),
(212,750,qs),
(182,750,o),
(143,728,o),
(121,691,o),
(112,644,o),
(112,620,q),
(181,620,l),
(181,628,o),
(182,651,o),
(187,672,o),
(199,687,o),
(211,687,qs),
(223,687,o),
(249,664,o),
(280,637,o),
(318,615,o),
(343,615,qs),
(373,615,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 50 values pushed */
27 1 1 2 11 1 0 3 2 76 0 2 0 1 3 2 1 105 0 3 0 0 3 89 0 3 3 0 97 4 1 0 3 0 81 1 0 22 20 17 15 6 4 0 31 1 31 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 557;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,-217,o),
(360,-207,q),
(346,-148,l),
(322,-160,o),
(298,-160,qs),
(269,-160,o),
(234,-129,o),
(234,-101,qs),
(234,-84,o),
(249,-53,o),
(272,-28,o),
(302,-4,o),
(319,5,q),
(256,15,l),
(218,-2,o),
(160,-66,o),
(160,-111,qs),
(160,-162,o),
(228,-223,o),
(289,-224,qs),
(309,-224,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
18 1 0 1 1 76 17 7 6 3 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 16 14 0 20 1 20 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 520;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,628,l),
(319,769,l),
(227,769,l),
(142,628,l)
);
},
{
closed = 1;
nodes = (
(378,628,l),
(478,769,l),
(386,769,l),
(301,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 558;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-299,769,l),
(-391,769,l),
(-291,628,l),
(-214,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-238,628,l),
(-138,769,l),
(-230,769,l),
(-315,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-430,606,l),
(-345,606,l),
(-267,702,l),
(-189,606,l),
(-103,606,l),
(-237,769,l),
(-297,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-145,638,o),
(-122,674,o),
(-113,721,o),
(-112,745,q),
(-182,745,l),
(-182,737,o),
(-182,713,o),
(-188,692,o),
(-201,677,o),
(-213,677,qs),
(-225,677,o),
(-251,700,o),
(-282,727,o),
(-320,750,o),
(-345,750,qs),
(-375,750,o),
(-414,728,o),
(-436,691,o),
(-445,644,o),
(-445,620,q),
(-376,620,l),
(-376,628,o),
(-375,651,o),
(-370,672,o),
(-358,687,o),
(-346,687,qs),
(-334,687,o),
(-308,664,o),
(-277,637,o),
(-239,615,o),
(-214,615,qs),
(-184,615,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 50 values pushed */
27 1 1 2 11 1 0 3 2 76 0 2 0 1 3 2 1 105 0 3 0 0 3 89 0 3 3 0 97 4 1 0 3 0 81 1 0 22 20 17 15 6 4 0 31 1 31 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-120,633,l),
(-120,707,l),
(-439,707,l),
(-439,633,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-361,699,o),
(-363,734,q),
(-441,734,l),
(-439,669,o),
(-350,601,o),
(-271,601,qs),
(-192,601,o),
(-101,669,o),
(-99,734,q),
(-177,734,l),
(-179,699,o),
(-228,667,o),
(-270,667,qs),
(-312,667,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 133 4 1 0 2 2 0 89 4 1 0 0 2 97 0 2 0 2 81 1 0 11 10 8 6 4 3 0 13 1 13 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-340,687,o),
(-340,662,qs),
(-340,637,o),
(-309,605,o),
(-283,605,qs),
(-259,605,o),
(-225,637,o),
(-225,662,qs),
(-225,686,o),
(-260,719,o),
(-283,718,qs),
(-308,718,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-446,676,o),
(-446,651,qs),
(-446,626,o),
(-413,595,o),
(-389,595,qs),
(-364,595,o),
(-331,626,o),
(-331,651,qs),
(-331,676,o),
(-364,707,o),
(-389,707,qs),
(-413,707,o)
);
},
{
closed = 1;
nodes = (
(-220,676,o),
(-220,651,qs),
(-220,626,o),
(-188,595,o),
(-164,595,qs),
(-139,595,o),
(-106,626,o),
(-106,651,qs),
(-106,676,o),
(-139,707,o),
(-164,707,qs),
(-188,707,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-376,734,o),
(-376,690,qs),
(-376,646,o),
(-322,595,o),
(-278,595,qs),
(-235,595,o),
(-179,646,o),
(-179,690,qs),
(-179,733,o),
(-233,791,o),
(-277,791,qs),
(-321,791,o)
);
},
{
closed = 1;
nodes = (
(-321,672,o),
(-321,692,qs),
(-321,712,o),
(-298,737,o),
(-278,737,qs),
(-258,737,o),
(-235,712,o),
(-235,692,qs),
(-235,672,o),
(-258,647,o),
(-278,647,qs),
(-298,647,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 3 2 0 3 105 5 1 2 1 1 2 89 5 1 2 2 1 97 0 1 2 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-337,628,l),
(-237,769,l),
(-329,769,l),
(-414,628,l)
);
},
{
closed = 1;
nodes = (
(-178,628,l),
(-78,769,l),
(-170,769,l),
(-255,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-120,769,l),
(-205,769,l),
(-283,673,l),
(-361,769,l),
(-448,769,l),
(-313,606,l),
(-254,606,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-240,786,o),
(-220,800,q),
(-244,833,l),
(-264,826,o),
(-301,794,o),
(-332,748,o),
(-346,699,o),
(-346,678,qs),
(-346,642,o),
(-311,600,o),
(-282,600,qs),
(-259,600,o),
(-223,629,o),
(-223,657,qs),
(-223,682,o),
(-255,712,o),
(-281,714,q),
(-275,738,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 74 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-296,8,l),
(-325,-119,l),
(-312,-114,o),
(-283,-110,o),
(-273,-110,qs),
(-268,-110,o),
(-249,-111,o),
(-230,-117,o),
(-216,-133,o),
(-216,-145,qs),
(-216,-165,o),
(-238,-186,o),
(-271,-196,o),
(-310,-198,o),
(-327,-198,q),
(-327,-253,l),
(-298,-253,o),
(-231,-247,o),
(-200,-231,qs),
(-177,-218,o),
(-147,-171,o),
(-147,-138,qs),
(-147,-100,o),
(-187,-57,o),
(-226,-57,qs),
(-231,-57,o),
(-243,-58,o),
(-249,-59,q),
(-234,8,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
26 1 2 3 1 76 0 0 4 3 4 0 3 128 0 4 0 3 2 4 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 19 54 33 23 34 5 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-38,-217,o),
(-20,-207,q),
(-34,-148,l),
(-58,-160,o),
(-82,-160,qs),
(-111,-160,o),
(-146,-129,o),
(-146,-101,qs),
(-146,-84,o),
(-131,-53,o),
(-108,-28,o),
(-78,-4,o),
(-61,5,q),
(-124,15,l),
(-162,-2,o),
(-220,-66,o),
(-220,-111,qs),
(-220,-162,o),
(-152,-223,o),
(-91,-224,qs),
(-71,-224,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
18 1 0 1 1 76 17 7 6 3 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 16 14 0 20 1 20 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,927,l),
(211,927,l),
(311,786,l),
(388,786,l)
);
},
{
closed = 1;
nodes = (
(398,707,l),
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l)
);
},
{
closed = 1;
nodes = (
(189,231,l),
(335,631,l),
(481,231,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 0 1 0 133 7 1 1 4 1 133 0 6 0 2 3 6 2 104 0 4 4 38 77 8 5 2 3 3 39 3 78 4 4 0 0 14 13 4 11 4 11 10 9 8 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,707,l),
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l)
);
},
{
closed = 1;
nodes = (
(189,231,l),
(335,631,l),
(481,231,l)
);
},
{
closed = 1;
nodes = (
(372,786,l),
(472,927,l),
(380,927,l),
(295,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 5 6 5 133 0 6 2 6 133 0 4 0 0 1 4 0 104 0 2 2 38 77 7 3 2 1 1 39 1 78 0 0 14 13 12 11 10 9 0 7 0 7 17 17 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,707,l),
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l)
);
},
{
closed = 1;
nodes = (
(189,231,l),
(335,631,l),
(481,231,l)
);
},
{
closed = 1;
nodes = (
(474,796,o),
(497,832,o),
(506,879,o),
(507,903,q),
(437,903,l),
(437,895,o),
(437,871,o),
(431,850,o),
(418,835,o),
(406,835,qs),
(394,835,o),
(368,858,o),
(337,885,o),
(299,908,o),
(274,908,qs),
(244,908,o),
(205,886,o),
(183,849,o),
(174,802,o),
(174,778,q),
(243,778,l),
(243,786,o),
(244,809,o),
(249,830,o),
(261,845,o),
(273,845,qs),
(285,845,o),
(311,822,o),
(342,795,o),
(380,773,o),
(405,773,qs),
(435,773,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
38 1 6 7 22 1 5 8 2 76 0 7 0 6 8 7 6 105 0 8 10 1 5 2 8 5 105 0 4 0 0 1 4 0 104 0 2 2 38 77 9 3 2 1 1 39 1 78 12 11 0 0 33 31 28 26 17 15 11 42 12 42 10 9 0 7 0 7 17 17 17 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(308,927,l),
(216,927,l),
(316,786,l),
(393,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 7 6 133 8 1 7 0 7 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 15 12 15 18 17 17 17 17 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(350,786,l),
(450,927,l),
(358,927,l),
(273,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 6 7 6 133 0 7 0 7 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = agrave;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
},
{
closed = 1;
nodes = (
(266,769,l),
(174,769,l),
(274,628,l),
(351,628,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 9 8 133 11 1 9 4 9 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 8 9 8 133 11 1 9 4 9 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
51 51 38 36 51 54 51 54 53 52 47 45 36 50 38 50 21 36 18 34 40 36 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
},
{
closed = 1;
nodes = (
(301,628,l),
(401,769,l),
(309,769,l),
(224,628,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 9 8 133 0 9 4 9 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 8 9 8 133 0 9 4 9 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
38 36 54 53 52 51 47 45 36 50 38 50 21 36 18 34 40 36 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(102,927,l),
(10,927,l),
(110,786,l),
(187,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 3 2 133 4 1 3 1 3 133 0 1 1 38 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(157,786,l),
(257,927,l),
(165,927,l),
(80,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 1 38 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,587,l),
(545,0,l),
(654,0,l),
(654,707,l),
(567,707,l),
(567,118,l),
(198,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(504,796,o),
(527,832,o),
(536,879,o),
(537,903,q),
(467,903,l),
(467,895,o),
(467,871,o),
(461,850,o),
(448,835,o),
(436,835,qs),
(424,835,o),
(398,858,o),
(367,885,o),
(329,908,o),
(304,908,qs),
(274,908,o),
(235,886,o),
(213,849,o),
(204,802,o),
(204,778,q),
(273,778,l),
(273,786,o),
(274,809,o),
(279,830,o),
(291,845,o),
(303,845,qs),
(315,845,o),
(341,822,o),
(372,795,o),
(410,773,o),
(435,773,qs),
(465,773,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
37 1 5 6 21 1 4 7 8 3 2 2 0 3 76 0 6 0 5 7 6 5 105 0 7 9 1 4 0 7 4 105 1 1 0 0 38 77 8 3 2 2 2 39 2 78 11 10 0 0 32 30 27 25 16 14 10 41 11 41 0 9 0 9 17 18 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
},
{
closed = 1;
nodes = (
(354,927,l),
(262,927,l),
(362,786,l),
(439,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
0 4 5 4 133 8 1 5 1 5 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
},
{
closed = 1;
nodes = (
(396,786,l),
(496,927,l),
(404,927,l),
(319,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 4 133 0 5 1 5 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
},
{
closed = 1;
nodes = (
(217,786,l),
(302,786,l),
(380,882,l),
(458,786,l),
(544,786,l),
(410,949,l),
(350,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
5 1 4 6 1 6 4 1 128 9 1 6 6 44 77 8 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 7 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
9 1 6 4 6 133 5 1 4 1 4 133 8 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 7 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
40 40 21 20 1 0 40 46 40 46 45 44 42 41 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,796,o),
(543,832,o),
(552,879,o),
(553,903,q),
(483,903,l),
(483,895,o),
(483,871,o),
(477,850,o),
(464,835,o),
(452,835,qs),
(440,835,o),
(414,858,o),
(383,885,o),
(345,908,o),
(320,908,qs),
(290,908,o),
(251,886,o),
(229,849,o),
(220,802,o),
(220,778,q),
(289,778,l),
(289,786,o),
(290,809,o),
(295,830,o),
(307,845,o),
(319,845,qs),
(331,845,o),
(357,822,o),
(388,795,o),
(426,773,o),
(451,773,qs),
(481,773,o)
);
},
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
27 1 1 2 11 1 0 3 2 76 0 2 0 1 3 2 1 105 0 3 8 1 0 5 3 0 105 10 1 6 6 5 97 0 5 5 46 77 0 7 7 4 97 9 1 4 4 47 4 78 53 52 33 32 1 0 63 61 52 71 53 71 43 41 32 51 33 51 22 20 17 15 6 4 0 31 1 31 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,707,l),
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l)
);
},
{
closed = 1;
nodes = (
(189,231,l),
(335,631,l),
(481,231,l)
);
},
{
closed = 1;
nodes = (
(236,892,o),
(236,848,qs),
(236,804,o),
(290,753,o),
(334,753,qs),
(377,753,o),
(433,804,o),
(433,848,qs),
(433,891,o),
(379,949,o),
(335,949,qs),
(291,949,o)
);
},
{
closed = 1;
nodes = (
(291,830,o),
(291,850,qs),
(291,870,o),
(314,895,o),
(334,895,qs),
(354,895,o),
(377,870,o),
(377,850,qs),
(377,830,o),
(354,805,o),
(334,805,qs),
(314,805,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
11 1 7 0 6 2 7 6 105 0 4 0 0 1 4 0 104 0 8 8 5 97 10 1 5 5 44 77 0 2 2 38 77 9 3 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
10 1 5 0 8 7 5 8 105 11 1 7 0 6 2 7 6 105 0 4 0 0 1 4 0 104 0 2 2 38 77 9 3 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
24 23 12 11 0 0 30 28 23 34 24 34 18 16 11 22 12 22 10 9 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,151,l),
(434,0,l),
(875,0,l),
(875,79,l),
(521,79,l),
(521,310,l),
(836,310,l),
(836,390,l),
(521,390,l),
(521,628,l),
(875,628,l),
(875,707,l),
(371,707,l),
(10,0,l),
(105,0,l),
(183,151,l)
);
},
{
closed = 1;
nodes = (
(225,231,l),
(423,628,l),
(434,628,l),
(434,231,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 3 0 4 9 3 4 103 0 9 0 7 5 9 7 103 8 1 2 2 1 95 0 1 1 38 77 0 5 5 0 95 6 1 0 0 39 0 78 19 18 17 17 17 17 17 17 17 17 16 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 923;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,314,l),
(87,0,l),
(338,0,ls),
(421,0,o),
(545,51,o),
(628,144,o),
(670,274,o),
(671,353,qs),
(671,432,o),
(629,563,o),
(545,656,o),
(420,707,o),
(338,707,qs),
(87,707,l),
(87,392,l),
(9,392,l),
(9,314,l)
);
},
{
closed = 1;
nodes = (
(400,628,o),
(492,586,o),
(552,514,o),
(582,416,o),
(582,353,qs),
(582,292,o),
(552,191,o),
(520,154,qs),
(485,112,o),
(386,79,o),
(332,79,qs),
(174,79,l),
(174,314,l),
(333,314,l),
(333,392,l),
(174,392,l),
(174,628,l),
(337,628,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
4 1 0 5 1 3 6 0 3 103 8 1 7 7 1 95 0 1 1 38 77 0 6 6 2 95 0 2 2 39 2 78 17 17 17 34 17 33 33 17 18 17 40 33 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(629,612,qs),
(597,648,o),
(554,673,q),
(613,816,l),
(528,816,l),
(481,703,l),
(435,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(132,95,qs),
(163,59,o),
(206,34,q),
(147,-110,l),
(232,-110,l),
(279,4,l),
(325,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(310,79,q),
(521,594,l),
(546,576,o),
(565,552,qs),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(342,71,o)
);
},
{
closed = 1;
nodes = (
(450,627,q),
(238,112,l),
(213,131,o),
(195,155,qs),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(419,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
20 17 2 5 2 54 53 41 40 4 4 5 5 2 2 0 4 3 76 0 3 2 3 133 0 1 0 1 134 8 1 5 5 2 97 0 2 2 46 77 7 1 4 4 0 97 6 1 0 0 47 0 78 44 43 31 30 1 0 43 55 44 55 30 42 31 42 19 18 16 14 4 3 0 29 1 29 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,119,l),
(314,119,ls),
(370,119,o),
(468,147,o),
(540,204,o),
(581,293,o),
(581,353,qs),
(581,474,o),
(448,583,o),
(332,583,qs),
(174,583,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(174,504,l),
(328,504,ls),
(410,504,o),
(492,433,o),
(492,357,qs),
(492,271,o),
(392,198,o),
(310,198,qs),
(174,198,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
0 0 0 5 4 0 5 103 6 1 4 0 1 2 4 1 103 0 3 3 38 77 0 2 2 39 2 78 16 15 22 20 15 23 16 23 17 17 38 32 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,353,o),
(329,379,qs),
(329,396,o),
(367,449,o),
(410,501,o),
(446,563,o),
(446,604,qs),
(446,641,o),
(416,697,o),
(365,735,o),
(300,754,o),
(266,754,qs),
(209,754,o),
(133,721,o),
(87,666,o),
(67,595,o),
(67,556,qs),
(67,0,l),
(152,0,l),
(152,567,ls),
(152,587,o),
(165,627,o),
(191,659,o),
(232,679,o),
(261,679,qs),
(303,679,o),
(356,634,o),
(356,601,qs),
(356,566,o),
(323,513,o),
(282,464,o),
(249,401,o),
(249,374,qs),
(249,319,o),
(311,258,o),
(362,243,qs),
(383,237,o),
(427,225,o),
(461,206,o),
(483,175,o),
(483,147,qs),
(483,105,o),
(429,68,o),
(390,69,qs),
(354,69,o),
(301,102,o),
(293,143,q),
(207,143,l),
(212,104,o),
(244,47,o),
(291,11,o),
(351,-6,o),
(386,-6,qs),
(425,-6,o),
(492,13,o),
(540,53,o),
(568,114,o),
(568,156,qs),
(568,195,o),
(541,245,o),
(494,278,o),
(433,300,o),
(400,309,qs),
(359,321,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 3 2 3 1 2 128 0 5 0 3 1 5 3 105 0 2 2 0 97 4 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 2 3 1 2 128 0 5 0 3 1 5 3 105 0 4 4 39 77 0 2 2 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
52 50 45 44 39 37 34 20 41 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,35,o),
(450,85,q),
(467,60,o),
(513,26,o),
(566,4,o),
(624,-6,o),
(652,-6,qs),
(689,-6,o),
(760,11,o),
(819,46,o),
(863,102,o),
(872,141,q),
(785,141,l),
(778,120,o),
(750,93,o),
(714,76,o),
(673,69,o),
(654,69,qs),
(577,69,o),
(491,156,o),
(490,232,q),
(881,232,l),
(882,242,o),
(883,262,o),
(883,272,qs),
(883,328,o),
(850,423,o),
(788,494,o),
(703,533,o),
(651,533,qs),
(584,533,o),
(487,481,o),
(458,438,q),
(430,489,o),
(334,533,o),
(280,533,qs),
(247,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(176,433,o),
(245,457,o),
(280,457,qs),
(346,457,o),
(407,380,o),
(407,306,q),
(252,306,ls),
(212,306,o),
(139,292,o),
(83,256,o),
(49,196,o),
(49,150,qs),
(49,110,o),
(82,51,o),
(136,13,o),
(205,-6,o),
(241,-6,qs),
(310,-6,o)
);
},
{
closed = 1;
nodes = (
(498,373,o),
(578,457,o),
(648,457,qs),
(716,457,o),
(795,372,o),
(797,306,q),
(492,306,l)
);
},
{
closed = 1;
nodes = (
(369,232,o),
(407,232,q),
(407,153,o),
(333,69,o),
(249,69,qs),
(228,69,o),
(187,79,o),
(154,100,o),
(134,133,o),
(134,156,qs),
(134,183,o),
(157,212,o),
(193,227,o),
(237,231,o),
(258,231,qs),
(296,232,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 107 values pushed */
26 1 3 2 57 1 7 8 2 76 0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 15 11 2 1 16 12 2 6 8 1 6 103 10 1 2 2 4 97 5 1 4 4 49 77 13 1 7 7 0 97 9 14 2 0 0 50 0 78 68 67 60 60 1 0 78 76 67 82 68 80 60 66 60 66 64 62 53 51 47 46 42 40 38 37 30 28 24 22 18 17 15 13 11 9 0 59 1 59 17 8 22 
CALL[ ]	/* CallFunction */";
};
width = 929;
}
);
note = ae;
unicode = 230;
},
{
glyphname = eth;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(462,590,o),
(400,647,q),
(496,709,l),
(457,767,l),
(340,690,l),
(296,719,o),
(184,754,o),
(118,759,q),
(111,690,l),
(153,688,o),
(245,665,o),
(273,646,q),
(184,587,l),
(223,528,l),
(335,602,l),
(350,592,o),
(384,551,o),
(413,500,o),
(434,443,o),
(436,417,q),
(409,454,o),
(323,487,o),
(273,487,qs),
(220,487,o),
(136,451,o),
(78,386,o),
(47,299,o),
(47,248,qs),
(47,192,o),
(78,99,o),
(138,31,o),
(226,-6,o),
(283,-6,qs),
(353,-5,o),
(447,43,o),
(503,125,o),
(526,234,o),
(526,296,qs),
(526,416,o)
);
},
{
closed = 1;
nodes = (
(191,98,o),
(152,146,o),
(132,210,o),
(132,245,qs),
(132,278,o),
(151,339,o),
(189,384,o),
(243,411,o),
(279,411,qs),
(319,411,o),
(378,384,o),
(417,336,o),
(436,272,o),
(436,236,qs),
(436,203,o),
(416,142,o),
(377,96,o),
(321,69,o),
(286,69,qs),
(248,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
36 26 25 24 23 5 1 2 18 1 4 1 2 76 35 34 33 30 4 2 74 0 2 1 2 133 0 1 0 4 3 1 4 105 5 1 3 3 0 97 0 0 0 50 0 78 40 39 50 48 39 58 40 58 28 40 36 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = eth;
unicode = 240;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,66,l),
(185,27,o),
(272,-6,o),
(322,-6,qs),
(383,-6,o),
(472,36,o),
(529,108,o),
(557,206,o),
(557,263,qs),
(557,318,o),
(530,417,o),
(474,490,o),
(386,533,o),
(326,533,qs),
(273,533,o),
(181,489,o),
(152,448,q),
(152,707,l),
(67,707,l),
(67,-190,l),
(152,-190,l)
);
},
{
closed = 1;
nodes = (
(209,100,o),
(169,153,o),
(150,223,o),
(150,262,qs),
(150,299,o),
(171,370,o),
(211,424,o),
(272,457,o),
(313,457,qs),
(357,457,o),
(418,426,o),
(455,372,o),
(472,302,o),
(472,263,qs),
(471,225,o),
(454,155,o),
(418,101,o),
(359,69,o),
(315,69,qs),
(271,69,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 4 5 19 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 38 77 0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 0 2 2 50 77 6 1 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 2 3 134 0 0 0 38 77 0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 21 0 0 32 30 21 40 22 40 0 20 0 20 40 35 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = egrave;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
},
{
closed = 1;
nodes = (
(290,769,l),
(198,769,l),
(298,628,l),
(375,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
0 7 8 7 133 11 1 8 3 8 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 44 44 35 35 0 0 44 47 44 47 46 45 35 43 35 43 39 37 0 34 0 34 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
},
{
closed = 1;
nodes = (
(298,628,l),
(398,769,l),
(306,769,l),
(221,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
0 7 8 7 133 0 8 3 8 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 35 35 0 0 47 46 45 44 35 43 35 43 39 37 0 34 0 34 40 36 20 36 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,527,l),
(67,0,l),
(152,0,l),
(152,527,l)
);
},
{
closed = 1;
nodes = (
(103,769,l),
(11,769,l),
(111,628,l),
(188,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 3 2 133 4 1 3 1 3 133 0 1 1 41 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,527,l),
(67,0,l),
(152,0,l),
(152,527,l)
);
},
{
closed = 1;
nodes = (
(127,628,l),
(227,769,l),
(135,769,l),
(50,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ograve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(282,769,l),
(190,769,l),
(290,628,l),
(367,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
0 4 5 4 133 8 1 5 0 5 133 0 3 3 0 97 6 1 0 0 49 77 7 1 2 2 1 97 0 1 1 50 1 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(311,628,l),
(411,769,l),
(319,769,l),
(234,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 4 133 0 5 0 5 133 0 3 3 0 97 6 1 0 0 49 77 7 1 2 2 1 97 0 1 1 50 1 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(134,606,l),
(219,606,l),
(297,702,l),
(375,606,l),
(461,606,l),
(327,769,l),
(267,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
43 1 4 6 1 76 9 1 6 4 6 133 5 1 4 0 4 133 0 3 3 0 97 7 1 0 0 49 77 8 1 2 2 1 97 0 1 1 50 1 78 40 40 21 20 1 0 40 46 40 46 45 44 42 41 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(274,769,l),
(182,769,l),
(282,628,l),
(359,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 4 5 4 133 7 1 5 1 5 133 3 1 1 1 41 77 6 1 0 0 2 98 0 2 2 50 2 78 18 18 1 0 18 21 18 21 20 19 14 13 10 8 5 4 0 17 1 17 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(301,628,l),
(401,769,l),
(309,769,l),
(224,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 5 4 133 0 5 1 5 133 3 1 1 1 41 77 6 1 0 0 2 98 0 2 2 50 2 78 1 0 21 20 19 18 14 13 10 8 5 4 0 17 1 17 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(124,606,l),
(209,606,l),
(287,702,l),
(365,606,l),
(451,606,l),
(317,769,l),
(257,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
21 1 4 6 1 76 8 1 6 4 6 133 5 1 4 1 4 133 3 1 1 1 41 77 7 1 0 0 2 98 0 2 2 50 2 78 18 18 1 0 18 24 18 24 23 22 20 19 14 13 10 8 5 4 0 17 1 17 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,274,ls),
(445,236,o),
(432,164,o),
(413,134,qs),
(396,105,o),
(333,67,o),
(288,67,qs),
(243,67,o),
(189,100,o),
(161,154,o),
(152,224,o),
(152,260,qs),
(152,527,l),
(67,527,l),
(67,236,ls),
(67,182,o),
(87,93,o),
(134,29,o),
(213,-7,o),
(273,-8,qs),
(299,-8,o),
(350,1,o),
(395,20,o),
(434,51,o),
(447,71,q),
(447,8,ls),
(447,-28,o),
(430,-90,o),
(393,-135,o),
(335,-160,o),
(294,-160,qs),
(245,-160,o),
(156,-124,o),
(117,-93,q),
(80,-160,l),
(125,-202,o),
(232,-235,o),
(299,-236,qs),
(410,-236,o),
(530,-115,o),
(530,0,qs),
(530,527,l),
(445,527,l)
);
},
{
closed = 1;
nodes = (
(320,628,l),
(420,769,l),
(328,769,l),
(243,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
17 1 4 3 8 1 1 2 2 76 7 1 1 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 6 7 6 133 0 7 3 7 133 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 7 6 133 0 7 3 7 133 0 1 0 0 1 0 101 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 46 45 44 43 0 42 0 42 37 21 41 37 35 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(344,927,l),
(252,927,l),
(352,786,l),
(429,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 4 5 4 133 7 1 5 1 5 133 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 29 26 29 28 27 0 25 0 25 37 21 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(375,786,l),
(475,927,l),
(383,927,l),
(298,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 5 4 133 0 5 1 5 133 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 29 28 27 26 0 25 0 25 37 21 37 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(199,786,l),
(284,786,l),
(362,882,l),
(440,786,l),
(526,786,l),
(392,949,l),
(332,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
29 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 1 6 4 1 128 8 1 6 6 44 77 7 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
8 1 6 4 6 133 5 1 4 1 4 133 7 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
26 26 0 0 26 32 26 32 31 30 28 27 0 25 0 25 37 21 37 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,707,l),
(14,707,l),
(264,265,l),
(264,0,l),
(351,0,l),
(351,266,l),
(600,707,l),
(501,707,l),
(309,353,l)
);
},
{
closed = 1;
nodes = (
(323,786,l),
(423,927,l),
(331,927,l),
(246,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
8 5 2 3 1 0 1 76 0 3 4 3 133 0 4 0 4 133 2 1 0 0 38 77 0 1 1 39 1 78 17 18 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,274,ls),
(445,236,o),
(432,164,o),
(413,134,qs),
(396,105,o),
(333,67,o),
(288,67,qs),
(243,67,o),
(189,100,o),
(161,154,o),
(152,224,o),
(152,260,qs),
(152,527,l),
(67,527,l),
(67,236,ls),
(67,182,o),
(87,93,o),
(134,29,o),
(213,-7,o),
(273,-8,qs),
(299,-8,o),
(350,1,o),
(395,20,o),
(434,51,o),
(447,71,q),
(447,8,ls),
(447,-28,o),
(430,-90,o),
(393,-135,o),
(335,-160,o),
(294,-160,qs),
(245,-160,o),
(156,-124,o),
(117,-93,q),
(80,-160,l),
(125,-202,o),
(232,-235,o),
(299,-236,qs),
(410,-236,o),
(530,-115,o),
(530,0,qs),
(530,527,l),
(445,527,l)
);
},
{
closed = 1;
nodes = (
(130,676,o),
(130,651,qs),
(130,626,o),
(163,595,o),
(187,595,qs),
(212,595,o),
(245,626,o),
(245,651,qs),
(245,676,o),
(212,707,o),
(187,707,qs),
(163,707,o)
);
},
{
closed = 1;
nodes = (
(356,676,o),
(356,651,qs),
(356,626,o),
(388,595,o),
(412,595,qs),
(437,595,o),
(470,626,o),
(470,651,qs),
(470,676,o),
(437,707,o),
(412,707,qs),
(388,707,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
17 1 4 3 8 1 1 2 2 76 7 1 1 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 7 6 97 12 8 11 3 6 6 38 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 0 1 0 101 9 1 7 7 6 97 12 8 11 3 6 6 38 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
56 55 44 43 0 0 62 60 55 66 56 66 50 48 43 54 44 54 0 42 0 42 37 21 41 37 35 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = aring;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
},
{
closed = 1;
nodes = (
(185,718,o),
(185,674,qs),
(185,630,o),
(239,579,o),
(283,579,qs),
(326,579,o),
(382,630,o),
(382,674,qs),
(382,717,o),
(328,775,o),
(284,775,qs),
(240,775,o)
);
},
{
closed = 1;
nodes = (
(240,656,o),
(240,676,qs),
(240,696,o),
(263,721,o),
(283,721,qs),
(303,721,o),
(326,696,o),
(326,676,qs),
(326,656,o),
(303,631,o),
(283,631,qs),
(263,631,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 3 2 1 2 3 1 128 13 1 8 0 11 10 8 11 105 14 1 10 0 9 4 10 9 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 3 2 1 2 3 1 128 13 1 8 0 11 10 8 11 105 14 1 10 0 9 4 10 9 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
64 63 52 51 38 36 70 68 63 74 64 74 58 56 51 62 52 62 47 45 36 50 38 50 21 36 18 34 40 36 15 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
},
{
closed = 1;
nodes = (
(416,638,o),
(439,674,o),
(448,721,o),
(449,745,q),
(379,745,l),
(379,737,o),
(379,713,o),
(373,692,o),
(360,677,o),
(348,677,qs),
(336,677,o),
(310,700,o),
(279,727,o),
(241,750,o),
(216,750,qs),
(186,750,o),
(147,728,o),
(125,691,o),
(116,644,o),
(116,620,q),
(185,620,l),
(185,628,o),
(186,651,o),
(191,672,o),
(203,687,o),
(215,687,qs),
(227,687,o),
(253,664,o),
(284,637,o),
(322,615,o),
(347,615,qs),
(377,615,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
78 1 9 10 62 1 8 11 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 2 1 2 3 1 128 0 10 0 9 11 10 9 105 0 11 13 1 8 4 11 8 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 3 2 1 2 3 1 128 0 10 0 9 11 10 9 105 0 11 13 1 8 4 11 8 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
52 51 38 36 73 71 68 66 57 55 51 82 52 82 47 45 36 50 38 50 21 36 18 34 40 36 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = edieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
},
{
closed = 1;
nodes = (
(116,676,o),
(116,651,qs),
(116,626,o),
(149,595,o),
(173,595,qs),
(198,595,o),
(231,626,o),
(231,651,qs),
(231,676,o),
(198,707,o),
(173,707,qs),
(149,707,o)
);
},
{
closed = 1;
nodes = (
(342,676,o),
(342,651,qs),
(342,626,o),
(374,595,o),
(398,595,qs),
(423,595,o),
(456,626,o),
(456,651,qs),
(456,676,o),
(423,707,o),
(398,707,qs),
(374,707,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
0 1 4 0 4 1 0 128 12 1 6 11 1 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 38 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 57 56 45 44 35 35 0 0 63 61 56 67 57 67 51 49 44 55 45 55 35 43 35 43 39 37 0 34 0 34 40 36 20 36 15 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = otilde;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(431,638,o),
(454,674,o),
(463,721,o),
(464,745,q),
(394,745,l),
(394,737,o),
(394,713,o),
(388,692,o),
(375,677,o),
(363,677,qs),
(351,677,o),
(325,700,o),
(294,727,o),
(256,750,o),
(231,750,qs),
(201,750,o),
(162,728,o),
(140,691,o),
(131,644,o),
(131,620,q),
(200,620,l),
(200,628,o),
(201,651,o),
(206,672,o),
(218,687,o),
(230,687,qs),
(242,687,o),
(268,664,o),
(299,637,o),
(337,615,o),
(362,615,qs),
(392,615,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
67 1 5 6 51 1 4 7 2 76 0 6 0 5 7 6 5 105 0 7 10 1 4 0 7 4 105 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 50 1 78 41 40 21 20 1 0 62 60 57 55 46 44 40 71 41 71 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,527,l),
(74,527,l),
(74,0,l),
(159,0,l)
);
},
{
closed = 1;
nodes = (
(-8,678,o),
(-8,655,qs),
(-8,631,o),
(22,601,o),
(45,601,qs),
(68,601,o),
(99,631,o),
(99,655,qs),
(99,678,o),
(68,707,o),
(45,707,qs),
(22,707,o)
);
},
{
closed = 1;
nodes = (
(135,678,o),
(135,655,qs),
(135,631,o),
(164,601,o),
(188,601,qs),
(211,601,o),
(241,631,o),
(241,655,qs),
(241,678,o),
(211,707,o),
(188,707,qs),
(165,707,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
5 1 3 3 2 97 8 4 7 3 2 2 38 77 0 0 0 41 77 6 1 1 1 39 1 78 17 16 5 4 0 0 23 21 16 27 17 27 11 9 4 15 5 15 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,241,ls),
(152,281,o),
(168,360,o),
(191,393,qs),
(210,419,o),
(273,457,o),
(314,458,qs),
(356,458,o),
(406,426,o),
(433,373,o),
(442,305,o),
(442,268,qs),
(442,0,l),
(527,0,l),
(527,291,ls),
(527,342,o),
(507,431,o),
(461,496,o),
(383,533,o),
(326,533,qs),
(302,533,o),
(251,523,o),
(205,501,o),
(166,469,o),
(153,447,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(433,638,o),
(456,674,o),
(465,721,o),
(466,745,q),
(396,745,l),
(396,737,o),
(396,713,o),
(390,692,o),
(377,677,o),
(365,677,qs),
(353,677,o),
(327,700,o),
(296,727,o),
(258,750,o),
(233,750,qs),
(203,750,o),
(164,728,o),
(142,691,o),
(133,644,o),
(133,620,q),
(202,620,l),
(202,628,o),
(203,651,o),
(208,672,o),
(220,687,o),
(232,687,qs),
(244,687,o),
(270,664,o),
(301,637,o),
(339,615,o),
(364,615,qs),
(394,615,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
56 1 6 7 40 1 5 8 3 1 2 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 0 6 8 7 6 105 0 8 10 1 5 0 8 5 105 0 3 3 0 97 1 1 0 0 41 77 9 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 6 8 7 6 105 0 8 10 1 5 1 8 5 105 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 9 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
30 29 0 0 51 49 46 44 35 33 29 60 30 60 0 28 0 28 37 21 37 17 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(159,869,o),
(159,844,qs),
(159,819,o),
(192,788,o),
(216,788,qs),
(241,788,o),
(274,819,o),
(274,844,qs),
(274,869,o),
(241,900,o),
(216,900,qs),
(192,900,o)
);
},
{
closed = 1;
nodes = (
(385,869,o),
(385,844,qs),
(385,819,o),
(417,788,o),
(441,788,qs),
(466,788,o),
(499,819,o),
(499,844,qs),
(499,869,o),
(466,900,o),
(441,900,qs),
(417,900,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 8 10 3 6 9 1 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 25 24 13 12 31 29 24 35 25 35 19 17 12 23 13 23 17 17 17 17 17 16 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(-30,869,o),
(-30,844,qs),
(-30,819,o),
(3,788,o),
(27,788,qs),
(52,788,o),
(85,819,o),
(85,844,qs),
(85,869,o),
(52,900,o),
(27,900,qs),
(3,900,o)
);
},
{
closed = 1;
nodes = (
(176,869,o),
(176,844,qs),
(176,819,o),
(208,788,o),
(232,788,qs),
(257,788,o),
(290,819,o),
(290,844,qs),
(290,869,o),
(257,900,o),
(232,900,qs),
(208,900,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = oslash;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,521,l),
(348,533,o),
(299,533,qs),
(234,533,o),
(139,492,o),
(77,420,o),
(47,321,o),
(47,263,qs),
(47,191,o),
(92,75,o),
(139,41,q),
(71,-91,l),
(158,-91,l),
(208,6,l),
(247,-6,o),
(297,-6,qs),
(361,-6,o),
(456,36,o),
(518,108,o),
(548,206,o),
(548,263,qs),
(548,329,o),
(504,446,o),
(455,484,q),
(524,618,l),
(437,618,l)
);
},
{
closed = 1;
nodes = (
(244,76,q),
(415,408,l),
(463,350,o),
(463,263,qs),
(463,224,o),
(444,153,o),
(404,100,o),
(341,69,o),
(297,69,qs),
(266,69,o)
);
},
{
closed = 1;
nodes = (
(350,449,q),
(178,116,l),
(153,141,o),
(132,221,o),
(132,263,qs),
(132,305,o),
(152,376,o),
(192,428,o),
(255,457,o),
(297,457,qs),
(324,457,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
24 1 2 5 2 45 44 34 33 4 4 5 14 11 2 0 4 3 76 6 1 3 2 3 133 0 1 0 1 134 8 1 5 5 2 97 0 2 2 49 77 7 1 4 4 0 97 0 0 0 50 0 78 37 36 27 26 0 0 36 46 37 46 26 35 27 35 0 25 0 25 40 18 40 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,707,l),
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(566,0,l),
(660,0,l)
);
},
{
closed = 1;
nodes = (
(189,231,l),
(335,631,l),
(481,231,l)
);
},
{
closed = 1;
nodes = (
(494,813,l),
(494,887,l),
(175,887,l),
(175,813,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 0 6 2 5 6 103 0 4 0 0 1 4 0 104 0 2 2 38 77 7 3 2 1 1 39 1 78 0 0 14 13 12 11 10 9 0 7 0 7 17 17 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(419,0,l)
);
},
{
closed = 1;
nodes = (
(407,212,ls),
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(290,238,o),
(314,238,qs),
(407,238,l)
);
},
{
closed = 1;
nodes = (
(443,633,l),
(443,707,l),
(124,707,l),
(124,633,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 9 9 8 95 0 8 8 38 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 9 9 8 95 0 8 8 38 77 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
38 36 54 53 52 51 47 45 36 50 38 50 21 36 18 34 40 36 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(668,-217,o),
(686,-207,q),
(672,-148,l),
(648,-160,o),
(624,-160,qs),
(595,-160,o),
(560,-129,o),
(560,-101,qs),
(560,-84,o),
(575,-53,o),
(598,-28,o),
(613,-16,qs),
(624,-7,o),
(636,0,q),
(660,0,l),
(398,707,l),
(273,707,l),
(10,0,l),
(104,0,l),
(160,152,l),
(510,152,l),
(564,6,l),
(537,-9,o),
(515,-34,qs),
(486,-66,o),
(486,-111,qs),
(486,-162,o),
(554,-223,o),
(615,-224,qs),
(635,-224,o)
);
},
{
closed = 1;
nodes = (
(189,231,l),
(335,631,l),
(481,231,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
7 1 2 1 26 1 5 2 27 1 0 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 6 0 1 2 6 1 104 0 3 3 38 77 4 1 2 2 39 77 0 5 5 0 97 7 1 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 1 2 6 1 104 0 5 7 1 0 5 0 101 0 3 3 38 77 4 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 32 31 25 23 15 14 13 12 11 10 9 8 0 29 1 29 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,-217,o),
(530,-207,q),
(516,-148,l),
(492,-160,o),
(468,-160,qs),
(439,-160,o),
(404,-129,o),
(404,-101,qs),
(404,-84,o),
(419,-53,o),
(442,-28,o),
(457,-16,qs),
(468,-7,o),
(480,0,q),
(490,0,l),
(490,285,ls),
(490,341,o),
(470,431,o),
(420,494,o),
(339,533,o),
(280,533,qs),
(246,533,o),
(178,517,o),
(120,484,o),
(78,433,o),
(71,397,q),
(162,397,l),
(174,429,o),
(238,457,o),
(280,457,qs),
(349,455,o),
(407,376,o),
(407,309,q),
(252,309,ls),
(211,309,o),
(138,294,o),
(82,256,o),
(49,195,o),
(49,150,qs),
(49,112,o),
(80,52,o),
(133,12,o),
(199,-6,o),
(236,-6,qs),
(259,-6,o),
(306,0,o),
(353,16,o),
(397,44,o),
(414,67,q),
(418,11,l),
(385,-5,o),
(359,-34,qs),
(330,-66,o),
(330,-111,qs),
(330,-162,o),
(398,-223,o),
(459,-224,qs),
(479,-224,o)
);
},
{
closed = 1;
nodes = (
(406,142,o),
(319,69,o),
(244,69,qs),
(223,69,o),
(183,79,o),
(152,101,o),
(134,133,o),
(134,156,qs),
(134,187,o),
(169,225,o),
(227,238,o),
(258,238,qs),
(407,238,l),
(407,212,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
8 1 1 9 54 1 7 1 55 1 0 7 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
8 1 6 9 54 1 7 1 55 1 0 7 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 2 3 4 2 128 0 2 0 8 9 2 8 103 0 3 3 5 97 0 5 5 49 77 0 9 9 1 97 6 1 1 1 50 77 0 7 7 0 97 10 1 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 3 2 3 4 2 128 0 2 0 8 9 2 8 103 0 7 10 1 0 7 0 101 0 3 3 5 97 0 5 5 49 77 0 9 9 1 97 6 1 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 4 3 2 3 4 2 128 0 2 0 8 9 2 8 103 0 7 10 1 0 7 0 101 0 3 3 5 97 0 5 5 49 77 0 6 6 39 77 0 9 9 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 69 67 60 58 53 51 43 42 37 35 31 30 28 26 24 22 14 12 0 57 1 57 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,574,o),
(561,522,q),
(649,522,l),
(639,565,o),
(595,636,o),
(526,687,o),
(433,715,o),
(375,715,qs),
(292,715,o),
(170,660,o),
(88,563,o),
(48,431,o),
(48,353,qs),
(48,274,o),
(88,142,o),
(169,46,o),
(291,-8,o),
(373,-8,qs),
(491,-8,o),
(639,97,o),
(662,185,q),
(567,185,l),
(552,133,o),
(450,71,o),
(375,71,qs),
(313,71,o),
(223,116,o),
(165,193,o),
(137,297,o),
(137,356,qs),
(137,411,o),
(163,512,o),
(220,590,o),
(309,636,o),
(372,636,qs),
(447,636,o)
);
},
{
closed = 1;
nodes = (
(378,786,l),
(478,927,l),
(386,927,l),
(301,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
0 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 1 0 39 38 37 36 33 32 28 26 18 16 14 13 11 9 0 35 1 35 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,12,o),
(463,51,o),
(504,110,o),
(512,151,q),
(424,151,l),
(418,128,o),
(392,96,o),
(357,77,o),
(316,69,o),
(295,69,qs),
(252,69,o),
(190,100,o),
(151,153,o),
(132,223,o),
(132,262,qs),
(132,299,o),
(150,370,o),
(189,424,o),
(254,457,o),
(297,457,qs),
(341,458,o),
(406,420,o),
(421,376,q),
(508,376,l),
(499,419,o),
(459,479,o),
(404,516,o),
(342,533,o),
(302,533,qs),
(235,533,o),
(141,490,o),
(79,417,o),
(47,318,o),
(47,262,qs),
(47,204,o),
(77,106,o),
(137,34,o),
(229,-6,o),
(292,-6,qs),
(331,-6,o)
);
},
{
closed = 1;
nodes = (
(305,628,l),
(405,769,l),
(313,769,l),
(228,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
0 6 7 6 133 0 7 1 7 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 50 0 78 1 0 43 42 41 40 35 34 30 28 20 18 16 15 11 9 0 39 1 39 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,574,o),
(561,522,q),
(649,522,l),
(639,565,o),
(595,636,o),
(526,687,o),
(433,715,o),
(375,715,qs),
(292,715,o),
(170,660,o),
(88,563,o),
(48,431,o),
(48,353,qs),
(48,274,o),
(88,142,o),
(169,46,o),
(291,-8,o),
(373,-8,qs),
(491,-8,o),
(639,97,o),
(662,185,q),
(567,185,l),
(552,133,o),
(450,71,o),
(375,71,qs),
(313,71,o),
(223,116,o),
(165,193,o),
(137,297,o),
(137,356,qs),
(137,411,o),
(163,512,o),
(220,590,o),
(309,636,o),
(372,636,qs),
(447,636,o)
);
},
{
closed = 1;
nodes = (
(208,786,l),
(293,786,l),
(371,882,l),
(449,786,l),
(535,786,l),
(401,949,l),
(341,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
39 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 6 8 4 8 6 4 128 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 10 1 8 8 44 77 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 1 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
36 36 1 0 36 42 36 42 41 40 38 37 33 32 28 26 18 16 14 13 11 9 0 35 1 35 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,12,o),
(463,51,o),
(504,110,o),
(512,151,q),
(424,151,l),
(418,128,o),
(392,96,o),
(357,77,o),
(316,69,o),
(295,69,qs),
(252,69,o),
(190,100,o),
(151,153,o),
(132,223,o),
(132,262,qs),
(132,299,o),
(150,370,o),
(189,424,o),
(254,457,o),
(297,457,qs),
(341,458,o),
(406,420,o),
(421,376,q),
(508,376,l),
(499,419,o),
(459,479,o),
(404,516,o),
(342,533,o),
(302,533,qs),
(235,533,o),
(141,490,o),
(79,417,o),
(47,318,o),
(47,262,qs),
(47,204,o),
(77,106,o),
(137,34,o),
(229,-6,o),
(292,-6,qs),
(331,-6,o)
);
},
{
closed = 1;
nodes = (
(128,606,l),
(213,606,l),
(291,702,l),
(369,606,l),
(455,606,l),
(321,769,l),
(261,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
43 1 6 8 1 76 10 1 8 6 8 133 7 1 6 1 6 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 50 0 78 40 40 1 0 40 46 40 46 45 44 42 41 35 34 30 28 20 18 16 15 11 9 0 39 1 39 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,574,o),
(561,522,q),
(649,522,l),
(639,565,o),
(595,636,o),
(526,687,o),
(433,715,o),
(375,715,qs),
(292,715,o),
(170,660,o),
(88,563,o),
(48,431,o),
(48,353,qs),
(48,274,o),
(88,142,o),
(169,46,o),
(291,-8,o),
(373,-8,qs),
(491,-8,o),
(639,97,o),
(662,185,q),
(567,185,l),
(552,133,o),
(450,71,o),
(375,71,qs),
(313,71,o),
(223,116,o),
(165,193,o),
(137,297,o),
(137,356,qs),
(137,411,o),
(163,512,o),
(220,590,o),
(309,636,o),
(372,636,qs),
(447,636,o)
);
},
{
closed = 1;
nodes = (
(314,867,o),
(314,842,qs),
(314,817,o),
(345,785,o),
(371,785,qs),
(395,785,o),
(429,817,o),
(429,842,qs),
(429,866,o),
(394,899,o),
(371,898,qs),
(346,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 6 0 7 4 6 7 105 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 37 36 1 0 43 41 36 47 37 47 33 32 28 26 18 16 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,12,o),
(463,51,o),
(504,110,o),
(512,151,q),
(424,151,l),
(418,128,o),
(392,96,o),
(357,77,o),
(316,69,o),
(295,69,qs),
(252,69,o),
(190,100,o),
(151,153,o),
(132,223,o),
(132,262,qs),
(132,299,o),
(150,370,o),
(189,424,o),
(254,457,o),
(297,457,qs),
(341,458,o),
(406,420,o),
(421,376,q),
(508,376,l),
(499,419,o),
(459,479,o),
(404,516,o),
(342,533,o),
(302,533,qs),
(235,533,o),
(141,490,o),
(79,417,o),
(47,318,o),
(47,262,qs),
(47,204,o),
(77,106,o),
(137,34,o),
(229,-6,o),
(292,-6,qs),
(331,-6,o)
);
},
{
closed = 1;
nodes = (
(234,686,o),
(234,661,qs),
(234,636,o),
(265,604,o),
(291,604,qs),
(315,604,o),
(349,636,o),
(349,661,qs),
(349,685,o),
(314,718,o),
(291,717,qs),
(266,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 7 7 6 97 9 1 6 6 46 77 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 50 0 78 41 40 1 0 47 45 40 51 41 51 35 34 30 28 20 18 16 15 11 9 0 39 1 39 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,574,o),
(561,522,q),
(649,522,l),
(639,565,o),
(595,636,o),
(526,687,o),
(433,715,o),
(375,715,qs),
(292,715,o),
(170,660,o),
(88,563,o),
(48,431,o),
(48,353,qs),
(48,274,o),
(88,142,o),
(169,46,o),
(291,-8,o),
(373,-8,qs),
(491,-8,o),
(639,97,o),
(662,185,q),
(567,185,l),
(552,133,o),
(450,71,o),
(375,71,qs),
(313,71,o),
(223,116,o),
(165,193,o),
(137,297,o),
(137,356,qs),
(137,411,o),
(163,512,o),
(220,590,o),
(309,636,o),
(372,636,qs),
(447,636,o)
);
},
{
closed = 1;
nodes = (
(532,949,l),
(447,949,l),
(369,853,l),
(291,949,l),
(204,949,l),
(339,786,l),
(398,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
39 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 6 4 6 8 4 128 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 7 1 6 6 44 77 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
7 1 6 8 6 133 10 1 8 4 8 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
36 36 1 0 36 42 36 42 41 40 38 37 33 32 28 26 18 16 14 13 11 9 0 35 1 35 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,12,o),
(463,51,o),
(504,110,o),
(512,151,q),
(424,151,l),
(418,128,o),
(392,96,o),
(357,77,o),
(316,69,o),
(295,69,qs),
(252,69,o),
(190,100,o),
(151,153,o),
(132,223,o),
(132,262,qs),
(132,299,o),
(150,370,o),
(189,424,o),
(254,457,o),
(297,457,qs),
(341,458,o),
(406,420,o),
(421,376,q),
(508,376,l),
(499,419,o),
(459,479,o),
(404,516,o),
(342,533,o),
(302,533,qs),
(235,533,o),
(141,490,o),
(79,417,o),
(47,318,o),
(47,262,qs),
(47,204,o),
(77,106,o),
(137,34,o),
(229,-6,o),
(292,-6,qs),
(331,-6,o)
);
},
{
closed = 1;
nodes = (
(462,769,l),
(377,769,l),
(299,673,l),
(221,769,l),
(134,769,l),
(269,606,l),
(328,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
43 1 8 6 1 76 10 1 8 6 1 6 8 1 128 0 5 2 4 2 5 4 128 7 1 6 0 2 5 6 2 103 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 50 0 78 40 40 1 0 40 46 40 46 45 44 42 41 35 34 30 28 20 18 16 15 11 9 0 39 1 39 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,0,ls),
(421,0,o),
(545,51,o),
(628,144,o),
(670,274,o),
(671,353,qs),
(671,432,o),
(629,563,o),
(545,656,o),
(420,707,o),
(338,707,qs),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(400,628,o),
(492,586,o),
(552,514,o),
(582,416,o),
(582,353,qs),
(582,292,o),
(552,191,o),
(520,154,qs),
(485,112,o),
(386,79,o),
(332,79,qs),
(174,79,l),
(174,628,l),
(337,628,ls)
);
},
{
closed = 1;
nodes = (
(503,949,l),
(418,949,l),
(340,853,l),
(262,949,l),
(175,949,l),
(310,786,l),
(369,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
27 27 13 13 27 33 27 33 32 31 29 28 13 26 13 25 34 40 32 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,707,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(425,34,o),
(452,79,q),
(456,0,l),
(537,0,l),
(537,707,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,261,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
},
{
closed = 1;
nodes = (
(586,531,o),
(566,517,q),
(590,484,l),
(610,491,o),
(647,523,o),
(675,565,o),
(692,612,o),
(692,639,qs),
(692,668,o),
(679,692,qs),
(664,718,o),
(629,718,qs),
(604,718,o),
(569,688,o),
(569,660,qs),
(569,635,o),
(601,605,o),
(627,603,q),
(621,579,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
59 58 18 3 4 2 2 1 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 3 3 38 77 7 1 4 4 2 97 0 2 2 49 77 0 5 5 0 97 1 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 6 6 48 77 0 3 3 38 77 7 1 4 4 2 97 0 2 2 49 77 0 5 5 0 97 1 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 6 6 48 77 0 3 3 38 77 7 1 4 4 2 97 0 2 2 49 77 0 0 0 39 77 0 5 5 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
22 21 50 48 32 30 21 42 22 42 19 40 35 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,314,l),
(87,0,l),
(338,0,ls),
(421,0,o),
(545,51,o),
(628,144,o),
(670,274,o),
(671,353,qs),
(671,432,o),
(629,563,o),
(545,656,o),
(420,707,o),
(338,707,qs),
(87,707,l),
(87,392,l),
(9,392,l),
(9,314,l)
);
},
{
closed = 1;
nodes = (
(400,628,o),
(492,586,o),
(552,514,o),
(582,416,o),
(582,353,qs),
(582,292,o),
(552,191,o),
(520,154,qs),
(485,112,o),
(386,79,o),
(332,79,qs),
(174,79,l),
(174,314,l),
(333,314,l),
(333,392,l),
(174,392,l),
(174,628,l),
(337,628,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
4 1 0 5 1 3 6 0 3 103 8 1 7 7 1 95 0 1 1 38 77 0 6 6 2 95 0 2 2 39 2 78 17 17 17 34 17 33 33 17 18 17 40 33 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,566,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(425,34,o),
(452,79,q),
(456,0,l),
(537,0,l),
(537,566,l),
(627,566,l),
(627,639,l),
(537,639,l),
(537,707,l),
(452,707,l),
(452,639,l),
(353,639,l),
(353,566,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,261,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
26 1 8 6 10 1 9 8 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
2 1 0 7 1 3 6 0 3 103 0 1 1 38 77 10 1 8 8 6 97 0 6 6 49 77 0 9 9 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
2 1 0 7 1 3 6 0 3 103 0 1 1 38 77 10 1 8 8 6 97 0 6 6 49 77 0 4 4 39 77 0 9 9 5 97 0 5 5 50 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
30 29 40 38 29 50 30 50 19 40 35 17 17 17 17 16 11 8 30 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(487,813,l),
(487,887,l),
(168,887,l),
(168,813,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 6 0 7 0 6 7 103 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
},
{
closed = 1;
nodes = (
(453,633,l),
(453,707,l),
(134,707,l),
(134,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 95 0 7 7 38 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 35 35 0 0 47 46 45 44 35 43 35 43 39 37 0 34 0 34 40 36 20 36 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(243,879,o),
(241,914,q),
(163,914,l),
(165,849,o),
(254,781,o),
(333,781,qs),
(412,781,o),
(503,849,o),
(505,914,q),
(427,914,l),
(425,879,o),
(376,847,o),
(334,847,qs),
(292,847,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
9 1 7 6 7 133 10 1 6 0 8 0 6 8 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 13 12 23 22 20 18 16 15 12 25 13 25 17 17 17 17 17 16 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
},
{
closed = 1;
nodes = (
(205,705,o),
(203,740,q),
(125,740,l),
(127,675,o),
(216,607,o),
(295,607,qs),
(374,607,o),
(465,675,o),
(467,740,q),
(389,740,l),
(387,705,o),
(338,673,o),
(296,673,qs),
(254,673,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
10 1 8 7 8 133 0 1 4 0 4 1 0 128 13 1 7 0 9 3 7 9 105 12 1 6 11 1 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 45 44 35 35 0 0 55 54 52 50 48 47 44 57 45 57 35 43 35 43 39 37 0 34 0 34 40 36 20 36 14 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(273,867,o),
(273,842,qs),
(273,817,o),
(304,785,o),
(330,785,qs),
(354,785,o),
(388,817,o),
(388,842,qs),
(388,866,o),
(353,899,o),
(330,898,qs),
(305,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
8 1 6 0 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 13 12 19 17 12 23 13 23 17 17 17 17 17 16 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
},
{
closed = 1;
nodes = (
(237,687,o),
(237,662,qs),
(237,637,o),
(268,605,o),
(294,605,qs),
(318,605,o),
(352,637,o),
(352,662,qs),
(352,686,o),
(317,719,o),
(294,718,qs),
(269,718,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 97 11 1 7 7 48 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 45 44 35 35 0 0 51 49 44 55 45 55 35 43 35 43 39 37 0 34 0 34 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(418,-217,o),
(436,-207,q),
(422,-148,l),
(398,-160,o),
(374,-160,qs),
(345,-160,o),
(310,-129,o),
(310,-101,qs),
(310,-84,o),
(325,-53,o),
(348,-28,o),
(363,-16,qs),
(374,-7,o),
(386,0,q),
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l),
(304,0,l),
(283,-14,o),
(265,-34,qs),
(236,-66,o),
(236,-111,qs),
(236,-162,o),
(304,-223,o),
(365,-224,qs),
(385,-224,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
31 1 8 1 32 1 0 8 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 0 5 6 4 5 103 0 3 3 2 95 0 2 2 38 77 0 6 6 1 95 7 1 1 1 39 77 0 8 8 0 97 9 1 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 4 0 5 6 4 5 103 0 8 9 1 0 8 0 101 0 3 3 2 95 0 2 2 38 77 0 6 6 1 95 7 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 30 28 20 19 18 17 16 15 14 13 12 11 10 9 8 7 0 34 1 34 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(400,-217,o),
(418,-207,q),
(404,-148,l),
(380,-160,o),
(356,-160,qs),
(327,-160,o),
(292,-129,o),
(292,-101,qs),
(292,-84,o),
(307,-53,o),
(330,-28,o),
(344,-16,qs),
(359,-3,o),
(375,4,q),
(407,12,o),
(433,29,qs),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l),
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(185,14,qs),
(225,-3,o),
(277,-5,q),
(261,-18,o),
(247,-34,qs),
(218,-66,o),
(218,-111,qs),
(218,-162,o),
(286,-223,o),
(347,-224,qs),
(367,-224,o)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
54 1 6 1 55 1 0 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 5 3 4 3 5 4 128 10 1 8 0 3 5 8 3 103 0 7 7 2 97 0 2 2 49 77 0 4 4 1 97 0 1 1 50 77 0 6 6 0 97 9 1 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 5 3 4 3 5 4 128 10 1 8 0 3 5 8 3 103 0 6 9 1 0 6 0 101 0 7 7 2 97 0 2 2 49 77 0 4 4 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
58 58 1 0 58 66 58 66 62 60 53 51 38 37 33 31 27 26 19 17 8 7 0 57 1 57 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,310,l),
(523,310,l),
(523,390,l),
(174,390,l),
(174,628,l),
(562,628,l),
(562,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(497,949,l),
(412,949,l),
(334,853,l),
(256,949,l),
(169,949,l),
(304,786,l),
(363,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 8 6 0 6 8 0 128 0 2 0 3 4 2 3 103 7 1 6 6 44 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
7 1 6 8 6 133 9 1 8 0 8 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
12 12 12 18 12 18 18 18 17 17 17 17 17 16 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,241,o),
(526,259,o),
(526,268,qs),
(528,308,o),
(505,402,o),
(449,483,o),
(357,533,o),
(294,533,qs),
(232,533,o),
(142,493,o),
(80,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(77,105,o),
(139,34,o),
(232,-6,o),
(295,-6,qs),
(332,-6,o),
(404,11,o),
(463,47,o),
(506,103,o),
(515,141,q),
(428,141,l),
(421,121,o),
(393,93,o),
(357,76,o),
(316,69,o),
(297,69,qs),
(258,69,o),
(199,94,o),
(159,138,o),
(136,197,o),
(133,232,q),
(524,232,l)
);
},
{
closed = 1;
nodes = (
(138,336,o),
(160,391,o),
(198,433,o),
(254,457,o),
(291,457,qs),
(358,457,o),
(438,373,o),
(440,306,q),
(135,306,l)
);
},
{
closed = 1;
nodes = (
(460,769,l),
(375,769,l),
(297,673,l),
(219,769,l),
(132,769,l),
(267,606,l),
(326,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
47 1 9 7 1 76 8 1 7 9 7 133 12 1 9 3 9 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 44 44 35 35 0 0 44 50 44 50 49 48 46 45 35 43 35 43 39 37 0 34 0 34 40 36 20 36 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,574,o),
(559,522,q),
(654,522,l),
(631,610,o),
(487,715,o),
(370,715,qs),
(287,715,o),
(166,659,o),
(87,562,o),
(48,429,o),
(48,351,qs),
(48,273,o),
(87,141,o),
(168,46,o),
(289,-8,o),
(372,-8,qs),
(441,-8,o),
(550,36,o),
(590,74,qs),
(611,95,o),
(642,148,o),
(662,207,o),
(672,269,o),
(672,298,qs),
(672,357,l),
(357,357,l),
(357,278,l),
(589,278,l),
(589,233,o),
(563,159,o),
(532,127,qs),
(479,71,o),
(373,71,qs),
(311,71,o),
(222,115,o),
(165,192,o),
(137,294,o),
(137,353,qs),
(137,412,o),
(163,515,o),
(219,592,o),
(307,636,o),
(369,636,qs),
(444,636,o)
);
},
{
closed = 1;
nodes = (
(205,786,l),
(290,786,l),
(368,882,l),
(446,786,l),
(532,786,l),
(398,949,l),
(338,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
47 1 7 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
8 1 7 9 5 9 7 5 128 0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 11 1 9 9 44 77 10 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
11 1 9 7 9 133 8 1 7 5 7 133 0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 10 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
44 44 1 0 44 50 44 50 49 48 46 45 41 40 38 36 28 26 18 17 16 15 11 9 0 43 1 43 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,527,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(426,33,o),
(452,79,q),
(452,6,ls),
(452,-30,o),
(435,-91,o),
(399,-135,o),
(341,-160,o),
(301,-160,qs),
(280,-160,o),
(236,-152,o),
(198,-133,o),
(169,-102,o),
(163,-79,q),
(75,-79,l),
(83,-120,o),
(124,-179,o),
(183,-218,o),
(256,-236,o),
(296,-236,qs),
(417,-236,o),
(537,-108,o),
(537,4,qs),
(537,527,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,263,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
},
{
closed = 1;
nodes = (
(132,606,l),
(217,606,l),
(295,702,l),
(373,606,l),
(459,606,l),
(325,769,l),
(265,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
64 1 8 10 36 1 6 4 20 1 7 6 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
64 1 8 10 36 1 6 5 20 1 7 6 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 1 3 2 3 1 2 128 11 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 11 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 5 5 41 77 11 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
61 61 40 39 61 67 61 67 66 65 63 62 50 48 39 60 40 60 19 40 39 36 20 34 13 8 28 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,574,o),
(559,522,q),
(654,522,l),
(631,610,o),
(487,715,o),
(370,715,qs),
(287,715,o),
(166,659,o),
(87,562,o),
(48,429,o),
(48,351,qs),
(48,273,o),
(87,141,o),
(168,46,o),
(289,-8,o),
(372,-8,qs),
(441,-8,o),
(550,36,o),
(590,74,qs),
(611,95,o),
(642,148,o),
(662,207,o),
(672,269,o),
(672,298,qs),
(672,357,l),
(357,357,l),
(357,278,l),
(589,278,l),
(589,233,o),
(563,159,o),
(532,127,qs),
(479,71,o),
(373,71,qs),
(311,71,o),
(222,115,o),
(165,192,o),
(137,294,o),
(137,353,qs),
(137,412,o),
(163,515,o),
(219,592,o),
(307,636,o),
(369,636,qs),
(444,636,o)
);
},
{
closed = 1;
nodes = (
(276,892,o),
(274,927,q),
(196,927,l),
(198,862,o),
(287,794,o),
(366,794,qs),
(445,794,o),
(536,862,o),
(538,927,q),
(460,927,l),
(458,892,o),
(409,860,o),
(367,860,qs),
(325,860,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
10 1 8 7 8 133 0 6 0 3 0 6 3 128 12 1 7 0 9 5 7 9 105 0 3 0 2 1 3 2 104 11 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 45 44 1 0 55 54 52 50 48 47 44 57 45 57 41 40 38 36 28 26 18 17 16 15 11 9 0 43 1 43 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,527,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(426,33,o),
(452,79,q),
(452,6,ls),
(452,-30,o),
(435,-91,o),
(399,-135,o),
(341,-160,o),
(301,-160,qs),
(280,-160,o),
(236,-152,o),
(198,-133,o),
(169,-102,o),
(163,-79,q),
(75,-79,l),
(83,-120,o),
(124,-179,o),
(183,-218,o),
(256,-236,o),
(296,-236,qs),
(417,-236,o),
(537,-108,o),
(537,4,qs),
(537,527,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,263,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
},
{
closed = 1;
nodes = (
(208,705,o),
(206,740,q),
(128,740,l),
(130,675,o),
(219,607,o),
(298,607,qs),
(377,607,o),
(468,675,o),
(470,740,q),
(392,740,l),
(390,705,o),
(341,673,o),
(299,673,qs),
(257,673,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 4 20 1 7 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 5 20 1 7 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
11 1 9 8 9 133 0 1 3 2 3 1 2 128 13 1 8 0 10 4 8 10 105 12 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
11 1 9 8 9 133 0 1 3 2 3 1 2 128 13 1 8 0 10 4 8 10 105 0 2 0 0 2 0 101 12 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 8 9 133 0 1 3 2 3 1 2 128 13 1 8 0 10 4 8 10 105 0 2 0 0 2 0 101 0 5 5 41 77 12 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
62 61 40 39 72 71 69 67 65 64 61 74 62 74 50 48 39 60 40 60 19 40 39 36 20 34 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,574,o),
(559,522,q),
(654,522,l),
(631,610,o),
(487,715,o),
(370,715,qs),
(287,715,o),
(166,659,o),
(87,562,o),
(48,429,o),
(48,351,qs),
(48,273,o),
(87,141,o),
(168,46,o),
(289,-8,o),
(372,-8,qs),
(441,-8,o),
(550,36,o),
(590,74,qs),
(611,95,o),
(642,148,o),
(662,207,o),
(672,269,o),
(672,298,qs),
(672,357,l),
(357,357,l),
(357,278,l),
(589,278,l),
(589,233,o),
(563,159,o),
(532,127,qs),
(479,71,o),
(373,71,qs),
(311,71,o),
(222,115,o),
(165,192,o),
(137,294,o),
(137,353,qs),
(137,412,o),
(163,515,o),
(219,592,o),
(307,636,o),
(369,636,qs),
(444,636,o)
);
},
{
closed = 1;
nodes = (
(312,867,o),
(312,842,qs),
(312,817,o),
(343,785,o),
(369,785,qs),
(393,785,o),
(427,817,o),
(427,842,qs),
(427,866,o),
(392,899,o),
(369,898,qs),
(344,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 6 0 3 0 6 3 128 10 1 7 0 8 5 7 8 105 0 3 0 2 1 3 2 103 9 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 45 44 1 0 51 49 44 55 45 55 41 40 38 36 28 26 18 17 16 15 11 9 0 43 1 43 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,527,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(426,33,o),
(452,79,q),
(452,6,ls),
(452,-30,o),
(435,-91,o),
(399,-135,o),
(341,-160,o),
(301,-160,qs),
(280,-160,o),
(236,-152,o),
(198,-133,o),
(169,-102,o),
(163,-79,q),
(75,-79,l),
(83,-120,o),
(124,-179,o),
(183,-218,o),
(256,-236,o),
(296,-236,qs),
(417,-236,o),
(537,-108,o),
(537,4,qs),
(537,527,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,263,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
},
{
closed = 1;
nodes = (
(231,687,o),
(231,662,qs),
(231,637,o),
(262,605,o),
(288,605,qs),
(312,605,o),
(346,637,o),
(346,662,qs),
(346,686,o),
(311,719,o),
(288,718,qs),
(263,718,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 4 20 1 7 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 5 20 1 7 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 1 3 2 3 1 2 128 0 9 9 8 97 11 1 8 8 48 77 10 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 9 9 8 97 11 1 8 8 48 77 10 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 9 9 8 97 11 1 8 8 48 77 0 5 5 41 77 10 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
62 61 40 39 68 66 61 72 62 72 50 48 39 60 40 60 19 40 39 36 20 34 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = uni0122;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,574,o),
(559,522,q),
(654,522,l),
(631,610,o),
(487,715,o),
(370,715,qs),
(287,715,o),
(166,659,o),
(87,562,o),
(48,429,o),
(48,351,qs),
(48,273,o),
(87,141,o),
(168,46,o),
(289,-8,o),
(372,-8,qs),
(441,-8,o),
(550,36,o),
(590,74,qs),
(611,95,o),
(642,148,o),
(662,207,o),
(672,269,o),
(672,298,qs),
(672,357,l),
(357,357,l),
(357,278,l),
(589,278,l),
(589,233,o),
(563,159,o),
(532,127,qs),
(479,71,o),
(373,71,qs),
(311,71,o),
(222,115,o),
(165,192,o),
(137,294,o),
(137,353,qs),
(137,412,o),
(163,515,o),
(219,592,o),
(307,636,o),
(369,636,qs),
(444,636,o)
);
},
{
closed = 1;
nodes = (
(331,-257,o),
(311,-271,q),
(335,-304,l),
(355,-297,o),
(392,-265,o),
(420,-223,o),
(437,-176,o),
(437,-149,qs),
(439,-118,o),
(407,-69,o),
(370,-70,qs),
(348,-70,o),
(314,-100,o),
(314,-128,qs),
(314,-153,o),
(346,-183,o),
(372,-185,q),
(366,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
59 58 2 7 73 0 6 0 3 0 6 3 128 0 7 4 7 134 0 3 0 2 1 3 2 103 8 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 1 0 51 49 41 40 38 36 28 26 18 17 16 15 11 9 0 43 1 43 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,527,l),
(452,461,l),
(422,499,o),
(328,533,o),
(282,533,qs),
(221,533,o),
(133,491,o),
(75,418,o),
(47,319,o),
(47,262,qs),
(47,205,o),
(74,108,o),
(130,36,o),
(218,-5,o),
(278,-6,qs),
(330,-6,o),
(426,33,o),
(452,79,q),
(452,6,ls),
(452,-30,o),
(435,-91,o),
(399,-135,o),
(341,-160,o),
(301,-160,qs),
(280,-160,o),
(236,-152,o),
(198,-133,o),
(169,-102,o),
(163,-79,q),
(75,-79,l),
(83,-120,o),
(124,-179,o),
(183,-218,o),
(256,-236,o),
(296,-236,qs),
(417,-236,o),
(537,-108,o),
(537,4,qs),
(537,527,l)
);
},
{
closed = 1;
nodes = (
(403,417,o),
(423,388,qs),
(440,362,o),
(453,302,o),
(453,266,qs),
(453,237,o),
(441,178,o),
(427,153,qs),
(407,117,o),
(341,69,o),
(290,69,qs),
(246,69,o),
(186,100,o),
(148,152,o),
(132,219,o),
(132,263,qs),
(132,303,o),
(149,374,o),
(186,426,o),
(246,457,o),
(289,457,qs),
(337,457,o)
);
},
{
closed = 1;
nodes = (
(328,787,o),
(348,801,q),
(324,834,l),
(304,827,o),
(267,795,o),
(239,753,o),
(222,705,o),
(222,679,qs),
(222,650,o),
(235,628,qs),
(252,601,o),
(287,600,qs),
(309,600,o),
(345,630,o),
(345,658,qs),
(345,683,o),
(313,713,o),
(287,715,q),
(293,739,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
36 1 6 4 20 1 7 6 2 76 77 76 2 8 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
36 1 6 5 20 1 7 6 2 76 77 76 2 8 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 8 4 8 133 0 1 3 2 3 1 2 128 9 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 9 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 5 5 41 77 9 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
40 39 68 66 50 48 39 60 40 60 19 40 39 36 20 34 10 8 28 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,707,l),
(87,707,l),
(87,0,l),
(174,0,l),
(174,307,l),
(553,307,l),
(553,0,l),
(640,0,l),
(640,707,l),
(553,707,l),
(553,387,l),
(174,387,l)
);
},
{
closed = 1;
nodes = (
(201,786,l),
(286,786,l),
(364,882,l),
(442,786,l),
(528,786,l),
(394,949,l),
(334,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 6 8 0 8 6 0 128 9 1 5 0 2 1 5 2 104 10 1 8 8 44 77 4 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
10 1 8 6 8 133 7 1 6 0 6 133 9 1 5 0 2 1 5 2 104 4 1 0 0 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 12 0 0 12 18 12 18 17 16 14 13 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,246,ls),
(152,286,o),
(167,362,o),
(190,393,qs),
(209,421,o),
(272,458,o),
(309,458,qs),
(354,458,o),
(406,423,o),
(434,369,o),
(442,300,o),
(442,264,qs),
(442,0,l),
(527,0,l),
(527,290,ls),
(527,342,o),
(508,431,o),
(461,496,o),
(384,533,o),
(327,533,qs),
(302,533,o),
(249,522,o),
(205,500,o),
(165,466,o),
(152,446,q),
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(146,764,l),
(231,764,l),
(309,860,l),
(387,764,l),
(473,764,l),
(339,927,l),
(279,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
32 1 5 7 3 1 2 3 2 76 9 1 7 5 7 133 6 1 5 0 5 133 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 29 29 0 0 29 35 29 35 34 33 31 30 0 28 0 28 37 21 37 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,510,l),
(87,0,l),
(174,0,l),
(174,307,l),
(553,307,l),
(553,0,l),
(640,0,l),
(640,510,l),
(728,510,l),
(728,584,l),
(640,584,l),
(640,707,l),
(553,707,l),
(553,584,l),
(174,584,l),
(174,707,l),
(87,707,l),
(87,584,l),
(0,584,l),
(0,510,l)
);
},
{
closed = 1;
nodes = (
(174,510,l),
(553,510,l),
(553,387,l),
(174,387,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
4 2 2 0 10 9 2 5 11 0 5 103 12 1 11 0 7 6 11 7 103 3 1 1 1 38 77 8 1 6 6 39 6 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,246,ls),
(152,286,o),
(167,362,o),
(190,393,qs),
(209,421,o),
(272,458,o),
(309,458,qs),
(354,458,o),
(406,423,o),
(434,369,o),
(442,300,o),
(442,264,qs),
(442,0,l),
(527,0,l),
(527,290,ls),
(527,342,o),
(508,431,o),
(461,496,o),
(384,533,o),
(327,533,qs),
(302,533,o),
(249,522,o),
(205,500,o),
(165,466,o),
(152,446,q),
(152,566,l),
(255,566,l),
(255,639,l),
(152,639,l),
(152,707,l),
(67,707,l),
(67,639,l),
(-16,639,l),
(-16,566,l),
(67,566,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
11 1 6 7 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 38 77 0 7 7 5 97 0 5 5 49 77 9 8 2 6 6 39 6 78 0 0 0 36 0 36 37 21 37 17 17 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(264,818,o),
(287,854,o),
(296,901,o),
(297,925,q),
(227,925,l),
(227,917,o),
(227,893,o),
(221,872,o),
(208,857,o),
(196,857,qs),
(184,857,o),
(158,880,o),
(127,907,o),
(89,930,o),
(64,930,qs),
(34,930,o),
(-5,908,o),
(-27,871,o),
(-36,824,o),
(-36,800,q),
(33,800,l),
(33,808,o),
(34,831,o),
(39,852,o),
(51,867,o),
(63,867,qs),
(75,867,o),
(101,844,o),
(132,817,o),
(170,795,o),
(195,795,qs),
(225,795,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
31 1 3 4 15 1 2 5 2 76 0 4 0 3 5 4 3 105 0 5 6 1 2 1 5 2 105 0 1 1 38 77 0 0 0 39 0 78 5 4 26 24 21 19 10 8 4 35 5 35 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,527,l),
(77,0,l),
(162,0,l),
(162,527,l)
);
},
{
closed = 1;
nodes = (
(261,638,o),
(284,674,o),
(293,721,o),
(294,745,q),
(224,745,l),
(224,737,o),
(224,713,o),
(218,692,o),
(205,677,o),
(193,677,qs),
(181,677,o),
(155,700,o),
(124,727,o),
(86,750,o),
(61,750,qs),
(31,750,o),
(-8,728,o),
(-30,691,o),
(-39,644,o),
(-39,620,q),
(30,620,l),
(30,628,o),
(31,651,o),
(36,672,o),
(48,687,o),
(60,687,qs),
(72,687,o),
(98,664,o),
(129,637,o),
(167,615,o),
(192,615,qs),
(222,615,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
31 1 3 4 15 1 2 5 2 76 0 4 0 3 5 4 3 105 0 5 6 1 2 1 5 2 105 0 1 1 41 77 0 0 0 39 0 78 5 4 26 24 21 19 10 8 4 35 5 35 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(285,813,l),
(285,887,l),
(-24,887,l),
(-24,813,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,527,l),
(77,0,l),
(162,0,l),
(162,527,l)
);
},
{
closed = 1;
nodes = (
(259,633,l),
(259,707,l),
(-20,707,l),
(-20,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 2 95 0 2 2 38 77 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(39,879,o),
(37,914,q),
(-41,914,l),
(-39,849,o),
(50,781,o),
(129,781,qs),
(208,781,o),
(299,849,o),
(301,914,q),
(223,914,l),
(221,879,o),
(172,847,o),
(130,847,qs),
(88,847,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 3 2 3 133 6 1 2 0 4 1 2 4 105 0 1 1 38 77 0 0 0 39 0 78 5 4 15 14 12 10 8 7 4 17 5 17 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,527,l),
(67,0,l),
(152,0,l),
(152,527,l)
);
},
{
closed = 1;
nodes = (
(19,705,o),
(17,740,q),
(-61,740,l),
(-59,675,o),
(30,607,o),
(109,607,qs),
(188,607,o),
(279,675,o),
(281,740,q),
(203,740,l),
(201,705,o),
(152,673,o),
(110,673,qs),
(68,673,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 3 2 3 133 6 1 2 0 4 1 2 4 105 0 1 1 41 77 0 0 0 39 0 78 5 4 15 14 12 10 8 7 4 17 5 17 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,-217,o),
(226,-207,q),
(212,-148,l),
(188,-160,o),
(164,-160,qs),
(135,-160,o),
(100,-129,o),
(100,-101,qs),
(100,-84,o),
(115,-53,o),
(138,-28,o),
(149,-17,qs),
(162,-5,o),
(167,0,q),
(174,0,l),
(174,707,l),
(87,707,l),
(87,0,l),
(94,0,l),
(73,-14,o),
(55,-34,qs),
(26,-66,o),
(26,-111,qs),
(26,-162,o),
(94,-223,o),
(155,-224,qs),
(175,-224,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
23 11 7 3 2 1 24 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 1 38 77 0 2 2 0 97 3 1 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 3 1 0 2 0 101 0 1 1 38 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
1 0 22 20 10 9 0 26 1 26 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,689,o),
(59,664,qs),
(59,639,o),
(91,607,o),
(116,607,qs),
(140,607,o),
(174,639,o),
(174,664,qs),
(174,689,o),
(140,720,o),
(116,720,qs),
(91,720,o)
);
},
{
closed = 1;
nodes = (
(198,-217,o),
(216,-207,q),
(202,-148,l),
(178,-160,o),
(154,-160,qs),
(125,-160,o),
(90,-129,o),
(90,-101,qs),
(90,-84,o),
(105,-53,o),
(128,-28,o),
(140,-15,qs),
(149,-5,o),
(154,0,q),
(159,0,l),
(159,527,l),
(74,527,l),
(74,0,l),
(84,0,l),
(63,-14,o),
(45,-34,qs),
(16,-66,o),
(16,-111,qs),
(16,-162,o),
(84,-223,o),
(145,-224,qs),
(165,-224,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
35 1 5 3 36 1 2 5 2 76 23 1 3 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 0 97 6 1 0 0 48 77 0 4 4 41 77 0 3 3 39 77 0 5 5 2 97 7 1 2 2 51 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 7 1 2 5 2 101 0 1 1 0 97 6 1 0 0 48 77 0 4 4 41 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
13 12 1 0 34 32 22 21 20 19 12 38 13 38 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,707,l),
(87,0,l),
(174,0,l),
(174,707,l)
);
},
{
closed = 1;
nodes = (
(239,90,o),
(353,-8,o),
(457,-8,qs),
(515,-8,o),
(595,29,o),
(645,96,o),
(667,188,o),
(667,244,qs),
(667,707,l),
(580,707,l),
(580,226,ls),
(580,192,o),
(568,135,o),
(539,94,o),
(492,71,o),
(457,71,qs),
(391,72,o),
(327,138,o),
(321,195,q),
(233,195,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 1 2 1 5 2 128 3 1 1 1 38 77 0 2 2 0 97 4 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
6 1 5 1 2 1 5 2 128 3 1 1 1 38 77 0 0 0 39 77 0 2 2 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
4 4 4 23 4 23 37 21 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,689,o),
(59,664,qs),
(59,639,o),
(91,607,o),
(116,607,qs),
(140,607,o),
(174,639,o),
(174,664,qs),
(174,689,o),
(140,720,o),
(116,720,qs),
(91,720,o)
);
},
{
closed = 1;
nodes = (
(159,527,l),
(74,527,l),
(74,0,l),
(159,0,l)
);
},
{
closed = 1;
nodes = (
(286,689,o),
(286,664,qs),
(286,639,o),
(318,607,o),
(343,607,qs),
(367,607,o),
(401,639,o),
(401,664,qs),
(401,689,o),
(367,720,o),
(343,720,qs),
(318,720,o)
);
},
{
closed = 1;
nodes = (
(301,-1,ls),
(301,-52,o),
(265,-106,o),
(211,-106,qs),
(175,-106,l),
(175,-180,l),
(221,-180,ls),
(310,-180,o),
(386,-98,o),
(386,-10,qs),
(386,527,l),
(301,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
5 1 1 1 0 97 11 4 9 3 0 0 48 77 12 8 2 2 2 41 77 10 1 3 3 39 77 0 7 7 6 98 0 6 6 43 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 7 0 6 7 6 102 5 1 1 1 0 97 11 4 9 3 0 0 48 77 12 8 2 2 2 41 77 10 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
28 28 17 16 12 12 1 0 28 39 28 39 36 34 33 31 23 21 16 27 17 27 12 15 12 15 14 13 7 5 0 11 1 11 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 460;
}
);
note = ij;
unicode = 307;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,90,o),
(162,-8,o),
(266,-8,qs),
(324,-8,o),
(404,29,o),
(454,96,o),
(476,188,o),
(476,244,qs),
(476,707,l),
(389,707,l),
(389,226,ls),
(389,192,o),
(377,135,o),
(348,94,o),
(301,71,o),
(266,71,qs),
(200,72,o),
(136,138,o),
(130,195,q),
(42,195,l)
);
},
{
closed = 1;
nodes = (
(263,786,l),
(348,786,l),
(426,882,l),
(504,786,l),
(590,786,l),
(456,949,l),
(396,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
5 1 4 6 1 6 4 1 128 7 1 3 1 0 1 3 0 128 8 1 6 6 44 77 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 6 133 5 1 4 1 4 133 7 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
20 20 0 0 20 26 20 26 25 24 22 21 0 19 0 19 37 21 34 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-1,ls),
(95,-52,o),
(59,-106,o),
(5,-106,qs),
(-31,-106,l),
(-31,-180,l),
(15,-180,ls),
(104,-180,o),
(180,-98,o),
(180,-10,qs),
(180,527,l),
(95,527,l)
);
},
{
closed = 1;
nodes = (
(-28,606,l),
(57,606,l),
(135,702,l),
(213,606,l),
(299,606,l),
(165,769,l),
(105,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 3 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 3 5 133 4 1 3 2 3 133 6 1 2 2 41 77 0 1 1 0 98 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
7 1 5 3 5 133 4 1 3 2 3 133 0 1 0 0 1 0 102 6 1 2 2 41 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
12 12 0 0 12 18 12 18 17 16 14 13 0 11 0 11 33 35 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 254;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = uni0136;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,302,l),
(286,302,l),
(508,0,l),
(611,0,l),
(355,356,l),
(609,707,l),
(509,707,l),
(278,381,l),
(174,381,l),
(174,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(285,-257,o),
(265,-271,q),
(289,-304,l),
(309,-297,o),
(346,-265,o),
(374,-223,o),
(391,-176,o),
(391,-149,qs),
(393,-118,o),
(361,-70,o),
(325,-70,qs),
(302,-70,o),
(268,-100,o),
(268,-128,qs),
(268,-153,o),
(300,-183,o),
(326,-185,q),
(320,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
7 1 4 1 1 76 28 27 2 6 73 0 6 3 6 134 0 1 0 4 3 1 4 103 2 1 0 0 38 77 7 5 2 3 3 39 3 78 0 0 20 18 0 12 0 12 17 18 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,226,l),
(254,226,l),
(413,0,l),
(513,0,l),
(322,276,l),
(498,527,l),
(402,527,l),
(244,300,l),
(152,300,l),
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(227,-257,o),
(207,-271,q),
(231,-304,l),
(251,-297,o),
(288,-265,o),
(316,-223,o),
(333,-176,o),
(333,-149,qs),
(335,-118,o),
(303,-70,o),
(267,-70,qs),
(244,-70,o),
(210,-100,o),
(210,-128,qs),
(210,-153,o),
(242,-183,o),
(268,-185,q),
(262,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
7 1 4 1 1 76 28 27 2 6 73 0 6 3 6 134 0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 7 5 2 3 3 39 3 78 0 0 20 18 0 12 0 12 17 18 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,226,l),
(254,226,l),
(412,0,l),
(512,0,l),
(321,276,l),
(497,527,l),
(400,527,l),
(244,300,l),
(152,300,l),
(152,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(207,786,l),
(307,927,l),
(215,927,l),
(130,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 3 4 3 133 0 4 0 4 133 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 17 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(137,786,l),
(237,927,l),
(145,927,l),
(60,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 2 3 2 133 0 3 0 3 133 0 0 0 38 77 4 1 1 1 39 1 78 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(282,-257,o),
(262,-271,q),
(286,-304,l),
(306,-297,o),
(343,-265,o),
(371,-223,o),
(388,-176,o),
(388,-149,qs),
(390,-118,o),
(358,-70,o),
(322,-70,qs),
(299,-70,o),
(265,-100,o),
(265,-128,qs),
(265,-153,o),
(297,-183,o),
(323,-185,q),
(317,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
21 20 2 3 73 0 3 2 3 134 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 38 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(68,-257,o),
(48,-271,q),
(72,-304,l),
(92,-297,o),
(129,-265,o),
(157,-223,o),
(174,-176,o),
(174,-149,qs),
(176,-118,o),
(144,-70,o),
(108,-70,qs),
(85,-70,o),
(51,-100,o),
(51,-128,qs),
(51,-153,o),
(83,-183,o),
(109,-185,q),
(103,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
19 18 2 2 73 0 2 1 2 134 0 0 0 38 77 3 1 1 1 39 1 78 0 0 11 9 0 3 0 3 17 4 8 23 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(329,527,o),
(309,513,q),
(333,480,l),
(353,487,o),
(390,519,o),
(418,561,o),
(435,608,o),
(435,635,qs),
(435,664,o),
(422,688,qs),
(405,714,o),
(373,714,qs),
(346,714,o),
(312,684,o),
(312,656,qs),
(312,631,o),
(344,601,o),
(370,599,q),
(364,575,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 21 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 46 77 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,531,o),
(182,517,q),
(206,484,l),
(226,491,o),
(263,523,o),
(291,565,o),
(308,612,o),
(308,639,qs),
(308,668,o),
(295,692,qs),
(280,718,o),
(245,718,qs),
(220,718,o),
(185,688,o),
(185,660,qs),
(185,635,o),
(217,605,o),
(243,603,q),
(237,579,o)
);
},
{
closed = 1;
nodes = (
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
16 15 2 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
16 15 2 2 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 0 48 77 3 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 48 77 0 1 1 38 77 3 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
19 19 19 22 19 22 29 37 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 288;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,0,l),
(562,79,l),
(174,79,l),
(174,707,l),
(87,707,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(326,442,qs),
(310,427,o),
(310,402,qs),
(310,377,o),
(326,361,qs),
(341,345,o),
(367,345,qs),
(391,345,o),
(408,361,qs),
(425,378,o),
(425,402,qs),
(425,427,o),
(408,442,qs),
(391,458,o),
(367,458,qs),
(341,458,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 4 1 3 4 105 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 7 6 15 13 6 21 7 21 17 17 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,707,l),
(67,707,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(218,396,qs),
(202,381,o),
(202,356,qs),
(202,331,o),
(218,315,qs),
(233,299,o),
(259,299,qs),
(283,299,o),
(300,315,qs),
(317,332,o),
(317,356,qs),
(317,381,o),
(300,396,qs),
(283,412,o),
(259,412,qs),
(233,412,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 2 0 3 1 2 3 105 0 0 0 38 77 4 1 1 1 39 1 78 5 4 0 0 13 11 4 19 5 19 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-5,313,l),
(37,250,l),
(101,292,l),
(101,0,l),
(576,0,l),
(576,79,l),
(188,79,l),
(188,349,l),
(320,435,l),
(278,497,l),
(188,438,l),
(188,707,l),
(101,707,l),
(101,382,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
13 12 11 10 5 4 3 2 8 1 0 1 76 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 17 21 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,707,l),
(75,707,l),
(75,366,l),
(-35,295,l),
(7,232,l),
(75,276,l),
(75,0,l),
(160,0,l),
(160,332,l),
(290,417,l),
(248,479,l),
(160,422,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
11 8 7 6 5 2 1 7 0 1 1 76 0 1 1 38 77 0 0 0 39 0 78 21 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,587,l),
(545,0,l),
(654,0,l),
(654,707,l),
(567,707,l),
(567,118,l),
(198,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(380,786,l),
(480,927,l),
(388,927,l),
(303,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
8 3 2 2 0 1 76 0 4 5 4 133 0 5 0 5 133 1 1 0 0 38 77 6 3 2 2 2 39 2 78 0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,241,ls),
(152,281,o),
(168,360,o),
(191,393,qs),
(210,419,o),
(273,458,o),
(314,458,qs),
(356,458,o),
(406,426,o),
(433,373,o),
(442,305,o),
(442,268,qs),
(442,0,l),
(527,0,l),
(527,291,ls),
(527,342,o),
(507,431,o),
(461,496,o),
(383,533,o),
(326,533,qs),
(302,533,o),
(251,523,o),
(205,501,o),
(166,469,o),
(153,447,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(304,628,l),
(404,769,l),
(312,769,l),
(227,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 6 5 133 0 6 0 6 133 0 3 3 0 97 1 1 0 0 41 77 7 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 6 5 133 0 6 1 6 133 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 7 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 32 31 30 29 0 28 0 28 37 21 37 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,587,l),
(545,0,l),
(654,0,l),
(654,707,l),
(567,707,l),
(567,118,l),
(198,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(550,949,l),
(465,949,l),
(387,853,l),
(309,949,l),
(222,949,l),
(357,786,l),
(416,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
13 1 6 4 8 3 2 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 1 1 0 0 38 77 7 3 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 1 1 0 0 38 77 7 3 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
10 10 0 0 10 16 10 16 15 14 12 11 0 9 0 9 17 18 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,241,ls),
(152,281,o),
(168,360,o),
(191,393,qs),
(210,419,o),
(274,458,o),
(314,458,qs),
(356,458,o),
(406,426,o),
(433,373,o),
(442,305,o),
(442,268,qs),
(442,0,l),
(527,0,l),
(527,291,ls),
(527,342,o),
(507,431,o),
(461,496,o),
(383,533,o),
(326,533,qs),
(302,533,o),
(251,523,o),
(205,501,o),
(166,469,o),
(153,447,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(476,769,l),
(391,769,l),
(313,673,l),
(235,769,l),
(148,769,l),
(283,606,l),
(342,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
32 1 7 5 3 1 2 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
9 1 7 5 0 5 7 0 128 6 1 5 5 2 95 8 4 2 2 2 39 77 0 3 3 0 97 1 1 0 0 41 77 8 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 5 1 5 7 1 128 6 1 5 5 2 95 8 4 2 2 2 39 77 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
29 29 0 0 29 35 29 35 34 33 31 30 0 28 0 28 37 21 37 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
},
{
closed = 1;
nodes = (
(540,813,l),
(540,887,l),
(221,887,l),
(221,813,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 4 0 5 1 4 5 103 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(457,633,l),
(457,707,l),
(138,707,l),
(138,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 5 4 95 0 4 4 38 77 0 3 3 0 97 6 1 0 0 49 77 7 1 2 2 1 97 0 1 1 50 1 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
},
{
closed = 1;
nodes = (
(289,892,o),
(287,927,q),
(209,927,l),
(211,862,o),
(300,794,o),
(379,794,qs),
(458,794,o),
(549,862,o),
(551,927,q),
(473,927,l),
(471,892,o),
(422,860,o),
(380,860,qs),
(338,860,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
7 1 5 4 5 133 10 1 4 0 6 1 4 6 105 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 41 40 21 20 1 0 51 50 48 46 44 43 40 53 41 53 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(208,705,o),
(206,740,q),
(128,740,l),
(130,675,o),
(219,607,o),
(298,607,qs),
(377,607,o),
(468,675,o),
(470,740,q),
(392,740,l),
(390,705,o),
(341,673,o),
(299,673,qs),
(257,673,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
7 1 5 4 5 133 10 1 4 0 6 0 4 6 105 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 50 1 78 41 40 21 20 1 0 51 50 48 46 44 43 40 53 41 53 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,564,o),
(587,660,o),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o)
);
},
{
closed = 1;
nodes = (
(535,591,o),
(595,514,o),
(624,411,o),
(624,353,qs),
(624,295,o),
(595,193,o),
(536,116,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
},
{
closed = 1;
nodes = (
(303,786,l),
(403,927,l),
(311,927,l),
(226,786,l)
);
},
{
closed = 1;
nodes = (
(462,786,l),
(562,927,l),
(470,927,l),
(385,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 4 7 1 5 1 4 5 103 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 21 20 1 0 47 46 45 44 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(517,105,o),
(548,204,o),
(548,263,qs),
(548,322,o),
(517,421,o),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(230,628,l),
(330,769,l),
(238,769,l),
(153,628,l)
);
},
{
closed = 1;
nodes = (
(389,628,l),
(489,769,l),
(397,769,l),
(312,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 4 7 1 5 0 4 5 103 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 50 1 78 21 20 1 0 47 46 45 44 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,0,l),
(595,0,l),
(447,280,l),
(478,289,o),
(536,322,o),
(579,373,o),
(605,442,o),
(605,486,qs),
(605,546,o),
(570,631,o),
(504,683,o),
(410,707,o),
(352,707,qs),
(87,707,l),
(87,0,l),
(174,0,l),
(174,265,l),
(359,265,l)
);
},
{
closed = 1;
nodes = (
(174,628,l),
(343,628,ls),
(427,628,o),
(516,565,o),
(516,489,qs),
(515,443,o),
(484,388,o),
(432,356,o),
(363,344,o),
(324,344,qs),
(174,344,l)
);
},
{
closed = 1;
nodes = (
(324,786,l),
(424,927,l),
(332,927,l),
(247,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
14 1 3 4 1 76 0 6 7 6 133 0 7 1 7 133 9 1 4 8 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 19 18 0 0 32 31 30 29 27 25 18 28 19 28 0 17 0 17 26 33 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,257,ls),
(152,297,o),
(171,369,o),
(212,422,o),
(278,453,o),
(325,453,qs),
(356,453,l),
(356,533,l),
(329,533,ls),
(272,533,o),
(182,491,o),
(153,445,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(240,628,l),
(340,769,l),
(248,769,l),
(163,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 5 4 133 0 5 0 5 133 0 2 2 0 97 1 1 0 0 41 77 6 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 5 4 133 0 5 1 5 133 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 6 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 19 18 17 16 0 15 0 15 33 35 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,0,l),
(595,0,l),
(447,280,l),
(478,289,o),
(536,322,o),
(579,373,o),
(605,442,o),
(605,486,qs),
(605,546,o),
(570,631,o),
(504,683,o),
(410,707,o),
(352,707,qs),
(87,707,l),
(87,0,l),
(174,0,l),
(174,265,l),
(359,265,l)
);
},
{
closed = 1;
nodes = (
(174,628,l),
(343,628,ls),
(427,628,o),
(516,565,o),
(516,489,qs),
(515,443,o),
(484,388,o),
(432,356,o),
(363,344,o),
(324,344,qs),
(174,344,l)
);
},
{
closed = 1;
nodes = (
(488,949,l),
(403,949,l),
(325,853,l),
(247,949,l),
(160,949,l),
(295,786,l),
(354,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
32 1 8 6 14 1 3 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
11 1 8 6 1 6 8 1 128 10 1 4 9 1 3 0 4 3 103 7 1 6 6 44 77 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
7 1 6 8 6 133 11 1 8 1 8 133 10 1 4 9 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
29 29 19 18 0 0 29 35 29 35 34 33 31 30 27 25 18 28 19 28 0 17 0 17 26 33 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,257,ls),
(152,297,o),
(171,369,o),
(212,422,o),
(278,453,o),
(325,453,qs),
(356,453,l),
(356,533,l),
(329,533,ls),
(272,533,o),
(182,491,o),
(153,445,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(388,769,l),
(303,769,l),
(225,673,l),
(147,769,l),
(60,769,l),
(195,606,l),
(254,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 6 4 3 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 0 2 2 0 97 1 1 0 0 41 77 7 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
5 1 4 6 4 133 8 1 6 1 6 133 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 7 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
16 16 0 0 16 22 16 22 21 20 18 17 0 15 0 15 33 35 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,625,o),
(456,599,o),
(485,557,o),
(489,526,q),
(574,526,l),
(571,589,o),
(511,669,o),
(466,689,qs),
(437,703,o),
(372,714,o),
(332,715,qs),
(283,715,o),
(196,695,o),
(126,649,o),
(82,573,o),
(82,517,qs),
(82,457,o),
(136,378,o),
(176,359,qs),
(201,346,o),
(261,327,o),
(323,313,o),
(385,301,o),
(413,292,qs),
(455,280,o),
(505,234,o),
(505,187,qs),
(505,156,o),
(479,112,o),
(435,84,o),
(378,71,o),
(348,71,qs),
(317,71,o),
(254,81,o),
(200,107,o),
(158,151,o),
(148,185,q),
(57,185,l),
(68,132,o),
(122,58,o),
(198,12,o),
(291,-8,o),
(342,-8,qs),
(393,-8,o),
(484,15,o),
(553,65,o),
(594,143,o),
(594,203,qs),
(594,267,o),
(521,345,o),
(460,366,qs),
(434,375,o),
(379,387,o),
(322,399,o),
(268,413,o),
(244,423,qs),
(214,436,o),
(172,485,o),
(172,525,qs),
(172,558,o),
(201,601,o),
(247,626,o),
(304,636,o),
(332,636,qs),
(361,636,o)
);
},
{
closed = 1;
nodes = (
(352,786,l),
(452,927,l),
(360,927,l),
(275,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
0 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 68 67 66 65 60 59 54 52 33 31 27 26 22 20 0 64 1 64 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,420,o),
(372,391,q),
(451,391,l),
(447,422,o),
(415,478,o),
(386,498,qs),
(338,533,o),
(257,533,qs),
(219,533,o),
(151,519,o),
(121,501,qs),
(93,483,o),
(57,426,o),
(55,382,qs),
(55,340,o),
(89,282,o),
(117,265,qs),
(138,252,o),
(186,237,o),
(237,226,o),
(288,217,o),
(312,212,qs),
(346,205,o),
(385,175,o),
(385,145,qs),
(385,118,o),
(359,88,o),
(321,73,o),
(279,69,o),
(263,69,qs),
(241,69,o),
(206,75,o),
(167,91,o),
(133,119,o),
(125,143,q),
(39,143,l),
(45,100,o),
(88,43,o),
(149,8,o),
(223,-6,o),
(259,-6,qs),
(296,-6,o),
(371,8,o),
(430,42,o),
(469,101,o),
(470,149,qs),
(470,248,o),
(374,278,qs),
(362,282,o),
(327,290,o),
(288,297,o),
(248,304,o),
(231,308,qs),
(190,316,o),
(139,350,o),
(139,384,qs),
(140,408,o),
(165,437,o),
(200,452,o),
(237,457,o),
(255,457,qs),
(303,456,o)
);
},
{
closed = 1;
nodes = (
(268,628,l),
(368,769,l),
(276,769,l),
(191,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
0 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 65 64 63 62 59 58 54 52 32 30 26 25 21 19 0 61 1 61 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,625,o),
(456,599,o),
(485,557,o),
(489,526,q),
(574,526,l),
(571,589,o),
(511,669,o),
(466,689,qs),
(437,703,o),
(372,714,o),
(332,715,qs),
(283,715,o),
(196,695,o),
(126,649,o),
(82,573,o),
(82,517,qs),
(82,457,o),
(136,378,o),
(176,359,qs),
(201,346,o),
(261,327,o),
(323,313,o),
(385,301,o),
(413,292,qs),
(455,280,o),
(505,234,o),
(505,187,qs),
(505,156,o),
(479,112,o),
(435,84,o),
(378,71,o),
(348,71,qs),
(317,71,o),
(254,81,o),
(200,107,o),
(158,151,o),
(148,185,q),
(57,185,l),
(68,132,o),
(122,58,o),
(198,12,o),
(291,-8,o),
(342,-8,qs),
(393,-8,o),
(484,15,o),
(553,65,o),
(594,143,o),
(594,203,qs),
(594,267,o),
(521,345,o),
(460,366,qs),
(434,375,o),
(379,387,o),
(322,399,o),
(268,413,o),
(244,423,qs),
(214,436,o),
(172,485,o),
(172,525,qs),
(172,558,o),
(201,601,o),
(247,626,o),
(304,636,o),
(332,636,qs),
(361,636,o)
);
},
{
closed = 1;
nodes = (
(173,786,l),
(258,786,l),
(336,882,l),
(414,786,l),
(500,786,l),
(366,949,l),
(306,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
68 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 6 8 4 8 6 4 128 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 10 1 8 8 44 77 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 1 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
65 65 1 0 65 71 65 71 70 69 67 66 60 59 54 52 33 31 27 26 22 20 0 64 1 64 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,420,o),
(372,391,q),
(451,391,l),
(447,422,o),
(415,478,o),
(386,498,qs),
(338,533,o),
(257,533,qs),
(219,533,o),
(151,519,o),
(121,501,qs),
(93,483,o),
(57,426,o),
(55,382,qs),
(55,340,o),
(89,282,o),
(117,265,qs),
(138,252,o),
(186,237,o),
(237,226,o),
(288,217,o),
(312,212,qs),
(346,205,o),
(385,175,o),
(385,145,qs),
(385,118,o),
(359,88,o),
(321,73,o),
(279,69,o),
(263,69,qs),
(241,69,o),
(206,75,o),
(167,91,o),
(133,119,o),
(125,143,q),
(39,143,l),
(45,100,o),
(88,43,o),
(149,8,o),
(223,-6,o),
(259,-6,qs),
(296,-6,o),
(371,8,o),
(430,42,o),
(469,101,o),
(470,149,qs),
(470,248,o),
(374,278,qs),
(362,282,o),
(327,290,o),
(288,297,o),
(248,304,o),
(231,308,qs),
(190,316,o),
(139,350,o),
(139,384,qs),
(140,408,o),
(165,437,o),
(200,452,o),
(237,457,o),
(255,457,qs),
(303,456,o)
);
},
{
closed = 1;
nodes = (
(89,606,l),
(174,606,l),
(252,702,l),
(330,606,l),
(416,606,l),
(282,769,l),
(222,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
65 1 6 8 1 76 10 1 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 62 62 1 0 62 68 62 68 67 66 64 63 59 58 54 52 32 30 26 25 21 19 0 61 1 61 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,625,o),
(456,599,o),
(485,557,o),
(489,526,q),
(574,526,l),
(571,589,o),
(511,669,o),
(466,689,qs),
(437,703,o),
(372,714,o),
(332,715,qs),
(283,715,o),
(196,695,o),
(126,649,o),
(82,573,o),
(82,517,qs),
(82,457,o),
(136,378,o),
(176,359,qs),
(201,346,o),
(261,327,o),
(323,313,o),
(385,301,o),
(413,292,qs),
(455,280,o),
(505,234,o),
(505,187,qs),
(505,156,o),
(479,112,o),
(435,84,o),
(378,71,o),
(348,71,qs),
(317,71,o),
(254,81,o),
(200,107,o),
(158,151,o),
(148,185,q),
(57,185,l),
(68,132,o),
(122,58,o),
(198,12,o),
(291,-8,o),
(342,-8,qs),
(393,-8,o),
(484,15,o),
(553,65,o),
(594,143,o),
(594,203,qs),
(594,267,o),
(521,345,o),
(460,366,qs),
(434,375,o),
(379,387,o),
(322,399,o),
(268,413,o),
(244,423,qs),
(214,436,o),
(172,485,o),
(172,525,qs),
(172,558,o),
(201,601,o),
(247,626,o),
(304,636,o),
(332,636,qs),
(361,636,o)
);
},
{
closed = 1;
nodes = (
(497,949,l),
(412,949,l),
(334,853,l),
(256,949,l),
(169,949,l),
(304,786,l),
(363,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
68 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 9 1 0 0 4 97 0 4 4 46 77 0 5 5 6 95 7 1 6 6 44 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
65 65 1 0 65 71 65 71 70 69 67 66 60 59 54 52 33 31 27 26 22 20 0 64 1 64 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,420,o),
(372,391,q),
(451,391,l),
(447,422,o),
(415,478,o),
(386,498,qs),
(338,533,o),
(257,533,qs),
(219,533,o),
(151,519,o),
(121,501,qs),
(93,483,o),
(57,426,o),
(55,382,qs),
(55,340,o),
(89,282,o),
(117,265,qs),
(138,252,o),
(186,237,o),
(237,226,o),
(288,217,o),
(312,212,qs),
(346,205,o),
(385,175,o),
(385,145,qs),
(385,118,o),
(359,88,o),
(321,73,o),
(279,69,o),
(263,69,qs),
(241,69,o),
(206,75,o),
(167,91,o),
(133,119,o),
(125,143,q),
(39,143,l),
(45,100,o),
(88,43,o),
(149,8,o),
(223,-6,o),
(259,-6,qs),
(296,-6,o),
(371,8,o),
(430,42,o),
(469,101,o),
(470,149,qs),
(470,248,o),
(374,278,qs),
(362,282,o),
(327,290,o),
(288,297,o),
(248,304,o),
(231,308,qs),
(190,316,o),
(139,350,o),
(139,384,qs),
(140,408,o),
(165,437,o),
(200,452,o),
(237,457,o),
(255,457,qs),
(303,456,o)
);
},
{
closed = 1;
nodes = (
(422,769,l),
(337,769,l),
(259,673,l),
(181,769,l),
(94,769,l),
(229,606,l),
(288,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
65 1 8 6 1 76 10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 62 62 1 0 62 68 62 68 67 66 64 63 59 58 54 52 32 30 26 25 21 19 0 61 1 61 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcaron;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,628,l),
(555,628,l),
(555,707,l),
(14,707,l),
(14,628,l),
(241,628,l),
(241,0,l),
(328,0,l)
);
},
{
closed = 1;
nodes = (
(448,949,l),
(363,949,l),
(285,853,l),
(207,949,l),
(120,949,l),
(255,786,l),
(314,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
8 1 6 4 1 4 6 1 128 5 1 4 4 44 77 2 1 0 0 1 95 0 1 1 38 77 7 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 6 4 133 8 1 6 1 6 133 2 1 0 0 1 95 0 1 1 38 77 7 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
8 8 0 0 8 14 8 14 13 12 10 9 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,684,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,170,ls),
(115,82,o),
(191,0,o),
(281,0,qs),
(338,0,l),
(338,74,l),
(299,74,ls),
(239,74,o),
(200,125,o),
(200,179,qs),
(200,452,l),
(307,452,l),
(307,527,l),
(200,527,l),
(200,684,l)
);
},
{
closed = 1;
nodes = (
(358,521,o),
(338,507,q),
(362,474,l),
(382,481,o),
(419,513,o),
(447,555,o),
(464,602,o),
(464,629,qs),
(464,658,o),
(451,682,qs),
(434,708,o),
(403,708,qs),
(376,708,o),
(341,678,o),
(341,650,qs),
(341,625,o),
(373,595,o),
(399,593,q),
(393,569,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
36 35 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 7 7 38 77 0 6 6 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 7 0 7 6 0 128 0 7 7 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
38 17 17 19 33 35 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,303,l),
(449,303,l),
(449,377,l),
(328,377,l),
(328,628,l),
(555,628,l),
(555,707,l),
(14,707,l),
(14,628,l),
(241,628,l),
(241,377,l),
(120,377,l),
(120,303,l),
(241,303,l),
(241,0,l),
(328,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 1 6 1 0 7 1 0 103 4 1 2 2 3 95 0 3 3 38 77 8 1 7 7 39 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,251,l),
(115,170,ls),
(115,82,o),
(191,0,o),
(281,0,qs),
(338,0,l),
(338,74,l),
(299,74,ls),
(239,74,o),
(200,125,o),
(200,179,qs),
(200,251,l),
(341,251,l),
(341,325,l),
(200,325,l),
(200,452,l),
(341,452,l),
(341,527,l),
(200,527,l),
(200,684,l),
(115,684,l),
(115,527,l),
(29,527,l),
(29,452,l),
(115,452,l),
(115,325,l),
(29,325,l),
(29,251,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
6 1 0 10 1 7 8 0 7 103 0 3 3 38 77 5 1 1 1 2 95 4 1 2 2 41 77 0 8 8 9 98 0 9 9 39 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 3 133 6 1 0 10 1 7 8 0 7 103 5 1 1 1 2 95 4 1 2 2 41 77 0 8 8 9 98 0 9 9 39 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
27 26 23 21 35 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(505,818,o),
(528,854,o),
(537,901,o),
(538,925,q),
(468,925,l),
(468,917,o),
(468,893,o),
(462,872,o),
(449,857,o),
(437,857,qs),
(425,857,o),
(399,880,o),
(368,907,o),
(330,930,o),
(305,930,qs),
(275,930,o),
(236,908,o),
(214,871,o),
(205,824,o),
(205,800,q),
(274,800,l),
(274,808,o),
(275,831,o),
(280,852,o),
(292,867,o),
(304,867,qs),
(316,867,o),
(342,844,o),
(373,817,o),
(411,795,o),
(436,795,qs),
(466,795,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
53 1 5 6 37 1 4 7 2 76 0 6 0 5 7 6 5 105 0 7 9 1 4 1 7 4 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 27 26 0 0 48 46 43 41 32 30 26 57 27 57 0 25 0 25 37 21 37 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(426,638,o),
(449,674,o),
(458,721,o),
(459,745,q),
(389,745,l),
(389,737,o),
(389,713,o),
(383,692,o),
(370,677,o),
(358,677,qs),
(346,677,o),
(320,700,o),
(289,727,o),
(251,750,o),
(226,750,qs),
(196,750,o),
(157,728,o),
(135,691,o),
(126,644,o),
(126,620,q),
(195,620,l),
(195,628,o),
(196,651,o),
(201,672,o),
(213,687,o),
(225,687,qs),
(237,687,o),
(263,664,o),
(294,637,o),
(332,615,o),
(357,615,qs),
(387,615,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
45 1 5 6 29 1 4 7 2 76 0 6 0 5 7 6 5 105 0 7 9 1 4 1 7 4 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 19 18 1 0 40 38 35 33 24 22 18 49 19 49 14 13 10 8 5 4 0 17 1 17 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(520,813,l),
(520,887,l),
(201,887,l),
(201,813,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 1 4 5 103 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 29 28 27 26 0 25 0 25 37 21 37 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(453,633,l),
(453,707,l),
(134,707,l),
(134,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 5 4 95 0 4 4 38 77 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 1 0 21 20 19 18 14 13 10 8 5 4 0 17 1 17 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(275,879,o),
(273,914,q),
(195,914,l),
(197,849,o),
(286,781,o),
(365,781,qs),
(444,781,o),
(535,849,o),
(537,914,q),
(459,914,l),
(457,879,o),
(408,847,o),
(366,847,qs),
(324,847,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 5 4 5 133 9 1 4 0 6 1 4 6 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 27 26 0 0 37 36 34 32 30 29 26 39 27 39 0 25 0 25 37 21 37 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(196,699,o),
(194,734,q),
(116,734,l),
(118,669,o),
(207,601,o),
(286,601,qs),
(365,601,o),
(456,669,o),
(458,734,q),
(380,734,l),
(378,699,o),
(329,667,o),
(287,667,qs),
(245,667,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
7 1 5 4 5 133 9 1 4 0 6 1 4 6 105 3 1 1 1 41 77 8 1 0 0 2 98 0 2 2 50 2 78 19 18 1 0 29 28 26 24 22 21 18 31 19 31 14 13 10 8 5 4 0 17 1 17 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(264,906,o),
(264,862,qs),
(264,818,o),
(318,767,o),
(362,767,qs),
(405,767,o),
(461,818,o),
(461,862,qs),
(461,905,o),
(407,963,o),
(363,963,qs),
(319,963,o)
);
},
{
closed = 1;
nodes = (
(319,844,o),
(319,864,qs),
(319,884,o),
(342,909,o),
(362,909,qs),
(382,909,o),
(405,884,o),
(405,864,qs),
(405,844,o),
(382,819,o),
(362,819,qs),
(342,819,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
10 1 6 0 5 1 6 5 105 0 7 7 4 97 9 1 4 4 44 77 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 39 38 27 26 0 0 45 43 38 49 39 49 33 31 26 37 27 37 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(190,734,o),
(190,690,qs),
(190,646,o),
(244,595,o),
(288,595,qs),
(331,595,o),
(387,646,o),
(387,690,qs),
(387,733,o),
(333,791,o),
(289,791,qs),
(245,791,o)
);
},
{
closed = 1;
nodes = (
(245,672,o),
(245,692,qs),
(245,712,o),
(268,737,o),
(288,737,qs),
(308,737,o),
(331,712,o),
(331,692,qs),
(331,672,o),
(308,647,o),
(288,647,qs),
(268,647,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
9 1 4 0 7 6 4 7 105 10 1 6 0 5 1 6 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 31 30 19 18 1 0 37 35 30 41 31 41 25 23 18 29 19 29 14 13 10 8 5 4 0 17 1 17 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(289,-8,o),
(363,-8,qs),
(437,-8,o),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l)
);
},
{
closed = 1;
nodes = (
(304,786,l),
(404,927,l),
(312,927,l),
(227,786,l)
);
},
{
closed = 1;
nodes = (
(463,786,l),
(563,927,l),
(471,927,l),
(386,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
6 1 4 7 1 5 1 4 5 103 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 33 32 31 30 29 28 27 26 0 25 0 25 37 21 37 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(178,-6,o),
(287,-6,qs),
(396,-6,o),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o)
);
},
{
closed = 1;
nodes = (
(230,628,l),
(330,769,l),
(238,769,l),
(153,628,l)
);
},
{
closed = 1;
nodes = (
(389,628,l),
(489,769,l),
(397,769,l),
(312,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
6 1 4 7 1 5 1 4 5 103 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 1 0 25 24 23 22 21 20 19 18 14 13 10 8 5 4 0 17 1 17 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,-217,o),
(483,-207,q),
(469,-148,l),
(445,-160,o),
(421,-160,qs),
(392,-160,o),
(357,-129,o),
(357,-101,qs),
(357,-84,o),
(372,-53,o),
(395,-28,o),
(410,-16,qs),
(419,-8,o),
(429,-2,q),
(462,3,o),
(490,16,qs),
(543,40,o),
(612,124,o),
(644,238,o),
(644,305,qs),
(644,707,l),
(556,707,l),
(556,306,ls),
(556,258,o),
(537,173,o),
(492,108,o),
(418,71,o),
(364,71,qs),
(310,71,o),
(235,108,o),
(189,172,o),
(169,258,o),
(169,306,qs),
(169,707,l),
(82,707,l),
(82,305,ls),
(82,237,o),
(114,123,o),
(182,39,o),
(235,15,qs),
(280,-4,o),
(340,-7,q),
(325,-19,o),
(312,-34,qs),
(283,-66,o),
(283,-111,qs),
(283,-162,o),
(351,-223,o),
(412,-224,qs),
(432,-224,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
46 1 5 1 47 1 0 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
4 1 2 2 38 77 0 3 3 1 97 0 1 1 50 77 0 5 5 0 97 6 1 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 5 6 1 0 5 0 101 4 1 2 2 38 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 45 43 28 27 22 20 15 14 8 7 0 49 1 49 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,-217,o),
(400,-207,q),
(386,-148,l),
(362,-160,o),
(338,-160,qs),
(309,-160,o),
(274,-129,o),
(274,-101,qs),
(274,-84,o),
(289,-53,o),
(312,-28,o),
(327,-16,qs),
(337,-8,o),
(348,-1,q),
(413,11,o),
(453,52,qs),
(511,110,o),
(511,230,qs),
(511,527,l),
(426,527,l),
(426,234,ls),
(426,156,o),
(359,69,o),
(287,69,qs),
(218,69,o),
(150,156,o),
(150,234,qs),
(150,527,l),
(65,527,l),
(65,230,ls),
(65,110,o),
(121,52,qs),
(171,1,o),
(260,-5,q),
(244,-17,o),
(229,-34,qs),
(200,-66,o),
(200,-111,qs),
(200,-162,o),
(268,-223,o),
(329,-224,qs),
(349,-224,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
38 1 5 1 39 1 0 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
4 1 2 2 41 77 0 3 3 1 97 0 1 1 39 77 0 5 5 0 97 6 1 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 5 6 1 0 5 0 101 4 1 2 2 41 77 0 3 3 1 97 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 37 35 22 21 18 16 13 12 8 7 0 41 1 41 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,707,l),
(273,75,l),
(112,707,l),
(14,707,l),
(206,0,l),
(337,0,l),
(491,624,l),
(645,0,l),
(777,0,l),
(969,707,l),
(875,707,l),
(714,75,l),
(560,707,l),
(560,707,l)
);
},
{
closed = 1;
nodes = (
(328,786,l),
(413,786,l),
(491,882,l),
(569,786,l),
(655,786,l),
(521,949,l),
(461,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
17 1 5 7 11 6 1 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 5 7 0 7 5 0 128 8 1 7 7 44 77 4 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
8 1 7 5 7 133 6 1 5 0 5 133 4 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
14 14 14 20 14 20 18 18 18 17 18 17 18 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,0,l),
(421,427,l),
(551,0,l),
(667,0,l),
(831,527,l),
(734,527,l),
(610,82,l),
(479,527,l),
(364,527,l),
(234,82,l),
(108,527,l),
(12,527,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(258,606,l),
(343,606,l),
(421,702,l),
(499,606,l),
(585,606,l),
(451,769,l),
(391,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
16 1 5 7 10 5 2 3 3 0 2 76 8 1 7 5 7 133 6 1 5 0 5 133 2 1 2 0 0 41 77 4 1 3 3 39 3 78 13 13 13 19 13 19 18 18 18 17 18 18 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 843;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,707,l),
(14,707,l),
(264,265,l),
(264,0,l),
(351,0,l),
(351,266,l),
(600,707,l),
(501,707,l),
(309,353,l)
);
},
{
closed = 1;
nodes = (
(147,786,l),
(232,786,l),
(310,882,l),
(388,786,l),
(474,786,l),
(340,949,l),
(280,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
12 1 3 5 8 5 2 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
4 1 3 5 0 5 3 0 128 6 1 5 5 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
6 1 5 3 5 133 4 1 3 0 3 133 2 1 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
9 9 9 15 9 15 18 19 18 18 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,274,ls),
(445,236,o),
(432,164,o),
(413,134,qs),
(396,105,o),
(333,67,o),
(288,67,qs),
(243,67,o),
(189,100,o),
(161,154,o),
(152,224,o),
(152,260,qs),
(152,527,l),
(67,527,l),
(67,236,ls),
(67,182,o),
(87,93,o),
(134,29,o),
(213,-7,o),
(273,-8,qs),
(299,-8,o),
(350,1,o),
(395,20,o),
(434,51,o),
(447,71,q),
(447,8,ls),
(447,-28,o),
(430,-90,o),
(393,-135,o),
(335,-160,o),
(294,-160,qs),
(245,-160,o),
(156,-124,o),
(117,-93,q),
(80,-160,l),
(125,-202,o),
(232,-235,o),
(299,-236,qs),
(410,-236,o),
(530,-115,o),
(530,0,qs),
(530,527,l),
(445,527,l)
);
},
{
closed = 1;
nodes = (
(139,606,l),
(224,606,l),
(302,702,l),
(380,606,l),
(466,606,l),
(332,769,l),
(272,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
46 1 6 8 17 1 4 3 8 1 1 2 3 76 7 1 1 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
10 1 8 6 8 133 7 1 6 3 6 133 9 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
10 1 8 6 8 133 7 1 6 3 6 133 0 1 0 0 1 0 101 9 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
43 43 0 0 43 49 43 49 48 47 45 44 0 42 0 42 37 21 41 37 35 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,707,l),
(14,707,l),
(264,265,l),
(264,0,l),
(351,0,l),
(351,266,l),
(600,707,l),
(501,707,l),
(309,353,l)
);
},
{
closed = 1;
nodes = (
(143,856,o),
(143,831,qs),
(143,806,o),
(176,775,o),
(200,775,qs),
(225,775,o),
(258,806,o),
(258,831,qs),
(258,856,o),
(225,887,o),
(200,887,qs),
(176,887,o)
);
},
{
closed = 1;
nodes = (
(360,856,o),
(360,831,qs),
(360,806,o),
(392,775,o),
(416,775,qs),
(441,775,o),
(474,806,o),
(474,831,qs),
(474,856,o),
(441,887,o),
(416,887,qs),
(392,887,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 5 2 3 1 0 1 76 8 5 7 3 3 6 1 4 0 3 4 105 2 1 0 0 38 77 0 1 1 39 1 78 22 21 10 9 28 26 21 32 22 32 16 14 9 20 10 20 18 18 16 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,69,l),
(44,0,l),
(546,0,l),
(546,79,l),
(156,79,l),
(553,639,l),
(553,707,l),
(57,707,l),
(57,628,l),
(436,628,l)
);
},
{
closed = 1;
nodes = (
(306,786,l),
(406,927,l),
(314,927,l),
(229,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
3 1 3 0 8 1 2 1 2 76 0 4 5 4 133 0 5 0 5 133 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,452,l),
(362,452,l),
(47,72,l),
(47,0,l),
(471,0,l),
(471,74,l),
(153,74,l),
(471,456,l),
(471,527,l)
);
},
{
closed = 1;
nodes = (
(275,628,l),
(375,769,l),
(283,769,l),
(198,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 1 2 3 5 1 1 0 2 76 0 4 5 4 133 0 5 3 5 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 17 17 18 17 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,69,l),
(44,0,l),
(546,0,l),
(546,79,l),
(156,79,l),
(553,639,l),
(553,707,l),
(57,707,l),
(57,628,l),
(436,628,l)
);
},
{
closed = 1;
nodes = (
(244,867,o),
(244,842,qs),
(244,817,o),
(275,785,o),
(301,785,qs),
(325,785,o),
(359,817,o),
(359,842,qs),
(359,866,o),
(324,899,o),
(301,898,qs),
(276,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
3 1 3 0 8 1 2 1 2 76 7 1 4 0 5 0 4 5 105 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 11 10 0 0 17 15 10 21 11 21 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,452,l),
(362,452,l),
(47,72,l),
(47,0,l),
(471,0,l),
(471,74,l),
(153,74,l),
(471,456,l),
(471,527,l)
);
},
{
closed = 1;
nodes = (
(196,686,o),
(196,661,qs),
(196,636,o),
(227,604,o),
(253,604,qs),
(277,604,o),
(311,636,o),
(311,661,qs),
(311,685,o),
(276,718,o),
(253,717,qs),
(228,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 1 2 3 5 1 1 0 2 76 0 5 5 4 97 6 1 4 4 46 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 11 10 17 15 10 21 11 21 17 18 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,69,l),
(44,0,l),
(546,0,l),
(546,79,l),
(156,79,l),
(553,639,l),
(553,707,l),
(57,707,l),
(57,628,l),
(436,628,l)
);
},
{
closed = 1;
nodes = (
(469,949,l),
(384,949,l),
(306,853,l),
(228,949,l),
(141,949,l),
(276,786,l),
(335,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
13 1 6 4 3 1 3 0 8 1 2 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
10 10 0 0 10 16 10 16 15 14 12 11 0 9 0 9 17 18 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,452,l),
(362,452,l),
(47,72,l),
(47,0,l),
(471,0,l),
(471,74,l),
(153,74,l),
(471,456,l),
(471,527,l)
);
},
{
closed = 1;
nodes = (
(431,769,l),
(346,769,l),
(268,673,l),
(190,769,l),
(103,769,l),
(238,606,l),
(297,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
13 1 6 4 0 1 2 3 5 1 1 0 3 76 5 1 4 6 4 133 7 1 6 3 6 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 10 10 10 16 10 16 18 18 17 18 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-1,ls),
(95,-52,o),
(59,-106,o),
(5,-106,qs),
(-31,-106,l),
(-31,-180,l),
(15,-180,ls),
(104,-180,o),
(180,-98,o),
(180,-10,qs),
(180,527,l),
(95,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 2 41 77 0 1 1 0 98 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 1 0 102 3 1 2 2 41 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 11 0 11 33 35 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 254;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,587,l),
(545,0,l),
(654,0,l),
(654,707,l),
(567,707,l),
(567,118,l),
(198,707,l),
(87,707,l),
(87,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(323,-257,o),
(303,-271,q),
(327,-304,l),
(347,-297,o),
(384,-265,o),
(412,-223,o),
(429,-176,o),
(429,-149,qs),
(431,-118,o),
(399,-70,o),
(363,-70,qs),
(340,-70,o),
(306,-100,o),
(306,-128,qs),
(306,-153,o),
(338,-183,o),
(364,-185,q),
(358,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 3 2 2 0 1 76 25 24 2 4 73 0 4 2 4 134 1 1 0 0 38 77 5 3 2 2 2 39 2 78 0 0 17 15 0 9 0 9 17 18 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,241,ls),
(152,281,o),
(168,360,o),
(191,393,qs),
(210,419,o),
(274,458,o),
(314,458,qs),
(356,458,o),
(406,426,o),
(433,373,o),
(442,305,o),
(442,268,qs),
(442,0,l),
(527,0,l),
(527,291,ls),
(527,342,o),
(507,431,o),
(461,496,o),
(383,533,o),
(326,533,qs),
(302,533,o),
(251,523,o),
(205,501,o),
(166,469,o),
(153,447,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(256,-257,o),
(236,-271,q),
(260,-304,l),
(280,-297,o),
(317,-265,o),
(345,-223,o),
(362,-176,o),
(362,-149,qs),
(364,-118,o),
(332,-70,o),
(296,-70,qs),
(273,-70,o),
(239,-100,o),
(239,-128,qs),
(239,-153,o),
(271,-183,o),
(297,-185,q),
(291,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 2 3 1 76 44 43 2 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 2 5 134 0 3 3 0 97 1 1 0 0 41 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 2 5 134 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 36 34 0 28 0 28 37 21 37 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,0,l),
(595,0,l),
(447,280,l),
(478,289,o),
(536,322,o),
(579,373,o),
(605,442,o),
(605,486,qs),
(605,546,o),
(570,631,o),
(504,683,o),
(410,707,o),
(352,707,qs),
(87,707,l),
(87,0,l),
(174,0,l),
(174,265,l),
(359,265,l)
);
},
{
closed = 1;
nodes = (
(174,628,l),
(343,628,ls),
(427,628,o),
(516,565,o),
(516,489,qs),
(515,443,o),
(484,388,o),
(432,356,o),
(363,344,o),
(324,344,qs),
(174,344,l)
);
},
{
closed = 1;
nodes = (
(288,-257,o),
(268,-271,q),
(292,-304,l),
(312,-297,o),
(349,-265,o),
(377,-223,o),
(394,-176,o),
(394,-149,qs),
(396,-118,o),
(364,-70,o),
(328,-70,qs),
(305,-70,o),
(271,-100,o),
(271,-128,qs),
(271,-153,o),
(303,-183,o),
(329,-185,q),
(323,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
14 1 3 4 1 76 44 43 2 6 73 0 6 0 6 134 8 1 4 7 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 19 18 0 0 36 34 27 25 18 28 19 28 0 17 0 17 26 33 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,257,ls),
(152,297,o),
(171,369,o),
(212,422,o),
(278,453,o),
(325,453,qs),
(356,453,l),
(356,533,l),
(329,533,ls),
(272,533,o),
(182,491,o),
(153,445,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l)
);
},
{
closed = 1;
nodes = (
(73,-257,o),
(53,-271,q),
(77,-304,l),
(97,-297,o),
(134,-265,o),
(162,-223,o),
(179,-176,o),
(179,-149,qs),
(181,-118,o),
(149,-70,o),
(113,-70,qs),
(90,-70,o),
(56,-100,o),
(56,-128,qs),
(56,-153,o),
(88,-183,o),
(114,-185,q),
(108,-209,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 3 2 1 76 31 30 2 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 3 4 134 0 2 2 0 97 1 1 0 0 41 77 5 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 3 4 134 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 5 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 23 21 0 15 0 15 33 35 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,531,o),
(5,517,q),
(29,484,l),
(49,491,o),
(86,523,o),
(114,565,o),
(131,612,o),
(131,639,qs),
(131,668,o),
(118,692,qs),
(103,718,o),
(68,718,qs),
(43,718,o),
(8,688,o),
(8,660,qs),
(8,635,o),
(40,605,o),
(66,603,q),
(60,579,o)
);
},
{
closed = 1;
nodes = (
(247,241,ls),
(247,281,o),
(263,360,o),
(286,393,qs),
(305,419,o),
(369,458,o),
(409,458,qs),
(451,458,o),
(501,426,o),
(528,373,o),
(537,305,o),
(537,268,qs),
(537,0,l),
(622,0,l),
(622,291,ls),
(622,342,o),
(602,431,o),
(556,496,o),
(478,533,o),
(421,533,qs),
(397,533,o),
(346,523,o),
(300,501,o),
(261,469,o),
(248,447,q),
(244,527,l),
(162,527,l),
(162,0,l),
(247,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
16 15 2 4 1 22 1 3 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 48 77 0 4 4 1 97 2 1 1 1 41 77 6 5 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 0 0 48 77 0 1 1 41 77 0 4 4 2 97 0 2 2 49 77 6 5 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
19 19 19 47 19 47 37 21 37 29 37 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(567,117,l),
(198,707,l),
(87,707,l),
(87,0,l),
(174,0,l),
(174,587,l),
(546,0,l),
(565,0,l),
(566,-54,o),
(533,-106,o),
(479,-106,qs),
(432,-106,l),
(432,-180,l),
(489,-180,ls),
(578,-180,o),
(654,-98,o),
(654,-10,qs),
(654,707,l),
(567,707,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 12 2 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
6 5 2 4 4 38 77 3 1 2 2 39 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 0 101 6 5 2 4 4 38 77 3 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 18 0 18 17 18 18 33 35 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,431,o),
(461,496,o),
(383,533,o),
(326,533,qs),
(302,533,o),
(251,523,o),
(205,501,o),
(166,469,o),
(153,447,q),
(149,527,l),
(67,527,l),
(67,0,l),
(152,0,l),
(152,241,ls),
(152,281,o),
(168,360,o),
(191,393,qs),
(210,419,o),
(274,458,o),
(314,458,qs),
(356,458,o),
(406,426,o),
(433,373,o),
(442,305,o),
(442,268,qs),
(442,-1,ls),
(442,-52,o),
(406,-106,o),
(352,-106,qs),
(304,-106,l),
(304,-180,l),
(362,-180,ls),
(451,-180,o),
(527,-98,o),
(527,-10,qs),
(527,291,ls),
(527,342,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 4 97 5 1 4 4 41 77 0 3 3 39 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 0 101 0 2 2 4 97 5 1 4 4 41 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 0 101 0 4 4 41 77 0 2 2 5 97 0 5 5 49 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 17 22 39 33 35 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = eng;
unicode = 331;
},
{
glyphname = oe;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(937,241,o),
(938,259,o),
(938,268,qs),
(940,308,o),
(917,402,o),
(861,483,o),
(769,533,o),
(706,533,qs),
(644,533,o),
(554,493,o),
(523,457,qs),
(513,445,o),
(504,432,q),
(495,445,o),
(485,457,qs),
(454,493,o),
(362,533,o),
(299,533,qs),
(237,533,o),
(141,493,o),
(78,421,o),
(47,322,o),
(47,263,qs),
(47,204,o),
(78,105,o),
(141,34,o),
(234,-6,o),
(297,-6,qs),
(360,-6,o),
(454,34,o),
(485,69,qs),
(494,80,o),
(502,91,q),
(511,80,o),
(520,69,qs),
(551,34,o),
(644,-6,o),
(707,-6,qs),
(744,-6,o),
(816,11,o),
(875,47,o),
(918,103,o),
(927,141,q),
(840,141,l),
(833,121,o),
(805,93,o),
(769,76,o),
(728,69,o),
(709,69,qs),
(670,69,o),
(611,94,o),
(571,138,o),
(548,197,o),
(545,232,q),
(936,232,l)
);
},
{
closed = 1;
nodes = (
(192,99,o),
(151,152,o),
(132,222,o),
(132,263,qs),
(132,303,o),
(151,374,o),
(192,427,o),
(254,457,o),
(297,457,qs),
(340,457,o),
(403,427,o),
(444,374,o),
(463,303,o),
(463,263,qs),
(463,222,o),
(444,152,o),
(403,99,o),
(340,69,o),
(297,69,qs),
(254,69,o)
);
},
{
closed = 1;
nodes = (
(550,336,o),
(572,391,o),
(610,433,o),
(666,457,o),
(703,457,qs),
(770,457,o),
(850,373,o),
(852,306,q),
(547,306,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
41 1 10 8 21 1 0 1 2 76 0 1 6 0 6 1 0 128 13 1 10 11 1 6 1 10 6 103 9 1 8 8 4 97 5 1 4 4 49 77 12 7 2 0 0 2 97 3 1 2 2 50 2 78 75 75 56 55 0 0 75 83 75 83 79 77 66 64 55 74 56 74 0 54 0 54 40 40 40 36 20 36 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 985;
}
);
note = oe;
unicode = 339;
},
{
glyphname = OE;
kernLeft = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,667,o),
(525,687,qs),
(463,715,o),
(381,715,qs),
(298,715,o),
(174,660,o),
(90,564,o),
(48,431,o),
(48,353,qs),
(48,275,o),
(90,143,o),
(174,47,o),
(298,-8,o),
(381,-8,qs),
(463,-8,o),
(525,19,qs),
(565,39,o),
(597,69,q),
(597,0,l),
(1072,0,l),
(1072,79,l),
(684,79,l),
(684,310,l),
(1033,310,l),
(1033,390,l),
(684,390,l),
(684,628,l),
(1072,628,l),
(1072,707,l),
(597,707,l),
(597,638,l)
);
},
{
closed = 1;
nodes = (
(535,593,o),
(569,556,qs),
(585,539,o),
(597,518,q),
(597,188,l),
(585,168,o),
(570,151,qs),
(536,114,o),
(444,71,o),
(381,71,qs),
(318,71,o),
(225,116,o),
(165,194,o),
(136,296,o),
(136,353,qs),
(136,410,o),
(166,513,o),
(226,591,o),
(318,636,o),
(381,636,qs),
(443,636,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
30 1 1 0 47 1 2 1 46 1 4 3 12 1 5 4 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
30 1 8 0 47 1 2 1 46 1 4 3 12 1 5 9 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 4 2 3 103 10 8 2 1 1 0 97 7 1 0 0 38 77 9 1 4 4 5 97 6 1 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 3 4 2 3 103 10 1 8 8 7 97 0 7 7 46 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 77 0 9 9 6 97 0 6 6 47 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
32 31 42 40 31 51 32 51 40 36 17 17 17 17 17 16 11 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1120;
}
);
note = OE;
unicode = 338;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,707,l),
(273,75,l),
(112,707,l),
(14,707,l),
(206,0,l),
(337,0,l),
(491,624,l),
(645,0,l),
(777,0,l),
(969,707,l),
(875,707,l),
(714,75,l),
(560,707,l),
(560,707,l)
);
},
{
closed = 1;
nodes = (
(465,949,l),
(373,949,l),
(473,808,l),
(550,808,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 6 5 0 5 6 0 128 0 5 5 44 77 4 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 5 6 5 133 7 1 6 0 6 133 4 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
14 14 14 17 14 17 18 18 17 18 17 18 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,0,l),
(421,427,l),
(551,0,l),
(667,0,l),
(831,527,l),
(734,527,l),
(610,82,l),
(479,527,l),
(364,527,l),
(234,82,l),
(108,527,l),
(12,527,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(389,769,l),
(297,769,l),
(397,628,l),
(474,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
10 5 2 3 3 0 1 76 0 5 6 5 133 7 1 6 0 6 133 2 1 2 0 0 41 77 4 1 3 3 39 3 78 13 13 13 16 13 16 18 18 17 18 18 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 843;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,707,l),
(273,75,l),
(112,707,l),
(14,707,l),
(206,0,l),
(337,0,l),
(491,624,l),
(645,0,l),
(777,0,l),
(969,707,l),
(875,707,l),
(714,75,l),
(560,707,l),
(560,707,l)
);
},
{
closed = 1;
nodes = (
(510,808,l),
(610,949,l),
(518,949,l),
(433,808,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 6 5 0 5 6 0 128 0 5 5 44 77 4 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 6 5 133 0 6 0 6 133 4 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 18 17 18 17 18 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,0,l),
(421,427,l),
(551,0,l),
(667,0,l),
(831,527,l),
(734,527,l),
(610,82,l),
(479,527,l),
(364,527,l),
(234,82,l),
(108,527,l),
(12,527,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(449,628,l),
(549,769,l),
(457,769,l),
(372,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
10 5 2 3 3 0 1 76 0 5 6 5 133 0 6 0 6 133 2 1 2 0 0 41 77 4 1 3 3 39 3 78 17 17 18 17 18 18 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 843;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,707,l),
(273,75,l),
(112,707,l),
(14,707,l),
(206,0,l),
(337,0,l),
(491,624,l),
(645,0,l),
(777,0,l),
(969,707,l),
(875,707,l),
(714,75,l),
(560,707,l),
(560,707,l)
);
},
{
closed = 1;
nodes = (
(307,869,o),
(307,844,qs),
(307,819,o),
(340,788,o),
(364,788,qs),
(389,788,o),
(422,819,o),
(422,844,qs),
(422,869,o),
(389,900,o),
(364,900,qs),
(340,900,o)
);
},
{
closed = 1;
nodes = (
(573,869,o),
(573,844,qs),
(573,819,o),
(605,788,o),
(629,788,qs),
(654,788,o),
(687,819,o),
(687,844,qs),
(687,869,o),
(654,900,o),
(629,900,qs),
(605,900,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
11 6 1 3 1 0 1 76 10 7 9 3 5 8 1 6 0 5 6 105 4 3 2 0 0 38 77 2 1 1 1 39 1 78 27 26 15 14 33 31 26 37 27 37 21 19 14 25 15 25 18 17 18 17 18 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,0,l),
(421,427,l),
(551,0,l),
(667,0,l),
(831,527,l),
(734,527,l),
(610,82,l),
(479,527,l),
(364,527,l),
(234,82,l),
(108,527,l),
(12,527,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(221,686,o),
(221,661,qs),
(221,636,o),
(254,605,o),
(278,605,qs),
(303,605,o),
(336,636,o),
(336,661,qs),
(336,686,o),
(303,717,o),
(278,717,qs),
(254,717,o)
);
},
{
closed = 1;
nodes = (
(507,686,o),
(507,661,qs),
(507,636,o),
(539,605,o),
(563,605,qs),
(588,605,o),
(621,636,o),
(621,661,qs),
(621,686,o),
(588,717,o),
(563,717,qs),
(539,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
10 5 2 3 3 0 1 76 8 1 6 6 5 97 10 7 9 3 5 5 46 77 2 1 2 0 0 41 77 4 1 3 3 39 3 78 26 25 14 13 32 30 25 36 26 36 20 18 13 24 14 24 18 17 18 18 16 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 843;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,707,l),
(14,707,l),
(264,265,l),
(264,0,l),
(351,0,l),
(351,266,l),
(600,707,l),
(501,707,l),
(309,353,l)
);
},
{
closed = 1;
nodes = (
(290,927,l),
(198,927,l),
(298,786,l),
(375,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
8 5 2 3 1 0 1 76 0 3 4 3 133 5 1 4 0 4 133 2 1 0 0 38 77 0 1 1 39 1 78 9 9 9 12 9 12 19 18 18 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,274,ls),
(445,236,o),
(432,164,o),
(413,134,qs),
(396,105,o),
(333,67,o),
(288,67,qs),
(243,67,o),
(189,100,o),
(161,154,o),
(152,224,o),
(152,260,qs),
(152,527,l),
(67,527,l),
(67,236,ls),
(67,182,o),
(87,93,o),
(134,29,o),
(213,-7,o),
(273,-8,qs),
(299,-8,o),
(350,1,o),
(395,20,o),
(434,51,o),
(447,71,q),
(447,8,ls),
(447,-28,o),
(430,-90,o),
(393,-135,o),
(335,-160,o),
(294,-160,qs),
(245,-160,o),
(156,-124,o),
(117,-93,q),
(80,-160,l),
(125,-202,o),
(232,-235,o),
(299,-236,qs),
(410,-236,o),
(530,-115,o),
(530,0,qs),
(530,527,l),
(445,527,l)
);
},
{
closed = 1;
nodes = (
(280,769,l),
(188,769,l),
(288,628,l),
(365,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
17 1 4 3 8 1 1 2 2 76 7 1 1 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 7 6 133 9 1 7 3 7 133 8 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 7 6 133 9 1 7 3 7 133 0 1 0 0 1 0 101 8 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
43 43 0 0 43 46 43 46 45 44 0 42 0 42 37 21 41 37 35 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,505,ls),
(172,536,o),
(195,585,o),
(236,618,o),
(290,636,o),
(321,636,qs),
(340,636,o),
(380,628,o),
(416,611,o),
(446,584,o),
(455,565,q),
(293,347,l),
(318,337,o),
(377,312,o),
(409,298,qs),
(438,286,o),
(497,253,o),
(534,223,o),
(560,180,o),
(560,155,qs),
(560,118,o),
(508,71,o),
(463,71,qs),
(420,71,o),
(358,104,o),
(350,139,q),
(262,139,l),
(267,104,o),
(301,49,o),
(353,11,o),
(421,-8,o),
(460,-8,qs),
(501,-8,o),
(570,15,o),
(619,57,o),
(647,118,o),
(647,156,qs),
(647,207,o),
(601,279,o),
(565,303,qs),
(530,328,o),
(448,367,o),
(408,384,q),
(552,565,l),
(543,602,o),
(499,659,o),
(438,696,o),
(365,715,o),
(327,715,qs),
(276,715,o),
(187,690,o),
(122,639,o),
(85,564,o),
(85,513,qs),
(85,0,l),
(172,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
44 43 12 11 4 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 3 3 1 97 6 5 2 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 6 1 5 5 39 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 55 0 55 47 34 20 47 37 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = uni0405;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,625,o),
(456,599,o),
(485,557,o),
(489,526,q),
(574,526,l),
(571,589,o),
(511,669,o),
(466,689,qs),
(437,703,o),
(372,714,o),
(332,715,qs),
(283,715,o),
(196,695,o),
(126,649,o),
(82,573,o),
(82,517,qs),
(82,457,o),
(136,378,o),
(176,359,qs),
(201,346,o),
(261,327,o),
(323,313,o),
(385,301,o),
(413,292,qs),
(455,280,o),
(505,234,o),
(505,187,qs),
(505,156,o),
(479,112,o),
(435,84,o),
(378,71,o),
(348,71,qs),
(317,71,o),
(254,81,o),
(200,107,o),
(158,151,o),
(148,185,q),
(57,185,l),
(68,132,o),
(122,58,o),
(198,12,o),
(291,-8,o),
(342,-8,qs),
(393,-8,o),
(484,15,o),
(553,65,o),
(594,143,o),
(594,203,qs),
(594,267,o),
(521,345,o),
(460,366,qs),
(434,375,o),
(379,387,o),
(322,399,o),
(268,413,o),
(244,423,qs),
(214,436,o),
(172,485,o),
(172,525,qs),
(172,558,o),
(201,601,o),
(247,626,o),
(304,636,o),
(332,636,qs),
(361,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 28 1 78 1 0 60 59 54 52 33 31 27 26 22 20 0 64 1 64 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = uni0405;
unicode = 1029;
},
{
glyphname = uni0455;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,420,o),
(372,391,q),
(451,391,l),
(447,422,o),
(415,478,o),
(386,498,qs),
(338,533,o),
(257,533,qs),
(219,533,o),
(151,519,o),
(121,501,qs),
(93,483,o),
(57,426,o),
(55,382,qs),
(55,340,o),
(89,282,o),
(117,265,qs),
(138,252,o),
(186,237,o),
(237,226,o),
(288,217,o),
(312,212,qs),
(346,205,o),
(385,175,o),
(385,145,qs),
(385,118,o),
(359,88,o),
(321,73,o),
(279,69,o),
(263,69,qs),
(241,69,o),
(206,75,o),
(167,91,o),
(133,119,o),
(125,143,q),
(39,143,l),
(45,100,o),
(88,43,o),
(149,8,o),
(223,-6,o),
(259,-6,qs),
(296,-6,o),
(371,8,o),
(430,42,o),
(469,101,o),
(470,149,qs),
(470,248,o),
(374,278,qs),
(362,282,o),
(327,290,o),
(288,297,o),
(248,304,o),
(231,308,qs),
(190,316,o),
(139,350,o),
(139,384,qs),
(140,408,o),
(165,437,o),
(200,452,o),
(237,457,o),
(255,457,qs),
(303,456,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 59 58 54 52 32 30 26 25 21 19 0 61 1 61 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 509;
}
);
note = uni0455;
unicode = 1109;
},
{
glyphname = uni0408;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,90,o),
(162,-8,o),
(266,-8,qs),
(324,-8,o),
(404,29,o),
(454,96,o),
(476,188,o),
(476,244,qs),
(476,707,l),
(389,707,l),
(389,226,ls),
(389,192,o),
(377,135,o),
(348,94,o),
(301,71,o),
(266,71,qs),
(200,72,o),
(136,138,o),
(130,195,q),
(42,195,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 20 77 0 0 0 2 97 0 2 2 28 2 78 0 0 0 19 0 19 37 21 34 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = uni0408;
unicode = 1032;
},
{
glyphname = uni0458;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,689,o),
(80,664,qs),
(80,639,o),
(112,607,o),
(137,607,qs),
(161,607,o),
(195,639,o),
(195,664,qs),
(195,689,o),
(161,720,o),
(137,720,qs),
(112,720,o)
);
},
{
closed = 1;
nodes = (
(95,-1,ls),
(95,-52,o),
(59,-106,o),
(5,-106,qs),
(-31,-106,l),
(-31,-180,l),
(15,-180,ls),
(104,-180,o),
(180,-98,o),
(180,-10,qs),
(180,527,l),
(95,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 97 5 1 0 0 27 77 6 1 4 4 22 77 0 3 3 2 98 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 2 3 2 102 0 1 1 0 97 5 1 0 0 27 77 6 1 4 4 22 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
12 12 1 0 12 23 12 23 20 18 17 15 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 254;
}
);
note = uni0458;
unicode = 1112;
},
{
glyphname = uni040E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,-1,o),
(269,20,o),
(306,53,qs),
(330,75,o),
(373,141,o),
(392,179,qs),
(420,234,o),
(471,351,o),
(495,408,qs),
(527,484,o),
(590,635,o),
(622,707,q),
(528,707,l),
(350,269,l),
(118,707,l),
(15,707,l),
(300,179,l),
(283,147,o),
(246,109,o),
(204,88,o),
(154,81,o),
(123,81,q),
(123,-1,l)
);
},
{
closed = 1;
nodes = (
(239,879,o),
(237,914,q),
(159,914,l),
(161,849,o),
(250,781,o),
(329,781,qs),
(408,781,o),
(499,849,o),
(501,914,q),
(423,914,l),
(421,879,o),
(372,847,o),
(330,847,qs),
(288,847,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
8 5 2 0 1 1 76 7 1 5 4 5 133 8 1 4 0 6 1 4 6 105 2 1 1 1 20 77 0 0 0 3 97 0 3 3 21 3 78 24 23 34 33 31 29 27 26 23 36 24 36 27 18 21 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = uni040E;
unicode = 1038;
},
{
glyphname = uni045E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,527,l),
(17,527,l),
(253,-17,l),
(239,-50,o),
(212,-98,o),
(175,-130,o),
(125,-145,o),
(89,-145,q),
(89,-226,l),
(107,-226,ls),
(150,-226,o),
(218,-209,o),
(255,-176,qs),
(280,-154,o),
(321,-82,o),
(354,-1,o),
(381,80,o),
(393,112,qs),
(542,527,l),
(446,527,l),
(300,83,l)
);
},
{
closed = 1;
nodes = (
(198,699,o),
(196,734,q),
(118,734,l),
(120,669,o),
(209,601,o),
(288,601,qs),
(367,601,o),
(458,669,o),
(460,734,q),
(382,734,l),
(380,699,o),
(331,667,o),
(289,667,qs),
(247,667,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 17 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 4 5 133 8 1 4 0 6 0 4 6 105 3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 4 5 133 8 1 4 0 6 0 4 6 105 0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
22 21 32 31 29 27 25 24 21 34 22 34 21 17 40 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = uni045E;
unicode = 1118;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = styleNames;
values = (
{
language = ENG;
value = Regular;
}
);
},
{
key = postscriptFullName;
value = "Onest Regular";
},
{
key = postscriptFontName;
value = "Onest-Regular";
}
);
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 15;
"@MMK_R_O" = -15;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_colon" = 20;
"@MMK_R_period" = 30;
"@MMK_R_uni0422" = -50;
"@MMK_R_w" = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -15;
"@MMK_R_O" = 5;
"@MMK_R_W" = -5;
"@MMK_R_Y" = -20;
"@MMK_R_period" = -30;
"@MMK_R_uni0417" = 5;
};
"@MMK_L_K_alt" = {
"@MMK_R_abreve" = -10;
"@MMK_R_uni0422" = 10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_O" = -5;
"@MMK_R_abreve" = -35;
"@MMK_R_period" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -60;
"@MMK_R_O" = -20;
"@MMK_R_abreve" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_d" = -70;
"@MMK_R_period" = -80;
"@MMK_R_r" = -30;
"@MMK_R_w" = -20;
};
"@MMK_L_period" = {
"@MMK_R_A" = 30;
"@MMK_R_O" = -30;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -80;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0422" = -80;
};
"@MMK_L_r" = {
"@MMK_R_d" = -10;
"@MMK_R_t" = 30;
};
"@MMK_L_uni0413" = {
"@MMK_R_colon" = -40;
"@MMK_R_period" = -100;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0432" = -40;
"@MMK_R_uni0433" = -50;
"@MMK_R_uni0444" = -80;
};
"@MMK_L_uni0414" = {
"@MMK_R_period" = 30;
};
"@MMK_L_uni0417" = {
"@MMK_R_period" = -30;
"@MMK_R_uni0417" = 5;
};
"@MMK_L_uni0422" = {
"@MMK_R_A" = -50;
"@MMK_R_abreve" = -60;
"@MMK_R_colon" = -20;
"@MMK_R_d" = -50;
"@MMK_R_period" = -80;
"@MMK_R_r" = -20;
"@MMK_R_uni0422" = 40;
};
"@MMK_L_uni0433" = {
"@MMK_R_period" = -40;
"@MMK_R_uni0444" = -10;
};
"@MMK_L_uni0434" = {
"@MMK_R_period" = 40;
};
A = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aacute = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Acircumflex = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Adieresis = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Agrave = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Amacron = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aogonek = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aring = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Atilde = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
B = {
V = -10;
W = -10;
W_alt = -10;
Wacute = -10;
Wcircumflex = -10;
Wdieresis = -10;
Wgrave = -10;
X = -10;
Y = -10;
Yacute = -10;
Ycircumflex = -10;
Ydieresis = -10;
Ygrave = -10;
};
C = {
J = 10;
V = -25;
X = -20;
};
Cacute = {
J = 10;
V = -25;
X = -20;
};
Ccaron = {
J = 10;
V = -25;
X = -20;
};
Ccedilla = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ccircumflex = {
J = 10;
V = -25;
X = -20;
};
Cdotaccent = {
J = 10;
V = -25;
X = -20;
};
D = {
C = 15;
Cacute = 15;
Ccaron = 15;
Ccedilla = 15;
Ccircumflex = 15;
Cdotaccent = 15;
G = 15;
Gbreve = 15;
Gcircumflex = 15;
Gdotaccent = 15;
J = 10;
O = 15;
OE = 15;
Oacute = 15;
Obreve = 15;
Ocircumflex = 15;
Odieresis = 15;
Ograve = 15;
Ohungarumlaut = 15;
Omacron = 15;
Oslash = 15;
Otilde = 15;
Q = 15;
S = 15;
Sacute = 15;
Scaron = 15;
Scedilla = 15;
Scircumflex = 15;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
comma = -20;
d = 10;
period = -20;
quotedblbase = -20;
uni0122 = 15;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Dcaron = {
J = 10;
V = -25;
X = -20;
};
Dcroat = {
J = 10;
V = -25;
X = -20;
};
E = {
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
};
Eth = {
J = 10;
V = -25;
X = -20;
};
F = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
J = -30;
T = 20;
Tcaron = 20;
a = -30;
a00E2.alt = -30;
a00E4.alt = -30;
a0103.alt = -30;
a2_alt = -25;
a_alt = -30;
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
agrave = -30;
amacron = -30;
aogonek = -30;
aring = -30;
atilde = -30;
c = -25;
c_alt = -25;
cacute = -25;
ccaron = -25;
ccedilla = -25;
ccircumflex = -25;
cdotaccent = -25;
comma = -30;
d = -25;
dcaron = -25;
dcroat = -25;
e = -25;
eacute = -25;
ebreve = -25;
ecaron = -25;
ecircumflex = -25;
edieresis = -25;
edotaccent = -25;
egrave = -25;
emacron = -25;
eogonek = -25;
eth = -25;
g = -25;
gbreve = -25;
gcircumflex = -25;
gdotaccent = -25;
o = -25;
oacute = -25;
obreve = -25;
ocircumflex = -25;
odieresis = -25;
oe = -25;
ograve = -25;
ohungarumlaut = -25;
omacron = -25;
oslash = -25;
otilde = -25;
period = -30;
q = -25;
quotedblbase = -30;
quotedblright = 20;
quoteright = 20;
s = -25;
s_alt = -25;
sacute = -25;
scaron = -25;
scedilla = -25;
scircumflex = -25;
uni0123 = -25;
uni0162 = 20;
uni0219 = -25;
uni021A = 20;
uni0410 = -50;
uni0422 = 20;
uni0430 = -30;
};
G = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Gbreve = {
J = 10;
V = -25;
X = -20;
};
Gcircumflex = {
J = 10;
V = -25;
X = -20;
};
Gdotaccent = {
J = 10;
V = -25;
X = -20;
};
I = {
bracketright = 40;
};
J = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -10;
};
K = {
v = -30;
y2_alt = -40;
};
K_alt = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
d = -20;
uni0122 = -30;
v = -30;
w = -20;
w_alt = -20;
wacute = -20;
wcircumflex = -20;
wdieresis = -20;
wgrave = -20;
y2_alt = -40;
};
L = {
A = 20;
Aacute = 20;
Acircumflex = 20;
Adieresis = 20;
Agrave = 20;
Amacron = 20;
Aogonek = 20;
Aring = 20;
Atilde = 20;
J = 30;
T = -40;
Tcaron = -40;
V = -50;
W = -40;
W_alt = -40;
Wacute = -40;
Wcircumflex = -40;
Wdieresis = -40;
Wgrave = -40;
X = 10;
Y = -80;
Yacute = -80;
Ycircumflex = -80;
Ydieresis = -80;
Ygrave = -80;
a = 10;
a00E2.alt = 10;
a00E4.alt = 10;
a0103.alt = 10;
a2_alt = 10;
a_alt = 10;
aacute = 10;
abreve = 10;
acircumflex = 10;
adieresis = 10;
agrave = 10;
amacron = 10;
aogonek = 10;
aring = 10;
atilde = 10;
c = 10;
c_alt = 10;
cacute = 10;
ccaron = 10;
ccedilla = 10;
ccircumflex = 10;
cdotaccent = 10;
colon = 20;
comma = 40;
d = 10;
dcaron = 10;
dcroat = 10;
e = 10;
eacute = 10;
ebreve = 10;
ecaron = 10;
ecircumflex = 10;
edieresis = 10;
edotaccent = 10;
egrave = 10;
emacron = 10;
eogonek = 10;
eth = 10;
g = 10;
gbreve = 10;
gcircumflex = 10;
gdotaccent = 10;
j = 20;
o = 10;
oacute = 10;
obreve = 10;
ocircumflex = 10;
odieresis = 10;
oe = 10;
ograve = 10;
ohungarumlaut = 10;
omacron = 10;
oslash = 10;
otilde = 10;
period = 40;
q = 10;
quotedblbase = 40;
quoteright = -60;
s = 10;
s_alt = 10;
sacute = 10;
scaron = 10;
scedilla = 10;
scircumflex = 10;
semicolon = 20;
uni0123 = 10;
uni0162 = -40;
uni0219 = 10;
uni021A = -40;
uni0410 = 20;
uni0422 = -40;
uni0430 = 10;
y2_alt = -10;
z = 20;
};
O = {
J = 10;
V = -25;
X = -20;
};
Oacute = {
J = 10;
V = -25;
X = -20;
};
Obreve = {
J = 10;
V = -25;
X = -20;
};
Ocircumflex = {
J = 10;
V = -25;
X = -20;
};
Odieresis = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ograve = {
J = 10;
V = -25;
X = -20;
};
Ohungarumlaut = {
J = 10;
V = -25;
X = -20;
};
Omacron = {
J = 10;
V = -25;
X = -20;
};
Oslash = {
J = 10;
V = -25;
X = -20;
};
Otilde = {
J = 10;
V = -25;
X = -20;
};
P = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = 10;
Ccedilla = 10;
G = 10;
J = -50;
Odieresis = 10;
Q = 10;
S = 10;
X = -25;
Y = -15;
Yacute = -15;
Ycircumflex = -15;
Ydieresis = -15;
Ygrave = -15;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
j = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -90;
q = -10;
quotedblbase = -60;
quotedblright = 20;
quoteright = 20;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -50;
uni0430 = -20;
};
Q = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -20;
colon = 20;
semicolon = 20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
R = {
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
a = -10;
a00E2.alt = -10;
a00E4.alt = -10;
a0103.alt = -10;
a2_alt = -10;
a_alt = -10;
aacute = -10;
abreve = -10;
acircumflex = -10;
adieresis = -10;
agrave = -10;
amacron = -10;
aogonek = -10;
aring = -10;
atilde = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0430 = -10;
};
S = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Sacute = {
J = 10;
V = -25;
X = -20;
};
Scaron = {
J = 10;
V = -25;
X = -20;
};
Scedilla = {
J = 10;
V = -25;
X = -20;
};
Scircumflex = {
J = 10;
V = -25;
X = -20;
};
T = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
Tcaron = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
U = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -70;
q = -10;
quotedblbase = -60;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -10;
uni0430 = -20;
};
V = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = -25;
Cacute = -25;
Ccaron = -25;
Ccedilla = -25;
Ccircumflex = -25;
Cdotaccent = -25;
G = -25;
Gbreve = -25;
Gcircumflex = -25;
Gdotaccent = -25;
J = -80;
O = -25;
OE = -25;
Oacute = -25;
Obreve = -25;
Ocircumflex = -25;
Odieresis = -25;
Ograve = -25;
Ohungarumlaut = -25;
Omacron = -25;
Oslash = -25;
Otilde = -25;
Q = -25;
S = -25;
Sacute = -25;
Scaron = -25;
Scedilla = -25;
Scircumflex = -25;
a = -50;
a00E2.alt = -50;
a00E4.alt = -50;
a0103.alt = -50;
a2_alt = -50;
a_alt = -50;
aacute = -50;
abreve = -50;
acircumflex = -50;
adieresis = -50;
agrave = -50;
amacron = -50;
aogonek = -50;
aring = -50;
atilde = -50;
braceright = 20;
bracketright = 40;
c = -50;
c_alt = -50;
cacute = -50;
ccaron = -50;
ccedilla = -50;
ccircumflex = -50;
cdotaccent = -50;
colon = -20;
comma = -80;
d = -50;
dcaron = -50;
dcroat = -50;
e = -50;
eacute = -50;
ebreve = -50;
ecaron = -50;
ecircumflex = -50;
edieresis = -50;
edotaccent = -50;
egrave = -50;
emacron = -50;
eogonek = -50;
eth = -50;
g = -50;
gbreve = -50;
gcircumflex = -50;
gdotaccent = -50;
m = -20;
n = -20;
o = -50;
oacute = -50;
obreve = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
ohungarumlaut = -50;
omacron = -50;
oslash = -50;
otilde = -50;
p = -20;
period = -80;
q = -50;
quotedblbase = -80;
quotedblright = 10;
quoteright = 20;
r = -20;
racute = -20;
rcaron = -20;
s = -50;
s_alt = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
scircumflex = -50;
semicolon = -20;
space = -80;
u = -20;
uni0122 = -25;
uni0123 = -50;
uni0157 = -20;
uni0219 = -50;
uni0410 = -50;
uni0430 = -50;
z = -20;
};
W = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
W_alt = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
uni0410 = -40;
};
Wacute = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wcircumflex = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wdieresis = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wgrave = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
X = {
C = -20;
Cacute = -20;
Ccaron = -20;
Ccedilla = -30;
Ccircumflex = -20;
Cdotaccent = -20;
G = -20;
Gbreve = -20;
Gcircumflex = -20;
Gdotaccent = -20;
O = -20;
OE = -20;
Oacute = -20;
Obreve = -20;
Ocircumflex = -20;
Odieresis = -30;
Ograve = -20;
Ohungarumlaut = -20;
Omacron = -20;
Oslash = -20;
Otilde = -20;
Q = -20;
S = -30;
Sacute = -20;
Scaron = -20;
Scedilla = -20;
Scircumflex = -20;
bracketright = 40;
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
uni0122 = -20;
};
Y = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Yacute = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ycircumflex = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ydieresis = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ygrave = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Z = {
bracketright = 20;
colon = 30;
quoteright = 20;
quotesingle = 40;
semicolon = 30;
};
a = {
uni0327 = -30;
};
a00E2.alt = {
uni0327 = -30;
};
a00E4.alt = {
uni0327 = -30;
};
a0103.alt = {
uni0327 = -30;
};
a_alt = {
uni0327 = -30;
};
aacute = {
uni0327 = -30;
};
abreve = {
uni0327 = -30;
};
acircumflex = {
uni0327 = -30;
};
adieresis = {
uni0327 = -30;
};
agrave = {
uni0327 = -30;
};
amacron = {
uni0327 = -30;
};
aogonek = {
uni0327 = -30;
};
aring = {
uni0327 = -30;
};
atilde = {
uni0327 = -30;
};
b = {
c = 10;
d = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
backslash = {
a2_alt = 20;
backslash = -210;
uni0414 = 60;
uni0432 = 40;
uni0433 = 40;
uni0434 = 60;
uni0435 = 20;
uni0436 = 40;
uni0437 = 20;
uni0438 = 40;
uni043A = 40;
uni043C = 40;
uni043D = 40;
uni043E = 20;
uni043F = 40;
uni0440 = 40;
uni0441 = 20;
uni0444 = 20;
uni0446 = 40;
uni0447 = -20;
uni0448 = 40;
uni0449 = 40;
uni044B = 40;
uni044C = 40;
uni044D = 20;
uni044E = 40;
uni044F = 40;
uni0451 = 20;
uni0491 = 40;
};
braceleft = {
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
j = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0434 = 40;
};
bracketleft = {
I = 40;
T = 40;
Tcaron = 40;
V = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
X = 40;
Y = 40;
Yacute = 40;
Ycircumflex = 40;
Ydieresis = 40;
Ygrave = 40;
Z = 20;
i = 40;
j = 40;
l = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0425 = 40;
uni0434 = 40;
uni0443 = 20;
};
c = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
c_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
cacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
ccircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
cdotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
colon = {
backslash = -70;
slash = -30;
};
comma = {
C = -20;
Cacute = -20;
Ccaron = -20;
Ccedilla = -20;
Ccircumflex = -20;
Cdotaccent = -20;
G = -20;
Gbreve = -20;
Gcircumflex = -20;
Gdotaccent = -20;
O = -20;
OE = -20;
Oacute = -20;
Obreve = -20;
Ocircumflex = -20;
Odieresis = -20;
Ograve = -20;
Ohungarumlaut = -20;
Omacron = -20;
Oslash = -20;
Otilde = -20;
Q = -20;
S = -20;
Sacute = -20;
Scaron = -20;
Scedilla = -20;
Scircumflex = -20;
U = -60;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -30;
two = 40;
uni0122 = -20;
uni0414 = 30;
uni0417 = -20;
uni0421 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -40;
uni0443 = -40;
v = -40;
y2_alt = -40;
zero = -20;
};
dcaron = {
a2_alt = -40;
c = -40;
c_alt = -40;
cacute = -40;
ccaron = -40;
ccedilla = -40;
ccircumflex = -40;
cdotaccent = -40;
d = -40;
dcaron = -40;
dcroat = -40;
e = -40;
eacute = -40;
ebreve = -40;
ecaron = -40;
ecircumflex = -40;
edieresis = -40;
edotaccent = -40;
egrave = -40;
emacron = -40;
eogonek = -40;
eth = -40;
g = -40;
gbreve = -40;
gcircumflex = -40;
gdotaccent = -40;
o = -40;
oacute = -40;
obreve = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
ohungarumlaut = -40;
omacron = -40;
oslash = -40;
otilde = -40;
q = -40;
s = -40;
s_alt = -40;
sacute = -40;
scaron = -40;
scedilla = -40;
scircumflex = -40;
uni0123 = -40;
uni0219 = -40;
};
e = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ebreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecircumflex = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
edieresis = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
egrave = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
emacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eogonek = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eth = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
f = {
a2_alt = -10;
bracketright = 40;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 50;
quotesingle = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
four = {
comma = 20;
four = 20;
period = 20;
quotedblbase = 20;
};
i = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
j = {
bracketright = 40;
j = 20;
quoteright = 20;
};
k_alt = {
d = -10;
};
l = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
lcaron = {
a2_alt = -40;
c = -40;
c_alt = -40;
cacute = -40;
ccaron = -40;
ccedilla = -40;
ccircumflex = -40;
cdotaccent = -40;
d = -40;
dcaron = -40;
dcroat = -40;
e = -40;
eacute = -40;
ebreve = -40;
ecaron = -40;
ecircumflex = -40;
edieresis = -40;
edotaccent = -40;
egrave = -40;
emacron = -40;
eogonek = -40;
eth = -40;
g = -40;
gbreve = -40;
gcircumflex = -40;
gdotaccent = -40;
o = -40;
oacute = -40;
obreve = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
ohungarumlaut = -40;
omacron = -40;
oslash = -40;
otilde = -40;
q = -40;
s = -40;
s_alt = -40;
sacute = -40;
scaron = -40;
scedilla = -40;
scircumflex = -40;
uni0123 = -40;
uni0219 = -40;
};
nine = {
comma = -20;
period = -20;
quotedblbase = -20;
seven = -20;
};
o = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
obreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ocircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
odieresis = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
oe = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ograve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ohungarumlaut = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
omacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oslash = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
otilde = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
p = {
c = 10;
f = -20;
parenright = -20;
quotedblright = -20;
t = -20;
t_alt = -20;
tbar = -20;
uni0163 = -20;
uni021B = -20;
x = -10;
y2_alt = -5;
};
parenleft = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
uni0414 = 40;
uni0422 = 40;
uni0434 = 40;
uni0443 = 10;
};
period = {
C = -20;
Ccedilla = -20;
G = -20;
Odieresis = -20;
Q = -20;
S = -20;
U = -70;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -30;
two = 40;
uni0414 = 30;
uni0417 = -20;
uni0421 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -40;
uni0443 = -40;
v = -40;
y2_alt = -40;
zero = -20;
};
q = {
j = 20;
};
quotedblbase = {
C = -20;
Cacute = -20;
Ccaron = -20;
Ccedilla = -20;
Ccircumflex = -20;
Cdotaccent = -20;
G = -20;
Gbreve = -20;
Gcircumflex = -20;
Gdotaccent = -20;
O = -20;
OE = -20;
Oacute = -20;
Obreve = -20;
Ocircumflex = -20;
Odieresis = -20;
Ograve = -20;
Ohungarumlaut = -20;
Omacron = -20;
Oslash = -20;
Otilde = -20;
Q = -20;
S = -20;
Sacute = -20;
Scaron = -20;
Scedilla = -20;
Scircumflex = -20;
U = -60;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -30;
two = 40;
uni0122 = -20;
uni0410 = 40;
uni0414 = 40;
uni0416 = 20;
uni0417 = -20;
uni041B = 20;
uni0421 = -30;
uni0424 = -50;
uni0425 = 20;
uni0427 = -80;
uni0434 = 60;
uni0436 = 20;
uni043B = 40;
uni0442 = -40;
uni0443 = -30;
uni0445 = 20;
uni0447 = -40;
v = -40;
y2_alt = -40;
zero = -20;
};
quotedblleft = {
J = -100;
T = 40;
Tcaron = 40;
V = 10;
W = 10;
W_alt = 10;
Wacute = 10;
Wcircumflex = 10;
Wdieresis = 10;
Wgrave = 10;
a2_alt = -30;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -30;
uni0162 = 40;
uni0163 = 40;
uni0219 = -30;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -40;
uni0422 = 30;
uni0423 = 30;
uni0434 = -40;
uni043B = -40;
uni0442 = 40;
uni0443 = 40;
uni0444 = -30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quotedblright = {
comma = -50;
period = -50;
quotedblbase = -50;
};
quoteleft = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
J = -100;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
comma = -50;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
f = 40;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
period = -50;
q = -20;
quotedblbase = -50;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -20;
uni0162 = 40;
uni0163 = 40;
uni0219 = -20;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -20;
uni041B = -20;
uni0422 = 40;
uni0423 = 40;
uni042A = 20;
uni0434 = -30;
uni043B = -30;
uni0442 = 30;
uni0443 = 30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quoteright = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -60;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -30;
b = 20;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
j = 20;
k = 20;
k_alt = 20;
kgreenlandic = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
uni0123 = -30;
uni0137 = 20;
uni0162 = 40;
uni0219 = -30;
uni021A = 40;
uni0410 = -40;
uni0422 = 40;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0442 = 40;
uni0443 = 40;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
quotesingle = {
A = -20;
Aacute = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
J = -80;
T = 40;
Tcaron = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
Z = 40;
b = 40;
f = 40;
t = 40;
t_alt = 40;
tbar = 40;
uni0162 = 40;
uni0163 = 40;
uni021A = 40;
uni021B = 40;
uni0410 = -20;
uni0422 = 20;
uni0423 = 20;
uni0427 = 20;
uni0442 = 40;
};
r = {
quotedblright = 40;
quoteright = 40;
y2_alt = 10;
};
racute = {
quotedblright = 40;
quoteright = 40;
y2_alt = 10;
};
rcaron = {
quotedblright = 40;
quoteright = 40;
y2_alt = 10;
};
s = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
t = -10;
t_alt = -10;
tbar = -10;
uni0163 = -10;
uni021B = -10;
x = -15;
y2_alt = -5;
};
s_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
sacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
scircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
seven = {
comma = -90;
four = -60;
one = 20;
period = -90;
quotedblbase = -90;
quotesingle = 20;
seven = 30;
three = -10;
};
slash = {
slash = -210;
uni0422 = 30;
uni0423 = 30;
};
space = {
V = -80;
W = -60;
W_alt = -60;
Wacute = -60;
Wcircumflex = -60;
Wdieresis = -60;
Wgrave = -60;
five = 40;
};
t = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
t_alt = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tbar = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tcaron = {
a2_alt = -40;
c = -40;
c_alt = -40;
cacute = -40;
ccaron = -40;
ccedilla = -40;
ccircumflex = -40;
cdotaccent = -40;
d = -40;
dcaron = -40;
dcroat = -40;
e = -40;
eacute = -40;
ebreve = -40;
ecaron = -40;
ecircumflex = -40;
edieresis = -40;
edotaccent = -40;
egrave = -40;
emacron = -40;
eogonek = -40;
eth = -40;
g = -40;
gbreve = -40;
gcircumflex = -40;
gdotaccent = -40;
o = -40;
oacute = -40;
obreve = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
ohungarumlaut = -40;
omacron = -40;
oslash = -40;
otilde = -40;
q = -40;
s = -40;
s_alt = -40;
sacute = -40;
scaron = -40;
scedilla = -40;
scircumflex = -40;
uni0123 = -40;
uni0219 = -40;
};
two = {
comma = 20;
four = -20;
period = 20;
quotedblbase = 20;
two = 15;
};
uni0122 = {
J = 10;
V = -25;
X = -20;
};
uni0136 = {
v = -30;
y2_alt = -40;
};
uni0157 = {
quotedblright = 40;
quoteright = 40;
y2_alt = 10;
};
uni0162 = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni0163 = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0219 = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
uni021A = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni021B = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0401 = {
quotedblright = 20;
uni043B = 10;
};
uni0405 = {
J = 10;
V = -25;
X = -20;
};
uni0410 = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quotedblleft = -40;
quotedblright = -40;
quoteright = -40;
quotesingle = -20;
uni0410 = 15;
uni0414 = 20;
uni0417 = -15;
uni041B = 10;
uni041E = -15;
uni0421 = -15;
uni0422 = -50;
uni0423 = -40;
uni0424 = -15;
uni0427 = -70;
uni042D = -15;
uni0434 = 10;
uni0436 = 10;
uni043B = 10;
uni0442 = -20;
uni0443 = -25;
uni0447 = -35;
v = -30;
x = 5;
y2_alt = -30;
};
uni0411 = {
comma = -10;
period = -10;
quotedblbase = -10;
uni0414 = -20;
uni042F = -20;
uni0434 = -10;
uni0436 = -20;
uni0445 = -20;
};
uni0412 = {
uni0423 = -30;
};
uni0413 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
};
uni0414 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0415 = {
quotedblright = 20;
uni043B = 10;
};
uni0416 = {
a2_alt = -20;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
uni0430 = -10;
uni0431 = -10;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0442 = -20;
uni0443 = -20;
uni0444 = -20;
uni0447 = -40;
uni044D = -20;
uni0451 = -20;
};
uni0417 = {
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni0417 = 15;
uni041B = -15;
uni041E = 15;
uni0421 = 15;
uni0422 = -20;
uni0423 = -20;
uni0424 = 15;
uni0425 = -20;
uni042D = 15;
uni0431 = 10;
uni0442 = 10;
uni0444 = 10;
};
uni041A = {
a2_alt = -20;
colon = 20;
semicolon = 20;
slash = 20;
uni0417 = -30;
uni041E = -30;
uni0421 = -30;
uni0424 = -30;
uni042D = -30;
uni0430 = -10;
uni0431 = -20;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0443 = -30;
uni0444 = -20;
uni044D = -20;
uni0451 = -20;
};
uni041E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0420 = {
a2_alt = -10;
comma = -90;
period = -90;
quotedblbase = -90;
quotedblleft = 20;
uni0410 = -60;
uni0414 = -50;
uni0416 = -20;
uni0417 = 10;
uni041E = 10;
uni0421 = 10;
uni0424 = 10;
uni0425 = -20;
uni042D = 10;
uni0430 = -10;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043B = -35;
uni043E = -10;
uni0441 = -10;
uni0442 = 20;
uni0444 = -10;
uni044D = -10;
uni044F = -10;
uni0451 = -10;
};
uni0421 = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -10;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0422 = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
a2_alt = -50;
backslash = 40;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
parenright = 40;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
u = -20;
uni0410 = -50;
uni0414 = -10;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0422 = 20;
uni0423 = 10;
uni0424 = -20;
uni042D = -20;
uni0432 = -40;
uni0433 = -40;
uni0434 = -40;
uni0435 = -50;
uni0437 = -50;
uni0438 = -40;
uni043A = -40;
uni043B = -40;
uni043C = -40;
uni043D = -40;
uni043E = -50;
uni043F = -40;
uni0440 = -40;
uni0441 = -50;
uni0444 = -50;
uni0445 = -20;
uni0446 = -40;
uni0447 = -40;
uni0448 = -40;
uni0449 = -40;
uni044B = -40;
uni044C = -40;
uni044D = -50;
uni044E = -40;
uni044F = -40;
uni0451 = -30;
uni0491 = -40;
};
uni0423 = {
a2_alt = -55;
braceright = 40;
bracketright = 40;
colon = -20;
comma = -100;
period = -100;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
semicolon = -20;
slash = -30;
uni0410 = -70;
uni0414 = -40;
uni0417 = -15;
uni041E = -15;
uni0421 = -15;
uni0422 = 10;
uni0423 = 16;
uni0424 = -15;
uni042D = -15;
uni042F = -20;
uni0430 = -60;
uni0431 = -20;
uni0432 = -30;
uni0433 = -30;
uni0434 = -70;
uni0435 = -55;
uni0436 = -10;
uni0437 = -55;
uni0438 = -30;
uni0439 = -20;
uni043A = -30;
uni043B = -50;
uni043C = -30;
uni043D = -30;
uni043E = -55;
uni043F = -30;
uni0440 = -30;
uni0441 = -55;
uni0444 = -55;
uni0446 = -30;
uni0447 = -30;
uni0448 = -30;
uni0449 = -30;
uni044B = -30;
uni044C = -30;
uni044D = -55;
uni044E = -30;
uni044F = -30;
uni0451 = -30;
uni0491 = -30;
};
uni0424 = {
comma = -50;
period = -50;
quotedblbase = -50;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0434 = -20;
uni0442 = 10;
};
uni0425 = {
bracketright = 40;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
};
uni0426 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0429 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni042A = {
quotedblright = -40;
quoteright = -20;
uni0422 = -50;
};
uni042C = {
quotedblleft = -60;
quotedblright = -40;
quoteright = -40;
uni0416 = -20;
uni0422 = -50;
uni0427 = -30;
};
uni042D = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni042E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0430 = {
uni0327 = -30;
};
uni0431 = {
quoteright = 20;
uni0431 = 15;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0444 = 10;
uni0445 = -10;
};
uni0432 = {
uni0436 = -10;
uni0445 = -15;
uni044F = -10;
};
uni0433 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
uni0434 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0435 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0436 = {
a2_alt = -10;
slash = 30;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0437 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni043A = {
a2_alt = -10;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni043E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0440 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0441 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0442 = {
colon = 20;
comma = -40;
period = -40;
quotedblbase = -40;
quotedblright = 40;
quoteright = 40;
uni0434 = -20;
uni0442 = 30;
uni0443 = 20;
uni044A = 20;
};
uni0443 = {
comma = -40;
period = -40;
quotedblbase = -40;
quotedblright = 40;
quoteright = 40;
uni0442 = 10;
uni0443 = 10;
};
uni0444 = {
quotedblright = -30;
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0445 = {
a2_alt = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0446 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0449 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni044C = {
quotedblright = -40;
uni0442 = -30;
uni044F = -10;
};
uni044D = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni044E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0451 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0490 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0433 = -40;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
uni0491 = -40;
};
uni0491 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
v = {
comma = -40;
period = -40;
quotedblbase = -40;
quotedblright = 40;
quoteright = 40;
};
w = {
quotedblright = 40;
quoteright = 40;
};
w_alt = {
quotedblright = 40;
quoteright = 40;
};
wacute = {
quotedblright = 40;
quoteright = 40;
};
wcircumflex = {
quotedblright = 40;
quoteright = 40;
};
wdieresis = {
quotedblright = 40;
quoteright = 40;
};
wgrave = {
quotedblright = 40;
quoteright = 40;
};
x = {
a2_alt = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
y2_alt = {
a2_alt = -5;
c = -5;
c_alt = -5;
cacute = -5;
ccaron = -5;
ccedilla = -5;
ccircumflex = -5;
cdotaccent = -5;
comma = -40;
d = -5;
dcaron = -5;
dcroat = -5;
e = -5;
eacute = -5;
ebreve = -5;
ecaron = -5;
ecircumflex = -5;
edieresis = -5;
edotaccent = -5;
egrave = -5;
emacron = -5;
eogonek = -5;
eth = -5;
g = -5;
gbreve = -5;
gcircumflex = -5;
gdotaccent = -5;
o = -5;
oacute = -5;
obreve = -5;
ocircumflex = -5;
odieresis = -5;
oe = -5;
ograve = -5;
ohungarumlaut = -5;
omacron = -5;
oslash = -5;
otilde = -5;
period = -40;
q = -5;
quotedblbase = -40;
quotedblright = 40;
quoteright = 40;
s = -5;
s_alt = -5;
sacute = -5;
scaron = -5;
scedilla = -5;
scircumflex = -5;
uni0123 = -5;
uni0219 = -5;
};
z = {
quotedblright = 40;
quoteright = 40;
};
zero = {
comma = -20;
period = -20;
quotedblbase = -20;
two = -15;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The Onest Project Authors (https://github.com/googlefonts/onest)";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Onest;
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Dmitri Voloshin, Andrey Kudryavtsev";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Andrey Kudryavtsev, Dmitri Voloshin";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://onest.md";
},
{
key = designerURL;
value = "https://onest.md";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
