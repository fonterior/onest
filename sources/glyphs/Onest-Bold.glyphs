{
.appVersion = "3112";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = PYRS;
},
{
name = panose;
value = (
2,
11,
8,
3,
4,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
9,
31,
33,
35,
37,
38,
47
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
NULL,
CR,
space,
B,
D,
E,
F,
H,
I,
L,
M,
N,
P,
R,
U,
V,
W,
X,
Y,
Z,
b,
d,
h,
i,
l,
m,
n,
p,
q,
u,
v,
w,
x,
z,
period,
comma,
A,
breve,
circumflex,
uni0326,
exclam,
quotedbl,
quotesingle,
numbersign,
percent,
asterisk,
plus,
slash,
colon,
semicolon,
less,
equal,
greater,
at,
bracketleft,
bracketright,
backslash,
asciicircum,
underscore,
braceleft,
bar,
braceright,
Euro,
quotedblbase,
quotesinglbase,
quotedblright,
quoteright,
quotedblleft,
quoteleft,
minus,
hyphen,
endash,
emdash,
grave,
acute,
guillemotright,
guilsinglright,
guillemotleft,
guilsinglleft,
uni00AD,
ellipsis,
uni0445,
uni0431,
uni0432,
uni0433,
uni0434,
uni0436,
uni043A,
uni0438,
uni0439,
uni043B,
uni043C,
uni043D,
uni043F,
uni0442,
uni0444,
uni0446,
uni0447,
uni0448,
uni0449,
uni044A,
uni044B,
uni044C,
uni044E,
uni044F,
u_alt,
uni0410,
uni0415,
uni041C,
uni041D,
uni0420,
uni0422,
uni0425,
T,
uni0412,
uni041F,
uni0413,
uni041B,
uni0414,
uni0411,
uni0416,
uni0417,
uni0418,
uni0419,
uni041A,
uni0423,
uni0424,
uni0426,
uni0427,
uni0428,
uni0429,
uni042A,
uni042B,
uni042C,
uni042D,
uni042E,
uni042F,
uni0440,
O,
be_alt,
a,
c,
e,
f,
g,
j,
o,
r,
t,
y_alt,
y2_alt,
uni0443,
uni0451,
uni0437,
uni044D,
C,
S,
uni0421,
G,
uni041E,
Q,
J,
K_alt,
K,
k_alt,
k,
i_alt,
j_alt,
s_alt,
s,
c_alt,
copyright,
ampersand,
dollar,
parenleft,
parenright,
cent,
section,
uni04C1,
uni04C2,
w_alt,
W_alt,
zero,
one,
two,
three,
four,
seven,
eight,
nine,
uni0430,
uni0435,
uni043E,
uni0441,
uni0218,
uni0219,
uni021A,
uni021B,
question,
uni2116,
uni0401,
asciitilde,
trademark,
registered,
degree,
bullet,
uni27F5,
uni27F6,
arrowup,
arrowdown,
uni21BA,
uni21BB,
uni21B7,
uni21B6,
five,
six,
dieresis,
cedilla,
dotlessi,
ccedilla,
uni0162,
uni0163,
Ccedilla,
scedilla,
uni21A9,
uni2713,
divide,
multiply,
yen,
uni20BD,
uni20B4,
sterling,
Scedilla,
t_alt,
alt_1,
colon.uc,
t2.alt,
hyphen.uc,
uni00AD.uc,
endash.uc,
emdash.uc,
uni2117,
f_alt,
g_alt,
y,
a_alt,
uni0490,
uni0491,
uni0406,
uni0456,
uni0404,
uni0454,
uni0407,
uni0457,
map,
logo,
t0163.alt,
t021b.alt,
uni202F,
uni2009,
uni00A0,
a00E2.alt,
a0103.alt,
a00E4.alt,
a2_alt,
logom,
plusminus,
twosuperior,
threesuperior,
greaterequal,
lessequal,
notequal,
approxequal,
tab_1,
I_alt,
l_alt,
l2_alt,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE008,
uniE009,
arrowright,
arrowleft,
uni2197,
uni2198,
uni2196,
uni2199,
uniE010,
uniE011,
uniE012,
uniE013,
uniE014,
uniE015,
uniE016,
uniE017,
uniE018,
uniE019,
uniE020,
uniE021,
uniE022,
uni1E9E,
questiondown,
exclamdown,
ordfeminine,
macron,
paragraph,
periodcentered,
ordmasculine,
caron,
tilde,
dotaccent,
ring,
hungarumlaut,
ogonek,
gravecomb,
acutecomb,
uni0302,
tildecomb,
uni0304,
uni0306,
uni0307,
uni0308,
uni030A,
uni030B,
uni030C,
uni0312,
uni0327,
uni0328,
AE,
Eth,
Oslash,
Thorn,
germandbls,
OE,
oe,
Hbar,
hbar,
thorn,
eth,
oslash,
ae,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
agrave,
aacute,
atilde,
aring,
egrave,
eacute,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
ugrave,
uacute,
ucircumflex,
yacute,
udieresis,
ydieresis,
acircumflex,
adieresis,
ecircumflex,
Lslash,
lslash,
Eng,
eng,
Dcroat,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
Hcircumflex,
hcircumflex,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
Idotaccent,
Jcircumflex,
jcircumflex,
Lacute,
lacute,
Nacute,
nacute,
Ncaron,
ncaron,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
Racute,
racute,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scaron,
scaron,
Tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
kgreenlandic,
Ldot,
ldot,
IJ,
ij,
uni013B,
uni013C,
uni0156,
uni0157,
uni0136,
uni0137,
uni0145,
uni0146,
uni0122,
uni0123,
dcroat,
Tbar,
tbar,
lcaron,
dcaron,
Lcaron,
tcaron,
napostrophe,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
uni0408,
uni0458,
uni0405,
uni0455,
uni040E,
uni045E,
uni0237
);
}
);
date = "2022-02-06 07:38:19 +0000";
familyName = Onest;
featurePrefixes = (
{
code = "lookup SUB_22 {
	sub colon by colon.uc;
	sub hyphen by hyphen.uc;
	sub endash by endash.uc;
	sub emdash by emdash.uc;
	sub uni00AD by uni00AD.uc;
	sub t by t2.alt;
	sub uni021B by t021b.alt;
	sub uni0163 by t0163.alt;
} SUB_22;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_0;
lookup SUB_0;
script cyrl;
language dflt;
lookup SUB_0;
lookup SUB_1 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_1;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
lookup SUB_2 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_2;
lookup SUB_0;
language AZE;
lookup SUB_0;
lookup SUB_0;
language MOL;
lookup SUB_0;
lookup SUB_0;
language ROM;
lookup SUB_0;
lookup SUB_0;
language TRK;
lookup SUB_0;
lookup SUB_0;
";
tag = salt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 useExtension {
	sub colon by colon.uc;
} SUB_3;
script cyrl;
language dflt;
lookup SUB_3;
script latn;
language dflt;
lookup SUB_3;
language AZE;
lookup SUB_3;
language MOL;
lookup SUB_3;
language ROM;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	@SUB_4_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_0_BT_0 colon' lookup SUB_22;
	@SUB_4_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_1_BT_0 hyphen' lookup SUB_22;
	@SUB_4_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_2_BT_0 endash' lookup SUB_22;
	@SUB_4_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_3_BT_0 emdash' lookup SUB_22;
	@SUB_4_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_4_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_4_5_LA_0;
	@SUB_4_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_4_6_LA_0;
	@SUB_4_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_4_7_LA_0;
} SUB_4;
lookup SUB_5 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_5;
script cyrl;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6 {
	@SUB_6_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_0_BT_0 colon' lookup SUB_22;
	@SUB_6_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_1_BT_0 hyphen' lookup SUB_22;
	@SUB_6_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_2_BT_0 endash' lookup SUB_22;
	@SUB_6_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_3_BT_0 emdash' lookup SUB_22;
	@SUB_6_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_6_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_6_5_LA_0;
	@SUB_6_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_6_6_LA_0;
	@SUB_6_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_6_7_LA_0;
} SUB_6;
lookup SUB_7 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_7;
script latn;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8 {
	@SUB_8_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_0_BT_0 colon' lookup SUB_22;
	@SUB_8_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_1_BT_0 hyphen' lookup SUB_22;
	@SUB_8_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_2_BT_0 endash' lookup SUB_22;
	@SUB_8_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_3_BT_0 emdash' lookup SUB_22;
	@SUB_8_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_8_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_8_5_LA_0;
	@SUB_8_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_8_6_LA_0;
	@SUB_8_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_8_7_LA_0;
} SUB_8;
lookup SUB_9 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_9;
language AZE;
lookup SUB_4;
lookup SUB_5;
language MOL;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language ROM;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language TRK;
lookup SUB_4;
lookup SUB_5;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_10;
script cyrl;
language dflt;
lookup SUB_10;
lookup SUB_11 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_11;
script latn;
language dflt;
lookup SUB_10;
lookup SUB_12 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_12;
language AZE;
lookup SUB_10;
language MOL;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_13;
script cyrl;
language dflt;
lookup SUB_13;
lookup SUB_14 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_14;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_15;
language AZE;
lookup SUB_13;
language MOL;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_16;
script cyrl;
language dflt;
lookup SUB_16;
lookup SUB_18 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_18;
script latn;
language dflt;
lookup SUB_16;
lookup SUB_17 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_17;
language AZE;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TRK;
lookup SUB_16;
script cyrl;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_19;
script cyrl;
language dflt;
lookup SUB_19;
lookup SUB_21 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_21;
script latn;
language dflt;
lookup SUB_19;
lookup SUB_20 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_20;
language AZE;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
script cyrl;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
";
tag = tnum;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 970;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 49 29 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 4 36 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01262 2 46 6 27 5 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123648 2368 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01258 4 38 8 20 7 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    140,\012    140,\012    125,\012    125,\012    708,\012    0,\012    527,\012    0,\012    \"-220\",\012    970,\012    \"-305\",\012    717,\012    \"-7\",\012    538,\012    \"-8\",\012    \"-277\",\012    970,\012    \"-305\",\012    140,\012    140,\012    125,\012    125,\012    708,\012    0,\012    708,\012    527,\012    0,\012    \"-220\",\012    970,\012    \"-305\",\012    717,\012    \"-7\",\012    774,\012    538,\012    \"-8\",\012    \"-272\",\012    970,\012    \"-305\",\012    24,\012    24,\012    24,\012    24,\012    776,\012    385,\012    970,\012    \"-305\",\012    776,\012    382,\012    970,\012    \"-305\"\012)";
}
);
iconName = Bold;
id = m01;
metricValues = (
{
pos = 970;
},
{
pos = 708;
},
{
pos = 527;
},
{
},
{
pos = -305;
},
{
}
);
name = Bold;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,-295,l),
(520,960,l),
(20,960,l),
(20,-295,l)
);
},
{
closed = 1;
nodes = (
(510,950,l),
(510,-285,l),
(30,-285,l),
(30,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 0 95 0 0 0 68 77 0 2 2 1 95 0 1 1 69 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = ".notdef";
},
{
glyphname = NULL;
layers = (
{
layerId = m01;
width = 0;
}
);
note = NULL;
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 189;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 270;
}
);
note = space;
unicode = 32;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,0,o),
(512,16,o),
(557,47,qs),
(595,72,o),
(642,153,o),
(644,201,qs),
(645,231,o),
(633,287,o),
(606,335,o),
(562,371,o),
(531,380,q),
(575,406,o),
(612,482,o),
(611,531,qs),
(611,577,o),
(576,642,o),
(551,662,qs),
(520,688,o),
(437,708,o),
(388,708,qs),
(74,708,l),
(74,0,l),
(351,0,ls)
);
},
{
closed = 1;
nodes = (
(219,579,l),
(361,579,ls),
(383,579,o),
(425,576,o),
(441,566,qs),
(454,558,o),
(472,528,o),
(471,504,qs),
(470,481,o),
(448,447,o),
(432,437,qs),
(413,426,o),
(369,421,o),
(347,421,qs),
(219,421,l)
);
},
{
closed = 1;
nodes = (
(382,299,ls),
(405,299,o),
(448,295,o),
(465,284,qs),
(480,276,o),
(500,244,o),
(500,221,qs),
(500,196,o),
(482,163,o),
(468,152,qs),
(445,135,o),
(380,128,o),
(351,128,qs),
(219,128,l),
(219,298,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 5 2 1 76 7 1 2 0 5 4 2 5 103 0 3 3 0 95 0 0 0 38 77 0 4 4 1 95 6 1 1 1 39 1 78 24 23 0 0 52 50 40 38 36 34 23 37 24 37 0 22 0 21 33 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 682;
}
);
note = B;
unicode = 66;
},
{
glyphname = D;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,0,o),
(691,182,o),
(691,353,qs),
(691,466,o),
(610,626,o),
(530,667,qs),
(485,691,o),
(387,708,o),
(336,708,qs),
(75,708,l),
(75,0,l),
(343,0,ls)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(336,579,ls),
(378,579,o),
(465,555,o),
(493,522,qs),
(518,492,o),
(542,406,o),
(542,353,qs),
(542,286,o),
(501,183,o),
(460,155,qs),
(450,149,o),
(422,139,o),
(390,132,o),
(358,128,o),
(344,128,qs),
(220,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 3 0 95 0 0 0 38 77 5 1 2 2 1 95 4 1 1 1 39 1 78 13 12 0 0 27 25 12 28 13 28 0 11 0 10 33 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,269,l),
(513,269,l),
(513,396,l),
(220,396,l),
(220,579,l),
(569,579,l),
(569,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 0 2 3 1 2 103 0 0 0 4 95 5 1 4 4 38 77 0 3 3 39 3 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = F;
unicode = 70;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,285,l),
(533,285,l),
(533,0,l),
(678,0,l),
(678,708,l),
(533,708,l),
(533,414,l),
(220,414,l),
(220,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 38 77 4 1 2 2 39 2 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = I;
unicode = 73;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(566,0,l),
(566,128,l),
(219,128,l),
(219,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(218,0,l),
(218,488,l),
(409,183,l),
(474,183,l),
(665,488,l),
(665,0,l),
(809,0,l),
(809,708,l),
(655,708,l),
(444,375,l),
(232,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 6 1 3 2 0 1 76 0 2 0 1 0 2 1 128 5 4 2 0 0 38 77 3 1 1 1 39 1 78 0 0 0 12 0 12 18 18 17 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 884;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(217,0,l),
(217,472,l),
(553,0,l),
(692,0,l),
(692,708,l),
(550,708,l),
(550,234,l),
(214,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
6 1 2 1 0 1 76 4 3 2 0 0 38 77 2 1 1 1 39 1 78 0 0 0 9 0 9 18 17 18 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = N;
unicode = 78;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,209,l),
(357,209,ls),
(415,209,o),
(514,242,o),
(585,305,o),
(625,398,o),
(626,458,qs),
(627,527,o),
(588,622,o),
(515,681,o),
(411,708,o),
(347,708,qs),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(348,579,ls),
(409,579,o),
(486,523,o),
(484,455,qs),
(483,425,o),
(461,381,o),
(425,351,o),
(376,337,o),
(349,337,qs),
(220,337,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 3 0 1 2 3 1 103 0 4 4 0 95 5 1 0 0 38 77 0 2 2 39 2 78 16 15 1 0 24 22 15 25 16 25 13 12 11 9 0 14 1 14 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = P;
unicode = 80;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,254,l),
(333,254,l),
(476,0,l),
(638,0,l),
(481,268,l),
(523,279,o),
(555,305,qs),
(590,335,o),
(631,421,o),
(632,483,qs),
(633,529,o),
(603,618,o),
(568,650,qs),
(546,670,o),
(495,693,o),
(441,705,o),
(385,708,o),
(357,708,qs),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(361,579,ls),
(389,579,o),
(436,572,o),
(453,561,qs),
(471,550,o),
(491,510,o),
(490,478,qs),
(489,448,o),
(468,409,o),
(433,386,o),
(385,376,o),
(358,376,qs),
(220,376,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
13 1 2 4 1 76 7 1 4 0 2 1 4 2 103 0 5 5 0 95 6 1 0 0 38 77 3 1 1 1 39 1 78 22 21 2 0 33 31 21 34 22 34 19 18 17 16 15 14 0 20 2 20 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = R;
unicode = 82;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 38 77 0 2 2 0 97 4 1 0 0 50 0 78 1 0 20 19 14 12 7 6 0 25 1 25 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,708,l),
(2,708,l),
(271,0,l),
(427,0,l),
(696,708,l),
(539,708,l),
(352,173,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
6 1 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,552,l),
(599,0,l),
(791,0,l),
(959,708,l),
(803,708,l),
(694,165,l),
(588,708,l),
(393,708,l),
(284,165,l),
(168,708,l),
(3,708,l),
(183,0,l),
(378,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 38 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 962;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,708,l),
(10,708,l),
(245,355,l),
(2,0,l),
(165,0,l),
(331,243,l),
(491,0,l),
(660,0,l),
(420,354,l),
(654,708,l),
(486,708,l),
(334,463,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,708,l),
(2,708,l),
(267,263,l),
(267,0,l),
(412,0,l),
(412,265,l),
(674,708,l),
(510,708,l),
(341,402,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
8 5 2 3 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 18 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,115,l),
(32,0,l),
(588,0,l),
(588,128,l),
(214,128,l),
(595,594,l),
(595,708,l),
(40,708,l),
(40,579,l),
(413,579,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 3 0 8 1 2 1 2 76 4 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = Z;
unicode = 90;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,70,l),
(233,27,o),
(322,-8,o),
(373,-8,qs),
(417,-8,o),
(504,25,o),
(535,58,qs),
(572,96,o),
(603,203,o),
(603,268,qs),
(603,320,o),
(579,415,o),
(553,450,qs),
(521,498,o),
(425,539,o),
(369,538,qs),
(322,537,o),
(229,498,o),
(197,460,q),
(197,708,l)
);
},
{
closed = 1;
nodes = (
(214,347,o),
(247,388,o),
(298,412,o),
(330,412,qs),
(364,412,o),
(412,390,o),
(445,350,o),
(462,296,o),
(462,265,qs),
(462,233,o),
(445,179,o),
(414,138,o),
(366,116,o),
(332,117,qs),
(269,118,o),
(198,198,o),
(197,262,qs),
(197,292,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
0 1 5 0 18 1 1 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 1 5 0 18 1 2 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 3 38 77 0 5 5 0 97 0 0 0 49 77 0 4 4 1 97 2 1 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 38 77 0 5 5 0 97 0 0 0 49 77 0 2 2 39 77 0 4 4 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
40 35 17 19 42 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = b;
unicode = 98;
},
{
glyphname = d;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,0,l),
(582,708,l),
(441,708,l),
(441,485,l),
(415,511,o),
(342,538,o),
(296,538,qs),
(235,538,o),
(139,500,o),
(107,466,qs),
(35,388,o),
(35,259,qs),
(35,204,o),
(66,98,o),
(104,58,qs),
(136,25,o),
(224,-8,o),
(276,-8,qs),
(332,-6,o),
(411,25,o),
(443,59,q),
(451,0,l)
);
},
{
closed = 1;
nodes = (
(225,139,o),
(192,179,o),
(176,232,o),
(176,265,qs),
(176,296,o),
(192,349,o),
(225,390,o),
(274,412,o),
(307,412,qs),
(372,411,o),
(440,329,o),
(440,263,qs),
(440,202,o),
(373,119,o),
(309,117,qs),
(276,117,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
17 1 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 38 77 0 5 5 1 97 0 1 1 49 77 6 1 4 4 0 97 3 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 38 77 0 5 5 1 97 0 1 1 49 77 0 3 3 39 77 6 1 4 4 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
23 22 29 27 22 37 23 37 17 19 41 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = d;
unicode = 100;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,271,ls),
(197,297,o),
(208,346,o),
(233,386,o),
(280,411,o),
(310,412,qs),
(340,412,o),
(381,394,o),
(407,357,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,346,o),
(536,440,o),
(507,475,qs),
(482,503,o),
(406,538,o),
(355,538,qs),
(329,538,o),
(284,529,o),
(262,519,qs),
(241,508,o),
(211,485,o),
(197,468,q),
(197,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 2 0 1 76 0 4 4 38 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 17 21 37 22 37 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,726,o),
(47,688,qs),
(47,648,o),
(96,603,o),
(134,603,qs),
(173,603,o),
(221,648,o),
(221,688,qs),
(221,726,o),
(173,772,o),
(134,772,qs),
(96,772,o)
);
},
{
closed = 1;
nodes = (
(64,527,l),
(64,0,l),
(205,0,l),
(205,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 1 0 97 4 1 0 0 48 77 0 3 3 41 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 0 0 1 3 0 1 105 0 3 3 41 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 15 14 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = i;
unicode = 105;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,270,ls),
(197,291,o),
(202,341,o),
(221,384,o),
(261,412,o),
(290,412,qs),
(315,412,o),
(346,392,o),
(364,359,o),
(370,318,o),
(370,297,qs),
(370,0,l),
(511,0,l),
(511,282,ls),
(511,305,o),
(518,351,o),
(539,389,o),
(576,412,o),
(603,412,qs),
(628,412,o),
(661,391,o),
(678,358,o),
(684,316,o),
(684,295,qs),
(684,0,l),
(825,0,l),
(825,335,ls),
(825,379,o),
(806,453,o),
(766,506,o),
(700,538,o),
(654,538,qs),
(554,538,o),
(488,453,q),
(468,492,o),
(400,538,o),
(347,538,qs),
(299,538,o),
(225,499,o),
(198,459,q),
(191,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
6 1 3 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
6 1 3 7 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 3 0 97 7 1 2 0 0 49 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 7 7 41 77 5 1 3 3 0 97 1 1 0 0 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 21 37 21 37 21 35 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,260,ls),
(197,287,o),
(206,340,o),
(232,384,o),
(278,412,o),
(311,412,qs),
(338,412,o),
(381,394,o),
(407,357,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,346,o),
(538,439,o),
(509,474,qs),
(485,504,o),
(407,538,o),
(356,538,qs),
(262,538,o),
(198,460,q),
(191,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 21 37 22 33 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = n;
unicode = 110;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,-220,l),
(197,-220,l),
(197,59,l),
(216,37,o),
(259,11,o),
(303,-3,o),
(347,-8,o),
(369,-8,qs),
(414,-8,o),
(504,27,o),
(535,61,qs),
(572,99,o),
(603,204,o),
(603,269,qs),
(603,321,o),
(579,415,o),
(553,450,qs),
(521,498,o),
(425,539,o),
(369,538,qs),
(322,537,o),
(229,494,o),
(198,456,q),
(190,527,l)
);
},
{
closed = 1;
nodes = (
(412,390,o),
(445,350,o),
(462,296,o),
(462,265,qs),
(462,233,o),
(445,179,o),
(414,139,o),
(366,117,o),
(332,117,qs),
(269,119,o),
(196,200,o),
(197,267,qs),
(197,297,o),
(216,349,o),
(250,389,o),
(299,412,o),
(330,412,qs),
(364,412,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 0 97 3 1 0 0 49 77 0 5 5 1 97 0 1 1 50 77 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 4 4 0 97 3 1 0 0 49 77 0 5 5 1 97 0 1 1 50 77 0 2 2 0 97 3 1 0 0 49 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 0 97 0 0 0 49 77 0 5 5 1 97 0 1 1 50 77 0 2 2 3 95 0 3 3 41 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
26 25 34 32 25 42 26 42 17 21 42 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,-220,l),
(583,527,l),
(461,527,l),
(446,470,l),
(431,489,o),
(393,515,o),
(351,532,o),
(309,538,o),
(291,538,qs),
(236,539,o),
(138,500,o),
(107,466,qs),
(35,388,o),
(35,259,qs),
(35,204,o),
(65,99,o),
(104,59,qs),
(136,25,o),
(229,-8,o),
(279,-8,qs),
(327,-8,o),
(413,20,o),
(441,49,q),
(441,-220,l)
);
},
{
closed = 1;
nodes = (
(227,139,o),
(193,179,o),
(176,232,o),
(176,265,qs),
(176,296,o),
(192,349,o),
(225,390,o),
(276,412,o),
(309,412,qs),
(373,411,o),
(442,329,o),
(440,263,qs),
(440,232,o),
(423,180,o),
(390,140,o),
(341,117,o),
(310,117,qs),
(277,117,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
19 1 5 1 0 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
19 1 5 2 0 1 0 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 1 97 2 1 1 1 49 77 6 1 4 4 0 97 0 0 0 50 77 0 3 3 43 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 5 5 1 97 2 1 1 1 49 77 6 1 4 4 0 97 0 0 0 50 77 0 3 3 1 97 2 1 1 1 49 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 1 97 0 1 1 49 77 6 1 4 4 0 97 0 0 0 50 77 0 3 3 2 95 0 2 2 41 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
25 24 33 31 24 41 25 41 17 21 41 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = q;
unicode = 113;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 41 77 4 1 0 0 2 97 0 2 2 50 2 78 1 0 22 21 15 13 5 4 0 25 1 25 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,527,l),
(0,527,l),
(193,0,l),
(370,0,l),
(564,527,l),
(409,527,l),
(283,136,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
6 1 1 0 1 76 2 1 0 0 41 77 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,349,l),
(532,0,l),
(687,0,l),
(849,527,l),
(702,527,l),
(607,161,l),
(500,527,l),
(359,527,l),
(251,161,l),
(156,527,l),
(0,527,l),
(163,0,l),
(323,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 41 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,527,l),
(11,527,l),
(176,268,l),
(2,0,l),
(160,0,l),
(265,175,l),
(374,0,l),
(533,0,l),
(355,266,l),
(524,527,l),
(364,527,l),
(270,356,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 41 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = x;
unicode = 120;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,527,l),
(35,405,l),
(289,405,l),
(35,103,l),
(35,0,l),
(475,0,l),
(475,123,l),
(219,123,l),
(475,425,l),
(475,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 5 1 1 0 2 76 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = z;
unicode = 122;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,120,o),
(55,78,qs),
(55,36,o),
(104,-8,o),
(142,-8,qs),
(180,-8,o),
(228,36,o),
(228,78,qs),
(228,120,o),
(180,166,o),
(142,166,qs),
(104,166,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 50 1 78 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,-107,o),
(55,-126,q),
(91,-176,l),
(121,-166,o),
(177,-123,o),
(220,-66,o),
(247,1,o),
(247,36,qs),
(247,61,o),
(236,105,o),
(212,139,o),
(175,159,o),
(150,159,qs),
(113,159,o),
(58,115,o),
(58,73,qs),
(58,35,o),
(104,-10,o),
(138,-12,q),
(129,-50,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 302;
}
);
note = comma;
unicode = 44;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 1 0 2 1 76 0 0 5 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 3 3 3 10 3 10 17 17 19 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = A;
unicode = 65;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,708,o),
(139,646,o),
(188,607,o),
(256,589,o),
(297,589,qs),
(337,589,o),
(405,608,o),
(455,647,o),
(483,708,o),
(484,751,q),
(374,751,l),
(372,715,o),
(332,682,o),
(297,682,qs),
(262,682,o),
(221,716,o),
(220,751,q),
(110,751,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 0 0 0 17 0 17 36 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 594;
}
);
note = breve;
unicode = 728;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,769,l),
(98,599,l),
(223,599,l),
(291,685,l),
(361,599,l),
(487,599,l),
(335,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 585;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-341,-253,o),
(-360,-267,q),
(-335,-303,l),
(-314,-296,o),
(-272,-264,o),
(-241,-220,o),
(-224,-171,o),
(-224,-146,qs),
(-224,-130,o),
(-231,-100,o),
(-249,-76,o),
(-277,-62,o),
(-295,-62,qs),
(-325,-62,o),
(-360,-96,o),
(-360,-124,qs),
(-360,-151,o),
(-329,-183,o),
(-302,-185,q),
(-308,-211,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
17 16 2 0 73 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,114,o),
(65,75,qs),
(65,35,o),
(112,-9,o),
(152,-9,qs),
(192,-9,o),
(239,36,o),
(239,75,qs),
(239,114,o),
(193,162,o),
(152,162,qs),
(112,162,o)
);
},
{
closed = 1;
nodes = (
(78,708,l),
(91,230,l),
(213,230,l),
(226,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 3 95 0 3 3 38 77 4 1 0 0 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 3 95 0 3 3 38 77 4 1 0 0 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 15 14 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(60,440,l),
(168,440,l),
(181,708,l)
);
},
{
closed = 1;
nodes = (
(232,708,l),
(246,440,l),
(354,440,l),
(368,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 38 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 415;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,708,l),
(68,440,l),
(176,440,l),
(190,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 38 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,708,l),
(402,535,l),
(300,535,l),
(320,708,l),
(205,708,l),
(185,535,l),
(76,535,l),
(76,419,l),
(171,419,l),
(155,288,l),
(47,288,l),
(47,172,l),
(142,172,l),
(121,0,l),
(238,0,l),
(258,172,l),
(360,172,l),
(340,0,l),
(455,0,l),
(476,172,l),
(584,172,l),
(584,288,l),
(489,288,l),
(505,419,l),
(613,419,l),
(613,535,l),
(518,535,l),
(538,708,l)
);
},
{
closed = 1;
nodes = (
(286,419,l),
(388,419,l),
(374,288,l),
(272,288,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
16 15 8 3 2 7 5 2 3 4 2 3 103 13 1 11 11 38 77 14 9 2 1 1 0 95 12 10 2 0 0 41 77 6 1 4 4 39 4 78 28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(749,12,o),
(792,59,o),
(815,122,o),
(815,158,qs),
(815,196,o),
(792,260,o),
(749,306,o),
(685,332,o),
(643,332,qs),
(602,332,o),
(538,306,o),
(494,260,o),
(472,196,o),
(472,158,qs),
(472,122,o),
(494,59,o),
(538,12,o),
(601,-15,o),
(643,-15,qs),
(685,-15,o)
);
},
{
closed = 1;
nodes = (
(324,404,o),
(367,451,o),
(389,514,o),
(389,550,qs),
(389,587,o),
(367,651,o),
(324,697,o),
(260,723,o),
(219,723,qs),
(177,723,o),
(113,697,o),
(70,651,o),
(47,588,o),
(47,550,qs),
(47,514,o),
(69,451,o),
(113,404,o),
(177,377,o),
(219,377,qs),
(260,377,o)
);
},
{
closed = 1;
nodes = (
(724,708,l),
(585,708,l),
(131,0,l),
(271,0,l)
);
},
{
closed = 1;
nodes = (
(278,578,o),
(278,550,qs),
(278,522,o),
(253,480,o),
(219,480,qs),
(184,480,o),
(157,521,o),
(157,550,qs),
(157,578,o),
(184,620,o),
(219,620,qs),
(253,620,o)
);
},
{
closed = 1;
nodes = (
(703,187,o),
(703,158,qs),
(703,130,o),
(678,88,o),
(643,88,qs),
(609,88,o),
(582,129,o),
(582,158,qs),
(582,187,o),
(611,229,o),
(643,229,qs),
(678,229,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 11 1 2 1 7 2 105 0 1 14 1 8 9 1 8 106 13 1 6 6 3 97 4 1 3 3 46 77 0 9 9 0 97 12 5 10 3 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 7 11 1 2 1 7 2 105 0 1 14 1 8 9 1 8 106 0 4 4 38 77 13 1 6 6 3 97 0 3 3 46 77 12 1 5 5 39 77 0 9 9 0 97 10 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
57 56 45 44 40 40 21 20 1 0 63 61 56 67 57 67 51 49 44 55 45 55 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 862;
}
);
note = percent;
unicode = 37;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,660,l),
(57,565,l),
(153,534,l),
(93,452,l),
(175,394,l),
(233,474,l),
(292,394,l),
(373,452,l),
(314,534,l),
(410,565,l),
(379,660,l),
(283,629,l),
(283,728,l),
(184,728,l),
(184,629,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
14 13 12 11 10 9 8 7 6 5 4 3 2 13 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 0 0 38 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
16 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,420,l),
(360,420,l),
(360,600,l),
(243,600,l),
(243,420,l),
(62,420,l),
(62,302,l),
(243,302,l),
(243,121,l),
(360,121,l),
(360,302,l),
(541,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 3 87 4 1 2 6 5 2 1 0 2 1 103 0 3 3 0 95 0 0 3 0 79 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = plus;
unicode = 43;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(464,784,l),
(329,784,l),
(27,-171,l),
(162,-171,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 491;
}
);
note = slash;
unicode = 47;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,117,o),
(55,77,qs),
(55,35,o),
(102,-9,o),
(142,-9,qs),
(182,-9,o),
(229,36,o),
(229,77,qs),
(229,117,o),
(183,165,o),
(142,165,qs),
(102,165,o)
);
},
{
closed = 1;
nodes = (
(55,476,o),
(55,436,qs),
(55,394,o),
(102,350,o),
(142,350,qs),
(182,350,o),
(229,395,o),
(229,436,qs),
(229,476,o),
(183,525,o),
(142,525,qs),
(102,525,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 2 97 5 1 2 2 41 77 4 1 0 0 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 2 97 5 1 2 2 41 77 4 1 0 0 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 284;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,-104,o),
(55,-125,q),
(91,-175,l),
(123,-164,o),
(180,-119,o),
(222,-60,o),
(248,8,o),
(248,42,qs),
(248,65,o),
(237,108,o),
(214,141,o),
(177,161,o),
(150,161,qs),
(111,161,o),
(58,117,o),
(58,75,qs),
(58,38,o),
(101,-8,o),
(137,-10,q),
(129,-46,o)
);
},
{
closed = 1;
nodes = (
(64,476,o),
(64,436,qs),
(64,394,o),
(111,350,o),
(152,350,qs),
(191,350,o),
(238,395,o),
(238,436,qs),
(238,476,o),
(192,525,o),
(152,525,qs),
(111,525,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 41 77 0 1 1 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 41 77 0 1 1 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
21 20 27 25 20 31 21 31 36 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,392,l),
(27,325,l),
(428,81,l),
(428,220,l),
(193,363,l),
(428,503,l),
(428,640,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 3 1 50 
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,546,l),
(57,546,l),
(57,428,l),
(506,428,l)
);
},
{
closed = 1;
nodes = (
(506,294,l),
(57,294,l),
(57,176,l),
(506,176,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 41 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 4 1 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 5 1 3 2 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,330,l),
(458,397,l),
(57,640,l),
(57,501,l),
(292,359,l),
(57,218,l),
(57,81,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 3 1 50 
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = greater;
unicode = 62;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,356,o),
(436,392,o),
(479,412,o),
(508,411,qs),
(533,410,o),
(568,388,o),
(588,352,o),
(596,306,o),
(594,281,qs),
(592,258,o),
(578,211,o),
(551,173,o),
(512,150,o),
(485,150,qs),
(458,151,o),
(420,174,o),
(397,211,o),
(388,258,o),
(389,282,qs),
(391,308,o)
);
},
{
closed = 1;
nodes = (
(627,-152,q),
(612,-41,l),
(597,-44,o),
(571,-49,o),
(544,-52,o),
(512,-54,o),
(492,-54,qs),
(418,-54,o),
(298,-5,o),
(216,84,o),
(174,206,o),
(177,280,qs),
(180,352,o),
(226,478,o),
(269,523,qs),
(312,568,o),
(444,621,o),
(527,621,qs),
(594,621,o),
(706,580,o),
(747,537,qs),
(774,510,o),
(812,436,o),
(822,392,qs),
(827,368,o),
(831,295,o),
(827,259,qs),
(824,238,o),
(814,197,o),
(796,165,o),
(769,147,o),
(749,147,qs),
(726,148,o),
(702,172,o),
(693,207,o),
(695,246,o),
(697,262,qs),
(704,318,o),
(718,427,o),
(728,482,q),
(649,493,l),
(629,449,l),
(614,479,o),
(549,508,o),
(516,510,qs),
(471,512,o),
(399,492,o),
(369,468,qs),
(326,434,o),
(278,326,o),
(279,263,qs),
(280,219,o),
(306,142,o),
(354,84,o),
(425,50,o),
(470,50,qs),
(514,50,o),
(592,84,o),
(618,116,q),
(638,76,o),
(713,45,o),
(751,45,qs),
(796,45,o),
(863,82,o),
(885,112,qs),
(910,144,o),
(937,234,o),
(940,281,qs),
(948,392,o),
(876,572,o),
(807,632,qs),
(699,724,o),
(532,729,qs),
(432,731,o),
(250,671,o),
(182,597,qs),
(128,539,o),
(63,379,o),
(59,283,qs),
(55,184,o),
(112,18,o),
(224,-102,o),
(385,-168,o),
(485,-168,qs),
(563,-168,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
64 63 62 3 1 6 36 0 2 0 1 45 1 4 0 102 1 9 4 103 1 2 9 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
64 63 62 3 1 6 36 0 2 0 1 45 1 5 0 102 1 9 4 103 1 2 9 5 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 0 5 1 4 9 0 4 105 0 9 10 1 2 9 2 101 0 8 8 3 97 0 3 3 46 77 0 1 1 6 97 0 6 6 41 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 0 1 0 6 1 105 7 1 0 5 1 4 9 0 4 105 0 9 10 1 2 9 2 101 0 8 8 3 97 0 3 3 46 8 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 6 0 1 0 6 1 105 0 5 4 0 5 89 7 1 0 0 4 9 0 4 105 0 9 10 1 2 9 2 101 0 8 8 3 97 0 3 3 46 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 0 8 6 3 8 105 0 6 0 1 0 6 1 105 0 5 4 0 5 89 7 1 0 0 4 9 0 4 105 0 9 2 2 9 89 0 9 9 2 97 10 1 2 9 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
21 20 99 96 87 85 73 71 60 58 49 47 43 41 32 30 20 104 21 104 40 36 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 999;
}
);
note = at;
unicode = 64;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,-171,l),
(327,-55,l),
(210,-55,l),
(210,668,l),
(327,668,l),
(327,784,l),
(75,784,l),
(75,-171,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 350;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(23,784,l),
(23,668,l),
(140,668,l),
(140,-55,l),
(23,-55,l),
(23,-171,l),
(275,-171,l),
(275,784,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 350;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,784,l),
(27,784,l),
(329,-171,l),
(464,-171,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 491;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(311,709,l),
(209,709,l),
(47,460,l),
(175,460,l),
(261,604,l),
(345,460,l),
(477,460,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
1 1 0 1 1 76 0 1 0 1 133 3 2 2 0 0 118 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 524;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,-27,l),
(-15,-27,l),
(-15,-145,l),
(434,-145,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 419;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,341,o),
(252,377,o),
(257,415,o),
(257,430,qs),
(257,605,ls),
(257,622,o),
(263,649,o),
(271,656,qs),
(283,668,o),
(313,668,qs),
(374,668,l),
(374,784,l),
(259,784,ls),
(226,784,o),
(176,771,o),
(159,756,qs),
(142,741,o),
(124,692,o),
(124,658,qs),
(124,460,ls),
(124,449,o),
(122,416,o),
(110,386,o),
(83,365,o),
(58,365,qs),
(25,365,l),
(25,249,l),
(58,249,ls),
(83,249,o),
(110,227,o),
(122,197,o),
(124,164,o),
(124,154,qs),
(124,-44,ls),
(124,-78,o),
(142,-128,o),
(159,-143,qs),
(193,-171,o),
(259,-171,qs),
(374,-171,l),
(374,-55,l),
(313,-55,ls),
(283,-55,o),
(271,-43,qs),
(263,-35,o),
(257,-8,o),
(257,9,qs),
(257,183,ls),
(257,198,o),
(252,236,o),
(239,272,o),
(216,301,o),
(198,307,q),
(216,313,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 4 0 5 3 4 5 105 0 3 0 2 0 3 2 105 0 0 1 1 0 89 0 0 0 1 95 0 1 0 1 79 33 42 33 41 33 42 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,800,l),
(75,800,l),
(75,-174,l),
(202,-174,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 277;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(182,272,o),
(170,236,o),
(165,198,o),
(165,183,qs),
(165,9,ls),
(165,-28,o),
(150,-43,qs),
(138,-55,o),
(108,-55,qs),
(47,-55,l),
(47,-171,l),
(162,-171,ls),
(228,-171,o),
(262,-143,qs),
(297,-111,o),
(297,-44,qs),
(297,154,ls),
(297,164,o),
(299,197,o),
(311,227,o),
(338,249,o),
(363,249,qs),
(396,249,l),
(396,365,l),
(363,365,ls),
(338,365,o),
(311,386,o),
(299,416,o),
(297,449,o),
(297,460,qs),
(297,658,ls),
(297,692,o),
(279,741,o),
(262,756,qs),
(245,771,o),
(195,784,o),
(162,784,qs),
(47,784,l),
(47,668,l),
(108,668,ls),
(138,668,o),
(150,656,qs),
(158,649,o),
(165,622,o),
(165,605,qs),
(165,430,ls),
(165,415,o),
(170,377,o),
(182,341,o),
(205,313,o),
(223,307,q),
(205,301,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 1 0 0 2 1 0 105 0 2 0 3 5 2 3 105 0 5 4 4 5 89 0 5 5 4 95 0 4 5 4 79 33 40 33 42 33 42 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(656,41,o),
(699,88,q),
(625,187,l),
(590,152,o),
(517,119,o),
(467,120,qs),
(432,120,o),
(367,143,o),
(342,169,q),
(331,178,o),
(315,204,o),
(307,218,q),
(513,218,l),
(532,325,l),
(280,325,l),
(278,354,o),
(280,382,q),
(543,382,l),
(562,490,l),
(306,490,l),
(311,501,o),
(322,519,o),
(330,527,q),
(356,559,o),
(425,587,o),
(463,587,qs),
(513,586,o),
(581,552,o),
(617,519,q),
(694,620,l),
(650,668,o),
(539,714,o),
(464,714,qs),
(404,714,o),
(299,683,o),
(257,651,qs),
(220,622,o),
(166,541,o),
(151,490,q),
(63,490,l),
(44,382,l),
(132,382,l),
(132,325,l),
(57,325,l),
(37,218,l),
(150,218,l),
(165,166,o),
(219,85,o),
(256,56,qs),
(297,25,o),
(404,-8,o),
(467,-8,qs),
(543,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
22 1 6 5 23 1 4 6 49 1 11 1 50 1 0 11 4 76 7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 0 11 11 0 97 12 1 0 0 50 0 78 1 0 47 45 40 39 38 37 35 34 33 32 27 25 20 18 13 12 11 10 9 8 7 6 0 52 1 52 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 736;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,-89,o),
(55,-110,q),
(89,-156,l),
(119,-146,o),
(173,-103,o),
(214,-47,o),
(238,17,o),
(238,49,qs),
(238,70,o),
(227,111,o),
(205,142,o),
(170,161,o),
(145,161,qs),
(107,161,o),
(58,118,o),
(58,80,qs),
(58,45,o),
(98,1,o),
(133,-1,q),
(125,-36,o)
);
},
{
closed = 1;
nodes = (
(305,-89,o),
(276,-110,q),
(310,-156,l),
(340,-146,o),
(394,-103,o),
(435,-47,o),
(459,17,o),
(459,49,qs),
(459,70,o),
(449,111,o),
(427,142,o),
(392,161,o),
(367,161,qs),
(329,161,o),
(279,118,o),
(279,80,qs),
(279,45,o),
(319,1,o),
(354,-1,q),
(346,-36,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
37 36 17 16 4 0 73 3 1 1 1 0 97 2 1 0 0 39 0 78 36 29 36 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,-89,o),
(55,-110,q),
(89,-156,l),
(119,-146,o),
(172,-103,o),
(213,-47,o),
(237,17,o),
(237,49,qs),
(237,70,o),
(227,111,o),
(205,142,o),
(170,161,o),
(145,161,qs),
(107,161,o),
(58,118,o),
(58,80,qs),
(58,45,o),
(98,1,o),
(132,-1,q),
(125,-36,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
17 16 2 0 73 0 1 1 0 97 0 0 0 39 0 78 36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,481,o),
(55,461,q),
(89,414,l),
(119,424,o),
(173,466,o),
(214,522,o),
(238,586,o),
(238,618,qs),
(238,640,o),
(227,680,o),
(205,712,o),
(170,731,o),
(145,731,qs),
(107,731,o),
(58,688,o),
(58,649,qs),
(58,614,o),
(98,571,o),
(133,569,q),
(125,535,o)
);
},
{
closed = 1;
nodes = (
(305,481,o),
(276,461,q),
(310,414,l),
(340,424,o),
(394,466,o),
(435,522,o),
(459,586,o),
(459,618,qs),
(459,640,o),
(449,680,o),
(427,712,o),
(392,731,o),
(367,731,qs),
(329,731,o),
(279,688,o),
(279,649,qs),
(279,614,o),
(319,571,o),
(354,569,q),
(346,535,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 36 17 16 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 0 1 97 3 1 1 1 46 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 29 36 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,481,o),
(55,461,q),
(89,414,l),
(119,424,o),
(172,466,o),
(213,522,o),
(237,586,o),
(237,618,qs),
(237,640,o),
(227,680,o),
(205,712,o),
(170,731,o),
(145,731,qs),
(107,731,o),
(58,688,o),
(58,649,qs),
(58,614,o),
(98,571,o),
(132,569,q),
(125,535,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 97 0 1 1 46 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,690,o),
(460,710,q),
(426,758,l),
(395,747,o),
(341,704,o),
(301,649,o),
(277,584,o),
(277,553,qs),
(277,532,o),
(287,491,o),
(310,459,o),
(345,439,o),
(370,439,qs),
(407,439,o),
(457,482,o),
(457,522,qs),
(457,556,o),
(416,599,o),
(381,601,q),
(389,636,o)
);
},
{
closed = 1;
nodes = (
(210,690,o),
(239,710,q),
(205,758,l),
(174,747,o),
(120,704,o),
(80,649,o),
(56,584,o),
(56,553,qs),
(56,532,o),
(66,491,o),
(88,459,o),
(123,439,o),
(148,439,qs),
(186,439,o),
(236,482,o),
(236,522,qs),
(236,556,o),
(195,599,o),
(160,601,q),
(168,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
37 36 17 16 4 0 74 2 1 0 1 1 0 89 2 1 0 0 1 97 3 1 1 0 1 81 36 29 36 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,690,o),
(238,710,q),
(204,758,l),
(174,747,o),
(120,704,o),
(80,649,o),
(56,584,o),
(56,553,qs),
(56,532,o),
(66,491,o),
(88,459,o),
(123,439,o),
(148,439,qs),
(185,439,o),
(235,482,o),
(235,522,qs),
(235,556,o),
(194,599,o),
(160,601,q),
(168,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
17 16 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,420,l),
(62,420,l),
(62,302,l),
(511,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,350,l),
(62,232,l),
(391,232,l),
(391,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,350,l),
(62,232,l),
(561,232,l),
(561,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,350,l),
(62,232,l),
(785,232,l),
(785,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 847;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,769,l),
(185,599,l),
(297,599,l),
(189,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 387;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,599,l),
(338,769,l),
(198,769,l),
(90,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 387;
}
);
note = acute;
unicode = 180;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,82,l),
(191,82,l),
(319,271,l),
(191,460,l),
(47,460,l),
(177,271,l)
);
},
{
closed = 1;
nodes = (
(270,82,l),
(414,82,l),
(543,271,l),
(414,460,l),
(270,460,l),
(401,271,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,82,l),
(192,82,l),
(320,271,l),
(192,460,l),
(47,460,l),
(178,271,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 347;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,460,l),
(250,271,l),
(378,82,l),
(523,82,l),
(392,271,l),
(523,460,l)
);
},
{
closed = 1;
nodes = (
(155,460,l),
(27,271,l),
(155,82,l),
(299,82,l),
(168,271,l),
(299,460,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 0 1 1 76 3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,460,l),
(27,271,l),
(155,82,l),
(300,82,l),
(169,271,l),
(300,460,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 347;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,350,l),
(62,232,l),
(391,232,l),
(391,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,120,o),
(45,78,qs),
(45,36,o),
(94,-8,o),
(132,-8,qs),
(170,-8,o),
(218,36,o),
(218,78,qs),
(218,120,o),
(170,166,o),
(132,166,qs),
(94,166,o)
);
},
{
closed = 1;
nodes = (
(306,120,o),
(306,78,qs),
(306,36,o),
(355,-8,o),
(393,-8,qs),
(431,-8,o),
(479,36,o),
(479,78,qs),
(479,120,o),
(431,166,o),
(393,166,qs),
(355,166,o)
);
},
{
closed = 1;
nodes = (
(567,120,o),
(567,78,qs),
(567,36,o),
(616,-8,o),
(654,-8,qs),
(692,-8,o),
(740,36,o),
(740,78,qs),
(740,120,o),
(692,166,o),
(654,166,qs),
(616,166,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 4 7 2 6 5 0 0 1 97 5 3 2 1 1 50 1 78 25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 785;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = uni0445;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,527,l),
(11,527,l),
(176,268,l),
(2,0,l),
(160,0,l),
(265,175,l),
(374,0,l),
(533,0,l),
(355,266,l),
(524,527,l),
(364,527,l),
(270,356,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 22 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = uni0445;
unicode = 1093;
},
{
glyphname = uni0431;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,227,o),
(72,156,o),
(107,90,o),
(134,64,qs),
(167,31,o),
(260,-7,o),
(320,-8,qs),
(381,-9,o),
(480,28,o),
(516,63,qs),
(594,135,o),
(594,265,qs),
(594,319,o),
(558,410,o),
(524,441,qs),
(493,471,o),
(408,501,o),
(357,501,qs),
(306,501,o),
(212,468,o),
(177,429,q),
(177,463,o),
(198,526,o),
(218,547,qs),
(234,565,o),
(277,585,o),
(307,589,qs),
(341,594,o),
(412,599,o),
(447,602,qs),
(476,604,o),
(533,610,o),
(560,622,q),
(560,755,l),
(544,750,o),
(507,743,o),
(467,738,o),
(426,734,o),
(406,732,qs),
(365,728,o),
(279,720,o),
(236,707,qs),
(203,696,o),
(150,664,o),
(130,642,qs),
(103,614,o),
(69,544,o),
(49,466,o),
(42,381,o),
(42,338,qs),
(42,302,o)
);
},
{
closed = 1;
nodes = (
(239,140,o),
(208,178,o),
(193,225,o),
(194,250,qs),
(195,279,o),
(216,324,o),
(253,356,o),
(301,372,o),
(329,372,qs),
(386,371,o),
(455,302,o),
(453,244,qs),
(453,220,o),
(436,175,o),
(403,138,o),
(355,117,o),
(323,117,qs),
(290,117,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
29 1 5 2 1 76 17 16 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
1 1 0 2 0 133 0 2 0 5 4 2 5 105 6 1 4 4 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 0 5 4 2 5 105 6 1 4 4 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
52 51 60 58 51 68 52 68 44 42 33 31 22 21 20 19 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = uni0431;
unicode = 1073;
},
{
glyphname = uni0432;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,0,l),
(308,0,ls),
(354,-1,o),
(440,13,o),
(473,36,qs),
(496,54,o),
(530,111,o),
(532,152,qs),
(534,195,o),
(493,263,o),
(450,278,q),
(483,297,o),
(514,357,o),
(514,387,qs),
(514,422,o),
(490,475,o),
(470,491,qs),
(453,505,o),
(413,520,o),
(369,526,o),
(323,527,o),
(302,527,qs),
(56,527,l)
);
},
{
closed = 1;
nodes = (
(197,220,l),
(325,220,ls),
(337,220,o),
(362,216,o),
(380,206,o),
(391,186,o),
(391,171,qs),
(391,154,o),
(375,132,o),
(350,122,o),
(321,119,o),
(308,119,qs),
(197,119,l)
);
},
{
closed = 1;
nodes = (
(197,412,l),
(305,412,ls),
(317,412,o),
(342,409,o),
(364,400,o),
(378,383,o),
(378,367,qs),
(378,340,o),
(342,319,o),
(318,319,qs),
(197,319,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
11 1 3 4 1 76 8 1 4 0 3 2 4 3 103 0 5 5 0 95 6 1 0 0 22 77 7 1 2 2 1 95 0 1 1 21 1 78 37 36 24 23 2 0 45 43 36 46 37 46 34 32 23 35 24 35 21 19 0 22 2 22 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni0432;
unicode = 1074;
},
{
glyphname = uni0433;
kernLeft = uni0432;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,0,l),
(197,0,l),
(197,405,l),
(453,405,l),
(453,527,l),
(56,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 2 95 3 1 2 2 22 77 0 1 1 21 1 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 474;
}
);
note = uni0433;
unicode = 1075;
},
{
glyphname = uni0434;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,460,o),
(119,333,o),
(112,266,qs),
(110,248,o),
(102,194,o),
(93,170,qs),
(85,149,o),
(59,122,o),
(34,122,qs),
(14,122,l),
(14,-145,l),
(156,-145,l),
(156,0,l),
(489,0,l),
(489,-145,l),
(630,-145,l),
(630,122,l),
(561,122,l),
(561,527,l),
(122,527,l)
);
},
{
closed = 1;
nodes = (
(234,155,o),
(246,240,o),
(248,278,qs),
(250,310,o),
(253,374,o),
(253,405,q),
(419,405,l),
(419,122,l),
(215,122,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
3 1 1 0 1 83 0 6 6 5 95 8 1 5 5 22 77 9 7 4 3 0 0 2 95 0 2 2 21 2 78 20 20 0 0 20 28 20 28 22 21 0 19 0 19 33 17 17 17 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = uni0434;
unicode = 1076;
},
{
glyphname = uni0436;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(679,0,l),
(846,0,l),
(684,277,l),
(834,527,l),
(672,527,l),
(564,322,l),
(495,322,l),
(495,527,l),
(354,527,l),
(354,322,l),
(285,322,l),
(177,527,l),
(14,527,l),
(164,277,l),
(2,0,l),
(170,0,l),
(279,200,l),
(354,200,l),
(354,0,l),
(495,0,l),
(495,200,l),
(570,200,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
18 7 2 1 4 1 76 6 1 4 10 9 2 1 0 4 1 103 7 5 2 3 3 22 77 8 2 2 0 0 21 0 78 0 0 0 21 0 21 18 17 17 17 17 18 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = uni0436;
unicode = 1078;
},
{
glyphname = uni043A;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,0,l),
(554,0,l),
(386,277,l),
(542,527,l),
(381,527,l),
(267,323,l),
(197,323,l),
(197,527,l),
(56,527,l),
(56,0,l),
(197,0,l),
(197,201,l),
(272,201,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 22 77 4 1 0 0 21 0 78 0 0 0 12 0 12 18 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = uni043A;
unicode = 1082;
},
{
glyphname = uni0438;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(183,0,l),
(420,305,l),
(420,0,l),
(562,0,l),
(562,527,l),
(441,527,l),
(197,212,l),
(197,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
5 0 2 1 0 1 76 3 1 0 0 22 77 2 1 1 1 21 1 78 17 18 17 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = uni0438;
unicode = 1080;
},
{
glyphname = uni0439;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(505,653,o),
(516,735,q),
(392,735,l),
(386,707,o),
(346,675,o),
(317,675,qs),
(288,675,o),
(248,707,o),
(241,735,q),
(118,735,l),
(128,653,o),
(235,572,o),
(317,572,qs),
(399,572,o)
);
},
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(183,0,l),
(420,305,l),
(420,0,l),
(562,0,l),
(562,527,l),
(441,527,l),
(197,212,l),
(197,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 14 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 2 2 1 112 0 2 8 1 0 4 2 0 106 7 1 4 4 22 77 6 1 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
3 1 1 2 1 133 0 2 8 1 0 4 2 0 106 7 1 4 4 22 77 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 23 22 21 20 18 17 16 15 11 10 8 6 4 3 0 13 1 13 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = uni0439;
unicode = 1081;
},
{
glyphname = uni043B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,453,o),
(113,321,o),
(108,258,qs),
(106,233,o),
(98,186,o),
(83,147,o),
(52,124,o),
(26,124,qs),
(12,124,l),
(12,0,l),
(59,0,ls),
(97,0,o),
(169,20,o),
(195,49,qs),
(209,66,o),
(226,108,o),
(235,156,o),
(239,202,o),
(241,223,qs),
(244,269,o),
(247,359,o),
(249,404,q),
(398,404,l),
(398,0,l),
(539,0,l),
(539,527,l),
(118,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 3 1 1 76 0 1 1 4 95 5 1 4 4 22 77 0 3 3 0 97 2 1 0 0 21 0 78 0 0 0 26 0 26 33 42 17 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = uni043B;
unicode = 1083;
},
{
glyphname = uni043C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,318,l),
(527,0,l),
(669,0,l),
(669,527,l),
(524,527,l),
(364,291,l),
(202,527,l),
(56,527,l),
(56,0,l),
(197,0,l),
(197,318,l),
(347,100,l),
(381,100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 1 3 4 1 1 76 5 1 4 1 0 1 4 0 128 2 1 1 1 22 77 3 1 0 0 21 0 78 0 0 0 12 0 12 17 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = uni043C;
unicode = 1084;
},
{
glyphname = uni043D;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,202,l),
(402,202,l),
(402,0,l),
(543,0,l),
(543,527,l),
(402,527,l),
(402,324,l),
(197,324,l),
(197,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 22 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = uni043D;
unicode = 1085;
},
{
glyphname = uni043F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,0,l),
(197,0,l),
(197,405,l),
(399,405,l),
(399,0,l),
(540,0,l),
(540,527,l),
(56,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 1 3 95 4 1 3 3 22 77 2 1 0 0 21 0 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = uni043F;
unicode = 1087;
},
{
glyphname = uni0442;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,0,l),
(318,0,l),
(318,405,l),
(494,405,l),
(494,527,l),
(3,527,l),
(3,405,l),
(177,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 22 77 0 2 2 21 2 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 497;
}
);
note = uni0442;
unicode = 1090;
},
{
glyphname = uni0444;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,538,l),
(258,538,o),
(149,502,o),
(72,432,o),
(30,328,o),
(32,261,qs),
(33,194,o),
(78,94,o),
(156,27,o),
(261,-7,o),
(323,-8,q),
(323,-220,l),
(467,-220,l),
(467,-8,l),
(528,-7,o),
(634,27,o),
(712,94,o),
(756,194,o),
(758,261,qs),
(759,329,o),
(715,433,o),
(636,502,o),
(529,537,o),
(467,538,q),
(467,713,l),
(323,713,l)
);
},
{
closed = 1;
nodes = (
(254,115,o),
(176,192,o),
(176,265,qs),
(176,338,o),
(254,415,o),
(323,415,q),
(323,114,l)
);
},
{
closed = 1;
nodes = (
(535,415,o),
(613,338,o),
(614,265,qs),
(614,192,o),
(536,115,o),
(467,114,q),
(467,415,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
10 1 5 5 20 77 9 1 6 6 0 97 4 1 0 0 29 77 8 1 7 7 1 97 3 1 1 1 30 77 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 1 6 6 0 97 4 1 0 0 29 77 8 1 7 7 1 97 3 1 1 1 30 77 0 2 2 5 95 10 1 5 5 20 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 39 38 34 33 32 31 27 26 0 25 0 25 24 17 17 24 17 11 7 27 
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = uni0444;
unicode = 1092;
},
{
glyphname = uni0446;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(475,-145,l),
(616,-145,l),
(616,122,l),
(543,122,l),
(543,527,l),
(402,527,l),
(402,122,l),
(197,122,l),
(197,527,l),
(56,527,l),
(56,0,l),
(475,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 4 1 4 84 2 1 0 0 22 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = uni0446;
unicode = 1094;
},
{
glyphname = uni0447;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,330,o),
(54,253,o),
(79,226,qs),
(108,195,o),
(190,172,o),
(234,170,qs),
(267,169,o),
(330,173,o),
(358,178,q),
(358,0,l),
(499,0,l),
(499,527,l),
(358,527,l),
(358,301,l),
(343,299,o),
(291,292,o),
(268,293,qs),
(239,294,o),
(203,305,o),
(182,327,o),
(174,365,o),
(174,393,qs),
(174,527,l),
(32,527,l),
(32,388,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 22 77 0 3 3 21 3 78 50 17 19 37 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = uni0447;
unicode = 1095;
},
{
glyphname = uni0448;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(789,527,l),
(647,527,l),
(647,122,l),
(493,122,l),
(493,527,l),
(351,527,l),
(351,122,l),
(197,122,l),
(197,527,l),
(56,527,l),
(56,0,l),
(789,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 2 0 0 22 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 844;
}
);
note = uni0448;
unicode = 1096;
},
{
glyphname = uni0449;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(720,-145,l),
(862,-145,l),
(862,122,l),
(789,122,l),
(789,527,l),
(647,527,l),
(647,122,l),
(493,122,l),
(493,527,l),
(351,527,l),
(351,122,l),
(197,122,l),
(197,527,l),
(56,527,l),
(56,0,l),
(720,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 6 1 6 84 4 2 2 0 0 22 77 5 3 2 1 1 7 96 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = uni0449;
unicode = 1097;
},
{
glyphname = uni044A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(354,0,ls),
(399,0,o),
(491,17,o),
(529,49,qs),
(558,73,o),
(590,140,o),
(592,188,qs),
(594,241,o),
(558,315,o),
(526,336,qs),
(499,356,o),
(427,372,o),
(383,372,qs),
(269,372,l),
(269,527,l),
(2,527,l),
(2,405,l),
(127,405,l)
);
},
{
closed = 1;
nodes = (
(269,251,l),
(374,251,ls),
(387,251,o),
(414,247,o),
(436,233,o),
(451,209,o),
(451,190,qs),
(451,170,o),
(437,142,o),
(413,126,o),
(381,119,o),
(363,119,qs),
(269,119,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 0 5 4 1 5 103 6 1 3 3 0 95 0 0 0 22 77 7 1 4 4 2 95 0 2 2 21 2 78 20 19 0 0 30 28 19 31 20 31 0 18 0 18 42 33 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = uni044A;
unicode = 1098;
},
{
glyphname = uni044B;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,0,l),
(265,0,ls),
(310,0,o),
(402,17,o),
(440,49,qs),
(469,73,o),
(501,140,o),
(503,188,qs),
(505,241,o),
(469,316,o),
(437,337,qs),
(409,357,o),
(337,372,o),
(294,372,qs),
(197,372,l),
(197,527,l),
(56,527,l)
);
},
{
closed = 1;
nodes = (
(197,251,l),
(284,251,ls),
(297,251,o),
(324,247,o),
(346,233,o),
(362,209,o),
(362,190,qs),
(363,148,o),
(310,119,o),
(274,119,qs),
(197,119,l)
);
},
{
closed = 1;
nodes = (
(565,527,l),
(565,0,l),
(706,0,l),
(706,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 0 0 4 3 0 4 103 6 7 2 2 2 22 77 8 1 3 3 1 96 5 1 1 1 21 1 78 18 17 0 0 31 30 29 28 26 24 17 27 18 27 0 16 0 16 42 33 9 7 24 
CALL[ ]	/* CallFunction */";
};
width = 762;
}
);
note = uni044B;
unicode = 1099;
},
{
glyphname = uni044C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,0,l),
(287,0,ls),
(333,0,o),
(424,17,o),
(463,49,qs),
(491,73,o),
(524,140,o),
(526,188,qs),
(528,241,o),
(492,316,o),
(461,337,qs),
(433,357,o),
(361,372,o),
(317,372,qs),
(197,372,l),
(197,527,l),
(56,527,l)
);
},
{
closed = 1;
nodes = (
(197,251,l),
(307,251,ls),
(320,251,o),
(347,247,o),
(370,233,o),
(385,209,o),
(385,190,qs),
(385,170,o),
(371,142,o),
(346,126,o),
(314,119,o),
(296,119,qs),
(197,119,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 4 3 0 4 103 5 1 2 2 22 77 6 1 3 3 1 96 0 1 1 21 1 78 18 17 0 0 28 26 17 29 18 29 0 16 0 16 42 33 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = uni044C;
unicode = 1100;
},
{
glyphname = uni044E;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,387,o),
(613,347,o),
(626,292,o),
(626,261,qs),
(626,229,o),
(612,177,o),
(581,138,o),
(536,117,o),
(504,117,qs),
(441,117,o),
(381,198,o),
(381,261,qs),
(381,292,o),
(394,347,o),
(424,387,o),
(471,412,o),
(504,412,qs),
(537,412,o)
);
},
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,203,l),
(251,203,l),
(266,101,o),
(391,-8,o),
(504,-8,qs),
(632,-8,o),
(766,134,o),
(766,264,qs),
(766,326,o),
(730,428,o),
(664,500,o),
(566,538,o),
(504,538,qs),
(394,538,o),
(268,425,o),
(251,325,q),
(197,325,l),
(197,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 0 5 1 2 5 103 8 1 0 0 3 97 7 1 3 3 29 77 0 1 1 4 97 6 1 4 4 30 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 5 1 2 5 103 0 7 7 22 77 8 1 0 0 3 97 0 3 3 29 77 0 1 1 4 97 6 1 4 4 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 0 5 1 2 5 103 0 7 7 22 77 8 1 0 0 3 97 0 3 3 29 77 0 6 6 21 77 0 1 1 4 97 0 4 4 30 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 38 37 36 35 34 33 31 29 23 21 19 18 9 7 0 17 1 17 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 797;
}
);
note = uni044E;
unicode = 1102;
},
{
glyphname = uni044F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,527,o),
(149,513,o),
(120,496,qs),
(89,476,o),
(47,408,o),
(45,356,qs),
(43,295,o),
(109,206,o),
(168,186,q),
(22,0,l),
(191,0,l),
(309,166,l),
(378,166,l),
(378,0,l),
(519,0,l),
(519,527,l),
(264,527,ls)
);
},
{
closed = 1;
nodes = (
(271,280,o),
(235,284,o),
(221,292,qs),
(208,300,o),
(188,327,o),
(188,346,qs),
(188,382,o),
(233,412,o),
(265,412,qs),
(378,412,l),
(378,280,l),
(288,280,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
7 1 1 5 1 76 7 1 5 0 1 0 5 1 103 0 4 4 3 95 6 1 3 3 22 77 2 1 0 0 21 0 78 17 17 0 0 17 28 17 27 20 18 0 16 0 15 17 17 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = uni044F;
unicode = 1103;
},
{
glyphname = u_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(554,0,l),
(554,527,l),
(413,527,l),
(413,275,ls),
(413,244,o),
(408,190,o),
(394,167,qs),
(380,142,o),
(329,116,o),
(300,117,qs),
(269,116,o),
(227,136,o),
(215,152,qs),
(201,172,o),
(192,221,o),
(192,249,qs),
(192,527,l),
(51,527,l),
(51,235,ls),
(51,183,o),
(67,99,o),
(90,65,qs),
(113,31,o),
(195,-8,o),
(255,-8,qs),
(303,-8,o),
(387,24,o),
(418,69,q),
(427,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
3 1 1 1 22 77 0 2 2 0 97 4 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
3 1 1 1 22 77 0 4 4 21 77 0 2 2 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 22 38 22 34 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = u_alt;
},
{
glyphname = uni0410;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,554,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 1 0 2 1 76 0 0 5 1 4 1 0 4 104 0 2 2 20 77 3 1 1 1 21 1 78 3 3 3 10 3 10 17 17 19 16 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = uni0410;
unicode = 1040;
},
{
glyphname = uni0415;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 20 77 0 3 3 4 95 0 4 4 21 4 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = uni0415;
unicode = 1045;
},
{
glyphname = uni041C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(219,0,l),
(219,489,l),
(410,183,l),
(475,183,l),
(664,489,l),
(664,0,l),
(809,0,l),
(809,708,l),
(654,708,l),
(445,375,l),
(233,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 6 1 3 2 0 1 76 0 2 0 1 0 2 1 128 5 4 2 0 0 20 77 3 1 1 1 21 1 78 0 0 0 12 0 12 18 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 884;
}
);
note = uni041C;
unicode = 1052;
},
{
glyphname = uni041D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,285,l),
(519,285,l),
(519,0,l),
(664,0,l),
(664,708,l),
(519,708,l),
(519,414,l),
(220,414,l),
(220,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 20 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = uni041D;
unicode = 1053;
},
{
glyphname = uni0420;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,209,l),
(357,209,ls),
(415,209,o),
(514,242,o),
(585,305,o),
(625,398,o),
(626,458,qs),
(627,527,o),
(588,622,o),
(515,681,o),
(411,708,o),
(347,708,qs),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(348,579,ls),
(409,579,o),
(485,523,o),
(483,455,qs),
(482,425,o),
(460,381,o),
(424,351,o),
(376,337,o),
(349,337,qs),
(220,337,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 3 0 1 2 3 1 103 0 4 4 0 95 5 1 0 0 20 77 0 2 2 21 2 78 16 15 1 0 24 22 15 25 16 25 13 12 11 9 0 14 1 14 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 659;
}
);
note = uni0420;
unicode = 1056;
},
{
glyphname = uni0422;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,0,l),
(373,0,l),
(373,579,l),
(595,579,l),
(595,708,l),
(6,708,l),
(6,579,l),
(228,579,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 20 77 0 2 2 21 2 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = uni0422;
unicode = 1058;
},
{
glyphname = uni0425;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,708,l),
(10,708,l),
(245,355,l),
(2,0,l),
(165,0,l),
(331,243,l),
(491,0,l),
(660,0,l),
(420,354,l),
(654,708,l),
(486,708,l),
(334,463,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = uni0425;
unicode = 1061;
},
{
glyphname = T;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,0,l),
(373,0,l),
(373,579,l),
(595,579,l),
(595,708,l),
(6,708,l),
(6,579,l),
(228,579,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = T;
unicode = 84;
},
{
glyphname = uni0412;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,0,o),
(512,16,o),
(557,47,qs),
(595,72,o),
(642,153,o),
(644,201,qs),
(645,231,o),
(633,287,o),
(606,335,o),
(562,371,o),
(531,380,q),
(575,406,o),
(612,482,o),
(611,531,qs),
(611,577,o),
(576,642,o),
(551,662,qs),
(520,688,o),
(437,708,o),
(388,708,qs),
(74,708,l),
(74,0,l),
(351,0,ls)
);
},
{
closed = 1;
nodes = (
(219,579,l),
(361,579,ls),
(383,579,o),
(425,576,o),
(441,566,qs),
(454,558,o),
(472,528,o),
(471,504,qs),
(470,481,o),
(448,447,o),
(432,437,qs),
(413,426,o),
(369,421,o),
(347,421,qs),
(219,421,l)
);
},
{
closed = 1;
nodes = (
(382,299,ls),
(405,299,o),
(448,295,o),
(465,284,qs),
(480,276,o),
(500,244,o),
(500,221,qs),
(500,196,o),
(482,163,o),
(468,152,qs),
(445,135,o),
(380,128,o),
(351,128,qs),
(219,128,l),
(219,298,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 5 2 1 76 7 1 2 0 5 4 2 5 103 0 3 3 0 95 0 0 0 20 77 0 4 4 1 95 6 1 1 1 21 1 78 24 23 0 0 52 50 40 38 36 34 23 37 24 37 0 22 0 21 33 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 682;
}
);
note = uni0412;
unicode = 1042;
},
{
glyphname = uni041F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,579,l),
(521,579,l),
(521,0,l),
(666,0,l),
(666,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 1 3 95 4 1 3 3 20 77 2 1 0 0 21 0 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = uni041F;
unicode = 1055;
},
{
glyphname = uni0413;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,579,l),
(565,579,l),
(565,708,l),
(75,708,l),
(75,0,l),
(220,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 20 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = uni0413;
unicode = 1043;
},
{
glyphname = uni041B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(487,0,l),
(632,0,l),
(632,708,l),
(131,708,l),
(129,631,o),
(130,498,o),
(128,432,qs),
(127,408,o),
(125,348,o),
(123,285,o),
(117,226,o),
(111,203,qs),
(108,190,o),
(94,163,o),
(72,141,o),
(42,127,o),
(23,127,qs),
(10,127,l),
(10,-1,l),
(31,-1,ls),
(61,-1,o),
(119,8,o),
(170,30,o),
(213,66,o),
(228,93,qs),
(241,118,o),
(256,174,o),
(263,231,o),
(265,287,o),
(266,312,qs),
(269,378,o),
(269,513,o),
(271,579,q),
(487,579,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
5 1 4 4 2 95 0 2 2 20 77 0 1 1 0 97 3 1 0 0 21 0 78 0 0 0 33 0 33 17 28 33 44 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = uni041B;
unicode = 1051;
},
{
glyphname = uni0414;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,149,o),
(260,207,o),
(266,269,o),
(268,329,o),
(268,352,qs),
(274,579,l),
(501,579,l),
(501,128,l),
(241,128,l)
);
},
{
closed = 1;
nodes = (
(646,128,l),
(646,708,l),
(136,708,l),
(136,606,o),
(133,507,qs),
(131,440,o),
(126,302,o),
(120,236,qs),
(119,225,o),
(115,200,o),
(109,174,o),
(98,150,o),
(91,143,qs),
(80,134,o),
(54,128,o),
(36,128,qs),
(10,128,l),
(10,-179,l),
(153,-179,l),
(153,0,l),
(589,0,l),
(589,-179,l),
(732,-179,l),
(732,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
4 1 2 1 2 83 0 0 0 6 95 0 6 6 20 77 7 5 8 3 1 1 3 95 0 3 3 21 3 78 0 0 32 31 30 29 17 15 14 13 12 11 10 9 0 8 0 8 17 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = uni0414;
unicode = 1044;
},
{
glyphname = uni0411;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,0,o),
(433,4,o),
(490,17,o),
(542,41,o),
(565,60,qs),
(602,92,o),
(636,176,o),
(637,227,qs),
(637,275,o),
(606,360,o),
(568,391,qs),
(535,417,o),
(442,438,o),
(382,438,qs),
(220,438,l),
(220,579,l),
(588,579,l),
(588,708,l),
(75,708,l),
(75,0,l),
(346,0,ls)
);
},
{
closed = 1;
nodes = (
(359,311,ls),
(384,311,o),
(432,307,o),
(470,290,o),
(494,256,o),
(494,226,qs),
(494,192,o),
(468,153,o),
(424,133,o),
(370,128,o),
(342,128,qs),
(220,128,l),
(220,310,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 2 0 5 4 2 5 103 0 1 1 0 95 0 0 0 20 77 0 4 4 3 95 6 1 3 3 21 3 78 0 0 33 31 23 21 0 20 0 18 33 17 17 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = uni0411;
unicode = 1041;
},
{
glyphname = uni0416;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(785,0,l),
(950,0,l),
(745,369,l),
(947,708,l),
(782,708,l),
(620,416,l),
(549,416,l),
(549,708,l),
(404,708,l),
(404,416,l),
(332,416,l),
(171,708,l),
(5,708,l),
(208,369,l),
(2,0,l),
(167,0,l),
(321,288,l),
(404,288,l),
(404,0,l),
(549,0,l),
(549,288,l),
(631,288,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
18 7 2 1 4 1 76 6 1 4 10 9 2 1 0 4 1 103 7 5 2 3 3 20 77 8 2 2 0 0 21 0 78 0 0 0 21 0 21 18 17 17 17 17 18 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 952;
}
);
note = uni0416;
unicode = 1046;
},
{
glyphname = uni0417;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,154,o),
(86,71,o),
(164,20,o),
(264,-4,o),
(321,-6,qs),
(375,-8,o),
(482,11,o),
(568,60,o),
(623,143,o),
(625,205,qs),
(627,267,o),
(574,361,o),
(513,381,q),
(555,404,o),
(598,487,o),
(598,530,qs),
(598,584,o),
(553,656,o),
(479,698,o),
(387,716,o),
(341,716,qs),
(281,717,o),
(170,693,o),
(132,667,qs),
(97,643,o),
(48,565,o),
(46,504,q),
(185,504,l),
(187,526,o),
(211,558,o),
(249,578,o),
(297,588,o),
(323,588,qs),
(344,588,o),
(391,582,o),
(431,564,o),
(456,532,o),
(456,506,qs),
(455,478,o),
(428,444,o),
(386,426,o),
(336,420,o),
(313,420,qs),
(250,420,l),
(250,301,l),
(343,301,ls),
(364,301,o),
(413,297,o),
(455,281,o),
(482,249,o),
(482,221,qs),
(482,189,o),
(452,150,o),
(405,130,o),
(349,124,o),
(324,125,qs),
(301,126,o),
(251,134,o),
(208,154,o),
(177,189,o),
(171,216,q),
(32,216,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
48 1 1 2 1 76 0 4 3 2 3 4 2 128 8 1 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 27 77 0 0 0 6 97 0 6 6 28 6 78 0 0 0 61 0 61 46 37 20 40 33 40 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 663;
}
);
note = uni0417;
unicode = 1047;
},
{
glyphname = uni0418;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(192,0,l),
(538,453,l),
(538,0,l),
(683,0,l),
(683,708,l),
(566,708,l),
(220,251,l),
(220,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
5 0 2 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 17 18 17 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 758;
}
);
note = uni0418;
unicode = 1048;
},
{
glyphname = uni0419;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(192,0,l),
(538,453,l),
(538,0,l),
(683,0,l),
(683,708,l),
(566,708,l),
(220,251,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(575,835,o),
(586,916,q),
(462,916,l),
(457,888,o),
(418,858,o),
(389,858,qs),
(328,858,o),
(314,916,q),
(192,916,l),
(201,835,o),
(307,755,o),
(388,755,qs),
(468,755,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
5 0 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 6 6 5 112 0 6 8 1 4 0 6 4 106 3 1 0 0 20 77 2 1 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
7 1 5 6 5 133 0 6 8 1 4 0 6 4 106 3 1 0 0 20 77 2 1 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
11 10 20 19 17 15 14 13 10 22 11 22 17 18 17 17 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 758;
}
);
note = uni0419;
unicode = 1049;
},
{
glyphname = uni041A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,0,l),
(672,0,l),
(419,372,l),
(669,708,l),
(501,708,l),
(295,416,l),
(220,416,l),
(220,708,l),
(75,708,l),
(75,0,l),
(220,0,l),
(220,288,l),
(309,288,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 20 77 4 1 0 0 21 0 78 0 0 0 12 0 12 18 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uni041A;
unicode = 1050;
},
{
glyphname = uni0423;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,708,l),
(7,708,l),
(270,209,l),
(255,179,o),
(220,147,o),
(184,131,o),
(148,128,o),
(131,128,qs),
(108,128,l),
(108,0,l),
(155,0,ls),
(213,-2,o),
(298,27,o),
(333,59,qs),
(354,79,o),
(389,132,o),
(419,190,o),
(444,248,o),
(455,274,qs),
(640,708,l),
(477,708,l),
(344,362,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
21 18 2 2 0 1 76 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 21 33 40 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = uni0423;
unicode = 1059;
},
{
glyphname = uni0424;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(185,636,o),
(37,497,o),
(36,363,qs),
(36,298,o),
(77,197,o),
(152,129,o),
(258,94,o),
(323,94,qs),
(359,94,l),
(359,-17,l),
(504,-17,l),
(504,94,l),
(545,94,ls),
(678,95,o),
(826,234,o),
(827,368,qs),
(827,433,o),
(786,534,o),
(711,602,o),
(604,637,o),
(540,637,qs),
(504,637,l),
(504,740,l),
(359,740,l),
(359,637,l),
(318,637,ls)
);
},
{
closed = 1;
nodes = (
(608,515,o),
(683,436,o),
(685,371,qs),
(687,301,o),
(619,217,o),
(546,217,qs),
(504,217,l),
(504,515,l),
(542,515,ls)
);
},
{
closed = 1;
nodes = (
(255,217,o),
(180,295,o),
(178,360,qs),
(176,430,o),
(244,515,o),
(317,515,qs),
(359,515,l),
(359,217,l),
(321,217,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
10 5 2 1 8 11 2 7 6 1 7 105 12 9 2 6 4 1 2 3 6 2 105 0 0 0 3 95 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 0 1 3 0 87 10 5 2 1 8 11 2 7 6 1 7 105 12 9 2 6 4 1 2 3 6 2 105 0 0 0 3 95 0 3 0 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
35 35 26 26 0 0 35 43 35 42 38 36 26 34 26 33 29 27 0 25 0 24 33 17 38 33 17 13 7 27 
CALL[ ]	/* CallFunction */";
};
width = 863;
}
);
note = uni0424;
unicode = 1060;
},
{
glyphname = uni0426;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,708,l),
(75,708,l),
(75,0,l),
(596,0,l),
(596,-179,l),
(739,-179,l),
(739,128,l),
(653,128,l),
(653,708,l),
(508,708,l),
(508,128,l),
(220,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 84 4 1 0 0 20 77 6 5 2 1 1 3 96 0 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 749;
}
);
note = uni0426;
unicode = 1062;
},
{
glyphname = uni0427;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,400,o),
(88,310,o),
(123,281,qs),
(156,254,o),
(251,230,o),
(310,228,qs),
(354,226,o),
(436,235,o),
(471,241,q),
(471,0,l),
(616,0,l),
(616,708,l),
(471,708,l),
(471,372,l),
(436,366,o),
(373,359,o),
(338,360,qs),
(301,360,o),
(248,371,o),
(213,399,o),
(197,448,o),
(197,486,qs),
(197,708,l),
(52,708,l),
(52,466,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 20 77 0 3 3 21 3 78 35 17 19 37 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = uni0427;
unicode = 1063;
},
{
glyphname = uni0428;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(936,708,l),
(791,708,l),
(791,128,l),
(578,128,l),
(578,708,l),
(433,708,l),
(433,128,l),
(220,128,l),
(220,708,l),
(75,708,l),
(75,0,l),
(936,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 2 0 0 20 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1011;
}
);
note = uni0428;
unicode = 1064;
},
{
glyphname = uni0429;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(878,-179,l),
(1021,-179,l),
(1021,128,l),
(936,128,l),
(936,708,l),
(791,708,l),
(791,128,l),
(578,128,l),
(578,708,l),
(433,708,l),
(433,128,l),
(220,128,l),
(220,708,l),
(75,708,l),
(75,0,l),
(878,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 6 1 6 84 4 2 2 0 0 20 77 5 3 2 1 1 7 96 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1031;
}
);
note = uni0429;
unicode = 1065;
},
{
glyphname = uni042A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,0,o),
(594,18,o),
(632,41,qs),
(677,67,o),
(729,161,o),
(730,232,qs),
(730,282,o),
(705,354,o),
(684,381,qs),
(652,419,o),
(546,453,o),
(476,453,qs),
(310,453,l),
(310,708,l),
(5,708,l),
(5,579,l),
(165,579,l),
(165,0,l),
(440,0,ls)
);
},
{
closed = 1;
nodes = (
(454,325,ls),
(479,325,o),
(528,319,o),
(566,299,o),
(589,263,o),
(589,233,qs),
(589,199,o),
(562,158,o),
(519,135,o),
(463,128,o),
(435,128,qs),
(310,128,l),
(310,324,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 20 77 0 4 4 3 95 6 1 3 3 21 3 78 0 0 31 29 21 19 0 18 0 17 33 17 17 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 768;
}
);
note = uni042A;
unicode = 1066;
},
{
glyphname = uni042B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,0,o),
(475,18,o),
(513,41,qs),
(558,67,o),
(610,161,o),
(611,232,qs),
(611,282,o),
(586,354,o),
(564,381,qs),
(532,419,o),
(426,453,o),
(356,453,qs),
(220,453,l),
(220,708,l),
(75,708,l),
(75,0,l),
(320,0,ls)
);
},
{
closed = 1;
nodes = (
(334,325,ls),
(360,325,o),
(409,319,o),
(446,300,o),
(469,263,o),
(469,233,qs),
(469,199,o),
(442,158,o),
(399,135,o),
(344,128,o),
(316,128,qs),
(220,128,l),
(220,324,l)
);
},
{
closed = 1;
nodes = (
(845,0,l),
(845,708,l),
(700,708,l),
(700,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 1 0 4 3 1 4 103 5 1 0 0 20 77 0 3 3 2 96 6 7 2 2 2 21 2 78 0 0 33 32 31 30 29 27 19 17 0 16 0 15 33 17 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 920;
}
);
note = uni042B;
unicode = 1067;
},
{
glyphname = uni042C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,0,o),
(502,18,o),
(540,41,qs),
(585,67,o),
(637,161,o),
(638,232,qs),
(638,282,o),
(612,355,o),
(590,382,qs),
(558,420,o),
(454,453,o),
(384,453,qs),
(219,453,l),
(219,708,l),
(74,708,l),
(74,0,l),
(348,0,ls)
);
},
{
closed = 1;
nodes = (
(361,325,ls),
(387,325,o),
(435,319,o),
(473,299,o),
(496,263,o),
(496,233,qs),
(496,199,o),
(470,158,o),
(426,135,o),
(372,128,o),
(344,128,qs),
(219,128,l),
(219,324,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 0 4 3 1 4 103 0 0 0 20 77 0 3 3 2 96 5 1 2 2 21 2 78 0 0 29 27 19 17 0 16 0 15 33 17 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni042C;
unicode = 1068;
},
{
glyphname = uni042D;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,292,l),
(525,292,l),
(523,255,o),
(497,193,o),
(451,149,o),
(387,124,o),
(348,124,qs),
(326,124,o),
(274,131,o),
(225,155,o),
(185,197,o),
(176,232,q),
(36,232,l),
(42,171,o),
(96,82,o),
(134,54,qs),
(180,20,o),
(289,-7,o),
(345,-6,qs),
(428,-5,o),
(553,50,o),
(636,146,o),
(678,277,o),
(678,355,qs),
(678,431,o),
(640,562,o),
(560,659,o),
(439,715,o),
(355,717,qs),
(295,718,o),
(186,687,o),
(101,626,o),
(46,535,o),
(40,477,q),
(181,477,l),
(187,502,o),
(217,544,o),
(261,572,o),
(316,588,o),
(348,588,qs),
(390,588,o),
(454,561,o),
(498,514,o),
(522,452,o),
(525,416,q),
(248,416,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 8 1 7 0 6 4 7 6 103 0 0 0 2 97 0 2 2 27 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 45 0 45 20 36 21 40 36 20 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 714;
}
);
note = uni042D;
unicode = 1069;
},
{
glyphname = uni042E;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,484,o),
(519,548,o),
(591,587,o),
(642,587,qs),
(693,587,o),
(766,548,o),
(814,483,o),
(836,399,o),
(836,355,qs),
(836,310,o),
(813,226,o),
(765,162,o),
(692,123,o),
(642,123,qs),
(591,123,o),
(518,162,o),
(472,227,o),
(451,311,o),
(451,356,qs),
(451,401,o)
);
},
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,285,l),
(308,285,l),
(317,221,o),
(368,114,o),
(452,37,o),
(567,-6,o),
(640,-6,qs),
(723,-7,o),
(851,48,o),
(939,145,o),
(985,279,o),
(985,357,qs),
(985,436,o),
(940,568,o),
(853,663,o),
(726,716,o),
(643,716,qs),
(568,716,o),
(451,671,o),
(366,591,o),
(315,480,o),
(307,414,q),
(220,414,l),
(220,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 0 5 0 2 5 103 0 1 1 3 97 7 1 3 3 27 77 0 0 0 4 97 6 1 4 4 28 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 5 0 2 5 103 0 7 7 20 77 0 1 1 3 97 0 3 3 27 77 0 0 0 4 97 6 1 4 4 28 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 5 0 2 5 103 0 7 7 20 77 0 1 1 3 97 0 3 3 27 77 0 6 6 21 77 0 0 0 4 97 0 4 4 28 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 20 40 36 20 40 36 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 1021;
}
);
note = uni042E;
unicode = 1070;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,708,o),
(183,688,o),
(145,661,qs),
(106,632,o),
(60,540,o),
(59,471,qs),
(58,386,o),
(145,273,o),
(230,255,q),
(43,0,l),
(211,0,l),
(378,239,l),
(473,239,l),
(473,0,l),
(618,0,l),
(618,708,l),
(344,708,ls)
);
},
{
closed = 1;
nodes = (
(327,365,o),
(269,373,o),
(247,387,qs),
(228,398,o),
(202,440,o),
(202,468,qs),
(202,504,o),
(227,551,o),
(250,564,qs),
(267,574,o),
(314,579,o),
(341,579,qs),
(473,579,l),
(473,365,l),
(356,365,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
7 1 1 5 1 76 7 1 5 0 1 0 5 1 103 0 4 4 3 95 6 1 3 3 20 77 2 1 0 0 21 0 78 17 17 0 0 17 31 17 30 20 18 0 16 0 15 17 17 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 693;
}
);
note = uni042F;
unicode = 1071;
},
{
glyphname = uni0440;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,-220,l),
(197,-220,l),
(197,59,l),
(216,37,o),
(259,11,o),
(303,-3,o),
(347,-8,o),
(369,-8,qs),
(414,-8,o),
(504,27,o),
(535,61,qs),
(572,99,o),
(603,204,o),
(603,269,qs),
(603,321,o),
(579,415,o),
(553,450,qs),
(521,498,o),
(425,539,o),
(369,538,qs),
(322,537,o),
(229,494,o),
(198,456,q),
(190,527,l)
);
},
{
closed = 1;
nodes = (
(412,390,o),
(445,350,o),
(462,296,o),
(462,265,qs),
(462,233,o),
(445,179,o),
(414,139,o),
(366,117,o),
(332,117,qs),
(269,119,o),
(196,200,o),
(197,267,qs),
(197,297,o),
(216,349,o),
(250,389,o),
(299,412,o),
(330,412,qs),
(364,412,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 0 97 3 1 0 0 29 77 0 5 5 1 97 0 1 1 30 77 0 2 2 24 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 4 4 0 97 3 1 0 0 29 77 0 5 5 1 97 0 1 1 30 77 0 2 2 0 97 3 1 0 0 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 0 97 0 0 0 29 77 0 5 5 1 97 0 1 1 30 77 0 2 2 3 95 0 3 3 22 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
26 25 34 32 25 42 26 42 17 21 42 34 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = uni0440;
unicode = 1088;
},
{
glyphname = O;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 1 1 2 97 4 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 21 20 31 29 20 39 21 39 40 36 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = O;
unicode = 79;
},
{
glyphname = be_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,707,o),
(201,679,qs),
(155,655,o),
(92,591,o),
(72,551,qs),
(48,504,o),
(32,397,o),
(32,338,qs),
(32,302,o),
(40,227,o),
(61,156,o),
(96,91,o),
(124,64,qs),
(157,31,o),
(251,-7,o),
(312,-8,qs),
(373,-9,o),
(473,28,o),
(509,63,qs),
(587,135,o),
(587,265,qs),
(587,319,o),
(550,409,o),
(517,441,qs),
(486,470,o),
(403,502,o),
(351,501,qs),
(300,500,o),
(209,467,o),
(174,429,q),
(176,460,o),
(195,508,o),
(210,526,qs),
(237,562,o),
(292,577,q),
(346,596,o),
(466,623,o),
(518,644,qs),
(541,654,o),
(576,688,o),
(584,712,q),
(505,806,l),
(497,795,o),
(464,770,o),
(437,762,qs),
(379,741,o)
);
},
{
closed = 1;
nodes = (
(231,140,o),
(198,178,o),
(183,225,o),
(184,250,qs),
(187,311,o),
(265,373,o),
(321,372,qs),
(378,371,o),
(447,302,o),
(446,244,qs),
(446,220,o),
(428,175,o),
(395,138,o),
(346,117,o),
(315,117,qs),
(282,117,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
15 1 3 0 1 76 4 3 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 47 46 55 53 46 61 47 61 30 28 19 17 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = be_alt;
},
{
glyphname = a;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
24 36 20 34 41 39 40 64 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = a;
unicode = 97;
},
{
glyphname = c;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,138,o),
(189,177,o),
(175,230,o),
(175,262,qs),
(175,292,o),
(187,346,o),
(215,388,o),
(263,412,o),
(296,412,qs),
(335,412,o),
(384,374,o),
(389,350,q),
(537,350,l),
(530,399,o),
(489,470,o),
(426,516,o),
(345,538,o),
(299,538,qs),
(236,538,o),
(138,499,o),
(71,427,o),
(35,325,o),
(35,264,qs),
(35,201,o),
(68,100,o),
(132,29,o),
(229,-8,o),
(295,-8,qs),
(339,-8,o),
(421,12,o),
(486,58,o),
(530,128,o),
(537,179,q),
(389,179,l),
(384,155,o),
(337,117,o),
(297,117,qs),
(264,117,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 49 77 6 1 0 0 2 97 0 2 2 50 2 78 1 0 29 27 25 24 20 18 10 8 4 3 0 37 1 37 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = c;
unicode = 99;
},
{
glyphname = e;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 1 4 0 4 1 0 128 8 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 7 1 0 0 2 97 0 2 2 50 2 78 26 26 1 0 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,579,ls),
(241,645,o),
(306,645,qs),
(370,645,l),
(370,768,l),
(286,768,ls),
(193,768,o),
(100,684,o),
(100,595,qs),
(100,527,l),
(20,527,l),
(20,404,l),
(100,404,l),
(100,0,l),
(241,0,l),
(241,404,l),
(370,404,l),
(370,527,l),
(241,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 3 4 5 105 2 1 0 0 3 95 7 6 2 3 3 41 77 0 1 1 39 1 78 0 0 0 18 0 18 33 35 17 17 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,-54,o),
(406,-110,o),
(351,-144,o),
(308,-144,qs),
(268,-144,o),
(212,-106,o),
(208,-82,q),
(58,-82,l),
(65,-132,o),
(110,-204,o),
(179,-251,o),
(263,-272,o),
(309,-272,qs),
(345,-272,o),
(415,-258,o),
(477,-227,o),
(528,-181,o),
(546,-148,qs),
(562,-121,o),
(578,-62,o),
(585,1,o),
(585,65,o),
(585,96,qs),
(585,527,l),
(463,527,l),
(448,473,l),
(417,508,o),
(331,538,o),
(294,536,q),
(237,537,o),
(138,499,o),
(107,465,qs),
(35,387,o),
(35,257,qs),
(35,202,o),
(65,98,o),
(103,58,qs),
(137,23,o),
(230,-8,o),
(279,-8,qs),
(328,-8,o),
(412,20,o),
(442,54,q),
(442,18,o)
);
},
{
closed = 1;
nodes = (
(228,138,o),
(194,177,o),
(177,230,o),
(177,263,qs),
(177,294,o),
(193,348,o),
(226,388,o),
(277,412,o),
(310,412,qs),
(374,411,o),
(443,330,o),
(443,268,qs),
(443,237,o),
(427,182,o),
(395,141,o),
(344,117,o),
(311,117,qs),
(278,117,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
17 1 7 1 0 1 0 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
17 1 7 2 0 1 0 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 0 5 0 4 5 128 0 7 7 1 97 2 1 1 1 49 77 8 1 6 6 0 97 0 0 0 50 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 8 1 6 6 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 8 1 6 6 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
45 44 53 51 44 61 45 61 34 20 42 19 41 34 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = g;
unicode = 103;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,727,o),
(61,688,qs),
(61,648,o),
(110,602,o),
(149,602,qs),
(188,602,o),
(237,648,o),
(237,688,qs),
(237,727,o),
(188,774,o),
(149,774,qs),
(110,774,o)
);
},
{
closed = 1;
nodes = (
(78,-81,o),
(40,-118,o),
(7,-118,qs),
(-43,-118,l),
(-43,-242,l),
(36,-242,ls),
(221,-241,o),
(219,-65,qs),
(219,527,l),
(78,527,l),
(78,-48,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 97 5 1 0 0 48 77 0 2 2 41 77 0 4 4 3 96 0 3 3 43 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 0 0 1 2 0 1 105 0 2 2 41 77 0 4 4 3 96 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 0 0 1 2 0 1 105 0 4 0 3 4 3 100 0 2 2 41 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 20 18 17 15 13 12 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = j;
unicode = 106;
},
{
glyphname = o;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
4 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 5 1 2 2 50 2 78 13 12 1 0 21 19 12 27 13 27 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = o;
unicode = 111;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,237,ls),
(197,275,o),
(208,335,o),
(231,361,qs),
(246,377,o),
(285,394,o),
(327,402,o),
(374,403,o),
(397,403,q),
(397,533,l),
(387,535,o),
(363,537,o),
(350,537,qs),
(299,537,o),
(226,499,o),
(194,461,q),
(186,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
6 1 3 0 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 23 35 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = r;
unicode = 114;
},
{
glyphname = t;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,527,l),
(238,527,l),
(238,670,l),
(97,670,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,173,ls),
(97,84,o),
(188,-4,o),
(293,0,qs),
(359,0,l),
(359,123,l),
(307,123,ls),
(238,123,o),
(238,191,qs),
(238,404,l),
(364,404,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 7 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 0 0 0 18 0 18 17 17 17 19 33 34 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = t;
unicode = 116;
},
{
glyphname = y_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,-108,o),
(205,-85,q),
(56,-85,l),
(63,-135,o),
(106,-206,o),
(173,-253,o),
(257,-274,o),
(304,-274,qs),
(385,-274,o),
(487,-219,o),
(517,-177,qs),
(535,-152,o),
(558,-90,o),
(569,-21,o),
(572,55,o),
(572,95,qs),
(572,527,l),
(430,527,l),
(430,277,ls),
(430,245,o),
(425,191,o),
(411,168,qs),
(396,141,o),
(345,117,o),
(316,117,qs),
(254,117,o),
(228,150,qs),
(212,170,o),
(203,222,o),
(203,251,qs),
(203,527,l),
(62,527,l),
(62,233,ls),
(62,181,o),
(80,96,o),
(104,61,qs),
(128,27,o),
(215,-8,o),
(270,-8,qs),
(325,-8,o),
(404,24,o),
(430,61,q),
(430,24,o),
(424,-49,o),
(399,-108,o),
(346,-145,o),
(301,-145,qs),
(261,-145,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 1 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 1 0 1 6 0 128 4 1 2 2 22 77 0 3 3 1 97 0 1 1 30 77 7 1 0 0 5 97 0 5 5 31 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 6 1 0 1 6 0 128 7 1 0 0 5 0 5 101 4 1 2 2 22 77 0 3 3 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 45 44 40 38 30 29 23 21 16 15 9 7 0 47 1 47 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = y_alt;
},
{
glyphname = y2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,527,l),
(10,527,l),
(247,-49,l),
(227,-101,o),
(164,-154,o),
(107,-154,qs),
(85,-154,l),
(85,-277,l),
(120,-277,ls),
(182,-277,o),
(264,-246,o),
(293,-220,qs),
(319,-196,o),
(360,-128,o),
(378,-81,qs),
(398,-26,o),
(433,78,o),
(451,134,qs),
(585,527,l),
(432,527,l),
(315,136,l),
(314,136,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 41 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = y2_alt;
},
{
glyphname = uni0443;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,527,l),
(10,527,l),
(247,-49,l),
(227,-101,o),
(164,-154,o),
(107,-154,qs),
(85,-154,l),
(85,-277,l),
(120,-277,ls),
(182,-277,o),
(264,-246,o),
(293,-220,qs),
(319,-196,o),
(360,-128,o),
(378,-81,qs),
(398,-26,o),
(433,78,o),
(451,134,qs),
(585,527,l),
(432,527,l),
(315,138,l),
(314,138,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 41 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = uni0443;
unicode = 1091;
},
{
glyphname = uni0451;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,701,o),
(87,663,qs),
(87,622,o),
(135,577,o),
(174,577,qs),
(212,577,o),
(262,622,o),
(262,663,qs),
(262,701,o),
(212,746,o),
(174,746,qs),
(135,746,o)
);
},
{
closed = 1;
nodes = (
(331,701,o),
(331,663,qs),
(331,622,o),
(380,577,o),
(418,577,qs),
(457,577,o),
(505,622,o),
(505,663,qs),
(505,701,o),
(457,746,o),
(418,746,qs),
(380,746,o)
);
},
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
0 5 8 4 8 5 4 128 12 2 11 3 0 3 1 1 7 0 1 105 14 1 10 0 8 5 10 8 103 0 9 9 7 97 0 7 7 29 77 13 1 4 4 6 97 0 6 6 30 6 78 50 50 25 24 13 12 1 0 50 58 50 58 56 54 47 46 42 40 34 32 28 27 24 49 25 49 19 17 12 23 13 23 7 5 0 11 1 11 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni0451;
unicode = 1105;
},
{
glyphname = uni0437;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,348,o),
(491,387,qs),
(489,430,o),
(452,488,o),
(393,523,o),
(319,538,o),
(281,538,qs),
(241,538,o),
(162,525,o),
(95,488,o),
(48,420,o),
(42,366,q),
(175,366,l),
(177,384,o),
(197,406,o),
(226,419,o),
(260,424,o),
(275,424,qs),
(288,424,o),
(318,420,o),
(344,409,o),
(362,389,o),
(362,373,qs),
(362,354,o),
(344,331,o),
(319,320,o),
(288,317,o),
(274,317,qs),
(210,317,l),
(210,212,l),
(293,212,ls),
(330,212,o),
(375,189,o),
(374,160,qs),
(373,141,o),
(355,121,o),
(325,110,o),
(291,107,o),
(274,107,qs),
(257,107,o),
(221,111,o),
(190,124,o),
(166,148,o),
(162,169,q),
(25,169,l),
(27,118,o),
(73,51,o),
(142,9,o),
(226,-8,o),
(267,-8,qs),
(303,-8,o),
(378,2,o),
(411,16,qs),
(451,34,o),
(507,104,o),
(508,164,qs),
(509,200,o),
(473,268,o),
(438,281,q),
(460,295,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 29 77 0 2 2 0 97 0 0 0 30 0 78 36 20 40 33 38 36 20 40 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = uni0437;
unicode = 1079;
},
{
glyphname = uni044D;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,135,o),
(176,150,q),
(28,150,l),
(38,106,o),
(87,46,o),
(154,8,o),
(231,-8,o),
(270,-8,qs),
(327,-8,o),
(421,24,o),
(451,54,qs),
(525,126,o),
(525,265,qs),
(525,326,o),
(493,428,o),
(429,499,o),
(334,538,o),
(272,538,qs),
(227,538,o),
(147,518,o),
(83,477,o),
(37,413,o),
(27,369,q),
(176,369,l),
(180,379,o),
(200,396,o),
(227,408,o),
(260,414,o),
(276,414,qs),
(328,414,o),
(387,360,o),
(389,319,q),
(193,319,l),
(193,208,l),
(389,208,l),
(387,166,o),
(327,114,o),
(273,114,qs),
(240,114,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 4 3 2 3 4 2 128 0 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 29 77 8 1 0 0 6 97 0 6 6 30 6 78 1 0 36 35 31 29 21 19 15 14 10 8 6 5 4 3 0 38 1 38 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = uni044D;
unicode = 1101;
},
{
glyphname = C;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,487,o),
(255,551,o),
(328,588,o),
(379,588,qs),
(443,588,o),
(525,528,o),
(536,477,q),
(676,477,l),
(670,540,o),
(619,631,o),
(539,689,o),
(437,717,o),
(379,717,qs),
(296,717,o),
(169,662,o),
(81,565,o),
(36,432,o),
(36,355,qs),
(36,276,o),
(80,144,o),
(167,48,o),
(294,-6,o),
(377,-6,qs),
(433,-6,o),
(537,24,o),
(619,84,o),
(671,173,o),
(676,232,q),
(536,232,l),
(526,181,o),
(443,124,o),
(379,124,qs),
(328,124,o),
(255,163,o),
(208,227,o),
(185,311,o),
(185,356,qs),
(185,402,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 34 20 40 36 18 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = C;
unicode = 67;
},
{
glyphname = S;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,557,o),
(542,637,o),
(475,689,o),
(386,716,o),
(334,717,qs),
(287,718,o),
(193,700,o),
(115,654,o),
(65,575,o),
(62,515,qs),
(60,464,o),
(99,380,o),
(138,353,qs),
(170,330,o),
(251,305,o),
(289,295,qs),
(306,291,o),
(332,285,o),
(356,280,o),
(381,273,o),
(397,269,qs),
(420,263,o),
(459,233,o),
(459,201,qs),
(459,178,o),
(439,148,o),
(404,131,o),
(358,125,o),
(333,126,qs),
(309,127,o),
(262,137,o),
(224,159,o),
(196,193,o),
(190,219,q),
(42,219,l),
(45,162,o),
(91,78,o),
(168,22,o),
(268,-7,o),
(325,-8,qs),
(384,-10,o),
(482,13,o),
(519,39,qs),
(558,65,o),
(604,151,o),
(604,212,qs),
(603,268,o),
(565,338,o),
(503,380,o),
(423,404,o),
(380,413,qs),
(368,416,o),
(336,422,o),
(302,431,o),
(267,442,o),
(252,449,qs),
(231,459,o),
(206,491,o),
(207,514,qs),
(207,536,o),
(229,566,o),
(263,584,o),
(302,590,o),
(320,590,qs),
(371,588,o),
(439,549,o),
(445,504,q),
(589,504,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 67 0 67 63 61 39 37 33 32 28 26 34 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni0421;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,485,o),
(255,550,o),
(328,588,o),
(379,588,qs),
(443,588,o),
(525,528,o),
(536,477,q),
(676,477,l),
(670,540,o),
(619,631,o),
(539,689,o),
(437,717,o),
(379,717,qs),
(296,717,o),
(169,662,o),
(81,565,o),
(36,432,o),
(36,355,qs),
(36,276,o),
(80,144,o),
(167,48,o),
(294,-6,o),
(377,-6,qs),
(433,-6,o),
(537,24,o),
(619,84,o),
(671,173,o),
(676,232,q),
(536,232,l),
(526,181,o),
(443,124,o),
(379,124,qs),
(328,124,o),
(255,163,o),
(208,227,o),
(185,311,o),
(185,356,qs),
(185,401,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 27 77 0 0 0 2 97 0 2 2 28 2 78 34 20 40 36 18 36 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = uni0421;
unicode = 1057;
},
{
glyphname = G;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,483,o),
(253,547,o),
(325,586,o),
(375,588,qs),
(438,590,o),
(529,528,o),
(539,477,q),
(679,477,l),
(674,537,o),
(622,627,o),
(542,687,o),
(438,717,o),
(381,717,qs),
(298,717,o),
(169,664,o),
(81,569,o),
(36,435,o),
(36,354,qs),
(36,275,o),
(81,143,o),
(168,47,o),
(297,-6,o),
(380,-6,qs),
(460,-6,o),
(574,43,o),
(612,83,qs),
(639,111,o),
(672,182,o),
(689,258,o),
(693,338,o),
(692,376,q),
(372,376,l),
(372,259,l),
(550,259,l),
(547,224,o),
(518,172,o),
(472,139,o),
(413,123,o),
(382,124,qs),
(331,125,o),
(257,163,o),
(209,226,o),
(186,309,o),
(186,355,qs),
(186,400,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 34 20 40 39 17 20 36 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = G;
unicode = 71;
},
{
glyphname = uni041E;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 1 1 2 97 4 1 2 2 27 77 0 0 0 3 97 0 3 3 28 3 78 21 20 31 29 20 39 21 39 40 36 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = uni041E;
unicode = 1054;
},
{
glyphname = Q;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(728,-24,l),
(637,91,l),
(685,140,o),
(736,277,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o),
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(456,-6,o),
(516,15,q),
(617,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
40 1 2 0 1 76 42 41 2 2 73 0 1 1 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 40 37 40 36 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Q;
unicode = 81;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,708,l),
(377,237,ls),
(377,187,o),
(333,121,o),
(277,122,qs),
(220,123,o),
(177,188,o),
(177,238,q),
(31,238,l),
(29,180,o),
(63,90,o),
(94,58,qs),
(158,-5,o),
(275,-6,qs),
(337,-8,o),
(429,26,o),
(459,56,qs),
(493,90,o),
(522,188,o),
(522,254,qs),
(522,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 3 2 2 1 114 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 3 1 2 128 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 34 20 37 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = J;
unicode = 74;
},
{
glyphname = K_alt;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,247,l),
(273,301,l),
(499,0,l),
(669,0,l),
(374,393,l),
(671,708,l),
(499,708,l),
(220,404,l),
(220,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 3 0 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 17 19 18 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = K_alt;
},
{
glyphname = K;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,0,l),
(672,0,l),
(419,372,l),
(669,708,l),
(501,708,l),
(295,416,l),
(220,416,l),
(220,708,l),
(75,708,l),
(75,0,l),
(220,0,l),
(220,288,l),
(309,288,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 38 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = K;
unicode = 75;
},
{
glyphname = k_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,708,l),
(56,708,l),
(56,0,l),
(197,0,l),
(197,168,l),
(243,215,l),
(403,0,l),
(563,0,l),
(342,303,l),
(553,527,l),
(384,527,l),
(197,319,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
11 6 5 2 4 1 0 1 76 0 3 3 20 77 0 0 0 22 77 2 1 1 1 21 1 78 17 19 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = k_alt;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,0,l),
(554,0,l),
(386,277,l),
(542,527,l),
(381,527,l),
(267,323,l),
(197,323,l),
(197,708,l),
(56,708,l),
(56,0,l),
(197,0,l),
(197,201,l),
(272,201,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 0 1 1 38 77 0 3 3 41 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = k;
unicode = 107;
},
{
glyphname = i_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,726,o),
(64,688,qs),
(64,648,o),
(112,603,o),
(152,603,qs),
(190,603,o),
(238,648,o),
(238,688,qs),
(238,726,o),
(190,772,o),
(152,772,qs),
(112,772,o)
);
},
{
closed = 1;
nodes = (
(80,404,l),
(80,0,l),
(221,0,l),
(221,527,l),
(0,527,l),
(0,404,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 0 0 1 2 0 1 105 0 4 4 2 95 0 2 2 22 77 0 3 3 21 3 78 1 0 17 16 15 14 13 12 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 286;
}
);
note = i_alt;
},
{
glyphname = j_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,727,o),
(73,688,qs),
(73,648,o),
(122,602,o),
(163,602,qs),
(201,602,o),
(250,648,o),
(250,688,qs),
(250,727,o),
(201,774,o),
(163,774,qs),
(123,774,o)
);
},
{
closed = 1;
nodes = (
(91,404,l),
(91,-48,ls),
(91,-81,o),
(54,-118,o),
(20,-118,qs),
(-30,-118,l),
(-30,-242,l),
(49,-242,ls),
(232,-241,o),
(232,-65,qs),
(232,527,l),
(11,527,l),
(11,404,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 1 2 0 1 105 0 5 5 2 95 0 2 2 22 77 0 4 4 3 95 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 0 0 1 2 0 1 105 0 4 0 3 4 3 99 0 5 5 2 95 0 2 2 22 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 24 23 20 18 17 15 13 12 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = j_alt;
},
{
glyphname = s_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,419,o),
(354,405,o),
(370,380,o),
(371,360,q),
(504,360,l),
(504,405,o),
(471,471,o),
(413,515,o),
(335,537,o),
(291,539,qs),
(249,540,o),
(167,526,o),
(98,489,o),
(53,426,o),
(49,381,qs),
(47,332,o),
(83,272,o),
(112,253,qs),
(140,236,o),
(207,221,o),
(243,213,qs),
(330,196,ls),
(354,191,o),
(381,170,o),
(379,152,qs),
(378,136,o),
(359,117,o),
(331,107,o),
(300,104,o),
(287,104,qs),
(269,105,o),
(229,113,o),
(196,130,o),
(172,159,o),
(169,180,q),
(31,180,l),
(31,124,o),
(84,41,o),
(135,16,qs),
(171,-1,o),
(246,-15,o),
(285,-15,qs),
(326,-15,o),
(409,1,o),
(444,22,qs),
(481,45,o),
(519,115,o),
(518,158,qs),
(518,194,o),
(492,254,o),
(460,276,qs),
(427,297,o),
(338,313,o),
(294,320,qs),
(283,322,o),
(250,328,o),
(235,333,qs),
(215,339,o),
(187,361,o),
(188,378,qs),
(188,393,o),
(205,412,o),
(231,421,o),
(261,424,o),
(273,424,qs),
(293,424,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
50 1 5 0 40 1 3 2 2 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 61 60 56 54 36 34 30 29 24 22 0 65 1 65 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = s_alt;
},
{
glyphname = s;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,403,o),
(328,370,q),
(464,370,l),
(462,416,o),
(427,480,o),
(370,520,o),
(294,538,o),
(251,538,qs),
(212,538,o),
(137,522,o),
(78,485,o),
(39,424,o),
(37,381,qs),
(34,332,o),
(73,272,o),
(102,254,qs),
(121,241,o),
(167,226,o),
(214,216,o),
(262,206,o),
(283,201,qs),
(304,197,o),
(341,175,o),
(340,149,qs),
(340,138,o),
(325,119,o),
(304,110,o),
(279,107,o),
(268,107,qs),
(230,107,o),
(175,133,o),
(169,167,q),
(27,167,l),
(30,124,o),
(65,63,o),
(91,42,qs),
(127,14,o),
(214,-8,o),
(266,-8,qs),
(311,-8,o),
(399,15,o),
(428,41,qs),
(451,62,o),
(478,121,o),
(478,162,qs),
(479,204,o),
(445,262,o),
(419,278,qs),
(400,290,o),
(350,306,o),
(298,318,o),
(244,329,o),
(222,335,qs),
(199,341,o),
(174,361,o),
(173,378,qs),
(172,393,o),
(186,412,o),
(208,421,o),
(235,425,o),
(250,425,qs),
(281,425,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 59 58 54 52 33 31 29 28 23 21 0 61 1 61 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = s;
unicode = 115;
},
{
glyphname = c_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,139,o),
(183,179,o),
(170,232,o),
(170,265,qs),
(170,299,o),
(187,357,o),
(204,377,qs),
(219,394,o),
(261,412,o),
(291,412,qs),
(330,412,o),
(381,374,o),
(386,350,q),
(534,350,l),
(527,399,o),
(487,470,o),
(424,516,o),
(343,538,o),
(297,538,qs),
(234,538,o),
(135,499,o),
(68,428,o),
(31,326,o),
(31,265,qs),
(31,202,o),
(64,101,o),
(128,30,o),
(226,-8,o),
(292,-8,qs),
(334,-8,o),
(411,9,o),
(474,47,o),
(519,108,o),
(529,152,q),
(375,152,l),
(367,136,o),
(324,117,o),
(295,117,qs),
(261,117,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 29 77 6 1 0 0 2 97 0 2 2 30 2 78 1 0 29 27 25 24 20 18 10 8 4 3 0 38 1 38 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = c_alt;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(700,-32,o),
(806,74,o),
(863,225,o),
(863,320,qs),
(863,410,o),
(804,561,o),
(697,669,o),
(547,729,o),
(457,729,qs),
(365,729,o),
(214,671,o),
(106,565,o),
(47,413,o),
(47,320,qs),
(47,225,o),
(105,74,o),
(212,-32,o),
(364,-88,o),
(457,-88,qs),
(550,-88,o)
);
},
{
closed = 1;
nodes = (
(274,48,o),
(193,129,o),
(149,246,o),
(149,319,qs),
(149,391,o),
(194,507,o),
(276,589,o),
(391,633,o),
(461,633,qs),
(531,633,o),
(644,589,o),
(724,507,o),
(768,391,o),
(768,319,qs),
(768,246,o),
(726,129,o),
(646,48,o),
(533,5,o),
(461,5,qs),
(389,5,o)
);
},
{
closed = 1;
nodes = (
(374,272,o),
(374,321,qs),
(374,369,o),
(416,433,o),
(466,433,qs),
(495,433,o),
(532,403,o),
(536,386,q),
(647,386,l),
(636,459,o),
(539,529,o),
(468,529,qs),
(421,529,o),
(346,499,o),
(295,444,o),
(268,367,o),
(268,321,qs),
(268,273,o),
(292,196,o),
(341,140,o),
(415,110,o),
(464,110,qs),
(535,110,o),
(636,176,o),
(647,252,q),
(536,252,l),
(532,234,o),
(497,207,o),
(467,207,qs),
(415,207,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 8 9 5 9 8 114 0 5 4 9 5 4 126 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 4 0 6 2 4 6 105 11 1 2 0 0 2 89 11 1 2 2 0 98 10 1 0 2 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 8 9 5 9 8 5 128 0 5 4 9 5 4 126 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 4 0 6 2 4 6 105 11 1 2 0 0 2 89 11 1 2 2 0 98 10 1 0 2 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
41 40 21 20 1 0 65 63 61 60 58 56 48 46 44 43 40 69 41 69 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 910;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,141,l),
(597,190,o),
(627,290,o),
(630,332,q),
(506,332,l),
(503,286,o),
(481,230,q),
(370,354,l),
(396,370,o),
(446,409,o),
(484,457,o),
(508,513,o),
(508,546,qs),
(508,584,o),
(478,644,o),
(428,686,o),
(362,709,o),
(326,711,qs),
(282,712,o),
(203,690,o),
(144,642,o),
(109,571,o),
(109,523,qs),
(109,480,o),
(147,407,o),
(177,375,q),
(127,346,o),
(56,255,o),
(55,184,qs),
(55,139,o),
(85,68,o),
(113,42,qs),
(143,14,o),
(228,-16,o),
(276,-16,qs),
(341,-17,o),
(439,16,o),
(477,48,q),
(522,0,l),
(694,0,l)
);
},
{
closed = 1;
nodes = (
(379,119,o),
(322,99,o),
(287,101,qs),
(247,103,o),
(186,142,o),
(182,185,qs),
(179,220,o),
(222,272,o),
(254,291,q),
(400,132,l)
);
},
{
closed = 1;
nodes = (
(232,499,o),
(232,530,qs),
(233,564,o),
(277,598,o),
(308,599,qs),
(337,600,o),
(380,566,o),
(380,534,qs),
(380,518,o),
(361,488,o),
(333,462,o),
(301,440,o),
(289,433,q),
(269,455,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
31 13 2 2 5 49 38 32 3 4 2 1 1 0 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
31 13 2 2 5 49 38 32 3 4 2 1 1 3 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 5 1 97 0 1 1 38 77 0 2 2 0 97 6 3 2 0 0 50 77 0 4 4 0 97 6 3 2 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 1 97 0 1 1 38 77 0 2 2 3 95 6 1 3 3 39 77 0 4 4 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 59 57 47 45 0 39 0 39 28 47 35 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(602,585,o),
(490,701,o),
(396,712,q),
(396,849,l),
(268,849,l),
(268,712,l),
(230,706,o),
(161,678,o),
(106,630,o),
(71,561,o),
(69,515,qs),
(67,464,o),
(102,383,o),
(139,356,qs),
(173,330,o),
(258,303,o),
(298,294,qs),
(330,286,o),
(394,277,o),
(425,269,qs),
(446,262,o),
(478,236,o),
(479,209,qs),
(479,182,o),
(454,149,o),
(415,131,o),
(367,126,o),
(344,126,qs),
(318,126,o),
(266,138,o),
(222,163,o),
(191,205,o),
(188,235,q),
(47,235,l),
(47,166,o),
(108,64,o),
(165,32,qs),
(211,8,o),
(265,-1,q),
(265,-136,l),
(393,-136,l),
(393,-6,l),
(434,-2,o),
(506,21,o),
(537,41,qs),
(573,66,o),
(621,151,o),
(620,212,qs),
(620,266,o),
(584,336,o),
(554,359,qs),
(522,382,o),
(438,403,o),
(394,411,qs),
(363,416,o),
(298,430,o),
(269,441,qs),
(246,451,o),
(210,483,o),
(212,514,qs),
(213,538,o),
(237,568,o),
(272,585,o),
(314,590,o),
(333,590,qs),
(358,589,o),
(406,580,o),
(443,557,o),
(468,519,o),
(471,489,q),
(607,489,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
67 64 2 0 4 31 28 2 1 3 2 76 6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 4 0 0 5 4 0 105 0 3 1 1 3 89 0 3 3 1 95 0 1 3 1 79 0 0 0 70 0 70 66 65 43 41 37 36 30 29 36 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,-86,o),
(215,-195,q),
(378,-195,l),
(328,-142,o),
(265,-21,o),
(220,108,o),
(196,242,o),
(196,307,qs),
(196,372,o),
(220,505,o),
(265,635,o),
(328,756,o),
(378,809,q),
(215,809,l),
(134,700,o),
(53,441,o),
(53,307,qs),
(53,173,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 26 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,700,o),
(121,809,q),
(-42,809,l),
(8,756,o),
(71,635,o),
(116,505,o),
(140,372,o),
(140,307,qs),
(140,242,o),
(116,108,o),
(71,-21,o),
(8,-142,o),
(-42,-195,q),
(121,-195,l),
(202,-86,o),
(283,173,o),
(283,307,qs),
(283,441,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 26 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,137,o),
(200,178,o),
(188,232,o),
(188,265,qs),
(188,296,o),
(200,350,o),
(229,391,o),
(276,413,o),
(309,413,qs),
(348,413,o),
(396,374,o),
(401,350,q),
(550,350,l),
(539,432,o),
(442,523,o),
(371,535,q),
(371,681,l),
(240,681,l),
(240,532,l),
(148,512,o),
(47,370,o),
(47,265,qs),
(47,155,o),
(142,10,o),
(240,-9,q),
(240,-149,l),
(371,-149,l),
(371,-10,l),
(406,-4,o),
(467,24,o),
(513,70,o),
(544,133,o),
(550,175,q),
(401,175,l),
(396,150,o),
(350,114,o),
(310,114,qs),
(276,114,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
21 18 2 5 3 12 9 2 2 0 2 76 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 3 0 5 4 3 5 105 6 1 0 2 2 0 89 6 1 0 0 2 95 0 2 0 2 79 1 0 29 27 25 24 20 19 11 10 4 3 0 37 1 37 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = cent;
unicode = 162;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,584,o),
(368,555,q),
(494,555,l),
(492,595,o),
(459,655,o),
(406,694,o),
(334,714,o),
(293,716,qs),
(255,717,o),
(177,703,o),
(112,667,o),
(69,608,o),
(67,564,qs),
(65,527,o),
(93,472,o),
(113,457,q),
(94,438,o),
(64,392,o),
(62,361,qs),
(59,315,o),
(96,255,o),
(124,238,qs),
(150,222,o),
(211,206,o),
(246,199,qs),
(327,181,ls),
(349,177,o),
(374,157,o),
(373,140,qs),
(372,125,o),
(355,107,o),
(330,97,o),
(297,94,o),
(281,94,qs),
(263,94,o),
(228,102,o),
(199,119,o),
(179,147,o),
(176,167,q),
(47,167,l),
(47,113,o),
(99,34,o),
(147,10,qs),
(180,-7,o),
(251,-19,o),
(287,-19,qs),
(325,-19,o),
(400,-6,o),
(433,16,qs),
(468,38,o),
(504,105,o),
(503,145,qs),
(503,174,o),
(481,228,o),
(461,248,q),
(505,292,o),
(505,353,qs),
(504,388,o),
(480,445,o),
(451,465,qs),
(420,485,o),
(339,500,o),
(297,507,qs),
(285,509,o),
(251,515,o),
(219,527,o),
(196,547,o),
(197,562,qs),
(197,577,o),
(214,595,o),
(238,605,o),
(265,608,o),
(277,608,qs),
(312,607,o)
);
},
{
closed = 1;
nodes = (
(285,402,o),
(306,397,qs),
(316,395,o),
(342,388,o),
(365,376,o),
(379,356,o),
(378,342,qs),
(377,325,o),
(360,299,o),
(346,291,q),
(320,296,o),
(263,304,o),
(238,312,qs),
(219,317,o),
(193,343,o),
(194,361,qs),
(194,377,o),
(209,406,o),
(224,414,q),
(244,409,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
86 83 57 18 4 2 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 3 0 1 3 1 101 6 1 0 0 4 97 0 4 4 46 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 71 70 66 64 40 38 34 33 28 26 0 73 1 73 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = section;
unicode = 167;
},
{
glyphname = uni04C1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(781,0,l),
(950,0,l),
(719,369,l),
(947,708,l),
(779,708,l),
(595,416,l),
(549,416,l),
(549,708,l),
(404,708,l),
(404,416,l),
(357,416,l),
(174,708,l),
(5,708,l),
(234,369,l),
(2,0,l),
(171,0,l),
(350,288,l),
(404,288,l),
(404,0,l),
(549,0,l),
(549,288,l),
(602,288,l)
);
},
{
closed = 1;
nodes = (
(664,844,o),
(675,925,q),
(552,925,l),
(546,897,o),
(507,866,o),
(478,866,qs),
(449,866,o),
(410,897,o),
(403,925,q),
(281,925,l),
(291,844,o),
(396,768,o),
(477,768,qs),
(558,768,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 7 2 1 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
13 1 11 12 12 11 112 0 12 15 1 10 3 12 10 106 6 1 4 14 9 2 1 0 4 1 103 7 5 2 3 3 20 77 8 2 2 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
13 1 11 12 11 133 0 12 15 1 10 3 12 10 106 6 1 4 14 9 2 1 0 4 1 103 7 5 2 3 3 20 77 8 2 2 0 0 21 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
23 22 0 0 33 32 30 28 26 25 22 35 23 35 0 21 0 21 18 17 17 17 17 18 17 17 17 16 7 31 
CALL[ ]	/* CallFunction */";
};
width = 952;
}
);
note = uni04C1;
unicode = 1217;
},
{
glyphname = uni04C2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(664,0,l),
(834,0,l),
(650,277,l),
(822,527,l),
(657,527,l),
(532,322,l),
(489,322,l),
(489,527,l),
(346,527,l),
(346,322,l),
(304,322,l),
(180,527,l),
(14,527,l),
(186,277,l),
(2,0,l),
(174,0,l),
(298,200,l),
(346,200,l),
(346,0,l),
(489,0,l),
(489,200,l),
(538,200,l)
);
},
{
closed = 1;
nodes = (
(607,655,o),
(618,737,q),
(494,737,l),
(488,709,o),
(448,677,o),
(419,677,qs),
(390,677,o),
(350,709,o),
(343,737,q),
(220,737,l),
(230,655,o),
(337,577,o),
(419,577,qs),
(501,577,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 7 2 1 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
13 1 11 12 12 11 112 0 12 15 1 10 3 12 10 106 6 1 4 14 9 2 1 0 4 1 103 7 5 2 3 3 22 77 8 2 2 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
13 1 11 12 11 133 0 12 15 1 10 3 12 10 106 6 1 4 14 9 2 1 0 4 1 103 7 5 2 3 3 22 77 8 2 2 0 0 21 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
23 22 0 0 33 32 30 28 26 25 22 35 23 35 0 21 0 21 18 17 17 17 17 18 17 17 17 16 7 31 
CALL[ ]	/* CallFunction */";
};
width = 836;
}
);
note = uni04C2;
unicode = 1218;
},
{
glyphname = w_alt;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,265,l),
(477,0,l),
(635,0,l),
(797,527,l),
(650,527,l),
(553,161,l),
(475,419,l),
(332,419,l),
(254,161,l),
(158,527,l),
(2,527,l),
(165,0,l),
(328,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 3 3 3 1 1 76 0 1 0 3 0 1 3 128 2 1 0 0 22 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 799;
}
);
note = w_alt;
},
{
glyphname = W_alt;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(463,399,l),
(560,0,l),
(748,0,l),
(909,708,l),
(753,708,l),
(649,165,l),
(555,555,l),
(375,555,l),
(279,165,l),
(168,708,l),
(3,708,l),
(176,0,l),
(367,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 3 3 3 1 1 76 0 1 0 3 0 1 3 128 2 1 0 0 20 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 912;
}
);
note = W_alt;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,231,o),
(187,356,qs),
(187,480,o),
(258,589,o),
(323,589,qs),
(387,589,o),
(459,480,o),
(459,356,qs),
(459,231,o),
(387,123,o),
(323,123,qs),
(258,123,o)
);
},
{
closed = 1;
nodes = (
(159,675,o),
(85,586,o),
(45,450,o),
(45,356,qs),
(45,261,o),
(84,125,o),
(157,37,o),
(260,-5,o),
(323,-5,qs),
(386,-5,o),
(489,37,o),
(561,125,o),
(601,261,o),
(601,356,qs),
(601,450,o),
(560,586,o),
(487,675,o),
(384,717,o),
(323,717,qs),
(261,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 2 97 5 1 2 2 46 77 4 1 0 0 3 97 0 3 3 47 3 78 13 12 1 0 23 21 12 31 13 31 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 645;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,708,l),
(183,688,o),
(145,655,o),
(124,644,qs),
(100,632,o),
(45,621,o),
(13,621,q),
(13,521,l),
(157,521,l),
(157,0,l),
(303,0,l),
(303,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 38 77 0 0 0 39 0 78 21 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 398;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(23,0,l),
(499,0,l),
(499,128,l),
(222,128,l),
(252,154,o),
(319,208,o),
(356,240,qs),
(375,257,o),
(406,285,o),
(433,313,o),
(460,346,o),
(472,366,qs),
(491,395,o),
(507,463,o),
(507,501,qs),
(507,553,o),
(473,630,o),
(445,656,qs),
(380,718,o),
(267,716,qs),
(225,716,o),
(149,699,o),
(117,680,qs),
(73,654,o),
(20,567,o),
(18,508,q),
(153,508,l),
(158,546,o),
(213,586,o),
(258,587,qs),
(308,588,o),
(368,536,o),
(366,483,qs),
(365,450,o),
(332,396,o),
(309,373,qs),
(286,348,o),
(237,302,o),
(213,282,qs),
(23,118,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
39 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 0 3 3 4 95 0 4 4 39 4 78 17 31 37 18 40 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,550,o),
(250,589,o),
(288,589,qs),
(309,589,o),
(347,581,o),
(375,562,o),
(391,529,o),
(391,505,qs),
(391,485,o),
(375,456,o),
(363,445,qs),
(346,431,o),
(304,418,o),
(278,418,qs),
(230,418,l),
(230,300,l),
(301,300,ls),
(324,300,o),
(367,293,o),
(385,281,qs),
(399,273,o),
(416,239,o),
(416,219,qs),
(416,192,o),
(396,155,o),
(362,133,o),
(318,123,o),
(294,123,qs),
(273,123,o),
(233,130,o),
(198,149,o),
(171,181,o),
(164,206,q),
(21,206,l),
(37,95,o),
(181,-7,o),
(294,-7,qs),
(345,-7,o),
(439,17,o),
(511,68,o),
(557,148,o),
(559,206,qs),
(561,269,o),
(507,363,o),
(446,383,q),
(488,406,o),
(532,486,o),
(532,530,qs),
(532,582,o),
(491,654,o),
(424,698,o),
(343,717,o),
(298,717,qs),
(242,717,o),
(153,692,o),
(86,638,o),
(46,562,o),
(41,508,q),
(183,508,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
13 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 103 0 6 6 0 97 0 0 0 46 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 58 0 58 41 33 41 36 18 46 36 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,708,l),
(30,233,l),
(30,132,l),
(376,132,l),
(376,0,l),
(518,0,l),
(518,132,l),
(598,132,l),
(598,257,l),
(518,257,l),
(518,708,l)
);
},
{
closed = 1;
nodes = (
(376,257,l),
(195,257,l),
(376,541,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
13 1 0 4 8 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 0 4 4 38 77 0 2 2 39 2 78 17 18 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = four;
unicode = 52;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,600,l),
(493,708,l),
(0,708,l),
(0,579,l),
(328,579,l),
(68,0,l),
(230,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,357,o),
(459,380,q),
(501,402,o),
(546,482,o),
(546,525,qs),
(546,577,o),
(508,649,o),
(443,695,o),
(358,717,o),
(311,717,qs),
(264,717,o),
(177,697,o),
(111,650,o),
(72,577,o),
(72,525,qs),
(72,482,o),
(116,402,o),
(159,380,q),
(97,357,o),
(44,261,o),
(46,199,qs),
(48,143,o),
(94,65,o),
(167,15,o),
(260,-8,o),
(310,-8,qs),
(359,-8,o),
(452,15,o),
(525,65,o),
(570,144,o),
(572,199,qs),
(574,261,o)
);
},
{
closed = 1;
nodes = (
(364,583,o),
(390,562,o),
(405,529,o),
(405,507,qs),
(404,462,o),
(351,419,o),
(309,419,qs),
(267,419,o),
(213,462,o),
(212,507,qs),
(212,529,o),
(227,562,o),
(254,583,o),
(289,593,o),
(309,593,qs),
(328,593,o)
);
},
{
closed = 1;
nodes = (
(407,150,o),
(374,127,o),
(331,117,o),
(309,117,qs),
(287,117,o),
(244,127,o),
(210,150,o),
(189,187,o),
(189,214,qs),
(189,240,o),
(210,277,o),
(243,300,o),
(286,311,o),
(308,311,qs),
(331,311,o),
(374,300,o),
(408,277,o),
(428,241,o),
(428,214,qs),
(428,187,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
29 13 2 4 3 1 76 0 3 0 4 5 3 4 105 6 1 2 2 1 97 0 1 1 46 77 0 5 5 0 97 0 0 0 50 0 78 33 32 64 62 54 52 41 39 32 47 33 47 46 36 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(368,566,o),
(396,533,o),
(409,490,o),
(408,468,qs),
(405,423,o),
(343,371,o),
(298,371,qs),
(273,371,o),
(231,386,o),
(201,415,o),
(184,457,o),
(185,484,qs),
(187,535,o),
(251,589,o),
(300,587,qs),
(327,587,o)
);
},
{
closed = 1;
nodes = (
(52,141,o),
(93,71,o),
(122,47,qs),
(156,20,o),
(246,-8,o),
(297,-7,qs),
(385,-5,o),
(496,73,o),
(527,135,qs),
(553,186,o),
(572,306,o),
(570,368,qs),
(568,440,o),
(535,570,o),
(496,620,qs),
(464,662,o),
(367,713,o),
(301,714,qs),
(248,714,o),
(155,683,o),
(85,623,o),
(44,536,o),
(43,481,qs),
(42,427,o),
(74,341,o),
(134,281,o),
(221,248,o),
(274,247,qs),
(319,247,o),
(403,278,o),
(434,311,q),
(436,284,o),
(420,208,o),
(400,180,qs),
(383,154,o),
(332,122,o),
(294,121,qs),
(259,120,o),
(197,153,o),
(188,189,q),
(46,189,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
25 1 3 1 1 76 8 1 6 3 2 3 6 2 128 0 1 0 3 6 1 3 105 7 1 0 0 4 97 0 4 4 46 77 0 2 2 5 97 0 5 5 47 5 78 16 16 1 0 16 56 16 56 51 49 39 37 29 27 20 18 9 7 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni0430;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(270,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 29 77 0 1 1 2 97 7 1 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 29 77 0 7 7 21 77 0 1 1 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
24 36 20 34 41 39 40 64 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = uni0430;
unicode = 1072;
},
{
glyphname = uni0435;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 1 4 0 4 1 0 128 8 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 29 77 7 1 0 0 2 97 0 2 2 30 2 78 26 26 1 0 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni0435;
unicode = 1077;
},
{
glyphname = uni043E;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(365,117,o),
(301,117,qs),
(237,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(237,412,o),
(301,412,qs),
(365,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
4 1 0 0 3 97 0 3 3 29 77 0 1 1 2 97 5 1 2 2 30 2 78 13 12 1 0 21 19 12 27 13 27 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = uni043E;
unicode = 1086;
},
{
glyphname = uni0441;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,198,o),
(175,262,qs),
(175,292,o),
(187,346,o),
(216,388,o),
(263,412,o),
(296,412,qs),
(335,412,o),
(384,374,o),
(389,350,q),
(537,350,l),
(530,399,o),
(489,470,o),
(426,516,o),
(345,538,o),
(299,538,qs),
(236,538,o),
(138,499,o),
(71,427,o),
(35,325,o),
(35,264,qs),
(35,201,o),
(68,100,o),
(132,29,o),
(229,-8,o),
(295,-8,qs),
(339,-8,o),
(421,12,o),
(486,58,o),
(530,128,o),
(537,179,q),
(389,179,l),
(384,155,o),
(337,117,o),
(297,117,qs),
(230,117,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 29 77 6 1 0 0 2 97 0 2 2 30 2 78 1 0 29 27 25 24 20 18 10 8 4 3 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = uni0441;
unicode = 1089;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(578,557,o),
(536,637,o),
(469,689,o),
(380,716,o),
(328,717,qs),
(281,718,o),
(187,700,o),
(109,654,o),
(59,575,o),
(56,515,qs),
(54,464,o),
(93,380,o),
(132,353,qs),
(164,330,o),
(245,305,o),
(282,296,qs),
(300,292,o),
(326,285,o),
(350,279,o),
(375,273,o),
(391,269,qs),
(414,263,o),
(453,233,o),
(453,201,qs),
(453,178,o),
(433,148,o),
(398,131,o),
(352,125,o),
(327,126,qs),
(303,127,o),
(256,137,o),
(218,159,o),
(190,193,o),
(184,219,q),
(36,219,l),
(39,162,o),
(85,78,o),
(162,22,o),
(262,-7,o),
(319,-8,qs),
(378,-10,o),
(476,13,o),
(513,39,qs),
(552,65,o),
(598,151,o),
(598,212,qs),
(597,268,o),
(559,338,o),
(497,380,o),
(417,404,o),
(378,412,qs),
(362,415,o),
(330,422,o),
(296,431,o),
(261,442,o),
(246,449,qs),
(225,459,o),
(200,491,o),
(201,514,qs),
(201,536,o),
(223,566,o),
(257,583,o),
(296,590,o),
(314,590,qs),
(365,589,o),
(433,549,o),
(439,504,q),
(583,504,l)
);
},
{
closed = 1;
nodes = (
(269,-253,o),
(250,-267,q),
(275,-303,l),
(296,-296,o),
(338,-264,o),
(369,-220,o),
(386,-171,o),
(386,-146,qs),
(386,-130,o),
(379,-100,o),
(361,-76,o),
(333,-62,o),
(315,-62,qs),
(285,-62,o),
(250,-95,o),
(250,-124,qs),
(250,-151,o),
(281,-183,o),
(308,-185,q),
(302,-211,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
85 84 2 6 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
7 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 75 73 0 67 0 67 63 61 39 37 33 32 28 26 34 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,403,o),
(336,370,q),
(472,370,l),
(470,416,o),
(435,480,o),
(378,520,o),
(302,538,o),
(260,538,qs),
(220,538,o),
(145,522,o),
(86,485,o),
(47,424,o),
(45,381,qs),
(42,332,o),
(81,272,o),
(110,254,qs),
(131,241,o),
(175,226,o),
(222,216,o),
(270,206,o),
(292,201,qs),
(313,197,o),
(348,176,o),
(348,153,qs),
(348,137,o),
(333,119,o),
(312,110,o),
(287,107,o),
(276,107,qs),
(238,107,o),
(183,133,o),
(177,167,q),
(31,167,l),
(34,124,o),
(73,63,o),
(99,42,qs),
(135,14,o),
(229,-8,o),
(281,-8,qs),
(326,-8,o),
(407,15,o),
(436,41,qs),
(460,62,o),
(487,121,o),
(486,162,qs),
(485,207,o),
(453,262,o),
(427,278,qs),
(408,290,o),
(359,306,o),
(306,318,o),
(253,329,o),
(230,335,qs),
(207,341,o),
(182,361,o),
(181,378,qs),
(181,392,o),
(194,412,o),
(218,423,o),
(243,426,o),
(261,426,qs),
(291,425,o)
);
},
{
closed = 1;
nodes = (
(220,-254,o),
(201,-268,q),
(226,-304,l),
(247,-297,o),
(289,-265,o),
(320,-221,o),
(337,-172,o),
(337,-147,qs),
(337,-131,o),
(330,-101,o),
(312,-77,o),
(284,-63,o),
(266,-63,qs),
(236,-63,o),
(201,-96,o),
(201,-125,qs),
(201,-152,o),
(232,-184,o),
(259,-186,q),
(253,-212,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
79 78 2 6 73 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 7 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 69 67 59 58 54 52 33 31 29 28 23 21 0 61 1 61 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,0,l),
(368,0,l),
(368,579,l),
(585,579,l),
(585,708,l),
(6,708,l),
(6,579,l),
(223,579,l)
);
},
{
closed = 1;
nodes = (
(248,-251,o),
(229,-265,q),
(254,-301,l),
(275,-294,o),
(316,-264,o),
(347,-220,o),
(364,-171,o),
(364,-146,qs),
(364,-130,o),
(357,-100,o),
(339,-76,o),
(311,-62,o),
(293,-62,qs),
(264,-62,o),
(228,-96,o),
(228,-124,qs),
(228,-151,o),
(259,-183,o),
(286,-185,q),
(280,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
25 24 2 4 73 0 4 2 4 134 5 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 0 0 15 13 0 7 0 7 17 17 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,527,l),
(238,527,l),
(238,670,l),
(97,670,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,173,ls),
(97,84,o),
(188,-4,o),
(293,0,qs),
(359,0,l),
(359,123,l),
(307,123,ls),
(238,123,o),
(238,191,qs),
(238,404,l),
(364,404,l)
);
},
{
closed = 1;
nodes = (
(171,-254,o),
(152,-268,q),
(177,-304,l),
(198,-297,o),
(240,-265,o),
(271,-221,o),
(288,-172,o),
(288,-147,qs),
(288,-131,o),
(281,-101,o),
(263,-77,o),
(235,-63,o),
(217,-63,qs),
(187,-63,o),
(152,-97,o),
(152,-125,qs),
(152,-152,o),
(183,-184,o),
(210,-186,q),
(204,-212,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
36 35 2 7 73 0 4 3 4 133 0 7 1 7 134 8 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 0 0 26 24 0 18 0 18 17 17 17 19 33 34 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,114,o),
(167,75,qs),
(167,35,o),
(214,-9,o),
(255,-9,qs),
(296,-9,o),
(342,36,o),
(342,75,qs),
(342,114,o),
(296,162,o),
(255,162,qs),
(214,162,o)
);
},
{
closed = 1;
nodes = (
(315,253,o),
(336,299,o),
(369,340,o),
(409,377,o),
(429,398,qs),
(456,428,o),
(485,490,o),
(485,531,qs),
(486,586,o),
(445,661,o),
(411,683,qs),
(381,703,o),
(304,717,o),
(262,717,qs),
(202,716,o),
(126,689,o),
(99,669,qs),
(63,642,o),
(25,558,o),
(26,513,q),
(162,513,l),
(163,537,o),
(181,567,o),
(208,584,o),
(243,590,o),
(262,589,qs),
(298,588,o),
(345,554,o),
(344,518,qs),
(343,497,o),
(322,460,o),
(290,426,o),
(255,394,o),
(240,378,qs),
(226,363,o),
(202,334,o),
(187,298,o),
(182,253,o),
(187,223,q),
(316,223,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 5 2 3 5 128 7 1 5 0 2 5 0 126 0 2 2 4 97 0 4 4 46 77 6 1 0 0 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 5 2 3 5 128 7 1 5 0 2 5 0 126 0 2 2 4 97 0 4 4 46 77 6 1 0 0 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
12 12 1 0 12 51 12 51 38 36 31 30 26 24 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = question;
unicode = 63;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,0,l),
(190,0,l),
(190,466,l),
(469,0,l),
(610,0,l),
(610,708,l),
(467,708,l),
(467,240,l),
(188,708,l),
(47,708,l)
);
},
{
closed = 1;
nodes = (
(1005,247,l),
(1005,346,l),
(699,346,l),
(699,247,l)
);
},
{
closed = 1;
nodes = (
(959,409,o),
(1002,455,o),
(1024,517,o),
(1024,553,qs),
(1024,628,o),
(937,723,o),
(854,723,qs),
(770,723,o),
(682,629,o),
(682,553,qs),
(682,517,o),
(704,455,o),
(748,409,o),
(812,383,o),
(854,383,qs),
(895,383,o)
);
},
{
closed = 1;
nodes = (
(916,581,o),
(916,553,qs),
(916,524,o),
(888,486,o),
(854,486,qs),
(819,486,o),
(790,524,o),
(790,553,qs),
(790,581,o),
(819,620,o),
(854,620,qs),
(888,620,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
6 1 6 9 1 1 1 5 2 76 10 3 2 0 7 8 7 0 8 128 2 1 1 5 1 134 0 7 12 1 8 9 7 8 105 0 9 11 1 6 4 9 6 105 0 4 5 5 4 87 0 4 4 5 95 0 5 4 5 79 31 30 15 14 0 0 37 35 30 41 31 41 23 21 14 29 15 29 13 12 11 10 0 9 0 9 18 17 18 13 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1071;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = uni0401;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(126,887,o),
(126,849,qs),
(126,811,o),
(174,766,o),
(212,766,qs),
(250,766,o),
(298,811,o),
(298,849,qs),
(298,887,o),
(250,931,o),
(212,931,qs),
(174,931,o)
);
},
{
closed = 1;
nodes = (
(367,887,o),
(367,849,qs),
(367,811,o),
(415,766,o),
(454,766,qs),
(492,766,o),
(540,811,o),
(540,849,qs),
(540,887,o),
(492,931,o),
(454,931,qs),
(415,931,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
12 8 11 3 6 9 1 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 20 77 0 3 3 4 95 0 4 4 21 4 78 25 24 13 12 0 0 31 29 24 35 25 35 19 17 12 23 13 23 0 11 0 11 17 17 17 17 17 13 7 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = uni0401;
unicode = 1025;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,252,o),
(210,287,o),
(214,322,o),
(227,349,o),
(241,349,qs),
(257,350,o),
(293,315,o),
(340,273,o),
(402,238,o),
(443,239,qs),
(496,240,o),
(561,281,o),
(597,346,o),
(607,425,o),
(606,466,q),
(470,466,l),
(470,457,o),
(472,422,o),
(468,387,o),
(455,360,o),
(441,360,qs),
(426,359,o),
(390,394,o),
(342,436,o),
(279,471,o),
(237,470,qs),
(184,469,o),
(119,428,o),
(85,364,o),
(74,284,o),
(76,244,q),
(212,244,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
6 1 5 4 3 4 5 3 128 0 1 4 3 1 89 2 1 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 31 0 30 35 36 20 35 36 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 682;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,397,l),
(241,620,l),
(342,620,l),
(342,708,l),
(47,708,l),
(47,620,l),
(147,620,l),
(147,397,l)
);
},
{
closed = 1;
nodes = (
(559,456,l),
(625,561,l),
(625,397,l),
(718,397,l),
(718,708,l),
(625,708,l),
(544,578,l),
(463,708,l),
(369,708,l),
(369,397,l),
(463,397,l),
(463,561,l),
(530,456,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
18 13 8 3 8 0 1 76 0 8 0 3 0 8 3 128 7 4 2 3 3 132 6 5 2 1 0 0 1 87 6 5 2 1 1 0 95 2 1 0 1 0 79 18 17 18 17 18 17 17 17 16 9 6 31 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,707,o),
(69,657,o),
(40,584,o),
(40,538,qs),
(40,492,o),
(68,421,o),
(119,373,o),
(190,348,o),
(233,348,qs),
(275,348,o),
(346,373,o),
(397,421,o),
(425,492,o),
(425,538,qs),
(425,584,o),
(397,657,o),
(346,707,o),
(275,733,o),
(233,733,qs),
(191,733,o)
);
},
{
closed = 1;
nodes = (
(372,607,o),
(372,538,qs),
(372,470,o),
(295,399,o),
(233,399,qs),
(170,399,o),
(93,470,o),
(93,538,qs),
(93,607,o),
(171,683,o),
(233,683,qs),
(295,683,o)
);
},
{
closed = 1;
nodes = (
(294,528,o),
(312,559,o),
(312,579,qs),
(312,608,o),
(299,622,qs),
(290,633,o),
(261,643,o),
(240,643,qs),
(158,643,l),
(158,446,l),
(204,446,l),
(204,514,l),
(224,514,l),
(271,446,l),
(326,446,l),
(275,520,l)
);
},
{
closed = 1;
nodes = (
(249,600,o),
(267,593,o),
(266,578,qs),
(266,564,o),
(248,555,o),
(236,555,qs),
(204,555,l),
(204,600,l),
(237,600,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
47 1 5 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 8 9 5 9 8 5 128 0 5 4 9 5 112 6 1 4 3 9 4 3 126 10 1 0 11 1 2 7 0 2 105 0 7 12 1 9 8 7 9 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 8 9 5 9 8 5 128 0 5 4 9 5 4 126 6 1 4 3 9 4 3 126 10 1 0 11 1 2 7 0 2 105 0 7 12 1 9 8 7 9 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
48 48 21 20 1 0 48 56 48 55 51 49 40 38 37 36 35 34 33 32 27 25 20 31 21 31 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 465;
}
);
note = registered;
unicode = 174;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(112,735,o),
(70,694,o),
(47,635,o),
(47,598,qs),
(47,523,o),
(134,445,o),
(203,445,qs),
(272,445,o),
(358,523,o),
(358,598,qs),
(358,673,o),
(272,757,o),
(203,757,qs),
(169,757,o)
);
},
{
closed = 1;
nodes = (
(269,633,o),
(269,599,qs),
(269,566,o),
(232,531,o),
(203,531,qs),
(173,531,o),
(136,566,o),
(136,599,qs),
(136,633,o),
(174,670,o),
(203,670,qs),
(232,670,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 15 14 1 0 21 19 14 25 15 25 7 5 0 13 1 13 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 405;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,432,o),
(47,363,qs),
(47,294,o),
(128,222,o),
(191,222,qs),
(253,222,o),
(333,294,o),
(333,363,qs),
(333,432,o),
(253,507,o),
(191,507,qs),
(128,507,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 41 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = uni27F5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,271,l),
(406,-55,l),
(481,39,l),
(283,211,l),
(1350,211,l),
(1350,330,l),
(283,330,l),
(481,501,l),
(406,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
7 1 1 0 1 76 8 1 0 74 6 5 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1397;
}
);
note = uni27F5;
unicode = 10229;
},
{
glyphname = uni27F6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1113,330,l),
(47,330,l),
(47,211,l),
(1113,211,l),
(915,39,l),
(990,-55,l),
(1350,271,l),
(990,597,l),
(915,501,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 0 1 1 76 8 1 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1397;
}
);
note = uni27F6;
unicode = 10230;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,434,l),
(314,0,l),
(432,0,l),
(432,434,l),
(604,235,l),
(699,310,l),
(373,670,l),
(47,310,l),
(142,235,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
8 7 4 3 2 1 6 0 74 0 0 0 118 21 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,0,l),
(699,359,l),
(604,435,l),
(432,236,l),
(432,670,l),
(314,670,l),
(314,236,l),
(142,435,l),
(47,359,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
8 7 6 5 4 1 6 0 73 0 0 0 118 18 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni21BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(923,719,l),
(513,766,l),
(513,369,l),
(625,369,l),
(622,560,l),
(653,534,o),
(697,462,o),
(708,420,qs),
(726,354,o),
(701,236,o),
(631,144,o),
(523,89,o),
(458,86,qs),
(394,84,o),
(293,127,o),
(222,201,o),
(184,298,o),
(184,351,qs),
(183,414,o),
(238,536,o),
(297,581,q),
(212,677,l),
(131,617,o),
(47,449,o),
(49,356,qs),
(50,266,o),
(114,116,o),
(226,11,o),
(380,-44,o),
(472,-39,qs),
(570,-34,o),
(728,45,o),
(829,177,o),
(862,352,o),
(835,452,qs),
(821,504,o),
(759,600,o),
(721,634,q),
(905,607,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
38 37 36 33 17 16 6 2 74 0 2 1 2 133 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 24 47 39 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 970;
}
);
note = uni21BA;
unicode = 8634;
},
{
glyphname = uni21BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,600,o),
(149,504,o),
(135,452,qs),
(108,352,o),
(141,177,o),
(242,45,o),
(401,-34,o),
(499,-39,qs),
(590,-44,o),
(744,11,o),
(856,116,o),
(920,266,o),
(921,356,qs),
(922,449,o),
(839,617,o),
(758,677,q),
(673,581,l),
(732,536,o),
(787,414,o),
(787,351,qs),
(787,298,o),
(748,201,o),
(678,127,o),
(576,84,o),
(513,86,qs),
(447,89,o),
(339,144,o),
(269,236,o),
(244,354,o),
(262,420,qs),
(273,462,o),
(317,534,o),
(348,560,q),
(345,369,l),
(457,369,l),
(457,766,l),
(47,719,l),
(66,607,l),
(249,634,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
38 22 21 5 2 1 6 0 74 0 0 1 0 133 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 47 40 19 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 970;
}
);
note = uni21BB;
unicode = 8635;
},
{
glyphname = uni21B7;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(811,192,o),
(841,294,o),
(841,348,qs),
(841,432,o),
(784,574,o),
(681,677,o),
(535,734,o),
(445,734,qs),
(357,734,o),
(213,677,o),
(108,575,o),
(49,436,o),
(47,354,q),
(178,354,l),
(180,409,o),
(222,502,o),
(293,570,o),
(389,608,o),
(445,608,qs),
(502,608,o),
(600,569,o),
(670,499,o),
(710,402,o),
(710,345,qs),
(710,301,o),
(686,221,o),
(663,188,q),
(614,377,l),
(506,354,l),
(616,-39,l),
(998,113,l),
(951,216,l),
(783,146,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 0 1 76 32 5 3 2 1 5 1 73 0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 36 20 44 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1045;
}
);
note = uni21B7;
unicode = 8631;
},
{
glyphname = uni21B6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,113,l),
(430,-39,l),
(540,354,l),
(431,377,l),
(382,188,l),
(359,221,o),
(335,301,o),
(335,345,qs),
(335,402,o),
(375,499,o),
(446,569,o),
(543,608,o),
(601,608,qs),
(656,608,o),
(752,570,o),
(823,502,o),
(865,409,o),
(867,354,q),
(998,354,l),
(996,436,o),
(937,575,o),
(833,677,o),
(688,734,o),
(601,734,qs),
(511,734,o),
(365,677,o),
(261,574,o),
(204,432,o),
(204,348,qs),
(204,294,o),
(234,192,o),
(262,146,q),
(94,216,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
28 1 1 2 1 76 32 31 30 29 27 5 1 73 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 36 20 39 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1045;
}
);
note = uni21B6;
unicode = 8630;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,323,o),
(270,345,o),
(301,346,qs),
(353,348,o),
(421,290,o),
(420,233,qs),
(419,175,o),
(351,121,o),
(298,123,qs),
(261,125,o),
(202,163,o),
(193,206,q),
(50,206,l),
(62,93,o),
(192,-7,o),
(301,-7,qs),
(361,-7,o),
(454,25,o),
(491,57,qs),
(526,89,o),
(566,181,o),
(566,239,qs),
(566,291,o),
(534,374,o),
(474,434,o),
(389,466,o),
(337,467,qs),
(297,468,o),
(236,453,o),
(202,436,q),
(222,582,l),
(535,582,l),
(535,708,l),
(105,708,l),
(60,304,l),
(197,304,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 97 0 3 3 47 3 78 0 0 0 35 0 35 36 34 18 41 35 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,143,o),
(218,176,o),
(205,218,o),
(207,241,qs),
(211,286,o),
(272,337,o),
(317,338,qs),
(369,339,o),
(431,278,o),
(429,224,qs),
(428,201,o),
(410,162,o),
(380,135,o),
(338,121,o),
(314,122,qs),
(287,123,o)
);
},
{
closed = 1;
nodes = (
(568,569,o),
(529,641,o),
(499,665,qs),
(467,692,o),
(381,717,o),
(330,716,qs),
(263,715,o),
(164,665,o),
(131,623,qs),
(85,569,o),
(46,415,o),
(47,338,qs),
(47,274,o),
(74,152,o),
(137,56,o),
(239,-4,o),
(313,-5,qs),
(367,-7,o),
(459,25,o),
(494,56,qs),
(528,86,o),
(572,178,o),
(572,232,qs),
(571,339,o),
(452,461,o),
(343,462,qs),
(298,462,o),
(215,430,o),
(183,398,q),
(182,432,o),
(201,499,o),
(238,553,o),
(294,587,o),
(330,588,qs),
(365,589,o),
(423,557,o),
(432,520,q),
(573,520,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
24 1 1 3 1 76 8 1 6 2 3 2 6 3 128 0 3 0 1 0 3 1 105 0 2 2 5 97 0 5 5 46 77 7 1 0 0 4 97 0 4 4 47 4 78 16 16 1 0 16 53 16 53 48 46 37 35 28 26 20 18 9 7 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = six;
unicode = 54;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,714,o),
(95,676,qs),
(95,636,o),
(143,591,o),
(182,591,qs),
(220,591,o),
(268,636,o),
(268,676,qs),
(268,714,o),
(220,759,o),
(182,759,qs),
(143,759,o)
);
},
{
closed = 1;
nodes = (
(357,714,o),
(357,676,qs),
(357,636,o),
(405,591,o),
(443,591,qs),
(481,591,o),
(530,636,o),
(530,676,qs),
(530,714,o),
(481,759,o),
(443,759,qs),
(405,759,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 625;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,-106,l),
(218,-105,o),
(249,-104,o),
(264,-105,qs),
(287,-106,o),
(316,-122,o),
(316,-141,qs),
(316,-151,o),
(306,-167,o),
(282,-177,o),
(240,-179,o),
(206,-175,q),
(205,-255,l),
(252,-260,o),
(322,-255,o),
(347,-243,qs),
(376,-230,o),
(417,-175,o),
(419,-137,qs),
(421,-86,o),
(359,-35,o),
(310,-42,q),
(330,18,l),
(244,18,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 49 values pushed */
1 1 1 2 22 11 2 0 1 2 76 10 1 0 73 0 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 97 0 1 2 1 81 0 0 0 23 0 23 53 28 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 609;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 41 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = ccedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,138,o),
(186,177,o),
(172,230,o),
(172,262,qs),
(172,292,o),
(184,346,o),
(212,388,o),
(260,412,o),
(293,412,qs),
(332,412,o),
(381,374,o),
(386,350,q),
(534,350,l),
(527,399,o),
(486,470,o),
(423,516,o),
(342,538,o),
(296,538,qs),
(233,538,o),
(135,499,o),
(68,427,o),
(32,325,o),
(32,264,qs),
(32,150,o),
(135,9,o),
(240,-5,q),
(212,-109,l),
(223,-109,o),
(253,-108,o),
(268,-109,qs),
(290,-109,o),
(323,-125,o),
(322,-145,qs),
(322,-156,o),
(312,-172,o),
(288,-182,o),
(245,-185,o),
(211,-181,q),
(210,-263,l),
(265,-268,o),
(328,-263,o),
(355,-249,qs),
(384,-237,o),
(425,-181,o),
(427,-141,qs),
(429,-88,o),
(366,-36,o),
(316,-43,q),
(327,-6,l),
(366,-3,o),
(435,21,o),
(491,67,o),
(528,133,o),
(534,179,q),
(386,179,l),
(381,155,o),
(334,117,o),
(294,117,qs),
(261,117,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
32 10 2 3 0 20 1 2 3 2 76 19 1 2 73 0 5 6 1 6 5 1 128 0 1 0 6 1 0 126 0 2 3 2 134 7 1 0 0 3 2 0 3 105 0 6 6 4 97 0 4 4 49 6 78 1 0 50 48 46 45 41 39 31 27 22 21 4 3 0 58 1 58 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = uni0162;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,0,l),
(257,0,l),
(227,-106,l),
(238,-105,o),
(264,-104,o),
(280,-104,qs),
(308,-105,o),
(336,-121,o),
(336,-141,qs),
(336,-151,o),
(327,-167,o),
(303,-178,o),
(260,-179,o),
(226,-175,q),
(225,-255,l),
(279,-260,o),
(342,-255,o),
(368,-243,qs),
(397,-230,o),
(438,-175,o),
(440,-137,qs),
(441,-86,o),
(379,-35,o),
(330,-42,q),
(343,0,l),
(373,0,l),
(373,579,l),
(595,579,l),
(595,708,l),
(6,708,l),
(6,579,l),
(228,579,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
7 1 4 2 28 17 2 3 4 2 76 16 1 3 73 0 4 2 3 2 4 3 128 0 3 3 132 7 6 2 1 1 0 95 0 0 0 38 77 5 1 2 2 39 2 78 0 0 0 31 0 31 18 53 28 17 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,527,l),
(238,527,l),
(238,670,l),
(97,670,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,173,ls),
(97,111,o),
(138,31,o),
(187,14,q),
(153,-109,l),
(164,-108,o),
(193,-107,o),
(209,-108,qs),
(231,-109,o),
(263,-126,o),
(263,-145,qs),
(263,-156,o),
(254,-172,o),
(229,-182,o),
(186,-185,o),
(152,-181,q),
(152,-263,l),
(179,-266,o),
(220,-267,o),
(255,-264,o),
(283,-257,o),
(295,-251,qs),
(324,-237,o),
(366,-181,o),
(368,-141,qs),
(370,-88,o),
(306,-36,o),
(257,-43,q),
(270,0,l),
(293,0,l),
(359,0,l),
(359,123,l),
(307,123,ls),
(238,123,o),
(238,191,qs),
(238,404,l),
(364,404,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
32 1 1 0 8 1 4 1 31 20 2 3 4 19 1 2 3 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 7 0 4 3 7 4 105 10 9 2 5 5 6 95 8 1 6 6 41 77 0 0 0 1 95 0 1 1 39 77 0 3 3 2 97 0 2 2 51 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 7 0 4 3 7 4 105 0 3 0 2 3 2 101 10 9 2 5 5 6 95 8 1 6 6 41 77 0 0 0 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 44 0 44 17 17 17 22 53 19 26 33 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 396;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,485,o),
(255,550,o),
(328,588,o),
(379,588,qs),
(443,588,o),
(525,528,o),
(536,477,q),
(676,477,l),
(670,540,o),
(619,631,o),
(539,689,o),
(437,717,o),
(379,717,qs),
(296,717,o),
(169,663,o),
(81,565,o),
(36,432,o),
(36,355,qs),
(36,283,o),
(73,159,o),
(146,65,o),
(254,5,o),
(324,-3,q),
(296,-104,l),
(306,-104,o),
(338,-102,o),
(351,-103,qs),
(379,-104,o),
(405,-120,o),
(405,-139,qs),
(405,-149,o),
(395,-165,o),
(371,-175,o),
(329,-177,o),
(295,-174,q),
(294,-253,l),
(348,-258,o),
(411,-253,o),
(437,-240,qs),
(465,-228,o),
(506,-173,o),
(508,-135,qs),
(510,-84,o),
(448,-33,o),
(399,-40,q),
(409,-4,l),
(460,0,o),
(553,34,o),
(625,93,o),
(671,177,o),
(676,232,q),
(536,232,l),
(526,181,o),
(443,124,o),
(379,124,qs),
(328,124,o),
(255,163,o),
(208,227,o),
(185,311,o),
(185,356,qs),
(185,401,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
37 15 2 3 0 25 1 2 3 2 76 24 1 2 73 0 6 7 1 7 6 1 128 0 1 0 7 1 0 126 0 2 3 2 134 0 0 4 1 3 2 0 3 105 0 7 7 5 97 0 5 5 46 7 78 57 55 53 52 48 46 36 34 33 32 27 26 18 36 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = scedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,404,o),
(336,370,q),
(472,370,l),
(470,416,o),
(435,480,o),
(378,520,o),
(302,538,o),
(260,538,qs),
(220,538,o),
(145,522,o),
(86,485,o),
(47,424,o),
(45,381,qs),
(42,332,o),
(81,272,o),
(110,254,qs),
(129,241,o),
(175,226,o),
(222,216,o),
(270,207,o),
(292,201,qs),
(312,196,o),
(348,176,o),
(348,153,qs),
(348,137,o),
(333,119,o),
(312,110,o),
(287,107,o),
(276,107,qs),
(238,107,o),
(183,133,o),
(177,167,q),
(31,167,l),
(34,124,o),
(73,63,o),
(99,42,qs),
(122,24,o),
(179,2,o),
(210,-3,q),
(180,-111,l),
(194,-110,o),
(216,-110,o),
(234,-110,qs),
(261,-111,o),
(290,-127,o),
(290,-146,qs),
(290,-157,o),
(280,-173,o),
(256,-183,o),
(213,-185,o),
(179,-181,q),
(178,-262,l),
(232,-267,o),
(296,-262,o),
(322,-250,qs),
(350,-236,o),
(392,-181,o),
(394,-142,qs),
(396,-91,o),
(333,-39,o),
(284,-46,q),
(295,-8,l),
(337,-6,o),
(410,17,o),
(436,41,qs),
(460,62,o),
(487,121,o),
(486,162,qs),
(485,207,o),
(453,262,o),
(427,278,qs),
(408,290,o),
(359,306,o),
(306,318,o),
(253,329,o),
(230,335,qs),
(207,341,o),
(182,361,o),
(181,378,qs),
(180,393,o),
(194,412,o),
(216,422,o),
(243,425,o),
(259,425,qs),
(287,425,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
45 1 1 5 23 1 3 1 33 1 2 3 3 76 44 1 3 1 75 32 1 2 73 0 7 0 4 0 7 4 128 0 4 5 0 4 5 126 0 2 3 2 134 0 5 0 3 2 5 3 105 8 1 0 0 6 97 0 6 6 49 77 0 1 1 47 1 78 1 0 82 81 77 75 56 54 52 51 43 40 35 34 22 21 0 84 1 84 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni21A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(839,555,o),
(916,521,o),
(973,462,o),
(1006,383,o),
(1006,338,qs),
(1006,292,o),
(974,212,o),
(917,152,o),
(839,118,o),
(794,118,qs),
(282,118,l),
(480,290,l),
(406,385,l),
(47,59,l),
(406,-267,l),
(480,-173,l),
(282,0,l),
(805,0,ls),
(874,0,o),
(993,53,o),
(1080,144,o),
(1129,266,o),
(1129,336,qs),
(1129,406,o),
(1080,528,o),
(994,620,o),
(875,673,o),
(805,673,qs),
(164,673,l),
(164,555,l),
(794,555,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
18 17 2 2 3 16 1 1 2 2 76 15 14 2 1 73 0 0 4 1 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 0 0 0 30 0 29 38 40 33 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1176;
}
);
note = uni21A9;
unicode = 8617;
},
{
glyphname = uni2713;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,372,l),
(392,-13,l),
(1026,731,l),
(933,825,l),
(392,189,l),
(140,466,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 1073;
}
);
note = uni2713;
unicode = 10003;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,196,o),
(197,159,qs),
(197,122,o),
(240,81,o),
(276,81,qs),
(314,81,o),
(356,123,o),
(356,159,qs),
(356,196,o),
(314,240,o),
(276,240,qs),
(240,240,o)
);
},
{
closed = 1;
nodes = (
(197,595,o),
(197,559,qs),
(197,521,o),
(240,481,o),
(276,481,qs),
(314,481,o),
(356,522,o),
(356,559,qs),
(356,595,o),
(314,640,o),
(276,640,qs),
(240,640,o)
);
},
{
closed = 1;
nodes = (
(507,418,l),
(47,418,l),
(47,304,l),
(507,304,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
7 1 2 0 3 4 2 3 105 0 4 8 1 5 0 4 5 103 6 1 0 1 1 0 89 6 1 0 0 1 97 0 1 0 1 81 24 24 13 12 1 0 24 27 24 27 26 25 19 17 12 23 13 23 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = divide;
unicode = 247;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,209,l),
(368,361,l),
(521,514,l),
(438,596,l),
(286,444,l),
(133,596,l),
(50,513,l),
(202,361,l),
(50,208,l),
(132,124,l),
(285,277,l),
(437,124,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,708,l),
(27,708,l),
(241,351,l),
(137,351,l),
(137,255,l),
(292,255,l),
(292,179,l),
(137,179,l),
(137,83,l),
(292,83,l),
(292,0,l),
(437,0,l),
(437,83,l),
(591,83,l),
(591,179,l),
(437,179,l),
(437,255,l),
(591,255,l),
(591,351,l),
(486,351,l),
(699,708,l),
(535,708,l),
(366,402,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
22 1 1 0 1 76 9 1 1 8 1 2 3 1 2 104 7 1 3 6 1 4 5 3 4 103 10 1 0 0 38 77 0 5 5 39 5 78 21 20 19 18 17 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,369,l),
(47,369,l),
(47,252,l),
(129,252,l),
(129,178,l),
(47,178,l),
(47,73,l),
(129,73,l),
(129,0,l),
(274,0,l),
(274,73,l),
(435,73,l),
(435,178,l),
(274,178,l),
(274,252,l),
(399,252,ls),
(455,252,o),
(546,276,o),
(581,301,qs),
(621,329,o),
(669,420,o),
(669,483,qs),
(669,549,o),
(629,636,o),
(557,687,o),
(457,708,o),
(397,708,qs),
(129,708,l)
);
},
{
closed = 1;
nodes = (
(274,579,l),
(386,579,ls),
(417,579,o),
(469,572,o),
(506,550,o),
(527,509,o),
(526,475,qs),
(525,445,o),
(503,405,o),
(466,380,o),
(417,369,o),
(389,369,qs),
(274,369,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
12 9 2 8 7 1 1 2 8 1 103 6 1 2 5 1 3 4 2 3 103 0 10 10 0 95 11 1 0 0 38 77 0 4 4 39 4 78 29 28 1 0 39 37 28 40 29 40 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 10 0 27 1 27 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B4;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,692,o),
(92,645,o),
(51,570,o),
(52,515,q),
(189,515,l),
(190,539,o),
(211,567,o),
(244,582,o),
(283,585,o),
(302,585,qs),
(337,584,o),
(387,550,o),
(385,515,qs),
(384,500,o),
(365,468,o),
(351,460,q),
(35,460,l),
(35,377,l),
(234,377,l),
(141,319,l),
(35,319,l),
(35,238,l),
(76,238,l),
(63,226,o),
(50,180,o),
(50,161,qs),
(50,117,o),
(88,53,o),
(117,31,qs),
(150,8,o),
(233,-13,o),
(276,-13,qs),
(325,-13,o),
(417,8,o),
(486,56,o),
(527,132,o),
(526,186,q),
(389,186,l),
(388,162,o),
(367,135,o),
(334,120,o),
(294,117,o),
(275,117,qs),
(240,118,o),
(192,151,o),
(193,186,qs),
(193,200,o),
(208,230,o),
(223,238,q),
(533,238,l),
(533,319,l),
(338,319,l),
(430,377,l),
(533,377,l),
(533,460,l),
(495,460,l),
(510,475,o),
(523,517,o),
(525,537,qs),
(527,585,o),
(489,652,o),
(426,694,o),
(344,713,o),
(302,713,qs),
(253,713,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 13 12 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 50 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 47 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 50 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
1 0 60 59 55 53 48 47 46 45 44 43 42 41 33 31 27 26 22 20 15 14 13 12 11 10 9 8 0 64 1 64 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = uni20B4;
unicode = 8372;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,510,ls),
(271,555,o),
(308,604,o),
(350,607,qs),
(392,609,o),
(431,567,o),
(434,529,q),
(567,529,l),
(564,624,o),
(460,720,o),
(354,718,qs),
(252,717,o),
(131,610,o),
(131,507,qs),
(131,396,l),
(47,396,l),
(47,276,l),
(131,276,l),
(131,128,l),
(48,128,l),
(48,0,l),
(575,0,l),
(575,128,l),
(271,128,l),
(271,276,l),
(483,276,l),
(483,396,l),
(271,396,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 8 5 8 7 114 10 9 2 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 7 8 5 8 7 5 128 10 9 2 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 27 0 27 18 18 35 17 17 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = Scedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(578,557,o),
(536,637,o),
(469,689,o),
(380,716,o),
(328,717,qs),
(281,718,o),
(187,700,o),
(109,654,o),
(59,575,o),
(56,515,qs),
(54,464,o),
(93,380,o),
(132,353,qs),
(164,330,o),
(245,305,o),
(283,296,qs),
(300,291,o),
(326,285,o),
(350,279,o),
(375,273,o),
(392,268,qs),
(415,262,o),
(453,233,o),
(453,201,qs),
(453,178,o),
(433,148,o),
(398,131,o),
(352,125,o),
(327,126,qs),
(303,127,o),
(256,137,o),
(218,159,o),
(190,193,o),
(184,219,q),
(36,219,l),
(39,168,o),
(76,91,o),
(138,36,o),
(222,2,o),
(270,-4,q),
(242,-109,l),
(261,-108,o),
(276,-108,o),
(288,-108,qs),
(319,-108,o),
(351,-124,o),
(351,-144,qs),
(351,-154,o),
(341,-170,o),
(317,-180,o),
(275,-182,o),
(241,-178,q),
(240,-258,l),
(294,-263,o),
(357,-258,o),
(383,-246,qs),
(411,-233,o),
(452,-178,o),
(454,-140,qs),
(456,-89,o),
(394,-38,o),
(345,-45,q),
(354,-7,l),
(402,-5,o),
(481,17,o),
(513,39,qs),
(552,65,o),
(598,151,o),
(598,212,qs),
(597,268,o),
(559,338,o),
(497,380,o),
(417,404,o),
(376,413,qs),
(362,415,o),
(330,422,o),
(296,431,o),
(261,442,o),
(246,449,qs),
(225,459,o),
(200,491,o),
(201,514,qs),
(201,536,o),
(223,566,o),
(257,584,o),
(296,590,o),
(314,590,qs),
(365,588,o),
(433,549,o),
(439,504,q),
(583,504,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
50 1 1 5 28 1 3 1 38 1 2 3 3 76 37 1 2 73 8 1 7 0 4 0 7 4 128 0 4 5 0 4 5 126 0 2 3 2 134 0 5 0 3 2 5 3 105 0 0 0 6 97 0 6 6 46 77 0 1 1 47 1 78 0 0 0 90 0 90 86 84 62 60 56 55 49 45 40 39 27 26 34 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = t_alt;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,527,l),
(238,527,l),
(238,670,l),
(124,670,l),
(100,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,173,ls),
(96,84,o),
(188,-4,o),
(293,0,qs),
(359,0,l),
(359,123,l),
(307,123,ls),
(238,123,o),
(238,191,qs),
(238,404,l),
(364,404,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 7 6 2 2 2 3 95 5 1 3 3 22 77 0 0 0 1 98 0 1 1 21 1 78 0 0 0 18 0 18 17 17 17 19 33 34 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = t_alt;
},
{
glyphname = alt_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,128,l),
(35,0,l),
(515,0,l),
(515,128,l),
(356,128,l),
(356,708,l),
(248,708,l),
(233,681,o),
(188,647,o),
(134,628,o),
(75,621,o),
(47,621,q),
(47,521,l),
(211,521,l),
(211,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 0 3 1 0 103 0 2 2 20 77 5 1 3 3 4 96 0 4 4 21 4 78 17 17 17 20 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = alt_1;
},
{
glyphname = colon.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,198,o),
(55,158,qs),
(55,116,o),
(102,72,o),
(142,72,qs),
(182,72,o),
(229,117,o),
(229,158,qs),
(229,198,o),
(183,246,o),
(142,246,qs),
(102,246,o)
);
},
{
closed = 1;
nodes = (
(55,557,o),
(55,517,qs),
(55,475,o),
(102,431,o),
(142,431,qs),
(182,431,o),
(229,476,o),
(229,517,qs),
(229,557,o),
(183,606,o),
(142,606,qs),
(102,606,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
5 1 2 0 3 0 2 3 105 4 1 0 1 1 0 89 4 1 0 0 1 97 0 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 284;
}
);
note = colon.uc;
},
{
glyphname = t2.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,135,o),
(243,163,o),
(238,196,o),
(238,214,qs),
(238,404,l),
(393,404,l),
(393,527,l),
(238,527,l),
(238,671,l),
(97,671,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,181,ls),
(97,137,o),
(118,67,o),
(140,45,qs),
(164,19,o),
(237,-7,o),
(285,-7,qs),
(300,-7,o),
(336,-3,o),
(377,8,o),
(412,23,o),
(426,32,q),
(386,139,l),
(371,130,o),
(331,118,o),
(315,118,qs),
(291,118,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
3 1 0 2 4 1 1 0 2 76 0 4 3 4 133 6 1 2 2 3 95 5 1 3 3 22 77 7 1 0 0 1 97 0 1 1 28 1 78 1 0 25 24 23 22 21 20 19 18 17 16 10 8 0 30 1 30 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = t2.alt;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,420,l),
(62,302,l),
(391,302,l),
(391,420,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = hyphen.uc;
},
{
glyphname = uni00AD.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,420,l),
(62,302,l),
(391,302,l),
(391,420,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni00AD.uc;
},
{
glyphname = endash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(561,420,l),
(62,420,l),
(62,302,l),
(561,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(785,420,l),
(62,420,l),
(62,302,l),
(785,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 847;
}
);
note = emdash.uc;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(700,-32,o),
(806,74,o),
(863,225,o),
(863,320,qs),
(863,410,o),
(804,561,o),
(697,669,o),
(547,729,o),
(457,729,qs),
(365,729,o),
(214,671,o),
(106,565,o),
(47,413,o),
(47,320,qs),
(47,225,o),
(105,74,o),
(212,-32,o),
(364,-88,o),
(457,-88,qs),
(550,-88,o)
);
},
{
closed = 1;
nodes = (
(274,48,o),
(193,129,o),
(149,246,o),
(149,319,qs),
(149,391,o),
(194,507,o),
(276,589,o),
(391,633,o),
(461,633,qs),
(531,633,o),
(644,589,o),
(724,507,o),
(768,391,o),
(768,319,qs),
(768,246,o),
(726,129,o),
(646,48,o),
(533,5,o),
(461,5,qs),
(389,5,o)
);
},
{
closed = 1;
nodes = (
(562,217,o),
(658,298,o),
(659,376,qs),
(659,420,o),
(634,481,o),
(588,520,o),
(522,537,o),
(481,537,qs),
(307,537,l),
(307,78,l),
(403,78,l),
(403,217,l),
(487,217,ls)
);
},
{
closed = 1;
nodes = (
(521,451,o),
(567,415,o),
(565,375,qs),
(563,338,o),
(517,301,o),
(482,301,qs),
(403,301,l),
(403,451,l),
(481,451,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
0 4 6 2 6 4 2 128 0 1 0 3 5 1 3 105 0 5 12 1 8 7 5 8 103 0 7 11 1 6 4 7 6 103 10 1 2 0 0 2 89 10 1 2 2 0 97 9 1 0 2 0 81 53 53 40 40 21 20 1 0 53 61 53 60 56 54 40 52 40 51 45 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 13 6 22 
CALL[ ]	/* CallFunction */";
};
width = 910;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = f_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,578,ls),
(238,610,o),
(277,645,o),
(309,644,qs),
(328,644,o),
(359,636,o),
(373,628,q),
(414,737,l),
(388,752,o),
(323,768,o),
(292,768,qs),
(249,768,o),
(179,746,o),
(126,704,o),
(97,637,o),
(97,592,qs),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,0,l),
(238,0,l),
(238,404,l),
(367,404,l),
(367,527,l),
(238,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
17 1 5 4 18 1 3 5 2 76 0 4 0 5 3 4 5 105 2 1 0 0 3 95 7 6 2 3 3 22 77 0 1 1 21 1 78 0 0 0 25 0 25 37 37 17 17 17 17 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 379;
}
);
note = f_alt;
},
{
glyphname = g_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,-53,o),
(412,-81,qs),
(394,-108,o),
(335,-140,o),
(287,-142,qs),
(258,-143,o),
(203,-133,o),
(154,-117,o),
(113,-98,o),
(99,-90,q),
(95,-105,o),
(86,-135,o),
(81,-150,qs),
(61,-211,l),
(105,-240,o),
(227,-274,o),
(291,-273,qs),
(370,-273,o),
(481,-227,o),
(514,-189,qs),
(539,-159,o),
(567,-90,o),
(579,-17,o),
(581,59,o),
(581,95,qs),
(581,527,l),
(459,527,l),
(444,470,l),
(412,505,o),
(326,536,o),
(288,536,qs),
(233,537,o),
(135,503,o),
(102,467,qs),
(67,428,o),
(31,321,o),
(31,258,qs),
(31,201,o),
(63,104,o),
(123,32,o),
(214,-9,o),
(274,-9,qs),
(324,-8,o),
(409,17,o),
(438,56,q),
(440,23,o)
);
},
{
closed = 1;
nodes = (
(223,136,o),
(189,175,o),
(172,228,o),
(172,261,qs),
(172,292,o),
(188,346,o),
(221,386,o),
(272,408,o),
(305,408,qs),
(369,407,o),
(437,329,o),
(438,266,qs),
(438,235,o),
(422,180,o),
(390,139,o),
(339,115,o),
(306,115,qs),
(273,115,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
17 1 6 1 0 1 0 5 35 1 4 0 31 1 3 4 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
17 1 6 2 0 1 0 5 35 1 4 0 31 1 3 4 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 6 6 1 97 2 1 1 1 29 77 7 1 5 5 0 97 0 0 0 28 77 0 4 4 3 97 0 3 3 31 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 6 6 1 97 2 1 1 1 29 77 7 1 5 5 0 97 0 0 0 30 77 0 4 4 3 97 0 3 3 31 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 3 4 3 101 0 6 6 1 97 2 1 1 1 29 77 7 1 5 5 0 97 0 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 4 3 101 0 2 2 22 77 0 6 6 1 97 0 1 1 29 77 7 1 5 5 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
47 46 55 53 46 63 47 63 42 40 19 41 34 8 7 27 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = g_alt;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-141,o),
(273,-141,qs),
(214,-141,o),
(127,-109,o),
(101,-90,q),
(56,-210,l),
(104,-241,o),
(218,-274,o),
(276,-273,qs),
(355,-274,o),
(468,-226,o),
(503,-186,qs),
(528,-157,o),
(556,-89,o),
(567,-17,o),
(568,58,o),
(568,94,qs),
(568,527,l),
(426,527,l),
(426,273,ls),
(426,243,o),
(420,192,o),
(407,169,qs),
(392,142,o),
(340,117,o),
(310,117,qs),
(247,117,o),
(223,153,q),
(208,170,o),
(199,221,o),
(199,248,qs),
(199,527,l),
(58,527,l),
(58,231,ls),
(58,180,o),
(76,93,o),
(99,60,qs),
(124,26,o),
(207,-8,o),
(264,-8,qs),
(313,-8,o),
(397,22,o),
(426,59,q),
(426,23,o),
(420,-51,o),
(400,-82,qs),
(382,-110,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
3 1 0 2 41 1 5 0 40 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 40 22 37 22 37 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = y;
unicode = 121;
},
{
glyphname = a_alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,160,o),
(331,124,o),
(285,102,o),
(254,101,qs),
(218,101,o),
(179,132,o),
(179,154,qs),
(178,181,o),
(225,214,o),
(263,220,qs),
(295,226,o),
(364,230,o),
(383,230,q),
(383,206,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(519,334,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,420,o),
(385,380,o),
(382,332,q),
(345,332,o),
(250,326,o),
(206,317,qs),
(171,308,o),
(115,285,o),
(65,244,o),
(37,186,o),
(37,147,qs),
(37,109,o),
(66,50,o),
(114,12,o),
(177,-8,o),
(223,-8,qs),
(267,-8,o),
(355,21,o),
(386,54,q),
(394,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 105 0 4 4 6 97 0 6 6 29 77 0 1 1 2 97 7 1 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 105 0 4 4 6 97 0 6 6 29 77 0 7 7 21 77 0 1 1 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
24 36 20 34 42 38 38 32 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = a_alt;
},
{
glyphname = uni0490;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,579,l),
(565,579,l),
(565,849,l),
(420,849,l),
(420,708,l),
(75,708,l),
(75,0,l),
(220,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = uni0490;
unicode = 1168;
},
{
glyphname = uni0491;
kernLeft = uni0433;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,681,l),
(316,681,l),
(316,527,l),
(56,527,l),
(56,0,l),
(197,0,l),
(197,405,l),
(456,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 1 2 133 4 1 3 3 1 95 0 1 1 22 77 0 0 0 21 0 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
note = uni0491;
unicode = 1169;
},
{
glyphname = uni0406;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 20 77 0 0 0 21 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = uni0406;
unicode = 1030;
},
{
glyphname = uni0456;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,726,o),
(47,688,qs),
(47,648,o),
(96,603,o),
(134,603,qs),
(173,603,o),
(221,648,o),
(221,688,qs),
(221,726,o),
(173,772,o),
(134,772,qs),
(96,772,o)
);
},
{
closed = 1;
nodes = (
(64,527,l),
(64,0,l),
(205,0,l),
(205,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
4 1 0 0 1 3 0 1 105 0 3 3 22 77 0 2 2 21 2 78 1 0 15 14 13 12 7 5 0 11 1 11 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = uni0456;
unicode = 1110;
},
{
glyphname = uni0404;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,588,o),
(369,588,qs),
(396,588,o),
(449,574,o),
(494,547,o),
(527,505,o),
(534,477,q),
(672,477,l),
(666,537,o),
(611,628,o),
(527,689,o),
(422,718,o),
(365,717,qs),
(283,715,o),
(160,661,o),
(77,567,o),
(36,435,o),
(36,355,qs),
(36,276,o),
(78,145,o),
(161,49,o),
(285,-5,o),
(367,-6,qs),
(423,-7,o),
(529,22,o),
(615,82,o),
(671,172,o),
(677,232,q),
(538,232,l),
(530,201,o),
(497,160,o),
(453,135,o),
(399,124,o),
(370,124,qs),
(292,124,o),
(193,215,o),
(189,292,q),
(466,292,l),
(466,416,l),
(189,416,l),
(196,495,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 7 0 7 6 0 128 0 3 1 2 1 3 2 128 0 0 0 1 3 0 1 103 0 7 7 5 97 0 5 5 27 77 0 2 2 4 97 0 4 4 28 4 78 36 20 40 36 20 34 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 713;
}
);
note = uni0404;
unicode = 1028;
},
{
glyphname = uni0454;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,124,o),
(190,147,o),
(169,183,o),
(168,208,q),
(364,208,l),
(364,319,l),
(168,319,l),
(169,343,o),
(190,379,o),
(222,402,o),
(265,414,o),
(287,414,qs),
(299,414,o),
(328,409,o),
(357,399,o),
(379,381,o),
(384,369,q),
(528,369,l),
(518,412,o),
(474,477,o),
(412,518,o),
(334,538,o),
(291,538,qs),
(227,538,o),
(130,499,o),
(65,426,o),
(31,325,o),
(31,265,qs),
(31,134,o),
(163,-8,o),
(291,-8,qs),
(330,-8,o),
(407,10,o),
(472,48,o),
(518,108,o),
(527,150,q),
(383,150,l),
(377,140,o),
(354,127,o),
(327,118,o),
(300,114,o),
(289,114,qs),
(266,114,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 4 5 6 5 4 6 128 0 1 7 0 7 1 0 128 0 6 0 7 1 6 7 103 0 5 5 3 97 0 3 3 29 77 8 1 0 0 2 97 0 2 2 30 2 78 1 0 38 37 36 35 31 29 25 24 20 18 12 10 6 5 0 42 1 42 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = uni0454;
unicode = 1108;
},
{
glyphname = uni0407;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(-17,863,o),
(-17,827,qs),
(-17,790,o),
(25,748,o),
(59,748,qs),
(93,748,o),
(135,790,o),
(135,827,qs),
(135,863,o),
(93,905,o),
(59,905,qs),
(25,905,o)
);
},
{
closed = 1;
nodes = (
(160,863,o),
(160,827,qs),
(160,790,o),
(201,748,o),
(236,748,qs),
(270,748,o),
(312,790,o),
(312,827,qs),
(312,863,o),
(269,905,o),
(236,905,qs),
(202,905,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 20 77 0 0 0 21 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = uni0407;
unicode = 1031;
},
{
glyphname = uni0457;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,527,l),
(64,0,l),
(205,0,l),
(205,527,l)
);
},
{
closed = 1;
nodes = (
(-30,707,o),
(-30,671,qs),
(-30,633,o),
(11,591,o),
(45,591,qs),
(80,591,o),
(122,633,o),
(122,671,qs),
(122,707,o),
(79,749,o),
(45,749,qs),
(12,749,o)
);
},
{
closed = 1;
nodes = (
(146,707,o),
(146,671,qs),
(146,633,o),
(188,591,o),
(222,591,qs),
(257,591,o),
(298,633,o),
(298,671,qs),
(298,707,o),
(256,749,o),
(222,749,qs),
(189,749,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 22 77 0 0 0 21 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 268;
}
);
note = uni0457;
unicode = 1111;
},
{
glyphname = map;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,664,qs),
(35,662,ls),
(35,657,o),
(40,657,qs),
(82,657,ls),
(84,657,o),
(86,655,qs),
(109,632,ls),
(110,631,o),
(110,628,qs),
(110,602,ls),
(110,600,o),
(112,598,qs),
(133,577,ls),
(135,575,o),
(135,573,qs),
(135,544,ls),
(135,541,o),
(136,540,qs),
(167,510,ls),
(168,509,o),
(168,506,qs),
(168,480,ls),
(168,479,o),
(170,477,qs),
(216,431,ls),
(217,430,o),
(217,427,qs),
(217,406,ls),
(217,404,o),
(219,402,qs),
(265,355,l),
(267,355,o),
(267,352,qs),
(267,329,ls),
(267,326,o),
(268,325,qs),
(281,313,ls),
(282,312,o),
(282,309,qs),
(282,190,ls),
(282,187,o),
(281,186,qs),
(267,173,ls),
(266,172,o),
(266,169,qs),
(266,84,ls),
(266,81,o),
(267,80,qs),
(279,68,l),
(285,64,o),
(279,60,q),
(267,48,ls),
(263,44,o),
(267,41,qs),
(276,32,ls),
(278,30,o),
(278,28,qs),
(278,5,ls),
(278,0,o),
(283,0,qs),
(286,0,ls),
(288,0,o),
(289,1,o),
(290,1,q),
(304,16,ls),
(305,17,o),
(308,17,qs),
(328,17,ls),
(333,17,o),
(333,23,qs),
(333,61,ls),
(333,63,o),
(335,65,qs),
(345,75,ls),
(346,76,o),
(348,76,qs),
(357,76,ls),
(358,76,o),
(360,78,qs),
(372,90,ls),
(374,92,o),
(374,94,qs),
(374,106,ls),
(374,108,o),
(375,109,qs),
(397,131,ls),
(399,133,o),
(399,135,qs),
(399,160,ls),
(399,163,o),
(400,164,qs),
(420,184,ls),
(423,187,o),
(420,191,qs),
(410,201,ls),
(409,202,o),
(409,205,qs),
(409,232,ls),
(409,234,o),
(410,235,qs),
(432,257,ls),
(434,259,o),
(441,257,o),
(441,253,qs),
(441,219,ls),
(441,213,o),
(446,213,qs),
(455,213,ls),
(456,213,o),
(458,215,qs),
(485,242,l),
(490,245,o),
(493,242,qs),
(508,227,ls),
(511,224,o),
(516,227,q),
(527,238,ls),
(530,241,o),
(534,238,qs),
(543,229,ls),
(544,228,o),
(546,228,qs),
(560,228,l),
(579,228,ls),
(584,228,o),
(584,233,qs),
(584,236,o),
(583,237,qs),
(562,257,ls),
(558,261,o),
(562,265,qs),
(568,270,ls),
(570,272,o),
(570,274,qs),
(570,311,ls),
(570,313,o),
(568,315,qs),
(552,332,ls),
(551,333,o),
(548,333,qs),
(536,333,ls),
(534,333,o),
(532,335,qs),
(510,357,ls),
(508,359,o),
(508,361,qs),
(508,398,l),
(508,432,ls),
(508,437,o),
(503,437,qs),
(491,437,ls),
(489,437,o),
(488,438,qs),
(429,497,ls),
(425,501,o),
(429,505,qs),
(435,511,ls),
(437,513,o),
(437,515,qs),
(437,594,ls),
(437,599,o),
(431,599,qs),
(425,599,ls),
(422,599,o),
(421,598,qs),
(411,588,ls),
(407,584,o),
(404,588,q),
(384,608,ls),
(382,610,o),
(382,612,qs),
(382,638,ls),
(382,643,o),
(377,643,qs),
(345,643,ls),
(342,643,o),
(341,642,qs),
(325,625,ls),
(324,624,o),
(321,624,qs),
(315,624,ls),
(309,624,o),
(309,629,qs),
(309,654,ls),
(309,659,o),
(304,659,qs),
(271,659,ls),
(269,659,o),
(268,660,qs),
(222,706,ls),
(220,708,o),
(218,708,qs),
(122,708,ls),
(120,708,o),
(118,706,qs),
(99,687,ls),
(98,686,o),
(95,686,qs),
(56,686,ls),
(54,686,o),
(52,684,qs),
(36,668,ls),
(35,667,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
201 1 2 0 193 30 19 18 4 3 8 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
201 1 2 0 18 1 4 8 193 30 19 3 3 4 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 6 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 0 8 0 2 8 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 8 8 0 95 1 1 0 0 20 77 4 1 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 8 0 2 8 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 4 1 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 1 1 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 3 0 7 3 7 99 0 1 1 20 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
199 196 135 134 80 77 52 49 50 37 51 51 49 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 659;
}
);
note = map;
},
{
glyphname = logo;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(787,512,qs),
(787,520,o),
(781,526,qs),
(769,539,ls),
(763,545,o),
(755,545,qs),
(729,545,l),
(728,546,o),
(727,546,o),
(726,547,qs),
(695,572,ls),
(690,576,o),
(683,576,qs),
(644,576,l),
(639,589,o),
(626,589,qs),
(618,589,o),
(612,583,qs),
(605,576,l),
(550,576,ls),
(543,576,o),
(536,571,q),
(532,566,l),
(532,586,l),
(558,613,l),
(694,613,l),
(713,593,l),
(720,588,o),
(727,588,qs),
(739,588,ls),
(746,588,o),
(753,593,q),
(766,606,ls),
(772,612,o),
(772,620,qs),
(772,627,o),
(767,632,q),
(772,639,o),
(772,645,qs),
(772,653,o),
(766,659,qs),
(753,671,ls),
(747,677,o),
(739,677,qs),
(727,677,ls),
(719,677,o),
(713,671,qs),
(694,652,l),
(658,652,l),
(658,680,l),
(670,680,o),
(683,710,o),
(683,721,qs),
(683,758,ls),
(683,766,o),
(672,778,o),
(664,778,qs),
(613,778,ls),
(605,778,o),
(594,766,o),
(594,758,qs),
(594,721,ls),
(594,710,o),
(607,680,o),
(619,680,q),
(619,652,l),
(594,652,l),
(594,654,o),
(595,656,o),
(595,657,qs),
(595,665,o),
(584,677,o),
(576,677,qs),
(566,677,o),
(562,671,q),
(525,635,l),
(520,639,o),
(512,639,qs),
(504,639,o),
(493,628,o),
(493,620,qs),
(493,464,l),
(431,402,l),
(431,473,l),
(463,505,ls),
(469,511,o),
(469,519,qs),
(469,526,o),
(460,538,o),
(449,538,qs),
(441,538,o),
(436,533,qs),
(431,528,l),
(431,612,l),
(526,707,l),
(532,711,o),
(532,721,qs),
(532,739,l),
(538,739,ls),
(546,739,o),
(557,750,o),
(557,758,qs),
(557,766,o),
(546,778,o),
(538,778,qs),
(532,778,l),
(532,784,ls),
(532,792,o),
(520,803,o),
(512,803,qs),
(504,803,o),
(493,792,o),
(493,784,qs),
(493,778,l),
(487,778,ls),
(479,778,o),
(468,766,o),
(468,758,qs),
(468,750,o),
(479,739,o),
(487,739,qs),
(493,739,l),
(493,729,l),
(431,667,l),
(431,787,l),
(433,789,o),
(433,790,q),
(488,845,ls),
(494,851,o),
(494,859,qs),
(494,867,o),
(488,873,qs),
(476,886,l),
(473,888,o),
(469,890,q),
(469,910,ls),
(469,918,o),
(463,924,qs),
(451,936,ls),
(445,942,o),
(437,942,qs),
(430,942,o),
(426,939,q),
(420,945,o),
(412,945,qs),
(403,945,o),
(397,939,q),
(392,942,o),
(386,942,qs),
(377,942,o),
(373,936,q),
(360,924,ls),
(354,918,o),
(354,910,qs),
(354,890,l),
(352,889,o),
(349,888,o),
(347,886,qs),
(335,873,ls),
(329,867,o),
(329,859,qs),
(329,851,o),
(335,845,qs),
(390,790,l),
(390,789,o),
(392,787,q),
(392,667,l),
(330,729,l),
(330,739,l),
(336,739,ls),
(344,739,o),
(355,750,o),
(355,758,qs),
(355,766,o),
(344,778,o),
(336,778,qs),
(330,778,l),
(330,784,ls),
(330,792,o),
(319,803,o),
(311,803,qs),
(303,803,o),
(291,792,o),
(291,784,qs),
(291,778,l),
(285,778,ls),
(277,778,o),
(266,766,o),
(266,758,qs),
(266,750,o),
(277,739,o),
(285,739,qs),
(291,739,l),
(291,721,ls),
(291,711,o),
(297,707,q),
(392,612,l),
(392,528,l),
(388,533,l),
(381,538,o),
(374,538,qs),
(366,538,o),
(354,527,o),
(354,519,qs),
(354,511,o),
(360,505,qs),
(392,473,l),
(392,402,l),
(330,464,l),
(330,620,ls),
(330,628,o),
(319,639,o),
(311,639,qs),
(303,639,o),
(298,635,q),
(262,671,ls),
(256,677,o),
(248,677,qs),
(239,677,o),
(228,665,o),
(228,657,qs),
(228,654,o),
(229,652,q),
(204,652,l),
(204,680,l),
(216,680,o),
(229,710,o),
(229,721,qs),
(229,758,ls),
(229,766,o),
(218,778,o),
(210,778,qs),
(159,778,ls),
(151,778,o),
(140,766,o),
(140,758,qs),
(140,721,ls),
(140,710,o),
(153,680,o),
(165,680,q),
(165,652,l),
(130,652,l),
(110,671,ls),
(104,677,o),
(96,677,qs),
(84,677,ls),
(76,677,o),
(70,671,qs),
(57,659,l),
(52,652,o),
(52,645,qs),
(52,637,o),
(56,632,q),
(52,628,o),
(52,620,qs),
(52,613,o),
(57,606,q),
(70,593,l),
(77,588,o),
(84,588,qs),
(96,588,ls),
(103,588,o),
(110,593,q),
(130,613,l),
(265,613,l),
(291,586,l),
(291,566,l),
(287,571,l),
(280,576,o),
(273,576,qs),
(218,576,l),
(211,583,ls),
(205,589,o),
(197,589,qs),
(184,589,o),
(179,576,q),
(140,576,ls),
(133,576,o),
(128,572,qs),
(97,547,ls),
(95,545,o),
(95,545,q),
(68,545,ls),
(60,545,o),
(54,539,qs),
(42,526,ls),
(35,519,o),
(35,512,qs),
(35,504,o),
(45,495,o),
(52,493,q),
(52,485,o),
(63,474,o),
(71,474,q),
(73,459,o),
(90,459,qs),
(97,459,o),
(104,464,q),
(116,477,ls),
(122,483,o),
(122,491,qs),
(122,517,l),
(147,537,l),
(265,537,l),
(291,511,l),
(291,475,l),
(185,475,l),
(184,475,l),
(147,475,ls),
(140,475,o),
(133,470,q),
(108,444,ls),
(101,437,o),
(101,430,qs),
(101,422,o),
(114,411,o),
(122,411,qs),
(159,411,ls),
(168,411,o),
(173,417,q),
(193,436,l),
(303,436,l),
(396,342,l),
(398,342,o),
(406,335,o),
(412,335,qs),
(417,335,o),
(425,342,o),
(427,342,q),
(521,436,l),
(630,436,l),
(650,417,ls),
(656,411,o),
(664,411,qs),
(702,411,ls),
(710,411,o),
(721,422,o),
(721,430,qs),
(721,438,o),
(715,444,qs),
(690,470,ls),
(685,475,o),
(676,475,qs),
(532,475,l),
(532,511,l),
(558,537,l),
(676,537,l),
(701,517,l),
(701,491,ls),
(701,483,o),
(707,477,qs),
(719,464,l),
(726,459,o),
(733,459,qs),
(749,459,o),
(752,474,q),
(760,474,o),
(772,485,o),
(772,493,q),
(782,496,o),
(786,505,qs),
(787,507,o)
);
},
{
closed = 1;
nodes = (
(263,235,o),
(267,235,qs),
(269,235,o),
(270,234,qs),
(388,116,l),
(399,107,o),
(410,107,qs),
(411,107,ls),
(422,107,o),
(433,116,q),
(551,234,ls),
(552,235,o),
(553,235,qs),
(557,235,o),
(557,232,qs),
(557,13,ls),
(557,0,o),
(570,0,qs),
(631,0,ls),
(643,0,o),
(643,13,qs),
(643,362,ls),
(643,375,o),
(631,375,qs),
(570,375,ls),
(558,375,o),
(549,366,qs),
(417,234,ls),
(415,232,o),
(410,232,qs),
(406,232,o),
(404,234,qs),
(272,366,ls),
(263,375,o),
(251,375,qs),
(190,375,ls),
(178,375,o),
(178,362,qs),
(178,13,ls),
(178,0,o),
(190,0,qs),
(251,0,ls),
(263,0,o),
(263,13,qs),
(263,232,ls)
);
},
{
closed = 1;
nodes = (
(772,351,o),
(720,299,o),
(691,228,o),
(691,188,qs),
(691,143,o),
(721,71,o),
(774,21,o),
(847,-6,o),
(890,-6,qs),
(933,-6,o),
(1006,23,o),
(1059,74,o),
(1089,145,o),
(1089,188,qs),
(1089,233,o),
(1059,304,o),
(1006,354,o),
(933,381,o),
(890,381,qs),
(845,381,o)
);
},
{
closed = 1;
nodes = (
(828,91,o),
(799,122,o),
(782,164,o),
(782,188,qs),
(782,239,o),
(843,301,o),
(890,301,qs),
(935,301,o),
(998,239,o),
(998,188,qs),
(998,141,o),
(943,74,o),
(890,74,qs),
(867,74,o)
);
},
{
closed = 1;
nodes = (
(1133,0,o),
(1142,0,qs),
(1362,0,ls),
(1371,0,o),
(1371,9,qs),
(1371,72,ls),
(1371,81,o),
(1362,81,qs),
(1223,81,ls),
(1218,81,o),
(1218,85,qs),
(1218,366,ls),
(1218,375,o),
(1209,375,qs),
(1142,375,ls),
(1133,375,o),
(1133,366,qs),
(1133,9,ls)
);
},
{
closed = 1;
nodes = (
(1419,0,o),
(1428,0,qs),
(1455,0,o),
(1518,-1,o),
(1533,-1,qs),
(1586,-1,o),
(1666,29,o),
(1720,82,o),
(1747,152,o),
(1747,191,qs),
(1747,228,o),
(1724,295,o),
(1673,346,o),
(1593,376,o),
(1537,376,qs),
(1528,376,o),
(1498,376,o),
(1465,375,o),
(1436,375,o),
(1428,375,qs),
(1419,375,o),
(1419,366,qs),
(1419,9,ls)
);
},
{
closed = 1;
nodes = (
(1530,296,o),
(1536,296,qs),
(1588,296,o),
(1656,243,o),
(1656,191,qs),
(1656,137,o),
(1591,80,o),
(1535,80,qs),
(1527,80,o),
(1504,79,o),
(1504,85,qs),
(1504,290,ls),
(1504,295,o),
(1509,295,qs),
(1516,296,o)
);
},
{
closed = 1;
nodes = (
(1871,351,o),
(1819,299,o),
(1790,228,o),
(1790,188,qs),
(1790,143,o),
(1820,71,o),
(1873,21,o),
(1946,-6,o),
(1989,-6,qs),
(2032,-6,o),
(2105,23,o),
(2158,74,o),
(2188,145,o),
(2188,188,qs),
(2188,233,o),
(2158,304,o),
(2105,354,o),
(2032,381,o),
(1989,381,qs),
(1944,381,o)
);
},
{
closed = 1;
nodes = (
(1927,91,o),
(1898,122,o),
(1881,164,o),
(1881,188,qs),
(1881,239,o),
(1942,301,o),
(1989,301,qs),
(2034,301,o),
(2097,239,o),
(2097,188,qs),
(2097,141,o),
(2042,74,o),
(1989,74,qs),
(1966,74,o)
);
},
{
closed = 1;
nodes = (
(2548,367,o),
(2549,368,o),
(2549,369,qs),
(2549,375,o),
(2543,375,qs),
(2473,375,ls),
(2464,375,o),
(2460,366,qs),
(2373,132,l),
(2373,131,o),
(2372,130,q),
(2370,130,o),
(2370,132,q),
(2279,366,ls),
(2275,375,o),
(2267,375,qs),
(2191,375,ls),
(2185,375,o),
(2185,369,qs),
(2185,367,o),
(2186,366,q),
(2332,9,ls),
(2336,0,o),
(2344,0,qs),
(2393,0,ls),
(2402,0,o),
(2406,9,qs),
(2548,366,l)
);
},
{
closed = 1;
nodes = (
(2477,8,o),
(2477,6,qs),
(2477,0,o),
(2483,0,qs),
(2548,0,ls),
(2556,0,o),
(2560,9,qs),
(2584,75,ls),
(2586,79,o),
(2590,79,qs),
(2723,79,ls),
(2727,79,o),
(2729,75,qs),
(2754,9,l),
(2756,0,o),
(2765,0,qs),
(2835,0,ls),
(2841,0,o),
(2841,6,qs),
(2841,7,o),
(2840,8,o),
(2840,9,q),
(2699,367,l),
(2695,375,o),
(2687,375,qs),
(2631,375,ls),
(2623,375,o),
(2619,367,q),
(2478,9,l)
);
},
{
closed = 1;
nodes = (
(2655,261,o),
(2657,262,q),
(2658,261,l),
(2695,163,l),
(2695,162,ls),
(2695,159,o),
(2692,159,qs),
(2621,159,ls),
(2618,159,o),
(2618,162,qs),
(2618,163,l),
(2655,261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 18 267 164 2 16 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 67 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 180 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 50 49 48 14 13 5 12 16 11 2 12 114 9 1 1 11 2 0 1 114 7 1 3 0 53 0 3 114 0 56 79 77 79 56 77 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 39 24 22 4 18 47 1 15 16 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 0 0 2 88 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 6 4 3 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 181 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 50 49 48 14 13 5 12 16 11 2 12 114 9 1 1 11 2 4 1 114 7 1 3 4 53 4 3 114 0 56 79 77 79 56 77 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 39 24 22 4 18 47 1 15 16 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 183 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 50 49 48 14 13 5 12 16 11 16 12 11 128 9 1 1 11 2 11 1 2 128 7 1 3 4 53 4 3 114 0 56 79 77 79 56 77 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 39 24 22 4 18 47 1 15 16 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 198 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 15 13 16 128 50 48 14 3 12 16 11 16 12 11 128 9 1 1 11 2 11 1 2 128 7 1 3 4 53 4 3 114 0 56 79 77 79 56 77 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 219 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 15 13 16 128 50 48 14 3 12 16 11 16 12 11 128 9 1 1 25 2 25 1 2 128 7 1 3 4 53 4 3 114 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 0 62 62 52 98 78 76 72 69 65 63 58 55 8 52 52 21 77 83 70 66 81 4 59 59 52 97 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 215 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 15 13 16 128 50 48 14 3 12 16 11 16 12 11 128 9 1 1 25 2 25 1 2 128 7 1 3 4 57 4 3 114 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 82 68 80 3 57 53 60 57 89 32 1 31 0 5 60 31 5 105 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 28 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 216 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 15 13 16 128 50 48 14 3 12 16 11 16 12 11 128 9 1 1 25 2 25 1 2 128 7 1 3 4 57 4 3 114 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 28 58 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 217 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 15 13 16 128 50 48 14 3 12 16 11 16 12 11 128 9 1 1 25 2 25 1 2 128 7 1 3 4 57 4 3 57 128 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 28 58 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 170 values pushed */
518 517 498 497 428 427 408 407 592 588 583 581 577 576 572 569 562 560 553 551 542 540 534 532 524 522 517 530 518 530 508 506 497 516 498 516 496 493 489 487 480 475 467 460 457 454 451 449 445 442 434 432 427 440 428 440 418 416 407 426 408 426 400 397 389 386 383 380 372 369 366 363 355 351 348 347 346 344 342 340 336 335 332 330 317 315 313 312 311 310 304 302 297 296 288 287 284 282 272 270 263 261 257 255 252 250 247 245 241 239 216 215 212 211 192 190 186 184 181 179 176 174 170 168 161 159 149 147 143 142 138 137 136 135 129 127 122 121 120 119 116 114 101 99 97 96 91 90 87 86 85 83 79 77 66 64 58 57 71 34 19 35 19 38 34 23 22 84 7 31 
CALL[ ]	/* CallFunction */";
};
width = 2916;
}
);
note = logo;
},
{
glyphname = t0163.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,135,o),
(243,163,o),
(238,196,o),
(238,214,qs),
(238,404,l),
(393,404,l),
(393,527,l),
(238,527,l),
(238,671,l),
(97,671,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,181,ls),
(97,137,o),
(118,67,o),
(140,45,qs),
(160,23,o),
(189,10,q),
(156,-109,l),
(167,-108,o),
(198,-108,o),
(212,-109,qs),
(233,-110,o),
(266,-125,o),
(266,-145,qs),
(266,-156,o),
(257,-172,o),
(232,-182,o),
(189,-185,o),
(155,-181,q),
(155,-263,l),
(182,-266,o),
(223,-267,o),
(258,-264,o),
(285,-256,o),
(298,-249,q),
(327,-237,o),
(369,-181,o),
(371,-141,qs),
(373,-88,o),
(309,-36,o),
(260,-43,q),
(271,-7,l),
(285,-7,ls),
(300,-7,o),
(336,-3,o),
(377,8,o),
(412,23,o),
(426,32,q),
(386,139,l),
(371,130,o),
(331,118,o),
(315,118,qs),
(291,118,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 0 6 35 4 2 1 0 34 11 2 4 1 23 1 3 4 22 1 2 3 5 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 8 5 1 4 3 8 4 105 10 1 6 6 7 95 9 1 7 7 22 77 11 1 0 0 1 97 0 1 1 28 77 0 3 3 2 97 0 2 2 31 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 8 5 1 4 3 8 4 105 0 3 0 2 3 2 101 10 1 6 6 7 95 9 1 7 7 22 77 11 1 0 0 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
1 0 50 49 48 47 46 45 44 43 42 41 33 32 31 30 25 24 21 20 10 8 0 55 1 55 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = t0163.alt;
},
{
glyphname = t021b.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,-254,o),
(166,-269,q),
(191,-305,l),
(214,-297,o),
(256,-265,o),
(287,-221,o),
(304,-172,o),
(304,-147,qs),
(304,-131,o),
(297,-101,o),
(279,-77,o),
(253,-63,o),
(234,-63,qs),
(205,-63,o),
(168,-96,o),
(168,-125,qs),
(168,-152,o),
(199,-184,o),
(225,-186,q),
(219,-212,o)
);
},
{
closed = 1;
nodes = (
(260,135,o),
(243,163,o),
(238,196,o),
(238,214,qs),
(238,404,l),
(393,404,l),
(393,527,l),
(238,527,l),
(238,671,l),
(97,671,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,181,ls),
(97,137,o),
(118,67,o),
(140,45,qs),
(164,19,o),
(237,-7,o),
(285,-7,qs),
(300,-7,o),
(336,-3,o),
(377,8,o),
(412,23,o),
(426,32,q),
(386,139,l),
(371,130,o),
(331,118,o),
(315,118,qs),
(291,118,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
23 1 1 3 24 1 2 1 2 76 17 16 2 0 73 0 5 4 5 133 0 0 2 0 134 7 1 3 3 4 95 6 1 4 4 22 77 8 1 1 1 2 97 0 2 2 28 2 78 21 20 45 44 43 42 41 40 39 38 37 36 30 28 20 50 21 50 37 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = t021b.alt;
},
{
glyphname = uni202F;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni202F;
unicode = 8239;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 270;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = a00E2.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,592,l),
(229,592,l),
(289,671,l),
(348,592,l),
(478,592,l),
(328,784,l),
(249,784,l)
);
},
{
closed = 1;
nodes = (
(365,160,o),
(331,124,o),
(285,102,o),
(254,101,qs),
(218,101,o),
(179,132,o),
(179,154,qs),
(178,181,o),
(225,214,o),
(263,220,qs),
(295,226,o),
(364,230,o),
(383,230,q),
(383,206,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(519,334,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,420,o),
(385,380,o),
(382,332,q),
(345,332,o),
(250,326,o),
(206,317,qs),
(171,308,o),
(115,285,o),
(65,244,o),
(37,186,o),
(37,147,qs),
(37,109,o),
(66,50,o),
(114,12,o),
(177,-8,o),
(223,-8,qs),
(267,-8,o),
(355,21,o),
(386,54,q),
(394,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
11 1 2 0 2 133 1 1 0 9 0 133 0 8 7 6 7 8 6 128 0 6 0 3 4 6 3 105 0 7 7 9 97 0 9 9 29 77 0 4 4 5 97 10 1 5 5 30 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
11 1 2 0 2 133 1 1 0 9 0 133 0 8 7 6 7 8 6 128 0 6 0 3 4 6 3 105 0 7 7 9 97 0 9 9 29 77 0 10 10 21 77 0 4 4 5 97 0 5 5 30 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
0 0 61 60 52 50 46 45 41 39 37 35 25 23 17 15 9 7 0 6 0 6 18 17 12 7 24 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = a00E2.alt;
},
{
glyphname = a0103.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,678,o),
(489,761,q),
(365,761,l),
(359,731,o),
(320,700,o),
(291,700,qs),
(262,700,o),
(222,731,o),
(215,761,q),
(92,761,l),
(101,678,o),
(209,598,o),
(291,598,qs),
(372,598,o)
);
},
{
closed = 1;
nodes = (
(365,160,o),
(331,124,o),
(285,102,o),
(254,101,qs),
(218,101,o),
(179,132,o),
(179,154,qs),
(178,181,o),
(225,214,o),
(263,220,qs),
(295,226,o),
(364,230,o),
(383,230,q),
(383,206,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(519,334,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,420,o),
(385,380,o),
(382,332,q),
(345,332,o),
(250,326,o),
(206,317,qs),
(171,308,o),
(115,285,o),
(65,244,o),
(37,186,o),
(37,147,qs),
(37,109,o),
(66,50,o),
(114,12,o),
(177,-8,o),
(223,-8,qs),
(267,-8,o),
(355,21,o),
(386,54,q),
(394,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
3 1 1 2 2 1 112 0 9 8 7 8 9 7 128 0 7 0 4 5 7 4 105 12 1 0 0 2 97 0 2 2 20 77 0 8 8 10 97 0 10 10 29 77 0 5 5 6 97 11 1 6 6 30 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
3 1 1 2 1 133 0 9 8 7 8 9 7 128 0 7 0 4 5 7 4 105 12 1 0 0 2 97 0 2 2 20 77 0 8 8 10 97 0 10 10 29 77 0 5 5 6 97 11 1 6 6 30 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
3 1 1 2 1 133 0 9 8 7 8 9 7 128 0 7 0 4 5 7 4 105 12 1 0 0 2 97 0 2 2 20 77 0 8 8 10 97 0 10 10 29 77 0 11 11 21 77 0 5 5 6 97 0 6 6 30 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
1 0 68 67 59 57 53 52 48 46 44 42 32 30 24 22 16 14 11 10 8 6 4 3 0 13 1 13 13 7 22 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = a0103.alt;
},
{
glyphname = a00E4.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,701,o),
(78,663,qs),
(78,622,o),
(126,577,o),
(166,577,qs),
(204,577,o),
(253,622,o),
(253,663,qs),
(253,701,o),
(204,746,o),
(166,746,qs),
(126,746,o)
);
},
{
closed = 1;
nodes = (
(322,701,o),
(322,663,qs),
(322,622,o),
(371,577,o),
(409,577,qs),
(447,577,o),
(496,622,o),
(496,663,qs),
(496,701,o),
(447,746,o),
(409,746,qs),
(371,746,o)
);
},
{
closed = 1;
nodes = (
(365,160,o),
(331,124,o),
(285,102,o),
(254,101,qs),
(218,101,o),
(179,132,o),
(179,154,qs),
(178,181,o),
(225,214,o),
(263,220,qs),
(295,226,o),
(364,230,o),
(383,230,q),
(383,206,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(519,334,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,420,o),
(385,380,o),
(382,332,q),
(345,332,o),
(250,326,o),
(206,317,qs),
(171,308,o),
(115,285,o),
(65,244,o),
(37,186,o),
(37,147,qs),
(37,109,o),
(66,50,o),
(114,12,o),
(177,-8,o),
(223,-8,qs),
(267,-8,o),
(355,21,o),
(386,54,q),
(394,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 9 8 7 8 9 7 128 13 2 12 3 0 3 1 1 10 0 1 105 0 7 0 4 5 7 4 105 0 8 8 10 97 0 10 10 29 77 0 5 5 6 97 11 1 6 6 30 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 9 8 7 8 9 7 128 13 2 12 3 0 3 1 1 10 0 1 105 0 7 0 4 5 7 4 105 0 8 8 10 97 0 10 10 29 77 0 11 11 21 77 0 5 5 6 97 0 6 6 30 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
13 12 1 0 78 77 69 67 63 62 58 56 54 52 42 40 34 32 26 24 19 17 12 23 13 23 7 5 0 11 1 11 14 7 22 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = a00E4.alt;
},
{
glyphname = a2_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,0,l),
(583,527,l),
(455,527,l),
(447,481,l),
(428,504,o),
(353,538,o),
(293,538,qs),
(238,538,o),
(138,500,o),
(103,461,qs),
(35,388,o),
(35,259,qs),
(35,204,o),
(67,98,o),
(105,59,qs),
(137,26,o),
(228,-8,o),
(284,-8,qs),
(327,-8,o),
(407,16,o),
(441,49,q),
(448,0,l)
);
},
{
closed = 1;
nodes = (
(227,139,o),
(193,179,o),
(176,232,o),
(176,265,qs),
(176,296,o),
(192,349,o),
(225,390,o),
(276,412,o),
(309,412,qs),
(371,411,o),
(440,329,o),
(440,263,qs),
(440,232,o),
(423,180,o),
(390,140,o),
(341,117,o),
(310,117,qs),
(277,117,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
17 1 5 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
17 1 5 2 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 5 1 97 2 1 1 1 29 77 6 1 4 4 0 97 3 1 0 0 30 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 22 77 0 5 5 1 97 0 1 1 29 77 6 1 4 4 0 97 3 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 22 77 0 5 5 1 97 0 1 1 29 77 0 3 3 21 77 6 1 4 4 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
23 22 31 29 22 39 23 39 17 19 41 34 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = a2_alt;
},
{
glyphname = logom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(784,529,qs),
(776,537,o),
(768,545,o),
(760,548,o),
(746,548,o),
(731,548,q),
(697,575,l),
(692,580,o),
(685,580,qs),
(646,580,l),
(641,592,o),
(628,592,qs),
(620,592,o),
(612,585,o),
(607,580,q),
(552,580,ls),
(545,580,o),
(538,574,o),
(533,569,q),
(533,590,l),
(560,616,l),
(696,616,l),
(715,597,ls),
(721,591,o),
(729,591,qs),
(737,591,o),
(751,592,o),
(756,597,qs),
(763,604,o),
(780,624,o),
(770,636,q),
(780,650,o),
(769,663,qs),
(762,670,o),
(750,681,o),
(742,681,qs),
(732,681,o),
(723,680,o),
(715,676,o),
(706,666,o),
(696,656,q),
(660,656,l),
(660,684,l),
(672,689,o),
(686,711,o),
(686,725,qs),
(686,763,ls),
(686,771,o),
(674,783,o),
(666,783,qs),
(615,783,ls),
(607,783,o),
(595,771,o),
(595,763,qs),
(595,725,ls),
(595,711,o),
(609,689,o),
(621,684,q),
(621,656,l),
(596,656,l),
(598,663,o),
(592,676,o),
(582,682,o),
(568,681,o),
(563,675,q),
(526,639,l),
(516,647,o),
(494,636,o),
(494,623,qs),
(494,467,l),
(432,404,l),
(432,476,l),
(464,508,ls),
(473,517,o),
(464,542,o),
(450,542,qs),
(443,542,o),
(436,536,o),
(432,531,q),
(432,615,l),
(528,711,ls),
(533,717,o),
(533,733,o),
(533,743,q),
(539,743,ls),
(549,743,o),
(558,755,o),
(558,770,o),
(549,783,o),
(539,783,qs),
(533,783,l),
(533,788,ls),
(533,798,o),
(521,807,o),
(506,807,o),
(494,798,o),
(494,788,qs),
(494,783,l),
(488,783,ls),
(478,783,o),
(468,770,o),
(468,755,o),
(478,743,o),
(488,743,qs),
(494,743,l),
(494,733,l),
(432,671,l),
(432,792,ls),
(432,793,o),
(448,810,o),
(468,830,o),
(486,848,o),
(489,851,qs),
(495,856,o),
(495,873,o),
(489,879,qs),
(485,883,o),
(475,894,o),
(470,896,q),
(470,906,o),
(470,923,o),
(464,929,qs),
(460,933,o),
(452,941,o),
(443,947,o),
(433,949,o),
(427,945,q),
(423,950,o),
(405,952,o),
(397,945,q),
(383,954,o),
(373,942,qs),
(365,934,o),
(357,926,o),
(354,919,o),
(354,908,o),
(354,896,q),
(349,894,o),
(339,883,o),
(335,879,qs),
(329,873,o),
(329,856,o),
(335,851,qs),
(338,848,o),
(356,830,o),
(376,810,o),
(392,793,o),
(392,792,qs),
(392,671,l),
(330,733,l),
(330,743,l),
(336,743,ls),
(346,743,o),
(355,755,o),
(355,770,o),
(346,783,o),
(336,783,qs),
(330,783,l),
(330,788,ls),
(330,798,o),
(318,807,o),
(303,807,o),
(291,798,o),
(291,788,qs),
(291,783,l),
(285,783,ls),
(275,783,o),
(265,770,o),
(265,755,o),
(275,743,o),
(285,743,qs),
(291,743,l),
(291,733,o),
(291,717,o),
(297,711,qs),
(392,615,l),
(392,531,l),
(388,536,ls),
(381,543,o),
(365,541,o),
(355,530,o),
(353,515,o),
(360,508,qs),
(392,476,l),
(392,404,l),
(330,467,l),
(330,623,ls),
(330,631,o),
(318,643,o),
(310,643,qs),
(305,643,o),
(301,641,qs),
(299,640,o),
(298,639,q),
(261,675,l),
(256,681,o),
(242,682,o),
(232,676,o),
(226,663,o),
(228,656,q),
(203,656,l),
(203,684,l),
(215,689,o),
(229,711,o),
(229,725,qs),
(229,763,ls),
(229,771,o),
(217,783,o),
(209,783,qs),
(158,783,ls),
(150,783,o),
(138,771,o),
(138,763,qs),
(138,725,ls),
(138,711,o),
(152,689,o),
(164,684,q),
(164,656,l),
(128,656,l),
(109,675,ls),
(103,681,o),
(95,681,qs),
(87,681,o),
(73,681,o),
(68,675,qs),
(65,672,o),
(55,663,o),
(49,654,o),
(49,642,o),
(54,636,q),
(44,622,o),
(55,609,qs),
(62,602,o),
(74,591,o),
(82,591,qs),
(92,591,o),
(101,591,o),
(109,596,o),
(118,606,o),
(128,616,q),
(264,616,l),
(291,590,l),
(291,569,l),
(286,574,o),
(279,580,o),
(272,580,qs),
(217,580,l),
(210,587,ls),
(202,594,o),
(182,590,o),
(178,580,q),
(139,580,ls),
(132,580,o),
(127,575,q),
(93,548,l),
(79,548,o),
(65,548,o),
(56,545,o),
(48,537,o),
(40,529,qs),
(32,521,o),
(38,498,o),
(50,496,q),
(50,488,o),
(61,477,o),
(69,477,q),
(71,465,o),
(94,459,o),
(102,467,qs),
(110,475,o),
(118,483,o),
(121,492,o),
(121,506,o),
(121,520,q),
(146,540,l),
(264,540,l),
(291,514,l),
(291,478,l),
(145,478,ls),
(137,478,o),
(131,472,qs),
(106,447,ls),
(97,437,o),
(107,413,o),
(120,413,qs),
(158,413,ls),
(166,413,o),
(172,419,qs),
(192,439,l),
(302,439,l),
(397,344,l),
(403,336,o),
(420,336,o),
(427,344,qs),
(522,439,l),
(632,439,l),
(644,427,o),
(654,416,o),
(665,412,o),
(684,413,o),
(704,413,qs),
(717,413,o),
(727,438,o),
(718,447,qs),
(693,472,ls),
(687,478,o),
(679,478,qs),
(533,478,l),
(533,514,l),
(560,540,l),
(678,540,l),
(703,520,l),
(703,506,o),
(703,492,o),
(706,483,o),
(714,475,o),
(722,467,qs),
(730,459,o),
(753,466,o),
(755,477,q),
(763,477,o),
(774,488,o),
(774,496,q),
(784,499,o),
(789,508,qs),
(794,520,o)
);
},
{
closed = 1;
nodes = (
(263,235,o),
(267,238,o),
(269,236,qs),
(389,116,ls),
(398,108,o),
(424,108,o),
(433,116,qs),
(552,236,ls),
(554,238,o),
(559,235,o),
(559,233,qs),
(559,13,ls),
(559,0,o),
(572,0,qs),
(633,0,ls),
(645,0,o),
(645,13,qs),
(645,364,ls),
(645,377,o),
(633,377,qs),
(572,377,ls),
(561,377,o),
(550,368,q),
(417,235,ls),
(411,229,o),
(404,235,qs),
(272,368,l),
(261,377,o),
(250,377,qs),
(189,377,ls),
(176,377,o),
(176,364,qs),
(176,13,ls),
(176,0,o),
(189,0,qs),
(250,0,ls),
(263,0,o),
(263,13,qs),
(263,233,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 80 values pushed */
271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 15 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 11 76 233 228 206 198 195 177 166 161 8 16 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 15 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 37 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 113 values pushed */
38 37 36 11 4 10 13 9 1 10 114 8 1 0 9 1 3 0 114 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 26 25 22 21 20 7 16 28 24 23 3 19 14 16 19 105 32 30 18 17 4 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 117 values pushed */
26 1 21 16 21 133 38 37 36 11 4 10 13 9 1 10 114 8 1 0 9 1 3 0 114 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 18 17 4 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 119 values pushed */
26 1 21 16 21 133 38 37 36 11 4 10 13 9 13 10 9 128 8 1 0 9 1 9 0 1 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 18 17 4 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 126 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 38 37 36 11 4 10 13 9 13 10 9 128 8 1 0 9 1 9 0 1 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 133 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 12 37 13 128 38 36 11 3 10 13 9 13 10 9 128 8 1 0 9 1 9 0 1 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 137 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 12 37 13 128 38 36 11 3 10 13 9 13 10 9 128 8 1 0 29 1 29 0 1 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 1 9 9 29 77 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 138 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 12 37 13 128 38 36 11 3 10 13 9 13 10 9 128 8 1 0 29 1 29 0 1 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 39 1 9 9 29 77 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 140 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 12 37 13 128 38 36 11 3 10 13 9 13 10 9 128 39 1 9 29 13 9 29 126 8 1 0 29 1 29 0 1 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 84 values pushed */
359 358 351 348 345 342 336 333 330 327 321 319 316 315 314 312 310 308 304 303 301 299 289 288 284 283 275 273 266 265 250 248 240 239 236 235 231 230 226 225 222 220 173 172 169 168 164 163 159 158 155 153 136 134 125 124 116 114 107 106 104 101 90 88 85 84 79 78 74 72 70 68 18 36 50 18 18 19 53 18 30 45 7 31 
CALL[ ]	/* CallFunction */";
};
width = 825;
}
);
note = logom;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,496,l),
(360,496,l),
(360,668,l),
(243,668,l),
(243,496,l),
(62,496,l),
(62,378,l),
(243,378,l),
(243,234,l),
(360,234,l),
(360,378,l),
(541,378,l)
);
},
{
closed = 1;
nodes = (
(541,84,l),
(541,202,l),
(62,202,l),
(62,84,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
4 1 2 8 5 2 1 0 2 1 103 0 3 0 0 6 3 0 103 0 6 7 7 6 87 0 6 6 7 95 0 7 6 7 79 0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,531,o),
(304,572,o),
(326,622,o),
(326,653,qs),
(326,713,o),
(250,776,o),
(193,776,qs),
(127,776,o),
(52,710,o),
(50,643,q),
(144,643,l),
(144,665,o),
(169,684,o),
(189,684,qs),
(229,684,o),
(227,643,qs),
(227,631,o),
(210,605,o),
(188,581,o),
(163,559,o),
(154,552,qs),
(53,465,l),
(53,385,l),
(322,385,l),
(322,477,l),
(204,477,l),
(226,495,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 2 0 2 3 114 0 2 2 4 97 0 4 4 58 77 0 0 0 1 95 0 1 1 59 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 2 0 2 3 0 128 0 2 2 4 97 0 4 4 58 77 0 0 0 1 95 0 1 1 59 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
34 18 40 17 16 5 9 27 
CALL[ ]	/* CallFunction */";
};
width = 376;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,648,o),
(338,668,qs),
(338,697,o),
(316,738,o),
(279,764,o),
(231,776,o),
(205,776,qs),
(173,776,o),
(120,761,o),
(81,729,o),
(60,680,o),
(61,646,q),
(159,646,l),
(160,685,o),
(202,685,qs),
(218,685,o),
(241,669,o),
(240,652,qs),
(239,635,o),
(211,621,o),
(197,621,qs),
(158,621,l),
(158,541,l),
(210,541,ls),
(225,541,o),
(252,529,o),
(252,510,qs),
(252,489,o),
(221,474,o),
(204,474,qs),
(183,474,o),
(150,491,o),
(148,514,q),
(50,514,l),
(52,445,o),
(140,382,o),
(205,382,qs),
(234,382,o),
(286,396,o),
(326,426,o),
(351,471,o),
(352,503,qs),
(353,531,o),
(332,581,o),
(307,596,q),
(322,610,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 2 1 114 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 17 36 33 36 34 18 39 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(495,412,l),
(495,495,l),
(57,677,l),
(57,551,l),
(315,452,l),
(57,350,l),
(57,225,l)
);
},
{
closed = 1;
nodes = (
(495,210,l),
(57,210,l),
(57,92,l),
(495,92,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 7 7 7 10 7 10 24 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,490,l),
(57,407,l),
(495,225,l),
(495,351,l),
(237,452,l),
(495,553,l),
(495,677,l)
);
},
{
closed = 1;
nodes = (
(495,210,l),
(57,210,l),
(57,92,l),
(495,92,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 7 7 7 10 7 10 24 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,294,l),
(57,294,l),
(57,176,l),
(136,176,l),
(57,0,l),
(190,0,l),
(269,176,l),
(506,176,l),
(506,294,l),
(322,294,l),
(382,428,l),
(506,428,l),
(506,546,l),
(435,546,l),
(506,703,l),
(373,703,l),
(303,546,l),
(57,546,l),
(57,428,l),
(249,428,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 1 0 1 133 0 6 5 6 134 2 1 0 10 9 2 3 4 0 3 103 8 1 4 5 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,169,o),
(194,193,o),
(199,215,o),
(212,230,o),
(224,230,qs),
(239,230,o),
(276,200,o),
(325,162,o),
(388,131,o),
(429,131,qs),
(477,131,o),
(539,160,o),
(575,209,o),
(589,275,o),
(589,312,q),
(453,312,l),
(453,302,o),
(453,277,o),
(448,255,o),
(436,240,o),
(424,240,qs),
(410,240,o),
(373,271,o),
(324,308,o),
(261,340,o),
(220,340,qs),
(172,340,o),
(108,311,o),
(71,261,o),
(57,196,o),
(58,159,q),
(194,159,l)
);
},
{
closed = 1;
nodes = (
(194,401,o),
(194,426,o),
(199,448,o),
(212,463,o),
(224,463,qs),
(239,463,o),
(276,432,o),
(325,395,o),
(388,363,o),
(429,363,qs),
(477,363,o),
(539,392,o),
(575,441,o),
(589,507,o),
(589,544,q),
(453,544,l),
(453,534,o),
(453,509,o),
(448,488,o),
(436,473,o),
(424,473,qs),
(410,473,o),
(373,503,o),
(324,541,o),
(261,572,o),
(220,572,qs),
(172,572,o),
(108,543,o),
(71,494,o),
(57,428,o),
(58,391,q),
(194,391,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
0 8 6 7 7 8 114 13 1 11 10 9 10 11 114 0 2 0 1 1 2 114 12 1 5 4 3 4 5 114 0 6 0 10 11 6 10 105 0 7 0 9 0 7 9 106 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 8 6 7 6 8 7 128 13 1 11 10 9 10 11 9 128 0 2 0 1 0 2 1 128 12 1 5 4 3 4 5 3 128 0 6 0 10 11 6 10 105 0 7 0 9 0 7 9 106 0 1 4 3 1 89 0 0 0 4 5 0 4 105 0 1 1 3 98 0 3 1 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
32 32 0 0 32 63 32 63 59 57 54 52 48 47 43 41 38 36 0 31 0 31 35 36 20 35 36 14 6 27 
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = tab_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,128,l),
(89,0,l),
(569,0,l),
(569,128,l),
(408,128,l),
(408,708,l),
(300,708,l),
(286,682,o),
(241,648,o),
(213,637,qs),
(186,628,o),
(128,621,o),
(99,621,q),
(99,521,l),
(263,521,l),
(263,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 0 3 1 0 103 0 2 2 20 77 5 1 3 3 4 96 0 4 4 21 4 78 17 17 17 21 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = tab_1;
},
{
glyphname = I_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,129,l),
(37,129,l),
(37,0,l),
(586,0,l),
(586,129,l),
(384,129,l),
(384,579,l),
(586,579,l),
(586,708,l),
(37,708,l),
(37,579,l),
(239,579,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
6 5 2 1 1 0 95 0 0 0 20 77 4 1 2 2 3 95 0 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = I_alt;
},
{
glyphname = l_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,173,ls),
(56,83,o),
(101,40,qs),
(124,18,o),
(199,0,o),
(252,0,qs),
(312,0,l),
(312,123,l),
(266,123,ls),
(197,123,o),
(197,191,qs),
(197,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 20 77 0 0 0 1 97 0 1 1 21 1 78 21 33 33 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = l_alt;
},
{
glyphname = l2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,133,o),
(202,159,o),
(197,194,o),
(197,214,qs),
(197,708,l),
(56,708,l),
(56,181,ls),
(56,84,o),
(149,-7,o),
(242,-7,qs),
(277,-7,o),
(351,12,o),
(381,32,q),
(341,139,l),
(327,130,o),
(287,118,o),
(270,118,qs),
(247,118,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 0 2 4 1 1 0 2 76 0 2 2 20 77 3 1 0 0 1 98 0 1 1 28 1 78 1 0 12 11 8 6 0 17 1 17 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = l2_alt;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,675,o),
(90,586,o),
(50,450,o),
(50,356,qs),
(50,261,o),
(89,125,o),
(162,37,o),
(265,-5,o),
(328,-5,qs),
(391,-5,o),
(494,37,o),
(566,125,o),
(606,261,o),
(606,356,qs),
(606,450,o),
(565,586,o),
(492,675,o),
(389,717,o),
(328,717,qs),
(266,717,o)
);
},
{
closed = 1;
nodes = (
(192,231,o),
(192,356,qs),
(192,480,o),
(263,589,o),
(328,589,qs),
(392,589,o),
(464,480,o),
(464,356,qs),
(464,231,o),
(392,123,o),
(328,123,qs),
(263,123,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 0 97 4 1 0 0 27 77 5 1 2 2 1 97 0 1 1 28 1 78 21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,708,l),
(290,688,o),
(252,655,o),
(231,644,qs),
(207,632,o),
(152,621,o),
(120,621,q),
(120,521,l),
(264,521,l),
(264,0,l),
(410,0,l),
(410,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 20 77 0 0 0 21 0 78 21 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,0,l),
(563,0,l),
(563,128,l),
(286,128,l),
(316,154,o),
(383,208,o),
(420,240,qs),
(439,257,o),
(470,285,o),
(497,313,o),
(524,346,o),
(536,366,qs),
(555,395,o),
(571,463,o),
(571,501,qs),
(571,553,o),
(537,630,o),
(509,656,qs),
(444,718,o),
(331,716,qs),
(289,716,o),
(213,699,o),
(181,680,qs),
(137,654,o),
(84,567,o),
(82,508,q),
(217,508,l),
(222,546,o),
(277,586,o),
(322,587,qs),
(372,588,o),
(432,536,o),
(430,483,qs),
(429,450,o),
(396,396,o),
(373,373,qs),
(350,348,o),
(301,302,o),
(277,282,qs),
(87,118,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
39 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 27 77 0 3 3 4 95 0 4 4 21 4 78 17 31 37 18 40 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,550,o),
(284,589,o),
(322,589,qs),
(343,589,o),
(381,581,o),
(409,562,o),
(425,529,o),
(425,505,qs),
(425,485,o),
(409,456,o),
(397,445,qs),
(380,431,o),
(338,418,o),
(312,418,qs),
(264,418,l),
(264,300,l),
(335,300,ls),
(358,300,o),
(401,293,o),
(419,281,qs),
(433,273,o),
(450,239,o),
(450,219,qs),
(450,192,o),
(430,155,o),
(396,133,o),
(352,123,o),
(328,123,qs),
(307,123,o),
(267,130,o),
(232,149,o),
(205,181,o),
(198,206,q),
(55,206,l),
(71,95,o),
(215,-7,o),
(328,-7,qs),
(379,-7,o),
(473,17,o),
(545,68,o),
(591,148,o),
(593,206,qs),
(595,269,o),
(541,363,o),
(480,383,q),
(522,406,o),
(566,486,o),
(566,530,qs),
(566,582,o),
(525,654,o),
(458,698,o),
(377,717,o),
(332,717,qs),
(276,717,o),
(187,692,o),
(120,638,o),
(80,562,o),
(75,508,q),
(217,508,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
13 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 103 0 6 6 0 97 0 0 0 27 77 0 3 3 1 97 0 1 1 28 1 78 0 0 0 58 0 58 41 33 41 36 18 46 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,708,l),
(53,233,l),
(53,132,l),
(399,132,l),
(399,0,l),
(541,0,l),
(541,132,l),
(621,132,l),
(621,257,l),
(541,257,l),
(541,708,l)
);
},
{
closed = 1;
nodes = (
(399,257,l),
(218,257,l),
(399,541,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
13 1 0 4 8 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 0 4 4 20 77 0 2 2 21 2 78 17 18 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE004;
unicode = 57348;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,323,o),
(295,345,o),
(326,346,qs),
(378,348,o),
(446,290,o),
(445,233,qs),
(444,175,o),
(376,121,o),
(323,123,qs),
(286,125,o),
(227,163,o),
(218,206,q),
(75,206,l),
(87,93,o),
(217,-7,o),
(326,-7,qs),
(386,-7,o),
(479,25,o),
(516,57,qs),
(551,89,o),
(591,181,o),
(591,239,qs),
(591,291,o),
(559,374,o),
(499,434,o),
(414,466,o),
(362,467,qs),
(322,468,o),
(261,453,o),
(227,436,q),
(247,582,l),
(560,582,l),
(560,708,l),
(130,708,l),
(85,304,l),
(222,304,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 35 0 35 36 34 18 41 35 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE005;
unicode = 57349;
},
{
glyphname = uniE006;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,143,o),
(223,176,o),
(210,218,o),
(212,241,qs),
(216,286,o),
(277,337,o),
(322,338,qs),
(374,339,o),
(436,278,o),
(434,224,qs),
(433,201,o),
(415,162,o),
(385,135,o),
(343,121,o),
(319,122,qs),
(292,123,o)
);
},
{
closed = 1;
nodes = (
(573,569,o),
(534,641,o),
(504,665,qs),
(472,692,o),
(386,717,o),
(335,716,qs),
(268,715,o),
(169,665,o),
(136,623,qs),
(90,569,o),
(51,415,o),
(52,338,qs),
(52,274,o),
(79,152,o),
(142,56,o),
(244,-4,o),
(318,-5,qs),
(372,-7,o),
(464,25,o),
(499,56,qs),
(533,86,o),
(577,178,o),
(577,232,qs),
(576,339,o),
(457,461,o),
(348,462,qs),
(303,462,o),
(220,430,o),
(188,398,q),
(187,432,o),
(206,499,o),
(243,553,o),
(299,587,o),
(335,588,qs),
(370,589,o),
(428,557,o),
(437,520,q),
(578,520,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
24 1 1 3 1 76 8 1 6 2 3 2 6 3 128 0 3 0 1 0 3 1 105 0 2 2 5 97 0 5 5 27 77 7 1 0 0 4 97 0 4 4 28 4 78 16 16 1 0 16 53 16 53 48 46 37 35 28 26 20 18 9 7 0 15 1 15 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE006;
unicode = 57350;
},
{
glyphname = uniE007;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,600,l),
(584,708,l),
(91,708,l),
(91,579,l),
(419,579,l),
(159,0,l),
(321,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE007;
unicode = 57351;
},
{
glyphname = uniE008;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,357,o),
(479,380,q),
(521,402,o),
(566,482,o),
(566,525,qs),
(566,577,o),
(528,649,o),
(463,695,o),
(378,717,o),
(331,717,qs),
(284,717,o),
(197,697,o),
(131,650,o),
(92,577,o),
(92,525,qs),
(92,482,o),
(136,402,o),
(179,380,q),
(117,357,o),
(64,261,o),
(66,199,qs),
(68,143,o),
(114,65,o),
(187,15,o),
(280,-8,o),
(330,-8,qs),
(379,-8,o),
(472,15,o),
(545,65,o),
(590,144,o),
(592,199,qs),
(594,261,o)
);
},
{
closed = 1;
nodes = (
(384,583,o),
(410,562,o),
(425,529,o),
(425,507,qs),
(424,462,o),
(371,419,o),
(329,419,qs),
(287,419,o),
(233,462,o),
(232,507,qs),
(232,529,o),
(247,562,o),
(274,583,o),
(309,593,o),
(329,593,qs),
(348,593,o)
);
},
{
closed = 1;
nodes = (
(427,150,o),
(394,127,o),
(351,117,o),
(329,117,qs),
(307,117,o),
(264,127,o),
(230,150,o),
(209,187,o),
(209,214,qs),
(209,240,o),
(230,277,o),
(263,300,o),
(306,311,o),
(328,311,qs),
(351,311,o),
(394,300,o),
(428,277,o),
(448,241,o),
(448,214,qs),
(448,187,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
29 13 2 4 3 1 76 0 3 0 4 5 3 4 105 6 1 2 2 1 97 0 1 1 27 77 0 5 5 0 97 0 0 0 30 0 78 33 32 64 62 54 52 41 39 32 47 33 47 46 36 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE008;
unicode = 57352;
},
{
glyphname = uniE009;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,566,o),
(431,533,o),
(444,490,o),
(443,468,qs),
(440,423,o),
(378,371,o),
(333,371,qs),
(308,371,o),
(266,386,o),
(236,415,o),
(219,457,o),
(220,484,qs),
(222,535,o),
(286,589,o),
(335,587,qs),
(362,587,o)
);
},
{
closed = 1;
nodes = (
(87,141,o),
(128,71,o),
(157,47,qs),
(191,20,o),
(281,-8,o),
(332,-7,qs),
(420,-5,o),
(531,73,o),
(562,135,qs),
(588,186,o),
(607,306,o),
(605,368,qs),
(603,440,o),
(570,570,o),
(531,620,qs),
(499,663,o),
(402,713,o),
(336,714,qs),
(283,714,o),
(190,683,o),
(120,623,o),
(79,536,o),
(78,481,qs),
(77,427,o),
(109,341,o),
(169,281,o),
(256,248,o),
(309,247,qs),
(354,247,o),
(438,278,o),
(469,311,q),
(471,284,o),
(455,208,o),
(435,180,qs),
(418,154,o),
(367,122,o),
(329,121,qs),
(294,120,o),
(232,153,o),
(223,189,q),
(81,189,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
25 1 3 1 1 76 8 1 6 3 2 3 6 2 128 0 1 0 3 6 1 3 105 7 1 0 0 4 97 0 4 4 27 77 0 2 2 5 97 0 5 5 28 5 78 16 16 1 0 16 56 16 56 51 49 39 37 29 27 20 18 9 7 0 15 1 15 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uniE009;
unicode = 57353;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,394,l),
(38,394,l),
(38,276,l),
(472,276,l),
(273,104,l),
(348,9,l),
(708,335,l),
(348,661,l),
(273,566,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 0 1 1 76 8 1 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,276,l),
(708,276,l),
(708,394,l),
(274,394,l),
(473,566,l),
(398,661,l),
(38,335,l),
(398,9,l),
(473,104,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 1 0 1 76 3 2 2 0 74 8 1 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = uni2197;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,447,l),
(94,140,l),
(178,56,l),
(485,363,l),
(466,101,l),
(586,87,l),
(610,572,l),
(125,548,l),
(139,428,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 7 6 5 4 3 2 7 0 73 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = uni2197;
unicode = 8599;
},
{
glyphname = uni2198;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(485,307,l),
(178,614,l),
(94,530,l),
(401,223,l),
(139,242,l),
(125,122,l),
(610,98,l),
(586,583,l),
(466,569,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 7 6 5 4 3 0 7 0 74 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
17 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = uni2198;
unicode = 8600;
},
{
glyphname = uni2196;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,363,l),
(568,56,l),
(652,140,l),
(345,447,l),
(607,428,l),
(621,548,l),
(136,572,l),
(160,87,l),
(280,101,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 7 6 5 4 3 0 7 0 73 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
17 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = uni2196;
unicode = 8598;
},
{
glyphname = uni2199;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(345,223,l),
(652,530,l),
(568,614,l),
(261,307,l),
(280,569,l),
(160,583,l),
(136,98,l),
(621,122,l),
(607,242,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 7 6 5 4 3 2 7 0 74 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 746;
}
);
note = uni2199;
unicode = 8601;
},
{
glyphname = uniE010;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,120,o),
(75,78,qs),
(75,36,o),
(124,-8,o),
(162,-8,qs),
(200,-8,o),
(248,36,o),
(248,78,qs),
(248,120,o),
(200,166,o),
(162,166,qs),
(124,166,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 30 1 78 1 0 7 5 0 11 1 11 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 323;
}
);
note = uniE010;
unicode = 57360;
},
{
glyphname = uniE011;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,-107,o),
(68,-126,q),
(104,-176,l),
(134,-166,o),
(190,-123,o),
(233,-66,o),
(260,1,o),
(260,36,qs),
(260,61,o),
(249,105,o),
(225,139,o),
(188,159,o),
(163,159,qs),
(126,159,o),
(71,115,o),
(71,73,qs),
(71,35,o),
(117,-10,o),
(151,-12,q),
(142,-50,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 97 0 0 0 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = uniE011;
unicode = 57361;
},
{
glyphname = uniE012;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,117,o),
(75,77,qs),
(75,35,o),
(122,-9,o),
(162,-9,qs),
(202,-9,o),
(249,36,o),
(249,77,qs),
(249,117,o),
(203,165,o),
(162,165,qs),
(122,165,o)
);
},
{
closed = 1;
nodes = (
(75,476,o),
(75,436,qs),
(75,394,o),
(122,350,o),
(162,350,qs),
(202,350,o),
(249,395,o),
(249,436,qs),
(249,476,o),
(203,525,o),
(162,525,qs),
(122,525,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 2 97 5 1 2 2 22 77 4 1 0 0 1 97 0 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 2 97 5 1 2 2 22 77 4 1 0 0 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uniE012;
unicode = 57362;
},
{
glyphname = uniE013;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,-104,o),
(69,-125,q),
(105,-175,l),
(137,-164,o),
(194,-119,o),
(236,-60,o),
(262,8,o),
(262,42,qs),
(262,65,o),
(251,108,o),
(228,141,o),
(191,161,o),
(164,161,qs),
(125,161,o),
(72,117,o),
(72,75,qs),
(72,38,o),
(115,-8,o),
(151,-10,q),
(143,-46,o)
);
},
{
closed = 1;
nodes = (
(78,476,o),
(78,436,qs),
(78,394,o),
(125,350,o),
(166,350,qs),
(205,350,o),
(252,395,o),
(252,436,qs),
(252,476,o),
(206,525,o),
(166,525,qs),
(125,525,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 22 77 0 1 1 0 97 0 0 0 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 22 77 0 1 1 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
21 20 27 25 20 31 21 31 36 16 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 337;
}
);
note = uniE013;
unicode = 57363;
},
{
glyphname = uniE014;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,708,l),
(104,440,l),
(212,440,l),
(226,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 20 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = uniE014;
unicode = 57364;
},
{
glyphname = uniE015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,708,l),
(63,440,l),
(171,440,l),
(184,708,l)
);
},
{
closed = 1;
nodes = (
(235,708,l),
(249,440,l),
(357,440,l),
(371,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 20 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 421;
}
);
note = uniE015;
unicode = 57365;
},
{
glyphname = uniE016;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,481,o),
(68,461,q),
(102,414,l),
(132,424,o),
(185,466,o),
(226,522,o),
(250,586,o),
(250,618,qs),
(250,640,o),
(240,680,o),
(218,712,o),
(183,731,o),
(158,731,qs),
(120,731,o),
(71,688,o),
(71,649,qs),
(71,614,o),
(111,571,o),
(145,569,q),
(138,535,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 97 0 1 1 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = uniE016;
unicode = 57366;
},
{
glyphname = uniE017;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,481,o),
(22,461,q),
(56,414,l),
(86,424,o),
(140,466,o),
(181,522,o),
(205,586,o),
(205,618,qs),
(205,640,o),
(194,680,o),
(172,712,o),
(137,731,o),
(112,731,qs),
(74,731,o),
(25,688,o),
(25,649,qs),
(25,614,o),
(65,571,o),
(100,569,q),
(92,535,o)
);
},
{
closed = 1;
nodes = (
(272,481,o),
(243,461,q),
(277,414,l),
(307,424,o),
(361,466,o),
(402,522,o),
(426,586,o),
(426,618,qs),
(426,640,o),
(416,680,o),
(394,712,o),
(359,731,o),
(334,731,qs),
(296,731,o),
(246,688,o),
(246,649,qs),
(246,614,o),
(286,571,o),
(321,569,q),
(313,535,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
37 36 17 16 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 0 1 97 3 1 1 1 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 29 36 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
note = uniE017;
unicode = 57367;
},
{
glyphname = uniE018;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,690,o),
(251,710,q),
(217,758,l),
(187,747,o),
(133,704,o),
(93,649,o),
(69,584,o),
(69,553,qs),
(69,532,o),
(79,491,o),
(101,459,o),
(136,439,o),
(161,439,qs),
(198,439,o),
(248,482,o),
(248,522,qs),
(248,556,o),
(207,599,o),
(173,601,q),
(181,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
17 16 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 326;
}
);
note = uniE018;
unicode = 57368;
},
{
glyphname = uniE019;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(397,690,o),
(426,710,q),
(392,758,l),
(361,747,o),
(307,704,o),
(267,649,o),
(243,584,o),
(243,553,qs),
(243,532,o),
(253,491,o),
(276,459,o),
(311,439,o),
(336,439,qs),
(373,439,o),
(423,482,o),
(423,522,qs),
(423,556,o),
(382,599,o),
(347,601,q),
(355,636,o)
);
},
{
closed = 1;
nodes = (
(176,690,o),
(205,710,q),
(171,758,l),
(140,747,o),
(86,704,o),
(46,649,o),
(22,584,o),
(22,553,qs),
(22,532,o),
(32,491,o),
(54,459,o),
(89,439,o),
(114,439,qs),
(152,439,o),
(202,482,o),
(202,522,qs),
(202,556,o),
(161,599,o),
(126,601,q),
(134,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
37 36 17 16 4 0 74 2 1 0 1 1 0 89 2 1 0 0 1 97 3 1 1 0 1 81 36 29 36 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
note = uniE019;
unicode = 57369;
},
{
glyphname = uniE020;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,-89,o),
(68,-110,q),
(102,-156,l),
(132,-146,o),
(185,-103,o),
(226,-47,o),
(250,17,o),
(250,49,qs),
(250,70,o),
(240,111,o),
(218,142,o),
(183,161,o),
(158,161,qs),
(120,161,o),
(71,118,o),
(71,80,qs),
(71,45,o),
(111,1,o),
(145,-1,q),
(138,-36,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
17 16 2 0 73 0 1 1 0 97 0 0 0 21 0 78 36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 326;
}
);
note = uniE020;
unicode = 57376;
},
{
glyphname = uniE021;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,-89,o),
(22,-110,q),
(56,-156,l),
(86,-146,o),
(140,-103,o),
(181,-47,o),
(205,17,o),
(205,49,qs),
(205,70,o),
(194,111,o),
(172,142,o),
(137,161,o),
(112,161,qs),
(74,161,o),
(25,118,o),
(25,80,qs),
(25,45,o),
(65,1,o),
(100,-1,q),
(92,-36,o)
);
},
{
closed = 1;
nodes = (
(272,-89,o),
(243,-110,q),
(277,-156,l),
(307,-146,o),
(361,-103,o),
(402,-47,o),
(426,17,o),
(426,49,qs),
(426,70,o),
(416,111,o),
(394,142,o),
(359,161,o),
(334,161,qs),
(296,161,o),
(246,118,o),
(246,80,qs),
(246,45,o),
(286,1,o),
(321,-1,q),
(313,-36,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
37 36 17 16 4 0 73 3 1 1 1 0 97 2 1 0 0 21 0 78 36 29 36 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
note = uniE021;
unicode = 57377;
},
{
glyphname = uniE022;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,198,o),
(75,158,qs),
(75,116,o),
(122,72,o),
(162,72,qs),
(202,72,o),
(249,117,o),
(249,158,qs),
(249,198,o),
(203,246,o),
(162,246,qs),
(122,246,o)
);
},
{
closed = 1;
nodes = (
(75,557,o),
(75,517,qs),
(75,475,o),
(122,431,o),
(162,431,qs),
(202,431,o),
(249,476,o),
(249,517,qs),
(249,557,o),
(203,606,o),
(162,606,qs),
(122,606,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
5 1 2 0 3 0 2 3 105 4 1 0 1 1 0 89 4 1 0 0 1 97 0 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uniE022;
unicode = 57378;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,0,l),
(220,466,ls),
(220,497,o),
(241,543,o),
(275,573,o),
(321,588,o),
(346,588,qs),
(362,588,o),
(395,582,o),
(425,568,o),
(450,544,o),
(457,527,q),
(312,337,l),
(422,296,ls),
(450,285,o),
(498,262,o),
(534,235,o),
(554,203,o),
(554,182,qs),
(554,156,o),
(520,117,o),
(488,117,qs),
(423,117,o),
(414,170,q),
(279,170,l),
(284,87,o),
(400,-8,o),
(494,-8,qs),
(542,-8,o),
(619,19,o),
(673,67,o),
(699,135,o),
(699,176,qs),
(699,227,o),
(660,299,o),
(626,325,qs),
(597,348,o),
(525,379,o),
(489,394,q),
(614,540,l),
(604,583,o),
(552,649,o),
(480,694,o),
(393,717,o),
(348,717,qs),
(291,717,o),
(191,688,o),
(117,631,o),
(75,545,o),
(75,488,qs),
(75,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
38 37 11 10 4 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 4 3 3 2 114 0 4 4 0 97 0 0 0 46 77 0 3 3 1 98 5 1 1 1 50 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 3 3 1 98 5 1 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 5 5 39 77 0 3 3 1 98 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
21 45 33 18 47 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,414,o),
(362,453,qs),
(362,493,o),
(315,537,o),
(274,537,qs),
(233,537,o),
(187,492,o),
(187,453,qs),
(187,414,o),
(233,366,o),
(274,366,qs),
(315,366,o)
);
},
{
closed = 1;
nodes = (
(214,275,o),
(193,229,o),
(160,188,o),
(120,151,o),
(100,130,qs),
(73,100,o),
(44,38,o),
(44,-3,qs),
(43,-58,o),
(84,-133,o),
(118,-155,qs),
(148,-175,o),
(225,-189,o),
(267,-189,qs),
(327,-188,o),
(403,-161,o),
(430,-141,qs),
(466,-114,o),
(504,-30,o),
(503,15,q),
(367,15,l),
(366,-9,o),
(348,-39,o),
(321,-56,o),
(286,-62,o),
(267,-61,qs),
(231,-60,o),
(184,-26,o),
(185,10,qs),
(186,31,o),
(207,68,o),
(239,102,o),
(274,134,o),
(289,150,qs),
(303,165,o),
(327,194,o),
(342,230,o),
(347,275,o),
(342,305,q),
(213,305,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 0 3 2 126 0 2 0 4 2 4 102 6 1 0 0 1 97 0 1 1 49 0 78 12 12 1 0 12 51 12 51 38 36 31 30 26 24 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,414,o),
(239,453,qs),
(239,493,o),
(192,537,o),
(152,537,qs),
(112,537,o),
(65,492,o),
(65,453,qs),
(65,414,o),
(111,366,o),
(152,366,qs),
(192,366,o)
);
},
{
closed = 1;
nodes = (
(226,-180,l),
(213,298,l),
(91,298,l),
(78,-180,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 2 3 99 4 1 0 0 1 97 0 1 1 49 0 78 1 0 15 14 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,441,o),
(245,431,q),
(320,431,l),
(320,599,ls),
(320,669,o),
(256,748,o),
(184,748,qs),
(134,748,o),
(56,700,o),
(48,646,q),
(134,646,l),
(135,658,o),
(162,674,o),
(185,674,qs),
(236,673,o),
(238,620,q),
(174,620,ls),
(150,620,o),
(102,613,o),
(64,592,o),
(40,555,o),
(40,525,qs),
(40,477,o),
(101,427,o),
(146,427,qs),
(175,427,o),
(224,446,o),
(242,468,q),
(243,459,o)
);
},
{
closed = 1;
nodes = (
(198,497,o),
(167,497,qs),
(149,497,o),
(124,513,o),
(124,530,qs),
(124,540,o),
(135,554,o),
(152,560,o),
(171,561,o),
(180,561,qs),
(239,561,l),
(237,529,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 1 5 7 1 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 1 0 7 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
0 1 5 7 1 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 3 2 1 2 3 1 128 0 5 7 0 7 5 0 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 5 0 7 89 0 7 7 0 97 0 0 7 0 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 0 0 7 89 0 7 7 0 97 5 1 0 7 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 2 1 2 3 1 128 0 5 7 0 7 5 0 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 5 0 7 89 0 7 7 0 97 0 0 7 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
37 51 19 34 18 33 38 34 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 360;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(112,624,l),
(469,624,l),
(469,738,l),
(112,738,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 581;
}
);
note = macron;
unicode = 175;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,707,ls),
(191,707,o),
(157,695,qs),
(139,689,o),
(108,672,o),
(94,660,qs),
(64,635,o),
(48,600,qs),
(30,564,o),
(30,518,qs),
(30,463,o),
(48,424,qs),
(66,385,o),
(96,361,qs),
(126,337,o),
(164,325,qs),
(182,320,o),
(219,315,o),
(239,314,qs),
(251,314,l),
(251,0,l),
(385,0,l),
(385,584,l),
(479,584,l),
(479,0,l),
(613,0,l),
(613,584,l),
(709,584,l),
(709,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 4 0 1 0 4 1 128 2 1 0 0 5 95 0 5 5 38 77 3 1 1 1 39 1 78 28 26 33 17 17 17 16 6 8 27 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,394,o),
(57,359,qs),
(57,322,o),
(102,278,o),
(139,278,qs),
(175,278,o),
(221,322,o),
(221,359,qs),
(221,395,o),
(174,439,o),
(139,439,qs),
(104,439,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 278;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,723,o),
(57,679,o),
(40,620,o),
(40,586,qs),
(40,551,o),
(56,493,o),
(91,450,o),
(144,426,o),
(181,426,qs),
(218,426,o),
(272,450,o),
(307,493,o),
(324,551,o),
(324,586,qs),
(324,620,o),
(307,679,o),
(273,722,o),
(219,747,o),
(182,747,qs),
(145,747,o)
);
},
{
closed = 1;
nodes = (
(224,657,o),
(237,632,o),
(241,601,o),
(241,586,qs),
(241,571,o),
(236,540,o),
(223,516,o),
(200,500,o),
(181,500,qs),
(162,500,o),
(139,516,o),
(126,540,o),
(122,571,o),
(122,586,qs),
(122,601,o),
(127,632,o),
(140,657,o),
(164,672,o),
(182,672,qs),
(201,672,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 9 22 
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,599,l),
(487,769,l),
(361,769,l),
(293,683,l),
(224,769,l),
(98,769,l),
(249,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 1 76 1 1 0 2 0 133 0 2 2 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 585;
}
);
note = caron;
unicode = 711;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,605,o),
(198,627,o),
(204,648,o),
(217,662,o),
(228,662,qs),
(240,662,o),
(268,640,o),
(302,613,o),
(343,592,o),
(371,592,qs),
(402,593,o),
(444,617,o),
(469,659,o),
(479,716,o),
(479,749,q),
(387,749,l),
(387,741,o),
(387,720,o),
(382,701,o),
(370,688,o),
(358,688,qs),
(346,688,o),
(319,709,o),
(287,736,o),
(248,755,o),
(220,755,qs),
(189,754,o),
(144,729,o),
(118,687,o),
(107,630,o),
(107,597,q),
(199,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
16 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 2 1 89 0 0 0 3 2 0 3 105 0 1 1 2 97 5 4 2 2 1 2 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 3 2 3 4 2 128 0 1 3 2 1 89 0 0 0 3 4 0 3 105 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 31 0 31 35 41 35 36 6 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 586;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,715,o),
(100,680,qs),
(100,643,o),
(145,599,o),
(182,599,qs),
(218,599,o),
(264,643,o),
(264,680,qs),
(264,715,o),
(217,761,o),
(182,760,qs),
(147,760,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 364;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,745,o),
(100,694,qs),
(100,643,o),
(165,584,o),
(215,584,qs),
(266,584,o),
(331,643,o),
(331,694,qs),
(331,745,o),
(266,807,o),
(216,807,qs),
(166,807,o)
);
},
{
closed = 1;
nodes = (
(257,714,o),
(257,695,qs),
(257,677,o),
(234,654,o),
(215,654,qs),
(197,654,o),
(174,677,o),
(174,695,qs),
(174,713,o),
(197,736,o),
(215,736,qs),
(234,736,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 431;
}
);
note = ring;
unicode = 730;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,599,l),
(193,599,l),
(301,769,l),
(169,769,l)
);
},
{
closed = 1;
nodes = (
(267,599,l),
(373,599,l),
(501,769,l),
(369,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
5 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 550;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,-1,o),
(150,-63,o),
(150,-104,qs),
(150,-132,o),
(170,-175,o),
(204,-204,o),
(250,-219,o),
(276,-219,qs),
(297,-219,o),
(337,-212,o),
(355,-201,q),
(351,-181,o),
(344,-142,o),
(340,-122,q),
(320,-132,o),
(297,-132,qs),
(274,-132,o),
(243,-104,o),
(243,-79,qs),
(243,-65,o),
(257,-40,o),
(277,-19,o),
(301,-2,o),
(313,3,q),
(235,13,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
13 1 1 0 1 76 24 10 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 38 39 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 505;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-440,769,l),
(-304,599,l),
(-192,599,l),
(-300,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-243,599,l),
(-107,769,l),
(-247,769,l),
(-355,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-321,769,l),
(-470,599,l),
(-345,599,l),
(-277,685,l),
(-207,599,l),
(-81,599,l),
(-233,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-369,605,o),
(-369,627,o),
(-363,648,o),
(-350,662,o),
(-339,662,qs),
(-327,662,o),
(-299,640,o),
(-265,613,o),
(-224,592,o),
(-196,592,qs),
(-165,593,o),
(-123,617,o),
(-98,659,o),
(-88,716,o),
(-88,749,q),
(-180,749,l),
(-180,741,o),
(-180,720,o),
(-185,701,o),
(-197,688,o),
(-209,688,qs),
(-221,688,o),
(-248,709,o),
(-280,736,o),
(-319,755,o),
(-347,755,qs),
(-378,754,o),
(-423,729,o),
(-449,687,o),
(-460,630,o),
(-460,597,q),
(-368,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
16 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 2 1 89 0 0 0 3 2 0 3 105 0 1 1 2 97 5 4 2 2 1 2 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 3 2 3 4 2 128 0 1 3 2 1 89 0 0 0 3 4 0 3 105 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 31 0 31 35 41 35 36 6 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-460,624,l),
(-103,624,l),
(-103,738,l),
(-460,738,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-460,708,o),
(-431,646,o),
(-382,607,o),
(-314,589,o),
(-273,589,qs),
(-233,589,o),
(-165,608,o),
(-115,647,o),
(-87,708,o),
(-86,751,q),
(-196,751,l),
(-198,715,o),
(-238,682,o),
(-273,682,qs),
(-308,682,o),
(-349,716,o),
(-350,751,q),
(-460,751,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 0 0 0 17 0 17 36 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-365,715,o),
(-365,680,qs),
(-365,643,o),
(-320,599,o),
(-283,599,qs),
(-247,599,o),
(-201,643,o),
(-201,680,qs),
(-201,715,o),
(-248,761,o),
(-283,760,qs),
(-318,760,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-500,714,o),
(-500,676,qs),
(-500,636,o),
(-452,591,o),
(-413,591,qs),
(-375,591,o),
(-327,636,o),
(-327,676,qs),
(-327,714,o),
(-375,759,o),
(-413,759,qs),
(-452,759,o)
);
},
{
closed = 1;
nodes = (
(-238,714,o),
(-238,676,qs),
(-238,636,o),
(-190,591,o),
(-152,591,qs),
(-114,591,o),
(-65,636,o),
(-65,676,qs),
(-65,714,o),
(-114,759,o),
(-152,759,qs),
(-190,759,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-395,745,o),
(-395,694,qs),
(-395,643,o),
(-330,584,o),
(-280,584,qs),
(-229,584,o),
(-164,643,o),
(-164,694,qs),
(-164,745,o),
(-229,807,o),
(-279,807,qs),
(-329,807,o)
);
},
{
closed = 1;
nodes = (
(-238,714,o),
(-238,695,qs),
(-238,677,o),
(-261,654,o),
(-280,654,qs),
(-298,654,o),
(-321,677,o),
(-321,695,qs),
(-321,713,o),
(-298,736,o),
(-280,736,qs),
(-261,736,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-430,599,l),
(-327,599,l),
(-219,769,l),
(-351,769,l)
);
},
{
closed = 1;
nodes = (
(-253,599,l),
(-147,599,l),
(-19,769,l),
(-151,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
5 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-236,599,l),
(-86,769,l),
(-212,769,l),
(-280,683,l),
(-349,769,l),
(-475,769,l),
(-324,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 1 76 1 1 0 2 0 133 0 2 2 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-258,869,o),
(-307,833,o),
(-343,785,o),
(-365,728,o),
(-365,698,qs),
(-365,679,o),
(-355,643,o),
(-335,616,o),
(-304,599,o),
(-283,599,qs),
(-249,599,o),
(-204,638,o),
(-204,674,qs),
(-204,705,o),
(-243,742,o),
(-273,745,q),
(-270,755,o),
(-251,779,o),
(-228,802,o),
(-204,821,o),
(-194,826,q),
(-230,878,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
21 5 2 0 74 0 0 0 118 42 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-378,-106,l),
(-367,-105,o),
(-336,-104,o),
(-321,-105,qs),
(-298,-106,o),
(-269,-122,o),
(-269,-141,qs),
(-269,-151,o),
(-279,-167,o),
(-303,-177,o),
(-345,-179,o),
(-379,-175,q),
(-380,-255,l),
(-333,-260,o),
(-263,-255,o),
(-238,-243,qs),
(-209,-230,o),
(-168,-175,o),
(-166,-137,qs),
(-164,-86,o),
(-226,-35,o),
(-275,-42,q),
(-255,18,l),
(-341,18,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 49 values pushed */
1 1 1 2 22 11 2 0 1 2 76 10 1 0 73 0 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 97 0 1 2 1 81 0 0 0 23 0 23 53 28 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-185,-1,o),
(-235,-63,o),
(-235,-104,qs),
(-235,-132,o),
(-215,-175,o),
(-181,-204,o),
(-135,-219,o),
(-109,-219,qs),
(-88,-219,o),
(-48,-212,o),
(-30,-201,q),
(-45,-122,l),
(-65,-132,o),
(-88,-132,qs),
(-111,-132,o),
(-142,-104,o),
(-142,-79,qs),
(-142,-65,o),
(-128,-40,o),
(-108,-19,o),
(-84,-2,o),
(-72,3,q),
(-150,13,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
11 1 1 0 1 76 22 10 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 39 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,579,l),
(438,272,l),
(279,272,l),
(420,579,l)
);
},
{
closed = 1;
nodes = (
(934,0,l),
(934,128,l),
(583,128,l),
(583,285,l),
(888,285,l),
(888,414,l),
(583,414,l),
(583,579,l),
(934,579,l),
(934,708,l),
(331,708,l),
(0,0,l),
(157,0,l),
(221,144,l),
(438,144,l),
(438,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 6 0 7 0 6 7 103 0 0 0 2 8 0 2 103 5 1 1 1 4 95 0 4 4 38 77 0 8 8 3 95 9 1 3 3 39 3 78 19 18 17 17 17 17 17 17 17 17 16 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 970;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(343,0,ls),
(516,0,o),
(691,182,o),
(691,353,qs),
(691,529,o),
(505,708,o),
(336,708,qs),
(75,708,l),
(75,411,l),
(-5,411,l),
(-5,296,l),
(75,296,l)
);
},
{
closed = 1;
nodes = (
(352,296,l),
(352,411,l),
(220,411,l),
(220,579,l),
(336,579,ls),
(392,579,o),
(470,548,o),
(520,490,o),
(542,406,o),
(542,353,qs),
(542,245,o),
(448,128,o),
(344,128,qs),
(220,128,l),
(220,296,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 0 7 8 2 3 4 0 3 103 0 5 5 1 95 0 1 1 38 77 0 4 4 2 95 0 2 2 39 2 78 0 0 27 26 25 24 23 21 15 13 0 12 0 12 36 33 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,306,o),
(56,212,o),
(98,129,o),
(162,60,o),
(206,36,q),
(148,-111,l),
(277,-111,l),
(320,-2,l),
(335,-4,o),
(367,-6,o),
(384,-6,qs),
(465,-7,o),
(596,47,o),
(687,144,o),
(736,278,o),
(736,358,qs),
(736,406,o),
(717,497,o),
(678,579,o),
(616,647,o),
(573,671,q),
(629,818,l),
(500,818,l),
(459,711,l),
(424,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(185,306,o),
(185,357,qs),
(185,403,o),
(210,487,o),
(261,550,o),
(336,588,o),
(386,588,qs),
(394,588,o),
(410,587,o),
(418,586,q),
(258,170,l),
(219,205,o)
);
},
{
closed = 1;
nodes = (
(587,404,o),
(587,356,qs),
(587,310,o),
(562,225,o),
(511,161,o),
(436,123,o),
(386,124,qs),
(379,124,o),
(367,125,o),
(361,126,q),
(519,538,l),
(555,503,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
5 2 2 4 0 44 1 5 4 21 1 2 5 3 76 0 1 0 1 133 0 3 2 3 134 0 4 4 0 97 6 1 0 0 46 77 0 5 5 2 97 0 2 2 47 2 78 1 0 48 46 36 33 20 19 17 14 4 3 0 30 1 30 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,0,l),
(220,104,l),
(357,104,ls),
(415,104,o),
(513,137,o),
(584,200,o),
(625,293,o),
(626,353,qs),
(627,422,o),
(588,517,o),
(515,577,o),
(411,603,o),
(347,603,qs),
(220,603,l),
(220,708,l),
(75,708,l),
(75,0,l)
);
},
{
closed = 1;
nodes = (
(379,474,o),
(430,461,o),
(466,431,o),
(485,384,o),
(484,350,qs),
(483,320,o),
(461,276,o),
(425,247,o),
(377,232,o),
(349,232,qs),
(220,232,l),
(220,474,l),
(348,474,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 6 1 5 4 1 5 103 0 4 0 2 3 4 2 103 0 0 0 38 77 0 3 3 39 3 78 17 17 17 29 17 28 34 17 40 33 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,0,l),
(216,547,ls),
(216,589,o),
(263,633,o),
(303,633,qs),
(318,633,o),
(347,626,o),
(372,609,o),
(387,583,o),
(387,566,qs),
(386,538,o),
(356,494,o),
(320,451,o),
(290,403,o),
(290,372,qs),
(290,345,o),
(306,307,o),
(333,279,o),
(371,259,o),
(392,250,qs),
(458,221,ls),
(482,210,o),
(510,185,o),
(510,161,qs),
(509,132,o),
(471,107,o),
(445,107,qs),
(419,108,o),
(381,133,o),
(381,161,q),
(248,161,l),
(251,119,o),
(284,56,o),
(338,14,o),
(408,-7,o),
(448,-7,qs),
(489,-7,o),
(563,13,o),
(618,55,o),
(651,119,o),
(651,163,qs),
(651,216,o),
(600,286,o),
(554,306,qs),
(492,333,ls),
(482,337,o),
(458,348,o),
(439,361,o),
(427,379,o),
(427,392,qs),
(427,410,o),
(460,447,o),
(499,492,o),
(532,548,o),
(532,585,qs),
(532,629,o),
(490,692,o),
(425,732,o),
(345,751,o),
(307,751,qs),
(259,751,o),
(174,729,o),
(111,681,o),
(75,607,o),
(75,556,qs),
(75,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 48 77 0 3 3 1 97 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 3 3 1 97 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 5 5 39 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
65 64 61 59 39 37 35 34 30 28 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = OE;
kernLeft = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,656,l),
(537,691,o),
(439,717,o),
(387,717,qs),
(306,717,o),
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,276,o),
(84,144,o),
(174,48,o),
(303,-6,o),
(384,-6,qs),
(438,-6,o),
(537,20,o),
(582,56,q),
(582,0,l),
(1084,0,l),
(1084,128,l),
(727,128,l),
(727,285,l),
(1038,285,l),
(1038,414,l),
(727,414,l),
(727,579,l),
(1084,579,l),
(1084,708,l),
(582,708,l)
);
},
{
closed = 1;
nodes = (
(210,487,o),
(261,550,o),
(336,588,o),
(386,588,qs),
(436,588,o),
(512,550,o),
(562,487,o),
(587,402,o),
(587,356,qs),
(587,310,o),
(562,225,o),
(511,161,o),
(436,123,o),
(386,124,qs),
(336,125,o),
(260,163,o),
(210,227,o),
(185,310,o),
(185,357,qs),
(185,403,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
27 1 0 6 11 1 4 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
27 1 9 7 11 1 4 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 2 3 1 2 103 9 1 0 0 6 97 10 7 2 6 6 46 77 8 1 3 3 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 0 2 3 1 2 103 0 9 9 6 97 0 6 6 46 77 0 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 1 0 2 3 1 2 103 0 9 9 6 97 0 6 6 46 77 0 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 95 0 4 4 39 77 8 1 3 3 5 97 0 5 5 47 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 45 43 35 33 0 28 0 28 40 35 17 17 17 17 17 11 8 29 
CALL[ ]	/* CallFunction */";
};
width = 1120;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(568,166,o),
(563,219,q),
(923,219,l),
(934,285,o),
(913,401,o),
(851,488,o),
(748,538,o),
(677,538,qs),
(625,538,o),
(530,502,o),
(494,462,q),
(456,503,o),
(355,538,o),
(301,538,qs),
(238,538,o),
(139,500,o),
(71,429,o),
(35,328,o),
(35,266,qs),
(35,138,o),
(171,-8,o),
(301,-8,qs),
(363,-8,o),
(458,28,o),
(493,63,q),
(559,-8,o),
(681,-8,qs),
(722,-8,o),
(798,9,o),
(860,46,o),
(906,105,o),
(918,148,q),
(770,148,l),
(754,124,o),
(710,107,o),
(683,107,qs),
(629,107,o)
);
},
{
closed = 1;
nodes = (
(382,389,o),
(412,349,o),
(426,295,o),
(426,265,qs),
(426,234,o),
(412,180,o),
(382,140,o),
(335,117,o),
(301,117,qs),
(267,117,o),
(219,140,o),
(188,180,o),
(174,234,o),
(174,265,qs),
(174,296,o),
(189,349,o),
(220,389,o),
(268,412,o),
(301,412,qs),
(334,412,o)
);
},
{
closed = 1;
nodes = (
(569,366,o),
(632,416,o),
(681,417,qs),
(728,417,o),
(792,366,o),
(792,316,q),
(564,316,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
25 1 7 4 11 1 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 6 0 6 1 0 128 13 1 10 0 6 1 10 6 103 9 12 2 7 7 4 97 5 1 4 4 49 77 8 11 2 0 0 2 97 3 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 1 6 8 6 1 8 128 13 1 10 0 6 1 10 6 103 9 12 2 7 7 4 97 5 1 4 4 49 77 0 8 8 2 97 3 1 2 2 50 77 11 1 0 0 2 97 3 1 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
57 57 38 37 1 0 57 63 57 63 61 59 48 46 37 56 38 56 34 33 29 27 23 21 15 13 10 8 4 3 0 36 1 36 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 969;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(7,501,l),
(75,501,l),
(75,0,l),
(220,0,l),
(220,275,l),
(533,275,l),
(533,0,l),
(678,0,l),
(678,501,l),
(745,501,l),
(745,611,l),
(678,611,l),
(678,708,l),
(533,708,l),
(533,611,l),
(220,611,l),
(220,708,l),
(75,708,l),
(75,611,l),
(7,611,l)
);
},
{
closed = 1;
nodes = (
(220,404,l),
(220,501,l),
(533,501,l),
(533,404,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
12 9 3 3 1 10 8 2 4 11 1 4 103 0 11 0 6 5 11 6 103 2 1 0 0 38 77 7 1 5 5 39 5 78 0 0 23 22 21 20 0 19 0 19 17 17 17 17 17 17 17 17 17 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,558,l),
(56,0,l),
(197,0,l),
(197,271,ls),
(197,298,o),
(210,349,o),
(237,388,o),
(280,412,o),
(310,412,qs),
(342,412,o),
(384,391,o),
(408,355,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,340,o),
(539,431,o),
(490,498,o),
(412,538,o),
(355,538,qs),
(308,538,o),
(227,505,o),
(197,468,q),
(197,558,l),
(290,558,l),
(290,648,l),
(197,648,l),
(197,708,l),
(56,708,l),
(56,648,l),
(-12,648,l),
(-12,558,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
8 1 6 4 1 76 2 1 0 8 1 3 4 0 3 103 0 1 1 38 77 0 6 6 4 97 0 4 4 49 77 7 1 5 5 39 5 78 17 21 37 21 35 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,-220,l),
(197,59,l),
(231,20,o),
(319,-8,o),
(369,-8,qs),
(430,-8,o),
(519,37,o),
(576,113,o),
(603,213,o),
(603,269,qs),
(603,324,o),
(575,423,o),
(518,497,o),
(430,539,o),
(369,538,qs),
(316,537,o),
(229,499,o),
(197,457,q),
(197,708,l),
(56,708,l),
(56,-220,l)
);
},
{
closed = 1;
nodes = (
(412,389,o),
(445,350,o),
(462,296,o),
(462,265,qs),
(462,234,o),
(446,180,o),
(414,140,o),
(365,117,o),
(332,117,qs),
(266,119,o),
(195,202,o),
(197,267,qs),
(197,296,o),
(215,349,o),
(250,389,o),
(299,412,o),
(330,412,qs),
(363,412,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 1 18 1 2 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 38 77 6 1 4 4 1 97 0 1 1 49 77 0 5 5 2 97 0 2 2 50 77 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 1 97 0 1 1 49 77 0 5 5 2 97 0 2 2 50 77 0 3 3 0 95 0 0 0 38 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 30 28 21 38 22 38 19 40 35 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = eth;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,578,o),
(401,537,o),
(426,490,o),
(441,441,o),
(442,421,q),
(413,463,o),
(324,497,o),
(275,497,qs),
(222,497,o),
(135,459,o),
(73,392,o),
(40,302,o),
(40,250,qs),
(40,191,o),
(76,97,o),
(143,29,o),
(238,-7,o),
(298,-7,qs),
(370,-7,o),
(473,44,o),
(537,132,o),
(566,247,o),
(566,313,qs),
(566,362,o),
(557,453,o),
(531,537,o),
(486,616,o),
(452,653,q),
(532,702,l),
(482,782,l),
(371,715,l),
(329,742,o),
(231,773,o),
(180,781,q),
(164,682,l),
(192,678,o),
(250,663,o),
(273,650,q),
(200,608,l),
(247,529,l),
(353,591,l)
);
},
{
closed = 1;
nodes = (
(179,188,o),
(179,246,qs),
(179,301,o),
(240,371,o),
(297,371,qs),
(354,371,o),
(423,302,o),
(423,242,qs),
(423,186,o),
(360,115,o),
(303,115,qs),
(243,115,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
35 1 3 1 1 76 40 12 11 10 9 6 5 2 1 9 1 74 0 1 0 3 2 1 3 105 4 1 2 2 0 97 0 0 0 47 0 78 42 41 48 46 41 52 42 52 33 31 23 21 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
note = eth;
unicode = 240;
},
{
glyphname = oslash;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(568,137,o),
(568,266,qs),
(568,329,o),
(523,449,o),
(470,488,q),
(537,629,l),
(407,629,l),
(363,533,l),
(348,535,o),
(318,538,o),
(301,538,qs),
(238,538,o),
(139,500,o),
(71,429,o),
(35,328,o),
(35,266,qs),
(35,200,o),
(77,80,o),
(132,40,q),
(65,-101,l),
(195,-101,l),
(240,-4,l),
(254,-6,o),
(284,-8,o),
(301,-8,qs),
(432,-8,o)
);
},
{
closed = 1;
nodes = (
(174,265,qs),
(174,296,o),
(189,349,o),
(220,389,o),
(268,412,o),
(301,412,qs),
(305,412,o),
(312,412,o),
(317,411,q),
(288,351,o),
(229,226,o),
(200,166,q),
(174,205,o)
);
},
{
closed = 1;
nodes = (
(426,265,qs),
(426,234,o),
(412,180,o),
(382,140,o),
(335,117,o),
(301,117,qs),
(287,117,l),
(316,177,o),
(374,299,o),
(403,359,q),
(426,319,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
20 1 4 2 29 1 5 4 6 1 0 5 3 76 0 3 2 3 133 0 1 0 1 134 0 4 4 2 97 0 2 2 49 77 0 5 5 0 98 6 1 0 0 47 0 78 2 0 44 42 33 31 19 18 15 13 5 4 0 25 2 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(317,-4,o),
(371,14,o),
(422,46,o),
(446,72,q),
(481,27,o),
(582,-8,o),
(636,-8,qs),
(677,-8,o),
(753,9,o),
(815,46,o),
(861,105,o),
(873,148,q),
(725,148,l),
(710,124,o),
(665,107,o),
(638,107,qs),
(584,107,o),
(520,166,o),
(518,219,q),
(878,219,l),
(889,285,o),
(868,401,o),
(806,488,o),
(703,538,o),
(632,538,qs),
(585,538,o),
(498,510,o),
(463,477,q),
(426,513,o),
(335,538,o),
(285,538,qs),
(242,538,o),
(160,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,384,o),
(216,405,o),
(243,416,o),
(274,420,o),
(288,420,qs),
(336,419,o),
(386,364,o),
(383,316,q),
(274,316,ls),
(232,316,o),
(148,305,o),
(80,271,o),
(38,209,o),
(37,158,qs),
(36,116,o),
(67,54,o),
(120,13,o),
(190,-7,o),
(228,-8,qs),
(259,-9,o)
);
},
{
closed = 1;
nodes = (
(539,377,o),
(572,403,o),
(614,417,o),
(636,417,qs),
(684,417,o),
(747,366,o),
(747,316,q),
(521,316,l),
(520,340,o)
);
},
{
closed = 1;
nodes = (
(321,99,o),
(258,101,qs),
(243,101,o),
(215,109,o),
(193,125,o),
(179,149,o),
(179,166,qs),
(179,186,o),
(198,207,o),
(228,217,o),
(263,219,o),
(279,219,qs),
(382,219,l),
(382,161,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
28 1 2 4 52 1 0 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
28 1 2 4 52 1 0 13 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 10 1 1 12 1 6 8 1 6 103 11 1 2 2 4 97 5 1 4 4 49 77 13 1 7 7 0 97 9 14 2 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 63 values pushed */
0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 10 1 1 12 1 6 8 1 6 103 11 1 2 2 4 97 5 1 4 4 49 77 0 7 7 0 97 9 14 2 0 0 50 77 0 13 13 0 97 9 14 2 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
1 0 78 76 69 66 62 60 58 57 50 48 44 43 41 39 37 36 32 30 26 24 20 19 15 13 11 9 0 56 1 56 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 921;
}
);
note = ae;
unicode = 230;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(200,950,l),
(336,780,l),
(448,780,l),
(340,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 7 1 4 1 0 4 104 0 5 5 6 95 0 6 6 44 77 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 6 0 5 2 6 5 103 0 0 7 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
3 3 14 13 12 11 3 10 3 10 17 17 19 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(386,780,l),
(522,950,l),
(382,950,l),
(274,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 7 1 4 1 0 4 104 0 6 6 5 95 0 5 5 44 77 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 6 2 5 6 103 0 0 7 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
3 3 14 13 12 11 3 10 3 10 17 17 19 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(313,950,l),
(164,780,l),
(289,780,l),
(357,866,l),
(427,780,l),
(553,780,l),
(401,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
13 1 5 7 2 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
6 1 5 7 2 7 5 2 128 0 0 8 1 4 1 0 4 104 0 7 7 44 77 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 7 5 7 133 6 1 5 2 5 133 0 0 8 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
3 3 17 16 15 14 12 11 3 10 3 10 17 17 19 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(265,786,o),
(265,808,o),
(271,829,o),
(284,843,o),
(295,843,qs),
(307,843,o),
(335,821,o),
(369,794,o),
(410,773,o),
(438,773,qs),
(469,774,o),
(511,798,o),
(536,840,o),
(546,897,o),
(546,930,q),
(454,930,l),
(454,922,o),
(454,901,o),
(449,882,o),
(437,869,o),
(425,869,qs),
(413,869,o),
(386,890,o),
(354,917,o),
(315,936,o),
(287,936,qs),
(256,935,o),
(211,910,o),
(185,868,o),
(174,811,o),
(174,778,q),
(266,778,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
27 1 6 5 2 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 0 8 7 5 8 105 0 6 11 9 2 7 2 6 7 105 0 0 10 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
11 1 9 8 7 8 9 7 128 0 5 0 8 9 5 8 105 0 6 0 7 2 6 7 105 0 0 10 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
11 11 3 3 11 42 11 42 38 36 33 31 22 20 17 15 3 10 3 10 17 17 19 16 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(143,895,o),
(143,857,qs),
(143,817,o),
(191,772,o),
(230,772,qs),
(268,772,o),
(316,817,o),
(316,857,qs),
(316,895,o),
(268,940,o),
(230,940,qs),
(191,940,o)
);
},
{
closed = 1;
nodes = (
(405,895,o),
(405,857,qs),
(405,817,o),
(453,772,o),
(491,772,qs),
(529,772,o),
(578,817,o),
(578,857,qs),
(578,895,o),
(529,940,o),
(491,940,qs),
(453,940,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
2 1 0 2 1 76 11 7 10 3 5 8 1 6 2 5 6 105 0 0 9 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 24 23 12 11 3 3 30 28 23 34 24 34 18 16 11 22 12 22 3 10 3 10 17 17 19 16 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(238,906,o),
(238,855,qs),
(238,804,o),
(303,745,o),
(353,745,qs),
(404,745,o),
(469,804,o),
(469,855,qs),
(469,906,o),
(404,968,o),
(354,968,qs),
(304,968,o)
);
},
{
closed = 1;
nodes = (
(395,875,o),
(395,856,qs),
(395,838,o),
(372,815,o),
(353,815,qs),
(335,815,o),
(312,838,o),
(312,856,qs),
(312,874,o),
(335,897,o),
(353,897,qs),
(372,897,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
2 1 0 2 1 76 0 8 0 6 2 8 6 105 0 0 9 1 4 1 0 4 104 11 1 7 7 5 97 10 1 5 5 44 77 0 2 2 38 77 3 1 1 1 39 1 78 24 23 12 11 3 3 30 28 23 34 24 34 18 16 11 22 12 22 3 10 3 10 17 17 19 16 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(166,950,l),
(302,780,l),
(414,780,l),
(306,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 0 2 3 1 2 103 0 6 6 7 95 0 7 7 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 6 5 7 6 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(366,780,l),
(502,950,l),
(362,950,l),
(254,780,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 0 2 3 1 2 103 0 7 7 6 95 0 6 6 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 6 0 7 5 6 7 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(283,950,l),
(134,780,l),
(259,780,l),
(327,866,l),
(397,780,l),
(523,780,l),
(371,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
7 1 6 8 5 8 6 5 128 0 1 0 2 3 1 2 103 0 8 8 44 77 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 8 6 8 133 7 1 6 5 6 133 0 1 0 2 3 1 2 103 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 18 17 16 15 13 12 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(115,896,o),
(115,858,qs),
(115,818,o),
(163,773,o),
(202,773,qs),
(240,773,o),
(288,818,o),
(288,858,qs),
(288,896,o),
(240,941,o),
(202,941,qs),
(163,941,o)
);
},
{
closed = 1;
nodes = (
(377,896,o),
(377,858,qs),
(377,818,o),
(425,773,o),
(463,773,qs),
(501,773,o),
(550,818,o),
(550,858,qs),
(550,896,o),
(501,941,o),
(463,941,qs),
(425,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
12 8 11 3 6 9 1 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 25 24 13 12 0 0 31 29 24 35 25 35 19 17 12 23 13 23 0 11 0 11 17 17 17 17 17 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(-17,950,l),
(119,780,l),
(231,780,l),
(123,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(185,780,l),
(321,950,l),
(181,950,l),
(73,780,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 2 95 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(104,950,l),
(-45,780,l),
(80,780,l),
(148,866,l),
(218,780,l),
(344,780,l),
(192,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
3 1 2 4 1 4 2 1 128 0 4 4 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 4 2 4 133 3 1 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(-60,895,o),
(-60,857,qs),
(-60,817,o),
(-12,772,o),
(27,772,qs),
(65,772,o),
(113,817,o),
(113,857,qs),
(113,895,o),
(65,940,o),
(27,940,qs),
(-12,940,o)
);
},
{
closed = 1;
nodes = (
(182,895,o),
(182,857,qs),
(182,817,o),
(230,772,o),
(268,772,qs),
(306,772,o),
(355,817,o),
(355,857,qs),
(355,895,o),
(306,940,o),
(268,940,qs),
(230,940,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(217,0,l),
(217,472,l),
(553,0,l),
(692,0,l),
(692,708,l),
(550,708,l),
(550,234,l),
(214,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(297,786,o),
(297,808,o),
(303,829,o),
(316,843,o),
(327,843,qs),
(339,843,o),
(367,821,o),
(401,794,o),
(442,773,o),
(470,773,qs),
(501,774,o),
(543,798,o),
(568,840,o),
(578,897,o),
(578,930,q),
(486,930,l),
(486,922,o),
(486,901,o),
(481,882,o),
(469,869,o),
(457,869,qs),
(445,869,o),
(418,890,o),
(386,917,o),
(347,936,o),
(319,936,qs),
(288,935,o),
(243,910,o),
(217,868,o),
(206,811,o),
(206,778,q),
(298,778,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
26 1 5 4 6 1 2 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 0 7 6 4 7 105 0 5 10 8 2 6 0 5 6 105 9 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
10 1 8 7 6 7 8 6 128 0 4 0 7 8 4 7 105 0 5 0 6 0 5 6 105 9 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
10 10 0 0 10 41 10 41 37 35 32 30 21 19 16 14 0 9 0 9 18 17 18 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(212,950,l),
(348,780,l),
(460,780,l),
(352,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 5 95 0 5 5 44 77 0 1 1 2 97 6 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 4 2 5 4 103 0 1 1 2 97 6 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
21 20 43 42 41 40 31 29 20 39 21 39 40 36 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(419,780,l),
(555,950,l),
(415,950,l),
(307,780,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 95 0 4 4 44 77 0 1 1 2 97 6 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 2 4 5 103 0 1 1 2 97 6 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
21 20 43 42 41 40 31 29 20 39 21 39 40 36 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(344,950,l),
(195,780,l),
(320,780,l),
(388,866,l),
(458,780,l),
(584,780,l),
(432,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
42 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
5 1 4 6 2 6 4 2 128 0 6 6 44 77 0 1 1 2 97 7 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 6 4 6 133 5 1 4 2 4 133 0 1 1 2 97 7 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
21 20 46 45 44 43 41 40 31 29 20 39 21 39 40 36 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(299,786,o),
(299,808,o),
(305,829,o),
(318,843,o),
(329,843,qs),
(341,843,o),
(369,821,o),
(403,794,o),
(444,773,o),
(472,773,qs),
(503,774,o),
(545,798,o),
(570,840,o),
(580,897,o),
(580,930,q),
(488,930,l),
(488,922,o),
(488,901,o),
(483,882,o),
(471,869,o),
(459,869,qs),
(447,869,o),
(420,890,o),
(388,917,o),
(349,936,o),
(321,936,qs),
(290,935,o),
(245,910,o),
(219,868,o),
(208,811,o),
(208,778,q),
(300,778,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
56 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 0 7 6 4 7 105 0 5 10 8 2 6 2 5 6 105 0 1 1 2 97 9 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
10 1 8 7 6 7 8 6 128 0 4 0 7 8 4 7 105 0 5 0 6 2 5 6 105 0 1 1 2 97 9 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
40 40 21 20 40 71 40 71 67 65 62 60 51 49 46 44 31 29 20 39 21 39 40 36 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(173,895,o),
(173,857,qs),
(173,817,o),
(221,772,o),
(260,772,qs),
(298,772,o),
(346,817,o),
(346,857,qs),
(346,895,o),
(298,940,o),
(260,940,qs),
(221,940,o)
);
},
{
closed = 1;
nodes = (
(435,895,o),
(435,857,qs),
(435,817,o),
(483,772,o),
(521,772,qs),
(559,772,o),
(608,817,o),
(608,857,qs),
(608,895,o),
(559,940,o),
(521,940,qs),
(483,940,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
10 6 9 3 4 7 1 5 2 4 5 105 0 1 1 2 97 8 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 53 52 41 40 21 20 59 57 52 63 53 63 47 45 40 51 41 51 31 29 20 39 21 39 40 36 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(200,950,l),
(336,780,l),
(448,780,l),
(340,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 5 95 0 5 5 44 77 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 4 1 5 4 103 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 29 28 27 26 20 19 14 12 7 6 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(424,780,l),
(560,950,l),
(420,950,l),
(312,780,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 4 95 0 4 4 44 77 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 5 1 4 5 103 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 29 28 27 26 20 19 14 12 7 6 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(332,950,l),
(183,780,l),
(308,780,l),
(376,866,l),
(446,780,l),
(572,780,l),
(420,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
28 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
5 1 4 6 1 6 4 1 128 0 6 6 44 77 3 1 1 1 38 77 0 2 2 0 98 7 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 6 4 6 133 5 1 4 1 4 133 3 1 1 1 38 77 0 2 2 0 98 7 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 32 31 30 29 27 26 20 19 14 12 7 6 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(161,895,o),
(161,857,qs),
(161,817,o),
(209,772,o),
(248,772,qs),
(286,772,o),
(334,817,o),
(334,857,qs),
(334,895,o),
(286,940,o),
(248,940,qs),
(209,940,o)
);
},
{
closed = 1;
nodes = (
(423,895,o),
(423,857,qs),
(423,817,o),
(471,772,o),
(509,772,qs),
(547,772,o),
(596,817,o),
(596,857,qs),
(596,895,o),
(547,940,o),
(509,940,qs),
(471,940,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
10 6 9 3 4 7 1 5 1 4 5 105 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 50 0 78 39 38 27 26 1 0 45 43 38 49 39 49 33 31 26 37 27 37 20 19 14 12 7 6 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,708,l),
(2,708,l),
(267,263,l),
(267,0,l),
(412,0,l),
(412,265,l),
(674,708,l),
(510,708,l),
(341,402,l)
);
},
{
closed = 1;
nodes = (
(390,780,l),
(526,950,l),
(386,950,l),
(278,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
8 5 2 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 4 4 3 95 0 3 3 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 4 0 3 4 103 2 1 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = agrave;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(120,769,l),
(256,599,l),
(368,599,l),
(260,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 3 4 5 3 128 0 9 0 8 6 9 8 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 5 4 3 4 5 3 128 0 9 0 8 6 9 8 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
62 61 17 24 36 20 34 41 39 40 64 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(327,599,l),
(463,769,l),
(323,769,l),
(215,599,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 3 4 5 3 128 0 8 0 9 6 8 9 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 5 4 3 4 5 3 128 0 8 0 9 6 8 9 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
62 61 17 24 36 20 34 41 39 40 64 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = atilde;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(198,605,o),
(198,627,o),
(204,648,o),
(217,662,o),
(228,662,qs),
(240,662,o),
(268,640,o),
(302,613,o),
(343,592,o),
(371,592,qs),
(402,593,o),
(444,617,o),
(469,659,o),
(479,716,o),
(479,749,q),
(387,749,l),
(387,741,o),
(387,720,o),
(382,701,o),
(370,688,o),
(358,688,qs),
(346,688,o),
(319,709,o),
(287,736,o),
(248,755,o),
(220,755,qs),
(189,754,o),
(144,729,o),
(118,687,o),
(107,630,o),
(107,597,q),
(199,597,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
75 1 9 8 19 1 2 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
75 1 9 8 19 1 7 1 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 11 11 8 97 0 8 8 48 77 13 12 2 10 10 9 97 0 9 9 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 5 4 3 4 5 3 128 0 8 0 11 10 8 11 105 0 3 0 0 1 3 0 103 13 12 2 10 10 9 97 0 9 9 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 5 4 3 4 5 3 128 0 8 0 11 10 8 11 105 0 9 13 12 2 10 6 9 10 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 5 4 3 4 5 3 128 0 8 0 11 10 8 11 105 0 9 13 12 2 10 6 9 10 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 67 values pushed */
13 1 12 11 10 11 12 10 128 0 5 4 3 4 5 3 128 0 8 0 11 12 8 11 105 0 9 0 10 6 9 10 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
59 59 59 90 59 90 86 84 81 79 70 68 37 24 36 20 34 41 39 40 64 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = aring;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(176,745,o),
(176,694,qs),
(176,643,o),
(241,584,o),
(291,584,qs),
(342,584,o),
(407,643,o),
(407,694,qs),
(407,745,o),
(342,807,o),
(292,807,qs),
(242,807,o)
);
},
{
closed = 1;
nodes = (
(333,714,o),
(333,695,qs),
(333,677,o),
(310,654,o),
(291,654,qs),
(273,654,o),
(250,677,o),
(250,695,qs),
(250,713,o),
(273,736,o),
(291,736,qs),
(310,736,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 5 4 3 4 5 3 128 12 1 8 13 1 10 11 8 10 105 0 11 0 9 6 11 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 5 4 3 4 5 3 128 12 1 8 13 1 10 11 8 10 105 0 11 0 9 6 11 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
72 71 60 59 78 76 71 82 72 82 66 64 59 70 60 70 24 36 20 34 41 39 40 64 14 8 30 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = aring;
unicode = 229;
},
{
glyphname = egrave;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(142,769,l),
(278,599,l),
(390,599,l),
(282,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 1 4 0 4 1 0 128 0 8 0 7 3 8 7 103 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 50 2 78 26 26 1 0 38 37 36 35 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(329,599,l),
(465,769,l),
(325,769,l),
(217,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 1 4 0 4 1 0 128 0 7 0 8 3 7 8 103 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 50 2 78 26 26 1 0 38 37 36 35 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = edieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(82,714,o),
(82,676,qs),
(82,636,o),
(130,591,o),
(169,591,qs),
(207,591,o),
(255,636,o),
(255,676,qs),
(255,714,o),
(207,759,o),
(169,759,qs),
(130,759,o)
);
},
{
closed = 1;
nodes = (
(344,714,o),
(344,676,qs),
(344,636,o),
(392,591,o),
(430,591,qs),
(468,591,o),
(517,636,o),
(517,676,qs),
(517,714,o),
(468,759,o),
(430,759,qs),
(392,759,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 1 4 0 4 1 0 128 12 1 6 0 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 48 77 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 1 4 0 4 1 0 128 14 9 13 3 7 10 1 8 3 7 8 105 12 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 41 values pushed */
48 47 36 35 26 26 1 0 54 52 47 58 48 58 42 40 35 46 36 46 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
},
{
closed = 1;
nodes = (
(-36,769,l),
(100,599,l),
(212,599,l),
(104,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 3 0 2 1 3 2 103 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
},
{
closed = 1;
nodes = (
(164,599,l),
(300,769,l),
(160,769,l),
(52,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 3 1 2 3 103 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
},
{
closed = 1;
nodes = (
(81,769,l),
(-68,599,l),
(57,599,l),
(125,685,l),
(195,599,l),
(321,599,l),
(169,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 1 2 4 1 76 0 4 2 4 133 3 1 2 1 2 133 0 1 1 41 77 0 0 0 39 0 78 17 18 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
},
{
closed = 1;
nodes = (
(-71,714,o),
(-71,676,qs),
(-71,636,o),
(-23,591,o),
(16,591,qs),
(54,591,o),
(102,636,o),
(102,676,qs),
(102,714,o),
(54,759,o),
(16,759,qs),
(-23,759,o)
);
},
{
closed = 1;
nodes = (
(151,714,o),
(151,676,qs),
(151,636,o),
(199,591,o),
(237,591,qs),
(275,591,o),
(324,636,o),
(324,676,qs),
(324,714,o),
(275,759,o),
(237,759,qs),
(199,759,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,260,ls),
(197,287,o),
(206,340,o),
(232,384,o),
(278,412,o),
(311,412,qs),
(338,412,o),
(381,394,o),
(407,357,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,346,o),
(538,439,o),
(509,474,qs),
(485,504,o),
(407,538,o),
(356,538,qs),
(262,538,o),
(198,460,q),
(191,527,l)
);
},
{
closed = 1;
nodes = (
(220,605,o),
(220,627,o),
(226,648,o),
(239,662,o),
(250,662,qs),
(262,662,o),
(290,640,o),
(324,613,o),
(365,592,o),
(393,592,qs),
(424,593,o),
(466,617,o),
(491,659,o),
(501,716,o),
(501,749,q),
(409,749,l),
(409,741,o),
(409,720,o),
(404,701,o),
(392,688,o),
(380,688,qs),
(368,688,o),
(341,709,o),
(309,736,o),
(270,755,o),
(242,755,qs),
(211,754,o),
(166,729,o),
(140,687,o),
(129,630,o),
(129,597,q),
(221,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
42 1 6 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 8 8 5 97 0 5 5 48 77 10 9 2 7 7 6 97 0 6 6 38 77 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 0 8 7 5 8 105 10 9 2 7 7 6 97 0 6 6 38 77 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 0 8 7 5 8 105 10 9 2 7 7 6 97 0 6 6 38 77 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 5 0 8 7 5 8 105 0 6 10 9 2 7 0 6 7 105 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
10 1 9 8 7 8 9 7 128 0 5 0 8 9 5 8 105 0 6 0 7 0 6 7 105 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
26 26 26 57 26 57 35 41 35 37 17 21 37 22 33 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(147,769,l),
(283,599,l),
(395,599,l),
(287,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 5 0 4 3 5 4 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 50 2 78 13 12 1 0 31 30 29 28 21 19 12 27 13 27 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(332,599,l),
(468,769,l),
(328,769,l),
(220,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 4 0 5 3 4 5 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 50 2 78 13 12 1 0 31 30 29 28 21 19 12 27 13 27 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(259,769,l),
(110,599,l),
(235,599,l),
(303,685,l),
(373,599,l),
(499,599,l),
(347,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
30 1 4 6 1 76 0 6 4 6 133 5 1 4 3 4 133 7 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 8 1 2 2 50 2 78 13 12 1 0 34 33 32 31 29 28 21 19 12 27 13 27 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(212,605,o),
(212,627,o),
(218,648,o),
(231,662,o),
(242,662,qs),
(254,662,o),
(282,640,o),
(316,613,o),
(357,592,o),
(385,592,qs),
(416,593,o),
(458,617,o),
(483,659,o),
(493,716,o),
(493,749,q),
(401,749,l),
(401,741,o),
(401,720,o),
(396,701,o),
(384,688,o),
(372,688,qs),
(360,688,o),
(333,709,o),
(301,736,o),
(262,755,o),
(234,755,qs),
(203,754,o),
(158,729,o),
(132,687,o),
(121,630,o),
(121,597,q),
(213,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
44 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 7 7 4 97 0 4 4 48 77 11 8 2 6 6 5 97 0 5 5 38 77 9 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 10 1 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 0 7 6 4 7 105 11 8 2 6 6 5 97 0 5 5 38 77 9 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 10 1 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 0 7 6 4 7 105 0 5 11 8 2 6 3 5 6 105 9 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 10 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
11 1 8 7 6 7 8 6 128 0 4 0 7 8 4 7 105 0 5 0 6 3 5 6 105 9 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 10 1 2 2 50 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
28 28 13 12 1 0 28 59 28 59 55 53 50 48 39 37 34 32 21 19 12 27 13 27 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(93,714,o),
(93,676,qs),
(93,636,o),
(141,591,o),
(180,591,qs),
(218,591,o),
(266,636,o),
(266,676,qs),
(266,714,o),
(218,759,o),
(180,759,qs),
(141,759,o)
);
},
{
closed = 1;
nodes = (
(355,714,o),
(355,676,qs),
(355,636,o),
(403,591,o),
(441,591,qs),
(479,591,o),
(528,636,o),
(528,676,qs),
(528,714,o),
(479,759,o),
(441,759,qs),
(403,759,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 5 5 4 97 11 6 10 3 4 4 48 77 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
11 6 10 3 4 7 1 5 3 4 5 105 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
41 40 29 28 13 12 1 0 47 45 40 51 41 51 35 33 28 39 29 39 21 19 12 27 13 27 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(123,769,l),
(259,599,l),
(371,599,l),
(263,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 5 0 4 1 5 4 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 1 0 29 28 27 26 22 21 15 13 5 4 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(341,599,l),
(477,769,l),
(337,769,l),
(229,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 0 5 1 4 5 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 1 0 29 28 27 26 22 21 15 13 5 4 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(256,769,l),
(107,599,l),
(232,599,l),
(300,685,l),
(370,599,l),
(496,599,l),
(344,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
28 1 4 6 1 76 0 6 4 6 133 5 1 4 1 4 133 3 1 1 1 41 77 7 1 0 0 2 98 0 2 2 50 2 78 1 0 32 31 30 29 27 26 22 21 15 13 5 4 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-141,o),
(273,-141,qs),
(214,-141,o),
(127,-109,o),
(101,-90,q),
(56,-210,l),
(104,-241,o),
(218,-274,o),
(276,-273,qs),
(355,-274,o),
(468,-226,o),
(503,-186,qs),
(528,-157,o),
(556,-89,o),
(567,-17,o),
(568,58,o),
(568,94,qs),
(568,527,l),
(426,527,l),
(426,273,ls),
(426,243,o),
(420,192,o),
(407,169,qs),
(392,142,o),
(340,117,o),
(310,117,qs),
(247,117,o),
(223,153,q),
(208,170,o),
(199,221,o),
(199,248,qs),
(199,527,l),
(58,527,l),
(58,231,ls),
(58,180,o),
(76,93,o),
(99,60,qs),
(124,26,o),
(207,-8,o),
(264,-8,qs),
(313,-8,o),
(397,22,o),
(426,59,q),
(426,23,o),
(420,-51,o),
(400,-82,qs),
(382,-110,o)
);
},
{
closed = 1;
nodes = (
(363,599,l),
(499,769,l),
(359,769,l),
(251,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
3 1 0 2 41 1 5 0 40 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 6 0 7 1 6 7 103 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 6 0 7 1 6 7 103 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 18 37 40 22 37 22 37 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(82,716,o),
(82,678,qs),
(82,638,o),
(130,593,o),
(169,593,qs),
(207,593,o),
(255,638,o),
(255,678,qs),
(255,716,o),
(207,761,o),
(169,761,qs),
(130,761,o)
);
},
{
closed = 1;
nodes = (
(344,716,o),
(344,678,qs),
(344,638,o),
(392,593,o),
(430,593,qs),
(468,593,o),
(517,638,o),
(517,678,qs),
(517,716,o),
(468,761,o),
(430,761,qs),
(392,761,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 5 4 97 10 6 9 3 4 4 48 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
10 6 9 3 4 7 1 5 1 4 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
39 38 27 26 1 0 45 43 38 49 39 49 33 31 26 37 27 37 22 21 15 13 5 4 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-141,o),
(273,-141,qs),
(214,-141,o),
(127,-109,o),
(101,-90,q),
(56,-210,l),
(104,-241,o),
(218,-274,o),
(276,-273,qs),
(355,-274,o),
(468,-226,o),
(503,-186,qs),
(528,-157,o),
(556,-89,o),
(567,-17,o),
(568,58,o),
(568,94,qs),
(568,527,l),
(426,527,l),
(426,273,ls),
(426,243,o),
(420,192,o),
(407,169,qs),
(392,142,o),
(340,117,o),
(310,117,qs),
(247,117,o),
(223,153,q),
(208,170,o),
(199,221,o),
(199,248,qs),
(199,527,l),
(58,527,l),
(58,231,ls),
(58,180,o),
(76,93,o),
(99,60,qs),
(124,26,o),
(207,-8,o),
(264,-8,qs),
(313,-8,o),
(397,22,o),
(426,59,q),
(426,23,o),
(420,-51,o),
(400,-82,qs),
(382,-110,o)
);
},
{
closed = 1;
nodes = (
(101,716,o),
(101,678,qs),
(101,638,o),
(149,593,o),
(188,593,qs),
(226,593,o),
(274,638,o),
(274,678,qs),
(274,716,o),
(226,761,o),
(188,761,qs),
(149,761,o)
);
},
{
closed = 1;
nodes = (
(363,716,o),
(363,678,qs),
(363,638,o),
(411,593,o),
(449,593,qs),
(487,593,o),
(536,638,o),
(536,678,qs),
(536,716,o),
(487,761,o),
(449,761,qs),
(411,761,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
3 1 0 2 41 1 5 0 40 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
9 1 7 7 6 97 11 8 10 3 6 6 48 77 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
11 8 10 3 6 9 1 7 1 6 7 105 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
11 8 10 3 6 9 1 7 1 6 7 105 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 59 48 47 66 64 59 70 60 70 54 52 47 58 48 58 37 40 22 37 22 37 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = acircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(248,769,l),
(99,599,l),
(224,599,l),
(292,685,l),
(362,599,l),
(488,599,l),
(336,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
61 1 8 10 19 1 2 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
61 1 8 10 19 1 7 1 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 10 8 10 133 9 1 8 6 8 133 0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 10 8 10 133 9 1 8 6 8 133 0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
65 64 63 62 17 24 36 20 34 41 39 40 64 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(76,714,o),
(76,676,qs),
(76,636,o),
(124,591,o),
(163,591,qs),
(201,591,o),
(249,636,o),
(249,676,qs),
(249,714,o),
(201,759,o),
(163,759,qs),
(124,759,o)
);
},
{
closed = 1;
nodes = (
(338,714,o),
(338,676,qs),
(338,636,o),
(386,591,o),
(424,591,qs),
(462,591,o),
(511,636,o),
(511,676,qs),
(511,714,o),
(462,759,o),
(424,759,qs),
(386,759,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 11 1 9 9 8 97 13 10 12 3 8 8 48 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 4 3 4 5 3 128 13 10 12 3 8 11 1 9 6 8 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 5 4 3 4 5 3 128 13 10 12 3 8 11 1 9 6 8 9 105 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
72 71 60 59 78 76 71 82 72 82 66 64 59 70 60 70 24 36 20 34 41 39 40 64 14 8 30 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = ecircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(257,769,l),
(108,599,l),
(233,599,l),
(301,685,l),
(371,599,l),
(497,599,l),
(345,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
37 1 7 9 1 76 0 9 7 9 133 8 1 7 3 7 133 0 1 4 0 4 1 0 128 11 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 10 1 0 0 2 97 0 2 2 50 2 78 26 26 1 0 41 40 39 38 36 35 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,417,l),
(288,514,l),
(219,472,l),
(219,708,l),
(75,708,l),
(75,385,l),
(-36,317,l),
(23,219,l),
(75,251,l),
(75,0,l),
(566,0,l),
(566,128,l),
(219,128,l),
(219,339,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
13 12 11 10 7 6 5 4 8 0 2 1 76 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 21 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,708,l),
(63,708,l),
(63,373,l),
(-50,304,l),
(9,207,l),
(63,240,l),
(63,0,l),
(204,0,l),
(204,326,l),
(329,403,l),
(270,500,l),
(204,459,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
11 8 7 6 5 2 1 7 0 1 1 76 0 1 1 38 77 0 0 0 39 0 78 21 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(217,0,l),
(217,472,l),
(551,3,l),
(551,-48,ls),
(551,-81,o),
(513,-118,o),
(480,-118,qs),
(420,-118,l),
(420,-242,l),
(509,-242,ls),
(692,-242,o),
(692,-65,qs),
(692,708,l),
(550,708,l),
(550,234,l),
(214,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
14 13 1 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 4 2 0 0 38 77 0 3 3 39 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 0 1 2 1 100 5 4 2 0 0 38 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 17 0 17 21 33 34 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,260,ls),
(197,289,o),
(207,344,o),
(233,386,o),
(277,412,o),
(311,412,qs),
(342,412,o),
(383,391,o),
(408,355,o),
(418,306,o),
(418,278,qs),
(418,-48,ls),
(418,-81,o),
(380,-118,o),
(347,-118,qs),
(288,-118,l),
(288,-242,l),
(377,-242,ls),
(560,-242,o),
(560,-65,qs),
(560,289,ls),
(560,340,o),
(540,431,o),
(492,500,o),
(414,538,o),
(356,538,qs),
(261,538,o),
(198,460,q),
(191,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 3 0 97 5 1 0 0 49 77 0 4 4 39 77 0 2 2 1 95 0 1 1 43 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 1 2 1 99 0 3 3 0 97 5 1 0 0 49 77 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 0 1 2 1 99 0 5 5 41 77 0 3 3 0 97 0 0 0 49 77 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 21 39 33 38 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(343,0,ls),
(516,0,o),
(691,182,o),
(691,353,qs),
(691,529,o),
(505,708,o),
(336,708,qs),
(75,708,l),
(75,411,l),
(-5,411,l),
(-5,296,l),
(75,296,l)
);
},
{
closed = 1;
nodes = (
(352,296,l),
(352,411,l),
(220,411,l),
(220,579,l),
(336,579,ls),
(392,579,o),
(470,548,o),
(520,490,o),
(542,406,o),
(542,353,qs),
(542,245,o),
(448,128,o),
(344,128,qs),
(220,128,l),
(220,296,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 0 7 8 2 3 4 0 3 103 0 5 5 1 95 0 1 1 38 77 0 4 4 2 95 0 2 2 39 2 78 0 0 27 26 25 24 23 21 15 13 0 12 0 12 36 33 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(183,805,l),
(540,805,l),
(540,919,l),
(183,919,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
2 1 0 2 1 76 8 1 6 0 5 2 6 5 103 0 0 7 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 11 11 3 3 11 14 11 14 13 12 3 10 3 10 17 17 19 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(118,624,l),
(475,624,l),
(475,738,l),
(118,738,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 3 4 5 3 128 10 1 9 0 8 6 9 8 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 4 3 4 5 3 128 10 1 9 0 8 6 9 8 103 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
59 59 59 62 59 62 18 24 36 20 34 41 39 40 64 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
},
{
closed = 1;
nodes = (
(172,889,o),
(201,827,o),
(250,788,o),
(318,770,o),
(359,770,qs),
(399,770,o),
(467,789,o),
(517,828,o),
(545,889,o),
(546,932,q),
(436,932,l),
(434,896,o),
(394,863,o),
(359,863,qs),
(324,863,o),
(283,897,o),
(282,932,q),
(172,932,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
2 1 0 2 1 76 10 8 2 6 5 6 133 0 5 0 7 2 5 7 105 0 0 9 1 4 1 0 4 104 0 2 2 38 77 3 1 1 1 39 1 78 11 11 3 3 11 28 11 28 24 22 18 17 15 13 3 10 3 10 17 17 19 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
},
{
closed = 1;
nodes = (
(110,708,o),
(139,646,o),
(188,607,o),
(256,589,o),
(297,589,qs),
(337,589,o),
(405,608,o),
(455,647,o),
(483,708,o),
(484,751,q),
(374,751,l),
(372,715,o),
(332,682,o),
(297,682,qs),
(262,682,o),
(221,716,o),
(220,751,q),
(110,751,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
19 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
19 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 8 0 10 6 8 10 105 12 11 2 9 0 5 3 9 5 103 0 3 0 0 1 3 0 104 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 8 0 10 6 8 10 105 12 11 2 9 0 5 3 9 5 103 0 3 0 0 1 3 0 104 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
59 59 59 76 59 76 72 70 66 65 35 24 36 20 34 41 39 40 64 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,263,l),
(251,263,l),
(355,555,l)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(575,0,l),
(555,-12,o),
(540,-32,qs),
(515,-63,o),
(515,-104,qs),
(515,-132,o),
(535,-175,o),
(569,-204,o),
(615,-219,o),
(641,-219,qs),
(662,-219,o),
(702,-212,o),
(720,-201,q),
(705,-122,l),
(685,-132,o),
(662,-132,qs),
(639,-132,o),
(608,-104,o),
(608,-79,qs),
(608,-65,o),
(622,-40,o),
(642,-19,o),
(654,-10,qs),
(662,-4,o),
(671,0,q),
(708,0,l),
(438,708,l),
(274,708,l),
(0,0,l),
(158,0,l),
(209,135,l),
(500,135,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
2 1 0 2 20 1 4 1 21 1 5 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 8 1 7 1 0 7 104 0 2 2 38 77 6 3 2 1 1 39 77 0 4 4 5 97 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 8 1 7 1 0 7 104 0 4 0 5 4 5 101 0 2 2 38 77 6 3 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
3 3 3 35 3 35 24 36 40 17 17 19 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,158,o),
(357,142,q),
(338,122,o),
(287,100,o),
(258,101,qs),
(243,101,o),
(213,110,o),
(192,126,o),
(179,150,o),
(179,166,qs),
(179,185,o),
(198,211,o),
(226,227,o),
(264,233,o),
(279,233,qs),
(305,233,o),
(357,233,o),
(382,233,q),
(382,199,o)
);
},
{
closed = 1;
nodes = (
(404,0,l),
(384,-12,o),
(369,-32,qs),
(344,-63,o),
(344,-104,qs),
(344,-132,o),
(364,-175,o),
(398,-204,o),
(444,-219,o),
(470,-219,qs),
(491,-219,o),
(531,-212,o),
(549,-201,q),
(534,-122,l),
(514,-132,o),
(491,-132,qs),
(468,-132,o),
(437,-104,o),
(437,-79,qs),
(437,-65,o),
(451,-40,o),
(471,-19,o),
(483,-10,qs),
(491,-4,o),
(500,0,q),
(519,0,l),
(519,285,ls),
(520,333,o),
(503,434,o),
(469,473,qs),
(450,493,o),
(407,518,o),
(359,533,o),
(309,538,o),
(285,538,qs),
(242,538,o),
(161,521,o),
(95,481,o),
(52,416,o),
(47,368,q),
(192,368,l),
(195,383,o),
(214,404,o),
(241,416,o),
(273,420,o),
(288,420,qs),
(334,419,o),
(385,370,o),
(382,321,q),
(274,321,ls),
(226,321,o),
(145,307,o),
(113,290,qs),
(75,268,o),
(38,201,o),
(37,158,qs),
(37,116,o),
(66,55,o),
(92,33,qs),
(141,-6,o),
(214,-8,qs),
(271,-9,o),
(357,25,o),
(387,65,q),
(390,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
19 1 2 1 69 1 8 2 70 1 9 8 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
19 1 7 1 69 1 8 2 70 1 9 8 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 95 10 7 2 2 2 39 77 0 8 8 9 97 0 9 9 43 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 8 0 9 8 9 101 0 4 4 6 97 0 6 6 49 77 0 1 1 2 95 10 7 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 8 0 9 8 9 101 0 4 4 6 97 0 6 6 49 77 10 1 7 7 39 77 0 1 1 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
83 82 74 72 40 24 36 20 34 41 39 40 64 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 573;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,487,o),
(255,551,o),
(328,588,o),
(379,588,qs),
(443,588,o),
(525,528,o),
(536,477,q),
(676,477,l),
(670,540,o),
(619,631,o),
(539,689,o),
(437,717,o),
(379,717,qs),
(296,717,o),
(169,662,o),
(81,565,o),
(36,432,o),
(36,355,qs),
(36,276,o),
(80,144,o),
(167,48,o),
(294,-6,o),
(377,-6,qs),
(433,-6,o),
(537,24,o),
(619,84,o),
(671,173,o),
(676,232,q),
(536,232,l),
(526,181,o),
(443,124,o),
(379,124,qs),
(328,124,o),
(255,163,o),
(208,227,o),
(185,311,o),
(185,356,qs),
(185,402,o)
);
},
{
closed = 1;
nodes = (
(407,780,l),
(543,950,l),
(403,950,l),
(295,780,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 7 6 95 0 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 6 0 7 3 6 7 103 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 20 34 20 40 36 18 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,138,o),
(189,177,o),
(175,230,o),
(175,262,qs),
(175,292,o),
(187,346,o),
(215,388,o),
(263,412,o),
(296,412,qs),
(335,412,o),
(384,374,o),
(389,350,q),
(537,350,l),
(530,399,o),
(489,470,o),
(426,516,o),
(345,538,o),
(299,538,qs),
(236,538,o),
(138,499,o),
(71,427,o),
(35,325,o),
(35,264,qs),
(35,201,o),
(68,100,o),
(132,29,o),
(229,-8,o),
(295,-8,qs),
(339,-8,o),
(421,12,o),
(486,58,o),
(530,128,o),
(537,179,q),
(389,179,l),
(384,155,o),
(337,117,o),
(297,117,qs),
(264,117,o)
);
},
{
closed = 1;
nodes = (
(343,599,l),
(479,769,l),
(339,769,l),
(231,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 6 0 7 3 6 7 103 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 50 2 78 1 0 41 40 39 38 29 27 25 24 20 18 10 8 4 3 0 37 1 37 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,487,o),
(255,551,o),
(328,588,o),
(379,588,qs),
(443,588,o),
(525,528,o),
(536,477,q),
(676,477,l),
(670,540,o),
(619,631,o),
(539,689,o),
(437,717,o),
(379,717,qs),
(296,717,o),
(169,662,o),
(81,565,o),
(36,432,o),
(36,355,qs),
(36,276,o),
(80,144,o),
(167,48,o),
(294,-6,o),
(377,-6,qs),
(433,-6,o),
(537,24,o),
(619,84,o),
(671,173,o),
(676,232,q),
(536,232,l),
(526,181,o),
(443,124,o),
(379,124,qs),
(328,124,o),
(255,163,o),
(208,227,o),
(185,311,o),
(185,356,qs),
(185,402,o)
);
},
{
closed = 1;
nodes = (
(334,950,l),
(185,780,l),
(310,780,l),
(378,866,l),
(448,780,l),
(574,780,l),
(422,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
7 1 6 8 3 8 6 3 128 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 8 8 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 6 8 133 7 1 6 3 6 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 20 34 20 40 36 18 36 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,138,o),
(189,177,o),
(175,230,o),
(175,262,qs),
(175,292,o),
(187,346,o),
(215,388,o),
(263,412,o),
(296,412,qs),
(335,412,o),
(384,374,o),
(389,350,q),
(537,350,l),
(530,399,o),
(489,470,o),
(426,516,o),
(345,538,o),
(299,538,qs),
(236,538,o),
(138,499,o),
(71,427,o),
(35,325,o),
(35,264,qs),
(35,201,o),
(68,100,o),
(132,29,o),
(229,-8,o),
(295,-8,qs),
(339,-8,o),
(421,12,o),
(486,58,o),
(530,128,o),
(537,179,q),
(389,179,l),
(384,155,o),
(337,117,o),
(297,117,qs),
(264,117,o)
);
},
{
closed = 1;
nodes = (
(254,769,l),
(105,599,l),
(230,599,l),
(298,685,l),
(368,599,l),
(494,599,l),
(342,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
40 1 6 8 1 76 0 8 6 8 133 7 1 6 3 6 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 50 2 78 1 0 44 43 42 41 39 38 29 27 25 24 20 18 10 8 4 3 0 37 1 37 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,487,o),
(255,551,o),
(328,588,o),
(379,588,qs),
(443,588,o),
(525,528,o),
(536,477,q),
(676,477,l),
(670,540,o),
(619,631,o),
(539,689,o),
(437,717,o),
(379,717,qs),
(296,717,o),
(169,662,o),
(81,565,o),
(36,432,o),
(36,355,qs),
(36,276,o),
(80,144,o),
(167,48,o),
(294,-6,o),
(377,-6,qs),
(433,-6,o),
(537,24,o),
(619,84,o),
(671,173,o),
(676,232,q),
(536,232,l),
(526,181,o),
(443,124,o),
(379,124,qs),
(328,124,o),
(255,163,o),
(208,227,o),
(185,311,o),
(185,356,qs),
(185,402,o)
);
},
{
closed = 1;
nodes = (
(305,896,o),
(305,861,qs),
(305,824,o),
(350,780,o),
(387,780,qs),
(423,780,o),
(469,824,o),
(469,861,qs),
(469,896,o),
(422,942,o),
(387,941,qs),
(352,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 8 1 6 0 7 3 6 7 105 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 39 38 45 43 38 49 39 49 34 20 40 36 18 36 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,138,o),
(189,177,o),
(175,230,o),
(175,262,qs),
(175,292,o),
(187,346,o),
(215,388,o),
(263,412,o),
(296,412,qs),
(335,412,o),
(384,374,o),
(389,350,q),
(537,350,l),
(530,399,o),
(489,470,o),
(426,516,o),
(345,538,o),
(299,538,qs),
(236,538,o),
(138,499,o),
(71,427,o),
(35,325,o),
(35,264,qs),
(35,201,o),
(68,100,o),
(132,29,o),
(229,-8,o),
(295,-8,qs),
(339,-8,o),
(421,12,o),
(486,58,o),
(530,128,o),
(537,179,q),
(389,179,l),
(384,155,o),
(337,117,o),
(297,117,qs),
(264,117,o)
);
},
{
closed = 1;
nodes = (
(221,715,o),
(221,680,qs),
(221,643,o),
(266,599,o),
(303,599,qs),
(339,599,o),
(385,643,o),
(385,680,qs),
(385,715,o),
(338,761,o),
(303,760,qs),
(268,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 7 6 97 9 1 6 6 48 77 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 9 1 6 0 7 3 6 7 105 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
39 38 1 0 45 43 38 49 39 49 29 27 25 24 20 18 10 8 4 3 0 37 1 37 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,487,o),
(255,551,o),
(328,588,o),
(379,588,qs),
(443,588,o),
(525,528,o),
(536,477,q),
(676,477,l),
(670,540,o),
(619,631,o),
(539,689,o),
(437,717,o),
(379,717,qs),
(296,717,o),
(169,662,o),
(81,565,o),
(36,432,o),
(36,355,qs),
(36,276,o),
(80,144,o),
(167,48,o),
(294,-6,o),
(377,-6,qs),
(433,-6,o),
(537,24,o),
(619,84,o),
(671,173,o),
(676,232,q),
(536,232,l),
(526,181,o),
(443,124,o),
(379,124,qs),
(328,124,o),
(255,163,o),
(208,227,o),
(185,311,o),
(185,356,qs),
(185,402,o)
);
},
{
closed = 1;
nodes = (
(422,780,l),
(572,950,l),
(446,950,l),
(378,864,l),
(309,950,l),
(183,950,l),
(334,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
40 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 8 6 3 6 8 3 128 0 1 4 0 4 1 0 128 0 5 5 3 97 0 3 3 46 77 0 4 4 6 95 7 1 6 6 44 77 0 0 0 2 98 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 8 6 3 6 8 3 128 0 1 4 0 4 1 0 128 7 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 46 77 0 0 0 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 20 34 20 40 36 18 36 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,138,o),
(189,177,o),
(175,230,o),
(175,262,qs),
(175,292,o),
(187,346,o),
(215,388,o),
(263,412,o),
(296,412,qs),
(335,412,o),
(384,374,o),
(389,350,q),
(537,350,l),
(530,399,o),
(489,470,o),
(426,516,o),
(345,538,o),
(299,538,qs),
(236,538,o),
(138,499,o),
(71,427,o),
(35,325,o),
(35,264,qs),
(35,201,o),
(68,100,o),
(132,29,o),
(229,-8,o),
(295,-8,qs),
(339,-8,o),
(421,12,o),
(486,58,o),
(530,128,o),
(537,179,q),
(389,179,l),
(384,155,o),
(337,117,o),
(297,117,qs),
(264,117,o)
);
},
{
closed = 1;
nodes = (
(343,599,l),
(493,769,l),
(367,769,l),
(299,683,l),
(230,769,l),
(104,769,l),
(255,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
40 1 8 6 1 76 0 8 6 3 6 8 3 128 0 1 4 0 4 1 0 128 7 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 50 2 78 1 0 44 43 42 41 39 38 29 27 25 24 20 18 10 8 4 3 0 37 1 37 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,0,o),
(691,182,o),
(691,353,qs),
(691,466,o),
(610,626,o),
(530,667,qs),
(485,691,o),
(387,708,o),
(336,708,qs),
(75,708,l),
(75,0,l),
(343,0,ls)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(336,579,ls),
(378,579,o),
(465,555,o),
(493,522,qs),
(518,492,o),
(542,406,o),
(542,353,qs),
(542,286,o),
(501,183,o),
(460,155,qs),
(450,149,o),
(422,139,o),
(390,132,o),
(358,128,o),
(344,128,qs),
(220,128,l)
);
},
{
closed = 1;
nodes = (
(397,780,l),
(547,950,l),
(421,950,l),
(353,864,l),
(284,950,l),
(158,950,l),
(309,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
31 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 4 0 4 6 0 128 5 1 4 4 44 77 0 3 3 0 95 0 0 0 38 77 8 1 2 2 1 95 7 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
5 1 4 6 4 133 0 6 0 6 133 0 3 3 0 95 0 0 0 38 77 8 1 2 2 1 95 7 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
13 12 0 0 35 34 33 32 30 29 27 25 12 28 13 28 0 11 0 10 33 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(151,805,l),
(508,805,l),
(508,919,l),
(151,919,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
9 1 7 0 6 5 7 6 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(117,624,l),
(474,624,l),
(474,738,l),
(117,738,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
0 1 4 0 4 1 0 128 11 1 8 0 7 3 8 7 103 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 50 2 78 35 35 26 26 1 0 35 38 35 38 37 36 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(147,889,o),
(176,827,o),
(225,788,o),
(293,770,o),
(334,770,qs),
(374,770,o),
(442,789,o),
(492,828,o),
(520,889,o),
(521,932,q),
(411,932,l),
(409,896,o),
(369,863,o),
(334,863,qs),
(299,863,o),
(258,897,o),
(257,932,q),
(147,932,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
11 9 2 7 6 7 133 0 6 0 8 5 6 8 105 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 12 12 0 0 12 29 12 29 25 23 19 18 16 14 0 11 0 11 17 17 17 17 17 12 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(111,708,o),
(140,646,o),
(189,607,o),
(257,589,o),
(298,589,qs),
(338,589,o),
(406,608,o),
(456,647,o),
(484,708,o),
(485,751,q),
(375,751,l),
(373,715,o),
(333,682,o),
(298,682,qs),
(263,682,o),
(222,716,o),
(221,751,q),
(111,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
13 10 2 8 7 8 133 0 1 4 0 4 1 0 128 0 7 0 9 3 7 9 105 12 1 6 0 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 50 2 78 35 35 26 26 1 0 35 52 35 52 48 46 42 41 39 37 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(252,896,o),
(252,861,qs),
(252,824,o),
(297,780,o),
(334,780,qs),
(370,780,o),
(416,824,o),
(416,861,qs),
(416,896,o),
(369,942,o),
(334,941,qs),
(299,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
9 1 6 0 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 13 12 0 0 19 17 12 23 13 23 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(217,715,o),
(217,680,qs),
(217,643,o),
(262,599,o),
(299,599,qs),
(335,599,o),
(381,643,o),
(381,680,qs),
(381,715,o),
(334,761,o),
(299,760,qs),
(264,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 4 0 4 1 0 128 10 1 6 0 4 1 6 4 103 0 8 8 7 97 11 1 7 7 48 77 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 1 4 0 4 1 0 128 11 1 7 0 8 3 7 8 105 10 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
36 35 26 26 1 0 42 40 35 46 36 46 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(299,0,l),
(279,-12,o),
(264,-32,qs),
(239,-63,o),
(239,-104,qs),
(239,-132,o),
(259,-175,o),
(293,-204,o),
(339,-219,o),
(365,-219,qs),
(386,-219,o),
(426,-212,o),
(444,-201,q),
(429,-122,l),
(409,-132,o),
(386,-132,qs),
(363,-132,o),
(332,-104,o),
(332,-79,qs),
(332,-65,o),
(346,-40,o),
(366,-19,o),
(378,-10,qs),
(386,-4,o),
(395,0,q),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
21 1 5 4 22 1 6 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 2 3 1 2 103 0 0 0 8 95 9 1 8 8 38 77 0 3 3 4 95 7 1 4 4 39 77 0 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 1 0 2 3 1 2 103 0 5 0 6 5 6 101 0 0 0 8 95 9 1 8 8 38 77 0 3 3 4 95 7 1 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 36 0 36 24 36 40 17 17 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(100,64,qs),
(153,5,o),
(248,-5,q),
(233,-17,o),
(221,-32,qs),
(196,-63,o),
(196,-104,qs),
(196,-132,o),
(216,-175,o),
(250,-204,o),
(296,-219,o),
(322,-219,qs),
(343,-219,o),
(383,-212,o),
(401,-201,q),
(386,-122,l),
(366,-132,o),
(343,-132,qs),
(320,-132,o),
(289,-104,o),
(289,-79,qs),
(289,-65,o),
(303,-40,o),
(323,-19,o),
(335,-10,q),
(339,-8,o),
(342,-5,q),
(358,-3,o),
(374,0,qs),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
43 30 2 4 2 31 1 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 7 2 7 3 2 128 9 1 2 4 7 2 4 126 8 1 1 0 7 3 1 7 103 0 0 0 6 97 0 6 6 49 77 0 4 4 5 98 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 7 2 7 3 2 128 9 1 2 4 7 2 4 126 8 1 1 0 7 3 1 7 103 0 4 0 5 4 5 102 0 0 0 6 97 0 6 6 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
10 9 0 0 58 57 53 51 35 33 29 27 13 12 9 60 10 60 0 8 0 8 36 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(581,0,l),
(581,128,l),
(220,128,l),
(220,285,l),
(535,285,l),
(535,414,l),
(220,414,l),
(220,579,l),
(581,579,l),
(581,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(377,780,l),
(527,950,l),
(401,950,l),
(333,864,l),
(264,950,l),
(138,950,l),
(289,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 8 6 5 6 8 5 128 0 1 0 2 3 1 2 103 7 1 6 6 44 77 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
7 1 6 8 6 133 0 8 5 8 133 0 1 0 2 3 1 2 103 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 18 17 16 15 13 12 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,172,o),
(176,219,q),
(536,219,l),
(547,285,o),
(526,401,o),
(465,488,o),
(361,538,o),
(290,538,qs),
(229,538,o),
(134,498,o),
(70,425,o),
(35,325,o),
(35,266,qs),
(35,136,o),
(166,-8,o),
(294,-8,qs),
(336,-8,o),
(412,9,o),
(475,47,o),
(520,107,o),
(531,148,q),
(383,148,l),
(369,126,o),
(326,107,o),
(296,107,qs),
(238,107,o)
);
},
{
closed = 1;
nodes = (
(182,361,o),
(241,416,o),
(294,417,qs),
(316,417,o),
(357,405,o),
(387,380,o),
(405,341,o),
(405,316,q),
(177,316,l)
);
},
{
closed = 1;
nodes = (
(341,599,l),
(491,769,l),
(365,769,l),
(297,683,l),
(228,769,l),
(102,769,l),
(253,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
37 1 9 7 1 76 8 1 7 9 7 133 0 9 3 9 133 0 1 4 0 4 1 0 128 11 1 6 0 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 10 1 0 0 2 97 0 2 2 50 2 78 26 26 1 0 41 40 39 38 36 35 26 34 26 34 32 30 23 22 18 16 10 8 4 3 0 25 1 25 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,483,o),
(253,547,o),
(325,586,o),
(375,588,qs),
(438,590,o),
(529,528,o),
(539,477,q),
(679,477,l),
(674,537,o),
(622,627,o),
(542,687,o),
(438,717,o),
(381,717,qs),
(298,717,o),
(169,664,o),
(81,569,o),
(36,435,o),
(36,354,qs),
(36,275,o),
(81,143,o),
(168,47,o),
(297,-6,o),
(380,-6,qs),
(460,-6,o),
(574,43,o),
(612,83,qs),
(639,111,o),
(672,182,o),
(689,258,o),
(693,338,o),
(692,376,q),
(372,376,l),
(372,259,l),
(550,259,l),
(547,224,o),
(518,172,o),
(472,139,o),
(413,123,o),
(382,124,qs),
(331,125,o),
(257,163,o),
(209,226,o),
(186,309,o),
(186,355,qs),
(186,400,o)
);
},
{
closed = 1;
nodes = (
(329,950,l),
(180,780,l),
(305,780,l),
(373,866,l),
(443,780,l),
(569,780,l),
(417,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
47 1 7 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
8 1 7 9 4 9 7 4 128 0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 9 9 44 77 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 9 7 9 133 8 1 7 4 7 133 0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
51 50 18 20 34 20 40 39 17 20 36 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,-54,o),
(406,-110,o),
(351,-144,o),
(308,-144,qs),
(268,-144,o),
(212,-106,o),
(208,-82,q),
(58,-82,l),
(65,-132,o),
(110,-204,o),
(179,-251,o),
(263,-272,o),
(309,-272,qs),
(345,-272,o),
(415,-258,o),
(477,-227,o),
(528,-181,o),
(546,-148,qs),
(562,-121,o),
(578,-62,o),
(585,1,o),
(585,65,o),
(585,96,qs),
(585,527,l),
(463,527,l),
(448,473,l),
(417,508,o),
(331,538,o),
(294,536,q),
(237,537,o),
(138,499,o),
(107,465,qs),
(35,387,o),
(35,257,qs),
(35,202,o),
(65,98,o),
(103,58,qs),
(137,23,o),
(230,-8,o),
(279,-8,qs),
(328,-8,o),
(412,20,o),
(442,54,q),
(442,18,o)
);
},
{
closed = 1;
nodes = (
(228,138,o),
(194,177,o),
(177,230,o),
(177,263,qs),
(177,294,o),
(193,348,o),
(226,388,o),
(277,412,o),
(310,412,qs),
(374,411,o),
(443,330,o),
(443,268,qs),
(443,237,o),
(427,182,o),
(395,141,o),
(344,117,o),
(311,117,qs),
(278,117,o)
);
},
{
closed = 1;
nodes = (
(261,769,l),
(112,599,l),
(237,599,l),
(305,685,l),
(375,599,l),
(501,599,l),
(349,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
64 1 8 10 17 1 7 1 0 1 0 6 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
64 1 8 10 17 1 7 2 0 1 0 6 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 10 8 10 133 9 1 8 1 8 133 0 4 0 5 0 4 5 128 0 7 7 1 97 2 1 1 1 49 77 11 1 6 6 0 97 0 0 0 50 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 10 8 10 133 9 1 8 1 8 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 11 1 6 6 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 10 8 10 133 9 1 8 1 8 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 11 1 6 6 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
45 44 68 67 66 65 63 62 53 51 44 61 45 61 34 20 42 19 41 34 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,483,o),
(253,547,o),
(325,586,o),
(375,588,qs),
(438,590,o),
(529,528,o),
(539,477,q),
(679,477,l),
(674,537,o),
(622,627,o),
(542,687,o),
(438,717,o),
(381,717,qs),
(298,717,o),
(169,664,o),
(81,569,o),
(36,435,o),
(36,354,qs),
(36,275,o),
(81,143,o),
(168,47,o),
(297,-6,o),
(380,-6,qs),
(460,-6,o),
(574,43,o),
(612,83,qs),
(639,111,o),
(672,182,o),
(689,258,o),
(693,338,o),
(692,376,q),
(372,376,l),
(372,259,l),
(550,259,l),
(547,224,o),
(518,172,o),
(472,139,o),
(413,123,o),
(382,124,qs),
(331,125,o),
(257,163,o),
(209,226,o),
(186,309,o),
(186,355,qs),
(186,400,o)
);
},
{
closed = 1;
nodes = (
(189,889,o),
(218,827,o),
(267,788,o),
(335,770,o),
(376,770,qs),
(416,770,o),
(484,789,o),
(534,828,o),
(562,889,o),
(563,932,q),
(453,932,l),
(451,896,o),
(411,863,o),
(376,863,qs),
(341,863,o),
(300,897,o),
(299,932,q),
(189,932,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 0 9 4 7 9 105 11 10 2 8 0 5 2 8 5 103 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 45 45 45 62 45 62 58 56 18 38 34 20 40 39 17 20 36 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,-54,o),
(406,-110,o),
(351,-144,o),
(308,-144,qs),
(268,-144,o),
(212,-106,o),
(208,-82,q),
(58,-82,l),
(65,-132,o),
(110,-204,o),
(179,-251,o),
(263,-272,o),
(309,-272,qs),
(345,-272,o),
(415,-258,o),
(477,-227,o),
(528,-181,o),
(546,-148,qs),
(562,-121,o),
(578,-62,o),
(585,1,o),
(585,65,o),
(585,96,qs),
(585,527,l),
(463,527,l),
(448,473,l),
(417,508,o),
(331,538,o),
(294,536,q),
(237,537,o),
(138,499,o),
(107,465,qs),
(35,387,o),
(35,257,qs),
(35,202,o),
(65,98,o),
(103,58,qs),
(137,23,o),
(230,-8,o),
(279,-8,qs),
(328,-8,o),
(412,20,o),
(442,54,q),
(442,18,o)
);
},
{
closed = 1;
nodes = (
(228,138,o),
(194,177,o),
(177,230,o),
(177,263,qs),
(177,294,o),
(193,348,o),
(226,388,o),
(277,412,o),
(310,412,qs),
(374,411,o),
(443,330,o),
(443,268,qs),
(443,237,o),
(427,182,o),
(395,141,o),
(344,117,o),
(311,117,qs),
(278,117,o)
);
},
{
closed = 1;
nodes = (
(140,708,o),
(169,646,o),
(218,607,o),
(286,589,o),
(327,589,qs),
(367,589,o),
(435,608,o),
(485,647,o),
(513,708,o),
(514,751,q),
(404,751,l),
(402,715,o),
(362,682,o),
(327,682,qs),
(292,682,o),
(251,716,o),
(250,751,q),
(140,751,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
17 1 7 1 0 1 0 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
17 1 7 2 0 1 0 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
13 11 2 9 8 9 133 0 4 0 5 0 4 5 128 0 8 0 10 1 8 10 105 0 7 7 1 97 2 1 1 1 49 77 12 1 6 6 0 98 0 0 0 50 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
13 11 2 9 8 9 133 0 4 0 5 0 4 5 128 0 8 0 10 1 8 10 105 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 12 1 6 6 0 98 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
13 11 2 9 8 9 133 0 4 0 5 0 4 5 128 0 8 0 10 1 8 10 105 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 12 1 6 6 0 98 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
62 62 45 44 62 79 62 79 75 73 69 68 66 64 53 51 44 61 45 61 34 20 42 19 41 34 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,483,o),
(253,547,o),
(325,586,o),
(375,588,qs),
(438,590,o),
(529,528,o),
(539,477,q),
(679,477,l),
(674,537,o),
(622,627,o),
(542,687,o),
(438,717,o),
(381,717,qs),
(298,717,o),
(169,664,o),
(81,569,o),
(36,435,o),
(36,354,qs),
(36,275,o),
(81,143,o),
(168,47,o),
(297,-6,o),
(380,-6,qs),
(460,-6,o),
(574,43,o),
(612,83,qs),
(639,111,o),
(672,182,o),
(689,258,o),
(693,338,o),
(692,376,q),
(372,376,l),
(372,259,l),
(550,259,l),
(547,224,o),
(518,172,o),
(472,139,o),
(413,123,o),
(382,124,qs),
(331,125,o),
(257,163,o),
(209,226,o),
(186,309,o),
(186,355,qs),
(186,400,o)
);
},
{
closed = 1;
nodes = (
(299,896,o),
(299,861,qs),
(299,824,o),
(344,780,o),
(381,780,qs),
(417,780,o),
(463,824,o),
(463,861,qs),
(463,896,o),
(416,942,o),
(381,941,qs),
(346,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 5 6 2 6 5 2 128 9 1 7 0 8 4 7 8 105 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 46 45 52 50 45 56 46 56 34 20 40 39 17 20 36 10 8 29 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,-54,o),
(406,-110,o),
(351,-144,o),
(308,-144,qs),
(268,-144,o),
(212,-106,o),
(208,-82,q),
(58,-82,l),
(65,-132,o),
(110,-204,o),
(179,-251,o),
(263,-272,o),
(309,-272,qs),
(345,-272,o),
(415,-258,o),
(477,-227,o),
(528,-181,o),
(546,-148,qs),
(562,-121,o),
(578,-62,o),
(585,1,o),
(585,65,o),
(585,96,qs),
(585,527,l),
(463,527,l),
(448,473,l),
(417,508,o),
(331,538,o),
(294,536,q),
(237,537,o),
(138,499,o),
(107,465,qs),
(35,387,o),
(35,257,qs),
(35,202,o),
(65,98,o),
(103,58,qs),
(137,23,o),
(230,-8,o),
(279,-8,qs),
(328,-8,o),
(412,20,o),
(442,54,q),
(442,18,o)
);
},
{
closed = 1;
nodes = (
(228,138,o),
(194,177,o),
(177,230,o),
(177,263,qs),
(177,294,o),
(193,348,o),
(226,388,o),
(277,412,o),
(310,412,qs),
(374,411,o),
(443,330,o),
(443,268,qs),
(443,237,o),
(427,182,o),
(395,141,o),
(344,117,o),
(311,117,qs),
(278,117,o)
);
},
{
closed = 1;
nodes = (
(222,715,o),
(222,680,qs),
(222,643,o),
(267,599,o),
(304,599,qs),
(340,599,o),
(386,643,o),
(386,680,qs),
(386,715,o),
(339,761,o),
(304,760,qs),
(269,760,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
17 1 7 1 0 1 0 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
17 1 7 2 0 1 0 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 4 0 5 0 4 5 128 0 9 9 8 97 11 1 8 8 48 77 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 50 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 0 5 0 4 5 128 11 1 8 0 9 1 8 9 105 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 50 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 4 0 5 0 4 5 128 11 1 8 0 9 1 8 9 105 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 10 1 6 6 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 4 0 5 0 4 5 128 11 1 8 0 9 1 8 9 105 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 10 1 6 6 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
63 62 45 44 69 67 62 73 63 73 53 51 44 61 45 61 34 20 42 19 41 34 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,285,l),
(533,285,l),
(533,0,l),
(678,0,l),
(678,708,l),
(533,708,l),
(533,414,l),
(220,414,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(334,950,l),
(185,780,l),
(310,780,l),
(378,866,l),
(448,780,l),
(574,780,l),
(422,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 6 8 1 8 6 1 128 0 0 0 3 2 0 3 104 0 8 8 44 77 5 1 1 1 38 77 4 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 8 6 8 133 7 1 6 1 6 133 0 0 0 3 2 0 3 104 5 1 1 1 38 77 4 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 17 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,271,ls),
(197,297,o),
(208,346,o),
(233,386,o),
(280,411,o),
(310,412,qs),
(340,412,o),
(381,394,o),
(407,357,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,346,o),
(536,440,o),
(507,475,qs),
(482,503,o),
(406,538,o),
(355,538,qs),
(329,538,o),
(284,529,o),
(262,519,qs),
(241,508,o),
(211,485,o),
(197,468,q),
(197,708,l)
);
},
{
closed = 1;
nodes = (
(267,939,l),
(118,769,l),
(243,769,l),
(311,855,l),
(381,769,l),
(507,769,l),
(355,939,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
32 1 5 7 0 1 2 0 2 76 0 7 5 7 133 6 1 5 4 5 133 0 4 4 38 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 17 18 17 17 21 37 22 37 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(63,786,o),
(63,808,o),
(69,829,o),
(82,843,o),
(93,843,qs),
(105,843,o),
(133,821,o),
(167,794,o),
(208,773,o),
(236,773,qs),
(267,774,o),
(309,798,o),
(334,840,o),
(344,897,o),
(344,930,q),
(252,930,l),
(252,922,o),
(252,901,o),
(247,882,o),
(235,869,o),
(223,869,qs),
(211,869,o),
(184,890,o),
(152,917,o),
(113,936,o),
(85,936,qs),
(54,935,o),
(9,910,o),
(-17,868,o),
(-28,811,o),
(-28,778,q),
(64,778,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 5 4 2 5 105 0 3 7 6 2 4 1 3 4 105 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
7 1 6 5 4 5 6 4 128 0 2 0 5 6 2 5 105 0 3 0 4 1 3 4 105 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
4 4 4 35 4 35 35 41 35 37 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
},
{
closed = 1;
nodes = (
(39,605,o),
(39,627,o),
(45,648,o),
(58,662,o),
(69,662,qs),
(81,662,o),
(109,640,o),
(143,613,o),
(184,592,o),
(212,592,qs),
(243,593,o),
(285,617,o),
(310,659,o),
(320,716,o),
(320,749,q),
(228,749,l),
(228,741,o),
(228,720,o),
(223,701,o),
(211,688,o),
(199,688,qs),
(187,688,o),
(160,709,o),
(128,736,o),
(89,755,o),
(61,755,qs),
(30,754,o),
(-15,729,o),
(-41,687,o),
(-52,630,o),
(-52,597,q),
(40,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 2 97 0 2 2 48 77 7 6 2 4 4 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 0 5 4 2 5 105 7 6 2 4 4 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 5 4 2 5 105 0 3 7 6 2 4 1 3 4 105 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
7 1 6 5 4 5 6 4 128 0 2 0 5 6 2 5 105 0 3 0 4 1 3 4 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
4 4 4 35 4 35 35 41 35 37 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(-11,805,l),
(306,805,l),
(306,919,l),
(-11,919,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 38 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
},
{
closed = 1;
nodes = (
(-22,624,l),
(275,624,l),
(275,738,l),
(-22,738,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 41 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(-39,889,o),
(-10,827,o),
(39,788,o),
(107,770,o),
(148,770,qs),
(188,770,o),
(256,789,o),
(306,828,o),
(334,889,o),
(335,932,q),
(225,932,l),
(223,896,o),
(183,863,o),
(148,863,qs),
(113,863,o),
(72,897,o),
(71,932,q),
(-39,932,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 5 2 3 2 3 133 0 2 0 4 1 2 4 105 0 1 1 38 77 0 0 0 39 0 78 4 4 4 21 4 21 36 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,527,l)
);
},
{
closed = 1;
nodes = (
(-60,708,o),
(-31,646,o),
(18,607,o),
(86,589,o),
(127,589,qs),
(167,589,o),
(235,608,o),
(285,647,o),
(313,708,o),
(314,751,q),
(204,751,l),
(202,715,o),
(162,682,o),
(127,682,qs),
(92,682,o),
(51,716,o),
(50,751,q),
(-60,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 5 2 3 2 3 133 0 2 0 4 1 2 4 105 0 1 1 41 77 0 0 0 39 0 78 4 4 4 21 4 21 36 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(102,0,l),
(82,-12,o),
(67,-32,qs),
(42,-63,o),
(42,-104,qs),
(42,-132,o),
(62,-175,o),
(96,-204,o),
(142,-219,o),
(168,-219,qs),
(189,-219,o),
(229,-212,o),
(247,-201,q),
(232,-122,l),
(212,-132,o),
(189,-132,qs),
(166,-132,o),
(135,-104,o),
(135,-79,qs),
(135,-65,o),
(149,-40,o),
(169,-19,o),
(181,-10,qs),
(189,-4,o),
(198,0,q),
(220,0,l),
(220,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 13 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 4 4 38 77 3 1 0 0 39 77 0 1 1 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 1 2 101 0 4 4 38 77 3 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 24 36 40 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,726,o),
(47,688,qs),
(47,648,o),
(96,603,o),
(134,603,qs),
(173,603,o),
(221,648,o),
(221,688,qs),
(221,726,o),
(173,772,o),
(134,772,qs),
(96,772,o)
);
},
{
closed = 1;
nodes = (
(64,527,l),
(64,0,l),
(88,0,l),
(68,-12,o),
(53,-32,qs),
(28,-63,o),
(28,-104,qs),
(28,-132,o),
(48,-175,o),
(82,-204,o),
(128,-219,o),
(154,-219,qs),
(175,-219,o),
(215,-212,o),
(233,-201,q),
(218,-122,l),
(198,-132,o),
(175,-132,qs),
(152,-132,o),
(121,-104,o),
(121,-79,qs),
(121,-65,o),
(135,-40,o),
(155,-19,o),
(167,-10,qs),
(175,-4,o),
(184,0,q),
(205,0,l),
(205,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
24 1 3 2 25 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 0 97 7 1 0 0 48 77 0 6 6 41 77 5 1 2 2 39 77 0 3 3 4 97 0 4 4 43 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
7 1 0 0 1 6 0 1 105 0 6 6 41 77 5 1 2 2 39 77 0 3 3 4 97 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
7 1 0 0 1 6 0 1 105 0 3 0 4 3 4 101 0 6 6 41 77 5 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 40 39 38 37 29 27 23 21 13 12 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 269;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(65,896,o),
(65,861,qs),
(65,824,o),
(110,780,o),
(147,780,qs),
(183,780,o),
(229,824,o),
(229,861,qs),
(229,896,o),
(182,942,o),
(147,941,qs),
(112,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,708,l),
(377,237,ls),
(377,187,o),
(333,121,o),
(277,122,qs),
(220,123,o),
(177,188,o),
(177,238,q),
(31,238,l),
(29,180,o),
(63,90,o),
(94,58,qs),
(158,-5,o),
(275,-6,qs),
(337,-8,o),
(429,26,o),
(459,56,qs),
(493,90,o),
(522,188,o),
(522,254,qs),
(522,708,l)
);
},
{
closed = 1;
nodes = (
(381,950,l),
(232,780,l),
(357,780,l),
(425,866,l),
(495,780,l),
(621,780,l),
(469,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
5 1 4 6 3 6 4 3 128 0 1 3 2 2 1 114 0 6 6 44 77 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
5 1 4 6 3 6 4 3 128 0 1 3 2 3 1 2 128 0 6 6 44 77 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 4 6 133 5 1 4 3 4 133 0 1 3 2 3 1 2 128 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 18 17 19 34 20 37 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,-81,o),
(40,-118,o),
(7,-118,qs),
(-43,-118,l),
(-43,-242,l),
(36,-242,ls),
(221,-241,o),
(219,-65,qs),
(219,527,l),
(78,527,l),
(78,-48,ls)
);
},
{
closed = 1;
nodes = (
(103,769,l),
(-46,599,l),
(79,599,l),
(147,685,l),
(217,599,l),
(343,599,l),
(191,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 3 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 5 3 5 133 4 1 3 0 3 133 0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 3 5 133 4 1 3 0 3 133 0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 18 19 33 34 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(566,0,l),
(566,128,l),
(219,128,l),
(219,708,l)
);
},
{
closed = 1;
nodes = (
(218,780,l),
(354,950,l),
(214,950,l),
(106,780,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 4 3 95 0 3 3 44 77 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 4 2 3 4 103 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,708,l)
);
},
{
closed = 1;
nodes = (
(162,779,l),
(298,949,l),
(158,949,l),
(50,779,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 2 95 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(217,0,l),
(217,472,l),
(553,0,l),
(692,0,l),
(692,708,l),
(550,708,l),
(550,234,l),
(214,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(421,780,l),
(557,950,l),
(417,950,l),
(309,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 1 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 5 4 95 0 4 4 44 77 6 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 4 0 5 0 4 5 103 6 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 13 12 11 10 0 9 0 9 18 17 18 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,260,ls),
(197,287,o),
(206,340,o),
(232,384,o),
(278,412,o),
(311,412,qs),
(338,412,o),
(381,394,o),
(407,357,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,346,o),
(538,439,o),
(509,474,qs),
(485,504,o),
(407,538,o),
(356,538,qs),
(262,538,o),
(198,460,q),
(191,527,l)
);
},
{
closed = 1;
nodes = (
(351,599,l),
(487,769,l),
(347,769,l),
(239,599,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 6 0 5 6 103 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 6 0 5 6 103 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 21 37 22 33 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(217,0,l),
(217,472,l),
(553,0,l),
(692,0,l),
(692,708,l),
(550,708,l),
(550,234,l),
(214,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(434,780,l),
(584,950,l),
(458,950,l),
(390,864,l),
(321,950,l),
(195,950,l),
(346,780,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
12 1 6 4 6 1 2 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 4 0 4 6 0 128 5 1 4 4 44 77 7 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
5 1 4 6 4 133 0 6 0 6 133 7 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 16 15 14 13 11 10 0 9 0 9 18 17 18 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,260,ls),
(197,287,o),
(206,340,o),
(232,384,o),
(278,412,o),
(311,412,qs),
(338,412,o),
(381,394,o),
(407,357,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,346,o),
(538,439,o),
(509,474,qs),
(485,504,o),
(407,538,o),
(356,538,qs),
(262,538,o),
(198,460,q),
(191,527,l)
);
},
{
closed = 1;
nodes = (
(372,599,l),
(522,769,l),
(396,769,l),
(328,683,l),
(259,769,l),
(133,769,l),
(284,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
28 1 7 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 5 0 5 7 0 128 6 1 5 5 1 95 3 1 1 1 39 77 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 7 5 0 5 7 0 128 6 1 5 5 1 95 3 1 1 1 39 77 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 18 17 17 21 37 22 33 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(211,805,l),
(568,805,l),
(568,919,l),
(211,919,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 5 0 4 2 5 4 103 0 1 1 2 97 6 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 40 40 21 20 40 43 40 43 42 41 31 29 20 39 21 39 40 36 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(129,624,l),
(486,624,l),
(486,738,l),
(129,738,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
8 1 5 0 4 3 5 4 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 50 2 78 28 28 13 12 1 0 28 31 28 31 30 29 21 19 12 27 13 27 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(202,889,o),
(231,827,o),
(280,788,o),
(348,770,o),
(389,770,qs),
(429,770,o),
(497,789,o),
(547,828,o),
(575,889,o),
(576,932,q),
(466,932,l),
(464,896,o),
(424,863,o),
(389,863,qs),
(354,863,o),
(313,897,o),
(312,932,q),
(202,932,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
9 7 2 5 4 5 133 0 4 0 6 2 4 6 105 0 1 1 2 97 8 1 2 2 46 77 0 0 0 3 98 0 3 3 47 3 78 40 40 21 20 40 57 40 57 53 51 47 46 44 42 31 29 20 39 21 39 40 36 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(117,708,o),
(146,646,o),
(195,607,o),
(263,589,o),
(304,589,qs),
(344,589,o),
(412,608,o),
(462,647,o),
(490,708,o),
(491,751,q),
(381,751,l),
(379,715,o),
(339,682,o),
(304,682,qs),
(269,682,o),
(228,716,o),
(227,751,q),
(117,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
10 7 2 5 4 5 133 0 4 0 6 3 4 6 105 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 98 9 1 2 2 50 2 78 28 28 13 12 1 0 28 45 28 45 41 39 35 34 32 30 21 19 12 27 13 27 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,486,o),
(260,550,o),
(336,588,o),
(386,588,qs),
(437,588,o),
(513,550,o),
(562,485,o),
(587,401,o),
(587,356,qs),
(587,310,o),
(561,225,o),
(511,160,o),
(435,123,o),
(386,124,qs),
(335,125,o),
(259,164,o),
(210,228,o),
(185,311,o),
(185,357,qs),
(185,403,o)
);
},
{
closed = 1;
nodes = (
(176,664,o),
(85,568,o),
(36,435,o),
(36,355,qs),
(36,277,o),
(83,145,o),
(172,49,o),
(301,-6,o),
(384,-6,qs),
(467,-7,o),
(598,48,o),
(688,146,o),
(736,280,o),
(736,358,qs),
(736,438,o),
(688,570,o),
(598,665,o),
(468,717,o),
(387,717,qs),
(306,717,o)
);
},
{
closed = 1;
nodes = (
(243,780,l),
(346,780,l),
(454,950,l),
(322,950,l)
);
},
{
closed = 1;
nodes = (
(420,780,l),
(526,780,l),
(654,950,l),
(522,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
6 1 4 4 5 95 10 7 9 3 5 5 44 77 0 1 1 2 97 8 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
10 7 9 3 5 6 1 4 2 5 4 103 0 1 1 2 97 8 1 2 2 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
44 44 40 40 21 20 44 47 44 47 46 45 40 43 40 43 42 41 31 29 20 39 21 39 40 36 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,328,o),
(426,265,qs),
(426,201,o),
(366,117,o),
(301,117,qs),
(236,117,o),
(174,201,o),
(174,265,qs),
(174,328,o),
(236,412,o),
(301,412,qs),
(366,412,o)
);
},
{
closed = 1;
nodes = (
(568,136,o),
(568,266,qs),
(568,328,o),
(531,429,o),
(462,501,o),
(363,538,o),
(301,538,qs),
(238,538,o),
(139,501,o),
(72,429,o),
(35,328,o),
(35,266,qs),
(35,137,o),
(173,-8,o),
(301,-8,qs),
(429,-8,o)
);
},
{
closed = 1;
nodes = (
(157,599,l),
(260,599,l),
(368,769,l),
(236,769,l)
);
},
{
closed = 1;
nodes = (
(334,599,l),
(440,599,l),
(568,769,l),
(436,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
11 7 10 3 5 6 1 4 3 5 4 103 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 50 2 78 32 32 28 28 13 12 1 0 32 35 32 35 34 33 28 31 28 31 30 29 21 19 12 27 13 27 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,254,l),
(333,254,l),
(476,0,l),
(638,0,l),
(481,268,l),
(523,279,o),
(555,305,qs),
(590,335,o),
(631,421,o),
(632,483,qs),
(633,529,o),
(603,618,o),
(568,650,qs),
(546,670,o),
(495,693,o),
(441,705,o),
(385,708,o),
(357,708,qs),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(361,579,ls),
(389,579,o),
(436,572,o),
(453,561,qs),
(471,550,o),
(491,510,o),
(490,478,qs),
(489,448,o),
(468,409,o),
(433,386,o),
(385,376,o),
(358,376,qs),
(220,376,l)
);
},
{
closed = 1;
nodes = (
(377,780,l),
(513,950,l),
(373,950,l),
(265,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
9 1 4 0 2 1 4 2 103 0 7 7 6 95 0 6 6 44 77 0 5 5 0 95 8 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 0 7 0 6 7 103 9 1 4 0 2 1 4 2 103 0 5 5 0 95 8 1 0 0 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
22 21 2 0 38 37 36 35 33 31 21 34 22 34 19 18 17 16 15 14 0 20 2 20 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,237,ls),
(197,275,o),
(208,335,o),
(231,361,qs),
(246,377,o),
(285,394,o),
(327,402,o),
(374,403,o),
(397,403,q),
(397,533,l),
(387,535,o),
(363,537,o),
(350,537,qs),
(299,537,o),
(226,499,o),
(194,461,q),
(186,527,l)
);
},
{
closed = 1;
nodes = (
(277,599,l),
(413,769,l),
(273,769,l),
(165,599,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
6 1 3 0 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 5 0 4 5 103 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 5 0 4 5 103 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 23 35 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,254,l),
(333,254,l),
(476,0,l),
(638,0,l),
(481,268,l),
(523,279,o),
(555,305,qs),
(590,335,o),
(631,421,o),
(632,483,qs),
(633,529,o),
(603,618,o),
(568,650,qs),
(546,670,o),
(495,693,o),
(441,705,o),
(385,708,o),
(357,708,qs),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(361,579,ls),
(389,579,o),
(436,572,o),
(453,561,qs),
(471,550,o),
(491,510,o),
(490,478,qs),
(489,448,o),
(468,409,o),
(433,386,o),
(385,376,o),
(358,376,qs),
(220,376,l)
);
},
{
closed = 1;
nodes = (
(392,780,l),
(542,950,l),
(416,950,l),
(348,864,l),
(279,950,l),
(153,950,l),
(304,780,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
37 1 8 6 13 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 8 6 0 6 8 0 128 10 1 4 0 2 1 4 2 103 7 1 6 6 44 77 0 5 5 0 95 9 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 8 6 0 6 8 0 128 10 1 4 0 2 1 4 2 103 0 5 5 0 95 9 1 0 0 38 77 7 1 6 6 1 95 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
22 21 2 0 41 40 39 38 36 35 33 31 21 34 22 34 19 18 17 16 15 14 0 20 2 20 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,237,ls),
(197,275,o),
(208,335,o),
(231,361,qs),
(246,377,o),
(285,394,o),
(327,402,o),
(374,403,o),
(397,403,q),
(397,533,l),
(387,535,o),
(363,537,o),
(350,537,qs),
(299,537,o),
(226,499,o),
(194,461,q),
(186,527,l)
);
},
{
closed = 1;
nodes = (
(290,599,l),
(440,769,l),
(314,769,l),
(246,683,l),
(177,769,l),
(51,769,l),
(202,599,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
22 1 6 4 6 1 1 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
22 1 6 4 6 1 3 0 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 4 6 4 133 0 6 0 6 133 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
5 1 4 6 4 133 0 6 0 6 133 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 18 17 17 23 35 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,557,o),
(542,637,o),
(475,689,o),
(386,716,o),
(334,717,qs),
(287,718,o),
(193,700,o),
(115,654,o),
(65,575,o),
(62,515,qs),
(60,464,o),
(99,380,o),
(138,353,qs),
(170,330,o),
(251,305,o),
(289,295,qs),
(306,291,o),
(332,285,o),
(356,280,o),
(381,273,o),
(397,269,qs),
(420,263,o),
(459,233,o),
(459,201,qs),
(459,178,o),
(439,148,o),
(404,131,o),
(358,125,o),
(333,126,qs),
(309,127,o),
(262,137,o),
(224,159,o),
(196,193,o),
(190,219,q),
(42,219,l),
(45,162,o),
(91,78,o),
(168,22,o),
(268,-7,o),
(325,-8,qs),
(384,-10,o),
(482,13,o),
(519,39,qs),
(558,65,o),
(604,151,o),
(604,212,qs),
(603,268,o),
(565,338,o),
(503,380,o),
(423,404,o),
(380,413,qs),
(368,416,o),
(336,422,o),
(302,431,o),
(267,442,o),
(252,449,qs),
(231,459,o),
(206,491,o),
(207,514,qs),
(207,536,o),
(229,566,o),
(263,584,o),
(302,590,o),
(320,590,qs),
(371,588,o),
(439,549,o),
(445,504,q),
(589,504,l)
);
},
{
closed = 1;
nodes = (
(371,780,l),
(507,950,l),
(367,950,l),
(259,780,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 7 7 6 95 0 6 6 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 7 7 6 95 0 6 6 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 0 7 4 6 7 103 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 71 70 69 68 0 67 0 67 63 61 39 37 33 32 28 26 34 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,403,o),
(328,370,q),
(464,370,l),
(462,416,o),
(427,480,o),
(370,520,o),
(294,538,o),
(251,538,qs),
(212,538,o),
(137,522,o),
(78,485,o),
(39,424,o),
(37,381,qs),
(34,332,o),
(73,272,o),
(102,254,qs),
(121,241,o),
(167,226,o),
(214,216,o),
(262,206,o),
(283,201,qs),
(304,197,o),
(341,175,o),
(340,149,qs),
(340,138,o),
(325,119,o),
(304,110,o),
(279,107,o),
(268,107,qs),
(230,107,o),
(175,133,o),
(169,167,q),
(27,167,l),
(30,124,o),
(65,63,o),
(91,42,qs),
(127,14,o),
(214,-8,o),
(266,-8,qs),
(311,-8,o),
(399,15,o),
(428,41,qs),
(451,62,o),
(478,121,o),
(478,162,qs),
(479,204,o),
(445,262,o),
(419,278,qs),
(400,290,o),
(350,306,o),
(298,318,o),
(244,329,o),
(222,335,qs),
(199,341,o),
(174,361,o),
(173,378,qs),
(172,393,o),
(186,412,o),
(208,421,o),
(235,425,o),
(250,425,qs),
(281,425,o)
);
},
{
closed = 1;
nodes = (
(301,599,l),
(437,769,l),
(297,769,l),
(189,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 0 7 4 6 7 103 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 65 64 63 62 59 58 54 52 33 31 29 28 23 21 0 61 1 61 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,557,o),
(542,637,o),
(475,689,o),
(386,716,o),
(334,717,qs),
(287,718,o),
(193,700,o),
(115,654,o),
(65,575,o),
(62,515,qs),
(60,464,o),
(99,380,o),
(138,353,qs),
(170,330,o),
(251,305,o),
(289,295,qs),
(306,291,o),
(332,285,o),
(356,280,o),
(381,273,o),
(397,269,qs),
(420,263,o),
(459,233,o),
(459,201,qs),
(459,178,o),
(439,148,o),
(404,131,o),
(358,125,o),
(333,126,qs),
(309,127,o),
(262,137,o),
(224,159,o),
(196,193,o),
(190,219,q),
(42,219,l),
(45,162,o),
(91,78,o),
(168,22,o),
(268,-7,o),
(325,-8,qs),
(384,-10,o),
(482,13,o),
(519,39,qs),
(558,65,o),
(604,151,o),
(604,212,qs),
(603,268,o),
(565,338,o),
(503,380,o),
(423,404,o),
(380,413,qs),
(368,416,o),
(336,422,o),
(302,431,o),
(267,442,o),
(252,449,qs),
(231,459,o),
(206,491,o),
(207,514,qs),
(207,536,o),
(229,566,o),
(263,584,o),
(302,590,o),
(320,590,qs),
(371,588,o),
(439,549,o),
(445,504,q),
(589,504,l)
);
},
{
closed = 1;
nodes = (
(292,950,l),
(143,780,l),
(268,780,l),
(336,866,l),
(406,780,l),
(532,780,l),
(380,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
70 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
7 1 6 8 4 8 6 4 128 9 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 8 8 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
7 1 6 8 4 8 6 4 128 9 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 8 8 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 8 6 8 133 7 1 6 4 6 133 9 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 74 73 72 71 69 68 0 67 0 67 63 61 39 37 33 32 28 26 34 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,403,o),
(328,370,q),
(464,370,l),
(462,416,o),
(427,480,o),
(370,520,o),
(294,538,o),
(251,538,qs),
(212,538,o),
(137,522,o),
(78,485,o),
(39,424,o),
(37,381,qs),
(34,332,o),
(73,272,o),
(102,254,qs),
(121,241,o),
(167,226,o),
(214,216,o),
(262,206,o),
(283,201,qs),
(304,197,o),
(341,175,o),
(340,149,qs),
(340,138,o),
(325,119,o),
(304,110,o),
(279,107,o),
(268,107,qs),
(230,107,o),
(175,133,o),
(169,167,q),
(27,167,l),
(30,124,o),
(65,63,o),
(91,42,qs),
(127,14,o),
(214,-8,o),
(266,-8,qs),
(311,-8,o),
(399,15,o),
(428,41,qs),
(451,62,o),
(478,121,o),
(478,162,qs),
(479,204,o),
(445,262,o),
(419,278,qs),
(400,290,o),
(350,306,o),
(298,318,o),
(244,329,o),
(222,335,qs),
(199,341,o),
(174,361,o),
(173,378,qs),
(172,393,o),
(186,412,o),
(208,421,o),
(235,425,o),
(250,425,qs),
(281,425,o)
);
},
{
closed = 1;
nodes = (
(214,769,l),
(65,599,l),
(190,599,l),
(258,685,l),
(328,599,l),
(454,599,l),
(302,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
64 1 6 8 1 76 0 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 68 67 66 65 63 62 59 58 54 52 33 31 29 28 23 21 0 61 1 61 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,557,o),
(542,637,o),
(475,689,o),
(386,716,o),
(334,717,qs),
(287,718,o),
(193,700,o),
(115,654,o),
(65,575,o),
(62,515,qs),
(60,464,o),
(99,380,o),
(138,353,qs),
(170,330,o),
(251,305,o),
(289,295,qs),
(306,291,o),
(332,285,o),
(356,280,o),
(381,273,o),
(397,269,qs),
(420,263,o),
(459,233,o),
(459,201,qs),
(459,178,o),
(439,148,o),
(404,131,o),
(358,125,o),
(333,126,qs),
(309,127,o),
(262,137,o),
(224,159,o),
(196,193,o),
(190,219,q),
(42,219,l),
(45,162,o),
(91,78,o),
(168,22,o),
(268,-7,o),
(325,-8,qs),
(384,-10,o),
(482,13,o),
(519,39,qs),
(558,65,o),
(604,151,o),
(604,212,qs),
(603,268,o),
(565,338,o),
(503,380,o),
(423,404,o),
(380,413,qs),
(368,416,o),
(336,422,o),
(302,431,o),
(267,442,o),
(252,449,qs),
(231,459,o),
(206,491,o),
(207,514,qs),
(207,536,o),
(229,566,o),
(263,584,o),
(302,590,o),
(320,590,qs),
(371,588,o),
(439,549,o),
(445,504,q),
(589,504,l)
);
},
{
closed = 1;
nodes = (
(377,780,l),
(527,950,l),
(401,950,l),
(333,864,l),
(264,950,l),
(138,950,l),
(289,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
70 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 0 0 0 4 97 0 4 4 46 77 9 1 5 5 6 95 7 1 6 6 44 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 0 0 0 4 97 0 4 4 46 77 9 1 5 5 6 95 7 1 6 6 44 77 0 3 3 1 97 0 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 9 1 5 2 6 5 103 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 74 73 72 71 69 68 0 67 0 67 63 61 39 37 33 32 28 26 34 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,403,o),
(328,370,q),
(464,370,l),
(462,416,o),
(427,480,o),
(370,520,o),
(294,538,o),
(251,538,qs),
(212,538,o),
(137,522,o),
(78,485,o),
(39,424,o),
(37,381,qs),
(34,332,o),
(73,272,o),
(102,254,qs),
(121,241,o),
(167,226,o),
(214,216,o),
(262,206,o),
(283,201,qs),
(304,197,o),
(341,175,o),
(340,149,qs),
(340,138,o),
(325,119,o),
(304,110,o),
(279,107,o),
(268,107,qs),
(230,107,o),
(175,133,o),
(169,167,q),
(27,167,l),
(30,124,o),
(65,63,o),
(91,42,qs),
(127,14,o),
(214,-8,o),
(266,-8,qs),
(311,-8,o),
(399,15,o),
(428,41,qs),
(451,62,o),
(478,121,o),
(478,162,qs),
(479,204,o),
(445,262,o),
(419,278,qs),
(400,290,o),
(350,306,o),
(298,318,o),
(244,329,o),
(222,335,qs),
(199,341,o),
(174,361,o),
(173,378,qs),
(172,393,o),
(186,412,o),
(208,421,o),
(235,425,o),
(250,425,qs),
(281,425,o)
);
},
{
closed = 1;
nodes = (
(308,599,l),
(458,769,l),
(332,769,l),
(264,683,l),
(195,769,l),
(69,769,l),
(220,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
64 1 8 6 1 76 0 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 68 67 66 65 63 62 59 58 54 52 33 31 29 28 23 21 0 61 1 61 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcaron;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,0,l),
(373,0,l),
(373,579,l),
(595,579,l),
(595,708,l),
(6,708,l),
(6,579,l),
(228,579,l)
);
},
{
closed = 1;
nodes = (
(348,780,l),
(498,950,l),
(372,950,l),
(304,864,l),
(235,950,l),
(109,950,l),
(260,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
10 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 6 4 0 4 6 0 128 5 1 4 4 44 77 7 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 6 4 133 0 6 0 6 133 7 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 14 13 12 11 9 8 0 7 0 7 17 17 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(288,786,o),
(288,808,o),
(294,829,o),
(307,843,o),
(318,843,qs),
(330,843,o),
(358,821,o),
(392,794,o),
(433,773,o),
(461,773,qs),
(492,774,o),
(534,798,o),
(559,840,o),
(569,897,o),
(569,930,q),
(477,930,l),
(477,922,o),
(477,901,o),
(472,882,o),
(460,869,o),
(448,869,qs),
(436,869,o),
(409,890,o),
(377,917,o),
(338,936,o),
(310,936,qs),
(279,935,o),
(234,910,o),
(208,868,o),
(197,811,o),
(197,778,q),
(289,778,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
42 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 7 6 4 7 105 0 5 10 8 2 6 1 5 6 105 3 1 1 1 38 77 0 2 2 0 97 9 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
10 1 8 7 6 7 8 6 128 0 4 0 7 8 4 7 105 0 5 0 6 1 5 6 105 3 1 1 1 38 77 0 2 2 0 97 9 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
26 26 1 0 26 57 26 57 53 51 48 46 37 35 32 30 20 19 14 12 7 6 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(210,605,o),
(210,627,o),
(216,648,o),
(229,662,o),
(240,662,qs),
(252,662,o),
(280,640,o),
(314,613,o),
(355,592,o),
(383,592,qs),
(414,593,o),
(456,617,o),
(481,659,o),
(491,716,o),
(491,749,q),
(399,749,l),
(399,741,o),
(399,720,o),
(394,701,o),
(382,688,o),
(370,688,qs),
(358,688,o),
(331,709,o),
(299,736,o),
(260,755,o),
(232,755,qs),
(201,754,o),
(156,729,o),
(130,687,o),
(119,630,o),
(119,597,q),
(211,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
42 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 7 4 97 0 4 4 48 77 10 8 2 6 6 5 97 0 5 5 38 77 3 1 1 1 41 77 9 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 4 0 7 6 4 7 105 10 8 2 6 6 5 97 0 5 5 38 77 3 1 1 1 41 77 9 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 7 6 4 7 105 0 5 10 8 2 6 1 5 6 105 3 1 1 1 41 77 9 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
10 1 8 7 6 7 8 6 128 0 4 0 7 8 4 7 105 0 5 0 6 1 5 6 105 3 1 1 1 41 77 9 1 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
26 26 1 0 26 57 26 57 53 51 48 46 37 35 32 30 22 21 15 13 5 4 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(202,805,l),
(559,805,l),
(559,919,l),
(202,919,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
7 1 5 0 4 1 5 4 103 3 1 1 1 38 77 0 2 2 0 97 6 1 0 0 50 0 78 26 26 1 0 26 29 26 29 28 27 20 19 14 12 7 6 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(124,624,l),
(481,624,l),
(481,738,l),
(124,738,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
7 1 5 0 4 1 5 4 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 26 26 1 0 26 29 26 29 28 27 22 21 15 13 5 4 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(197,889,o),
(226,827,o),
(275,788,o),
(343,770,o),
(384,770,qs),
(424,770,o),
(492,789,o),
(542,828,o),
(570,889,o),
(571,932,q),
(461,932,l),
(459,896,o),
(419,863,o),
(384,863,qs),
(349,863,o),
(308,897,o),
(307,932,q),
(197,932,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 105 3 1 1 1 38 77 0 2 2 0 98 8 1 0 0 50 0 78 26 26 1 0 26 43 26 43 39 37 33 32 30 28 20 19 14 12 7 6 0 25 1 25 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(118,708,o),
(147,646,o),
(196,607,o),
(264,589,o),
(305,589,qs),
(345,589,o),
(413,608,o),
(463,647,o),
(491,708,o),
(492,751,q),
(382,751,l),
(380,715,o),
(340,682,o),
(305,682,qs),
(270,682,o),
(229,716,o),
(228,751,q),
(118,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 26 26 1 0 26 43 26 43 39 37 33 32 30 28 22 21 15 13 5 4 0 25 1 25 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(264,896,o),
(264,845,qs),
(264,794,o),
(329,735,o),
(379,735,qs),
(430,735,o),
(495,794,o),
(495,845,qs),
(495,896,o),
(430,958,o),
(380,958,qs),
(330,958,o)
);
},
{
closed = 1;
nodes = (
(421,865,o),
(421,846,qs),
(421,828,o),
(398,805,o),
(379,805,qs),
(361,805,o),
(338,828,o),
(338,846,qs),
(338,864,o),
(361,887,o),
(379,887,qs),
(398,887,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 5 1 7 5 105 10 1 6 6 4 97 9 1 4 4 44 77 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 1 4 10 1 6 7 4 6 105 0 7 0 5 1 7 5 105 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
39 38 27 26 1 0 45 43 38 49 39 49 33 31 26 37 27 37 20 19 14 12 7 6 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(187,745,o),
(187,694,qs),
(187,643,o),
(252,584,o),
(302,584,qs),
(353,584,o),
(418,643,o),
(418,694,qs),
(418,745,o),
(353,807,o),
(303,807,qs),
(253,807,o)
);
},
{
closed = 1;
nodes = (
(344,714,o),
(344,695,qs),
(344,677,o),
(321,654,o),
(302,654,qs),
(284,654,o),
(261,677,o),
(261,695,qs),
(261,713,o),
(284,736,o),
(302,736,qs),
(321,736,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
9 1 4 10 1 6 7 4 6 105 0 7 0 5 1 7 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 39 38 27 26 1 0 45 43 38 49 39 49 33 31 26 37 27 37 22 21 15 13 5 4 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(293,-8,o),
(376,-8,qs),
(459,-8,o)
);
},
{
closed = 1;
nodes = (
(220,780,l),
(323,780,l),
(431,950,l),
(299,950,l)
);
},
{
closed = 1;
nodes = (
(397,780,l),
(503,780,l),
(631,950,l),
(499,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 5 95 10 7 9 3 5 5 44 77 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
10 7 9 3 5 6 1 4 1 5 4 103 3 1 1 1 38 77 0 2 2 0 97 8 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
30 30 26 26 1 0 30 33 30 33 32 31 26 29 26 29 28 27 20 19 14 12 7 6 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(236,-8,o),
(298,-8,qs),
(325,-8,o),
(382,-1,o),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
},
{
closed = 1;
nodes = (
(150,599,l),
(253,599,l),
(361,769,l),
(229,769,l)
);
},
{
closed = 1;
nodes = (
(327,599,l),
(433,599,l),
(561,769,l),
(429,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
10 7 9 3 5 6 1 4 1 5 4 103 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 30 30 26 26 1 0 30 33 30 33 32 31 26 29 26 29 28 27 22 21 15 13 5 4 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,-6,q),
(318,-17,o),
(306,-32,qs),
(281,-63,o),
(281,-104,qs),
(281,-132,o),
(301,-175,o),
(335,-204,o),
(381,-219,o),
(407,-219,qs),
(428,-219,o),
(468,-212,o),
(486,-201,q),
(471,-122,l),
(451,-132,o),
(428,-132,qs),
(405,-132,o),
(374,-104,o),
(374,-79,qs),
(374,-65,o),
(388,-40,o),
(408,-19,o),
(420,-10,qs),
(427,-5,l),
(478,0,o),
(517,16,qs),
(576,40,o),
(649,128,o),
(682,253,o),
(682,328,qs),
(682,708,l),
(538,708,l),
(538,318,ls),
(538,280,o),
(523,209,o),
(486,154,o),
(424,121,o),
(378,121,qs),
(331,121,o),
(269,154,o),
(231,208,o),
(215,279,o),
(215,318,qs),
(215,708,l),
(70,708,l),
(70,328,ls),
(70,251,o),
(103,128,o),
(176,40,o),
(234,16,qs),
(277,-1,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
49 36 2 3 1 37 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 38 77 0 3 3 4 98 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 102 2 1 0 0 38 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 46 21 37 21 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,178,o),
(195,235,qs),
(195,527,l),
(54,527,l),
(54,231,ls),
(54,176,o),
(74,98,o),
(100,66,qs),
(134,26,o),
(185,9,qs),
(219,-2,o),
(259,-6,q),
(245,-17,o),
(233,-32,qs),
(208,-63,o),
(208,-104,qs),
(208,-132,o),
(228,-175,o),
(262,-204,o),
(308,-219,o),
(334,-219,qs),
(355,-219,o),
(395,-212,o),
(413,-201,q),
(398,-122,l),
(378,-132,o),
(355,-132,qs),
(332,-132,o),
(301,-104,o),
(301,-79,qs),
(301,-65,o),
(315,-40,o),
(335,-19,o),
(347,-10,qs),
(356,-4,l),
(383,0,o),
(407,7,qs),
(433,16,o),
(478,42,o),
(497,66,qs),
(522,98,o),
(543,176,o),
(543,231,qs),
(543,527,l),
(402,527,l),
(402,235,ls),
(404,178,o),
(356,117,o),
(298,117,qs),
(244,118,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
37 24 2 2 0 25 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 0 1 2 1 0 2 128 4 1 1 1 41 77 0 2 2 3 98 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 0 1 2 1 0 2 128 0 2 0 3 2 3 102 4 1 1 1 41 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 46 45 29 27 23 21 5 4 0 49 1 49 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,552,l),
(599,0,l),
(791,0,l),
(959,708,l),
(803,708,l),
(694,165,l),
(588,708,l),
(393,708,l),
(284,165,l),
(168,708,l),
(3,708,l),
(183,0,l),
(378,0,l)
);
},
{
closed = 1;
nodes = (
(447,950,l),
(298,780,l),
(423,780,l),
(491,866,l),
(561,780,l),
(687,780,l),
(535,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
15 1 5 7 11 6 3 3 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 5 7 0 7 5 0 128 0 7 7 44 77 2 1 2 0 0 38 77 8 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 7 5 7 133 6 1 5 0 5 133 2 1 2 0 0 38 77 8 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 19 18 17 16 14 13 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 962;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,349,l),
(532,0,l),
(687,0,l),
(849,527,l),
(702,527,l),
(607,161,l),
(500,527,l),
(359,527,l),
(251,161,l),
(156,527,l),
(0,527,l),
(163,0,l),
(323,0,l)
);
},
{
closed = 1;
nodes = (
(387,769,l),
(238,599,l),
(363,599,l),
(431,685,l),
(501,599,l),
(627,599,l),
(475,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
15 1 5 7 11 6 3 3 3 0 2 76 0 7 5 7 133 6 1 5 0 5 133 2 1 2 0 0 41 77 8 4 2 3 3 39 3 78 0 0 19 18 17 16 14 13 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,708,l),
(2,708,l),
(267,263,l),
(267,0,l),
(412,0,l),
(412,265,l),
(674,708,l),
(510,708,l),
(341,402,l)
);
},
{
closed = 1;
nodes = (
(299,950,l),
(150,780,l),
(275,780,l),
(343,866,l),
(413,780,l),
(539,780,l),
(387,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
11 1 3 5 8 5 2 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 5 0 5 3 0 128 0 5 5 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 5 0 5 3 0 128 2 1 0 0 38 77 0 5 5 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 18 18 18 18 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-141,o),
(273,-141,qs),
(214,-141,o),
(127,-109,o),
(101,-90,q),
(56,-210,l),
(104,-241,o),
(218,-274,o),
(276,-273,qs),
(355,-274,o),
(468,-226,o),
(503,-186,qs),
(528,-157,o),
(556,-89,o),
(567,-17,o),
(568,58,o),
(568,94,qs),
(568,527,l),
(426,527,l),
(426,273,ls),
(426,243,o),
(420,192,o),
(407,169,qs),
(392,142,o),
(340,117,o),
(310,117,qs),
(247,117,o),
(223,153,q),
(208,170,o),
(199,221,o),
(199,248,qs),
(199,527,l),
(58,527,l),
(58,231,ls),
(58,180,o),
(76,93,o),
(99,60,qs),
(124,26,o),
(207,-8,o),
(264,-8,qs),
(313,-8,o),
(397,22,o),
(426,59,q),
(426,23,o),
(420,-51,o),
(400,-82,qs),
(382,-110,o)
);
},
{
closed = 1;
nodes = (
(273,769,l),
(124,599,l),
(249,599,l),
(317,685,l),
(387,599,l),
(513,599,l),
(361,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
49 1 6 8 3 1 0 2 41 1 5 0 40 1 4 5 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 8 6 8 133 7 1 6 1 6 133 3 1 1 1 41 77 0 2 2 0 98 0 0 0 50 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 8 6 8 133 7 1 6 1 6 133 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 98 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 18 37 40 22 37 22 37 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,708,l),
(2,708,l),
(267,263,l),
(267,0,l),
(412,0,l),
(412,265,l),
(674,708,l),
(510,708,l),
(341,402,l)
);
},
{
closed = 1;
nodes = (
(124,895,o),
(124,857,qs),
(124,817,o),
(172,772,o),
(211,772,qs),
(249,772,o),
(297,817,o),
(297,857,qs),
(297,895,o),
(249,940,o),
(211,940,qs),
(172,940,o)
);
},
{
closed = 1;
nodes = (
(386,895,o),
(386,857,qs),
(386,817,o),
(434,772,o),
(472,772,qs),
(510,772,o),
(559,817,o),
(559,857,qs),
(559,895,o),
(510,940,o),
(472,940,qs),
(434,940,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 5 2 3 1 0 1 76 8 5 7 3 3 6 1 4 0 3 4 105 2 1 0 0 38 77 0 1 1 39 1 78 22 21 10 9 28 26 21 32 22 32 16 14 9 20 10 20 18 18 16 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,115,l),
(32,0,l),
(588,0,l),
(588,128,l),
(214,128,l),
(595,594,l),
(595,708,l),
(40,708,l),
(40,579,l),
(413,579,l)
);
},
{
closed = 1;
nodes = (
(351,780,l),
(487,950,l),
(347,950,l),
(239,780,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 3 0 8 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 95 0 4 4 44 77 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 0 4 5 103 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,527,l),
(35,405,l),
(289,405,l),
(35,103,l),
(35,0,l),
(475,0,l),
(475,123,l),
(219,123,l),
(475,425,l),
(475,527,l)
);
},
{
closed = 1;
nodes = (
(293,599,l),
(429,769,l),
(289,769,l),
(181,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 1 2 3 5 1 1 0 2 76 0 4 0 5 3 4 5 103 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 17 17 18 17 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,115,l),
(32,0,l),
(588,0,l),
(588,128,l),
(214,128,l),
(595,594,l),
(595,708,l),
(40,708,l),
(40,579,l),
(413,579,l)
);
},
{
closed = 1;
nodes = (
(239,896,o),
(239,861,qs),
(239,824,o),
(284,780,o),
(321,780,qs),
(357,780,o),
(403,824,o),
(403,861,qs),
(403,896,o),
(356,942,o),
(321,941,qs),
(286,941,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
3 1 3 0 8 1 2 1 2 76 7 1 4 0 5 0 4 5 105 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 11 10 0 0 17 15 10 21 11 21 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,527,l),
(35,405,l),
(289,405,l),
(35,103,l),
(35,0,l),
(475,0,l),
(475,123,l),
(219,123,l),
(475,425,l),
(475,527,l)
);
},
{
closed = 1;
nodes = (
(183,715,o),
(183,680,qs),
(183,643,o),
(228,599,o),
(265,599,qs),
(301,599,o),
(347,643,o),
(347,680,qs),
(347,715,o),
(300,761,o),
(265,760,qs),
(230,760,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 2 3 5 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 97 6 1 4 4 48 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 0 5 3 4 5 105 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
11 10 17 15 10 21 11 21 17 18 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,115,l),
(32,0,l),
(588,0,l),
(588,128,l),
(214,128,l),
(595,594,l),
(595,708,l),
(40,708,l),
(40,579,l),
(413,579,l)
);
},
{
closed = 1;
nodes = (
(373,780,l),
(523,950,l),
(397,950,l),
(329,864,l),
(260,950,l),
(134,950,l),
(285,780,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
12 1 6 4 3 1 3 0 8 1 2 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 4 0 4 6 0 128 5 1 4 4 44 77 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 4 133 0 6 0 6 133 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 16 15 14 13 11 10 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,527,l),
(35,405,l),
(289,405,l),
(35,103,l),
(35,0,l),
(475,0,l),
(475,123,l),
(219,123,l),
(475,425,l),
(475,527,l)
);
},
{
closed = 1;
nodes = (
(314,599,l),
(464,769,l),
(338,769,l),
(270,683,l),
(201,769,l),
(75,769,l),
(226,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
12 1 6 4 0 1 2 3 5 1 1 0 3 76 5 1 4 6 4 133 0 6 3 6 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 18 17 17 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,0,l),
(554,0,l),
(386,277,l),
(542,527,l),
(381,527,l),
(267,323,l),
(197,323,l),
(197,527,l),
(56,527,l),
(56,0,l),
(197,0,l),
(197,201,l),
(272,201,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 41 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(566,0,l),
(566,128,l),
(219,128,l),
(219,708,l)
);
},
{
closed = 1;
nodes = (
(340,451,o),
(340,416,qs),
(340,379,o),
(385,335,o),
(422,335,qs),
(458,335,o),
(504,379,o),
(504,416,qs),
(504,452,o),
(457,496,o),
(422,496,qs),
(387,496,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 4 0 3 4 105 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 7 6 13 11 6 17 7 17 17 17 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,708,l)
);
},
{
closed = 1;
nodes = (
(228,394,o),
(228,359,qs),
(228,322,o),
(273,278,o),
(310,278,qs),
(346,278,o),
(392,322,o),
(392,359,qs),
(392,395,o),
(345,439,o),
(310,439,qs),
(275,439,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 0 2 3 105 0 1 1 38 77 0 0 0 39 0 78 5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(220,0,l),
(220,708,l)
);
},
{
closed = 1;
nodes = (
(612,708,l),
(612,237,ls),
(612,187,o),
(568,121,o),
(512,122,qs),
(455,123,o),
(412,188,o),
(412,238,q),
(266,238,l),
(264,180,o),
(298,90,o),
(329,58,qs),
(393,-5,o),
(510,-6,qs),
(572,-8,o),
(664,26,o),
(694,56,qs),
(728,90,o),
(757,188,o),
(757,254,qs),
(757,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 1 4 4 3 114 5 1 1 1 38 77 0 4 4 0 98 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 1 4 1 3 4 128 5 1 1 1 38 77 0 4 4 0 98 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 3 1 4 1 3 4 128 5 1 1 1 38 77 0 0 0 39 77 0 4 4 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 34 20 38 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 827;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,726,o),
(47,688,qs),
(47,648,o),
(96,603,o),
(134,603,qs),
(173,603,o),
(221,648,o),
(221,688,qs),
(221,726,o),
(173,772,o),
(134,772,qs),
(96,772,o)
);
},
{
closed = 1;
nodes = (
(64,527,l),
(64,0,l),
(205,0,l),
(205,527,l)
);
},
{
closed = 1;
nodes = (
(320,727,o),
(320,688,qs),
(320,648,o),
(369,602,o),
(408,602,qs),
(447,602,o),
(496,648,o),
(496,688,qs),
(496,727,o),
(447,774,o),
(408,774,qs),
(369,774,o)
);
},
{
closed = 1;
nodes = (
(337,-81,o),
(299,-118,o),
(266,-118,qs),
(216,-118,l),
(216,-242,l),
(295,-242,ls),
(480,-241,o),
(478,-65,qs),
(478,527,l),
(337,527,l),
(337,-48,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
5 1 1 1 0 97 10 4 9 3 0 0 48 77 6 1 3 3 41 77 0 2 2 39 77 0 8 8 7 96 0 7 7 43 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
10 4 9 3 0 5 1 1 3 0 1 105 6 1 3 3 41 77 0 2 2 39 77 0 8 8 7 96 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
10 4 9 3 0 5 1 1 3 0 1 105 0 8 0 7 8 7 100 6 1 3 3 41 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
17 16 1 0 36 34 33 31 29 28 23 21 16 27 17 27 15 14 13 12 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 543;
}
);
note = ij;
unicode = 307;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(566,0,l),
(566,128,l),
(219,128,l),
(219,708,l)
);
},
{
closed = 1;
nodes = (
(282,-251,o),
(263,-265,q),
(288,-301,l),
(309,-294,o),
(350,-264,o),
(381,-220,o),
(398,-171,o),
(398,-146,qs),
(398,-130,o),
(391,-100,o),
(373,-76,o),
(345,-62,o),
(327,-62,qs),
(298,-62,o),
(262,-96,o),
(262,-124,qs),
(262,-151,o),
(293,-183,o),
(320,-185,q),
(314,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
23 22 2 3 73 0 3 1 3 134 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 38 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,708,l)
);
},
{
closed = 1;
nodes = (
(81,-251,o),
(62,-265,q),
(87,-301,l),
(108,-294,o),
(149,-264,o),
(180,-220,o),
(197,-171,o),
(197,-146,qs),
(197,-130,o),
(190,-100,o),
(172,-76,o),
(144,-62,o),
(126,-62,qs),
(97,-62,o),
(61,-96,o),
(61,-124,qs),
(61,-151,o),
(92,-183,o),
(119,-185,q),
(113,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
21 20 2 2 73 0 2 0 2 134 0 1 1 38 77 0 0 0 39 0 78 38 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(220,0,l),
(220,254,l),
(333,254,l),
(476,0,l),
(638,0,l),
(481,268,l),
(523,279,o),
(555,305,qs),
(590,335,o),
(631,421,o),
(632,483,qs),
(633,529,o),
(603,618,o),
(568,650,qs),
(546,670,o),
(495,693,o),
(441,705,o),
(385,708,o),
(357,708,qs),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(220,579,l),
(361,579,ls),
(389,579,o),
(436,572,o),
(453,561,qs),
(471,550,o),
(491,510,o),
(490,478,qs),
(489,448,o),
(468,409,o),
(433,386,o),
(385,376,o),
(358,376,qs),
(220,376,l)
);
},
{
closed = 1;
nodes = (
(302,-251,o),
(283,-265,q),
(308,-301,l),
(329,-294,o),
(370,-264,o),
(401,-220,o),
(418,-171,o),
(418,-146,qs),
(418,-130,o),
(411,-100,o),
(393,-76,o),
(365,-62,o),
(347,-62,qs),
(318,-62,o),
(282,-96,o),
(282,-124,qs),
(282,-151,o),
(313,-183,o),
(340,-185,q),
(334,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
13 1 2 4 1 76 52 51 2 6 73 0 6 1 6 134 8 1 4 0 2 1 4 2 103 0 5 5 0 95 7 1 0 0 38 77 3 1 1 1 39 1 78 22 21 2 0 42 40 33 31 21 34 22 34 19 18 17 16 15 14 0 20 2 20 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,237,ls),
(197,275,o),
(208,335,o),
(231,361,qs),
(246,377,o),
(285,394,o),
(327,402,o),
(374,403,o),
(397,403,q),
(397,533,l),
(387,535,o),
(363,537,o),
(350,537,qs),
(299,537,o),
(226,499,o),
(194,461,q),
(186,527,l)
);
},
{
closed = 1;
nodes = (
(80,-251,o),
(61,-265,q),
(86,-301,l),
(107,-294,o),
(148,-264,o),
(179,-220,o),
(196,-171,o),
(196,-146,qs),
(196,-130,o),
(189,-100,o),
(171,-76,o),
(143,-62,o),
(125,-62,qs),
(96,-62,o),
(60,-96,o),
(60,-124,qs),
(60,-151,o),
(91,-183,o),
(118,-185,q),
(112,-211,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
6 1 1 0 1 76 37 36 2 4 73 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
6 1 3 0 1 76 37 36 2 4 73 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 4 2 4 134 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 2 4 134 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 17 23 35 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = uni0136;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,0,l),
(672,0,l),
(419,372,l),
(669,708,l),
(501,708,l),
(295,416,l),
(220,416,l),
(220,708,l),
(75,708,l),
(75,0,l),
(220,0,l),
(220,288,l),
(309,288,l)
);
},
{
closed = 1;
nodes = (
(311,-251,o),
(292,-265,q),
(317,-301,l),
(338,-294,o),
(379,-264,o),
(410,-220,o),
(427,-171,o),
(427,-146,qs),
(427,-130,o),
(420,-100,o),
(402,-76,o),
(374,-62,o),
(356,-62,qs),
(327,-62,o),
(291,-96,o),
(291,-124,qs),
(291,-151,o),
(322,-183,o),
(349,-185,q),
(343,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
9 1 5 2 1 76 30 29 2 6 73 0 6 0 6 134 0 2 7 1 5 0 2 5 103 3 1 1 1 38 77 4 1 0 0 39 0 78 0 0 20 18 0 12 0 12 18 17 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,0,l),
(554,0,l),
(386,277,l),
(542,527,l),
(381,527,l),
(267,323,l),
(197,323,l),
(197,708,l),
(56,708,l),
(56,0,l),
(197,0,l),
(197,201,l),
(272,201,l)
);
},
{
closed = 1;
nodes = (
(248,-251,o),
(229,-265,q),
(254,-301,l),
(275,-294,o),
(316,-264,o),
(347,-220,o),
(364,-171,o),
(364,-146,qs),
(364,-130,o),
(357,-100,o),
(339,-76,o),
(311,-62,o),
(293,-62,qs),
(264,-62,o),
(228,-96,o),
(228,-124,qs),
(228,-151,o),
(259,-183,o),
(286,-185,q),
(280,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
9 1 5 2 1 76 30 29 2 6 73 0 6 0 6 134 0 2 7 1 5 0 2 5 103 0 1 1 38 77 0 3 3 41 77 4 1 0 0 39 0 78 0 0 20 18 0 12 0 12 18 17 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(217,0,l),
(217,472,l),
(553,0,l),
(692,0,l),
(692,708,l),
(550,708,l),
(550,234,l),
(214,708,l),
(75,708,l)
);
},
{
closed = 1;
nodes = (
(343,-251,o),
(324,-265,q),
(349,-301,l),
(370,-294,o),
(411,-264,o),
(442,-220,o),
(459,-171,o),
(459,-146,qs),
(459,-130,o),
(452,-100,o),
(434,-76,o),
(406,-62,o),
(388,-62,qs),
(359,-62,o),
(323,-96,o),
(323,-124,qs),
(323,-151,o),
(354,-183,o),
(381,-185,q),
(375,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
6 1 2 1 0 1 76 27 26 2 4 73 0 4 1 4 134 5 3 2 0 0 38 77 2 1 1 1 39 1 78 0 0 17 15 0 9 0 9 18 17 18 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,527,l),
(56,0,l),
(197,0,l),
(197,260,ls),
(197,287,o),
(206,340,o),
(232,384,o),
(278,412,o),
(311,412,qs),
(338,412,o),
(381,394,o),
(407,357,o),
(418,306,o),
(418,278,qs),
(418,0,l),
(560,0,l),
(560,289,ls),
(560,346,o),
(538,439,o),
(509,474,qs),
(485,504,o),
(407,538,o),
(356,538,qs),
(262,538,o),
(198,460,q),
(191,527,l)
);
},
{
closed = 1;
nodes = (
(265,-251,o),
(246,-265,q),
(271,-301,l),
(292,-294,o),
(333,-264,o),
(364,-220,o),
(381,-171,o),
(381,-146,qs),
(381,-130,o),
(374,-100,o),
(356,-76,o),
(328,-62,o),
(310,-62,qs),
(281,-62,o),
(245,-96,o),
(245,-124,qs),
(245,-151,o),
(276,-183,o),
(303,-185,q),
(297,-211,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
43 42 2 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 5 1 5 134 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 5 1 5 134 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 17 21 37 22 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = uni0122;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,483,o),
(253,547,o),
(325,586,o),
(375,588,qs),
(438,590,o),
(529,528,o),
(539,477,q),
(679,477,l),
(674,537,o),
(622,627,o),
(542,687,o),
(438,717,o),
(381,717,qs),
(298,717,o),
(169,664,o),
(81,569,o),
(36,435,o),
(36,354,qs),
(36,275,o),
(81,143,o),
(168,47,o),
(297,-6,o),
(380,-6,qs),
(460,-6,o),
(574,43,o),
(612,83,qs),
(639,111,o),
(672,182,o),
(689,258,o),
(693,338,o),
(692,376,q),
(372,376,l),
(372,259,l),
(550,259,l),
(547,224,o),
(518,172,o),
(472,139,o),
(413,123,o),
(382,124,qs),
(331,125,o),
(257,163,o),
(209,226,o),
(186,309,o),
(186,355,qs),
(186,400,o)
);
},
{
closed = 1;
nodes = (
(334,-251,o),
(315,-265,q),
(340,-301,l),
(361,-294,o),
(402,-264,o),
(433,-220,o),
(450,-171,o),
(450,-146,qs),
(450,-130,o),
(443,-100,o),
(425,-76,o),
(397,-62,o),
(379,-62,qs),
(350,-62,o),
(314,-96,o),
(314,-124,qs),
(314,-151,o),
(345,-183,o),
(372,-185,q),
(366,-211,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
62 61 2 7 73 0 5 6 2 6 5 2 128 0 7 3 7 134 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 41 34 20 40 39 17 20 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,-54,o),
(406,-110,o),
(351,-144,o),
(308,-144,qs),
(268,-144,o),
(212,-106,o),
(208,-82,q),
(58,-82,l),
(65,-132,o),
(110,-204,o),
(179,-251,o),
(263,-272,o),
(309,-272,qs),
(345,-272,o),
(415,-258,o),
(477,-227,o),
(528,-181,o),
(546,-148,qs),
(562,-121,o),
(578,-62,o),
(585,1,o),
(585,65,o),
(585,96,qs),
(585,527,l),
(463,527,l),
(448,473,l),
(417,508,o),
(331,538,o),
(294,536,q),
(237,537,o),
(138,499,o),
(107,465,qs),
(35,387,o),
(35,257,qs),
(35,202,o),
(65,98,o),
(103,58,qs),
(137,23,o),
(230,-8,o),
(279,-8,qs),
(328,-8,o),
(412,20,o),
(442,54,q),
(442,18,o)
);
},
{
closed = 1;
nodes = (
(228,138,o),
(194,177,o),
(177,230,o),
(177,263,qs),
(177,294,o),
(193,348,o),
(226,388,o),
(277,412,o),
(310,412,qs),
(374,411,o),
(443,330,o),
(443,268,qs),
(443,237,o),
(427,182,o),
(395,141,o),
(344,117,o),
(311,117,qs),
(278,117,o)
);
},
{
closed = 1;
nodes = (
(331,860,o),
(283,825,o),
(248,779,o),
(227,724,o),
(227,695,qs),
(227,676,o),
(236,642,o),
(255,616,o),
(286,599,o),
(307,599,qs),
(340,599,o),
(383,638,o),
(383,672,qs),
(383,702,o),
(345,737,o),
(316,740,q),
(319,750,o),
(337,774,o),
(357,794,o),
(383,814,o),
(393,819,q),
(358,869,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
17 1 7 1 0 1 0 6 2 76 83 67 2 8 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
17 1 7 2 0 1 0 6 2 76 83 67 2 8 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 8 1 8 133 0 4 0 5 0 4 5 128 0 7 7 1 97 2 1 1 1 49 77 9 1 6 6 0 97 0 0 0 50 77 0 5 5 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 8 1 8 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 7 7 1 97 2 1 1 1 49 77 9 1 6 6 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 1 8 133 0 4 0 5 0 4 5 128 0 5 0 3 5 3 101 0 2 2 41 77 0 7 7 1 97 0 1 1 49 77 9 1 6 6 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
45 44 74 72 53 51 44 61 45 61 34 20 42 19 41 34 10 8 28 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = dcroat;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,139,o),
(192,179,o),
(176,232,o),
(176,265,qs),
(176,296,o),
(192,349,o),
(225,390,o),
(274,412,o),
(307,412,qs),
(372,411,o),
(440,329,o),
(440,263,qs),
(440,202,o),
(373,119,o),
(309,117,qs),
(276,117,o)
);
},
{
closed = 1;
nodes = (
(582,649,l),
(582,708,l),
(441,708,l),
(441,649,l),
(348,649,l),
(348,558,l),
(441,558,l),
(441,483,l),
(415,511,o),
(342,538,o),
(296,538,qs),
(235,538,o),
(139,500,o),
(106,465,qs),
(35,388,o),
(35,259,qs),
(35,204,o),
(66,98,o),
(104,58,qs),
(136,25,o),
(224,-8,o),
(276,-8,qs),
(332,-6,o),
(411,25,o),
(443,59,q),
(451,0,l),
(582,0,l),
(582,558,l),
(650,558,l),
(650,649,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
37 1 1 5 20 1 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 7 6 1 2 5 7 2 103 0 8 8 38 77 0 1 1 5 97 0 5 5 49 77 10 1 0 0 3 97 4 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 6 1 2 5 7 2 103 0 8 8 38 77 0 1 1 5 97 0 5 5 49 77 0 3 3 39 77 10 1 0 0 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 45 44 43 42 41 40 39 38 35 33 24 22 19 18 17 16 7 5 0 15 1 15 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,579,l),
(595,579,l),
(595,708,l),
(6,708,l),
(6,579,l),
(228,579,l),
(228,365,l),
(122,365,l),
(122,251,l),
(228,251,l),
(228,0,l),
(373,0,l),
(373,251,l),
(479,251,l),
(479,365,l),
(373,365,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
8 7 2 3 2 1 0 1 3 0 103 6 1 4 4 5 95 0 5 5 38 77 0 1 1 39 1 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,404,l),
(364,404,l),
(364,527,l),
(238,527,l),
(238,670,l),
(97,670,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,320,l),
(17,320,l),
(17,206,l),
(97,206,l),
(97,173,ls),
(97,84,o),
(188,-4,o),
(293,0,qs),
(359,0,l),
(359,123,l),
(307,123,ls),
(238,123,o),
(238,191,qs),
(238,206,l),
(364,206,l),
(364,320,l),
(238,320,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 7 6 7 133 11 10 2 4 3 1 0 1 4 0 103 9 1 5 5 6 95 8 1 6 6 41 77 0 1 1 2 98 0 2 2 39 2 78 0 0 0 26 0 26 25 24 17 17 17 17 17 19 33 34 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,708,l),
(56,0,l),
(197,0,l),
(197,708,l)
);
},
{
closed = 1;
nodes = (
(263,493,o),
(237,474,q),
(268,432,l),
(295,441,o),
(344,479,o),
(381,530,o),
(403,588,o),
(403,617,qs),
(403,637,o),
(394,673,o),
(374,702,o),
(342,719,o),
(319,719,qs),
(284,719,o),
(240,680,o),
(240,645,qs),
(240,613,o),
(276,574,o),
(307,572,q),
(301,541,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
21 20 2 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 1 97 3 1 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 1 38 77 0 2 2 3 97 0 3 3 46 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 398;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = dcaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,0,l),
(582,708,l),
(441,708,l),
(441,485,l),
(415,511,o),
(342,538,o),
(296,538,qs),
(235,538,o),
(139,500,o),
(107,466,qs),
(35,388,o),
(35,259,qs),
(35,204,o),
(66,98,o),
(104,58,qs),
(136,25,o),
(224,-8,o),
(276,-8,qs),
(332,-6,o),
(411,25,o),
(443,59,q),
(451,0,l)
);
},
{
closed = 1;
nodes = (
(225,139,o),
(192,179,o),
(176,232,o),
(176,265,qs),
(176,296,o),
(192,349,o),
(225,390,o),
(274,412,o),
(307,412,qs),
(372,411,o),
(440,329,o),
(440,263,qs),
(440,202,o),
(373,119,o),
(309,117,qs),
(276,117,o)
);
},
{
closed = 1;
nodes = (
(648,493,o),
(622,474,q),
(653,432,l),
(680,441,o),
(729,479,o),
(766,530,o),
(788,588,o),
(788,617,qs),
(788,637,o),
(779,673,o),
(759,702,o),
(727,719,o),
(704,719,qs),
(669,719,o),
(625,680,o),
(625,645,qs),
(625,613,o),
(661,574,o),
(692,572,q),
(686,541,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
55 54 17 3 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 2 97 7 1 2 2 38 77 0 5 5 1 97 0 1 1 49 77 8 1 4 4 0 97 3 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 2 2 38 77 0 6 6 7 97 0 7 7 46 77 0 5 5 1 97 0 1 1 49 77 8 1 4 4 0 97 3 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 2 2 38 77 0 6 6 7 97 0 7 7 46 77 0 5 5 1 97 0 1 1 49 77 0 3 3 39 77 8 1 4 4 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
23 22 45 43 39 38 29 27 22 37 23 37 17 19 41 34 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,708,l),
(75,0,l),
(566,0,l),
(566,128,l),
(219,128,l),
(219,708,l)
);
},
{
closed = 1;
nodes = (
(353,493,o),
(327,474,q),
(358,432,l),
(385,441,o),
(434,479,o),
(471,530,o),
(493,588,o),
(493,617,qs),
(493,637,o),
(484,673,o),
(464,702,o),
(432,719,o),
(409,719,qs),
(374,719,o),
(330,680,o),
(330,645,qs),
(330,613,o),
(366,574,o),
(397,572,q),
(391,541,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 22 2 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 2 38 77 0 3 3 4 97 0 4 4 46 77 0 0 0 1 96 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,493,o),
(347,474,q),
(378,432,l),
(405,441,o),
(454,479,o),
(491,530,o),
(513,588,o),
(513,617,qs),
(513,637,o),
(504,673,o),
(484,701,o),
(452,719,o),
(429,719,qs),
(394,719,o),
(350,680,o),
(350,645,qs),
(350,613,o),
(386,574,o),
(417,572,q),
(411,541,o)
);
},
{
closed = 1;
nodes = (
(334,527,l),
(238,527,l),
(238,670,l),
(97,670,l),
(97,527,l),
(17,527,l),
(17,404,l),
(97,404,l),
(97,173,ls),
(97,84,o),
(188,-4,o),
(293,0,qs),
(376,0,l),
(376,123,l),
(307,123,ls),
(238,123,o),
(238,191,qs),
(238,404,l),
(334,404,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
17 16 2 4 5 1 76 0 6 1 0 1 6 0 128 0 0 0 1 97 0 1 1 46 77 9 8 2 4 4 5 95 7 1 5 5 41 77 0 2 2 3 96 0 3 3 39 3 78 20 20 20 38 20 38 17 17 17 19 33 47 36 16 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,527,l),
(156,0,l),
(297,0,l),
(297,260,ls),
(297,287,o),
(306,340,o),
(332,384,o),
(378,412,o),
(411,412,qs),
(438,412,o),
(481,394,o),
(507,357,o),
(518,306,o),
(518,278,qs),
(518,0,l),
(660,0,l),
(660,289,ls),
(660,346,o),
(638,439,o),
(609,474,qs),
(585,504,o),
(507,538,o),
(456,538,qs),
(362,538,o),
(298,460,q),
(291,527,l)
);
},
{
closed = 1;
nodes = (
(3,493,o),
(-23,474,q),
(8,432,l),
(35,441,o),
(84,479,o),
(121,530,o),
(143,588,o),
(143,617,qs),
(143,637,o),
(134,673,o),
(114,702,o),
(82,719,o),
(59,719,qs),
(24,719,o),
(-20,680,o),
(-20,645,qs),
(-20,613,o),
(16,574,o),
(47,572,q),
(41,541,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
43 42 2 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
43 42 2 2 4 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 6 97 0 6 6 46 77 0 2 2 0 97 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 6 97 0 6 6 46 77 0 4 4 41 77 0 2 2 0 97 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 17 17 21 37 22 33 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,552,l),
(599,0,l),
(791,0,l),
(959,708,l),
(803,708,l),
(694,165,l),
(588,708,l),
(393,708,l),
(284,165,l),
(168,708,l),
(3,708,l),
(183,0,l),
(378,0,l)
);
},
{
closed = 1;
nodes = (
(337,950,l),
(473,780,l),
(585,780,l),
(477,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 6 95 0 6 6 44 77 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 6 0 5 0 6 5 103 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 16 15 14 13 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 962;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,349,l),
(532,0,l),
(687,0,l),
(849,527,l),
(702,527,l),
(607,161,l),
(500,527,l),
(359,527,l),
(251,161,l),
(156,527,l),
(0,527,l),
(163,0,l),
(323,0,l)
);
},
{
closed = 1;
nodes = (
(263,769,l),
(399,599,l),
(511,599,l),
(403,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
11 6 3 3 3 0 1 76 0 6 0 5 0 6 5 103 2 1 2 0 0 41 77 7 4 2 3 3 39 3 78 0 0 16 15 14 13 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,552,l),
(599,0,l),
(791,0,l),
(959,708,l),
(803,708,l),
(694,165,l),
(588,708,l),
(393,708,l),
(284,165,l),
(168,708,l),
(3,708,l),
(183,0,l),
(378,0,l)
);
},
{
closed = 1;
nodes = (
(509,780,l),
(645,950,l),
(505,950,l),
(397,780,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 6 6 5 95 0 5 5 44 77 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 5 0 6 0 5 6 103 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 16 15 14 13 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 962;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,349,l),
(532,0,l),
(687,0,l),
(849,527,l),
(702,527,l),
(607,161,l),
(500,527,l),
(359,527,l),
(251,161,l),
(156,527,l),
(0,527,l),
(163,0,l),
(323,0,l)
);
},
{
closed = 1;
nodes = (
(472,599,l),
(608,769,l),
(468,769,l),
(360,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
11 6 3 3 3 0 1 76 0 5 0 6 0 5 6 103 2 1 2 0 0 41 77 7 4 2 3 3 39 3 78 0 0 16 15 14 13 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,552,l),
(599,0,l),
(791,0,l),
(959,708,l),
(803,708,l),
(694,165,l),
(588,708,l),
(393,708,l),
(284,165,l),
(168,708,l),
(3,708,l),
(183,0,l),
(378,0,l)
);
},
{
closed = 1;
nodes = (
(276,895,o),
(276,857,qs),
(276,817,o),
(324,772,o),
(363,772,qs),
(401,772,o),
(449,817,o),
(449,857,qs),
(449,895,o),
(401,940,o),
(363,940,qs),
(324,940,o)
);
},
{
closed = 1;
nodes = (
(538,895,o),
(538,857,qs),
(538,817,o),
(586,772,o),
(624,772,qs),
(662,772,o),
(711,817,o),
(711,857,qs),
(711,895,o),
(662,940,o),
(624,940,qs),
(586,940,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
11 6 3 3 3 0 1 76 11 7 10 3 5 8 1 6 0 5 6 105 2 1 2 0 0 38 77 9 4 2 3 3 39 3 78 26 25 14 13 0 0 32 30 25 36 26 36 20 18 13 24 14 24 0 12 0 12 17 18 18 17 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 962;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,349,l),
(532,0,l),
(687,0,l),
(849,527,l),
(702,527,l),
(607,161,l),
(500,527,l),
(359,527,l),
(251,161,l),
(156,527,l),
(0,527,l),
(163,0,l),
(323,0,l)
);
},
{
closed = 1;
nodes = (
(216,714,o),
(216,676,qs),
(216,636,o),
(264,591,o),
(303,591,qs),
(341,591,o),
(389,636,o),
(389,676,qs),
(389,714,o),
(341,759,o),
(303,759,qs),
(264,759,o)
);
},
{
closed = 1;
nodes = (
(478,714,o),
(478,676,qs),
(478,636,o),
(526,591,o),
(564,591,qs),
(602,591,o),
(651,636,o),
(651,676,qs),
(651,714,o),
(602,759,o),
(564,759,qs),
(526,759,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 6 6 5 97 11 7 10 3 5 5 48 77 2 1 2 0 0 41 77 9 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
11 7 10 3 5 8 1 6 0 5 6 105 2 1 2 0 0 41 77 9 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
26 25 14 13 0 0 32 30 25 36 26 36 20 18 13 24 14 24 0 12 0 12 17 18 18 17 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,708,l),
(2,708,l),
(267,263,l),
(267,0,l),
(412,0,l),
(412,265,l),
(674,708,l),
(510,708,l),
(341,402,l)
);
},
{
closed = 1;
nodes = (
(156,950,l),
(292,780,l),
(404,780,l),
(296,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
8 5 2 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 4 95 0 4 4 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 4 0 3 0 4 3 103 2 1 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-141,o),
(273,-141,qs),
(214,-141,o),
(127,-109,o),
(101,-90,q),
(56,-210,l),
(104,-241,o),
(218,-274,o),
(276,-273,qs),
(355,-274,o),
(468,-226,o),
(503,-186,qs),
(528,-157,o),
(556,-89,o),
(567,-17,o),
(568,58,o),
(568,94,qs),
(568,527,l),
(426,527,l),
(426,273,ls),
(426,243,o),
(420,192,o),
(407,169,qs),
(392,142,o),
(340,117,o),
(310,117,qs),
(247,117,o),
(223,153,q),
(208,170,o),
(199,221,o),
(199,248,qs),
(199,527,l),
(58,527,l),
(58,231,ls),
(58,180,o),
(76,93,o),
(99,60,qs),
(124,26,o),
(207,-8,o),
(264,-8,qs),
(313,-8,o),
(397,22,o),
(426,59,q),
(426,23,o),
(420,-51,o),
(400,-82,qs),
(382,-110,o)
);
},
{
closed = 1;
nodes = (
(132,769,l),
(268,599,l),
(380,599,l),
(272,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
3 1 0 2 41 1 5 0 40 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 7 0 6 1 7 6 103 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 7 0 6 1 7 6 103 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 18 37 40 22 37 22 37 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni0408;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,708,l),
(377,237,ls),
(377,187,o),
(333,121,o),
(277,122,qs),
(220,123,o),
(177,188,o),
(177,238,q),
(31,238,l),
(29,180,o),
(63,90,o),
(94,58,qs),
(158,-5,o),
(275,-6,qs),
(337,-8,o),
(429,26,o),
(459,56,qs),
(493,90,o),
(522,188,o),
(522,254,qs),
(522,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 3 2 2 1 114 0 3 3 20 77 0 2 2 0 98 0 0 0 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 2 3 1 2 128 0 3 3 20 77 0 2 2 0 98 0 0 0 28 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 34 20 37 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = uni0408;
unicode = 1032;
},
{
glyphname = uni0458;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,727,o),
(61,688,qs),
(61,648,o),
(110,602,o),
(149,602,qs),
(188,602,o),
(237,648,o),
(237,688,qs),
(237,727,o),
(188,774,o),
(149,774,qs),
(110,774,o)
);
},
{
closed = 1;
nodes = (
(78,-81,o),
(40,-118,o),
(7,-118,qs),
(-43,-118,l),
(-43,-242,l),
(36,-242,ls),
(221,-241,o),
(219,-65,qs),
(219,527,l),
(78,527,l),
(78,-48,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 0 0 1 2 0 1 105 0 2 2 22 77 0 4 4 3 96 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 0 0 1 2 0 1 105 0 4 0 3 4 3 100 0 2 2 22 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 20 18 17 15 13 12 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = uni0458;
unicode = 1112;
},
{
glyphname = uni0405;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,557,o),
(542,637,o),
(475,689,o),
(386,716,o),
(334,717,qs),
(287,718,o),
(193,700,o),
(115,654,o),
(65,575,o),
(62,515,qs),
(60,464,o),
(99,380,o),
(138,353,qs),
(170,330,o),
(251,305,o),
(289,295,qs),
(306,291,o),
(332,285,o),
(356,280,o),
(381,273,o),
(397,269,qs),
(420,263,o),
(459,233,o),
(459,201,qs),
(459,178,o),
(439,148,o),
(404,131,o),
(358,125,o),
(333,126,qs),
(309,127,o),
(262,137,o),
(224,159,o),
(196,193,o),
(190,219,q),
(42,219,l),
(45,162,o),
(91,78,o),
(168,22,o),
(268,-7,o),
(325,-8,qs),
(384,-10,o),
(482,13,o),
(519,39,qs),
(558,65,o),
(604,151,o),
(604,212,qs),
(603,268,o),
(565,338,o),
(503,380,o),
(423,404,o),
(380,413,qs),
(368,416,o),
(336,422,o),
(302,431,o),
(267,442,o),
(252,449,qs),
(231,459,o),
(206,491,o),
(207,514,qs),
(207,536,o),
(229,566,o),
(263,584,o),
(302,590,o),
(320,590,qs),
(371,588,o),
(439,549,o),
(445,504,q),
(589,504,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 67 0 67 63 61 39 37 33 32 28 26 34 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = uni0405;
unicode = 1029;
},
{
glyphname = uni0455;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,403,o),
(328,370,q),
(464,370,l),
(462,416,o),
(427,480,o),
(370,520,o),
(294,538,o),
(251,538,qs),
(212,538,o),
(137,522,o),
(78,485,o),
(39,424,o),
(37,381,qs),
(34,332,o),
(73,272,o),
(102,254,qs),
(121,241,o),
(167,226,o),
(214,216,o),
(262,206,o),
(283,201,qs),
(304,197,o),
(341,175,o),
(340,149,qs),
(340,138,o),
(325,119,o),
(304,110,o),
(279,107,o),
(268,107,qs),
(230,107,o),
(175,133,o),
(169,167,q),
(27,167,l),
(30,124,o),
(65,63,o),
(91,42,qs),
(127,14,o),
(214,-8,o),
(266,-8,qs),
(311,-8,o),
(399,15,o),
(428,41,qs),
(451,62,o),
(478,121,o),
(478,162,qs),
(479,204,o),
(445,262,o),
(419,278,qs),
(400,290,o),
(350,306,o),
(298,318,o),
(244,329,o),
(222,335,qs),
(199,341,o),
(174,361,o),
(173,378,qs),
(172,393,o),
(186,412,o),
(208,421,o),
(235,425,o),
(250,425,qs),
(281,425,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 59 58 54 52 33 31 29 28 23 21 0 61 1 61 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = uni0455;
unicode = 1109;
},
{
glyphname = uni040E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,708,l),
(7,708,l),
(270,209,l),
(255,179,o),
(220,147,o),
(184,131,o),
(148,128,o),
(131,128,qs),
(108,128,l),
(108,0,l),
(155,0,ls),
(213,-2,o),
(298,27,o),
(333,59,qs),
(354,79,o),
(389,132,o),
(419,190,o),
(444,248,o),
(455,274,qs),
(640,708,l),
(477,708,l),
(344,362,l)
);
},
{
closed = 1;
nodes = (
(139,889,o),
(168,827,o),
(217,788,o),
(285,770,o),
(326,770,qs),
(366,770,o),
(434,789,o),
(484,828,o),
(512,889,o),
(513,932,q),
(403,932,l),
(401,896,o),
(361,863,o),
(326,863,qs),
(291,863,o),
(250,897,o),
(249,932,q),
(139,932,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
21 18 2 2 0 1 76 8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 22 22 22 39 22 39 36 18 36 21 33 40 16 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = uni040E;
unicode = 1038;
},
{
glyphname = uni045E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,527,l),
(10,527,l),
(247,-49,l),
(227,-101,o),
(164,-154,o),
(107,-154,qs),
(85,-154,l),
(85,-277,l),
(120,-277,ls),
(182,-277,o),
(264,-246,o),
(293,-220,qs),
(319,-196,o),
(360,-128,o),
(378,-81,qs),
(398,-26,o),
(433,78,o),
(451,134,qs),
(585,527,l),
(432,527,l),
(315,138,l),
(314,138,l)
);
},
{
closed = 1;
nodes = (
(122,708,o),
(151,646,o),
(200,607,o),
(268,589,o),
(309,589,qs),
(349,589,o),
(417,608,o),
(467,647,o),
(495,708,o),
(496,751,q),
(386,751,l),
(384,715,o),
(344,682,o),
(309,682,qs),
(274,682,o),
(233,716,o),
(232,751,q),
(122,751,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
22 22 22 39 22 39 36 18 36 19 33 41 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = uni045E;
unicode = 1118;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,-81,o),
(40,-118,o),
(7,-118,qs),
(-43,-118,l),
(-43,-242,l),
(36,-242,ls),
(221,-241,o),
(219,-65,qs),
(219,527,l),
(78,527,l),
(78,-48,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
33 34 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = uni0237;
unicode = 567;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
isBold = 1;
name = Bold;
properties = (
{
key = styleNames;
values = (
{
language = ENG;
value = Bold;
}
);
},
{
key = postscriptFullName;
value = "Onest Bold";
},
{
key = postscriptFontName;
value = "Onest-Bold";
}
);
weightClass = 700;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 15;
"@MMK_R_O" = -15;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_colon" = 20;
"@MMK_R_period" = 30;
"@MMK_R_uni0422" = -50;
"@MMK_R_w" = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -18;
"@MMK_R_O" = 10;
"@MMK_R_Y" = -20;
"@MMK_R_uni0417" = 10;
};
"@MMK_L_K_alt" = {
"@MMK_R_a" = -10;
"@MMK_R_uni0422" = 10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_a" = -35;
"@MMK_R_period" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -60;
"@MMK_R_O" = -20;
"@MMK_R_a" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_d" = -70;
"@MMK_R_period" = -80;
"@MMK_R_r" = -30;
"@MMK_R_w" = -20;
};
"@MMK_L_period" = {
"@MMK_R_A" = 30;
"@MMK_R_O" = -20;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -80;
"@MMK_R_uni0422" = -80;
};
"@MMK_L_r" = {
"@MMK_R_d" = -10;
"@MMK_R_t" = 30;
};
"@MMK_L_uni0413" = {
"@MMK_R_colon" = -40;
"@MMK_R_period" = -100;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0432" = -40;
"@MMK_R_uni0433" = -50;
"@MMK_R_uni0444" = -80;
};
"@MMK_L_uni0414" = {
"@MMK_R_period" = 30;
};
"@MMK_L_uni0417" = {
"@MMK_R_uni0417" = 10;
};
"@MMK_L_uni0422" = {
"@MMK_R_A" = -50;
"@MMK_R_a" = -60;
"@MMK_R_colon" = -20;
"@MMK_R_d" = -50;
"@MMK_R_period" = -80;
"@MMK_R_r" = -20;
"@MMK_R_uni0422" = 40;
};
"@MMK_L_uni0433" = {
"@MMK_R_period" = -40;
"@MMK_R_uni0444" = -10;
};
"@MMK_L_uni0434" = {
"@MMK_R_period" = 40;
};
A = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aacute = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Acircumflex = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Adieresis = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Agrave = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Amacron = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aogonek = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aring = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Atilde = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
B = {
V = -10;
W = -10;
W_alt = -10;
Wacute = -10;
Wcircumflex = -10;
Wdieresis = -10;
Wgrave = -10;
X = -10;
Y = -10;
Yacute = -10;
Ycircumflex = -10;
Ydieresis = -10;
Ygrave = -10;
};
C = {
J = 10;
V = -25;
X = -30;
};
Cacute = {
J = 10;
V = -25;
X = -30;
};
Ccaron = {
J = 10;
V = -25;
X = -30;
};
Ccedilla = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ccircumflex = {
J = 10;
V = -25;
X = -30;
};
Cdotaccent = {
J = 10;
V = -25;
X = -30;
};
D = {
C = 15;
Cacute = 15;
Ccaron = 15;
Ccedilla = 15;
Ccircumflex = 15;
Cdotaccent = 15;
G = 15;
Gbreve = 15;
Gcircumflex = 15;
Gdotaccent = 15;
J = 10;
O = 15;
OE = 15;
Oacute = 15;
Obreve = 15;
Ocircumflex = 15;
Odieresis = 15;
Ograve = 15;
Ohungarumlaut = 15;
Omacron = 15;
Oslash = 15;
Otilde = 15;
Q = 15;
S = 15;
Sacute = 15;
Scaron = 15;
Scedilla = 15;
Scircumflex = 15;
T = -10;
Tcaron = -10;
V = -25;
W = -5;
W_alt = -5;
Wacute = -5;
Wcircumflex = -5;
Wdieresis = -5;
Wgrave = -5;
X = -30;
comma = -20;
d = 10;
period = -20;
quotedblbase = -20;
uni0122 = 15;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Dcaron = {
J = 10;
V = -25;
X = -30;
};
Dcroat = {
J = 10;
V = -25;
X = -30;
};
E = {
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
};
Eth = {
J = 10;
V = -25;
X = -30;
};
F = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
J = -30;
T = 20;
Tcaron = 20;
a = -30;
a00E2.alt = -30;
a00E4.alt = -30;
a0103.alt = -30;
a2_alt = -25;
a_alt = -30;
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
agrave = -30;
amacron = -30;
aogonek = -30;
aring = -30;
atilde = -30;
c = -25;
c_alt = -25;
cacute = -25;
ccaron = -25;
ccedilla = -25;
ccircumflex = -25;
cdotaccent = -25;
comma = -30;
d = -25;
dcaron = -25;
dcroat = -25;
e = -25;
eacute = -25;
ebreve = -25;
ecaron = -25;
ecircumflex = -25;
edieresis = -25;
edotaccent = -25;
egrave = -25;
emacron = -25;
eogonek = -25;
eth = -25;
g = -25;
gbreve = -25;
gcircumflex = -25;
gdotaccent = -25;
o = -25;
oacute = -25;
obreve = -25;
ocircumflex = -25;
odieresis = -25;
oe = -25;
ograve = -25;
ohungarumlaut = -25;
omacron = -25;
oslash = -25;
otilde = -25;
period = -30;
q = -25;
quotedblbase = -30;
quotedblright = 20;
quoteright = 20;
s = -25;
s_alt = -25;
sacute = -25;
scaron = -25;
scedilla = -25;
scircumflex = -25;
uni0123 = -25;
uni0162 = 20;
uni0219 = -25;
uni021A = 20;
uni0410 = -50;
uni0422 = 20;
uni0430 = -30;
};
G = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Gbreve = {
J = 10;
V = -25;
X = -30;
};
Gcircumflex = {
J = 10;
V = -25;
X = -30;
};
Gdotaccent = {
J = 10;
V = -25;
X = -30;
};
I = {
bracketright = 40;
};
J = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -10;
};
K = {
v = -30;
y2_alt = -40;
};
K_alt = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
d = -20;
uni0122 = -30;
v = -30;
w = -20;
w_alt = -20;
wacute = -20;
wcircumflex = -20;
wdieresis = -20;
wgrave = -20;
y2_alt = -40;
};
L = {
A = 20;
Aacute = 20;
Acircumflex = 20;
Adieresis = 20;
Agrave = 20;
Amacron = 20;
Aogonek = 20;
Aring = 20;
Atilde = 20;
J = 30;
T = -40;
Tcaron = -40;
V = -50;
W = -40;
W_alt = -40;
Wacute = -40;
Wcircumflex = -40;
Wdieresis = -40;
Wgrave = -40;
X = 10;
Y = -80;
Yacute = -80;
Ycircumflex = -80;
Ydieresis = -80;
Ygrave = -80;
a = 10;
a00E2.alt = 10;
a00E4.alt = 10;
a0103.alt = 10;
a2_alt = 10;
a_alt = 10;
aacute = 10;
abreve = 10;
acircumflex = 10;
adieresis = 10;
agrave = 10;
amacron = 10;
aogonek = 10;
aring = 10;
atilde = 10;
c = 10;
c_alt = 10;
cacute = 10;
ccaron = 10;
ccedilla = 10;
ccircumflex = 10;
cdotaccent = 10;
colon = 20;
comma = 40;
d = 10;
dcaron = 10;
dcroat = 10;
e = 10;
eacute = 10;
ebreve = 10;
ecaron = 10;
ecircumflex = 10;
edieresis = 10;
edotaccent = 10;
egrave = 10;
emacron = 10;
eogonek = 10;
eth = 10;
g = 10;
gbreve = 10;
gcircumflex = 10;
gdotaccent = 10;
j = 20;
o = 10;
oacute = 10;
obreve = 10;
ocircumflex = 10;
odieresis = 10;
oe = 10;
ograve = 10;
ohungarumlaut = 10;
omacron = 10;
oslash = 10;
otilde = 10;
period = 40;
q = 10;
quotedblbase = 40;
quoteright = -60;
s = 10;
s_alt = 10;
sacute = 10;
scaron = 10;
scedilla = 10;
scircumflex = 10;
semicolon = 20;
uni0123 = 10;
uni0162 = -40;
uni0219 = 10;
uni021A = -40;
uni0410 = 20;
uni0422 = -40;
uni0430 = 10;
y2_alt = -10;
z = 20;
};
O = {
J = 10;
V = -25;
X = -30;
};
Oacute = {
J = 10;
V = -25;
X = -30;
};
Obreve = {
J = 10;
V = -25;
X = -30;
};
Ocircumflex = {
J = 10;
V = -25;
X = -30;
};
Odieresis = {
J = 10;
V = -25;
X = -30;
};
Ograve = {
J = 10;
V = -25;
X = -30;
};
Ohungarumlaut = {
J = 10;
V = -25;
X = -30;
};
Omacron = {
J = 10;
V = -25;
X = -30;
};
Oslash = {
J = 10;
V = -25;
X = -30;
};
Otilde = {
J = 10;
V = -25;
X = -30;
};
P = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = 10;
Ccedilla = 10;
G = 10;
J = -50;
Q = 10;
S = 10;
X = -25;
Y = -15;
Yacute = -15;
Ycircumflex = -15;
Ydieresis = -15;
Ygrave = -15;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
j = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -90;
q = -10;
quotedblbase = -60;
quotedblright = 20;
quoteright = 20;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -50;
uni0430 = -20;
};
Q = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
colon = 20;
semicolon = 20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
R = {
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
a = -10;
a00E2.alt = -10;
a00E4.alt = -10;
a0103.alt = -10;
a2_alt = -10;
a_alt = -10;
aacute = -10;
abreve = -10;
acircumflex = -10;
adieresis = -10;
agrave = -10;
amacron = -10;
aogonek = -10;
aring = -10;
atilde = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0430 = -10;
};
S = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Sacute = {
J = 10;
V = -25;
X = -30;
};
Scaron = {
J = 10;
V = -25;
X = -30;
};
Scedilla = {
J = 10;
V = -25;
X = -30;
};
Scircumflex = {
J = 10;
V = -25;
X = -30;
};
T = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
Tcaron = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
U = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -50;
q = -10;
quotedblbase = -60;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -10;
uni0430 = -20;
};
V = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = -25;
Cacute = -25;
Ccaron = -25;
Ccedilla = -25;
Ccircumflex = -25;
Cdotaccent = -25;
G = -25;
Gbreve = -25;
Gcircumflex = -25;
Gdotaccent = -25;
J = -80;
O = -25;
OE = -25;
Oacute = -25;
Obreve = -25;
Ocircumflex = -25;
Odieresis = -25;
Ograve = -25;
Ohungarumlaut = -25;
Omacron = -25;
Oslash = -25;
Otilde = -25;
Q = -25;
S = -25;
Sacute = -25;
Scaron = -25;
Scedilla = -25;
Scircumflex = -25;
a = -50;
a00E2.alt = -50;
a00E4.alt = -50;
a0103.alt = -50;
a2_alt = -50;
a_alt = -50;
aacute = -50;
abreve = -50;
acircumflex = -50;
adieresis = -50;
agrave = -50;
amacron = -50;
aogonek = -50;
aring = -50;
atilde = -50;
braceright = 20;
bracketright = 40;
c = -50;
c_alt = -50;
cacute = -50;
ccaron = -50;
ccedilla = -50;
ccircumflex = -50;
cdotaccent = -50;
colon = -20;
comma = -80;
d = -50;
dcaron = -50;
dcroat = -50;
e = -50;
eacute = -50;
ebreve = -50;
ecaron = -50;
ecircumflex = -50;
edieresis = -50;
edotaccent = -50;
egrave = -50;
emacron = -50;
eogonek = -50;
eth = -50;
g = -50;
gbreve = -50;
gcircumflex = -50;
gdotaccent = -50;
m = -20;
n = -20;
o = -50;
oacute = -50;
obreve = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
ohungarumlaut = -50;
omacron = -50;
oslash = -50;
otilde = -50;
p = -20;
period = -80;
q = -50;
quotedblbase = -80;
quotedblright = 10;
quoteright = 20;
r = -20;
racute = -20;
rcaron = -20;
s = -50;
s_alt = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
scircumflex = -50;
semicolon = -20;
space = -80;
u = -20;
uni0122 = -25;
uni0123 = -50;
uni0157 = -20;
uni0219 = -50;
uni0410 = -50;
uni0430 = -50;
z = -20;
};
W = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
W_alt = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
C = -5;
Cacute = -5;
Ccaron = -5;
Ccedilla = -5;
Ccircumflex = -5;
Cdotaccent = -5;
G = -5;
Gbreve = -5;
Gcircumflex = -5;
Gdotaccent = -5;
J = -30;
O = -5;
OE = -5;
Oacute = -5;
Obreve = -5;
Ocircumflex = -5;
Odieresis = -5;
Ograve = -5;
Ohungarumlaut = -5;
Omacron = -5;
Oslash = -5;
Otilde = -5;
Q = -5;
S = -5;
Sacute = -5;
Scaron = -5;
Scedilla = -5;
Scircumflex = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
uni0122 = -5;
uni0410 = -40;
};
Wacute = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wcircumflex = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wdieresis = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wgrave = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
X = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
bracketright = 40;
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
uni0122 = -30;
};
Y = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Yacute = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ycircumflex = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ydieresis = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ygrave = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Z = {
bracketright = 20;
colon = 30;
quoteright = 20;
quotesingle = 40;
semicolon = 30;
};
b = {
c = 10;
d = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
backslash = {
a2_alt = 20;
backslash = -210;
uni0414 = 60;
uni0432 = 40;
uni0433 = 40;
uni0434 = 60;
uni0435 = 20;
uni0436 = 40;
uni0437 = 20;
uni0438 = 40;
uni043A = 40;
uni043C = 40;
uni043D = 40;
uni043E = 20;
uni043F = 40;
uni0440 = 40;
uni0441 = 20;
uni0444 = 20;
uni0446 = 40;
uni0447 = -20;
uni0448 = 40;
uni0449 = 40;
uni044B = 40;
uni044C = 40;
uni044D = 20;
uni044E = 40;
uni044F = 40;
uni0451 = 20;
uni0491 = 40;
};
braceleft = {
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
j = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0434 = 40;
};
bracketleft = {
I = 40;
T = 40;
Tcaron = 40;
V = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
X = 40;
Y = 40;
Yacute = 40;
Ycircumflex = 40;
Ydieresis = 40;
Ygrave = 40;
Z = 20;
i = 40;
j = 40;
l = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0425 = 40;
uni0434 = 40;
uni0443 = 20;
};
c = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
c_alt = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
cacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccedilla = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
ccircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
cdotaccent = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
colon = {
backslash = -70;
slash = -30;
};
comma = {
U = -60;
V = -80;
one = -30;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
seven = -10;
six = -30;
space = -50;
three = 10;
two = 30;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -30;
uni0443 = -30;
v = -30;
y2_alt = -30;
zero = -30;
};
e = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ebreve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edieresis = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edotaccent = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
egrave = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eight = {
comma = -10;
period = -10;
quotedblbase = -10;
};
emacron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eogonek = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eth = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
f = {
a2_alt = -10;
bracketright = 40;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 50;
quotesingle = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
five = {
comma = -20;
period = -20;
quotedblbase = -20;
};
four = {
comma = 20;
four = 20;
period = 20;
quotedblbase = 20;
};
i = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
j = {
bracketright = 40;
j = 20;
quoteright = 20;
};
k_alt = {
d = -10;
};
l = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
lcaron = {
a2_alt = -60;
c = -60;
c_alt = -60;
cacute = -60;
ccaron = -60;
ccedilla = -60;
ccircumflex = -60;
cdotaccent = -60;
d = -60;
dcaron = -60;
dcroat = -60;
e = -60;
eacute = -60;
ebreve = -60;
ecaron = -60;
ecircumflex = -60;
edieresis = -60;
edotaccent = -60;
egrave = -60;
emacron = -60;
eogonek = -60;
eth = -60;
g = -60;
gbreve = -60;
gcircumflex = -60;
gdotaccent = -60;
o = -60;
oacute = -60;
obreve = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
ohungarumlaut = -60;
omacron = -60;
oslash = -60;
otilde = -60;
q = -60;
s = -60;
s_alt = -60;
sacute = -60;
scaron = -60;
scedilla = -60;
scircumflex = -60;
uni0123 = -60;
uni0219 = -60;
};
nine = {
comma = -30;
period = -30;
quotedblbase = -30;
seven = -20;
};
o = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
obreve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ocircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
odieresis = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oe = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ograve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ohungarumlaut = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
omacron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oslash = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
otilde = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
p = {
c = 10;
f = -20;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
t = -20;
t_alt = -20;
tbar = -20;
uni0163 = -20;
uni021B = -20;
x = -10;
y2_alt = -5;
};
parenleft = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
uni0414 = 40;
uni0422 = 40;
uni0434 = 40;
uni0443 = 10;
};
period = {
U = -50;
V = -80;
one = -30;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
seven = -10;
six = -30;
space = -50;
three = 10;
two = 30;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -30;
uni0443 = -30;
v = -30;
y2_alt = -30;
zero = -30;
};
q = {
j = 20;
};
quotedblbase = {
U = -60;
V = -80;
one = -30;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
seven = -10;
six = -30;
space = -50;
three = 10;
two = 30;
uni0410 = 40;
uni0414 = 40;
uni0416 = 20;
uni0417 = -20;
uni041B = 20;
uni041E = -30;
uni0421 = -30;
uni0424 = -50;
uni0425 = 20;
uni0427 = -80;
uni042D = -30;
uni0434 = 60;
uni0436 = 20;
uni043B = 40;
uni0442 = -40;
uni0443 = -30;
uni0445 = 20;
uni0447 = -40;
v = -30;
y2_alt = -30;
zero = -30;
};
quotedblleft = {
J = -100;
T = 40;
Tcaron = 40;
V = 10;
W = 10;
W_alt = 10;
Wacute = 10;
Wcircumflex = 10;
Wdieresis = 10;
Wgrave = 10;
a2_alt = -30;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -30;
uni0162 = 40;
uni0163 = 40;
uni0219 = -30;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -40;
uni0422 = 30;
uni0423 = 30;
uni0434 = -40;
uni043B = -40;
uni0442 = 40;
uni0443 = 40;
uni0444 = -30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quotedblright = {
comma = -50;
period = -50;
quotedblbase = -50;
};
quoteleft = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
J = -100;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
comma = -50;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
f = 40;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
period = -50;
q = -20;
quotedblbase = -50;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -20;
uni0162 = 40;
uni0163 = 40;
uni0219 = -20;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -20;
uni041B = -20;
uni0422 = 40;
uni0423 = 40;
uni042A = 20;
uni0434 = -30;
uni043B = -30;
uni0442 = 30;
uni0443 = 30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quoteright = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -60;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -30;
b = 20;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
j = 20;
k = 20;
k_alt = 20;
kgreenlandic = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
uni0123 = -30;
uni0137 = 20;
uni0162 = 40;
uni0219 = -30;
uni021A = 40;
uni0410 = -40;
uni0422 = 40;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0442 = 40;
uni0443 = 40;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
quotesingle = {
A = -20;
Aacute = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
J = -80;
T = 40;
Tcaron = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
Z = 40;
b = 40;
f = 40;
t = 40;
t_alt = 40;
tbar = 40;
uni0162 = 40;
uni0163 = 40;
uni021A = 40;
uni021B = 40;
uni0410 = -20;
uni0422 = 20;
uni0423 = 20;
uni0427 = 20;
uni0442 = 40;
};
r = {
quotedblright = 40;
quoteright = 40;
};
racute = {
quotedblright = 40;
quoteright = 40;
};
rcaron = {
quotedblright = 40;
quoteright = 40;
};
s = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
t = -10;
t_alt = -10;
tbar = -10;
uni0163 = -10;
uni021B = -10;
x = -15;
y2_alt = -5;
};
s_alt = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
sacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scedilla = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
scircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
seven = {
comma = -100;
four = -60;
one = 20;
period = -100;
quotedblbase = -100;
quotesingle = 20;
seven = 30;
three = -10;
};
six = {
comma = -20;
period = -20;
quotedblbase = -20;
};
slash = {
slash = -210;
uni0422 = 30;
uni0423 = 30;
};
space = {
V = -80;
W = -60;
W_alt = -60;
Wacute = -60;
Wcircumflex = -60;
Wdieresis = -60;
Wgrave = -60;
five = 40;
};
t = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
t_alt = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tbar = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tcaron = {
a2_alt = -70;
c = -70;
c_alt = -70;
cacute = -70;
ccaron = -70;
ccedilla = -70;
ccircumflex = -70;
cdotaccent = -70;
d = -70;
dcaron = -70;
dcroat = -70;
e = -70;
eacute = -70;
ebreve = -70;
ecaron = -70;
ecircumflex = -70;
edieresis = -70;
edotaccent = -70;
egrave = -70;
emacron = -70;
eogonek = -70;
eth = -70;
g = -70;
gbreve = -70;
gcircumflex = -70;
gdotaccent = -70;
o = -70;
oacute = -70;
obreve = -70;
ocircumflex = -70;
odieresis = -70;
oe = -70;
ograve = -70;
ohungarumlaut = -70;
omacron = -70;
oslash = -70;
otilde = -70;
q = -70;
s = -70;
s_alt = -70;
sacute = -70;
scaron = -70;
scedilla = -70;
scircumflex = -70;
uni0123 = -70;
uni0219 = -70;
};
three = {
comma = -10;
period = -10;
quotedblbase = -10;
};
two = {
comma = 30;
four = -20;
period = 30;
quotedblbase = 30;
two = 15;
};
uni0122 = {
J = 10;
V = -25;
X = -30;
};
uni0136 = {
v = -30;
y2_alt = -40;
};
uni0157 = {
quotedblright = 40;
quoteright = 40;
};
uni0162 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni0163 = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0219 = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
uni021A = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni021B = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0401 = {
quotedblright = 20;
uni043B = 10;
};
uni0405 = {
J = 10;
V = -25;
X = -30;
};
uni0410 = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quotedblleft = -40;
quotedblright = -40;
quoteright = -40;
quotesingle = -20;
uni0410 = 15;
uni0414 = 20;
uni0417 = -15;
uni041B = 10;
uni041E = -15;
uni0421 = -15;
uni0422 = -50;
uni0423 = -40;
uni0424 = -15;
uni0427 = -70;
uni042D = -15;
uni0434 = 10;
uni0436 = 10;
uni043B = 10;
uni0442 = -20;
uni0443 = -25;
uni0447 = -35;
v = -30;
x = 5;
y2_alt = -30;
};
uni0411 = {
uni0414 = -20;
uni042F = -20;
uni0434 = -10;
uni0436 = -20;
uni0445 = -20;
};
uni0412 = {
uni0423 = -30;
};
uni0413 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
};
uni0414 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0415 = {
quotedblright = 20;
uni043B = 10;
};
uni0416 = {
a2_alt = -20;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
uni0430 = -10;
uni0431 = -10;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0442 = -20;
uni0443 = -20;
uni0444 = -20;
uni0447 = -40;
uni044D = -20;
uni0451 = -20;
};
uni0417 = {
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni0417 = 15;
uni041B = -15;
uni041E = 15;
uni0421 = 15;
uni0422 = -20;
uni0423 = -20;
uni0424 = 15;
uni0425 = -20;
uni042D = 15;
uni0431 = 10;
uni0442 = 10;
uni0444 = 10;
};
uni041A = {
a2_alt = -20;
colon = 20;
semicolon = 20;
slash = 20;
uni0417 = -30;
uni041E = -30;
uni0421 = -30;
uni0424 = -30;
uni042D = -30;
uni0430 = -10;
uni0431 = -20;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0443 = -30;
uni0444 = -20;
uni044D = -20;
uni0451 = -20;
};
uni041E = {
uni0410 = -18;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -30;
uni0431 = 10;
uni0442 = 10;
};
uni0420 = {
a2_alt = -10;
comma = -90;
period = -90;
quotedblbase = -90;
quotedblleft = 20;
uni0410 = -60;
uni0414 = -50;
uni0416 = -20;
uni0417 = 10;
uni041E = 10;
uni0421 = 10;
uni0424 = 10;
uni0425 = -20;
uni042D = 10;
uni0430 = -10;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043B = -35;
uni043E = -10;
uni0441 = -10;
uni0442 = 20;
uni0444 = -10;
uni044D = -10;
uni044F = -10;
uni0451 = -10;
};
uni0421 = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -10;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0422 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
a2_alt = -50;
backslash = 40;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
parenright = 40;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
u = -20;
uni0410 = -50;
uni0414 = -10;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0422 = 20;
uni0423 = 10;
uni0424 = -20;
uni042D = -20;
uni0432 = -40;
uni0433 = -40;
uni0434 = -40;
uni0435 = -50;
uni0437 = -50;
uni0438 = -40;
uni043A = -40;
uni043B = -40;
uni043C = -40;
uni043D = -40;
uni043E = -50;
uni043F = -40;
uni0440 = -40;
uni0441 = -50;
uni0444 = -50;
uni0445 = -20;
uni0446 = -40;
uni0447 = -40;
uni0448 = -40;
uni0449 = -40;
uni044B = -40;
uni044C = -40;
uni044D = -50;
uni044E = -40;
uni044F = -40;
uni0451 = -30;
uni0491 = -40;
};
uni0423 = {
a2_alt = -55;
braceright = 40;
bracketright = 40;
colon = -20;
comma = -100;
period = -100;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
semicolon = -20;
slash = -30;
uni0410 = -70;
uni0414 = -40;
uni0417 = -15;
uni041E = -15;
uni0421 = -15;
uni0422 = 10;
uni0423 = 16;
uni0424 = -15;
uni042D = -15;
uni042F = -20;
uni0430 = -60;
uni0431 = -20;
uni0432 = -30;
uni0433 = -30;
uni0434 = -70;
uni0435 = -55;
uni0436 = -10;
uni0437 = -55;
uni0438 = -30;
uni0439 = -20;
uni043A = -30;
uni043B = -50;
uni043C = -30;
uni043D = -30;
uni043E = -55;
uni043F = -30;
uni0440 = -30;
uni0441 = -55;
uni0444 = -55;
uni0446 = -30;
uni0447 = -30;
uni0448 = -30;
uni0449 = -30;
uni044B = -30;
uni044C = -30;
uni044D = -55;
uni044E = -30;
uni044F = -30;
uni0451 = -30;
uni0491 = -30;
};
uni0424 = {
comma = -50;
period = -50;
quotedblbase = -50;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0434 = -20;
uni0442 = 10;
};
uni0425 = {
bracketright = 40;
uni0417 = -20;
uni041E = -30;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
};
uni0426 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0429 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni042A = {
quotedblright = -40;
quoteright = -20;
uni0422 = -50;
};
uni042C = {
quotedblleft = -60;
quotedblright = -40;
quoteright = -40;
uni0416 = -20;
uni0422 = -50;
uni0427 = -30;
};
uni042D = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni042E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0431 = {
quoteright = 20;
uni0431 = 15;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0444 = 10;
uni0445 = -10;
};
uni0432 = {
uni0436 = -10;
uni0445 = -15;
uni044F = -10;
};
uni0433 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
uni0434 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0435 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0436 = {
a2_alt = -10;
slash = 30;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0437 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni043A = {
a2_alt = -10;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni043E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0440 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0441 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0442 = {
colon = 20;
comma = -30;
period = -30;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
uni0434 = -20;
uni0442 = 30;
uni0443 = 20;
uni044A = 20;
};
uni0443 = {
comma = -30;
period = -30;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
uni0442 = 10;
uni0443 = 10;
};
uni0444 = {
quotedblright = -30;
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0445 = {
a2_alt = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0446 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0449 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni044C = {
quotedblright = -40;
uni0442 = -30;
uni044F = -10;
};
uni044D = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni044E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0451 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0490 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0433 = -40;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
uni0491 = -40;
};
uni0491 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
v = {
comma = -30;
period = -30;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
};
w = {
quotedblright = 40;
quoteright = 40;
};
w_alt = {
quotedblright = 40;
quoteright = 40;
};
wacute = {
quotedblright = 40;
quoteright = 40;
};
wcircumflex = {
quotedblright = 40;
quoteright = 40;
};
wdieresis = {
quotedblright = 40;
quoteright = 40;
};
wgrave = {
quotedblright = 40;
quoteright = 40;
};
x = {
a2_alt = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
y2_alt = {
a2_alt = -5;
c = -5;
c_alt = -5;
cacute = -5;
ccaron = -5;
ccedilla = -5;
ccircumflex = -5;
cdotaccent = -5;
comma = -30;
d = -5;
dcaron = -5;
dcroat = -5;
e = -5;
eacute = -5;
ebreve = -5;
ecaron = -5;
ecircumflex = -5;
edieresis = -5;
edotaccent = -5;
egrave = -5;
emacron = -5;
eogonek = -5;
eth = -5;
g = -5;
gbreve = -5;
gcircumflex = -5;
gdotaccent = -5;
o = -5;
oacute = -5;
obreve = -5;
ocircumflex = -5;
odieresis = -5;
oe = -5;
ograve = -5;
ohungarumlaut = -5;
omacron = -5;
oslash = -5;
otilde = -5;
period = -30;
q = -5;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
s = -5;
s_alt = -5;
sacute = -5;
scaron = -5;
scedilla = -5;
scircumflex = -5;
uni0123 = -5;
uni0219 = -5;
};
z = {
quotedblright = 40;
quoteright = 40;
};
zero = {
comma = -30;
period = -30;
quotedblbase = -30;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The Onest Project Authors (https://github.com/googlefonts/onest)";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Onest;
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Dmitri Voloshin, Andrey Kudryavtsev";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Andrey Kudryavtsev, Dmitri Voloshin";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://onest.md";
},
{
key = designerURL;
value = "https://onest.md";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
