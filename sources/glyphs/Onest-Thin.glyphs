{
.appVersion = "3112";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = PYRS;
},
{
name = panose;
value = (
2,
11,
5,
3,
3,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
9,
31,
33,
35,
37,
38,
47
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
uni0000,
uni000D,
space,
B,
D,
E,
F,
H,
I,
L,
M,
N,
P,
R,
U,
V,
W,
X,
Y,
Z,
b,
d,
h,
i,
l,
m,
n,
p,
q,
u,
v,
w,
x,
z,
period,
comma,
A,
breve,
circumflex,
uni0326,
exclam,
quotedbl,
quotesingle,
numbersign,
percent,
asterisk,
plus,
slash,
colon,
semicolon,
less,
equal,
greater,
at,
bracketleft,
bracketright,
backslash,
asciicircum,
underscore,
braceleft,
bar,
braceright,
Euro,
quotedblbase,
quotesinglbase,
quotedblright,
quoteright,
quotedblleft,
quoteleft,
minus,
hyphen,
endash,
emdash,
grave,
acute,
guillemotright,
guilsinglright,
guillemotleft,
guilsinglleft,
uni00AD,
ellipsis,
uni0445,
uni0431,
uni0432,
uni0433,
uni0434,
uni0436,
uni043A,
uni0438,
uni0439,
uni043B,
uni043C,
uni043D,
uni043F,
uni0442,
uni0444,
uni0446,
uni0447,
uni0448,
uni0449,
uni044A,
uni044B,
uni044C,
uni044E,
uni044F,
uni0410,
uni0415,
uni041C,
uni041D,
uni0420,
uni0422,
uni0425,
T,
uni0412,
uni041F,
uni0413,
uni041B,
uni0414,
uni0411,
uni0416,
uni0417,
uni0418,
uni0419,
uni041A,
uni0423,
uni0424,
uni0426,
uni0427,
uni0428,
uni0429,
uni042A,
uni042B,
uni042C,
uni042D,
uni042E,
uni042F,
uni0440,
O,
a,
c,
e,
f,
g,
j,
o,
r,
t,
y2_alt,
uni0443,
uni0451,
uni0437,
uni044D,
C,
S,
uni0421,
G,
uni041E,
Q,
J,
K_alt,
K,
k_alt,
k,
i_alt,
j_alt,
s_alt,
s,
c_alt,
copyright,
ampersand,
dollar,
parenleft,
parenright,
cent,
section,
uni04C1,
uni04C2,
w_alt,
W_alt,
zero,
one,
two,
three,
four,
seven,
eight,
nine,
uni0430,
uni0435,
uni043E,
uni0441,
uni0218,
uni0219,
uni021A,
uni021B,
question,
uni2116,
uni0401,
asciitilde,
trademark,
registered,
degree,
bullet,
uni27F5,
uni27F6,
arrowup,
arrowdown,
uni21BA,
uni21BB,
uni21B7,
uni21B6,
five,
six,
dieresis,
cedilla,
dotlessi,
ccedilla,
uni0162,
uni0163,
Ccedilla,
scedilla,
uni21A9,
uni2713,
divide,
multiply,
yen,
uni20BD,
uni20B4,
sterling,
Scedilla,
t_alt,
alt_1,
uni2117,
colon.uc,
y_alt,
u_alt,
be_alt,
g_alt,
y,
t2.alt,
f_alt,
hyphen.uc,
uni00AD.uc,
endash.uc,
emdash.uc,
a_alt,
uni0490,
uni0491,
uni0406,
uni0456,
uni0404,
uni0454,
uni0407,
uni0457,
logo,
map,
t0163.alt,
t021b.alt,
uni202F,
uni2009,
uni00A0,
a00E2.alt,
a00E4.alt,
a0103.alt,
a2_alt,
logom,
plusminus,
greaterequal,
lessequal,
notequal,
approxequal,
twosuperior,
threesuperior,
I_alt,
tab_1,
l_alt,
l2_alt,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE008,
uniE009,
arrowright,
arrowleft,
uni2197,
uni2196,
uni2198,
uni2199,
uniE010,
uniE011,
uniE012,
uniE013,
uniE014,
uniE015,
uniE016,
uniE017,
uniE018,
uniE019,
uniE020,
uniE021,
uniE022,
caron,
ordfeminine,
ordmasculine,
paragraph,
germandbls,
periodcentered,
questiondown,
exclamdown,
dotaccent,
ring,
tilde,
macron,
hungarumlaut,
ogonek,
gravecomb,
acutecomb,
uni0302,
tildecomb,
uni0304,
uni0306,
uni0307,
uni0308,
uni030A,
uni030B,
uni030C,
uni0312,
uni0327,
uni0328,
AE,
Eth,
Oslash,
Thorn,
ae,
oslash,
thorn,
eth,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
ydieresis,
OE,
oe,
Hbar,
hbar,
Eng,
eng,
Dcroat,
dcroat,
Tbar,
tbar,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
Hcircumflex,
hcircumflex,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
Idotaccent,
IJ,
ij,
Jcircumflex,
jcircumflex,
kgreenlandic,
Lacute,
lacute,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
Ncaron,
ncaron,
napostrophe,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
Racute,
racute,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scaron,
scaron,
Tcaron,
tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
uni0123,
uni0136,
uni013B,
uni013C,
uni0137,
uni0145,
uni0146,
uni0122,
uni0156,
uni0157,
uni0237,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
uni1E9E,
Ygrave,
ygrave,
uni0405,
uni0455,
uni0458,
uni0408,
uni040E,
uni045E
);
}
);
date = "2022-02-06 07:23:05 +0000";
familyName = Onest;
featurePrefixes = (
{
code = "lookup SUB_22 {
	sub colon by colon.uc;
	sub hyphen by hyphen.uc;
	sub endash by endash.uc;
	sub emdash by emdash.uc;
	sub uni00AD by uni00AD.uc;
	sub t by t2.alt;
	sub uni021B by t021b.alt;
	sub uni0163 by t0163.alt;
} SUB_22;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_0;
lookup SUB_0;
script cyrl;
language dflt;
lookup SUB_0;
lookup SUB_1 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_1;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
lookup SUB_2 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_2;
lookup SUB_0;
language AZE;
lookup SUB_0;
lookup SUB_0;
language MOL;
lookup SUB_0;
lookup SUB_0;
language ROM;
lookup SUB_0;
lookup SUB_0;
language TRK;
lookup SUB_0;
lookup SUB_0;
";
tag = salt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 useExtension {
	sub colon by colon.uc;
} SUB_3;
script cyrl;
language dflt;
lookup SUB_3;
script latn;
language dflt;
lookup SUB_3;
language AZE;
lookup SUB_3;
language MOL;
lookup SUB_3;
language ROM;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	@SUB_4_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_0_BT_0 colon' lookup SUB_22;
	@SUB_4_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_1_BT_0 hyphen' lookup SUB_22;
	@SUB_4_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_2_BT_0 endash' lookup SUB_22;
	@SUB_4_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_3_BT_0 emdash' lookup SUB_22;
	@SUB_4_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_4_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_4_5_LA_0;
	@SUB_4_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_4_6_LA_0;
	@SUB_4_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_4_7_LA_0;
} SUB_4;
lookup SUB_5 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_5;
script cyrl;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6 {
	@SUB_6_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_0_BT_0 colon' lookup SUB_22;
	@SUB_6_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_1_BT_0 hyphen' lookup SUB_22;
	@SUB_6_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_2_BT_0 endash' lookup SUB_22;
	@SUB_6_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_3_BT_0 emdash' lookup SUB_22;
	@SUB_6_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_6_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_6_5_LA_0;
	@SUB_6_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_6_6_LA_0;
	@SUB_6_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_6_7_LA_0;
} SUB_6;
lookup SUB_7 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_7;
script latn;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8 {
	@SUB_8_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_0_BT_0 colon' lookup SUB_22;
	@SUB_8_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_1_BT_0 hyphen' lookup SUB_22;
	@SUB_8_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_2_BT_0 endash' lookup SUB_22;
	@SUB_8_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_3_BT_0 emdash' lookup SUB_22;
	@SUB_8_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_8_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_8_5_LA_0;
	@SUB_8_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_8_6_LA_0;
	@SUB_8_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_8_7_LA_0;
} SUB_8;
lookup SUB_9 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_9;
language AZE;
lookup SUB_4;
lookup SUB_5;
language MOL;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language ROM;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language TRK;
lookup SUB_4;
lookup SUB_5;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_10;
script cyrl;
language dflt;
lookup SUB_10;
lookup SUB_11 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_11;
script latn;
language dflt;
lookup SUB_10;
lookup SUB_12 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_12;
language AZE;
lookup SUB_10;
language MOL;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_13;
script cyrl;
language dflt;
lookup SUB_13;
lookup SUB_14 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_14;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_15;
language AZE;
lookup SUB_13;
language MOL;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_16;
script cyrl;
language dflt;
lookup SUB_16;
lookup SUB_18 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_18;
script latn;
language dflt;
lookup SUB_16;
lookup SUB_17 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_17;
language AZE;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TRK;
lookup SUB_16;
script cyrl;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_19;
script cyrl;
language dflt;
lookup SUB_19;
lookup SUB_21 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_21;
script latn;
language dflt;
lookup SUB_19;
lookup SUB_20 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_20;
language AZE;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
script cyrl;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
";
tag = tnum;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 970;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 49 29 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 4 36 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01262 2 46 6 27 5 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123648 2368 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01258 4 38 8 20 7 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    42,\012    42,\012    36,\012    36,\012    707,\012    0,\012    527,\012    0,\012    \"-206\",\012    970,\012    \"-305\",\012    715,\012    \"-8\",\012    534,\012    \"-7\",\012    \"-245\",\012    970,\012    \"-305\",\012    42,\012    42,\012    36,\012    36,\012    707,\012    0,\012    707,\012    527,\012    0,\012    \"-206\",\012    970,\012    \"-305\",\012    715,\012    \"-8\",\012    726,\012    534,\012    \"-7\",\012    \"-257\",\012    970,\012    \"-305\",\012    24,\012    24,\012    24,\012    24,\012    751,\012    412,\012    970,\012    \"-305\",\012    751,\012    408,\012    970,\012    \"-305\"\012)";
}
);
id = m01;
metricValues = (
{
pos = 970;
},
{
pos = 707;
},
{
pos = 527;
},
{
},
{
pos = -305;
},
{
}
);
name = Thin;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,-295,l),
(520,960,l),
(20,960,l),
(20,-295,l)
);
},
{
closed = 1;
nodes = (
(510,950,l),
(510,-285,l),
(30,-285,l),
(30,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 0 95 0 0 0 68 77 0 2 2 1 95 0 1 1 69 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = ".notdef";
},
{
glyphname = uni0000;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0000;
},
{
glyphname = uni000D;
layers = (
{
layerId = m01;
width = 189;
}
);
note = uni000D;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 270;
}
);
note = space;
unicode = 32;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,0,ls),
(373,0,o),
(470,16,o),
(548,57,o),
(596,130,o),
(596,187,qs),
(596,226,o),
(570,291,o),
(523,337,o),
(458,366,o),
(419,369,q),
(480,385,o),
(557,470,o),
(557,539,qs),
(557,592,o),
(519,658,o),
(456,694,o),
(375,707,o),
(331,707,qs),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(368,669,o),
(435,660,o),
(487,632,o),
(518,579,o),
(518,535,qs),
(518,490,o),
(477,430,o),
(413,395,o),
(335,380,o),
(298,380,qs),
(134,380,l),
(134,669,l),
(332,669,ls)
);
},
{
closed = 1;
nodes = (
(134,343,l),
(344,343,ls),
(382,343,o),
(457,329,o),
(517,295,o),
(554,236,o),
(554,190,qs),
(554,137,o),
(511,77,o),
(444,46,o),
(361,38,o),
(322,38,qs),
(134,38,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 38 77 7 1 4 4 1 95 0 1 1 39 1 78 35 34 21 21 45 43 34 46 35 46 21 33 21 32 24 22 20 18 32 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = B;
unicode = 66;
},
{
glyphname = D;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,0,ls),
(417,0,o),
(540,52,o),
(623,145,o),
(665,275,o),
(665,353,qs),
(665,432,o),
(623,563,o),
(541,656,o),
(418,707,o),
(336,707,qs),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(407,669,o),
(515,622,o),
(586,537,o),
(621,421,o),
(621,353,qs),
(621,283,o),
(584,167,o),
(510,83,o),
(401,38,o),
(328,38,qs),
(135,38,l),
(135,669,l),
(335,669,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 13 13 13 25 13 24 34 40 32 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,309,l),
(489,309,l),
(489,346,l),
(135,346,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 5 1 4 4 39 4 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = F;
unicode = 70;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,707,l),
(93,707,l),
(93,0,l),
(135,0,l),
(135,328,l),
(590,328,l),
(590,0,l),
(632,0,l),
(632,707,l),
(590,707,l),
(590,365,l),
(135,365,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 1 5 0 2 1 5 2 103 4 1 0 0 38 77 3 1 1 1 39 1 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = I;
unicode = 73;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l),
(549,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 38 77 0 1 1 2 95 3 1 2 2 39 2 78 0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,255,l),
(153,707,l),
(93,707,l),
(93,0,l),
(135,0,l),
(135,657,l),
(409,195,l),
(431,195,l),
(700,657,l),
(700,0,l),
(742,0,l),
(742,707,l),
(683,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 3 3 1 3 1 76 0 1 3 0 3 1 0 128 5 4 2 3 3 38 77 2 1 0 0 39 0 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 835;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,659,l),
(593,0,l),
(651,0,l),
(651,707,l),
(609,707,l),
(609,49,l),
(154,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
7 2 2 2 0 1 76 1 1 0 0 38 77 3 1 2 2 39 2 78 18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = N;
unicode = 78;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,250,l),
(308,250,ls),
(363,250,o),
(459,278,o),
(529,335,o),
(569,421,o),
(569,480,qs),
(569,597,o),
(441,707,o),
(328,707,qs),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(135,669,l),
(322,669,ls),
(369,669,o),
(444,649,o),
(497,604,o),
(525,534,o),
(525,484,qs),
(525,432,o),
(493,358,o),
(436,310,o),
(355,287,o),
(306,287,qs),
(135,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 38 77 0 2 2 39 2 78 14 13 24 22 13 25 14 25 17 38 32 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = P;
unicode = 80;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,0,l),
(579,0,l),
(421,293,l),
(507,312,o),
(595,415,o),
(595,495,qs),
(595,554,o),
(559,635,o),
(495,685,o),
(405,707,o),
(350,707,qs),
(93,707,l),
(93,0,l),
(135,0,l),
(135,286,l),
(377,286,l)
);
},
{
closed = 1;
nodes = (
(135,669,l),
(340,669,ls),
(385,669,o),
(462,654,o),
(519,615,o),
(551,549,o),
(551,498,qs),
(551,444,o),
(513,375,o),
(449,337,o),
(366,323,o),
(322,323,qs),
(135,323,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
12 1 3 4 1 76 7 1 4 6 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 17 16 0 0 27 25 16 28 17 28 0 15 0 15 24 33 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = R;
unicode = 82;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 0 25 0 25 37 21 37 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(68,707,l),
(20,707,l),
(299,0,l),
(352,0,l),
(628,707,l),
(581,707,l),
(325,47,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
6 1 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,663,l),
(657,0,l),
(718,0,l),
(917,707,l),
(871,707,l),
(688,44,l),
(498,707,l),
(437,707,l),
(250,44,l),
(66,707,l),
(20,707,l),
(219,0,l),
(284,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 38 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 937;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,707,l),
(28,707,l),
(249,356,l),
(20,0,l),
(74,0,l),
(278,323,l),
(483,0,l),
(538,0,l),
(309,358,l),
(529,707,l),
(473,707,l),
(279,390,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(20,707,l),
(272,267,l),
(272,0,l),
(314,0,l),
(314,267,l),
(563,707,l),
(514,707,l),
(293,310,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
8 5 2 3 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 18 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,40,l),
(50,0,l),
(538,0,l),
(538,38,l),
(100,38,l),
(543,668,l),
(543,707,l),
(65,707,l),
(65,669,l),
(487,669,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
8 3 2 1 3 1 76 4 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = Z;
unicode = 90;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,69,o),
(180,25,o),
(234,1,o),
(290,-7,o),
(315,-7,qs),
(373,-7,o),
(463,33,o),
(525,104,o),
(556,203,o),
(556,262,qs),
(556,316,o),
(529,414,o),
(474,489,o),
(387,534,o),
(327,534,qs),
(264,534,o),
(153,484,o),
(115,419,q),
(115,707,l),
(73,707,l),
(73,0,l),
(113,0,l),
(113,105,l)
);
},
{
closed = 1;
nodes = (
(189,66,o),
(138,129,o),
(113,214,o),
(113,262,qs),
(113,307,o),
(139,392,o),
(190,458,o),
(265,498,o),
(315,498,qs),
(369,498,o),
(445,460,o),
(492,395,o),
(514,310,o),
(514,262,qs),
(514,215,o),
(491,131,o),
(442,67,o),
(367,29,o),
(316,29,qs),
(265,29,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
22 4 2 4 5 1 76 0 1 1 38 77 0 5 5 2 97 0 2 2 49 77 0 0 0 39 77 6 1 4 4 3 97 0 3 3 50 3 78 24 23 34 32 23 42 24 42 40 35 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = b;
unicode = 98;
},
{
glyphname = d;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,456,o),
(430,497,o),
(377,523,o),
(321,534,o),
(295,534,qs),
(238,534,o),
(148,495,o),
(86,424,o),
(53,323,o),
(53,262,qs),
(53,208,o),
(78,110,o),
(133,37,o),
(221,-7,o),
(284,-7,qs),
(311,-7,o),
(371,5,o),
(427,33,o),
(476,79,o),
(494,113,q),
(494,0,l),
(536,0,l),
(536,707,l),
(494,707,l),
(494,426,l)
);
},
{
closed = 1;
nodes = (
(420,461,o),
(471,398,o),
(496,314,o),
(496,266,qs),
(496,218,o),
(468,132,o),
(415,67,o),
(338,29,o),
(288,29,qs),
(230,29,o),
(155,71,o),
(112,138,o),
(95,222,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
24 4 2 5 4 1 76 0 0 0 38 77 6 1 4 4 3 97 0 3 3 49 77 0 1 1 39 77 0 5 5 2 97 0 2 2 50 2 78 26 25 36 34 25 44 26 44 40 37 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = d;
unicode = 100;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,394,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,342,o),
(499,430,o),
(451,496,o),
(373,534,o),
(316,534,qs),
(254,534,o),
(150,482,o),
(115,423,q),
(115,707,l),
(73,707,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 2 3 1 76 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 0 0 0 25 0 25 37 21 35 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,706,o),
(65,687,qs),
(65,669,o),
(88,648,o),
(105,648,qs),
(123,648,o),
(145,669,o),
(145,687,qs),
(145,704,o),
(123,726,o),
(105,726,qs),
(88,726,o)
);
},
{
closed = 1;
nodes = (
(125,0,l),
(125,527,l),
(83,527,l),
(83,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 1 0 97 4 1 0 0 48 77 0 2 2 41 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 1 0 97 4 1 0 0 46 77 0 2 2 41 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 0 0 1 2 0 1 105 0 2 2 41 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 15 14 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = i;
unicode = 105;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,707,l),
(75,707,l),
(75,0,l),
(117,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 192;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,527,l),
(73,0,l),
(115,0,l),
(115,275,ls),
(115,319,o),
(132,400,o),
(170,461,o),
(231,498,o),
(274,498,qs),
(316,498,o),
(368,460,o),
(397,402,o),
(406,332,o),
(406,299,qs),
(406,0,l),
(448,0,l),
(448,286,ls),
(448,323,o),
(464,398,o),
(500,459,o),
(558,498,o),
(600,498,qs),
(642,498,o),
(693,469,o),
(719,420,o),
(727,356,o),
(727,322,qs),
(727,0,l),
(769,0,l),
(769,350,ls),
(769,390,o),
(750,458,o),
(709,507,o),
(645,534,o),
(601,534,qs),
(562,534,o),
(503,509,o),
(461,470,o),
(436,423,o),
(432,401,q),
(418,466,o),
(336,534,o),
(277,534,qs),
(258,534,o),
(214,527,o),
(169,504,o),
(127,462,o),
(112,428,q),
(112,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
8 0 2 2 3 1 76 0 7 7 41 77 5 1 3 3 0 97 1 1 0 0 49 77 6 4 2 2 2 39 2 78 17 21 37 21 37 21 38 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 839;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,394,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,342,o),
(499,430,o),
(451,496,o),
(373,534,o),
(316,534,qs),
(254,534,o),
(150,482,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 2 3 1 76 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 0 0 0 25 0 25 37 21 35 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = n;
unicode = 110;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,65,o),
(184,24,o),
(240,1,o),
(296,-7,o),
(320,-7,qs),
(378,-7,o),
(466,31,o),
(526,100,o),
(556,199,o),
(556,259,qs),
(556,315,o),
(528,415,o),
(471,490,o),
(383,534,o),
(323,534,qs),
(255,534,o),
(154,482,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,-206,l),
(115,-206,l),
(115,98,l)
);
},
{
closed = 1;
nodes = (
(192,65,o),
(140,127,o),
(113,212,o),
(113,262,qs),
(113,307,o),
(139,392,o),
(190,458,o),
(265,498,o),
(315,498,qs),
(369,498,o),
(445,460,o),
(492,395,o),
(514,310,o),
(514,262,qs),
(514,215,o),
(493,131,o),
(448,67,o),
(375,29,o),
(323,29,qs),
(271,29,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 4 2 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 41 77 0 5 5 2 97 0 2 2 49 77 6 1 4 4 3 97 0 3 3 50 77 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 3 0 134 0 1 1 41 77 0 5 5 2 97 0 2 2 49 77 6 1 4 4 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
24 23 34 32 23 42 24 42 40 35 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,476,o),
(365,534,o),
(293,534,qs),
(236,534,o),
(146,490,o),
(85,416,o),
(53,318,o),
(53,264,qs),
(53,219,o),
(74,123,o),
(127,44,o),
(218,-7,o),
(288,-7,qs),
(362,-7,o),
(464,53,o),
(494,107,q),
(494,-206,l),
(536,-206,l),
(536,527,l),
(494,527,l),
(493,429,l)
);
},
{
closed = 1;
nodes = (
(422,461,o),
(471,398,o),
(496,313,o),
(496,265,qs),
(496,220,o),
(471,135,o),
(421,69,o),
(346,29,o),
(296,29,qs),
(242,29,o),
(165,66,o),
(117,131,o),
(95,217,o),
(95,265,qs),
(95,310,o),
(119,394,o),
(168,459,o),
(243,498,o),
(295,498,qs),
(346,498,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 4 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 41 77 6 1 4 4 3 97 0 3 3 49 77 0 5 5 2 97 0 2 2 50 77 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 2 1 134 0 0 0 41 77 6 1 4 4 3 97 0 3 3 49 77 0 5 5 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 40 22 40 40 35 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = q;
unicode = 113;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 41 77 4 1 0 0 2 97 0 2 2 50 2 78 1 0 16 15 12 10 7 6 0 21 1 21 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,0,l),
(495,527,l),
(448,527,l),
(254,36,l),
(61,527,l),
(13,527,l),
(223,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 41 77 0 2 2 39 2 78 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,527,l),
(212,36,l),
(64,527,l),
(19,527,l),
(178,0,l),
(244,0,l),
(402,492,l),
(559,0,l),
(622,0,l),
(783,527,l),
(737,527,l),
(591,36,l),
(436,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
10 5 2 1 0 1 76 4 3 2 0 0 41 77 2 1 1 1 39 1 78 18 17 18 17 17 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 802;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(273,271,l),
(452,527,l),
(400,527,l),
(244,296,l),
(86,527,l),
(34,527,l),
(213,268,l),
(20,0,l),
(72,0,l),
(242,239,l),
(412,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 0 1 1 76 2 1 1 1 41 77 3 1 0 0 39 0 78 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = x;
unicode = 120;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,527,l),
(58,492,l),
(422,492,l),
(53,43,l),
(53,0,l),
(469,0,l),
(469,36,l),
(97,36,l),
(469,485,l),
(469,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
5 0 2 0 2 1 76 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = z;
unicode = 122;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,51,o),
(73,33,qs),
(73,16,o),
(94,-8,o),
(113,-8,qs),
(132,-8,o),
(153,16,o),
(153,33,qs),
(153,51,o),
(131,73,o),
(113,73,qs),
(95,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 47 1 78 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 226;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,50,o),
(72,33,qs),
(72,19,o),
(83,2,o),
(99,-6,o),
(117,-8,o),
(123,-6,q),
(119,-36,o),
(85,-78,o),
(68,-88,q),
(83,-108,l),
(117,-89,o),
(158,-23,o),
(158,18,qs),
(158,38,o),
(139,73,o),
(114,73,qs),
(95,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
7 6 2 1 73 2 1 0 0 1 97 0 1 1 50 1 78 1 0 12 10 0 17 1 17 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
note = comma;
unicode = 44;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
10 1 4 0 1 76 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 17 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = A;
unicode = 65;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,706,o),
(150,667,o),
(189,645,o),
(239,636,o),
(266,636,qs),
(293,636,o),
(343,645,o),
(383,668,o),
(410,706,o),
(414,735,q),
(375,735,l),
(367,694,o),
(306,669,o),
(267,669,qs),
(227,669,o),
(167,694,o),
(159,735,q),
(120,735,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 0 0 0 17 0 17 36 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 534;
}
);
note = breve;
unicode = 728;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,763,l),
(237,763,l),
(126,636,l),
(170,636,l),
(252,734,l),
(337,636,l),
(380,636,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
1 1 0 1 1 76 0 1 0 1 133 3 2 2 0 0 118 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 506;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-326,-142,o),
(-326,-159,qs),
(-326,-173,o),
(-315,-190,o),
(-299,-198,o),
(-281,-200,o),
(-275,-198,q),
(-279,-228,o),
(-313,-270,o),
(-330,-280,q),
(-315,-300,l),
(-281,-281,o),
(-240,-215,o),
(-240,-172,qs),
(-240,-151,o),
(-263,-119,o),
(-285,-119,qs),
(-303,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 34 values pushed */
7 6 2 1 73 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 12 10 0 17 1 17 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,51,o),
(82,32,qs),
(82,14,o),
(104,-8,o),
(123,-8,qs),
(140,-8,o),
(162,13,o),
(162,31,qs),
(162,51,o),
(139,72,o),
(123,72,qs),
(104,72,o)
);
},
{
closed = 1;
nodes = (
(143,707,l),
(102,707,l),
(104,177,l),
(141,177,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
5 1 3 2 0 2 3 0 128 0 2 2 38 77 4 1 0 0 1 97 0 1 1 47 1 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,707,l),
(69,503,l),
(104,503,l),
(109,707,l)
);
},
{
closed = 1;
nodes = (
(189,707,l),
(196,503,l),
(231,503,l),
(236,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 38 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,707,l),
(69,503,l),
(104,503,l),
(109,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 38 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 172;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,194,l),
(149,0,l),
(190,0,l),
(210,194,l),
(405,194,l),
(385,0,l),
(425,0,l),
(446,194,l),
(554,194,l),
(554,229,l),
(449,229,l),
(476,479,l),
(585,479,l),
(585,514,l),
(480,514,l),
(501,707,l),
(460,707,l),
(440,514,l),
(245,514,l),
(265,707,l),
(223,707,l),
(203,514,l),
(96,514,l),
(96,479,l),
(200,479,l),
(173,229,l),
(65,229,l),
(65,194,l)
);
},
{
closed = 1;
nodes = (
(436,479,l),
(410,229,l),
(214,229,l),
(240,479,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
14 8 2 0 13 11 2 9 10 0 9 103 5 1 3 3 38 77 15 7 2 1 1 2 95 6 4 2 2 2 41 77 12 1 10 10 39 10 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
6 4 2 2 15 7 2 1 0 2 1 104 14 8 2 0 13 11 2 9 10 0 9 103 5 1 3 3 38 77 12 1 10 10 39 10 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 650;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(636,707,l),
(588,707,l),
(152,0,l),
(201,0,l)
);
},
{
closed = 1;
nodes = (
(274,452,o),
(307,491,o),
(324,543,o),
(324,572,qs),
(324,600,o),
(308,652,o),
(276,691,o),
(228,715,o),
(196,715,qs),
(131,715,o),
(65,634,o),
(65,572,qs),
(65,510,o),
(131,429,o),
(194,429,qs),
(225,429,o)
);
},
{
closed = 1;
nodes = (
(256,660,o),
(277,629,o),
(285,591,o),
(285,572,qs),
(285,552,o),
(277,514,o),
(256,483,o),
(222,464,o),
(196,464,qs),
(170,464,o),
(135,482,o),
(113,512,o),
(103,551,o),
(103,572,qs),
(103,593,o),
(113,632,o),
(135,662,o),
(170,680,o),
(196,680,qs),
(222,680,o)
);
},
{
closed = 1;
nodes = (
(673,15,o),
(706,54,o),
(723,106,o),
(723,135,qs),
(723,163,o),
(707,215,o),
(675,254,o),
(627,278,o),
(595,278,qs),
(530,278,o),
(464,197,o),
(464,135,qs),
(464,73,o),
(530,-8,o),
(593,-8,qs),
(624,-8,o)
);
},
{
closed = 1;
nodes = (
(655,223,o),
(676,192,o),
(684,154,o),
(684,135,qs),
(684,115,o),
(676,77,o),
(655,46,o),
(621,27,o),
(595,27,qs),
(569,27,o),
(534,45,o),
(512,75,o),
(502,114,o),
(502,135,qs),
(502,156,o),
(512,195,o),
(534,225,o),
(569,243,o),
(595,243,qs),
(621,243,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
0 5 11 1 2 7 5 2 105 0 7 14 1 8 9 7 8 105 0 0 0 38 77 12 1 4 4 3 97 0 3 3 46 77 10 1 1 1 39 77 0 9 9 6 97 13 1 6 6 47 6 78 57 56 41 40 21 20 5 4 0 0 67 65 56 75 57 75 47 45 40 55 41 55 31 29 20 39 21 39 11 9 4 19 5 19 0 3 0 3 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = percent;
unicode = 37;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,739,l),
(187,629,l),
(82,663,l),
(73,635,l),
(178,603,l),
(112,513,l),
(137,497,l),
(202,586,l),
(267,497,l),
(292,513,l),
(227,602,l),
(331,635,l),
(321,663,l),
(218,629,l),
(218,739,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
12 11 10 9 8 7 6 5 4 3 2 1 0 13 0 73 0 0 0 118 29 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,374,l),
(80,374,l),
(80,336,l),
(231,336,l),
(231,171,l),
(274,171,l),
(274,336,l),
(428,336,l),
(428,374,l),
(274,374,l),
(274,536,l),
(231,536,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
4 1 0 3 1 1 2 0 1 103 0 2 2 5 95 6 1 5 5 41 2 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = plus;
unicode = 43;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,-178,l),
(401,807,l),
(354,807,l),
(39,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = slash;
unicode = 47;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,427,o),
(73,409,qs),
(73,391,o),
(93,368,o),
(113,368,qs),
(133,368,o),
(153,391,o),
(153,409,qs),
(153,427,o),
(132,450,o),
(113,450,qs),
(94,450,o)
);
},
{
closed = 1;
nodes = (
(73,50,o),
(73,32,qs),
(73,15,o),
(94,-8,o),
(113,-8,qs),
(132,-8,o),
(153,15,o),
(153,32,qs),
(153,50,o),
(132,73,o),
(113,73,qs),
(94,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 47 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 226;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,427,o),
(75,409,qs),
(75,391,o),
(97,368,o),
(115,368,qs),
(135,368,o),
(157,391,o),
(157,409,qs),
(157,427,o),
(134,450,o),
(115,450,qs),
(97,450,o)
);
},
{
closed = 1;
nodes = (
(73,50,o),
(73,33,qs),
(73,19,o),
(84,2,o),
(100,-6,o),
(118,-8,o),
(124,-6,q),
(120,-36,o),
(86,-78,o),
(69,-88,q),
(84,-108,l),
(118,-89,o),
(159,-23,o),
(159,18,qs),
(159,38,o),
(140,73,o),
(115,73,qs),
(96,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
19 18 2 3 73 4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 50 3 78 13 12 1 0 24 22 12 29 13 29 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,126,l),
(354,170,l),
(91,351,l),
(354,532,l),
(354,575,l),
(45,361,l),
(45,339,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,203,l),
(454,240,l),
(75,240,l),
(75,203,l)
);
},
{
closed = 1;
nodes = (
(454,458,l),
(454,495,l),
(75,495,l),
(75,458,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,575,l),
(75,532,l),
(338,350,l),
(75,170,l),
(75,126,l),
(384,339,l),
(384,361,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = greater;
unicode = 62;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(663,70,o),
(695,46,o),
(735,36,o),
(757,36,qs),
(806,36,o),
(870,81,o),
(909,155,o),
(925,247,o),
(925,294,qs),
(925,384,o),
(872,538,o),
(772,651,o),
(625,715,o),
(532,715,qs),
(425,715,o),
(257,641,o),
(140,510,o),
(77,333,o),
(76,231,qs),
(78,136,o),
(139,-17,o),
(247,-126,o),
(399,-186,o),
(492,-188,qs),
(513,-189,o),
(568,-188,o),
(593,-184,q),
(592,-144,l),
(570,-148,o),
(527,-149,o),
(504,-149,qs),
(417,-148,o),
(275,-92,o),
(176,8,o),
(122,148,o),
(122,232,qs),
(122,323,o),
(176,485,o),
(280,607,o),
(432,679,o),
(531,679,qs),
(621,679,o),
(755,617,o),
(843,509,o),
(887,366,o),
(887,287,qs),
(887,257,o),
(875,181,o),
(847,114,o),
(797,69,o),
(760,69,qs),
(732,69,o),
(697,89,o),
(679,123,o),
(674,165,o),
(675,188,qs),
(678,254,o),
(689,386,o),
(697,453,q),
(659,453,l),
(652,380,l),
(641,407,o),
(607,443,o),
(568,463,o),
(527,471,o),
(509,471,qs),
(459,471,o),
(383,431,o),
(333,364,o),
(308,277,o),
(308,231,qs),
(308,192,o),
(328,123,o),
(368,71,o),
(430,41,o),
(472,41,qs),
(493,41,o),
(539,49,o),
(583,71,o),
(624,109,o),
(641,139,q),
(643,110,o)
);
},
{
closed = 1;
nodes = (
(364,342,o),
(404,400,o),
(464,437,o),
(506,437,qs),
(543,437,o),
(596,408,o),
(629,360,o),
(644,299,o),
(644,267,qs),
(644,233,o),
(620,165,o),
(577,110,o),
(516,76,o),
(479,76,qs),
(444,76,o),
(393,102,o),
(360,145,o),
(345,202,o),
(345,233,qs),
(345,269,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
20 0 2 9 10 53 1 5 0 54 1 6 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
20 0 2 9 10 53 1 5 8 54 1 6 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 10 1 2 10 128 0 1 0 10 9 1 10 105 0 9 3 0 9 89 0 3 8 1 0 5 3 0 105 0 4 4 7 97 0 7 7 46 77 0 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 10 1 2 10 128 0 1 0 10 9 1 10 105 0 9 3 0 9 89 0 3 8 1 0 5 3 0 105 0 5 0 6 5 6 101 0 4 4 7 97 0 7 7 46 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 10 1 2 10 128 0 1 0 10 9 1 10 105 0 9 0 0 8 9 0 105 0 3 0 8 5 3 8 105 0 5 0 6 5 6 101 0 4 4 7 97 0 7 7 46 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
98 96 88 86 40 40 51 56 40 39 21 40 36 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 1000;
}
);
note = at;
unicode = 64;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(259,-164,l),
(135,-164,l),
(135,762,l),
(259,762,l),
(259,796,l),
(93,796,l),
(93,-197,l),
(259,-197,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 1 2 0 1 103 0 2 2 3 95 4 1 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 4 1 3 2 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 300;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,762,l),
(164,762,l),
(164,-164,l),
(41,-164,l),
(41,-197,l),
(206,-197,l),
(206,796,l),
(41,796,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,-178,l),
(401,-178,l),
(86,807,l),
(39,807,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,546,l),
(216,715,l),
(184,715,l),
(64,546,l),
(100,546,l),
(200,691,l),
(301,546,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 2 1 0 0 118 17 17 17 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 400;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,-188,l),
(452,-151,l),
(3,-151,l),
(3,-188,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 455;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(182,170,o),
(176,216,o),
(160,258,o),
(128,291,o),
(103,300,q),
(128,312,o),
(159,346,o),
(176,387,o),
(182,432,o),
(182,455,qs),
(182,662,ls),
(182,684,o),
(182,721,o),
(192,747,o),
(220,761,o),
(247,761,qs),
(306,761,l),
(306,796,l),
(248,796,ls),
(197,796,o),
(147,759,o),
(147,706,qs),
(147,470,ls),
(147,441,o),
(140,387,o),
(117,345,o),
(76,316,o),
(43,312,q),
(43,287,l),
(77,282,o),
(118,253,o),
(140,210,o),
(147,156,o),
(147,127,qs),
(147,-106,ls),
(147,-159,o),
(198,-197,o),
(248,-197,qs),
(306,-197,l),
(306,-162,l),
(256,-162,ls),
(232,-162,o),
(203,-155,o),
(187,-135,o),
(182,-98,o),
(182,-68,qs),
(182,149,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
41 18 17 3 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 0 2 3 105 0 0 0 1 97 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 105 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
31 29 28 26 33 36 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,807,l),
(93,807,l),
(93,-178,l),
(135,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,429,o),
(195,383,o),
(211,341,o),
(242,308,o),
(268,299,q),
(243,287,o),
(212,253,o),
(195,212,o),
(189,167,o),
(189,144,qs),
(189,-63,ls),
(189,-86,o),
(189,-122,o),
(179,-148,o),
(151,-162,o),
(124,-162,qs),
(65,-162,l),
(65,-197,l),
(123,-197,ls),
(174,-197,o),
(224,-160,o),
(224,-107,qs),
(224,129,ls),
(224,158,o),
(231,212,o),
(254,254,o),
(295,283,o),
(328,287,q),
(328,312,l),
(294,316,o),
(253,346,o),
(231,389,o),
(224,443,o),
(224,472,qs),
(224,705,ls),
(224,758,o),
(173,796,o),
(123,796,qs),
(65,796,l),
(65,761,l),
(115,761,ls),
(139,761,o),
(168,754,o),
(184,734,o),
(189,697,o),
(189,667,qs),
(189,450,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
41 18 17 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 0 3 1 0 105 0 3 3 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 3 1 0 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
31 29 28 26 33 36 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 371;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,18,o),
(621,48,q),
(598,79,l),
(563,52,o),
(489,28,o),
(443,28,qs),
(347,28,o),
(221,141,o),
(201,240,q),
(498,240,l),
(505,278,l),
(196,278,l),
(193,294,o),
(191,335,o),
(191,377,o),
(194,417,o),
(196,433,q),
(533,433,l),
(539,470,l),
(203,470,l),
(214,515,o),
(256,592,o),
(314,648,o),
(390,679,o),
(435,679,qs),
(480,679,o),
(553,658,o),
(589,633,q),
(608,665,l),
(537,715,o),
(438,715,qs),
(325,715,o),
(187,582,o),
(160,470,q),
(63,470,l),
(56,433,l),
(154,433,l),
(149,393,o),
(147,320,o),
(152,278,q),
(62,278,l),
(55,240,l),
(156,240,l),
(179,123,o),
(321,-8,o),
(439,-8,qs),
(487,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
18 17 2 4 6 44 43 2 11 1 2 76 7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 0 11 11 0 97 12 1 0 0 47 0 78 1 0 41 39 37 36 35 34 29 28 27 26 22 20 16 14 12 11 10 9 6 5 4 3 0 46 1 46 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,50,o),
(73,33,qs),
(73,19,o),
(84,2,o),
(100,-6,o),
(118,-8,o),
(124,-6,q),
(120,-36,o),
(86,-78,o),
(69,-88,q),
(84,-108,l),
(118,-89,o),
(159,-23,o),
(159,18,qs),
(159,38,o),
(140,73,o),
(115,73,qs),
(96,73,o)
);
},
{
closed = 1;
nodes = (
(223,50,o),
(223,33,qs),
(223,19,o),
(234,2,o),
(250,-6,o),
(268,-8,o),
(274,-6,q),
(270,-36,o),
(236,-78,o),
(219,-88,q),
(234,-108,l),
(268,-89,o),
(309,-23,o),
(309,18,qs),
(309,38,o),
(290,73,o),
(265,73,qs),
(246,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
25 24 7 6 4 1 73 5 2 4 3 0 0 1 97 3 1 1 1 50 1 78 19 18 1 0 30 28 18 35 19 35 12 10 0 17 1 17 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 383;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,50,o),
(73,33,qs),
(73,19,o),
(84,2,o),
(100,-6,o),
(118,-8,o),
(124,-6,q),
(120,-36,o),
(86,-78,o),
(69,-88,q),
(84,-108,l),
(118,-89,o),
(159,-23,o),
(159,18,qs),
(159,38,o),
(140,73,o),
(115,73,qs),
(96,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
7 6 2 1 73 2 1 0 0 1 97 0 1 1 50 1 78 1 0 12 10 0 17 1 17 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 231;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,709,o),
(73,692,qs),
(73,678,o),
(84,661,o),
(100,653,o),
(118,651,o),
(124,653,q),
(120,623,o),
(86,581,o),
(69,571,q),
(84,551,l),
(118,570,o),
(159,636,o),
(159,677,qs),
(159,697,o),
(140,732,o),
(115,732,qs),
(96,732,o)
);
},
{
closed = 1;
nodes = (
(223,709,o),
(223,692,qs),
(223,678,o),
(234,661,o),
(250,653,o),
(268,651,o),
(274,653,q),
(270,623,o),
(236,581,o),
(219,571,q),
(234,551,l),
(268,570,o),
(309,636,o),
(309,677,qs),
(309,697,o),
(290,732,o),
(265,732,qs),
(246,732,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
25 24 7 6 4 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
3 1 1 1 0 97 5 2 4 3 0 0 48 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
19 18 1 0 30 28 18 35 19 35 12 10 0 17 1 17 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 383;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,709,o),
(73,692,qs),
(73,678,o),
(84,661,o),
(100,653,o),
(118,651,o),
(124,653,q),
(120,623,o),
(86,581,o),
(69,571,q),
(84,551,l),
(118,570,o),
(159,636,o),
(159,677,qs),
(159,703,o),
(135,732,o),
(115,732,qs),
(96,732,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
7 6 2 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 48 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 12 10 0 17 1 17 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,574,o),
(309,591,qs),
(309,605,o),
(298,622,o),
(282,630,o),
(264,631,o),
(258,630,q),
(262,660,o),
(296,702,o),
(313,712,q),
(298,732,l),
(264,713,o),
(223,647,o),
(223,606,qs),
(223,586,o),
(242,551,o),
(267,551,qs),
(286,551,o)
);
},
{
closed = 1;
nodes = (
(159,574,o),
(159,591,qs),
(159,605,o),
(148,622,o),
(132,630,o),
(114,631,o),
(108,630,q),
(112,660,o),
(146,702,o),
(163,712,q),
(148,732,l),
(114,713,o),
(73,647,o),
(73,606,qs),
(73,586,o),
(92,551,o),
(117,551,qs),
(136,551,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
25 24 7 6 4 1 74 3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 19 18 1 0 30 28 18 35 19 35 12 10 0 17 1 17 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,574,o),
(159,591,qs),
(159,605,o),
(148,622,o),
(132,630,o),
(114,631,o),
(108,630,q),
(112,660,o),
(146,702,o),
(163,712,q),
(148,732,l),
(114,713,o),
(73,647,o),
(73,606,qs),
(73,586,o),
(92,551,o),
(117,551,qs),
(136,551,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
7 6 2 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 12 10 0 17 1 17 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,336,l),
(428,336,l),
(428,374,l),
(80,374,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,260,l),
(360,297,l),
(80,297,l),
(80,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,297,l),
(80,260,l),
(488,260,l),
(488,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,297,l),
(80,260,l),
(681,260,l),
(681,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,636,l),
(181,636,l),
(105,763,l),
(55,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 285;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,636,l),
(149,636,l),
(237,763,l),
(187,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 285;
}
);
note = acute;
unicode = 180;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,97,l),
(103,97,l),
(211,259,l),
(103,419,l),
(62,419,l),
(170,258,l)
);
},
{
closed = 1;
nodes = (
(250,97,l),
(290,97,l),
(398,259,l),
(290,419,l),
(249,419,l),
(358,258,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 443;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(63,97,l),
(103,97,l),
(211,259,l),
(103,419,l),
(63,419,l),
(169,258,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 256;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,419,l),
(340,419,l),
(232,257,l),
(340,97,l),
(380,97,l),
(273,258,l)
);
},
{
closed = 1;
nodes = (
(194,419,l),
(153,419,l),
(45,257,l),
(153,97,l),
(193,97,l),
(85,258,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 0 1 1 76 3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 443;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,419,l),
(153,419,l),
(45,257,l),
(153,97,l),
(193,97,l),
(86,258,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 256;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,260,l),
(360,297,l),
(80,297,l),
(80,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,50,o),
(74,32,qs),
(74,15,o),
(95,-8,o),
(114,-8,qs),
(133,-8,o),
(154,15,o),
(154,32,qs),
(154,50,o),
(133,73,o),
(114,73,qs),
(95,73,o)
);
},
{
closed = 1;
nodes = (
(294,50,o),
(294,32,qs),
(294,15,o),
(315,-8,o),
(334,-8,qs),
(353,-8,o),
(374,15,o),
(374,32,qs),
(374,50,o),
(353,73,o),
(334,73,qs),
(315,73,o)
);
},
{
closed = 1;
nodes = (
(514,50,o),
(514,32,qs),
(514,15,o),
(535,-8,o),
(554,-8,qs),
(573,-8,o),
(594,15,o),
(594,32,qs),
(594,50,o),
(573,73,o),
(554,73,qs),
(535,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 4 7 2 6 5 0 0 1 97 5 3 2 1 1 47 1 78 25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = uni0445;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,0,l),
(273,271,l),
(452,527,l),
(400,527,l),
(244,296,l),
(86,527,l),
(34,527,l),
(213,268,l),
(20,0,l),
(72,0,l),
(242,239,l),
(412,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 0 1 1 76 2 1 1 1 22 77 3 1 0 0 21 0 78 18 18 18 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = uni0445;
unicode = 1093;
},
{
glyphname = uni0431;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,421,o),
(98,484,o),
(113,546,o),
(128,573,qs),
(142,598,o),
(181,632,o),
(228,653,o),
(282,665,o),
(311,668,qs),
(340,672,o),
(397,677,o),
(429,680,qs),
(448,682,o),
(489,686,o),
(508,691,q),
(508,730,l),
(491,727,o),
(456,721,o),
(441,719,qs),
(396,714,o),
(302,705,o),
(251,695,qs),
(185,682,o),
(105,618,o),
(63,527,o),
(50,415,o),
(50,354,qs),
(50,292,o),
(64,164,o),
(114,59,o),
(208,-7,o),
(288,-7,qs),
(344,-7,o),
(433,31,o),
(494,99,o),
(527,191,o),
(527,245,qs),
(527,296,o),
(498,383,o),
(442,447,o),
(360,484,o),
(307,484,qs),
(281,484,o),
(220,473,o),
(160,442,o),
(106,387,o),
(88,343,q),
(89,364,o)
);
},
{
closed = 1;
nodes = (
(172,63,o),
(125,120,o),
(101,197,o),
(101,241,qs),
(101,282,o),
(130,356,o),
(183,413,o),
(254,446,o),
(296,446,qs),
(341,446,o),
(412,415,o),
(460,361,o),
(485,287,o),
(485,243,qs),
(485,199,o),
(459,122,o),
(410,63,o),
(337,29,o),
(290,29,qs),
(243,29,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 1 76 32 31 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 49 48 59 57 48 67 49 67 40 36 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni0431;
unicode = 1073;
},
{
glyphname = uni0432;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(311,0,ls),
(346,0,o),
(412,16,o),
(463,50,o),
(493,106,o),
(493,147,qs),
(493,200,o),
(431,268,o),
(369,279,q),
(397,288,o),
(434,319,o),
(454,355,o),
(461,392,o),
(460,407,qs),
(458,446,o),
(422,493,o),
(368,518,o),
(304,527,o),
(275,527,qs),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(290,493,o),
(345,487,o),
(390,466,o),
(418,427,o),
(418,393,qs),
(418,363,o),
(387,322,o),
(340,298,o),
(284,287,o),
(258,287,qs),
(115,287,l),
(115,493,l),
(264,493,ls)
);
},
{
closed = 1;
nodes = (
(273,253,ls),
(302,253,o),
(365,247,o),
(417,224,o),
(451,179,o),
(451,140,qs),
(451,106,o),
(421,65,o),
(375,42,o),
(319,34,o),
(293,34,qs),
(115,34,l),
(115,253,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
11 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 22 77 0 4 4 1 95 0 1 1 21 1 78 21 21 46 44 36 34 21 33 21 32 24 22 20 18 32 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = uni0432;
unicode = 1074;
},
{
glyphname = uni0433;
kernLeft = uni0432;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,492,l),
(423,492,l),
(423,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 22 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 452;
}
);
note = uni0433;
unicode = 1075;
},
{
glyphname = uni0434;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,481,o),
(142,389,o),
(141,343,qs),
(141,328,o),
(140,285,o),
(137,237,o),
(130,185,o),
(124,160,qs),
(111,110,o),
(64,42,o),
(25,34,q),
(25,-176,l),
(67,-176,l),
(67,0,l),
(535,0,l),
(535,-176,l),
(577,-176,l),
(577,34,l),
(502,34,l),
(502,527,l),
(143,527,l)
);
},
{
closed = 1;
nodes = (
(106,34,l),
(131,61,o),
(161,130,o),
(176,206,o),
(180,286,o),
(181,325,qs),
(182,367,o),
(183,451,o),
(184,493,q),
(460,493,l),
(460,34,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
9 1 0 1 75 3 1 1 2 1 134 0 5 5 4 95 7 1 4 4 22 77 6 1 0 0 2 95 0 2 2 21 2 78 0 0 31 30 22 21 0 20 0 20 17 17 17 17 8 7 26 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = uni0434;
unicode = 1076;
},
{
glyphname = uni0436;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(391,247,l),
(521,247,l),
(673,0,l),
(721,0,l),
(551,277,l),
(705,527,l),
(657,527,l),
(508,282,l),
(391,282,l),
(391,527,l),
(349,527,l),
(349,282,l),
(232,282,l),
(84,527,l),
(36,527,l),
(189,277,l),
(20,0,l),
(68,0,l),
(220,247,l),
(349,247,l),
(349,0,l),
(391,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
16 5 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 22 77 10 9 7 3 1 1 21 1 78 0 0 0 21 0 21 17 18 17 17 17 17 18 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = uni0436;
unicode = 1078;
},
{
glyphname = uni043A;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,246,l),
(260,246,l),
(438,0,l),
(486,0,l),
(292,273,l),
(468,527,l),
(421,527,l),
(252,281,l),
(115,281,l),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 12 0 12 17 18 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = uni043A;
unicode = 1082;
},
{
glyphname = uni0438;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,0,l),
(508,0,l),
(508,527,l),
(442,527,l),
(115,36,l),
(115,527,l),
(73,527,l),
(73,0,l),
(140,0,l),
(466,492,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
9 4 2 0 1 1 76 2 1 1 1 22 77 3 1 0 0 21 0 78 17 18 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni0438;
unicode = 1080;
},
{
glyphname = uni0439;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,669,o),
(201,685,o),
(176,715,o),
(170,738,q),
(132,738,l),
(137,709,o),
(167,668,o),
(209,643,o),
(262,632,o),
(290,632,qs),
(318,632,o),
(372,643,o),
(416,668,o),
(448,709,o),
(454,738,q),
(415,738,l),
(409,715,o),
(383,685,o),
(349,669,o),
(310,663,o),
(292,663,qs),
(274,663,o)
);
},
{
closed = 1;
nodes = (
(466,0,l),
(508,0,l),
(508,527,l),
(442,527,l),
(115,36,l),
(115,527,l),
(73,527,l),
(73,0,l),
(140,0,l),
(466,492,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
31 26 2 4 5 1 76 3 1 1 0 1 133 8 1 0 0 2 5 0 2 105 6 1 5 5 22 77 7 1 4 4 21 4 78 1 0 30 29 28 27 25 24 23 22 17 16 12 10 6 5 0 21 1 21 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni0439;
unicode = 1081;
},
{
glyphname = uni043B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,492,o),
(141,415,o),
(139,337,o),
(136,259,o),
(134,225,qs),
(132,189,o),
(121,123,o),
(96,72,o),
(56,40,o),
(25,37,q),
(25,-4,l),
(72,-1,o),
(130,43,o),
(162,111,o),
(174,193,o),
(176,234,qs),
(178,297,o),
(183,423,o),
(185,493,q),
(453,493,l),
(453,0,l),
(495,0,l),
(495,527,l),
(144,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
13 1 0 1 1 76 0 1 1 3 95 4 1 3 3 22 77 2 1 0 0 21 0 78 0 0 0 23 0 23 23 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = uni043B;
unicode = 1083;
},
{
glyphname = uni043C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,492,l),
(339,139,l),
(353,139,l),
(577,492,l),
(577,0,l),
(619,0,l),
(619,527,l),
(552,527,l),
(347,201,l),
(142,527,l),
(73,527,l),
(73,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 22 77 4 1 2 2 21 2 78 18 18 17 18 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni043C;
unicode = 1084;
},
{
glyphname = uni043D;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,241,l),
(457,241,l),
(457,0,l),
(499,0,l),
(499,527,l),
(457,527,l),
(457,276,l),
(115,276,l),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = uni043D;
unicode = 1085;
},
{
glyphname = uni043F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,492,l),
(461,492,l),
(461,0,l),
(503,0,l),
(503,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 2 2 0 95 0 0 0 22 77 4 3 2 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni043F;
unicode = 1087;
},
{
glyphname = uni0442;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,492,l),
(204,492,l),
(204,0,l),
(246,0,l),
(246,492,l),
(445,492,l),
(445,527,l),
(4,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 3 95 4 1 3 3 22 77 0 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
note = uni0442;
unicode = 1090;
},
{
glyphname = uni0444;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,533,o),
(170,499,o),
(91,432,o),
(49,329,o),
(49,259,qs),
(49,186,o),
(98,86,o),
(180,23,o),
(290,-6,o),
(351,-8,q),
(351,-206,l),
(393,-206,l),
(393,-8,l),
(462,-6,o),
(573,27,o),
(652,92,o),
(695,191,o),
(695,259,qs),
(695,328,o),
(653,431,o),
(575,499,o),
(463,533,o),
(393,534,q),
(393,704,l),
(351,704,l),
(351,534,l)
);
},
{
closed = 1;
nodes = (
(517,498,o),
(653,382,o),
(653,262,qs),
(653,201,o),
(615,113,o),
(547,56,o),
(451,29,o),
(393,29,q),
(393,498,l)
);
},
{
closed = 1;
nodes = (
(294,30,o),
(198,58,o),
(129,114,o),
(91,201,o),
(91,262,qs),
(91,382,o),
(227,498,o),
(351,498,q),
(351,29,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 0 20 77 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 77 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 3 2 3 134 0 0 0 20 77 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
43 42 17 22 17 24 17 17 24 17 16 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = uni0444;
unicode = 1092;
},
{
glyphname = uni0446;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,527,l),
(73,527,l),
(73,0,l),
(526,0,l),
(526,-176,l),
(565,-176,l),
(565,36,l),
(490,36,l),
(490,527,l),
(448,527,l),
(448,36,l),
(115,36,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 3 2 134 4 1 0 0 22 77 6 5 2 1 1 3 95 0 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = uni0446;
unicode = 1094;
},
{
glyphname = uni0447;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,299,o),
(148,202,o),
(258,202,qs),
(271,202,o),
(307,203,o),
(349,205,o),
(394,208,o),
(415,210,q),
(415,0,l),
(457,0,l),
(457,527,l),
(415,527,l),
(415,249,l),
(368,244,o),
(298,241,o),
(263,241,qs),
(212,241,o),
(146,262,o),
(107,306,o),
(92,374,o),
(92,421,qs),
(92,527,l),
(50,527,l),
(50,411,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 22 77 0 3 3 21 3 78 82 17 18 53 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = uni0447;
unicode = 1095;
},
{
glyphname = uni0448;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(738,0,l),
(738,527,l),
(696,527,l),
(696,36,l),
(425,36,l),
(425,527,l),
(383,527,l),
(383,36,l),
(115,36,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 22 77 3 1 1 1 5 95 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 811;
}
);
note = uni0448;
unicode = 1096;
},
{
glyphname = uni0449;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(774,0,l),
(774,-176,l),
(813,-176,l),
(813,36,l),
(738,36,l),
(738,527,l),
(696,527,l),
(696,36,l),
(425,36,l),
(425,527,l),
(383,527,l),
(383,36,l),
(115,36,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 6 7 6 134 4 2 2 0 0 22 77 5 3 2 1 1 7 95 0 7 7 21 7 78 17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 841;
}
);
note = uni0449;
unicode = 1097;
},
{
glyphname = uni044A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,0,ls),
(397,0,o),
(471,17,o),
(527,55,o),
(559,117,o),
(558,163,qs),
(557,209,o),
(519,267,o),
(457,298,o),
(380,309,o),
(340,309,qs),
(203,309,l),
(203,527,l),
(20,527,l),
(20,493,l),
(161,493,l),
(161,0,l)
);
},
{
closed = 1;
nodes = (
(203,274,l),
(334,274,ls),
(364,274,o),
(429,267,o),
(482,244,o),
(516,199,o),
(516,161,qs),
(516,117,o),
(482,66,o),
(427,40,o),
(358,34,o),
(324,34,qs),
(203,34,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 22 77 6 1 4 4 3 95 0 3 3 21 3 78 18 17 28 26 17 29 18 29 40 33 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = uni044A;
unicode = 1098;
},
{
glyphname = uni044B;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(596,527,l),
(554,527,l),
(554,0,l),
(596,0,l)
);
},
{
closed = 1;
nodes = (
(246,0,ls),
(288,0,o),
(361,17,o),
(416,56,o),
(447,118,o),
(447,164,qs),
(447,212,o),
(408,269,o),
(346,299,o),
(268,309,o),
(228,309,qs),
(115,309,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(115,274,l),
(227,274,ls),
(257,274,o),
(321,267,o),
(372,244,o),
(405,199,o),
(405,161,qs),
(405,117,o),
(370,66,o),
(313,40,o),
(243,34,o),
(209,34,qs),
(115,34,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 3 0 6 5 3 6 103 2 1 0 0 22 77 8 1 5 5 1 95 4 7 2 1 1 21 1 78 20 19 0 0 30 28 19 31 20 31 18 16 8 6 5 4 0 3 0 3 17 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = uni044B;
unicode = 1099;
},
{
glyphname = uni044C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,0,ls),
(311,0,o),
(384,17,o),
(439,56,o),
(471,118,o),
(470,164,qs),
(469,212,o),
(430,269,o),
(369,299,o),
(291,309,o),
(251,309,qs),
(115,309,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(115,274,l),
(249,274,ls),
(279,274,o),
(342,267,o),
(395,244,o),
(428,199,o),
(428,161,qs),
(428,117,o),
(393,66,o),
(338,40,o),
(268,34,o),
(234,34,qs),
(115,34,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 1 0 4 3 1 4 103 0 0 0 22 77 5 1 3 3 2 95 0 2 2 21 2 78 16 15 26 24 15 27 16 27 40 33 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = uni044C;
unicode = 1100;
},
{
glyphname = uni044E;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,497,o),
(306,431,o),
(272,338,o),
(268,281,q),
(115,281,l),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l),
(115,246,l),
(268,246,l),
(272,188,o),
(306,95,o),
(366,29,o),
(453,-7,o),
(510,-7,qs),
(571,-7,o),
(664,33,o),
(726,105,o),
(758,204,o),
(758,263,qs),
(758,321,o),
(727,420,o),
(666,493,o),
(573,534,o),
(511,534,qs),
(454,534,o)
);
},
{
closed = 1;
nodes = (
(382,66,o),
(333,129,o),
(310,215,o),
(310,263,qs),
(310,311,o),
(332,396,o),
(380,460,o),
(457,498,o),
(511,498,qs),
(565,498,o),
(642,461,o),
(692,397,o),
(716,312,o),
(716,263,qs),
(716,215,o),
(692,129,o),
(642,66,o),
(565,29,o),
(511,29,qs),
(458,29,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
0 5 0 2 6 5 2 103 0 4 4 22 77 0 7 7 0 97 8 1 0 0 29 77 0 3 3 21 77 9 1 6 6 1 97 0 1 1 30 1 78 28 27 1 0 38 36 27 46 28 46 22 21 20 19 18 17 16 15 11 9 0 26 1 26 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = uni044E;
unicode = 1102;
},
{
glyphname = uni044F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,527,ls),
(200,527,o),
(127,514,o),
(72,480,o),
(40,419,o),
(40,371,qs),
(40,301,o),
(126,228,o),
(192,218,q),
(44,0,l),
(94,0,l),
(237,213,l),
(406,213,l),
(406,0,l),
(448,0,l),
(448,527,l)
);
},
{
closed = 1;
nodes = (
(268,248,ls),
(238,248,o),
(172,255,o),
(118,281,o),
(82,332,o),
(82,376,qs),
(82,416,o),
(112,463,o),
(160,486,o),
(222,492,o),
(254,492,qs),
(406,492,l),
(406,248,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 1 1 5 1 76 0 5 0 1 0 5 1 103 0 4 4 3 95 0 3 3 22 77 2 1 0 0 21 0 78 40 33 40 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = uni044F;
unicode = 1103;
},
{
glyphname = uni0410;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
10 1 4 0 1 76 0 4 0 2 1 4 2 103 0 0 0 20 77 3 1 1 1 21 1 78 17 17 17 17 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = uni0410;
unicode = 1040;
},
{
glyphname = uni0415;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = uni0415;
unicode = 1045;
},
{
glyphname = uni041C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,255,l),
(153,707,l),
(93,707,l),
(93,0,l),
(135,0,l),
(135,657,l),
(409,195,l),
(431,195,l),
(700,657,l),
(700,0,l),
(742,0,l),
(742,707,l),
(683,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 3 3 1 3 1 76 0 1 3 0 3 1 0 128 5 4 2 3 3 20 77 2 1 0 0 21 0 78 0 0 0 12 0 12 17 18 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 835;
}
);
note = uni041C;
unicode = 1052;
},
{
glyphname = uni041D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,328,l),
(590,328,l),
(590,0,l),
(632,0,l),
(632,707,l),
(590,707,l),
(590,365,l),
(135,365,l),
(135,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 20 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni041D;
unicode = 1053;
},
{
glyphname = uni0420;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,250,l),
(308,250,ls),
(363,250,o),
(459,278,o),
(529,335,o),
(569,421,o),
(569,480,qs),
(569,597,o),
(441,707,o),
(328,707,qs),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(135,669,l),
(322,669,ls),
(369,669,o),
(444,649,o),
(497,604,o),
(525,534,o),
(525,484,qs),
(525,432,o),
(493,358,o),
(436,310,o),
(355,287,o),
(306,287,qs),
(135,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 20 77 0 2 2 21 2 78 14 13 24 22 13 25 14 25 17 38 32 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
note = uni0420;
unicode = 1056;
},
{
glyphname = uni0422;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,707,l),
(20,669,l),
(262,669,l),
(262,0,l),
(304,0,l),
(304,669,l),
(546,669,l),
(546,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 3 95 0 3 3 20 77 0 1 1 21 1 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = uni0422;
unicode = 1058;
},
{
glyphname = uni0425;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,707,l),
(28,707,l),
(249,356,l),
(20,0,l),
(74,0,l),
(278,323,l),
(483,0,l),
(538,0,l),
(309,358,l),
(529,707,l),
(473,707,l),
(279,390,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = uni0425;
unicode = 1061;
},
{
glyphname = T;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,707,l),
(20,669,l),
(262,669,l),
(262,0,l),
(304,0,l),
(304,669,l),
(546,669,l),
(546,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 3 95 0 3 3 38 77 0 1 1 39 1 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = T;
unicode = 84;
},
{
glyphname = uni0412;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,0,ls),
(373,0,o),
(470,16,o),
(548,57,o),
(596,130,o),
(596,187,qs),
(596,226,o),
(570,291,o),
(523,337,o),
(458,366,o),
(419,369,q),
(480,385,o),
(557,470,o),
(557,539,qs),
(557,592,o),
(519,658,o),
(456,694,o),
(375,707,o),
(331,707,qs),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(368,669,o),
(435,660,o),
(487,632,o),
(518,579,o),
(518,535,qs),
(518,490,o),
(477,430,o),
(413,395,o),
(335,380,o),
(298,380,qs),
(134,380,l),
(134,669,l),
(332,669,ls)
);
},
{
closed = 1;
nodes = (
(134,343,l),
(344,343,ls),
(382,343,o),
(457,329,o),
(517,295,o),
(554,236,o),
(554,190,qs),
(554,137,o),
(511,77,o),
(444,46,o),
(361,38,o),
(322,38,qs),
(134,38,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 20 77 7 1 4 4 1 95 0 1 1 21 1 78 35 34 21 21 45 43 34 46 35 46 21 33 21 32 24 22 20 18 32 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = uni0412;
unicode = 1042;
},
{
glyphname = uni041F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,669,l),
(593,669,l),
(593,0,l),
(635,0,l),
(635,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
0 1 1 3 95 0 3 3 20 77 2 1 0 0 21 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = uni041F;
unicode = 1055;
},
{
glyphname = uni0413;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,669,l),
(528,669,l),
(528,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 20 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni0413;
unicode = 1043;
},
{
glyphname = uni041B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(595,707,l),
(142,707,l),
(141,665,o),
(140,585,o),
(140,543,qs),
(140,492,o),
(138,393,o),
(136,342,qs),
(135,315,o),
(132,245,o),
(125,176,o),
(112,115,o),
(101,95,qs),
(72,44,o),
(14,38,q),
(14,-6,l),
(73,-2,o),
(141,58,o),
(158,116,qs),
(165,140,o),
(173,202,o),
(178,266,o),
(180,324,o),
(180,344,qs),
(181,382,o),
(183,462,o),
(183,501,qs),
(183,540,o),
(184,630,o),
(186,669,q),
(553,669,l),
(553,0,l),
(595,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
17 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 95 0 2 2 20 77 4 3 2 1 1 21 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 95 0 2 2 20 77 4 3 2 1 1 30 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 95 0 2 2 20 77 4 3 2 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 95 0 2 2 20 77 4 3 2 1 1 30 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 32 0 32 30 29 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 688;
}
);
note = uni041B;
unicode = 1051;
},
{
glyphname = uni0414;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,0,l),
(648,0,l),
(648,-207,l),
(690,-207,l),
(690,38,l),
(599,38,l),
(599,707,l),
(168,707,l),
(166,641,o),
(164,499,o),
(162,419,qs),
(161,384,o),
(159,309,o),
(153,235,o),
(141,167,o),
(131,141,qs),
(124,123,o),
(105,90,o),
(81,62,o),
(49,42,o),
(29,38,q),
(29,-207,l),
(72,-207,l)
);
},
{
closed = 1;
nodes = (
(144,62,o),
(179,135,o),
(195,214,o),
(199,289,o),
(200,314,qs),
(211,669,l),
(559,669,l),
(558,38,l),
(113,38,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
1 1 1 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 5 5 0 95 0 0 0 20 77 8 6 2 1 1 3 95 0 3 3 21 77 7 4 2 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
7 4 2 2 3 2 134 0 5 5 0 95 0 0 0 20 77 8 6 2 1 1 3 95 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 23 0 0 23 31 23 31 25 24 0 22 0 22 17 17 17 30 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = uni0414;
unicode = 1044;
},
{
glyphname = uni0411;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,0,ls),
(381,0,o),
(476,20,o),
(547,68,o),
(588,148,o),
(588,207,qs),
(588,268,o),
(543,342,o),
(471,382,o),
(380,396,o),
(334,396,qs),
(135,396,l),
(135,669,l),
(555,669,l),
(555,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(318,358,ls),
(360,358,o),
(441,350,o),
(505,319,o),
(544,258,o),
(544,204,qs),
(544,153,o),
(506,88,o),
(443,51,o),
(360,38,o),
(316,38,qs),
(135,38,l),
(135,358,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 1 1 0 95 0 0 0 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 649;
}
);
note = uni0411;
unicode = 1041;
},
{
glyphname = uni0416;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,328,l),
(604,328,l),
(780,0,l),
(829,0,l),
(636,357,l),
(827,707,l),
(782,707,l),
(597,365,l),
(445,365,l),
(445,707,l),
(403,707,l),
(403,365,l),
(255,365,l),
(68,707,l),
(21,707,l),
(213,357,l),
(20,0,l),
(70,0,l),
(246,328,l),
(403,328,l),
(403,0,l),
(445,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
16 5 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 20 77 10 9 7 3 1 1 21 1 78 0 0 0 21 0 21 17 18 17 17 17 17 18 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = uni0416;
unicode = 1046;
},
{
glyphname = uni0417;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,100,o),
(110,41,o),
(184,6,o),
(270,-8,o),
(311,-8,qs),
(358,-8,o),
(450,12,o),
(522,58,o),
(567,133,o),
(567,188,qs),
(567,223,o),
(546,285,o),
(502,333,o),
(436,364,o),
(391,369,q),
(429,379,o),
(483,414,o),
(518,459,o),
(534,512,o),
(534,539,qs),
(534,588,o),
(496,656,o),
(435,697,o),
(356,715,o),
(314,715,qs),
(278,715,o),
(195,701,o),
(124,667,o),
(73,609,o),
(69,565,q),
(113,565,l),
(120,598,o),
(161,642,o),
(217,668,o),
(281,679,o),
(310,679,qs),
(346,679,o),
(412,664,o),
(463,629,o),
(494,573,o),
(494,532,qs),
(494,491,o),
(452,433,o),
(389,396,o),
(313,379,o),
(279,379,qs),
(215,379,l),
(215,342,l),
(309,342,ls),
(348,342,o),
(426,331,o),
(487,298,o),
(525,237,o),
(525,188,qs),
(525,140,o),
(485,78,o),
(422,42,o),
(344,28,o),
(305,28,qs),
(275,28,o),
(207,38,o),
(147,65,o),
(102,111,o),
(95,146,q),
(50,146,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
49 1 1 2 1 76 0 4 3 2 3 4 2 128 8 1 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 27 77 0 0 0 6 97 0 6 6 28 6 78 0 0 0 64 0 64 60 58 36 20 40 33 40 36 9 7 28 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = uni0417;
unicode = 1047;
},
{
glyphname = uni0418;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,665,l),
(598,0,l),
(641,0,l),
(641,707,l),
(577,707,l),
(135,37,l),
(135,707,l),
(93,707,l),
(93,0,l),
(156,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 9 0 9 17 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 734;
}
);
note = uni0418;
unicode = 1048;
},
{
glyphname = uni0419;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,858,o),
(267,877,o),
(242,908,o),
(236,931,q),
(198,931,l),
(202,900,o),
(234,857,o),
(280,830,o),
(338,818,o),
(368,818,qs),
(398,818,o),
(455,831,o),
(502,858,o),
(533,901,o),
(538,931,q),
(500,931,l),
(494,908,o),
(469,877,o),
(434,858,o),
(392,850,o),
(369,850,qs),
(346,850,o)
);
},
{
closed = 1;
nodes = (
(598,665,l),
(598,0,l),
(641,0,l),
(641,707,l),
(577,707,l),
(135,37,l),
(135,707,l),
(93,707,l),
(93,0,l),
(156,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
30 25 2 6 4 1 76 3 1 1 0 1 133 8 1 0 0 2 4 0 2 105 5 1 4 4 20 77 9 7 2 6 6 21 6 78 22 22 1 0 22 31 22 31 29 28 27 26 24 23 17 16 12 10 6 5 0 21 1 21 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 734;
}
);
note = uni0419;
unicode = 1049;
},
{
glyphname = uni041A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,323,l),
(293,323,l),
(528,0,l),
(579,0,l),
(324,355,l),
(576,707,l),
(528,707,l),
(280,360,l),
(135,360,l),
(135,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 20 77 6 5 2 3 3 21 3 78 0 0 0 12 0 12 17 18 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = uni041A;
unicode = 1050;
},
{
glyphname = uni0423;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,0,o),
(234,28,o),
(289,72,o),
(326,127,o),
(338,155,qs),
(573,707,l),
(526,707,l),
(318,214,l),
(77,707,l),
(26,707,l),
(295,165,l),
(284,143,o),
(255,99,o),
(211,64,o),
(151,42,o),
(109,42,q),
(109,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
8 5 2 0 1 1 76 2 1 1 1 20 77 0 0 0 3 97 0 3 3 21 3 78 21 18 21 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni0423;
unicode = 1059;
},
{
glyphname = uni0424;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,631,l),
(310,631,ls),
(253,631,o),
(158,594,o),
(91,526,o),
(54,431,o),
(54,374,qs),
(54,317,o),
(85,218,o),
(145,145,o),
(235,104,o),
(295,104,qs),
(393,104,l),
(393,-16,l),
(435,-16,l),
(435,104,l),
(532,104,ls),
(590,104,o),
(680,146,o),
(742,220,o),
(774,318,o),
(774,374,qs),
(774,431,o),
(737,526,o),
(671,594,o),
(577,631,o),
(520,631,qs),
(435,631,l),
(435,741,l),
(393,741,l)
);
},
{
closed = 1;
nodes = (
(260,136,o),
(177,172,o),
(123,236,o),
(96,324,o),
(96,376,qs),
(96,425,o),
(127,507,o),
(184,565,o),
(266,598,o),
(316,598,qs),
(393,598,l),
(393,136,l),
(316,136,ls)
);
},
{
closed = 1;
nodes = (
(512,598,ls),
(561,598,o),
(643,565,o),
(700,507,o),
(732,425,o),
(732,376,qs),
(732,324,o),
(706,236,o),
(652,172,o),
(569,136,o),
(513,136,qs),
(435,136,l),
(435,598,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
10 1 5 0 5 133 4 1 0 9 1 6 7 0 6 103 8 11 2 7 3 1 1 2 7 1 103 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
10 1 5 0 5 133 0 2 1 2 134 4 1 0 9 1 6 7 0 6 103 8 11 2 7 1 1 7 87 8 11 2 7 7 1 95 3 1 1 7 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
30 30 0 0 55 53 45 43 30 42 30 41 33 31 0 29 0 29 40 33 17 40 33 12 7 27 
CALL[ ]	/* CallFunction */";
};
width = 828;
}
);
note = uni0424;
unicode = 1060;
},
{
glyphname = uni0426;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(659,-207,l),
(702,-207,l),
(702,38,l),
(611,38,l),
(611,707,l),
(568,707,l),
(568,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l),
(659,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 20 77 3 1 1 1 5 95 6 1 5 5 21 77 0 4 4 24 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 5 4 134 2 1 0 0 20 77 3 1 1 1 5 95 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni0426;
unicode = 1062;
},
{
glyphname = uni0427;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,322,o),
(137,370,o),
(112,450,o),
(112,509,qs),
(112,707,l),
(70,707,l),
(70,497,ls),
(70,426,o),
(107,335,o),
(177,284,o),
(278,265,o),
(341,265,qs),
(379,265,o),
(460,270,o),
(506,276,q),
(506,0,l),
(549,0,l),
(549,707,l),
(506,707,l),
(506,313,l),
(456,306,o),
(377,301,o),
(332,301,qs),
(274,301,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 0 1 8 1 3 0 2 76 5 1 0 0 3 2 0 3 105 4 1 1 1 20 77 0 2 2 21 2 78 2 0 18 17 12 9 7 6 5 4 0 23 2 23 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = uni0427;
unicode = 1063;
},
{
glyphname = uni0428;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(886,0,l),
(886,707,l),
(843,707,l),
(843,38,l),
(510,38,l),
(510,707,l),
(468,707,l),
(468,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 20 77 3 1 1 1 5 95 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 979;
}
);
note = uni0428;
unicode = 1064;
},
{
glyphname = uni0429;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(934,0,l),
(934,-207,l),
(977,-207,l),
(977,38,l),
(886,38,l),
(886,707,l),
(843,707,l),
(843,38,l),
(510,38,l),
(510,707,l),
(468,707,l),
(468,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
4 2 2 0 0 20 77 5 3 2 1 1 7 95 0 7 7 21 77 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 6 7 6 134 4 2 2 0 0 20 77 5 3 2 1 1 7 95 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 1002;
}
);
note = uni0429;
unicode = 1065;
},
{
glyphname = uni042A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(409,0,ls),
(461,0,o),
(556,21,o),
(629,70,o),
(672,150,o),
(672,208,qs),
(672,270,o),
(622,345,o),
(543,384,o),
(446,396,o),
(398,396,qs),
(234,396,l),
(234,707,l),
(20,707,l),
(20,669,l),
(192,669,l),
(192,0,l)
);
},
{
closed = 1;
nodes = (
(396,359,ls),
(437,359,o),
(521,350,o),
(588,319,o),
(630,257,o),
(630,203,qs),
(630,149,o),
(586,84,o),
(516,49,o),
(429,38,o),
(387,38,qs),
(234,38,l),
(234,359,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = uni042A;
unicode = 1066;
},
{
glyphname = uni042B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,0,ls),
(340,0,o),
(436,21,o),
(508,69,o),
(550,149,o),
(550,209,qs),
(550,273,o),
(499,347,o),
(418,385,o),
(316,396,o),
(264,396,qs),
(135,396,l),
(135,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(281,359,ls),
(322,359,o),
(403,350,o),
(468,319,o),
(508,257,o),
(508,203,qs),
(508,149,o),
(466,84,o),
(400,49,o),
(316,38,o),
(274,38,qs),
(135,38,l),
(135,359,l)
);
},
{
closed = 1;
nodes = (
(727,707,l),
(685,707,l),
(685,0,l),
(727,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 3 1 4 103 5 1 0 0 20 77 0 3 3 2 95 7 6 2 2 2 21 2 78 28 28 28 31 28 31 18 40 33 40 33 16 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = uni042B;
unicode = 1067;
},
{
glyphname = uni042C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,0,ls),
(362,0,o),
(457,20,o),
(529,68,o),
(571,147,o),
(571,207,qs),
(571,270,o),
(519,345,o),
(437,384,o),
(336,396,o),
(286,396,qs),
(134,396,l),
(134,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(297,359,ls),
(339,359,o),
(422,350,o),
(488,319,o),
(530,257,o),
(530,203,qs),
(530,149,o),
(488,84,o),
(421,49,o),
(337,38,o),
(295,38,qs),
(134,38,l),
(134,359,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 1 0 4 3 1 4 103 0 0 0 20 77 0 3 3 2 95 0 2 2 21 2 78 40 33 40 33 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = uni042C;
unicode = 1068;
},
{
glyphname = uni042D;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(494,629,o),
(561,545,o),
(598,434,o),
(601,373,q),
(224,373,l),
(224,335,l),
(601,335,l),
(599,268,o),
(563,155,o),
(495,74,o),
(392,28,o),
(323,28,qs),
(290,28,o),
(223,42,o),
(162,72,o),
(113,117,o),
(99,149,q),
(48,149,l),
(65,107,o),
(123,47,o),
(196,10,o),
(279,-8,o),
(322,-8,qs),
(404,-8,o),
(524,46,o),
(604,141,o),
(643,271,o),
(643,348,qs),
(643,419,o),
(606,552,o),
(529,654,o),
(411,715,o),
(330,715,qs),
(292,715,o),
(210,700,o),
(135,664,o),
(73,603,o),
(55,558,q),
(101,558,l),
(116,591,o),
(168,637,o),
(230,666,o),
(299,679,o),
(332,679,qs),
(396,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 0 7 0 6 4 7 6 103 8 1 0 0 2 97 0 2 2 27 77 0 5 5 3 97 0 3 3 28 3 78 1 0 40 39 38 37 33 31 27 26 22 20 12 10 6 5 0 44 1 44 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni042D;
unicode = 1069;
},
{
glyphname = uni042E;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,335,l),
(284,335,l),
(287,261,o),
(329,135,o),
(409,43,o),
(525,-8,o),
(602,-8,qs),
(684,-8,o),
(807,46,o),
(890,143,o),
(932,275,o),
(932,353,qs),
(932,431,o),
(890,564,o),
(807,660,o),
(684,715,o),
(602,715,qs),
(526,715,o),
(410,664,o),
(330,572,o),
(287,447,o),
(284,373,q),
(135,373,l),
(135,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
},
{
closed = 1;
nodes = (
(783,627,o),
(855,538,o),
(890,420,o),
(890,353,qs),
(890,285,o),
(855,167,o),
(783,79,o),
(675,28,o),
(602,28,qs),
(531,28,o),
(426,81,o),
(358,171,o),
(325,288,o),
(325,353,qs),
(325,419,o),
(358,537,o),
(425,626,o),
(530,679,o),
(602,679,qs),
(675,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
0 1 0 4 7 1 4 103 0 0 0 20 77 9 1 6 6 2 97 0 2 2 27 77 8 1 5 5 21 77 0 7 7 3 97 0 3 3 28 3 78 28 27 0 0 38 36 27 46 28 46 0 26 0 26 20 40 36 17 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 986;
}
);
note = uni042E;
unicode = 1070;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,284,l),
(522,0,l),
(564,0,l),
(564,707,l),
(317,707,ls),
(262,707,o),
(169,684,o),
(100,633,o),
(61,551,o),
(61,493,qs),
(61,409,o),
(153,307,o),
(240,290,q),
(81,0,l),
(130,0,l),
(282,284,l)
);
},
{
closed = 1;
nodes = (
(274,321,o),
(197,339,o),
(138,380,o),
(103,447,o),
(103,496,qs),
(103,547,o),
(137,614,o),
(196,653,o),
(276,669,o),
(322,669,qs),
(522,669,l),
(522,321,l),
(317,321,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
2 1 3 5 1 76 6 1 5 0 3 0 5 3 103 0 4 4 1 95 0 1 1 20 77 2 1 0 0 21 0 78 16 16 16 28 16 27 34 17 17 40 16 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = uni042F;
unicode = 1071;
},
{
glyphname = uni0440;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,65,o),
(184,24,o),
(240,1,o),
(296,-7,o),
(320,-7,qs),
(378,-7,o),
(466,31,o),
(526,100,o),
(556,199,o),
(556,259,qs),
(556,315,o),
(528,415,o),
(471,490,o),
(383,534,o),
(323,534,qs),
(255,534,o),
(154,482,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,-206,l),
(115,-206,l),
(115,98,l)
);
},
{
closed = 1;
nodes = (
(192,65,o),
(140,127,o),
(113,212,o),
(113,262,qs),
(113,307,o),
(139,392,o),
(190,458,o),
(265,498,o),
(315,498,qs),
(369,498,o),
(445,460,o),
(492,395,o),
(514,310,o),
(514,262,qs),
(514,215,o),
(493,131,o),
(448,67,o),
(375,29,o),
(323,29,qs),
(271,29,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 4 2 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 22 77 0 5 5 2 97 0 2 2 29 77 6 1 4 4 3 97 0 3 3 30 77 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 3 0 134 0 1 1 22 77 0 5 5 2 97 0 2 2 29 77 6 1 4 4 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
24 23 34 32 23 42 24 42 40 35 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = uni0440;
unicode = 1088;
},
{
glyphname = O;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 4 1 0 0 47 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = O;
unicode = 79;
},
{
glyphname = a;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
39 38 49 47 38 54 39 54 22 36 20 36 40 33 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = a;
unicode = 97;
},
{
glyphname = c;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,54,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(249,29,o),
(171,66,o),
(120,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,204,o),
(84,105,o),
(146,33,o),
(238,-7,o),
(300,-7,qs),
(367,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 6 1 0 0 50 0 78 1 0 31 30 28 26 18 16 14 13 11 9 0 33 1 33 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = c;
unicode = 99;
},
{
glyphname = e;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 32 32 0 0 32 42 32 42 38 36 0 31 0 31 40 36 20 36 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(173,492,l),
(331,492,l),
(331,527,l),
(173,527,l),
(173,589,ls),
(173,626,o),
(180,681,o),
(204,719,o),
(252,738,o),
(294,738,qs),
(331,738,l),
(331,773,l),
(289,773,ls),
(239,773,o),
(178,750,o),
(143,704,o),
(131,637,o),
(131,594,qs),
(131,527,l),
(38,527,l),
(38,492,l),
(131,492,l),
(131,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 41 77 0 6 6 39 6 78 17 17 21 33 37 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,452,o),
(432,496,o),
(379,523,o),
(322,534,o),
(295,534,qs),
(237,534,o),
(147,495,o),
(85,424,o),
(53,325,o),
(53,265,qs),
(53,209,o),
(78,110,o),
(134,36,o),
(223,-7,o),
(288,-7,qs),
(318,-7,o),
(377,5,o),
(432,32,o),
(478,76,o),
(494,109,q),
(494,7,ls),
(494,-42,o),
(478,-126,o),
(436,-187,o),
(364,-221,o),
(307,-221,qs),
(283,-221,o),
(232,-212,o),
(186,-191,o),
(149,-158,o),
(139,-133,q),
(92,-133,l),
(104,-166,o),
(145,-213,o),
(200,-243,o),
(267,-257,o),
(303,-257,qs),
(367,-257,o),
(455,-222,o),
(511,-155,o),
(536,-57,o),
(536,6,qs),
(536,527,l),
(497,527,l),
(497,420,l)
);
},
{
closed = 1;
nodes = (
(421,461,o),
(471,397,o),
(496,313,o),
(496,265,qs),
(496,218,o),
(470,133,o),
(419,68,o),
(344,29,o),
(294,29,qs),
(240,29,o),
(164,66,o),
(116,131,o),
(95,217,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
44 24 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 4 3 4 2 3 128 0 0 0 41 77 8 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 0 0 41 77 8 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
46 45 56 54 45 64 46 64 40 41 36 20 37 16 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = g;
unicode = 103;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,706,o),
(99,687,qs),
(99,669,o),
(121,648,o),
(138,648,qs),
(157,648,o),
(179,669,o),
(179,687,qs),
(179,704,o),
(158,726,o),
(139,726,qs),
(122,726,o)
);
},
{
closed = 1;
nodes = (
(116,527,l),
(116,-8,ls),
(116,-41,o),
(110,-97,o),
(86,-138,o),
(40,-161,o),
(0,-161,qs),
(-18,-161,l),
(-18,-196,l),
(1,-196,ls),
(52,-196,o),
(114,-170,o),
(147,-122,o),
(158,-54,o),
(158,-12,qs),
(158,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 97 5 1 0 0 48 77 0 4 4 41 77 0 3 3 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 3 2 101 0 1 1 0 97 5 1 0 0 48 77 0 4 4 41 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 3 2 101 0 1 1 0 97 5 1 0 0 46 77 0 4 4 41 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 0 0 1 4 0 1 105 0 3 0 2 3 2 101 0 4 4 41 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 27 26 21 19 18 16 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = j;
unicode = 106;
},
{
glyphname = o;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 2 97 5 1 2 2 49 77 4 1 0 0 3 97 0 3 3 50 3 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = o;
unicode = 111;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,253,ls),
(115,305,o),
(140,394,o),
(191,458,o),
(271,494,o),
(327,494,qs),
(334,494,l),
(334,530,l),
(324,530,ls),
(296,530,o),
(235,521,o),
(178,494,o),
(129,447,o),
(113,409,q),
(113,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
3 1 3 2 1 76 0 2 2 0 97 1 1 0 0 41 77 4 1 3 3 39 3 78 0 0 0 17 0 17 33 37 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = r;
unicode = 114;
},
{
glyphname = t;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,167,ls),
(124,79,o),
(202,0,o),
(284,0,qs),
(319,0,l),
(319,36,l),
(292,36,ls),
(222,36,o),
(166,103,o),
(166,171,qs),
(166,492,l),
(322,492,l),
(322,527,l),
(166,527,l),
(166,685,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 19 33 35 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = t;
unicode = 116;
},
{
glyphname = y2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,527,l),
(27,527,l),
(268,-48,l),
(253,-86,o),
(221,-144,o),
(179,-184,o),
(124,-204,o),
(86,-204,q),
(86,-245,l),
(133,-245,o),
(198,-225,o),
(229,-196,qs),
(247,-180,o),
(280,-125,o),
(308,-64,o),
(332,-3,o),
(340,20,qs),
(521,527,l),
(472,527,l),
(292,6,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 101 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
21 17 24 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = y2_alt;
},
{
glyphname = uni0443;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,527,l),
(27,527,l),
(268,-48,l),
(253,-86,o),
(221,-144,o),
(179,-184,o),
(124,-204,o),
(86,-204,q),
(86,-245,l),
(133,-245,o),
(198,-225,o),
(229,-196,qs),
(247,-180,o),
(280,-125,o),
(308,-64,o),
(332,-3,o),
(340,20,qs),
(521,527,l),
(472,527,l),
(292,6,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 101 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
21 17 24 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = uni0443;
unicode = 1091;
},
{
glyphname = uni0451;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(376,691,o),
(376,675,qs),
(376,659,o),
(398,636,o),
(416,636,qs),
(435,636,o),
(456,658,o),
(456,675,qs),
(456,692,o),
(435,714,o),
(416,714,qs),
(398,714,o)
);
},
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(241,534,o),
(150,493,o),
(87,421,o),
(53,321,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(135,691,o),
(135,675,qs),
(135,659,o),
(157,636,o),
(175,636,qs),
(194,636,o),
(215,658,o),
(215,675,qs),
(215,692,o),
(194,714,o),
(175,714,qs),
(157,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
0 3 6 2 6 3 2 128 13 1 8 12 1 6 3 8 6 103 10 1 1 1 0 97 14 9 11 3 0 0 27 77 0 7 7 5 97 0 5 5 29 77 0 2 2 4 97 0 4 4 30 4 78 56 55 44 44 12 12 1 0 62 60 55 66 56 66 44 54 44 54 50 48 12 43 12 43 39 37 29 27 23 22 18 16 7 5 0 11 1 11 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni0451;
unicode = 1105;
},
{
glyphname = uni0437;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,362,o),
(443,403,qs),
(441,440,o),
(407,491,o),
(354,521,o),
(289,534,o),
(258,534,qs),
(229,534,o),
(166,524,o),
(111,499,o),
(71,457,o),
(65,424,q),
(108,424,l),
(115,448,o),
(149,477,o),
(192,493,o),
(238,498,o),
(259,498,qs),
(283,498,o),
(334,488,o),
(375,464,o),
(402,424,o),
(402,395,qs),
(402,361,o),
(368,317,o),
(317,292,o),
(257,283,o),
(230,283,qs),
(178,283,l),
(178,248,l),
(265,248,ls),
(293,248,o),
(350,241,o),
(396,219,o),
(425,177,o),
(425,142,qs),
(425,107,o),
(393,63,o),
(343,38,o),
(283,29,o),
(255,29,qs),
(235,29,o),
(185,35,o),
(138,52,o),
(100,83,o),
(91,107,q),
(45,107,l),
(55,72,o),
(101,27,o),
(160,2,o),
(226,-7,o),
(258,-7,qs),
(295,-7,o),
(369,7,o),
(429,41,o),
(467,98,o),
(467,142,qs),
(467,165,o),
(453,209,o),
(423,245,o),
(377,270,o),
(346,274,q),
(402,293,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 29 77 0 2 2 0 97 0 0 0 30 0 78 36 20 40 33 40 36 20 41 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = uni0437;
unicode = 1079;
},
{
glyphname = uni044D;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,244,l),
(455,244,l),
(454,197,o),
(429,119,o),
(381,61,o),
(309,29,o),
(261,29,qs),
(237,29,o),
(186,38,o),
(139,59,o),
(101,93,o),
(91,118,q),
(45,118,l),
(57,86,o),
(100,39,o),
(156,8,o),
(222,-7,o),
(256,-7,qs),
(318,-7,o),
(409,33,o),
(469,105,o),
(498,204,o),
(498,263,qs),
(498,319,o),
(469,418,o),
(409,491,o),
(319,534,o),
(259,534,qs),
(225,534,o),
(161,519,o),
(105,488,o),
(63,441,o),
(51,409,q),
(94,409,l),
(104,434,o),
(141,468,o),
(188,489,o),
(239,498,o),
(263,498,qs),
(310,498,o),
(380,463,o),
(428,403,o),
(453,324,o),
(456,279,q),
(179,279,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 8 1 7 0 6 4 7 6 103 0 0 0 2 97 0 2 2 29 77 0 5 5 3 97 0 3 3 30 3 78 0 0 0 44 0 44 20 36 20 40 36 20 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = uni044D;
unicode = 1101;
},
{
glyphname = C;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(571,660,o),
(503,697,o),
(422,715,o),
(379,715,qs),
(297,715,o),
(175,659,o),
(94,562,o),
(54,429,o),
(54,353,qs),
(54,275,o),
(92,143,o),
(172,47,o),
(293,-8,o),
(376,-8,qs),
(419,-8,o),
(503,10,o),
(576,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(478,42,o),
(411,28,o),
(378,28,qs),
(305,28,o),
(199,80,o),
(130,170,o),
(96,289,o),
(96,355,qs),
(96,421,o),
(131,538,o),
(201,627,o),
(309,679,o),
(383,679,qs),
(452,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 1 0 37 36 32 30 22 20 16 15 11 9 0 39 1 39 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = C;
unicode = 67;
},
{
glyphname = S;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,667,o),
(463,639,o),
(502,594,o),
(511,562,q),
(556,562,l),
(547,604,o),
(503,662,o),
(441,699,o),
(364,715,o),
(324,715,qs),
(278,715,o),
(191,695,o),
(124,651,o),
(83,580,o),
(83,528,qs),
(83,480,o),
(119,418,o),
(178,377,o),
(251,353,o),
(288,344,qs),
(313,338,o),
(371,322,o),
(401,313,qs),
(429,305,o),
(478,284,o),
(514,253,o),
(534,208,o),
(534,176,qs),
(534,137,o),
(499,81,o),
(442,45,o),
(369,28,o),
(332,28,qs),
(299,28,o),
(234,41,o),
(175,70,o),
(126,116,o),
(110,149,q),
(63,149,l),
(78,105,o),
(133,46,o),
(206,8,o),
(291,-8,o),
(335,-8,qs),
(381,-8,o),
(468,13,o),
(537,59,o),
(579,133,o),
(579,187,qs),
(579,219,o),
(556,270,o),
(517,309,o),
(463,338,o),
(433,347,qs),
(395,359,o),
(313,381,o),
(271,392,qs),
(242,400,o),
(190,421,o),
(151,454,o),
(129,501,o),
(129,535,qs),
(129,577,o),
(166,632,o),
(222,665,o),
(290,679,o),
(323,679,qs),
(352,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 63 62 58 56 35 33 29 28 24 22 0 67 1 67 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni0421;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(570,660,o),
(502,697,o),
(421,715,o),
(379,715,qs),
(298,715,o),
(177,660,o),
(95,563,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(93,143,o),
(173,47,o),
(295,-8,o),
(378,-8,qs),
(421,-8,o),
(504,10,o),
(577,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(479,42,o),
(412,28,o),
(379,28,qs),
(306,28,o),
(200,80,o),
(130,170,o),
(96,289,o),
(96,355,qs),
(96,421,o),
(131,538,o),
(201,627,o),
(309,679,o),
(383,679,qs),
(452,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 27 77 0 1 1 3 97 0 3 3 28 3 78 1 0 37 36 32 30 22 20 16 15 11 9 0 39 1 39 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = uni0421;
unicode = 1057;
},
{
glyphname = G;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,664,o),
(531,634,o),
(579,589,o),
(593,558,q),
(643,558,l),
(625,601,o),
(570,660,o),
(500,698,o),
(418,715,o),
(373,715,qs),
(292,715,o),
(171,656,o),
(92,556,o),
(53,420,o),
(54,344,qs),
(55,269,o),
(95,141,o),
(175,46,o),
(295,-8,o),
(375,-8,qs),
(442,-8,o),
(552,36,o),
(628,116,o),
(670,227,o),
(670,294,qs),
(670,333,l),
(384,333,l),
(384,296,l),
(632,296,l),
(631,236,o),
(596,137,o),
(531,66,o),
(437,28,o),
(376,28,qs),
(304,28,o),
(199,79,o),
(131,167,o),
(99,284,o),
(99,349,qs),
(99,415,o),
(130,534,o),
(197,625,o),
(302,679,o),
(375,679,qs),
(407,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 7 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 1 0 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = G;
unicode = 71;
},
{
glyphname = uni041E;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 27 77 0 3 3 0 97 4 1 0 0 28 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = uni041E;
unicode = 1054;
},
{
glyphname = Q;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,27,q),
(657,-129,l),
(694,-104,l),
(583,50,l),
(648,102,o),
(713,258,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(469,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(634,167,o),
(564,79,o),
(457,28,o),
(384,28,qs),
(312,28,o),
(205,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
18 1 3 2 21 1 0 3 2 76 20 19 2 0 73 5 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 4 1 0 0 47 0 78 24 23 1 0 34 32 23 42 24 42 11 9 0 22 1 22 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Q;
unicode = 81;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,71,o),
(168,-8,o),
(254,-8,qs),
(319,-8,o),
(400,34,o),
(445,103,o),
(460,190,o),
(460,235,qs),
(460,707,l),
(417,707,l),
(417,243,ls),
(417,200,o),
(405,122,o),
(370,63,o),
(307,28,o),
(257,28,qs),
(187,28,o),
(106,92,o),
(95,161,q),
(48,161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 0 0 0 19 0 19 37 21 34 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = J;
unicode = 74;
},
{
glyphname = K_alt;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,231,l),
(259,364,l),
(529,0,l),
(579,0,l),
(289,392,l),
(583,707,l),
(533,707,l),
(135,284,l),
(135,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 6 3 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = K_alt;
},
{
glyphname = K;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,323,l),
(293,323,l),
(528,0,l),
(579,0,l),
(324,355,l),
(576,707,l),
(528,707,l),
(280,360,l),
(135,360,l),
(135,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 38 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = K;
unicode = 75;
},
{
glyphname = k_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,165,l),
(228,283,l),
(440,0,l),
(487,0,l),
(257,310,l),
(467,527,l),
(418,527,l),
(115,216,l),
(115,707,l),
(73,707,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
10 9 6 3 4 2 1 1 76 0 0 0 20 77 0 1 1 22 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
note = k_alt;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,246,l),
(260,246,l),
(438,0,l),
(486,0,l),
(292,273,l),
(468,527,l),
(421,527,l),
(252,281,l),
(115,281,l),
(115,707,l),
(73,707,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = k;
unicode = 107;
},
{
glyphname = i_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,527,l),
(18,527,l),
(18,492,l),
(111,492,l),
(111,0,l),
(153,0,l)
);
},
{
closed = 1;
nodes = (
(90,706,o),
(90,687,qs),
(90,669,o),
(113,648,o),
(130,648,qs),
(148,648,o),
(170,669,o),
(170,687,qs),
(170,704,o),
(148,726,o),
(130,726,qs),
(113,726,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 3 97 6 1 3 3 27 77 0 0 0 1 95 0 1 1 22 77 5 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
6 1 3 0 4 1 3 4 105 0 0 0 1 95 0 1 1 22 77 5 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
7 6 0 0 13 11 6 17 7 17 0 5 0 5 17 17 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 236;
}
);
note = i_alt;
},
{
glyphname = j_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,527,l),
(25,492,l),
(129,492,l),
(129,-26,ls),
(129,-66,o),
(113,-119,o),
(79,-151,o),
(25,-163,o),
(-12,-161,q),
(-12,-196,l),
(12,-196,ls),
(97,-196,o),
(171,-117,o),
(171,-32,qs),
(171,527,l)
);
},
{
closed = 1;
nodes = (
(103,706,o),
(103,687,qs),
(103,669,o),
(127,648,o),
(144,648,qs),
(162,648,o),
(184,669,o),
(184,687,qs),
(184,704,o),
(162,726,o),
(144,726,qs),
(127,726,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 97 6 1 4 4 27 77 0 2 2 3 95 0 3 3 22 77 0 1 1 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 0 1 0 101 0 5 5 4 97 6 1 4 4 27 77 0 2 2 3 95 0 3 3 22 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 4 0 5 3 4 5 105 0 1 0 0 1 0 101 0 2 2 3 95 0 3 3 22 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
16 15 22 20 15 26 16 26 17 21 17 34 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 250;
}
);
note = j_alt;
},
{
glyphname = s_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,490,o),
(372,473,o),
(409,445,o),
(418,426,q),
(460,426,l),
(451,455,o),
(408,496,o),
(353,522,o),
(290,534,o),
(260,534,qs),
(225,534,o),
(152,520,o),
(92,488,o),
(54,433,o),
(54,393,qs),
(54,346,o),
(95,291,o),
(159,261,o),
(235,247,o),
(271,242,qs),
(289,239,o),
(324,234,o),
(338,231,qs),
(358,226,o),
(395,213,o),
(424,192,o),
(441,159,o),
(441,134,qs),
(441,99,o),
(405,58,o),
(353,36,o),
(293,29,o),
(268,29,qs),
(244,29,o),
(193,37,o),
(144,55,o),
(103,86,o),
(90,109,q),
(43,109,l),
(54,78,o),
(103,34,o),
(165,6,o),
(235,-7,o),
(268,-7,qs),
(305,-7,o),
(381,6,o),
(443,39,o),
(483,95,o),
(483,137,qs),
(483,193,o),
(419,252,o),
(366,263,qs),
(349,266,o),
(310,273,o),
(268,280,o),
(227,286,o),
(210,289,qs),
(190,293,o),
(149,307,o),
(116,331,o),
(95,368,o),
(96,395,qs),
(97,426,o),
(128,467,o),
(176,489,o),
(232,498,o),
(258,498,qs),
(279,498,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 63 62 58 56 35 33 29 28 24 22 0 67 1 67 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = s_alt;
},
{
glyphname = s;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,490,o),
(354,472,o),
(386,444,o),
(395,425,q),
(437,425,l),
(428,454,o),
(390,495,o),
(339,522,o),
(280,534,o),
(251,534,qs),
(215,534,o),
(145,521,o),
(91,488,o),
(58,434,o),
(58,393,qs),
(58,350,o),
(94,297,o),
(150,264,o),
(219,248,o),
(248,243,qs),
(265,240,o),
(297,234,o),
(311,231,qs),
(328,227,o),
(367,214,o),
(399,192,o),
(418,159,o),
(418,134,qs),
(418,102,o),
(387,61,o),
(340,38,o),
(283,29,o),
(257,29,qs),
(234,29,o),
(186,37,o),
(141,55,o),
(102,86,o),
(90,109,q),
(43,109,l),
(53,78,o),
(99,34,o),
(157,6,o),
(224,-7,o),
(256,-7,qs),
(292,-7,o),
(365,7,o),
(423,40,o),
(459,96,o),
(459,139,qs),
(459,193,o),
(394,249,o),
(342,262,qs),
(310,270,o),
(243,281,o),
(212,288,qs),
(191,293,o),
(151,308,o),
(119,333,o),
(99,368,o),
(99,394,qs),
(99,429,o),
(130,471,o),
(177,492,o),
(229,498,o),
(250,498,qs),
(271,498,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 61 60 56 54 33 31 27 26 22 20 0 65 1 65 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = s;
unicode = 115;
},
{
glyphname = c_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,38,o),
(494,90,q),
(446,90,l),
(422,55,o),
(341,29,o),
(300,29,qs),
(247,29,o),
(168,66,o),
(116,130,o),
(91,215,o),
(91,263,qs),
(91,313,o),
(117,399,o),
(170,462,o),
(250,498,o),
(303,498,qs),
(345,498,o),
(421,464,o),
(441,429,q),
(487,429,l),
(473,459,o),
(434,499,o),
(385,523,o),
(329,534,o),
(299,534,qs),
(237,534,o),
(144,494,o),
(81,423,o),
(49,323,o),
(49,263,qs),
(49,204,o),
(80,105,o),
(142,33,o),
(235,-7,o),
(297,-7,qs),
(357,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 30 0 78 1 0 33 32 30 28 20 18 16 15 11 9 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = c_alt;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,652,o),
(122,540,o),
(65,385,o),
(65,292,qs),
(65,199,o),
(120,45,o),
(225,-67,o),
(376,-129,o),
(471,-129,qs),
(566,-129,o),
(717,-67,o),
(822,45,o),
(877,199,o),
(877,292,qs),
(877,385,o),
(820,540,o),
(715,652,o),
(564,715,o),
(471,715,qs),
(378,715,o)
);
},
{
closed = 1;
nodes = (
(692,618,o),
(785,515,o),
(835,374,o),
(835,292,qs),
(835,210,o),
(786,70,o),
(693,-33,o),
(557,-92,o),
(471,-92,qs),
(385,-92,o),
(250,-34,o),
(156,69,o),
(107,209,o),
(107,292,qs),
(107,375,o),
(157,516,o),
(251,619,o),
(386,677,o),
(471,677,qs),
(556,677,o)
);
},
{
closed = 1;
nodes = (
(624,133,o),
(643,184,q),
(604,184,l),
(589,149,o),
(522,119,o),
(484,119,qs),
(445,119,o),
(389,147,o),
(353,195,o),
(336,258,o),
(336,293,qs),
(336,328,o),
(352,391,o),
(387,439,o),
(445,467,o),
(487,467,qs),
(525,467,o),
(581,436,o),
(595,401,q),
(634,401,l),
(616,454,o),
(538,499,o),
(484,499,qs),
(437,499,o),
(367,467,o),
(321,411,o),
(298,336,o),
(298,293,qs),
(298,249,o),
(321,173,o),
(367,118,o),
(436,87,o),
(483,87,qs),
(539,87,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 10 1 0 11 1 2 5 0 2 105 0 5 0 7 6 5 7 105 0 8 12 1 4 3 8 4 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 41 40 21 20 1 0 71 70 68 66 58 56 54 53 51 49 40 73 41 73 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 942;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(620,0,l),
(523,109,l),
(550,143,o),
(594,238,o),
(602,285,q),
(561,285,l),
(554,247,o),
(522,175,o),
(494,137,q),
(294,370,l),
(331,388,o),
(395,430,o),
(442,480,o),
(469,537,o),
(469,572,qs),
(469,638,o),
(385,714,o),
(319,715,qs),
(241,716,o),
(146,632,o),
(146,554,qs),
(146,504,o),
(200,416,o),
(235,381,q),
(202,364,o),
(143,322,o),
(99,270,o),
(73,208,o),
(73,172,qs),
(73,127,o),
(105,60,o),
(161,15,o),
(236,-8,o),
(278,-8,qs),
(338,-8,o),
(444,28,o),
(495,76,q),
(564,0,l)
);
},
{
closed = 1;
nodes = (
(228,448,o),
(203,488,o),
(187,534,o),
(187,558,qs),
(187,616,o),
(256,680,o),
(315,679,qs),
(339,679,o),
(382,663,o),
(413,634,o),
(432,593,o),
(432,568,qs),
(432,536,o),
(400,485,o),
(352,444,o),
(295,410,o),
(271,397,q),
(257,412,o)
);
},
{
closed = 1;
nodes = (
(434,67,o),
(331,29,o),
(281,29,qs),
(248,29,o),
(190,47,o),
(145,83,o),
(119,138,o),
(119,174,qs),
(119,205,o),
(142,258,o),
(181,302,o),
(232,338,o),
(259,352,q),
(469,106,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
27 13 2 2 4 69 35 28 3 5 2 2 76 0 4 4 1 97 0 1 1 46 77 0 2 2 3 95 0 3 3 39 77 0 5 5 0 97 0 0 0 47 0 78 67 65 42 20 27 46 34 6 8 27 
CALL[ ]	/* CallFunction */";
};
width = 650;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,716,o),
(185,695,o),
(122,649,o),
(85,578,o),
(85,530,qs),
(85,494,o),
(109,438,o),
(150,395,o),
(207,365,o),
(240,357,qs),
(282,346,o),
(355,328,o),
(397,317,qs),
(425,310,o),
(475,288,o),
(513,255,o),
(536,208,o),
(536,176,qs),
(536,135,o),
(500,80,o),
(443,47,o),
(372,32,o),
(338,32,qs),
(303,32,o),
(235,42,o),
(175,69,o),
(127,114,o),
(112,149,q),
(65,149,l),
(78,110,o),
(126,53,o),
(190,15,o),
(266,-5,o),
(308,-8,q),
(308,-146,l),
(350,-146,l),
(350,-8,l),
(396,-6,o),
(481,16,o),
(545,63,o),
(582,136,o),
(581,188,qs),
(580,221,o),
(556,273,o),
(516,313,o),
(464,341,o),
(434,350,qs),
(393,362,o),
(310,381,o),
(268,392,qs),
(239,400,o),
(189,422,o),
(152,455,o),
(131,502,o),
(131,536,qs),
(131,578,o),
(166,634,o),
(222,666,o),
(292,679,o),
(326,679,qs),
(358,679,o),
(419,667,o),
(470,640,o),
(507,595,o),
(515,562,q),
(558,562,l),
(544,635,o),
(433,712,o),
(356,714,q),
(356,852,l),
(313,852,l),
(313,715,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
37 1 5 4 1 76 0 0 1 0 133 0 2 3 6 3 2 6 128 0 6 7 3 6 7 126 0 5 4 5 134 0 3 3 1 97 8 1 1 1 46 77 0 7 7 4 97 0 4 4 50 4 78 71 70 49 47 43 42 36 35 34 33 36 18 17 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,-165,o),
(184,-43,o),
(137,86,o),
(113,224,o),
(113,300,qs),
(113,377,o),
(137,516,o),
(183,644,o),
(249,765,o),
(292,824,q),
(247,824,l),
(163,715,o),
(71,442,o),
(71,300,qs),
(71,158,o),
(158,-104,o),
(243,-225,q),
(293,-225,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 133 2 1 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 17 0 17 22 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,704,o),
(154,450,o),
(154,299,qs),
(154,222,o),
(130,83,o),
(84,-45,o),
(17,-166,o),
(-26,-225,q),
(21,-225,l),
(105,-116,o),
(196,157,o),
(196,299,qs),
(196,441,o),
(109,703,o),
(24,824,q),
(-25,824,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 15 0 15 22 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 267;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,527,o),
(136,483,o),
(81,411,o),
(53,317,o),
(53,262,qs),
(53,207,o),
(81,113,o),
(136,43,o),
(218,-1,o),
(273,-5,q),
(273,-163,l),
(315,-163,l),
(315,-6,l),
(378,-3,o),
(482,58,o),
(506,118,q),
(461,118,l),
(441,71,o),
(355,29,o),
(302,29,qs),
(248,29,o),
(170,66,o),
(119,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,454,o),
(451,408,q),
(496,408,l),
(474,468,o),
(378,531,o),
(315,534,q),
(315,682,l),
(273,682,l),
(273,532,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
39 1 1 29 1 6 2 75 0 0 1 0 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 7 6 7 134 0 3 3 1 97 0 1 1 49 77 0 4 4 6 97 0 6 6 50 6 78 17 18 18 40 34 18 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = cent;
unicode = 162;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,676,o),
(370,659,o),
(402,631,o),
(410,611,q),
(447,611,l),
(439,639,o),
(403,679,o),
(355,704,o),
(298,715,o),
(270,715,qs),
(236,715,o),
(168,703,o),
(114,672,o),
(81,620,o),
(81,581,qs),
(81,554,o),
(112,501,o),
(144,485,q),
(110,464,o),
(71,400,o),
(71,363,qs),
(71,311,o),
(142,253,o),
(196,242,qs),
(226,236,o),
(300,222,o),
(333,216,qs),
(352,212,o),
(386,200,o),
(413,178,o),
(429,146,o),
(429,122,qs),
(429,96,o),
(406,60,o),
(365,38,o),
(310,27,o),
(277,27,qs),
(256,27,o),
(207,35,o),
(161,53,o),
(121,82,o),
(110,103,q),
(65,103,l),
(77,71,o),
(123,28,o),
(181,3,o),
(248,-8,o),
(281,-8,qs),
(315,-8,o),
(382,5,o),
(436,37,o),
(469,90,o),
(469,130,qs),
(469,165,o),
(432,219,o),
(396,233,q),
(467,275,o),
(467,343,qs),
(467,394,o),
(409,448,o),
(361,460,qs),
(322,471,o),
(240,486,o),
(200,497,qs),
(185,501,o),
(156,516,o),
(132,537,o),
(118,566,o),
(118,584,qs),
(118,615,o),
(146,655,o),
(189,676,o),
(242,684,o),
(267,684,qs),
(287,684,o)
);
},
{
closed = 1;
nodes = (
(247,452,o),
(292,443,o),
(337,434,o),
(360,427,qs),
(391,417,o),
(431,379,o),
(431,337,qs),
(431,320,o),
(417,291,o),
(395,267,o),
(370,250,o),
(358,246,q),
(326,253,o),
(270,262,o),
(239,269,qs),
(218,273,o),
(173,284,o),
(134,305,o),
(109,341,o),
(109,371,qs),
(109,398,o),
(146,451,o),
(175,470,q),
(200,462,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
86 56 18 3 2 5 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 70 69 65 63 38 36 32 31 27 25 0 74 1 74 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = section;
unicode = 167;
},
{
glyphname = uni04C1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,328,l),
(604,328,l),
(780,0,l),
(829,0,l),
(636,357,l),
(827,707,l),
(782,707,l),
(597,365,l),
(445,365,l),
(445,707,l),
(403,707,l),
(403,365,l),
(255,365,l),
(68,707,l),
(21,707,l),
(213,357,l),
(20,0,l),
(70,0,l),
(246,328,l),
(403,328,l),
(403,0,l),
(445,0,l)
);
},
{
closed = 1;
nodes = (
(358,856,o),
(322,875,o),
(297,906,o),
(291,929,q),
(253,929,l),
(257,898,o),
(289,855,o),
(335,828,o),
(393,816,o),
(423,816,qs),
(453,816,o),
(510,829,o),
(557,856,o),
(588,899,o),
(593,929,q),
(555,929,l),
(549,906,o),
(524,875,o),
(489,856,o),
(447,848,o),
(424,848,qs),
(401,848,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
16 5 2 0 3 1 76 13 1 11 10 11 133 15 1 10 0 12 2 10 12 105 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 20 77 14 9 7 3 1 1 21 1 78 23 22 0 0 39 38 34 32 28 27 22 43 23 43 0 21 0 21 17 18 17 17 17 17 18 17 17 16 7 31 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = uni04C1;
unicode = 1217;
},
{
glyphname = uni04C2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(391,247,l),
(521,247,l),
(673,0,l),
(721,0,l),
(551,277,l),
(705,527,l),
(657,527,l),
(508,282,l),
(391,282,l),
(391,527,l),
(349,527,l),
(349,282,l),
(232,282,l),
(84,527,l),
(36,527,l),
(189,277,l),
(20,0,l),
(68,0,l),
(220,247,l),
(349,247,l),
(349,0,l),
(391,0,l)
);
},
{
closed = 1;
nodes = (
(312,669,o),
(278,685,o),
(253,715,o),
(247,738,q),
(209,738,l),
(214,709,o),
(244,668,o),
(287,643,o),
(340,632,o),
(368,632,qs),
(396,632,o),
(450,643,o),
(494,668,o),
(525,709,o),
(531,738,q),
(492,738,l),
(486,715,o),
(460,685,o),
(426,669,o),
(387,663,o),
(369,663,qs),
(351,663,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
16 5 2 0 3 1 76 13 1 11 10 11 133 15 1 10 0 12 2 10 12 105 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 22 77 14 9 7 3 1 1 21 1 78 23 22 0 0 39 38 34 32 28 27 22 43 23 43 0 21 0 21 17 18 17 17 17 17 18 17 17 16 7 31 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = uni04C2;
unicode = 1218;
},
{
glyphname = w_alt;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,396,l),
(212,36,l),
(64,527,l),
(19,527,l),
(178,0,l),
(240,0,l),
(368,361,l),
(495,0,l),
(554,0,l),
(715,527,l),
(669,527,l),
(523,36,l),
(398,396,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
10 5 2 1 4 1 76 0 4 0 1 0 4 1 128 3 1 0 0 22 77 2 1 1 1 21 1 78 18 17 18 17 17 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 734;
}
);
note = w_alt;
},
{
glyphname = W_alt;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,454,l),
(603,0,l),
(667,0,l),
(868,707,l),
(821,707,l),
(634,44,l),
(463,530,l),
(425,530,l),
(257,44,l),
(69,707,l),
(20,707,l),
(221,0,l),
(290,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
11 6 3 3 3 1 1 76 2 1 0 0 20 77 0 1 1 22 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 888;
}
);
note = W_alt;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,550,o),
(513,652,o),
(409,715,o),
(331,715,qs),
(253,715,o),
(150,652,o),
(89,550,o),
(63,420,o),
(63,353,qs),
(63,285,o),
(88,155,o),
(150,54,o),
(253,-8,o),
(331,-8,qs),
(409,-8,o),
(513,54,o),
(575,156,o),
(601,285,o),
(601,353,qs),
(601,420,o)
);
},
{
closed = 1;
nodes = (
(125,524,o),
(174,619,o),
(261,679,o),
(331,679,qs),
(401,679,o),
(489,619,o),
(538,524,o),
(556,408,o),
(556,353,qs),
(556,296,o),
(538,181,o),
(489,87,o),
(401,28,o),
(331,28,qs),
(261,28,o),
(174,87,o),
(125,181,o),
(107,296,o),
(107,353,qs),
(107,408,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 46 77 0 2 2 0 97 0 0 0 47 0 78 40 40 40 36 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 663;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,707,l),
(179,679,o),
(158,649,o),
(118,635,o),
(65,631,o),
(29,631,q),
(29,602,l),
(172,602,l),
(172,0,l),
(215,0,l),
(215,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 38 77 0 0 0 39 0 78 20 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 328;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,399,o),
(363,331,o),
(297,270,o),
(267,243,qs),
(36,35,l),
(36,0,l),
(504,0,l),
(504,38,l),
(100,38,l),
(317,234,ls),
(351,265,o),
(416,327,o),
(466,395,o),
(496,473,o),
(496,520,qs),
(496,568,o),
(464,641,o),
(407,690,o),
(328,715,o),
(282,715,qs),
(201,715,o),
(87,655,o),
(62,591,q),
(111,591,l),
(121,615,o),
(157,649,o),
(202,670,o),
(252,679,o),
(278,679,qs),
(315,679,o),
(379,658,o),
(425,618,o),
(452,558,o),
(452,518,qs),
(452,475,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
29 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 0 3 3 4 95 0 4 4 39 4 78 17 26 34 20 36 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,84,o),
(98,34,o),
(164,4,o),
(240,-8,o),
(278,-8,qs),
(326,-8,o),
(415,13,o),
(484,59,o),
(526,134,o),
(526,188,qs),
(526,223,o),
(504,285,o),
(461,334,o),
(397,365,o),
(354,368,q),
(391,377,o),
(445,414,o),
(478,462,o),
(493,518,o),
(493,545,qs),
(493,592,o),
(456,657,o),
(397,697,o),
(320,715,o),
(279,715,qs),
(248,715,o),
(178,706,o),
(116,679,o),
(68,629,o),
(59,588,q),
(105,588,l),
(114,615,o),
(150,650,o),
(197,671,o),
(251,679,o),
(278,679,qs),
(312,679,o),
(375,664,o),
(423,630,o),
(452,576,o),
(452,537,qs),
(452,494,o),
(412,434,o),
(350,396,o),
(276,379,o),
(242,379,qs),
(191,379,l),
(191,342,l),
(262,342,ls),
(302,342,o),
(380,331,o),
(442,298,o),
(481,237,o),
(481,188,qs),
(481,143,o),
(445,82,o),
(388,45,o),
(316,28,o),
(279,28,qs),
(252,28,o),
(193,36,o),
(139,57,o),
(96,93,o),
(85,121,q),
(39,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
0 4 3 2 3 4 2 128 0 6 2 1 2 6 1 128 9 1 8 1 0 1 8 0 128 0 2 0 1 8 2 1 103 0 3 3 5 97 0 5 5 46 77 0 0 0 7 97 0 7 7 47 7 78 0 0 0 64 0 64 40 25 36 20 40 33 40 36 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,151,l),
(437,151,l),
(437,0,l),
(479,0,l),
(479,151,l),
(570,151,l),
(570,189,l),
(479,189,l),
(479,707,l),
(415,707,l),
(43,190,l)
);
},
{
closed = 1;
nodes = (
(437,671,l),
(437,189,l),
(90,189,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
12 10 2 1 0 1 76 6 5 2 1 4 1 2 3 1 2 103 0 0 0 38 77 0 3 3 39 3 78 11 11 11 13 11 13 17 17 17 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = four;
unicode = 52;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,665,l),
(470,707,l),
(18,707,l),
(18,669,l),
(424,669,l),
(121,0,l),
(169,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 2 0 1 76 0 0 0 1 95 0 1 1 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,278,o),
(487,327,o),
(427,361,o),
(387,366,q),
(455,384,o),
(521,473,o),
(520,535,qs),
(519,581,o),
(483,648,o),
(423,693,o),
(346,715,o),
(305,715,qs),
(263,715,o),
(185,694,o),
(125,650,o),
(89,582,o),
(89,535,qs),
(88,473,o),
(153,380,o),
(216,364,q),
(179,360,o),
(122,327,o),
(82,278,o),
(61,218,o),
(61,187,qs),
(61,133,o),
(101,59,o),
(168,13,o),
(255,-8,o),
(303,-8,qs),
(351,-8,o),
(439,13,o),
(506,60,o),
(547,134,o),
(547,187,qs),
(547,218,o)
);
},
{
closed = 1;
nodes = (
(402,662,o),
(451,626,o),
(481,568,o),
(481,527,qs),
(481,490,o),
(448,435,o),
(397,399,o),
(335,381,o),
(306,381,qs),
(273,381,o),
(209,398,o),
(159,435,o),
(128,492,o),
(128,531,qs),
(128,571,o),
(159,627,o),
(208,663,o),
(272,679,o),
(305,679,qs),
(338,679,o)
);
},
{
closed = 1;
nodes = (
(412,328,o),
(469,290,o),
(505,228,o),
(505,185,qs),
(505,141,o),
(470,81,o),
(413,44,o),
(342,28,o),
(305,28,qs),
(267,28,o),
(195,44,o),
(137,81,o),
(102,141,o),
(102,185,qs),
(102,228,o),
(138,290,o),
(196,328,o),
(269,346,o),
(305,346,qs),
(341,346,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
31 15 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 46 77 0 5 5 0 97 0 0 0 47 0 78 57 56 37 36 67 65 56 75 57 75 47 45 36 55 37 55 24 22 36 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,291,o),
(453,328,o),
(496,386,o),
(507,426,q),
(510,400,o),
(512,367,o),
(512,354,qs),
(512,300,o),
(496,185,o),
(449,90,o),
(362,28,o),
(291,28,qs),
(267,28,o),
(220,37,o),
(176,57,o),
(140,87,o),
(128,108,q),
(76,108,l),
(89,77,o),
(135,33,o),
(193,5,o),
(258,-8,o),
(290,-8,qs),
(368,-8,o),
(471,50,o),
(531,146,o),
(555,271,o),
(555,339,qs),
(555,402,o),
(532,535,o),
(474,645,o),
(374,715,o),
(295,715,qs),
(244,715,o),
(158,683,o),
(95,625,o),
(60,541,o),
(60,489,qs),
(60,437,o),
(95,357,o),
(156,302,o),
(237,273,o),
(282,273,qs),
(322,273,o)
);
},
{
closed = 1;
nodes = (
(135,604,o),
(186,652,o),
(254,679,o),
(293,679,qs),
(335,679,o),
(404,650,o),
(453,598,o),
(481,528,o),
(481,487,qs),
(481,448,o),
(450,383,o),
(398,337,o),
(329,312,o),
(292,312,qs),
(205,312,o),
(105,411,o),
(105,498,qs),
(105,537,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
39 1 5 6 1 76 0 3 0 4 0 3 4 128 0 5 7 1 0 3 5 0 105 0 6 6 1 97 0 1 1 46 77 0 4 4 2 97 0 2 2 47 2 78 1 0 58 56 48 46 32 30 26 25 21 19 11 9 0 43 1 43 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni0430;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(456,448,o),
(422,482,qs),
(398,506,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(234,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(346,48,o),
(274,29,o),
(237,29,qs),
(210,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 7 7 0 97 5 1 0 0 28 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 7 7 0 97 5 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 5 5 21 77 0 7 7 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
39 38 49 47 38 54 39 54 22 36 20 36 40 33 9 7 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = uni0430;
unicode = 1072;
},
{
glyphname = uni0435;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 29 77 0 0 0 2 97 0 2 2 30 2 78 32 32 0 0 32 42 32 42 38 36 0 31 0 31 40 36 20 36 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni0435;
unicode = 1077;
},
{
glyphname = uni043E;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 2 97 5 1 2 2 29 77 4 1 0 0 3 97 0 3 3 30 3 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = uni043E;
unicode = 1086;
},
{
glyphname = uni0441;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,54,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(249,29,o),
(171,66,o),
(120,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,204,o),
(84,105,o),
(146,33,o),
(238,-7,o),
(300,-7,qs),
(367,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 30 0 78 1 0 31 30 28 26 18 16 14 13 11 9 0 33 1 33 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = uni0441;
unicode = 1089;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,667,o),
(463,639,o),
(502,594,o),
(511,562,q),
(556,562,l),
(547,604,o),
(503,662,o),
(441,699,o),
(364,715,o),
(324,715,qs),
(278,715,o),
(191,695,o),
(124,651,o),
(83,580,o),
(83,528,qs),
(83,480,o),
(119,418,o),
(178,377,o),
(251,353,o),
(288,344,qs),
(314,338,o),
(371,322,o),
(401,313,qs),
(429,305,o),
(478,284,o),
(514,253,o),
(534,208,o),
(534,176,qs),
(534,137,o),
(499,81,o),
(442,45,o),
(370,28,o),
(333,28,qs),
(260,28,o),
(142,83,o),
(110,149,q),
(63,149,l),
(78,105,o),
(133,46,o),
(206,8,o),
(291,-8,o),
(335,-8,qs),
(381,-8,o),
(468,13,o),
(537,59,o),
(579,133,o),
(579,187,qs),
(579,219,o),
(556,270,o),
(517,309,o),
(463,338,o),
(433,347,qs),
(395,359,o),
(313,381,o),
(271,392,qs),
(242,400,o),
(190,421,o),
(151,454,o),
(129,501,o),
(129,535,qs),
(129,577,o),
(166,632,o),
(222,665,o),
(290,679,o),
(323,679,qs),
(352,679,o)
);
},
{
closed = 1;
nodes = (
(288,-142,o),
(288,-159,qs),
(288,-173,o),
(299,-190,o),
(315,-198,o),
(333,-200,o),
(339,-198,q),
(335,-228,o),
(301,-270,o),
(284,-280,q),
(299,-300,l),
(333,-281,o),
(374,-215,o),
(374,-174,qs),
(374,-154,o),
(355,-119,o),
(330,-119,qs),
(311,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
73 72 2 7 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 77 9 1 6 6 7 97 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 6 0 7 6 7 101 8 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
67 66 1 0 78 76 66 83 67 83 61 60 56 54 33 31 29 28 24 22 0 65 1 65 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,490,o),
(354,472,o),
(386,444,o),
(395,425,q),
(437,425,l),
(428,454,o),
(390,495,o),
(339,522,o),
(280,534,o),
(251,534,qs),
(215,534,o),
(145,521,o),
(91,488,o),
(58,434,o),
(58,393,qs),
(58,350,o),
(94,297,o),
(150,264,o),
(219,248,o),
(252,242,qs),
(266,240,o),
(295,234,o),
(309,231,qs),
(328,226,o),
(367,214,o),
(399,192,o),
(418,159,o),
(418,134,qs),
(418,102,o),
(387,61,o),
(340,38,o),
(284,29,o),
(258,29,qs),
(236,29,o),
(187,37,o),
(141,55,o),
(102,86,o),
(90,109,q),
(43,109,l),
(53,78,o),
(99,34,o),
(157,6,o),
(224,-7,o),
(256,-7,qs),
(292,-7,o),
(365,7,o),
(423,40,o),
(459,96,o),
(459,139,qs),
(459,193,o),
(394,249,o),
(342,262,qs),
(310,270,o),
(243,281,o),
(211,289,qs),
(191,293,o),
(151,308,o),
(119,333,o),
(99,368,o),
(99,394,qs),
(99,429,o),
(130,471,o),
(177,492,o),
(229,498,o),
(250,498,qs),
(271,498,o)
);
},
{
closed = 1;
nodes = (
(213,-142,o),
(213,-159,qs),
(213,-173,o),
(224,-190,o),
(240,-198,o),
(258,-200,o),
(264,-198,q),
(260,-228,o),
(226,-270,o),
(209,-280,q),
(224,-300,l),
(258,-281,o),
(299,-215,o),
(299,-174,qs),
(299,-154,o),
(280,-119,o),
(255,-119,qs),
(236,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
73 72 2 7 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 77 9 1 6 6 7 97 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 6 0 7 6 7 101 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
67 66 1 0 78 76 66 83 67 83 61 60 56 54 33 31 27 26 22 20 0 65 1 65 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,707,l),
(20,669,l),
(262,669,l),
(262,0,l),
(304,0,l),
(304,669,l),
(546,669,l),
(546,707,l)
);
},
{
closed = 1;
nodes = (
(243,-142,o),
(243,-159,qs),
(243,-173,o),
(254,-190,o),
(270,-198,o),
(288,-200,o),
(294,-198,q),
(290,-228,o),
(256,-270,o),
(239,-280,q),
(254,-300,l),
(288,-281,o),
(329,-215,o),
(329,-174,qs),
(329,-154,o),
(310,-119,o),
(285,-119,qs),
(266,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
15 14 2 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 3 95 0 3 3 38 77 0 1 1 39 77 6 1 4 4 5 97 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
6 1 4 0 5 4 5 101 2 1 0 0 3 95 0 3 3 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
9 8 20 18 8 25 9 25 17 17 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,167,ls),
(124,79,o),
(202,0,o),
(284,0,qs),
(319,0,l),
(319,36,l),
(292,36,ls),
(222,36,o),
(166,103,o),
(166,171,qs),
(166,492,l),
(322,492,l),
(322,527,l),
(166,527,l),
(166,685,l)
);
},
{
closed = 1;
nodes = (
(172,-142,o),
(172,-159,qs),
(172,-173,o),
(183,-190,o),
(199,-198,o),
(217,-200,o),
(223,-198,q),
(219,-228,o),
(185,-270,o),
(168,-280,q),
(183,-300,l),
(217,-281,o),
(258,-215,o),
(258,-174,qs),
(258,-154,o),
(239,-119,o),
(214,-119,qs),
(195,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
27 26 2 8 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 6 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 77 9 1 7 7 8 97 0 8 8 43 8 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
9 1 7 0 8 7 8 101 0 6 6 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 0 6 133 9 1 7 0 8 7 8 101 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
21 20 32 30 20 37 21 37 17 17 19 33 35 17 16 10 8 29 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,243,o),
(261,281,o),
(283,314,o),
(313,344,o),
(330,360,qs),
(379,406,o),
(437,492,o),
(437,549,qs),
(437,591,o),
(407,653,o),
(354,694,o),
(285,715,o),
(246,715,qs),
(218,715,o),
(156,704,o),
(100,676,o),
(55,630,o),
(43,594,q),
(91,594,l),
(99,617,o),
(132,649,o),
(173,670,o),
(221,679,o),
(244,679,qs),
(274,679,o),
(329,662,o),
(370,629,o),
(395,579,o),
(395,546,qs),
(395,521,o),
(376,476,o),
(347,434,o),
(312,397,o),
(295,381,qs),
(277,364,o),
(243,329,o),
(216,289,o),
(199,244,o),
(199,219,qs),
(199,204,l),
(247,204,l),
(247,219,ls)
);
},
{
closed = 1;
nodes = (
(184,52,o),
(184,33,qs),
(184,15,o),
(206,-7,o),
(225,-7,qs),
(242,-7,o),
(264,14,o),
(264,32,qs),
(264,52,o),
(241,73,o),
(225,73,qs),
(206,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 2 1 0 1 2 0 128 0 0 4 1 0 4 126 0 1 1 3 97 0 3 3 46 77 6 1 4 4 5 97 0 5 5 50 5 78 43 42 49 47 42 53 43 53 36 20 47 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = question;
unicode = 63;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(752,329,l),
(752,292,l),
(1001,292,l),
(1001,329,l)
);
},
{
closed = 1;
nodes = (
(953,451,o),
(986,489,o),
(1003,542,o),
(1003,572,qs),
(1003,599,o),
(987,650,o),
(955,691,o),
(907,715,o),
(875,715,qs),
(810,715,o),
(744,634,o),
(744,572,qs),
(744,510,o),
(810,429,o),
(873,429,qs),
(904,429,o)
);
},
{
closed = 1;
nodes = (
(936,659,o),
(957,627,o),
(966,589,o),
(966,573,qs),
(966,553,o),
(957,515,o),
(936,483,o),
(901,464,o),
(875,464,qs),
(849,464,o),
(814,482,o),
(792,512,o),
(782,551,o),
(782,572,qs),
(782,593,o),
(792,632,o),
(814,662,o),
(849,680,o),
(875,680,qs),
(901,680,o)
);
},
{
closed = 1;
nodes = (
(135,0,l),
(135,659,l),
(593,0,l),
(651,0,l),
(651,707,l),
(609,707,l),
(609,49,l),
(154,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
47 1 5 4 42 1 8 0 2 76 7 1 6 3 4 3 6 4 128 9 1 8 0 8 134 0 3 11 1 4 5 3 4 105 0 5 10 1 2 1 5 2 105 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 21 20 5 4 49 48 46 45 44 43 41 40 31 29 20 39 21 39 11 9 4 19 5 19 17 16 12 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1073;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = uni0401;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,906,o),
(164,889,qs),
(164,851,o),
(202,851,qs),
(220,851,o),
(239,873,o),
(239,889,qs),
(239,906,o),
(218,924,o),
(202,924,qs),
(187,924,o)
);
},
{
closed = 1;
nodes = (
(412,906,o),
(412,889,qs),
(412,851,o),
(449,851,qs),
(467,851,o),
(486,873,o),
(486,889,qs),
(486,906,o),
(465,924,o),
(449,924,qs),
(434,924,o)
);
},
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
11 2 10 3 0 3 1 1 4 0 1 105 0 6 0 7 8 6 7 103 0 5 5 4 95 0 4 4 20 77 0 8 8 9 95 0 9 9 21 9 78 12 11 1 0 33 32 31 30 29 28 27 26 25 24 23 22 18 16 11 21 12 21 7 5 0 10 1 10 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = uni0401;
unicode = 1025;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,307,o),
(137,348,o),
(155,380,o),
(185,401,o),
(208,401,qs),
(235,401,o),
(285,364,o),
(305,345,qs),
(328,323,o),
(386,280,o),
(425,280,qs),
(459,280,o),
(503,303,o),
(529,342,o),
(540,394,o),
(542,422,q),
(505,422,l),
(505,402,o),
(499,361,o),
(482,329,o),
(452,309,o),
(428,309,qs),
(399,309,o),
(352,344,o),
(329,366,qs),
(305,390,o),
(246,431,o),
(211,431,qs),
(178,431,o),
(133,407,o),
(106,367,o),
(94,316,o),
(93,288,q),
(130,288,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 4 0 2 4 128 6 1 5 1 3 1 5 3 128 0 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 0 0 0 33 0 33 36 36 20 36 36 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 635;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,468,l),
(181,681,l),
(271,681,l),
(271,707,l),
(64,707,l),
(64,681,l),
(154,681,l),
(154,468,l)
);
},
{
closed = 1;
nodes = (
(512,665,l),
(512,468,l),
(540,468,l),
(540,707,l),
(507,707,l),
(429,577,l),
(353,707,l),
(317,707,l),
(317,468,l),
(344,468,l),
(344,670,l),
(419,540,l),
(439,540,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
19 14 9 3 8 0 1 76 9 1 8 0 3 0 8 3 128 6 5 2 1 2 1 0 8 1 0 103 6 5 2 1 1 3 95 7 4 2 3 1 3 79 8 8 8 20 8 20 17 18 17 19 17 17 17 16 10 6 30 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,645,o),
(54,562,qs),
(54,478,o),
(153,386,o),
(235,386,qs),
(319,386,o),
(415,479,o),
(415,562,qs),
(415,603,o),
(390,670,o),
(344,718,o),
(277,745,o),
(235,745,qs),
(152,745,o)
);
},
{
closed = 1;
nodes = (
(393,635,o),
(393,562,qs),
(393,489,o),
(309,406,o),
(235,406,qs),
(162,406,o),
(76,489,o),
(76,562,qs),
(76,635,o),
(162,725,o),
(235,725,qs),
(310,725,o)
);
},
{
closed = 1;
nodes = (
(297,497,o),
(270,535,o),
(259,552,q),
(285,554,o),
(306,584,o),
(306,603,qs),
(306,629,o),
(273,655,o),
(246,655,qs),
(174,655,l),
(174,480,l),
(192,480,l),
(192,551,l),
(239,551,l),
(286,480,l),
(307,480,l)
);
},
{
closed = 1;
nodes = (
(263,638,o),
(289,623,o),
(289,603,qs),
(289,583,o),
(265,568,o),
(248,568,qs),
(192,568,l),
(192,638,l),
(248,638,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 98 values pushed */
38 1 4 8 1 76 12 7 2 5 4 3 4 5 3 128 10 1 0 11 1 2 6 0 2 105 0 6 13 1 9 8 6 9 105 0 8 0 4 5 8 4 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 42 42 26 26 15 14 1 0 42 50 42 49 45 43 26 41 26 41 33 31 30 29 28 27 21 19 14 25 15 25 9 7 0 13 1 13 14 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 472;
}
);
note = registered;
unicode = 174;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,664,o),
(90,703,qs),
(90,741,o),
(135,789,o),
(174,789,qs),
(213,789,o),
(257,741,o),
(257,703,qs),
(257,665,o),
(213,616,o),
(174,616,qs),
(135,616,o)
);
},
{
closed = 1;
nodes = (
(291,652,o),
(291,703,qs),
(291,727,o),
(276,769,o),
(246,801,o),
(203,820,o),
(175,820,qs),
(121,820,o),
(55,756,o),
(55,703,qs),
(55,652,o),
(117,585,o),
(174,585,qs),
(230,585,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 3 0 1 0 3 1 105 4 1 0 2 2 0 89 4 1 0 0 2 97 5 1 2 0 2 81 13 12 1 0 19 17 12 25 13 25 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 352;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,403,o),
(64,365,qs),
(64,327,o),
(111,275,o),
(153,275,qs),
(195,275,o),
(242,327,o),
(242,365,qs),
(242,403,o),
(194,455,o),
(153,455,qs),
(112,455,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 306;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = uni27F5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,281,l),
(395,538,l),
(367,568,l),
(65,262,l),
(367,-43,l),
(395,-13,l),
(137,243,l),
(1321,243,l),
(1321,281,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 0 1 1 76 6 5 2 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 22 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1386;
}
);
note = uni27F5;
unicode = 10229;
},
{
glyphname = uni27F6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1249,243,l),
(991,-13,l),
(1019,-43,l),
(1321,262,l),
(1019,568,l),
(991,538,l),
(1249,281,l),
(65,281,l),
(65,243,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 1 0 1 76 3 2 2 0 74 6 5 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 22 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1386;
}
);
note = uni27F6;
unicode = 10230;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(605,312,l),
(632,335,l),
(348,663,l),
(65,335,l),
(92,313,l),
(331,590,l),
(331,0,l),
(366,0,l),
(366,590,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 74 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,351,l),
(65,328,l),
(349,0,l),
(632,328,l),
(605,350,l),
(366,73,l),
(366,663,l),
(331,663,l),
(331,73,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 73 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni21BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(865,764,l),
(528,775,l),
(519,439,l),
(561,439,l),
(567,700,l),
(616,666,o),
(693,580,o),
(746,483,o),
(773,380,o),
(773,330,qs),
(773,257,o),
(725,132,o),
(638,41,o),
(515,-11,o),
(440,-11,qs),
(365,-11,o),
(243,43,o),
(156,136,o),
(109,262,o),
(109,334,qs),
(109,413,o),
(164,556,o),
(216,616,q),
(186,645,l),
(124,580,o),
(65,422,o),
(65,334,qs),
(65,249,o),
(118,107,o),
(216,5,o),
(354,-52,o),
(440,-52,qs),
(526,-52,o),
(666,6,o),
(764,108,o),
(817,246,o),
(817,327,qs),
(817,452,o),
(703,659,o),
(586,733,q),
(864,723,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
35 17 16 3 2 4 1 76 0 2 4 1 4 2 1 128 0 3 5 1 4 2 3 4 103 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 0 0 0 40 0 40 17 26 47 39 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 930;
}
);
note = uni21BA;
unicode = 8634;
},
{
glyphname = uni21BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,659,o),
(113,452,o),
(113,327,qs),
(113,246,o),
(166,108,o),
(264,6,o),
(404,-52,o),
(490,-52,qs),
(575,-52,o),
(714,5,o),
(812,107,o),
(865,249,o),
(865,334,qs),
(865,422,o),
(806,580,o),
(744,645,q),
(714,616,l),
(766,556,o),
(821,413,o),
(821,334,qs),
(821,262,o),
(774,136,o),
(687,43,o),
(565,-11,o),
(490,-11,qs),
(415,-11,o),
(292,41,o),
(205,132,o),
(157,257,o),
(157,330,qs),
(157,380,o),
(184,483,o),
(237,580,o),
(313,666,o),
(363,700,q),
(369,439,l),
(411,439,l),
(402,775,l),
(65,764,l),
(66,723,l),
(344,733,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
24 23 5 3 1 4 1 76 0 1 4 2 4 1 2 128 0 0 5 1 4 1 0 4 103 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 0 0 0 40 0 40 47 42 17 17 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 930;
}
);
note = uni21BB;
unicode = 8635;
},
{
glyphname = uni21B7;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(723,61,o),
(770,144,o),
(798,229,o),
(808,314,o),
(808,351,qs),
(807,435,o),
(756,576,o),
(661,680,o),
(524,738,o),
(437,738,qs),
(359,738,o),
(231,688,o),
(136,598,o),
(75,475,o),
(65,402,q),
(111,402,l),
(121,465,o),
(176,572,o),
(260,651,o),
(371,696,o),
(437,696,qs),
(513,696,o),
(635,643,o),
(720,550,o),
(765,424,o),
(765,351,qs),
(765,321,o),
(757,250,o),
(734,173,o),
(692,90,o),
(659,48,q),
(582,308,l),
(543,298,l),
(642,-25,l),
(960,83,l),
(945,124,l),
(687,27,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
36 5 3 2 1 5 1 73 0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 36 20 46 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1025;
}
);
note = uni21B7;
unicode = 8631;
},
{
glyphname = uni21B6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,83,l),
(383,-25,l),
(482,298,l),
(443,308,l),
(366,48,l),
(333,90,o),
(291,173,o),
(268,250,o),
(260,321,o),
(260,351,qs),
(260,424,o),
(305,550,o),
(390,643,o),
(511,696,o),
(588,696,qs),
(654,696,o),
(765,651,o),
(849,572,o),
(904,465,o),
(914,402,q),
(960,402,l),
(950,475,o),
(889,598,o),
(794,688,o),
(666,738,o),
(588,738,qs),
(501,738,o),
(364,680,o),
(269,576,o),
(218,435,o),
(217,351,qs),
(217,314,o),
(227,229,o),
(255,144,o),
(302,61,o),
(338,27,q),
(80,124,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
36 35 34 33 31 5 1 73 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 36 20 41 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1025;
}
);
note = uni21B6;
unicode = 8630;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,332,o),
(188,362,o),
(234,386,o),
(286,400,o),
(314,400,qs),
(402,400,o),
(500,305,o),
(500,214,qs),
(500,167,o),
(469,97,o),
(414,51,o),
(339,28,o),
(296,28,qs),
(271,28,o),
(217,38,o),
(168,60,o),
(127,97,o),
(115,123,q),
(68,123,l),
(81,82,o),
(137,31,o),
(203,2,o),
(272,-8,o),
(299,-8,qs),
(349,-8,o),
(439,20,o),
(506,77,o),
(545,162,o),
(545,220,qs),
(545,269,o),
(512,349,o),
(452,406,o),
(370,437,o),
(321,437,qs),
(269,437,o),
(168,402,o),
(126,357,q),
(154,669,l),
(518,669,l),
(518,707,l),
(116,707,l),
(82,316,l),
(138,316,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 7 6 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 97 0 3 3 47 3 78 0 0 0 42 0 42 38 36 20 40 35 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,423,o),
(178,391,o),
(127,336,o),
(109,295,q),
(108,332,o),
(112,418,o),
(129,504,o),
(161,582,o),
(213,643,o),
(289,679,o),
(341,679,qs),
(386,679,o),
(471,639,o),
(496,599,q),
(542,599,l),
(513,656,o),
(408,715,o),
(343,715,qs),
(264,715,o),
(157,649,o),
(93,541,o),
(66,404,o),
(66,334,qs),
(66,271,o),
(92,148,o),
(153,52,o),
(253,-8,o),
(328,-8,qs),
(376,-8,o),
(461,21,o),
(524,78,o),
(560,163,o),
(560,219,qs),
(560,267,o),
(525,347,o),
(464,404,o),
(382,436,o),
(335,436,qs),
(303,436,o)
);
},
{
closed = 1;
nodes = (
(491,105,o),
(442,56,o),
(371,28,o),
(327,28,qs),
(289,28,o),
(219,55,o),
(165,103,o),
(134,171,o),
(133,212,qs),
(133,257,o),
(168,326,o),
(224,374,o),
(294,398,o),
(331,398,qs),
(373,398,o),
(441,371,o),
(491,321,o),
(518,252,o),
(518,210,qs),
(518,172,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
34 1 6 5 1 76 0 3 4 0 4 3 0 128 7 1 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 46 77 0 6 6 1 97 0 1 1 47 1 78 1 0 55 53 45 43 28 26 24 23 21 19 11 9 0 38 1 38 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = six;
unicode = 54;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,691,o),
(310,675,qs),
(310,659,o),
(331,636,o),
(349,636,qs),
(368,636,o),
(390,658,o),
(390,675,qs),
(390,692,o),
(368,714,o),
(349,714,qs),
(331,714,o)
);
},
{
closed = 1;
nodes = (
(99,691,o),
(99,675,qs),
(99,659,o),
(120,636,o),
(138,636,qs),
(157,636,o),
(179,658,o),
(179,675,qs),
(179,692,o),
(157,714,o),
(138,714,qs),
(120,714,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 489;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,18,l),
(244,-109,l),
(255,-106,o),
(288,-100,o),
(300,-100,qs),
(327,-100,o),
(359,-126,o),
(359,-151,qs),
(359,-177,o),
(333,-206,o),
(296,-221,o),
(256,-223,o),
(241,-221,q),
(241,-248,l),
(266,-251,o),
(318,-245,o),
(361,-222,o),
(389,-183,o),
(389,-153,qs),
(389,-115,o),
(347,-76,o),
(315,-75,qs),
(306,-75,o),
(291,-76,o),
(280,-78,q),
(310,18,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 11 values pushed */
23 12 2 1 2 1 76 11 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 0 0 3 112 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 0 3 133 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 37 25 49 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 576;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 41 77 0 1 1 39 1 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = ccedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,-7,o),
(397,9,o),
(451,40,o),
(493,86,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(249,29,o),
(171,66,o),
(120,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,206,o),
(81,112,o),
(137,41,o),
(220,-2,o),
(276,-6,q),
(245,-108,l),
(256,-104,o),
(288,-100,o),
(299,-100,qs),
(326,-100,o),
(359,-122,o),
(359,-151,qs),
(359,-177,o),
(333,-206,o),
(296,-221,o),
(256,-223,o),
(241,-222,q),
(241,-248,l),
(266,-251,o),
(319,-244,o),
(362,-222,o),
(389,-183,o),
(389,-153,qs),
(389,-114,o),
(345,-77,o),
(315,-76,qs),
(304,-76,o),
(291,-77,o),
(280,-79,q),
(302,-7,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
24 1 8 6 23 1 1 2 2 76 11 1 1 73 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 1 2 1 134 0 0 0 2 1 0 2 105 0 5 5 3 97 0 3 3 49 77 0 6 6 8 97 0 8 8 50 8 78 20 18 40 34 18 44 37 40 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = uni0162;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(304,0,l),
(304,669,l),
(546,669,l),
(546,707,l),
(20,707,l),
(20,669,l),
(262,669,l),
(262,0,l),
(269,0,l),
(234,-108,l),
(245,-104,o),
(279,-100,o),
(290,-100,qs),
(317,-100,o),
(350,-122,o),
(350,-151,qs),
(350,-177,o),
(324,-206,o),
(287,-221,o),
(247,-223,o),
(232,-222,q),
(232,-248,l),
(257,-251,o),
(310,-244,o),
(353,-222,o),
(380,-183,o),
(380,-153,qs),
(380,-114,o),
(336,-77,o),
(306,-76,qs),
(295,-76,o),
(282,-77,o),
(271,-79,q),
(295,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
23 1 1 2 1 76 24 1 6 1 75 11 1 1 73 0 1 2 1 134 0 0 0 2 1 0 2 105 5 1 3 3 4 95 0 4 4 38 77 0 6 6 39 6 78 17 17 17 21 37 40 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,0,o),
(284,0,qs),
(319,0,l),
(319,36,l),
(292,36,ls),
(222,36,o),
(166,103,o),
(166,171,qs),
(166,492,l),
(322,492,l),
(322,527,l),
(166,527,l),
(166,685,l),
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,167,ls),
(124,47,o),
(199,15,q),
(159,-108,l),
(170,-104,o),
(204,-100,o),
(215,-100,qs),
(242,-100,o),
(275,-122,o),
(275,-151,qs),
(275,-177,o),
(249,-206,o),
(212,-221,o),
(172,-223,o),
(157,-222,q),
(157,-248,l),
(182,-251,o),
(235,-244,o),
(278,-222,o),
(305,-183,o),
(305,-153,qs),
(305,-114,o),
(261,-77,o),
(231,-76,qs),
(220,-76,o),
(207,-77,o),
(196,-79,q),
(223,7,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
45 24 2 9 8 23 1 1 2 2 76 11 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 2 1 134 0 0 0 2 1 0 2 105 0 5 5 38 77 7 1 3 3 4 95 6 1 4 4 41 77 0 8 8 9 97 0 9 9 39 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 4 5 133 0 1 2 1 134 0 0 0 2 1 0 2 105 7 1 3 3 4 95 6 1 4 4 41 77 0 8 8 9 97 0 9 9 39 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
44 42 35 17 17 17 17 22 37 40 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(571,660,o),
(503,697,o),
(422,715,o),
(379,715,qs),
(297,715,o),
(175,659,o),
(94,562,o),
(54,429,o),
(54,353,qs),
(54,278,o),
(89,150,o),
(163,55,o),
(274,-3,o),
(351,-7,q),
(319,-108,l),
(330,-104,o),
(363,-100,o),
(374,-100,qs),
(401,-100,o),
(434,-122,o),
(434,-151,qs),
(434,-177,o),
(408,-206,o),
(371,-221,o),
(331,-223,o),
(316,-222,q),
(316,-248,l),
(341,-251,o),
(394,-244,o),
(437,-222,o),
(465,-183,o),
(465,-153,qs),
(465,-114,o),
(421,-77,o),
(391,-76,qs),
(380,-76,o),
(366,-77,o),
(355,-79,q),
(377,-8,l),
(419,-8,o),
(503,11,o),
(577,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(478,42,o),
(411,28,o),
(378,28,qs),
(305,28,o),
(199,80,o),
(130,170,o),
(96,289,o),
(96,355,qs),
(96,421,o),
(131,538,o),
(201,627,o),
(309,679,o),
(383,679,qs),
(452,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
22 1 6 4 45 1 5 6 2 76 33 1 5 73 0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 5 6 5 134 0 4 0 6 5 4 6 105 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 7 1 3 3 47 3 78 1 0 62 61 57 55 47 46 43 41 36 34 26 24 21 20 16 15 11 9 0 64 1 64 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = scedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,-6,o),
(369,8,o),
(425,42,o),
(459,97,o),
(459,139,qs),
(459,193,o),
(394,249,o),
(342,262,qs),
(310,270,o),
(243,281,o),
(211,289,qs),
(191,293,o),
(151,308,o),
(119,333,o),
(99,368,o),
(99,394,qs),
(99,429,o),
(130,471,o),
(177,492,o),
(229,498,o),
(250,498,qs),
(271,498,o),
(314,490,o),
(354,472,o),
(386,444,o),
(395,425,q),
(437,425,l),
(428,454,o),
(390,495,o),
(339,522,o),
(280,534,o),
(251,534,qs),
(215,534,o),
(145,521,o),
(91,488,o),
(58,434,o),
(58,393,qs),
(58,350,o),
(94,297,o),
(150,264,o),
(219,248,o),
(252,242,qs),
(309,231,ls),
(328,226,o),
(367,214,o),
(399,192,o),
(418,159,o),
(418,134,qs),
(418,102,o),
(387,61,o),
(340,38,o),
(283,29,o),
(257,29,qs),
(234,29,o),
(186,37,o),
(141,55,o),
(102,86,o),
(90,109,q),
(43,109,l),
(53,80,o),
(93,38,o),
(146,10,o),
(208,-5,o),
(238,-6,q),
(206,-108,l),
(217,-104,o),
(250,-100,o),
(261,-100,qs),
(288,-100,o),
(321,-122,o),
(321,-151,qs),
(321,-177,o),
(295,-206,o),
(258,-221,o),
(218,-223,o),
(203,-222,q),
(203,-248,l),
(228,-251,o),
(281,-244,o),
(324,-222,o),
(351,-183,o),
(351,-153,qs),
(351,-114,o),
(307,-77,o),
(275,-76,qs),
(268,-76,o),
(250,-77,o),
(242,-79,q),
(264,-7,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
23 1 1 2 1 76 11 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 1 2 1 134 0 0 0 2 1 0 2 105 0 8 8 6 97 0 6 6 49 77 0 5 5 3 97 9 1 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 1 2 1 134 0 0 0 2 1 0 2 105 0 8 8 6 97 0 6 6 49 77 0 5 5 3 97 9 1 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
88 87 68 66 62 61 57 55 36 20 19 37 40 49 10 8 28 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni21A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,294,l),
(367,324,l),
(65,19,l),
(367,-287,l),
(395,-256,l),
(137,0,l),
(772,0,ls),
(848,0,o),
(968,51,o),
(1050,141,o),
(1094,266,o),
(1094,340,qs),
(1094,413,o),
(1050,536,o),
(966,626,o),
(845,677,o),
(769,677,qs),
(202,677,l),
(202,639,l),
(766,639,ls),
(833,639,o),
(939,593,o),
(1013,513,o),
(1052,404,o),
(1052,340,qs),
(1052,275,o),
(1013,165,o),
(940,84,o),
(833,38,o),
(766,38,qs),
(137,38,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
29 28 2 0 1 27 1 3 0 2 76 26 25 2 3 73 0 2 0 1 0 2 1 103 4 1 0 3 3 0 87 4 1 0 0 3 95 0 3 0 3 79 1 0 24 22 14 12 11 9 0 30 1 30 5 6 22 
CALL[ ]	/* CallFunction */";
};
width = 1159;
}
);
note = uni21A9;
unicode = 8617;
},
{
glyphname = uni2713;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,389,l),
(65,355,l),
(373,2,l),
(994,774,l),
(953,807,l),
(371,77,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
2 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 1059;
}
);
note = uni2713;
unicode = 10003;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,193,o),
(189,175,qs),
(189,157,o),
(210,134,o),
(229,134,qs),
(249,134,o),
(269,157,o),
(269,175,qs),
(269,193,o),
(248,215,o),
(229,215,qs),
(210,215,o)
);
},
{
closed = 1;
nodes = (
(189,561,o),
(189,543,qs),
(189,525,o),
(210,502,o),
(229,502,qs),
(249,502,o),
(269,525,o),
(269,543,qs),
(269,561,o),
(248,583,o),
(229,583,qs),
(210,583,o)
);
},
{
closed = 1;
nodes = (
(65,377,l),
(65,340,l),
(394,340,l),
(394,377,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
7 1 2 0 3 5 2 3 105 0 5 0 4 0 5 4 103 6 1 0 1 1 0 89 6 1 0 0 1 97 0 1 0 1 81 13 12 1 0 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 459;
}
);
note = divide;
unicode = 247;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(392,205,l),
(244,353,l),
(392,502,l),
(369,525,l),
(222,374,l),
(74,525,l),
(50,502,l),
(200,353,l),
(50,205,l),
(73,182,l),
(221,331,l),
(369,182,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 442;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,707,l),
(45,707,l),
(277,298,l),
(141,298,l),
(141,262,l),
(295,262,l),
(295,138,l),
(141,138,l),
(141,103,l),
(295,103,l),
(295,0,l),
(338,0,l),
(338,103,l),
(491,103,l),
(491,138,l),
(338,138,l),
(338,262,l),
(491,262,l),
(491,298,l),
(357,298,l),
(589,707,l),
(538,707,l),
(318,305,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
22 1 1 0 1 76 9 1 1 8 1 2 3 1 2 103 7 1 3 6 1 4 5 3 4 103 10 1 0 0 38 77 0 5 5 39 5 78 21 20 19 18 17 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,303,l),
(65,266,l),
(169,266,l),
(169,135,l),
(65,135,l),
(65,98,l),
(169,98,l),
(169,0,l),
(211,0,l),
(211,98,l),
(521,98,l),
(521,135,l),
(211,135,l),
(211,266,l),
(384,266,ls),
(439,266,o),
(535,291,o),
(606,345,o),
(646,429,o),
(646,488,qs),
(646,547,o),
(612,630,o),
(548,683,o),
(458,707,o),
(401,707,qs),
(169,707,l),
(169,303,l)
);
},
{
closed = 1;
nodes = (
(211,669,l),
(397,669,ls),
(444,669,o),
(521,650,o),
(575,608,o),
(604,541,o),
(604,492,qs),
(604,440,o),
(571,368,o),
(513,323,o),
(430,303,o),
(381,303,qs),
(211,303,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 9 2 8 7 1 1 2 8 1 103 6 1 2 5 1 3 4 2 3 103 0 10 10 0 95 0 0 0 38 77 0 4 4 39 4 78 28 27 38 36 27 39 28 39 17 17 17 17 17 17 17 40 32 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B4;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,704,o),
(168,677,o),
(125,633,o),
(114,600,q),
(164,600,l),
(173,624,o),
(209,655,o),
(253,673,o),
(298,679,o),
(315,679,qs),
(343,679,o),
(396,665,o),
(435,638,o),
(458,597,o),
(457,568,qs),
(456,530,o),
(411,460,o),
(379,437,q),
(53,437,l),
(53,401,l),
(339,401,l),
(167,264,l),
(53,264,l),
(53,228,l),
(134,228,l),
(114,203,o),
(101,148,o),
(102,131,qs),
(104,83,o),
(150,28,o),
(210,0,o),
(272,-8,o),
(292,-8,qs),
(323,-8,o),
(386,3,o),
(442,28,o),
(485,69,o),
(496,99,q),
(449,99,l),
(438,76,o),
(400,48,o),
(355,33,o),
(306,28,o),
(285,28,qs),
(261,28,o),
(211,40,o),
(171,67,o),
(145,109,o),
(145,140,qs),
(145,162,o),
(164,213,o),
(181,228,q),
(531,228,l),
(531,264,l),
(221,264,l),
(397,401,l),
(531,401,l),
(532,437,l),
(429,437,l),
(435,443,o),
(459,467,o),
(482,501,o),
(499,544,o),
(499,570,qs),
(499,610,o),
(466,666,o),
(414,700,o),
(349,715,o),
(316,715,qs),
(285,715,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 47 7 78 1 0 65 64 60 58 51 50 49 48 47 46 45 44 37 35 31 30 26 24 17 16 15 14 13 12 11 10 0 69 1 69 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = uni20B4;
unicode = 8372;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,355,l),
(193,524,ls),
(193,602,o),
(266,679,o),
(344,679,qs),
(382,679,o),
(449,644,o),
(463,605,q),
(505,605,l),
(498,633,o),
(467,674,o),
(424,701,o),
(371,715,o),
(342,715,qs),
(252,715,o),
(153,623,o),
(153,531,qs),
(153,355,l),
(65,355,l),
(65,318,l),
(153,318,l),
(153,38,l),
(65,38,l),
(65,0,l),
(511,0,l),
(511,38,l),
(193,38,l),
(193,318,l),
(414,318,l),
(414,355,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 7 8 5 8 7 5 128 9 1 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 29 28 34 20 35 17 17 17 17 17 16 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = Scedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,-7,o),
(472,14,o),
(538,61,o),
(579,134,o),
(579,187,qs),
(579,219,o),
(556,270,o),
(517,309,o),
(463,338,o),
(433,347,qs),
(395,359,o),
(313,381,o),
(271,392,qs),
(242,400,o),
(190,421,o),
(151,454,o),
(129,501,o),
(129,535,qs),
(129,577,o),
(166,632,o),
(222,665,o),
(290,679,o),
(323,679,qs),
(352,679,o),
(412,667,o),
(463,639,o),
(502,594,o),
(511,562,q),
(556,562,l),
(547,604,o),
(503,662,o),
(441,699,o),
(364,715,o),
(324,715,qs),
(278,715,o),
(191,695,o),
(124,651,o),
(83,580,o),
(83,528,qs),
(83,480,o),
(119,418,o),
(178,377,o),
(251,353,o),
(288,344,qs),
(314,337,o),
(371,322,o),
(401,313,qs),
(429,305,o),
(478,284,o),
(514,253,o),
(534,208,o),
(534,176,qs),
(534,137,o),
(499,81,o),
(442,45,o),
(369,28,o),
(332,28,qs),
(299,28,o),
(234,41,o),
(175,70,o),
(126,116,o),
(110,149,q),
(63,149,l),
(77,108,o),
(128,50,o),
(195,13,o),
(274,-6,o),
(316,-7,q),
(285,-108,l),
(296,-104,o),
(328,-100,o),
(339,-100,qs),
(366,-100,o),
(399,-122,o),
(399,-151,qs),
(399,-177,o),
(373,-206,o),
(336,-221,o),
(296,-223,o),
(281,-222,q),
(281,-248,l),
(306,-251,o),
(359,-244,o),
(402,-222,o),
(429,-183,o),
(429,-153,qs),
(429,-114,o),
(386,-77,o),
(352,-76,qs),
(345,-76,o),
(329,-77,o),
(320,-79,q),
(342,-8,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
23 1 1 2 1 76 11 1 1 73 0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 1 2 1 134 0 0 0 2 1 0 2 105 0 8 8 6 97 0 6 6 46 77 0 5 5 3 97 9 1 3 3 50 3 78 92 91 70 68 64 63 59 57 36 20 19 37 40 49 10 8 28 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = t_alt;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,685,l),
(129,527,l),
(35,527,l),
(35,492,l),
(128,492,l),
(128,167,ls),
(128,126,o),
(144,64,o),
(181,22,o),
(242,0,o),
(286,0,qs),
(323,0,l),
(323,36,l),
(293,36,ls),
(223,36,o),
(170,103,o),
(170,171,qs),
(170,492,l),
(328,492,l),
(328,527,l),
(170,527,l),
(170,685,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 20 77 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 21 33 35 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = t_alt;
},
{
glyphname = alt_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,39,l),
(298,707,l),
(269,707,l),
(265,679,o),
(239,648,o),
(198,633,o),
(141,631,o),
(106,631,q),
(106,602,l),
(255,602,l),
(255,39,l),
(53,39,l),
(53,0,l),
(466,0,l),
(466,39,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 3 0 2 1 3 2 103 0 4 4 20 77 5 1 1 1 0 95 0 0 0 21 0 78 17 19 33 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 491;
}
);
note = alt_1;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,652,o),
(122,540,o),
(65,385,o),
(65,292,qs),
(65,199,o),
(120,45,o),
(225,-67,o),
(376,-129,o),
(471,-129,qs),
(566,-129,o),
(717,-67,o),
(822,45,o),
(877,199,o),
(877,292,qs),
(877,385,o),
(820,540,o),
(715,652,o),
(564,715,o),
(471,715,qs),
(378,715,o)
);
},
{
closed = 1;
nodes = (
(692,618,o),
(786,515,o),
(836,374,o),
(836,292,qs),
(836,210,o),
(787,70,o),
(693,-33,o),
(557,-92,o),
(471,-92,qs),
(385,-92,o),
(250,-34,o),
(156,69,o),
(106,209,o),
(106,292,qs),
(106,375,o),
(156,516,o),
(251,619,o),
(386,677,o),
(471,677,qs),
(556,677,o)
);
},
{
closed = 1;
nodes = (
(482,221,ls),
(518,221,o),
(580,238,o),
(625,272,o),
(650,324,o),
(650,359,qs),
(649,428,o),
(562,493,o),
(496,493,qs),
(356,493,l),
(356,78,l),
(396,78,l),
(396,221,l)
);
},
{
closed = 1;
nodes = (
(396,457,l),
(491,457,ls),
(516,457,o),
(560,447,o),
(592,424,o),
(610,387,o),
(610,359,qs),
(610,329,o),
(590,290,o),
(555,266,o),
(507,257,o),
(480,257,qs),
(396,257,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 4 6 3 6 4 3 128 9 1 0 10 1 2 5 0 2 105 0 5 0 8 7 5 8 103 11 1 7 0 6 4 7 6 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 54 53 21 20 1 0 64 62 53 65 54 65 52 50 44 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 942;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = colon.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,550,o),
(73,532,qs),
(73,514,o),
(94,490,o),
(113,490,qs),
(132,490,o),
(153,514,o),
(153,532,qs),
(153,550,o),
(132,572,o),
(113,572,qs),
(94,572,o)
);
},
{
closed = 1;
nodes = (
(73,173,o),
(73,155,qs),
(73,138,o),
(94,114,o),
(113,114,qs),
(132,114,o),
(153,138,o),
(153,155,qs),
(153,173,o),
(132,195,o),
(113,195,qs),
(94,195,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 226;
}
);
note = colon.uc;
},
{
glyphname = y_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,272,ls),
(482,228,o),
(462,141,o),
(415,71,o),
(338,28,o),
(281,28,qs),
(226,28,o),
(160,70,o),
(124,138,o),
(112,223,o),
(112,266,qs),
(112,527,l),
(70,527,l),
(70,243,ls),
(70,190,o),
(90,99,o),
(138,31,o),
(215,-8,o),
(272,-8,qs),
(296,-8,o),
(353,-1,o),
(410,22,o),
(462,68,o),
(482,107,q),
(482,-12,ls),
(482,-33,o),
(474,-104,o),
(436,-172,o),
(360,-221,o),
(292,-221,qs),
(268,-221,o),
(219,-212,o),
(174,-191,o),
(138,-157,o),
(127,-133,q),
(79,-133,l),
(91,-165,o),
(133,-212,o),
(188,-242,o),
(254,-257,o),
(289,-257,qs),
(404,-257,o),
(524,-132,o),
(524,-17,qs),
(524,527,l),
(482,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 3 2 3 1 2 128 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 45 0 45 37 21 41 36 20 35 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = y_alt;
},
{
glyphname = u_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,280,ls),
(482,232,o),
(461,143,o),
(414,73,o),
(338,30,o),
(282,29,qs),
(226,29,o),
(159,70,o),
(123,136,o),
(112,222,o),
(112,267,qs),
(112,527,l),
(70,527,l),
(70,241,ls),
(70,191,o),
(89,100,o),
(136,32,o),
(215,-8,o),
(274,-8,qs),
(301,-8,o),
(358,0,o),
(413,25,o),
(463,70,o),
(482,107,q),
(482,0,l),
(524,0,l),
(524,527,l),
(482,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 3 2 1 76 5 4 2 2 2 22 77 0 0 0 21 77 0 3 3 1 97 0 1 1 28 1 78 0 0 0 27 0 27 37 21 37 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = u_alt;
},
{
glyphname = be_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,132,o),
(125,45,o),
(217,-7,o),
(288,-7,qs),
(345,-7,o),
(433,31,o),
(494,98,o),
(526,191,o),
(526,246,qs),
(526,296,o),
(498,382,o),
(443,446,o),
(363,483,o),
(311,484,qs),
(285,484,o),
(224,475,o),
(163,445,o),
(109,392,o),
(90,349,q),
(91,417,o),
(108,512,o),
(141,578,o),
(192,620,o),
(227,636,qs),
(253,648,o),
(315,668,o),
(352,679,qs),
(374,685,o),
(420,699,o),
(465,716,o),
(504,737,o),
(519,751,q),
(494,783,l),
(482,772,o),
(447,752,o),
(406,735,o),
(365,722,o),
(349,718,qs),
(326,712,o),
(277,697,o),
(232,681,o),
(194,665,o),
(182,658,qs),
(141,635,o),
(90,576,o),
(61,494,o),
(50,384,o),
(50,311,qs),
(50,248,o)
);
},
{
closed = 1;
nodes = (
(174,62,o),
(126,118,o),
(101,192,o),
(101,234,qs),
(101,276,o),
(128,353,o),
(179,411,o),
(253,446,o),
(300,446,qs),
(345,446,o),
(414,413,o),
(461,358,o),
(485,284,o),
(485,243,qs),
(485,200,o),
(459,123,o),
(410,64,o),
(336,29,o),
(288,29,qs),
(244,29,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
29 1 2 3 1 76 16 15 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 50 49 60 58 49 68 50 68 45 43 35 33 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = be_alt;
},
{
glyphname = g_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(474,455,o),
(426,499,o),
(374,525,o),
(320,534,o),
(294,534,qs),
(234,534,o),
(144,491,o),
(84,417,o),
(54,320,o),
(53,266,qs),
(53,214,o),
(78,116,o),
(133,39,o),
(222,-7,o),
(287,-7,qs),
(313,-7,o),
(373,5,o),
(430,35,o),
(479,86,o),
(495,125,q),
(495,7,ls),
(495,-42,o),
(477,-126,o),
(434,-187,o),
(360,-221,o),
(304,-221,qs),
(257,-221,o),
(163,-193,o),
(118,-160,q),
(99,-195,l),
(134,-219,o),
(231,-257,o),
(300,-257,qs),
(364,-257,o),
(454,-221,o),
(511,-153,o),
(537,-56,o),
(537,6,qs),
(537,527,l),
(495,527,l),
(494,421,l)
);
},
{
closed = 1;
nodes = (
(418,462,o),
(468,399,o),
(493,314,o),
(493,265,qs),
(493,220,o),
(466,135,o),
(415,69,o),
(341,29,o),
(293,29,qs),
(239,29,o),
(164,66,o),
(116,131,o),
(95,217,o),
(95,265,qs),
(95,308,o),
(118,392,o),
(166,458,o),
(239,498,o),
(290,498,qs),
(341,498,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
40 20 2 6 5 11 10 2 2 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 0 22 77 7 1 5 5 4 97 0 4 4 29 77 0 6 6 3 97 0 3 3 30 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 1 2 1 101 0 0 0 22 77 7 1 5 5 4 97 0 4 4 29 77 0 6 6 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
42 41 52 50 41 60 42 60 40 41 37 37 16 8 7 27 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = g_alt;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,274,ls),
(482,226,o),
(461,138,o),
(414,71,o),
(338,30,o),
(282,29,qs),
(226,29,o),
(159,70,o),
(123,136,o),
(112,222,o),
(112,267,qs),
(112,527,l),
(70,527,l),
(70,241,ls),
(70,191,o),
(89,100,o),
(136,32,o),
(215,-8,o),
(274,-8,qs),
(301,-8,o),
(358,0,o),
(413,25,o),
(463,70,o),
(482,107,q),
(482,-11,ls),
(482,-60,o),
(462,-137,o),
(417,-191,o),
(345,-220,o),
(293,-220,qs),
(244,-220,o),
(152,-189,o),
(111,-160,q),
(92,-196,l),
(134,-228,o),
(241,-258,o),
(294,-258,qs),
(416,-258,o),
(524,-125,o),
(524,-6,qs),
(524,527,l),
(482,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
17 1 4 3 8 7 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 0 1 0 101 6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 41 0 41 37 21 41 37 35 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = y;
unicode = 121;
},
{
glyphname = t2.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,158,ls),
(124,120,o),
(138,59,o),
(171,16,o),
(224,-7,o),
(264,-7,qs),
(292,-7,o),
(338,3,o),
(358,16,q),
(343,49,l),
(329,39,o),
(288,29,o),
(270,29,qs),
(235,29,o),
(193,54,o),
(172,94,o),
(166,144,o),
(166,170,qs),
(166,492,l),
(347,492,l),
(347,527,l),
(166,527,l),
(166,685,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 2 1 13 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 20 77 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 21 37 37 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 379;
}
);
note = t2.alt;
},
{
glyphname = f_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,492,l),
(348,492,l),
(348,527,l),
(170,527,l),
(170,601,ls),
(170,626,o),
(177,675,o),
(199,713,o),
(240,738,o),
(274,739,qs),
(294,739,o),
(329,730,o),
(343,723,q),
(358,756,l),
(342,764,o),
(304,774,o),
(278,774,qs),
(234,774,o),
(176,747,o),
(142,700,o),
(128,635,o),
(128,597,qs),
(128,527,l),
(35,527,l),
(35,492,l),
(128,492,l),
(128,0,l),
(170,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
13 1 3 2 14 1 1 3 2 76 0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 22 77 7 1 6 6 21 6 78 0 0 0 27 0 27 17 21 37 37 17 17 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = f_alt;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,318,l),
(360,355,l),
(80,355,l),
(80,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = hyphen.uc;
},
{
glyphname = uni00AD.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,318,l),
(360,355,l),
(80,355,l),
(80,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = uni00AD.uc;
},
{
glyphname = endash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,318,l),
(488,355,l),
(80,355,l),
(80,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(681,318,l),
(681,355,l),
(80,355,l),
(80,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = emdash.uc;
},
{
glyphname = a_alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,220,o),
(170,233,qs),
(196,243,o),
(264,254,o),
(337,261,o),
(409,264,o),
(440,265,q),
(440,215,ls),
(440,168,o),
(405,97,o),
(347,51,o),
(271,28,o),
(230,28,qs),
(207,28,o),
(159,39,o),
(120,64,o),
(95,105,o),
(95,135,qs),
(95,169,o)
);
},
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,338,o),
(461,427,o),
(413,495,o),
(335,534,o),
(278,534,qs),
(248,534,o),
(188,523,o),
(135,499,o),
(95,460,o),
(84,432,q),
(131,432,l),
(154,472,o),
(234,498,o),
(276,498,qs),
(321,498,o),
(383,468,o),
(421,416,o),
(438,344,o),
(438,301,q),
(376,299,o),
(280,293,o),
(246,288,qs),
(214,283,o),
(145,265,o),
(89,230,o),
(53,175,o),
(53,134,qs),
(53,96,o),
(81,43,o),
(128,9,o),
(191,-7,o),
(226,-7,qs),
(251,-7,o),
(309,1,o),
(365,22,o),
(417,58,o),
(438,87,q),
(438,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
19 1 0 1 1 76 0 5 4 3 4 5 3 128 0 3 0 1 0 3 1 105 0 4 4 6 97 0 6 6 29 77 0 7 7 21 77 0 0 0 2 97 0 2 2 30 2 78 21 36 18 36 42 42 37 36 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = a_alt;
},
{
glyphname = uni0490;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,669,l),
(528,669,l),
(528,861,l),
(485,861,l),
(485,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni0490;
unicode = 1168;
},
{
glyphname = uni0491;
kernLeft = uni0433;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,492,l),
(420,492,l),
(420,672,l),
(380,672,l),
(380,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 22 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 449;
}
);
note = uni0491;
unicode = 1169;
},
{
glyphname = uni0406;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 20 77 0 0 0 21 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = uni0406;
unicode = 1030;
},
{
glyphname = uni0456;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,706,o),
(65,687,qs),
(65,669,o),
(88,648,o),
(105,648,qs),
(123,648,o),
(145,669,o),
(145,687,qs),
(145,704,o),
(123,726,o),
(105,726,qs),
(88,726,o)
);
},
{
closed = 1;
nodes = (
(125,0,l),
(125,527,l),
(83,527,l),
(83,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 1 0 97 4 1 0 0 27 77 0 2 2 22 77 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 0 0 1 2 0 1 105 0 2 2 22 77 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 15 14 13 12 7 5 0 11 1 11 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = uni0456;
unicode = 1110;
},
{
glyphname = uni0404;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(570,660,o),
(502,697,o),
(421,715,o),
(379,715,qs),
(298,715,o),
(177,660,o),
(95,563,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(93,143,o),
(173,47,o),
(295,-8,o),
(378,-8,qs),
(421,-8,o),
(504,10,o),
(577,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(479,42,o),
(412,28,o),
(379,28,qs),
(309,28,o),
(205,77,o),
(135,160,o),
(99,272,o),
(96,335,q),
(473,335,l),
(473,373,l),
(96,373,l),
(98,436,o),
(135,547,o),
(206,630,o),
(312,679,o),
(383,679,qs),
(452,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 7 0 1 0 7 1 128 0 4 2 3 2 4 3 128 0 1 0 2 4 1 2 103 8 1 0 0 6 97 0 6 6 27 77 0 3 3 5 97 0 5 5 28 5 78 1 0 40 39 35 33 25 23 19 18 14 12 8 7 6 5 0 42 1 42 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = uni0404;
unicode = 1028;
},
{
glyphname = uni0454;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,54,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(252,29,o),
(176,63,o),
(125,121,o),
(97,199,o),
(95,244,q),
(368,244,l),
(368,279,l),
(95,279,l),
(97,325,o),
(124,405,o),
(175,464,o),
(250,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,204,o),
(84,105,o),
(146,33,o),
(238,-7,o),
(300,-7,qs),
(367,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 2 3 4 3 2 4 128 0 7 5 6 5 7 6 128 0 4 0 5 7 4 5 103 0 3 3 1 97 0 1 1 29 77 0 6 6 0 97 8 1 0 0 30 0 78 1 0 34 33 31 29 25 24 23 22 18 16 14 13 11 9 0 36 1 36 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = uni0454;
unicode = 1108;
},
{
glyphname = uni0407;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,707,l),
(95,0,l),
(137,0,l),
(137,707,l)
);
},
{
closed = 1;
nodes = (
(10,827,o),
(10,812,qs),
(10,797,o),
(29,776,o),
(46,776,qs),
(63,776,o),
(82,797,o),
(82,812,qs),
(82,826,o),
(62,847,o),
(46,847,qs),
(29,847,o)
);
},
{
closed = 1;
nodes = (
(149,828,o),
(149,812,qs),
(149,797,o),
(169,776,o),
(186,776,qs),
(202,776,o),
(222,797,o),
(222,812,qs),
(222,826,o),
(202,847,o),
(186,847,qs),
(168,847,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 20 77 0 0 0 21 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = uni0407;
unicode = 1031;
},
{
glyphname = uni0457;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,0,l),
(129,527,l),
(87,527,l),
(87,0,l)
);
},
{
closed = 1;
nodes = (
(5,693,o),
(5,676,qs),
(5,659,o),
(26,638,o),
(43,638,qs),
(60,638,o),
(81,661,o),
(81,676,qs),
(81,693,o),
(59,713,o),
(43,713,qs),
(26,713,o)
);
},
{
closed = 1;
nodes = (
(136,694,o),
(136,676,qs),
(136,661,o),
(157,638,o),
(174,638,qs),
(191,638,o),
(211,659,o),
(211,676,qs),
(211,693,o),
(190,713,o),
(174,713,qs),
(158,713,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 27 77 0 0 0 22 77 0 1 1 21 1 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
note = uni0457;
unicode = 1111;
},
{
glyphname = logo;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(801,512,qs),
(801,520,o),
(795,526,qs),
(783,539,ls),
(777,545,o),
(769,545,qs),
(743,545,l),
(742,546,o),
(741,546,o),
(740,547,qs),
(709,572,ls),
(704,576,o),
(697,576,qs),
(658,576,l),
(653,589,o),
(640,589,qs),
(632,589,o),
(626,583,qs),
(619,576,l),
(564,576,ls),
(557,576,o),
(550,571,q),
(546,566,l),
(546,586,l),
(572,613,l),
(708,613,l),
(727,593,l),
(734,588,o),
(741,588,qs),
(753,588,ls),
(760,588,o),
(767,593,q),
(780,606,ls),
(786,612,o),
(786,620,qs),
(786,627,o),
(781,632,q),
(786,639,o),
(786,645,qs),
(786,653,o),
(780,659,qs),
(767,671,ls),
(761,677,o),
(753,677,qs),
(741,677,ls),
(733,677,o),
(727,671,qs),
(708,652,l),
(672,652,l),
(672,680,l),
(684,680,o),
(697,710,o),
(697,721,qs),
(697,758,ls),
(697,766,o),
(686,778,o),
(678,778,qs),
(627,778,ls),
(619,778,o),
(608,766,o),
(608,758,qs),
(608,721,ls),
(608,710,o),
(621,680,o),
(633,680,q),
(633,652,l),
(608,652,l),
(608,654,o),
(609,656,o),
(609,657,qs),
(609,665,o),
(598,677,o),
(590,677,qs),
(580,677,o),
(576,671,q),
(539,635,l),
(534,639,o),
(526,639,qs),
(518,639,o),
(507,628,o),
(507,620,qs),
(507,464,l),
(445,402,l),
(445,473,l),
(477,505,ls),
(483,511,o),
(483,519,qs),
(483,526,o),
(474,538,o),
(463,538,qs),
(455,538,o),
(450,533,qs),
(445,528,l),
(445,612,l),
(540,707,l),
(546,711,o),
(546,721,qs),
(546,739,l),
(552,739,ls),
(560,739,o),
(571,750,o),
(571,758,qs),
(571,766,o),
(560,778,o),
(552,778,qs),
(546,778,l),
(546,784,ls),
(546,792,o),
(534,803,o),
(526,803,qs),
(518,803,o),
(507,792,o),
(507,784,qs),
(507,778,l),
(501,778,ls),
(493,778,o),
(482,766,o),
(482,758,qs),
(482,750,o),
(493,739,o),
(501,739,qs),
(507,739,l),
(507,729,l),
(445,667,l),
(445,787,l),
(447,789,o),
(447,790,q),
(502,845,ls),
(508,851,o),
(508,859,qs),
(508,867,o),
(502,873,qs),
(490,886,l),
(487,888,o),
(483,890,q),
(483,910,ls),
(483,918,o),
(477,924,qs),
(465,936,ls),
(459,942,o),
(451,942,qs),
(444,942,o),
(440,939,q),
(434,945,o),
(426,945,qs),
(417,945,o),
(411,939,q),
(406,942,o),
(400,942,qs),
(391,942,o),
(387,936,q),
(374,924,ls),
(368,918,o),
(368,910,qs),
(368,890,l),
(366,889,o),
(363,888,o),
(361,886,qs),
(349,873,ls),
(343,867,o),
(343,859,qs),
(343,851,o),
(349,845,qs),
(404,790,l),
(404,789,o),
(406,787,q),
(406,667,l),
(344,729,l),
(344,739,l),
(350,739,ls),
(358,739,o),
(369,750,o),
(369,758,qs),
(369,766,o),
(358,778,o),
(350,778,qs),
(344,778,l),
(344,784,ls),
(344,792,o),
(333,803,o),
(325,803,qs),
(317,803,o),
(305,792,o),
(305,784,qs),
(305,778,l),
(299,778,ls),
(291,778,o),
(280,766,o),
(280,758,qs),
(280,750,o),
(291,739,o),
(299,739,qs),
(305,739,l),
(305,721,ls),
(305,711,o),
(311,707,q),
(406,612,l),
(406,528,l),
(402,533,l),
(395,538,o),
(388,538,qs),
(380,538,o),
(368,527,o),
(368,519,qs),
(368,511,o),
(374,505,qs),
(406,473,l),
(406,402,l),
(344,464,l),
(344,620,ls),
(344,628,o),
(333,639,o),
(325,639,qs),
(317,639,o),
(312,635,q),
(276,671,ls),
(270,677,o),
(262,677,qs),
(253,677,o),
(242,665,o),
(242,657,qs),
(242,654,o),
(243,652,q),
(218,652,l),
(218,680,l),
(230,680,o),
(243,710,o),
(243,721,qs),
(243,758,ls),
(243,766,o),
(232,778,o),
(224,778,qs),
(173,778,ls),
(165,778,o),
(154,766,o),
(154,758,qs),
(154,721,ls),
(154,710,o),
(167,680,o),
(179,680,q),
(179,652,l),
(144,652,l),
(124,671,ls),
(118,677,o),
(110,677,qs),
(98,677,ls),
(90,677,o),
(84,671,qs),
(71,659,l),
(66,652,o),
(66,645,qs),
(66,637,o),
(70,632,q),
(66,628,o),
(66,620,qs),
(66,613,o),
(71,606,q),
(84,593,l),
(91,588,o),
(98,588,qs),
(110,588,ls),
(117,588,o),
(124,593,q),
(144,613,l),
(279,613,l),
(305,586,l),
(305,566,l),
(301,571,l),
(294,576,o),
(287,576,qs),
(232,576,l),
(225,583,ls),
(219,589,o),
(211,589,qs),
(198,589,o),
(193,576,q),
(154,576,ls),
(147,576,o),
(142,572,qs),
(111,547,ls),
(109,545,o),
(109,545,q),
(82,545,ls),
(74,545,o),
(68,539,qs),
(56,526,ls),
(49,519,o),
(49,512,qs),
(49,504,o),
(59,495,o),
(66,493,q),
(66,485,o),
(77,474,o),
(85,474,q),
(87,459,o),
(104,459,qs),
(111,459,o),
(118,464,q),
(130,477,ls),
(136,483,o),
(136,491,qs),
(136,517,l),
(161,537,l),
(279,537,l),
(305,511,l),
(305,475,l),
(199,475,l),
(198,475,l),
(161,475,ls),
(154,475,o),
(147,470,q),
(122,444,ls),
(115,437,o),
(115,430,qs),
(115,422,o),
(128,411,o),
(136,411,qs),
(173,411,ls),
(182,411,o),
(187,417,q),
(207,436,l),
(317,436,l),
(410,342,l),
(412,342,o),
(420,335,o),
(426,335,qs),
(431,335,o),
(439,342,o),
(441,342,q),
(535,436,l),
(644,436,l),
(664,417,ls),
(670,411,o),
(678,411,qs),
(716,411,ls),
(724,411,o),
(735,422,o),
(735,430,qs),
(735,438,o),
(729,444,qs),
(704,470,ls),
(699,475,o),
(690,475,qs),
(546,475,l),
(546,511,l),
(572,537,l),
(690,537,l),
(715,517,l),
(715,491,ls),
(715,483,o),
(721,477,qs),
(733,464,l),
(740,459,o),
(747,459,qs),
(763,459,o),
(766,474,q),
(774,474,o),
(786,485,o),
(786,493,q),
(796,496,o),
(800,505,qs),
(801,507,o)
);
},
{
closed = 1;
nodes = (
(277,235,o),
(281,235,qs),
(283,235,o),
(284,234,qs),
(402,116,l),
(413,107,o),
(424,107,qs),
(425,107,ls),
(436,107,o),
(447,116,q),
(565,234,ls),
(566,235,o),
(567,235,qs),
(571,235,o),
(571,232,qs),
(571,13,ls),
(571,0,o),
(584,0,qs),
(645,0,ls),
(657,0,o),
(657,13,qs),
(657,362,ls),
(657,375,o),
(645,375,qs),
(584,375,ls),
(572,375,o),
(563,366,qs),
(431,234,ls),
(429,232,o),
(424,232,qs),
(420,232,o),
(418,234,qs),
(286,366,ls),
(277,375,o),
(265,375,qs),
(204,375,ls),
(192,375,o),
(192,362,qs),
(192,13,ls),
(192,0,o),
(204,0,qs),
(265,0,ls),
(277,0,o),
(277,13,qs),
(277,232,ls)
);
},
{
closed = 1;
nodes = (
(786,351,o),
(734,299,o),
(705,228,o),
(705,188,qs),
(705,143,o),
(735,71,o),
(788,21,o),
(861,-6,o),
(904,-6,qs),
(947,-6,o),
(1020,23,o),
(1073,74,o),
(1103,145,o),
(1103,188,qs),
(1103,233,o),
(1073,304,o),
(1020,354,o),
(947,381,o),
(904,381,qs),
(859,381,o)
);
},
{
closed = 1;
nodes = (
(842,91,o),
(813,122,o),
(796,164,o),
(796,188,qs),
(796,239,o),
(857,301,o),
(904,301,qs),
(949,301,o),
(1012,239,o),
(1012,188,qs),
(1012,141,o),
(957,74,o),
(904,74,qs),
(881,74,o)
);
},
{
closed = 1;
nodes = (
(1147,0,o),
(1156,0,qs),
(1376,0,ls),
(1385,0,o),
(1385,9,qs),
(1385,72,ls),
(1385,81,o),
(1376,81,qs),
(1237,81,ls),
(1232,81,o),
(1232,85,qs),
(1232,366,ls),
(1232,375,o),
(1223,375,qs),
(1156,375,ls),
(1147,375,o),
(1147,366,qs),
(1147,9,ls)
);
},
{
closed = 1;
nodes = (
(1433,0,o),
(1442,0,qs),
(1469,0,o),
(1532,-1,o),
(1547,-1,qs),
(1600,-1,o),
(1680,29,o),
(1734,82,o),
(1761,152,o),
(1761,191,qs),
(1761,228,o),
(1738,295,o),
(1687,346,o),
(1607,376,o),
(1551,376,qs),
(1542,376,o),
(1512,376,o),
(1479,375,o),
(1450,375,o),
(1442,375,qs),
(1433,375,o),
(1433,366,qs),
(1433,9,ls)
);
},
{
closed = 1;
nodes = (
(1544,296,o),
(1550,296,qs),
(1602,296,o),
(1670,243,o),
(1670,191,qs),
(1670,137,o),
(1605,80,o),
(1549,80,qs),
(1541,80,o),
(1518,79,o),
(1518,85,qs),
(1518,290,ls),
(1518,295,o),
(1523,295,qs),
(1530,296,o)
);
},
{
closed = 1;
nodes = (
(1885,351,o),
(1833,299,o),
(1804,228,o),
(1804,188,qs),
(1804,143,o),
(1834,71,o),
(1887,21,o),
(1960,-6,o),
(2003,-6,qs),
(2046,-6,o),
(2119,23,o),
(2172,74,o),
(2202,145,o),
(2202,188,qs),
(2202,233,o),
(2172,304,o),
(2119,354,o),
(2046,381,o),
(2003,381,qs),
(1958,381,o)
);
},
{
closed = 1;
nodes = (
(1941,91,o),
(1912,122,o),
(1895,164,o),
(1895,188,qs),
(1895,239,o),
(1956,301,o),
(2003,301,qs),
(2048,301,o),
(2111,239,o),
(2111,188,qs),
(2111,141,o),
(2056,74,o),
(2003,74,qs),
(1980,74,o)
);
},
{
closed = 1;
nodes = (
(2562,367,o),
(2563,368,o),
(2563,369,qs),
(2563,375,o),
(2557,375,qs),
(2487,375,ls),
(2478,375,o),
(2474,366,qs),
(2387,132,l),
(2387,131,o),
(2386,130,q),
(2384,130,o),
(2384,132,q),
(2293,366,ls),
(2289,375,o),
(2281,375,qs),
(2205,375,ls),
(2199,375,o),
(2199,369,qs),
(2199,367,o),
(2200,366,q),
(2346,9,ls),
(2350,0,o),
(2358,0,qs),
(2407,0,ls),
(2416,0,o),
(2420,9,qs),
(2562,366,l)
);
},
{
closed = 1;
nodes = (
(2491,8,o),
(2491,6,qs),
(2491,0,o),
(2497,0,qs),
(2562,0,ls),
(2570,0,o),
(2574,9,qs),
(2598,75,ls),
(2600,79,o),
(2604,79,qs),
(2737,79,ls),
(2741,79,o),
(2743,75,qs),
(2768,9,l),
(2770,0,o),
(2779,0,qs),
(2849,0,ls),
(2855,0,o),
(2855,6,qs),
(2855,7,o),
(2854,8,o),
(2854,9,q),
(2713,367,l),
(2709,375,o),
(2701,375,qs),
(2645,375,ls),
(2637,375,o),
(2633,367,q),
(2492,9,l)
);
},
{
closed = 1;
nodes = (
(2669,261,o),
(2671,262,q),
(2672,261,l),
(2709,163,l),
(2709,162,ls),
(2709,159,o),
(2706,159,qs),
(2635,159,ls),
(2632,159,o),
(2632,162,qs),
(2632,163,l),
(2669,261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 67 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 210 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 53 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 0 62 62 52 98 78 76 72 69 65 63 58 55 8 52 52 21 77 83 70 66 81 4 59 59 52 97 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 206 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 53 60 57 89 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 30 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 204 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 53 60 57 89 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 30 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 205 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 30 58 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 206 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 57 128 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 30 58 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 170 values pushed */
518 517 498 497 428 427 408 407 592 588 583 581 577 576 572 569 562 560 553 551 542 540 534 532 524 522 517 530 518 530 508 506 497 516 498 516 496 493 489 487 480 475 467 460 457 454 451 449 445 442 434 432 427 440 428 440 418 416 407 426 408 426 400 397 389 386 383 380 372 369 366 363 355 351 348 347 346 344 342 340 336 335 332 330 317 315 313 312 311 310 304 302 297 296 288 287 284 282 272 270 263 261 257 255 252 250 247 245 241 239 216 215 212 211 192 190 186 184 181 179 176 174 170 168 161 159 149 147 143 142 138 137 136 135 129 127 122 121 120 119 116 114 101 99 97 96 91 90 87 86 85 83 79 77 66 64 58 57 71 34 19 35 19 38 34 23 22 84 7 31 
CALL[ ]	/* CallFunction */";
};
width = 2944;
}
);
note = logo;
},
{
glyphname = map;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,664,qs),
(49,662,ls),
(49,657,o),
(54,657,qs),
(96,657,ls),
(98,657,o),
(100,655,qs),
(123,632,ls),
(124,631,o),
(124,628,qs),
(124,602,ls),
(124,600,o),
(126,598,qs),
(147,577,ls),
(149,575,o),
(149,573,qs),
(149,544,ls),
(149,541,o),
(150,540,qs),
(181,510,ls),
(182,509,o),
(182,506,qs),
(182,480,ls),
(182,479,o),
(184,477,qs),
(230,431,ls),
(231,430,o),
(231,427,qs),
(231,406,ls),
(231,404,o),
(233,402,qs),
(279,355,l),
(281,355,o),
(281,352,qs),
(281,329,ls),
(281,326,o),
(282,325,qs),
(295,313,ls),
(296,312,o),
(296,309,qs),
(296,190,ls),
(296,187,o),
(295,186,qs),
(281,173,ls),
(280,172,o),
(280,169,qs),
(280,84,ls),
(280,81,o),
(281,80,qs),
(293,68,l),
(299,64,o),
(293,60,q),
(281,48,ls),
(277,44,o),
(281,41,qs),
(290,32,ls),
(292,30,o),
(292,28,qs),
(292,5,ls),
(292,0,o),
(297,0,qs),
(300,0,ls),
(302,0,o),
(303,1,o),
(304,1,q),
(318,16,ls),
(319,17,o),
(322,17,qs),
(342,17,ls),
(347,17,o),
(347,23,qs),
(347,61,ls),
(347,63,o),
(349,65,qs),
(359,75,ls),
(360,76,o),
(362,76,qs),
(371,76,ls),
(372,76,o),
(374,78,qs),
(386,90,ls),
(388,92,o),
(388,94,qs),
(388,106,ls),
(388,108,o),
(389,109,qs),
(411,131,ls),
(413,133,o),
(413,135,qs),
(413,160,ls),
(413,163,o),
(414,164,qs),
(434,184,ls),
(437,187,o),
(434,191,qs),
(424,201,ls),
(423,202,o),
(423,205,qs),
(423,232,ls),
(423,234,o),
(424,235,qs),
(446,257,ls),
(448,259,o),
(455,257,o),
(455,253,qs),
(455,219,ls),
(455,213,o),
(460,213,qs),
(469,213,ls),
(470,213,o),
(472,215,qs),
(499,242,l),
(504,245,o),
(507,242,qs),
(522,227,ls),
(525,224,o),
(530,227,q),
(541,238,ls),
(544,241,o),
(548,238,qs),
(557,229,ls),
(558,228,o),
(560,228,qs),
(574,228,l),
(593,228,ls),
(598,228,o),
(598,233,qs),
(598,236,o),
(597,237,qs),
(576,257,ls),
(572,261,o),
(576,265,qs),
(582,270,ls),
(584,272,o),
(584,274,qs),
(584,311,ls),
(584,313,o),
(582,315,qs),
(566,332,ls),
(565,333,o),
(562,333,qs),
(550,333,ls),
(548,333,o),
(546,335,qs),
(524,357,ls),
(522,359,o),
(522,361,qs),
(522,398,l),
(522,432,ls),
(522,437,o),
(517,437,qs),
(505,437,ls),
(503,437,o),
(502,438,qs),
(443,497,ls),
(439,501,o),
(443,505,qs),
(449,511,ls),
(451,513,o),
(451,515,qs),
(451,594,ls),
(451,599,o),
(445,599,qs),
(439,599,ls),
(436,599,o),
(435,598,qs),
(425,588,ls),
(421,584,o),
(418,588,q),
(398,608,ls),
(396,610,o),
(396,612,qs),
(396,638,ls),
(396,643,o),
(391,643,qs),
(359,643,ls),
(356,643,o),
(355,642,qs),
(339,625,ls),
(338,624,o),
(335,624,qs),
(329,624,ls),
(323,624,o),
(323,629,qs),
(323,654,ls),
(323,659,o),
(318,659,qs),
(285,659,ls),
(283,659,o),
(282,660,qs),
(236,706,ls),
(234,708,o),
(232,708,qs),
(136,708,ls),
(134,708,o),
(132,706,qs),
(113,687,ls),
(112,686,o),
(109,686,qs),
(70,686,ls),
(68,686,o),
(66,684,qs),
(50,668,ls),
(49,667,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
201 1 2 0 18 1 4 8 193 30 19 3 3 4 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 6 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 3 5 8 3 5 126 0 5 6 8 5 6 126 0 6 7 8 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 3 5 8 3 5 126 0 5 6 8 5 6 126 0 6 7 8 6 7 126 0 0 0 8 4 0 8 103 0 1 1 20 77 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 3 5 8 3 5 126 0 5 6 8 5 6 126 0 6 7 8 6 7 126 0 7 7 132 0 0 0 8 4 0 8 103 0 1 1 20 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
199 196 135 134 80 77 52 49 50 37 51 51 49 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 687;
}
);
note = map;
},
{
glyphname = t0163.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,158,ls),
(124,98,o),
(159,18,o),
(204,2,q),
(168,-108,l),
(179,-104,o),
(213,-100,o),
(224,-100,qs),
(251,-100,o),
(284,-122,o),
(284,-151,qs),
(284,-177,o),
(258,-206,o),
(221,-221,o),
(181,-223,o),
(166,-222,q),
(166,-248,l),
(191,-251,o),
(244,-244,o),
(287,-222,o),
(314,-183,o),
(314,-153,qs),
(314,-114,o),
(270,-77,o),
(240,-76,qs),
(229,-76,o),
(216,-77,o),
(205,-79,q),
(230,-4,l),
(245,-7,o),
(264,-7,qs),
(292,-7,o),
(338,3,o),
(358,16,q),
(343,49,l),
(329,39,o),
(287,29,o),
(269,29,qs),
(233,29,o),
(192,54,o),
(171,94,o),
(166,144,o),
(166,170,qs),
(166,492,l),
(347,492,l),
(347,527,l),
(166,527,l),
(166,685,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
12 1 2 1 43 13 2 3 2 19 1 6 4 42 1 5 6 4 76 30 1 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 5 6 5 134 0 4 0 6 5 4 6 105 0 9 9 20 77 7 1 1 1 0 95 8 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 9 0 9 133 0 5 6 5 134 0 4 0 6 5 4 6 105 7 1 1 1 0 95 8 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
52 51 17 23 37 40 36 37 37 17 16 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 379;
}
);
note = t0163.alt;
},
{
glyphname = t021b.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,-142,o),
(179,-159,qs),
(179,-173,o),
(190,-190,o),
(206,-198,o),
(224,-200,o),
(230,-198,q),
(226,-228,o),
(192,-270,o),
(175,-280,q),
(190,-300,l),
(224,-281,o),
(265,-215,o),
(265,-174,qs),
(265,-154,o),
(246,-119,o),
(221,-119,qs),
(202,-119,o)
);
},
{
closed = 1;
nodes = (
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,158,ls),
(124,120,o),
(138,59,o),
(171,16,o),
(224,-7,o),
(264,-7,qs),
(292,-7,o),
(338,3,o),
(358,16,q),
(342,49,l),
(328,39,o),
(287,29,o),
(269,29,qs),
(234,29,o),
(193,54,o),
(172,94,o),
(166,144,o),
(166,170,qs),
(166,492,l),
(347,492,l),
(347,527,l),
(166,527,l),
(166,685,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
30 1 4 3 31 1 5 4 2 76 7 6 2 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 8 20 77 6 1 3 3 2 95 7 1 2 2 22 77 0 4 4 5 97 0 5 5 30 77 9 1 0 0 1 97 0 1 1 24 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
9 1 0 0 1 0 1 101 0 8 8 20 77 6 1 3 3 2 95 7 1 2 2 22 77 0 4 4 5 97 0 5 5 30 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 8 2 8 133 9 1 0 0 1 0 1 101 6 1 3 3 2 95 7 1 2 2 22 77 0 4 4 5 97 0 5 5 30 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 45 44 43 42 41 40 35 33 28 26 21 20 19 18 12 10 0 17 1 17 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 379;
}
);
note = t021b.alt;
},
{
glyphname = uni202F;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni202F;
unicode = 8239;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 270;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = a00E2.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,647,l),
(301,773,l),
(268,773,l),
(161,647,l),
(201,647,l),
(284,748,l),
(368,647,l)
);
},
{
closed = 1;
nodes = (
(136,220,o),
(170,233,qs),
(196,243,o),
(264,254,o),
(337,261,o),
(409,264,o),
(440,265,q),
(440,215,ls),
(440,168,o),
(405,97,o),
(347,51,o),
(271,28,o),
(230,28,qs),
(207,28,o),
(159,39,o),
(120,64,o),
(95,105,o),
(95,135,qs),
(95,169,o)
);
},
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,338,o),
(461,427,o),
(413,495,o),
(335,534,o),
(278,534,qs),
(248,534,o),
(188,523,o),
(135,499,o),
(95,460,o),
(84,432,q),
(131,432,l),
(154,472,o),
(234,498,o),
(276,498,qs),
(321,498,o),
(383,468,o),
(421,415,o),
(438,343,o),
(438,301,q),
(376,299,o),
(280,293,o),
(246,288,qs),
(214,283,o),
(145,265,o),
(89,230,o),
(53,175,o),
(53,134,qs),
(53,96,o),
(81,43,o),
(128,9,o),
(191,-7,o),
(226,-7,qs),
(251,-7,o),
(309,1,o),
(365,22,o),
(417,58,o),
(438,87,q),
(438,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
26 1 3 4 1 76 0 1 0 1 133 2 1 0 9 0 133 0 8 7 6 7 8 6 128 0 6 0 4 3 6 4 105 0 7 7 9 97 0 9 9 29 77 0 10 10 21 77 0 3 3 5 97 0 5 5 30 5 78 65 64 59 57 18 36 42 42 37 37 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = a00E2.alt;
},
{
glyphname = a00E4.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,691,o),
(359,675,qs),
(359,659,o),
(381,636,o),
(399,636,qs),
(418,636,o),
(439,658,o),
(439,675,qs),
(439,692,o),
(418,714,o),
(399,714,qs),
(381,714,o)
);
},
{
closed = 1;
nodes = (
(139,691,o),
(139,675,qs),
(139,659,o),
(161,636,o),
(179,636,qs),
(198,636,o),
(219,658,o),
(219,675,qs),
(219,692,o),
(198,714,o),
(179,714,qs),
(161,714,o)
);
},
{
closed = 1;
nodes = (
(136,220,o),
(170,233,qs),
(196,243,o),
(264,254,o),
(337,261,o),
(409,264,o),
(440,265,q),
(440,215,ls),
(440,168,o),
(405,97,o),
(347,51,o),
(271,28,o),
(230,28,qs),
(207,28,o),
(159,39,o),
(120,64,o),
(95,105,o),
(95,135,qs),
(95,169,o)
);
},
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,338,o),
(461,427,o),
(413,495,o),
(335,534,o),
(278,534,qs),
(248,534,o),
(188,523,o),
(135,499,o),
(95,460,o),
(84,432,q),
(131,432,l),
(154,472,o),
(234,498,o),
(276,498,qs),
(321,498,o),
(383,468,o),
(421,415,o),
(438,343,o),
(438,301,q),
(376,299,o),
(280,293,o),
(246,288,qs),
(214,283,o),
(145,265,o),
(89,230,o),
(53,175,o),
(53,134,qs),
(53,96,o),
(81,43,o),
(128,9,o),
(191,-7,o),
(226,-7,qs),
(251,-7,o),
(309,1,o),
(365,22,o),
(417,58,o),
(438,87,q),
(438,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 97 values pushed */
43 1 4 5 1 76 0 9 8 7 8 9 7 128 0 7 0 5 4 7 5 105 3 1 1 1 0 97 13 2 12 3 0 0 27 77 0 8 8 10 97 0 10 10 29 77 0 11 11 21 77 0 4 4 6 97 0 6 6 30 6 78 13 12 1 0 82 81 76 74 70 69 67 65 61 59 49 47 37 35 30 28 19 17 12 23 13 23 7 5 0 11 1 11 14 7 22 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = a00E4.alt;
},
{
glyphname = a0103.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,669,o),
(193,685,o),
(168,715,o),
(162,738,q),
(124,738,l),
(129,709,o),
(159,668,o),
(201,643,o),
(254,632,o),
(282,632,qs),
(310,632,o),
(364,643,o),
(408,668,o),
(440,709,o),
(446,738,q),
(407,738,l),
(401,715,o),
(375,685,o),
(341,669,o),
(302,663,o),
(284,663,qs),
(266,663,o)
);
},
{
closed = 1;
nodes = (
(136,220,o),
(170,233,qs),
(196,243,o),
(264,254,o),
(337,261,o),
(409,264,o),
(440,265,q),
(440,215,ls),
(440,168,o),
(405,97,o),
(347,51,o),
(271,28,o),
(230,28,qs),
(207,28,o),
(159,39,o),
(120,64,o),
(95,105,o),
(95,135,qs),
(95,169,o)
);
},
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,338,o),
(461,427,o),
(413,495,o),
(335,534,o),
(278,534,qs),
(248,534,o),
(188,523,o),
(135,499,o),
(95,460,o),
(84,432,q),
(131,432,l),
(154,472,o),
(234,498,o),
(276,498,qs),
(321,498,o),
(383,468,o),
(421,415,o),
(438,343,o),
(438,301,q),
(376,299,o),
(280,293,o),
(246,288,qs),
(214,283,o),
(145,265,o),
(89,230,o),
(53,175,o),
(53,134,qs),
(53,96,o),
(81,43,o),
(128,9,o),
(191,-7,o),
(226,-7,qs),
(251,-7,o),
(309,1,o),
(365,22,o),
(417,58,o),
(438,87,q),
(438,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */
41 1 4 5 1 76 12 1 0 0 2 10 0 2 105 3 1 1 0 9 7 1 9 103 0 7 0 5 4 7 5 105 0 8 8 10 97 0 10 10 29 77 0 11 11 21 77 0 4 4 6 97 0 6 6 30 6 78 1 0 80 79 74 72 68 67 65 63 59 57 47 45 35 33 28 26 17 16 12 10 6 5 0 21 1 21 13 7 22 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = a0103.alt;
},
{
glyphname = a2_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,474,o),
(366,534,o),
(294,534,qs),
(237,534,o),
(147,490,o),
(85,416,o),
(53,318,o),
(53,264,qs),
(53,218,o),
(74,122,o),
(128,43,o),
(219,-7,o),
(289,-7,qs),
(363,-7,o),
(464,53,o),
(494,107,q),
(494,0,l),
(536,0,l),
(536,527,l),
(494,527,l),
(493,426,l)
);
},
{
closed = 1;
nodes = (
(422,461,o),
(471,398,o),
(496,313,o),
(496,265,qs),
(496,220,o),
(471,135,o),
(420,69,o),
(345,29,o),
(295,29,qs),
(241,29,o),
(165,66,o),
(117,131,o),
(95,217,o),
(95,265,qs),
(95,310,o),
(119,394,o),
(168,459,o),
(243,498,o),
(295,498,qs),
(346,498,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
20 4 2 5 4 1 76 0 0 0 22 77 6 1 4 4 3 97 0 3 3 29 77 0 1 1 21 77 0 5 5 2 97 0 2 2 30 2 78 22 21 32 30 21 40 22 40 40 35 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = a2_alt;
},
{
glyphname = logom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(796,529,qs),
(788,537,o),
(780,545,o),
(772,548,o),
(758,548,o),
(743,548,q),
(709,575,l),
(704,580,o),
(697,580,qs),
(658,580,l),
(653,592,o),
(640,592,qs),
(632,592,o),
(624,585,o),
(619,580,q),
(564,580,ls),
(557,580,o),
(550,574,o),
(545,569,q),
(545,590,l),
(572,616,l),
(708,616,l),
(727,597,ls),
(733,591,o),
(741,591,qs),
(749,591,o),
(763,592,o),
(768,597,qs),
(775,604,o),
(792,624,o),
(782,636,q),
(792,650,o),
(781,663,qs),
(774,670,o),
(762,681,o),
(754,681,qs),
(744,681,o),
(735,680,o),
(727,676,o),
(718,666,o),
(708,656,q),
(672,656,l),
(672,684,l),
(684,689,o),
(698,711,o),
(698,725,qs),
(698,763,ls),
(698,771,o),
(686,783,o),
(678,783,qs),
(627,783,ls),
(619,783,o),
(607,771,o),
(607,763,qs),
(607,725,ls),
(607,711,o),
(621,689,o),
(633,684,q),
(633,656,l),
(608,656,l),
(610,663,o),
(604,676,o),
(594,682,o),
(580,681,o),
(575,675,q),
(538,639,l),
(528,647,o),
(506,636,o),
(506,623,qs),
(506,467,l),
(444,404,l),
(444,476,l),
(476,508,ls),
(485,517,o),
(476,542,o),
(462,542,qs),
(455,542,o),
(448,536,o),
(444,531,q),
(444,615,l),
(540,711,ls),
(545,717,o),
(545,733,o),
(545,743,q),
(551,743,ls),
(561,743,o),
(570,755,o),
(570,770,o),
(561,783,o),
(551,783,qs),
(545,783,l),
(545,788,ls),
(545,798,o),
(533,807,o),
(518,807,o),
(506,798,o),
(506,788,qs),
(506,783,l),
(500,783,ls),
(490,783,o),
(480,770,o),
(480,755,o),
(490,743,o),
(500,743,qs),
(506,743,l),
(506,733,l),
(444,671,l),
(444,792,ls),
(444,793,o),
(460,810,o),
(480,830,o),
(498,848,o),
(501,851,qs),
(507,856,o),
(507,873,o),
(501,879,qs),
(497,883,o),
(487,894,o),
(482,896,q),
(482,906,o),
(482,923,o),
(476,929,qs),
(472,933,o),
(464,941,o),
(455,947,o),
(445,949,o),
(439,945,q),
(435,950,o),
(417,952,o),
(409,945,q),
(395,954,o),
(385,942,qs),
(377,934,o),
(369,926,o),
(366,919,o),
(366,908,o),
(366,896,q),
(361,894,o),
(351,883,o),
(347,879,qs),
(341,873,o),
(341,856,o),
(347,851,qs),
(350,848,o),
(368,830,o),
(388,810,o),
(404,793,o),
(404,792,qs),
(404,671,l),
(342,733,l),
(342,743,l),
(348,743,ls),
(358,743,o),
(367,755,o),
(367,770,o),
(358,783,o),
(348,783,qs),
(342,783,l),
(342,788,ls),
(342,798,o),
(330,807,o),
(315,807,o),
(303,798,o),
(303,788,qs),
(303,783,l),
(297,783,ls),
(287,783,o),
(277,770,o),
(277,755,o),
(287,743,o),
(297,743,qs),
(303,743,l),
(303,733,o),
(303,717,o),
(309,711,qs),
(404,615,l),
(404,531,l),
(400,536,ls),
(393,543,o),
(377,541,o),
(367,530,o),
(365,515,o),
(372,508,qs),
(404,476,l),
(404,404,l),
(342,467,l),
(342,623,ls),
(342,631,o),
(330,643,o),
(322,643,qs),
(317,643,o),
(313,641,qs),
(311,640,o),
(310,639,q),
(273,675,l),
(268,681,o),
(254,682,o),
(244,676,o),
(238,663,o),
(240,656,q),
(215,656,l),
(215,684,l),
(227,689,o),
(241,711,o),
(241,725,qs),
(241,763,ls),
(241,771,o),
(229,783,o),
(221,783,qs),
(170,783,ls),
(162,783,o),
(150,771,o),
(150,763,qs),
(150,725,ls),
(150,711,o),
(164,689,o),
(176,684,q),
(176,656,l),
(140,656,l),
(121,675,ls),
(115,681,o),
(107,681,qs),
(99,681,o),
(85,681,o),
(80,675,qs),
(77,672,o),
(67,663,o),
(61,654,o),
(61,642,o),
(66,636,q),
(56,622,o),
(67,609,qs),
(74,602,o),
(86,591,o),
(94,591,qs),
(104,591,o),
(113,591,o),
(121,596,o),
(130,606,o),
(140,616,q),
(276,616,l),
(303,590,l),
(303,569,l),
(298,574,o),
(291,580,o),
(284,580,qs),
(229,580,l),
(222,587,ls),
(214,594,o),
(194,590,o),
(190,580,q),
(151,580,ls),
(144,580,o),
(139,575,q),
(105,548,l),
(91,548,o),
(77,548,o),
(68,545,o),
(60,537,o),
(52,529,qs),
(44,521,o),
(50,498,o),
(62,496,q),
(62,488,o),
(73,477,o),
(81,477,q),
(83,465,o),
(106,459,o),
(114,467,qs),
(122,475,o),
(130,483,o),
(133,492,o),
(133,506,o),
(133,520,q),
(158,540,l),
(276,540,l),
(303,514,l),
(303,478,l),
(157,478,ls),
(149,478,o),
(143,472,qs),
(118,447,ls),
(109,437,o),
(119,413,o),
(132,413,qs),
(170,413,ls),
(178,413,o),
(184,419,qs),
(204,439,l),
(314,439,l),
(409,344,l),
(415,336,o),
(432,336,o),
(439,344,qs),
(534,439,l),
(644,439,l),
(656,427,o),
(666,416,o),
(677,412,o),
(696,413,o),
(716,413,qs),
(729,413,o),
(739,438,o),
(730,447,qs),
(705,472,ls),
(699,478,o),
(691,478,qs),
(545,478,l),
(545,514,l),
(572,540,l),
(690,540,l),
(715,520,l),
(715,506,o),
(715,492,o),
(718,483,o),
(726,475,o),
(734,467,qs),
(742,459,o),
(765,466,o),
(767,477,q),
(775,477,o),
(786,488,o),
(786,496,q),
(796,499,o),
(801,508,qs),
(806,520,o)
);
},
{
closed = 1;
nodes = (
(275,235,o),
(279,238,o),
(281,236,qs),
(401,116,ls),
(410,108,o),
(436,108,o),
(445,116,qs),
(564,236,ls),
(566,238,o),
(571,235,o),
(571,233,qs),
(571,13,ls),
(571,0,o),
(584,0,qs),
(645,0,ls),
(657,0,o),
(657,13,qs),
(657,364,ls),
(657,377,o),
(645,377,qs),
(584,377,ls),
(573,377,o),
(562,368,q),
(429,235,ls),
(423,229,o),
(416,235,qs),
(284,368,l),
(273,377,o),
(262,377,qs),
(201,377,ls),
(188,377,o),
(188,364,qs),
(188,13,ls),
(188,0,o),
(201,0,qs),
(262,0,ls),
(275,0,o),
(275,13,qs),
(275,233,ls)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 37 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 124 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 127 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 29 2 9 10 0 10 9 0 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 131 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 132 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 84 values pushed */
359 358 351 348 345 342 336 333 330 327 321 319 316 315 314 312 310 308 304 303 301 299 289 288 284 283 275 273 266 265 250 248 240 239 236 235 231 230 226 225 222 220 173 172 169 168 164 163 159 158 155 153 136 134 125 124 116 114 107 106 104 101 90 88 85 84 79 78 74 72 70 68 18 36 50 18 18 19 53 18 30 45 7 31 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = logom;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,468,l),
(75,468,l),
(75,430,l),
(226,430,l),
(226,265,l),
(269,265,l),
(269,430,l),
(423,430,l),
(423,468,l),
(269,468,l),
(269,630,l),
(226,630,l)
);
},
{
closed = 1;
nodes = (
(75,189,l),
(75,151,l),
(423,151,l),
(423,189,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
4 1 0 3 1 1 2 0 1 103 8 1 5 0 2 7 5 2 103 0 7 6 6 7 87 0 7 7 6 95 0 6 7 6 79 0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,655,l),
(75,612,l),
(398,434,l),
(75,257,l),
(75,214,l),
(454,423,l),
(454,445,l)
);
},
{
closed = 1;
nodes = (
(454,131,l),
(454,168,l),
(75,168,l),
(75,131,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,214,l),
(454,257,l),
(131,435,l),
(454,612,l),
(454,655,l),
(75,446,l),
(75,424,l)
);
},
{
closed = 1;
nodes = (
(454,131,l),
(454,168,l),
(75,168,l),
(75,131,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,458,l),
(190,240,l),
(75,240,l),
(75,203,l),
(172,203,l),
(75,0,l),
(118,0,l),
(215,203,l),
(454,203,l),
(454,240,l),
(233,240,l),
(337,458,l),
(454,458,l),
(454,495,l),
(354,495,l),
(454,703,l),
(411,703,l),
(312,495,l),
(75,495,l),
(75,458,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 0 1 133 0 6 5 6 134 2 1 0 9 1 3 4 0 3 104 8 1 4 5 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 19 18 17 17 17 17 17 17 17 17 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,462,o),
(285,503,o),
(231,536,o),
(195,536,qs),
(132,536,o),
(77,463,o),
(75,405,q),
(114,405,l),
(114,424,o),
(122,459,o),
(140,487,o),
(170,504,o),
(192,504,qs),
(221,504,o),
(269,471,o),
(317,430,o),
(373,397,o),
(409,397,qs),
(442,397,o),
(486,417,o),
(513,452,o),
(526,500,o),
(527,528,q),
(489,528,l),
(489,508,o),
(482,473,o),
(465,445,o),
(435,429,o),
(412,429,qs),
(382,429,o)
);
},
{
closed = 1;
nodes = (
(334,251,o),
(285,292,o),
(231,325,o),
(195,325,qs),
(132,325,o),
(77,252,o),
(75,193,q),
(114,193,l),
(114,212,o),
(122,248,o),
(140,275,o),
(170,292,o),
(192,292,qs),
(221,292,o),
(269,259,o),
(317,219,o),
(373,186,o),
(409,186,qs),
(442,186,o),
(486,206,o),
(513,240,o),
(526,288,o),
(527,317,q),
(489,317,l),
(489,297,o),
(482,262,o),
(465,234,o),
(435,218,o),
(412,218,qs),
(382,218,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 110 values pushed */
0 1 5 3 5 1 3 128 0 4 0 2 0 4 2 128 0 7 11 9 11 7 9 128 0 10 6 8 6 10 8 128 0 5 0 3 0 5 3 105 12 1 0 0 2 11 0 2 105 0 11 0 9 6 11 9 105 13 1 6 10 8 6 89 13 1 6 6 8 97 0 8 6 8 81 31 30 1 0 56 54 52 51 47 45 42 40 36 35 30 59 31 59 26 24 22 21 17 15 12 10 6 5 0 29 1 29 14 6 22 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(289,412,l),
(289,446,l),
(114,446,l),
(202,521,ls),
(218,534,o),
(248,562,o),
(271,594,o),
(285,631,o),
(285,654,qs),
(285,702,o),
(224,751,o),
(179,751,qs),
(142,751,o),
(77,715,o),
(69,677,q),
(110,677,l),
(117,699,o),
(157,716,o),
(178,716,qs),
(209,716,o),
(248,682,o),
(247,650,qs),
(246,630,o),
(227,595,o),
(200,564,o),
(168,537,o),
(155,525,qs),
(60,444,l),
(60,412,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
0 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 58 77 0 3 3 4 95 0 4 4 59 4 78 17 24 34 18 40 5 9 27 
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,565,ls),
(192,565,o),
(222,561,o),
(246,548,o),
(260,524,o),
(260,505,qs),
(260,469,o),
(213,442,o),
(182,442,qs),
(159,442,o),
(108,460,o),
(99,484,q),
(60,484,l),
(64,462,o),
(88,433,o),
(122,415,o),
(162,408,o),
(181,408,qs),
(205,408,o),
(247,419,o),
(280,443,o),
(299,480,o),
(299,506,qs),
(299,542,o),
(262,583,o),
(229,589,q),
(255,600,o),
(283,633,o),
(284,662,qs),
(285,686,o),
(269,719,o),
(241,741,o),
(203,751,o),
(182,751,qs),
(144,751,o),
(78,716,o),
(71,676,q),
(109,676,l),
(116,698,o),
(157,717,o),
(178,717,qs),
(208,717,o),
(248,691,o),
(247,658,qs),
(247,639,o),
(227,616,o),
(200,603,o),
(170,599,o),
(158,599,qs),
(145,599,l),
(145,565,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
24 1 7 0 1 76 0 2 1 0 1 2 0 128 0 5 7 6 7 5 6 128 0 0 0 7 5 0 7 105 0 1 1 3 97 0 3 3 58 77 0 6 6 4 97 0 4 4 63 4 78 38 34 20 46 34 18 38 32 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = I_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,707,l),
(45,669,l),
(271,669,l),
(271,38,l),
(45,38,l),
(45,0,l),
(540,0,l),
(540,38,l),
(313,38,l),
(313,669,l),
(540,669,l),
(540,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 0 0 5 95 0 5 5 20 77 3 1 1 1 2 95 0 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = I_alt;
},
{
glyphname = tab_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,38,l),
(355,707,l),
(322,707,l),
(318,683,o),
(296,648,o),
(277,640,qs),
(265,635,o),
(236,632,o),
(223,632,qs),
(212,632,o),
(164,632,o),
(147,632,q),
(147,600,l),
(312,600,l),
(312,38,l),
(116,38,l),
(116,0,l),
(544,0,l),
(544,38,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 3 0 2 1 3 2 103 0 4 4 20 77 5 1 1 1 0 95 0 0 0 21 0 78 17 21 65 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = tab_1;
},
{
glyphname = l_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,707,l),
(75,167,ls),
(75,79,o),
(114,39,qs),
(153,0,o),
(237,0,qs),
(270,0,l),
(270,36,l),
(245,36,ls),
(173,36,o),
(144,69,qs),
(117,102,o),
(117,171,qs),
(117,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 20 77 0 0 0 1 97 0 1 1 21 1 78 20 33 35 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 307;
}
);
note = l_alt;
},
{
glyphname = l2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,707,l),
(75,158,ls),
(75,122,o),
(87,61,o),
(117,17,o),
(169,-7,o),
(209,-7,qs),
(234,-7,o),
(280,2,o),
(301,16,q),
(285,50,l),
(271,39,o),
(230,29,o),
(213,29,qs),
(180,29,o),
(142,53,o),
(122,92,o),
(117,143,o),
(117,170,qs),
(117,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 1 0 2 9 1 1 0 2 76 0 2 2 20 77 0 0 0 1 97 0 1 1 30 1 78 21 37 36 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 321;
}
);
note = l2_alt;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,550,o),
(513,652,o),
(409,715,o),
(331,715,qs),
(253,715,o),
(150,652,o),
(89,550,o),
(63,420,o),
(63,353,qs),
(63,285,o),
(88,155,o),
(150,54,o),
(253,-8,o),
(331,-8,qs),
(409,-8,o),
(513,54,o),
(575,156,o),
(601,285,o),
(601,353,qs),
(601,420,o)
);
},
{
closed = 1;
nodes = (
(125,524,o),
(174,619,o),
(261,679,o),
(331,679,qs),
(401,679,o),
(489,619,o),
(538,524,o),
(556,408,o),
(556,353,qs),
(556,296,o),
(538,181,o),
(489,87,o),
(401,28,o),
(331,28,qs),
(261,28,o),
(174,87,o),
(125,181,o),
(107,296,o),
(107,353,qs),
(107,408,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 27 77 0 2 2 0 97 0 0 0 28 0 78 40 40 40 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,707,l),
(322,679,o),
(301,649,o),
(261,635,o),
(208,631,o),
(172,631,q),
(172,602,l),
(315,602,l),
(315,0,l),
(358,0,l),
(358,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 20 77 0 0 0 21 0 78 20 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,399,o),
(422,331,o),
(356,269,o),
(326,243,qs),
(95,35,l),
(95,0,l),
(563,0,l),
(563,38,l),
(159,38,l),
(376,234,ls),
(410,265,o),
(475,327,o),
(525,395,o),
(555,473,o),
(555,520,qs),
(555,568,o),
(523,641,o),
(466,690,o),
(387,715,o),
(337,715,qs),
(258,715,o),
(146,655,o),
(121,591,q),
(170,591,l),
(180,615,o),
(216,649,o),
(261,670,o),
(311,679,o),
(337,679,qs),
(374,679,o),
(438,658,o),
(484,618,o),
(511,558,o),
(511,518,qs),
(511,475,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
29 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 27 77 0 3 3 4 95 0 4 4 21 4 78 17 26 34 20 36 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,84,o),
(155,34,o),
(221,4,o),
(297,-8,o),
(335,-8,qs),
(383,-8,o),
(472,13,o),
(541,59,o),
(583,134,o),
(583,188,qs),
(583,223,o),
(561,285,o),
(518,334,o),
(454,365,o),
(411,368,q),
(448,377,o),
(502,414,o),
(535,462,o),
(550,518,o),
(550,545,qs),
(550,592,o),
(513,657,o),
(454,697,o),
(377,715,o),
(336,715,qs),
(305,715,o),
(235,706,o),
(173,679,o),
(125,629,o),
(116,588,q),
(162,588,l),
(171,615,o),
(207,650,o),
(254,671,o),
(308,679,o),
(335,679,qs),
(369,679,o),
(432,664,o),
(480,630,o),
(509,576,o),
(509,537,qs),
(509,494,o),
(469,434,o),
(407,396,o),
(333,379,o),
(299,379,qs),
(248,379,l),
(248,342,l),
(319,342,ls),
(359,342,o),
(437,331,o),
(499,298,o),
(538,237,o),
(538,188,qs),
(538,143,o),
(502,82,o),
(445,45,o),
(373,28,o),
(336,28,qs),
(309,28,o),
(250,36,o),
(196,57,o),
(153,93,o),
(142,121,q),
(96,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
0 4 3 2 3 4 2 128 0 6 2 1 2 6 1 128 9 1 8 1 0 1 8 0 128 0 2 0 1 8 2 1 103 0 3 3 5 97 0 5 5 27 77 0 0 0 7 97 0 7 7 28 7 78 0 0 0 64 0 64 40 25 36 20 40 33 40 36 10 7 30 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,151,l),
(460,151,l),
(460,0,l),
(502,0,l),
(502,151,l),
(593,151,l),
(593,189,l),
(502,189,l),
(502,707,l),
(438,707,l),
(66,190,l)
);
},
{
closed = 1;
nodes = (
(460,671,l),
(460,189,l),
(113,189,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
12 10 2 1 0 1 76 6 5 2 1 4 1 2 3 1 2 103 0 0 0 20 77 0 3 3 21 3 78 11 11 11 13 11 13 17 17 17 17 16 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE004;
unicode = 57348;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,332,o),
(217,364,o),
(263,386,o),
(315,400,o),
(343,400,qs),
(431,400,o),
(529,305,o),
(529,214,qs),
(529,167,o),
(498,97,o),
(443,51,o),
(368,28,o),
(325,28,qs),
(300,28,o),
(246,38,o),
(197,60,o),
(156,97,o),
(144,123,q),
(97,123,l),
(110,82,o),
(166,31,o),
(232,2,o),
(301,-8,o),
(328,-8,qs),
(378,-8,o),
(468,20,o),
(535,77,o),
(574,162,o),
(574,220,qs),
(574,269,o),
(541,349,o),
(481,406,o),
(399,437,o),
(350,437,qs),
(298,437,o),
(197,401,o),
(155,357,q),
(183,669,l),
(547,669,l),
(547,707,l),
(145,707,l),
(112,316,l),
(167,316,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 7 6 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 42 0 42 38 36 20 40 35 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE005;
unicode = 57349;
},
{
glyphname = uniE006;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,423,o),
(177,390,o),
(122,333,o),
(108,295,q),
(107,332,o),
(111,418,o),
(128,504,o),
(160,582,o),
(212,643,o),
(288,679,o),
(340,679,qs),
(385,679,o),
(470,639,o),
(495,599,q),
(541,599,l),
(512,656,o),
(407,715,o),
(342,715,qs),
(263,715,o),
(156,649,o),
(92,541,o),
(65,404,o),
(65,334,qs),
(65,271,o),
(91,148,o),
(152,52,o),
(252,-8,o),
(327,-8,qs),
(375,-8,o),
(460,21,o),
(523,78,o),
(559,163,o),
(559,219,qs),
(559,267,o),
(524,347,o),
(463,404,o),
(381,436,o),
(334,436,qs),
(302,436,o)
);
},
{
closed = 1;
nodes = (
(490,105,o),
(441,56,o),
(370,28,o),
(326,28,qs),
(288,28,o),
(218,55,o),
(164,103,o),
(133,171,o),
(133,212,qs),
(133,257,o),
(167,326,o),
(223,374,o),
(293,398,o),
(330,398,qs),
(372,398,o),
(440,371,o),
(490,321,o),
(517,252,o),
(517,210,qs),
(517,172,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
34 1 6 5 1 76 0 3 4 0 4 3 0 128 7 1 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 27 77 0 6 6 1 97 0 1 1 28 1 78 1 0 55 53 45 43 28 26 24 23 21 19 11 9 0 38 1 38 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE006;
unicode = 57350;
},
{
glyphname = uniE007;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,665,l),
(570,707,l),
(118,707,l),
(118,669,l),
(524,669,l),
(221,0,l),
(269,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 2 0 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE007;
unicode = 57351;
},
{
glyphname = uniE008;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(555,278,o),
(515,327,o),
(455,361,o),
(415,366,q),
(483,384,o),
(549,473,o),
(548,535,qs),
(547,581,o),
(511,648,o),
(451,693,o),
(374,715,o),
(333,715,qs),
(291,715,o),
(213,694,o),
(153,650,o),
(117,582,o),
(117,535,qs),
(116,473,o),
(181,380,o),
(244,364,q),
(207,360,o),
(150,327,o),
(110,278,o),
(89,218,o),
(89,187,qs),
(89,133,o),
(129,59,o),
(196,13,o),
(283,-8,o),
(331,-8,qs),
(379,-8,o),
(467,13,o),
(534,60,o),
(575,134,o),
(575,187,qs),
(575,218,o)
);
},
{
closed = 1;
nodes = (
(430,662,o),
(479,626,o),
(509,568,o),
(509,527,qs),
(509,490,o),
(476,435,o),
(425,399,o),
(363,381,o),
(334,381,qs),
(301,381,o),
(237,398,o),
(187,435,o),
(156,492,o),
(156,531,qs),
(156,571,o),
(187,627,o),
(236,663,o),
(300,679,o),
(333,679,qs),
(366,679,o)
);
},
{
closed = 1;
nodes = (
(440,328,o),
(497,290,o),
(533,228,o),
(533,185,qs),
(533,141,o),
(498,81,o),
(441,44,o),
(370,28,o),
(333,28,qs),
(295,28,o),
(223,44,o),
(165,81,o),
(130,141,o),
(130,185,qs),
(130,228,o),
(166,290,o),
(224,328,o),
(297,346,o),
(333,346,qs),
(369,346,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
31 15 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 27 77 0 5 5 0 97 0 0 0 28 0 78 57 56 37 36 67 65 56 75 57 75 47 45 36 55 37 55 24 22 36 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE008;
unicode = 57352;
},
{
glyphname = uniE009;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,291,o),
(494,328,o),
(537,386,o),
(548,426,q),
(551,400,o),
(553,367,o),
(553,354,qs),
(553,300,o),
(537,185,o),
(492,90,o),
(405,28,o),
(334,28,qs),
(310,28,o),
(261,37,o),
(217,57,o),
(181,87,o),
(169,108,q),
(117,108,l),
(130,77,o),
(176,33,o),
(234,5,o),
(299,-8,o),
(331,-8,qs),
(409,-8,o),
(512,50,o),
(572,146,o),
(596,271,o),
(596,339,qs),
(596,402,o),
(573,535,o),
(517,643,o),
(415,715,o),
(336,715,qs),
(285,715,o),
(199,683,o),
(136,625,o),
(101,541,o),
(101,489,qs),
(101,437,o),
(136,357,o),
(197,302,o),
(278,273,o),
(323,273,qs),
(363,273,o)
);
},
{
closed = 1;
nodes = (
(176,604,o),
(227,652,o),
(295,679,o),
(334,679,qs),
(376,679,o),
(445,650,o),
(494,598,o),
(522,528,o),
(522,487,qs),
(522,448,o),
(491,383,o),
(439,337,o),
(370,312,o),
(333,312,qs),
(246,312,o),
(146,411,o),
(146,498,qs),
(146,537,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
39 1 5 6 1 76 0 3 0 4 0 3 4 128 0 5 7 1 0 3 5 0 105 0 6 6 1 97 0 1 1 27 77 0 4 4 2 97 0 2 2 28 2 78 1 0 58 56 48 46 32 30 26 25 21 19 11 9 0 43 1 43 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE009;
unicode = 57353;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,74,l),
(352,47,l),
(680,331,l),
(352,614,l),
(330,587,l),
(607,348,l),
(17,348,l),
(17,313,l),
(607,313,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 1 0 1 76 4 3 2 0 74 7 6 2 1 73 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,588,l),
(344,615,l),
(16,331,l),
(344,48,l),
(366,75,l),
(89,314,l),
(679,314,l),
(679,349,l),
(89,349,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 0 1 1 76 7 6 2 1 74 4 3 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = uni2197;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(516,136,l),
(552,133,l),
(583,566,l),
(151,534,l),
(154,499,l),
(519,526,l),
(102,109,l),
(127,84,l),
(544,501,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni2197;
unicode = 8599;
},
{
glyphname = uni2196;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(543,499,l),
(546,535,l),
(113,566,l),
(145,134,l),
(180,137,l),
(153,502,l),
(570,85,l),
(595,110,l),
(178,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni2196;
unicode = 8598;
},
{
glyphname = uni2198;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,163,l),
(150,127,l),
(583,96,l),
(551,528,l),
(516,525,l),
(543,160,l),
(126,577,l),
(101,552,l),
(518,135,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni2198;
unicode = 8600;
},
{
glyphname = uni2199;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,526,l),
(144,529,l),
(113,96,l),
(545,128,l),
(542,163,l),
(177,136,l),
(594,553,l),
(569,578,l),
(152,161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni2199;
unicode = 8601;
},
{
glyphname = uniE010;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,51,o),
(75,33,qs),
(75,16,o),
(96,-8,o),
(115,-8,qs),
(134,-8,o),
(155,16,o),
(155,33,qs),
(155,51,o),
(133,73,o),
(115,73,qs),
(97,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 28 1 78 1 0 7 5 0 11 1 11 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
note = uniE010;
unicode = 57360;
},
{
glyphname = uniE011;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,50,o),
(72,33,qs),
(72,19,o),
(83,2,o),
(99,-6,o),
(117,-8,o),
(123,-6,q),
(119,-36,o),
(85,-78,o),
(68,-88,q),
(83,-108,l),
(117,-89,o),
(158,-23,o),
(158,18,qs),
(158,38,o),
(139,73,o),
(114,73,qs),
(95,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
7 6 2 1 73 2 1 0 0 1 97 0 1 1 30 1 78 1 0 12 10 0 17 1 17 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 234;
}
);
note = uniE011;
unicode = 57361;
},
{
glyphname = uniE012;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,427,o),
(75,409,qs),
(75,391,o),
(95,368,o),
(115,368,qs),
(135,368,o),
(155,391,o),
(155,409,qs),
(155,427,o),
(134,450,o),
(115,450,qs),
(96,450,o)
);
},
{
closed = 1;
nodes = (
(75,50,o),
(75,32,qs),
(75,15,o),
(96,-8,o),
(115,-8,qs),
(134,-8,o),
(155,15,o),
(155,32,qs),
(155,50,o),
(134,73,o),
(115,73,qs),
(96,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 28 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
note = uniE012;
unicode = 57362;
},
{
glyphname = uniE013;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,427,o),
(75,409,qs),
(75,391,o),
(97,368,o),
(115,368,qs),
(135,368,o),
(157,391,o),
(157,409,qs),
(157,427,o),
(134,450,o),
(115,450,qs),
(97,450,o)
);
},
{
closed = 1;
nodes = (
(73,50,o),
(73,33,qs),
(73,19,o),
(84,2,o),
(100,-6,o),
(118,-8,o),
(124,-6,q),
(120,-36,o),
(86,-78,o),
(69,-88,q),
(84,-108,l),
(118,-89,o),
(159,-23,o),
(159,18,qs),
(159,38,o),
(140,73,o),
(115,73,qs),
(96,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
19 18 2 3 73 4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 30 3 78 13 12 1 0 24 22 12 29 13 29 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 234;
}
);
note = uniE013;
unicode = 57363;
},
{
glyphname = uniE014;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,707,l),
(97,503,l),
(132,503,l),
(137,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 20 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = uniE014;
unicode = 57364;
},
{
glyphname = uniE015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,707,l),
(56,503,l),
(91,503,l),
(96,707,l)
);
},
{
closed = 1;
nodes = (
(176,707,l),
(183,503,l),
(218,503,l),
(223,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 20 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = uniE015;
unicode = 57365;
},
{
glyphname = uniE016;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,709,o),
(72,692,qs),
(72,678,o),
(83,661,o),
(99,653,o),
(117,651,o),
(123,653,q),
(119,623,o),
(85,581,o),
(68,571,q),
(83,551,l),
(117,570,o),
(158,636,o),
(158,677,qs),
(158,697,o),
(139,732,o),
(114,732,qs),
(95,732,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
7 6 2 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 12 10 0 17 1 17 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 233;
}
);
note = uniE016;
unicode = 57366;
},
{
glyphname = uniE017;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(26,709,o),
(26,692,qs),
(26,678,o),
(37,661,o),
(53,653,o),
(71,651,o),
(77,653,q),
(73,623,o),
(39,581,o),
(22,571,q),
(37,551,l),
(71,570,o),
(112,636,o),
(112,677,qs),
(112,697,o),
(93,732,o),
(68,732,qs),
(49,732,o)
);
},
{
closed = 1;
nodes = (
(176,709,o),
(176,692,qs),
(176,678,o),
(187,661,o),
(203,653,o),
(221,651,o),
(227,653,q),
(223,623,o),
(189,581,o),
(172,571,q),
(187,551,l),
(221,570,o),
(262,636,o),
(262,677,qs),
(262,697,o),
(243,732,o),
(218,732,qs),
(199,732,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
25 24 7 6 4 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
3 1 1 1 0 97 5 2 4 3 0 0 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
19 18 1 0 30 28 18 35 19 35 12 10 0 17 1 17 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = uniE017;
unicode = 57367;
},
{
glyphname = uniE018;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,574,o),
(155,591,qs),
(155,605,o),
(144,622,o),
(128,630,o),
(110,631,o),
(104,630,q),
(108,660,o),
(142,702,o),
(159,712,q),
(144,732,l),
(110,713,o),
(69,647,o),
(69,606,qs),
(69,586,o),
(88,551,o),
(113,551,qs),
(132,551,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
7 6 2 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 12 10 0 17 1 17 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 234;
}
);
note = uniE018;
unicode = 57368;
},
{
glyphname = uniE019;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,574,o),
(258,591,qs),
(258,605,o),
(247,622,o),
(231,630,o),
(213,631,o),
(207,630,q),
(211,660,o),
(245,702,o),
(262,712,q),
(247,732,l),
(213,713,o),
(172,647,o),
(172,606,qs),
(172,586,o),
(191,551,o),
(216,551,qs),
(235,551,o)
);
},
{
closed = 1;
nodes = (
(108,574,o),
(108,591,qs),
(108,605,o),
(97,622,o),
(81,630,o),
(63,631,o),
(57,630,q),
(61,660,o),
(95,702,o),
(112,712,q),
(97,732,l),
(63,713,o),
(22,647,o),
(22,606,qs),
(22,586,o),
(41,551,o),
(66,551,qs),
(85,551,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
25 24 7 6 4 1 74 3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 19 18 1 0 30 28 18 35 19 35 12 10 0 17 1 17 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = uniE019;
unicode = 57369;
},
{
glyphname = uniE020;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,50,o),
(72,33,qs),
(72,19,o),
(83,2,o),
(99,-6,o),
(117,-8,o),
(123,-6,q),
(119,-36,o),
(85,-78,o),
(68,-88,q),
(83,-108,l),
(117,-89,o),
(158,-23,o),
(158,18,qs),
(158,38,o),
(139,73,o),
(114,73,qs),
(95,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
7 6 2 1 73 2 1 0 0 1 97 0 1 1 30 1 78 1 0 12 10 0 17 1 17 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 234;
}
);
note = uniE020;
unicode = 57376;
},
{
glyphname = uniE021;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(26,50,o),
(26,33,qs),
(26,19,o),
(37,2,o),
(53,-6,o),
(71,-8,o),
(77,-6,q),
(73,-36,o),
(39,-78,o),
(22,-88,q),
(37,-108,l),
(71,-89,o),
(112,-23,o),
(112,18,qs),
(112,38,o),
(93,73,o),
(68,73,qs),
(49,73,o)
);
},
{
closed = 1;
nodes = (
(176,50,o),
(176,33,qs),
(176,19,o),
(187,2,o),
(203,-6,o),
(221,-8,o),
(227,-6,q),
(223,-36,o),
(189,-78,o),
(172,-88,q),
(187,-108,l),
(221,-89,o),
(262,-23,o),
(262,18,qs),
(262,38,o),
(243,73,o),
(218,73,qs),
(199,73,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
25 24 7 6 4 1 73 5 2 4 3 0 0 1 97 3 1 1 1 30 1 78 19 18 1 0 30 28 18 35 19 35 12 10 0 17 1 17 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = uniE021;
unicode = 57377;
},
{
glyphname = uniE022;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,550,o),
(75,532,qs),
(75,514,o),
(96,490,o),
(115,490,qs),
(134,490,o),
(155,514,o),
(155,532,qs),
(155,550,o),
(134,572,o),
(115,572,qs),
(96,572,o)
);
},
{
closed = 1;
nodes = (
(75,173,o),
(75,155,qs),
(75,138,o),
(96,114,o),
(115,114,qs),
(134,114,o),
(155,138,o),
(155,155,qs),
(155,173,o),
(134,195,o),
(115,195,qs),
(96,195,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 230;
}
);
note = uniE022;
unicode = 57378;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,636,l),
(269,636,l),
(380,763,l),
(336,763,l),
(254,666,l),
(169,763,l),
(126,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
1 1 1 0 1 76 3 2 2 0 1 0 133 0 1 1 118 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 506;
}
);
note = caron;
unicode = 711;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,481,o),
(89,510,qs),
(89,529,o),
(108,550,o),
(136,558,o),
(168,559,o),
(182,559,qs),
(255,559,l),
(255,542,o),
(250,510,o),
(240,494,qs),
(217,455,o),
(158,455,qs),
(132,455,o)
);
},
{
closed = 1;
nodes = (
(282,581,ls),
(282,608,o),
(273,655,o),
(249,688,o),
(209,707,o),
(176,707,qs),
(143,707,o),
(86,683,o),
(74,651,q),
(106,651,l),
(114,670,o),
(157,683,o),
(178,682,qs),
(202,682,o),
(231,667,o),
(247,640,o),
(254,604,o),
(255,583,q),
(160,583,ls),
(141,583,o),
(105,577,o),
(77,560,o),
(60,531,o),
(60,508,qs),
(60,487,o),
(76,458,o),
(103,440,o),
(138,431,o),
(156,431,qs),
(186,431,o),
(238,449,o),
(256,473,q),
(258,434,l),
(282,434,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 4 3 4 5 3 128 0 6 0 4 5 6 4 105 0 3 0 1 0 3 1 103 8 1 0 0 2 97 9 7 2 2 2 59 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 4 3 4 5 3 128 0 6 0 4 5 6 4 105 0 3 0 1 0 3 1 103 9 1 7 7 59 77 8 1 0 0 2 97 0 2 2 59 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 4 3 4 5 3 128 0 6 0 4 5 6 4 105 0 3 0 1 0 3 1 103 8 1 0 0 2 97 9 7 2 2 2 59 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 5 4 3 4 5 3 128 0 6 0 4 5 6 4 105 0 3 0 1 0 3 1 103 8 1 0 2 2 0 89 8 1 0 0 2 97 9 7 2 2 0 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
14 14 1 0 14 47 14 47 42 40 38 37 35 33 29 27 19 17 8 5 0 13 1 13 10 9 22 
CALL[ ]	/* CallFunction */";
};
width = 352;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,648,o),
(261,686,o),
(217,708,o),
(186,708,qs),
(154,708,o),
(110,686,o),
(83,648,o),
(70,597,o),
(70,569,qs),
(70,540,o),
(83,490,o),
(110,452,o),
(154,431,o),
(186,431,qs),
(217,431,o),
(262,453,o),
(290,490,o),
(303,540,o),
(303,569,qs),
(303,597,o)
);
},
{
closed = 1;
nodes = (
(262,505,o),
(241,475,o),
(209,457,o),
(186,457,qs),
(163,457,o),
(131,475,o),
(111,505,o),
(102,546,o),
(102,569,qs),
(102,592,o),
(111,633,o),
(131,664,o),
(163,682,o),
(186,682,qs),
(208,682,o),
(241,664,o),
(261,633,o),
(271,592,o),
(271,569,qs),
(271,546,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 59 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
40 40 40 36 4 9 26 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(182,707,ls),
(118,707,o),
(35,631,o),
(35,565,qs),
(35,496,o),
(109,419,o),
(177,419,qs),
(193,419,l),
(193,0,l),
(235,0,l),
(235,669,l),
(355,669,l),
(355,0,l),
(397,0,l),
(397,669,l),
(479,669,l),
(479,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 4 0 1 0 4 1 128 2 1 0 0 5 95 0 5 5 38 77 3 1 1 1 39 1 78 36 33 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,324,o),
(294,354,qs),
(294,380,o),
(329,430,o),
(350,456,qs),
(373,483,o),
(410,550,o),
(410,587,qs),
(410,620,o),
(383,669,o),
(338,702,o),
(281,719,o),
(251,719,qs),
(162,719,o),
(75,623,o),
(75,547,qs),
(75,0,l),
(117,0,l),
(117,546,ls),
(117,609,o),
(185,683,o),
(246,683,qs),
(268,683,o),
(311,670,o),
(346,645,o),
(368,608,o),
(368,584,qs),
(368,555,o),
(332,500,o),
(288,444,o),
(252,387,o),
(252,357,qs),
(252,311,o),
(297,261,o),
(334,247,qs),
(353,240,o),
(391,230,o),
(411,223,qs),
(447,210,o),
(491,170,o),
(491,128,qs),
(491,101,o),
(472,63,o),
(440,40,o),
(396,29,o),
(372,29,qs),
(334,29,o),
(271,70,o),
(261,108,q),
(216,108,l),
(230,48,o),
(316,-7,o),
(375,-7,qs),
(446,-7,o),
(533,62,o),
(533,137,qs),
(533,186,o),
(482,239,o),
(442,252,qs),
(419,260,o),
(377,273,o),
(357,281,qs),
(331,291,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 1 3 2 3 1 2 128 0 3 3 5 97 0 5 5 46 77 0 4 4 39 77 0 2 2 0 97 0 0 0 50 0 78 50 48 45 44 41 39 34 18 40 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,371,o),
(75,354,qs),
(75,335,o),
(97,315,o),
(115,315,qs),
(134,315,o),
(154,336,o),
(154,354,qs),
(154,371,o),
(134,392,o),
(115,392,qs),
(96,392,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 229;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,284,o),
(237,246,o),
(215,213,o),
(185,183,o),
(168,167,qs),
(119,121,o),
(61,35,o),
(61,-22,qs),
(61,-64,o),
(91,-126,o),
(144,-167,o),
(213,-188,o),
(252,-188,qs),
(282,-188,o),
(342,-177,o),
(398,-149,o),
(443,-103,o),
(455,-67,q),
(407,-67,l),
(399,-90,o),
(366,-122,o),
(325,-143,o),
(277,-152,o),
(252,-152,qs),
(222,-152,o),
(169,-135,o),
(128,-102,o),
(103,-52,o),
(103,-19,qs),
(103,6,o),
(122,51,o),
(151,93,o),
(186,130,o),
(203,146,qs),
(221,163,o),
(255,198,o),
(282,238,o),
(299,283,o),
(299,308,qs),
(299,323,l),
(251,323,l),
(251,308,ls)
);
},
{
closed = 1;
nodes = (
(314,475,o),
(314,494,qs),
(314,512,o),
(292,534,o),
(273,534,qs),
(256,534,o),
(234,513,o),
(234,495,qs),
(234,475,o),
(257,454,o),
(273,454,qs),
(292,454,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 4 2 4 0 2 128 0 2 1 4 2 1 126 6 1 4 4 5 97 0 5 5 49 77 0 1 1 3 97 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 4 2 4 0 2 128 0 2 1 4 2 1 126 0 1 0 3 1 3 101 6 1 4 4 5 97 0 5 5 49 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
43 42 49 47 42 53 43 53 36 20 47 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 498;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,475,o),
(162,494,qs),
(162,512,o),
(140,534,o),
(121,534,qs),
(104,534,o),
(82,513,o),
(82,495,qs),
(82,475,o),
(105,454,o),
(121,454,qs),
(140,454,o)
);
},
{
closed = 1;
nodes = (
(101,-181,l),
(142,-181,l),
(140,349,l),
(103,349,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 3 0 2 0 3 2 128 0 2 2 132 4 1 0 0 1 97 0 1 1 49 0 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 244;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,695,o),
(240,676,qs),
(240,656,o),
(262,636,o),
(279,636,qs),
(296,636,o),
(319,657,o),
(319,676,qs),
(319,694,o),
(297,714,o),
(280,714,qs),
(263,714,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 559;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,733,o),
(196,696,qs),
(196,659,o),
(242,616,o),
(280,616,qs),
(318,616,o),
(366,658,o),
(366,696,qs),
(366,733,o),
(320,781,o),
(281,781,qs),
(243,781,o)
);
},
{
closed = 1;
nodes = (
(335,722,o),
(335,697,qs),
(335,671,o),
(306,642,o),
(280,642,qs),
(255,642,o),
(227,671,o),
(227,697,qs),
(227,722,o),
(255,754,o),
(281,754,qs),
(307,754,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 562;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,722,o),
(130,695,o),
(122,658,o),
(122,636,q),
(159,636,l),
(158,648,o),
(161,673,o),
(170,694,o),
(187,708,o),
(202,708,qs),
(219,708,o),
(246,684,o),
(274,656,o),
(309,632,o),
(332,632,qs),
(378,632,o),
(415,690,o),
(415,734,q),
(378,734,l),
(378,722,o),
(376,696,o),
(366,675,o),
(349,662,o),
(334,662,qs),
(317,662,o),
(290,686,o),
(262,714,o),
(228,738,o),
(205,738,qs),
(181,738,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
2 6 2 0 0 4 1 0 4 105 0 1 3 3 1 89 0 1 1 3 97 5 1 3 1 3 81 1 0 25 24 20 18 15 13 11 10 6 4 0 29 1 29 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 537;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,662,l),
(426,697,l),
(127,697,l),
(127,662,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 553;
}
);
note = macron;
unicode = 175;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,636,l),
(137,636,l),
(225,763,l),
(175,763,l)
);
},
{
closed = 1;
nodes = (
(219,636,l),
(257,636,l),
(345,763,l),
(295,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
5 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 405;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,-164,o),
(295,-169,o),
(286,-168,q),
(251,-168,o),
(209,-133,o),
(209,-97,qs),
(209,-67,o),
(246,-17,o),
(271,1,q),
(248,9,l),
(233,1,o),
(205,-23,o),
(183,-53,o),
(170,-87,o),
(170,-105,qs),
(170,-155,o),
(235,-201,o),
(281,-201,qs),
(310,-201,o),
(334,-191,q),
(326,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
20 11 10 3 1 74 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 29 33 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 504;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-272,636,l),
(-234,636,l),
(-310,763,l),
(-360,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-300,636,l),
(-262,636,l),
(-174,763,l),
(-224,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-252,763,l),
(-284,763,l),
(-395,636,l),
(-351,636,l),
(-269,734,l),
(-184,636,l),
(-141,636,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
1 1 0 1 1 76 0 1 0 1 133 3 2 2 0 0 118 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-387,722,o),
(-407,695,o),
(-415,658,o),
(-415,636,q),
(-378,636,l),
(-379,648,o),
(-376,673,o),
(-367,694,o),
(-350,708,o),
(-335,708,qs),
(-318,708,o),
(-291,684,o),
(-263,656,o),
(-228,632,o),
(-205,632,qs),
(-159,632,o),
(-122,690,o),
(-122,734,q),
(-159,734,l),
(-159,722,o),
(-161,696,o),
(-171,675,o),
(-188,662,o),
(-203,662,qs),
(-220,662,o),
(-247,686,o),
(-275,714,o),
(-309,738,o),
(-332,738,qs),
(-356,738,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
2 6 2 0 0 4 1 0 4 105 0 1 3 3 1 89 0 1 1 3 97 5 1 3 1 3 81 1 0 25 24 20 18 15 13 11 10 6 4 0 29 1 29 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-121,662,l),
(-121,697,l),
(-420,697,l),
(-420,662,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-406,706,o),
(-380,667,o),
(-341,645,o),
(-291,636,o),
(-264,636,qs),
(-237,636,o),
(-187,645,o),
(-147,668,o),
(-120,706,o),
(-116,735,q),
(-155,735,l),
(-163,694,o),
(-224,669,o),
(-263,669,qs),
(-303,669,o),
(-363,694,o),
(-371,735,q),
(-410,735,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 0 0 0 17 0 17 36 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-315,695,o),
(-315,676,qs),
(-315,656,o),
(-293,636,o),
(-276,636,qs),
(-259,636,o),
(-236,657,o),
(-236,676,qs),
(-236,694,o),
(-258,714,o),
(-275,714,qs),
(-292,714,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-199,691,o),
(-199,675,qs),
(-199,659,o),
(-178,636,o),
(-160,636,qs),
(-141,636,o),
(-119,658,o),
(-119,675,qs),
(-119,692,o),
(-141,714,o),
(-160,714,qs),
(-178,714,o)
);
},
{
closed = 1;
nodes = (
(-410,691,o),
(-410,675,qs),
(-410,659,o),
(-389,636,o),
(-371,636,qs),
(-352,636,o),
(-330,658,o),
(-330,675,qs),
(-330,692,o),
(-352,714,o),
(-371,714,qs),
(-389,714,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-355,733,o),
(-355,696,qs),
(-355,659,o),
(-309,616,o),
(-271,616,qs),
(-233,616,o),
(-185,658,o),
(-185,696,qs),
(-185,733,o),
(-231,781,o),
(-270,781,qs),
(-308,781,o)
);
},
{
closed = 1;
nodes = (
(-216,722,o),
(-216,697,qs),
(-216,671,o),
(-245,642,o),
(-271,642,qs),
(-296,642,o),
(-324,671,o),
(-324,697,qs),
(-324,722,o),
(-296,754,o),
(-270,754,qs),
(-244,754,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-360,636,l),
(-322,636,l),
(-234,763,l),
(-284,763,l)
);
},
{
closed = 1;
nodes = (
(-240,636,l),
(-202,636,l),
(-114,763,l),
(-164,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
5 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-274,636,l),
(-242,636,l),
(-131,763,l),
(-175,763,l),
(-257,666,l),
(-342,763,l),
(-385,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
1 1 1 0 1 76 3 2 2 0 1 0 133 0 1 1 118 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-234,657,o),
(-234,676,qs),
(-234,711,o),
(-270,716,qs),
(-277,717,o),
(-285,715,q),
(-282,741,o),
(-253,784,o),
(-230,797,q),
(-245,817,l),
(-280,797,o),
(-320,732,o),
(-320,692,qs),
(-320,671,o),
(-299,636,o),
(-275,636,qs),
(-257,636,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
10 7 6 3 0 74 1 1 0 0 118 1 0 0 16 1 16 2 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-287,18,l),
(-327,-109,l),
(-316,-106,o),
(-283,-100,o),
(-271,-100,qs),
(-244,-100,o),
(-212,-126,o),
(-212,-151,qs),
(-212,-177,o),
(-238,-206,o),
(-275,-221,o),
(-315,-223,o),
(-330,-221,q),
(-330,-248,l),
(-305,-251,o),
(-253,-245,o),
(-210,-222,o),
(-182,-183,o),
(-182,-153,qs),
(-182,-115,o),
(-224,-76,o),
(-256,-75,qs),
(-265,-75,o),
(-280,-76,o),
(-291,-78,q),
(-261,18,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 11 values pushed */
23 12 2 1 2 1 76 11 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 0 0 3 112 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 0 3 133 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 98 0 2 0 2 82 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 37 25 49 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-192,-164,o),
(-215,-169,o),
(-224,-168,q),
(-259,-168,o),
(-301,-133,o),
(-301,-97,qs),
(-301,-67,o),
(-264,-17,o),
(-239,1,q),
(-262,9,l),
(-277,1,o),
(-305,-23,o),
(-327,-53,o),
(-340,-87,o),
(-340,-105,qs),
(-340,-155,o),
(-275,-201,o),
(-229,-201,qs),
(-200,-201,o),
(-176,-191,q),
(-184,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
20 11 10 3 1 74 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 29 33 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(16,0,l),
(66,0,l),
(157,166,l),
(439,166,l),
(439,0,l),
(875,0,l),
(875,38,l),
(481,38,l),
(481,332,l),
(833,332,l),
(833,370,l),
(481,370,l),
(481,669,l),
(875,669,l),
(875,707,l),
(405,707,l)
);
},
{
closed = 1;
nodes = (
(439,669,l),
(439,203,l),
(177,203,l),
(431,669,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
18 1 0 1 75 0 1 0 2 8 1 2 103 0 8 0 5 3 8 5 103 0 0 0 7 95 9 1 7 7 38 77 0 3 3 4 95 6 1 4 4 39 4 78 0 0 17 16 0 15 0 15 17 17 17 17 17 17 17 10 8 29 
CALL[ ]	/* CallFunction */";
};
width = 929;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,669,o),
(515,622,o),
(586,538,o),
(621,422,o),
(621,353,qs),
(621,283,o),
(584,167,o),
(511,84,o),
(401,38,o),
(328,38,qs),
(135,38,l),
(135,334,l),
(318,334,l),
(318,372,l),
(135,372,l),
(135,669,l),
(335,669,ls)
);
},
{
closed = 1;
nodes = (
(93,334,l),
(93,0,l),
(336,0,ls),
(417,0,o),
(540,52,o),
(623,145,o),
(665,275,o),
(665,353,qs),
(665,432,o),
(624,562,o),
(541,655,o),
(418,707,o),
(336,707,qs),
(93,707,l),
(93,372,l),
(7,372,l),
(7,334,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
4 1 0 7 1 1 2 0 1 103 8 1 3 3 5 95 0 5 5 38 77 0 2 2 6 95 0 6 6 39 6 78 0 0 33 32 31 29 21 19 18 17 0 16 0 15 33 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,10,l),
(316,-8,o),
(384,-8,qs),
(465,-8,o),
(589,47,o),
(671,144,o),
(713,276,o),
(713,353,qs),
(713,402,o),
(695,499,o),
(654,584,o),
(590,655,o),
(544,679,q),
(602,816,l),
(553,816,l),
(503,697,l),
(449,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,563,o),
(54,431,o),
(54,353,qs),
(54,304,o),
(72,208,o),
(112,122,o),
(176,51,o),
(222,27,q),
(165,-110,l),
(214,-110,l)
);
},
{
closed = 1;
nodes = (
(568,619,o),
(621,556,o),
(654,480,o),
(668,396,o),
(668,353,qs),
(668,286,o),
(634,168,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(327,28,o),
(279,45,q),
(529,642,l)
);
},
{
closed = 1;
nodes = (
(200,87,o),
(147,151,o),
(113,227,o),
(98,311,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(205,627,o),
(312,679,o),
(384,679,qs),
(440,679,o),
(488,662,q),
(238,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
13 1 5 0 55 42 2 4 5 28 1 2 2 4 3 76 16 1 5 1 75 0 1 0 1 133 6 1 3 2 3 134 0 5 5 0 97 0 0 0 46 77 0 4 4 2 97 0 2 2 47 2 78 0 0 46 44 33 31 0 29 0 29 42 18 42 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,125,l),
(309,125,ls),
(364,125,o),
(459,153,o),
(529,210,o),
(569,296,o),
(569,355,qs),
(569,472,o),
(441,582,o),
(328,582,qs),
(135,582,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(135,544,l),
(322,544,ls),
(369,544,o),
(444,524,o),
(497,479,o),
(525,409,o),
(525,359,qs),
(525,307,o),
(493,233,o),
(434,185,o),
(353,162,o),
(305,162,qs),
(135,162,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
0 0 0 5 4 0 5 103 6 1 4 0 1 2 4 1 103 0 3 3 38 77 0 2 2 39 2 78 16 15 26 24 15 27 16 27 17 17 38 32 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(483,329,o),
(511,405,o),
(562,463,o),
(634,498,o),
(679,498,qs),
(725,498,o),
(794,464,o),
(840,406,o),
(865,329,o),
(867,287,q),
(481,287,l)
);
},
{
closed = 1;
nodes = (
(440,201,ls),
(440,157,o),
(410,93,o),
(358,50,o),
(289,29,o),
(250,29,qs),
(222,29,o),
(167,42,o),
(123,70,o),
(95,115,o),
(95,147,qs),
(95,185,o),
(129,228,o),
(181,248,o),
(244,252,o),
(273,252,qs),
(440,252,l)
);
},
{
closed = 1;
nodes = (
(346,4,o),
(403,33,o),
(449,82,o),
(465,121,q),
(497,53,o),
(612,-7,o),
(684,-7,qs),
(714,-7,o),
(778,6,o),
(835,33,o),
(881,76,o),
(894,106,q),
(847,106,l),
(836,85,o),
(800,55,o),
(758,37,o),
(711,29,o),
(689,29,qs),
(635,29,o),
(557,64,o),
(505,125,o),
(480,206,o),
(480,252,q),
(909,252,l),
(909,306,o),
(884,408,o),
(830,486,o),
(744,534,o),
(683,534,qs),
(611,534,o),
(497,466,o),
(467,401,q),
(447,467,o),
(344,534,o),
(276,534,qs),
(247,534,o),
(189,524,o),
(138,500,o),
(97,461,o),
(86,432,q),
(133,432,l),
(155,471,o),
(236,498,o),
(278,498,qs),
(324,497,o),
(386,461,o),
(424,403,o),
(440,328,o),
(440,287,q),
(248,287,ls),
(210,287,o),
(140,275,o),
(86,242,o),
(53,186,o),
(53,142,qs),
(53,103,o),
(87,46,o),
(143,10,o),
(212,-7,o),
(247,-7,qs),
(281,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 106 values pushed */
56 1 1 7 84 1 12 2 2 76 0 7 0 1 0 7 1 128 0 12 2 3 2 12 3 128 5 14 2 1 10 15 2 2 12 1 2 103 6 1 0 0 8 97 9 1 8 8 49 77 11 1 3 3 4 97 13 16 2 4 4 50 4 78 29 28 13 11 0 0 82 80 76 75 71 69 65 64 60 58 54 52 48 47 45 43 39 37 28 88 29 88 22 20 11 27 13 27 0 10 0 10 36 17 8 23 
CALL[ ]	/* CallFunction */";
};
width = 963;
}
);
note = ae;
unicode = 230;
},
{
glyphname = oslash;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,4,l),
(257,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,299,o),
(539,371,o),
(509,434,o),
(462,487,o),
(428,505,q),
(483,636,l),
(434,636,l),
(386,522,l),
(348,534,o),
(302,534,qs),
(240,534,o),
(146,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,226,o),
(66,155,o),
(95,92,o),
(142,39,o),
(176,21,q),
(122,-110,l),
(171,-110,l)
);
},
{
closed = 1;
nodes = (
(440,453,o),
(477,407,o),
(500,353,o),
(510,293,o),
(510,263,qs),
(510,213,o),
(485,128,o),
(434,65,o),
(355,29,o),
(302,29,qs),
(263,29,o),
(232,38,q),
(413,469,l)
);
},
{
closed = 1;
nodes = (
(164,72,o),
(127,118,o),
(104,173,o),
(95,233,o),
(95,263,qs),
(95,312,o),
(120,398,o),
(171,462,o),
(249,498,o),
(302,498,qs),
(342,498,o),
(372,488,q),
(191,56,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
16 13 2 5 0 55 42 2 4 5 28 1 2 2 4 3 76 0 1 0 1 133 6 1 3 2 3 134 0 5 5 0 97 0 0 0 49 77 0 4 4 2 97 0 2 2 50 2 78 0 0 46 44 33 31 0 29 0 29 42 18 42 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,40,o),
(256,-7,o),
(320,-7,qs),
(381,-7,o),
(470,33,o),
(528,105,o),
(556,202,o),
(556,259,qs),
(556,314,o),
(528,414,o),
(471,489,o),
(383,534,o),
(323,534,qs),
(254,534,o),
(153,480,o),
(115,422,q),
(115,707,l),
(73,707,l),
(73,-206,l),
(115,-206,l),
(115,98,l)
);
},
{
closed = 1;
nodes = (
(192,65,o),
(140,128,o),
(113,213,o),
(113,262,qs),
(113,307,o),
(139,392,o),
(190,458,o),
(265,498,o),
(315,498,qs),
(368,498,o),
(444,461,o),
(492,396,o),
(514,310,o),
(514,262,qs),
(514,215,o),
(493,131,o),
(447,67,o),
(375,29,o),
(323,29,qs),
(271,29,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 4 2 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 38 77 0 5 5 2 97 0 2 2 49 77 6 1 4 4 3 97 0 3 3 50 77 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 3 0 134 0 1 1 38 77 0 5 5 2 97 0 2 2 49 77 6 1 4 4 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 40 22 40 40 35 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = eth;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,647,l),
(289,673,o),
(199,705,o),
(157,713,q),
(152,683,l),
(193,674,o),
(262,650,o),
(298,627,q),
(196,561,l),
(214,534,l),
(323,609,l),
(393,557,o),
(453,410,o),
(458,327,q),
(433,391,o),
(331,457,o),
(263,457,qs),
(214,457,o),
(136,421,o),
(82,358,o),
(53,274,o),
(53,227,qs),
(53,176,o),
(83,90,o),
(140,28,o),
(223,-7,o),
(275,-7,qs),
(336,-7,o),
(420,44,o),
(446,82,qs),
(460,102,o),
(478,151,o),
(489,203,o),
(493,256,o),
(493,280,qs),
(493,335,o),
(480,430,o),
(448,516,o),
(394,593,o),
(354,630,q),
(455,694,l),
(437,721,l)
);
},
{
closed = 1;
nodes = (
(163,62,o),
(118,117,o),
(95,188,o),
(95,227,qs),
(95,264,o),
(118,334,o),
(162,388,o),
(225,421,o),
(264,421,qs),
(308,421,o),
(376,388,o),
(423,333,o),
(447,259,o),
(447,219,qs),
(447,180,o),
(422,111,o),
(376,59,o),
(311,29,o),
(272,29,qs),
(229,29,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
27 1 2 3 1 76 41 40 37 33 32 31 30 1 8 1 74 0 1 0 3 2 1 3 105 4 1 2 2 0 97 0 0 0 50 0 78 43 42 53 51 42 61 43 61 40 45 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = eth;
unicode = 240;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(304,796,l),
(342,796,l),
(266,923,l),
(216,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
10 1 4 0 1 76 7 1 6 5 6 133 0 5 0 5 133 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 11 11 11 14 11 14 19 17 17 17 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(301,796,l),
(339,796,l),
(427,923,l),
(377,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
10 1 4 0 1 76 7 1 6 5 6 133 0 5 0 5 133 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 11 11 11 14 11 14 19 17 17 17 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(335,923,l),
(303,923,l),
(192,796,l),
(236,796,l),
(318,894,l),
(403,796,l),
(446,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
12 1 5 6 10 1 4 0 2 76 0 6 5 6 133 8 7 2 5 0 5 133 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 11 11 11 17 11 17 17 20 17 17 17 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(202,882,o),
(182,855,o),
(174,818,o),
(174,796,q),
(211,796,l),
(210,808,o),
(213,833,o),
(222,854,o),
(239,868,o),
(254,868,qs),
(271,868,o),
(298,844,o),
(326,816,o),
(361,792,o),
(384,792,qs),
(430,792,o),
(467,850,o),
(467,894,q),
(430,894,l),
(430,882,o),
(428,856,o),
(418,835,o),
(401,822,o),
(386,822,qs),
(369,822,o),
(342,846,o),
(314,874,o),
(280,898,o),
(257,898,qs),
(233,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
10 1 4 0 1 76 7 11 2 5 0 9 6 5 9 105 0 6 10 1 8 0 6 8 105 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 12 11 36 35 31 29 26 24 22 21 17 15 11 40 12 40 17 17 17 17 16 12 8 27 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(384,851,o),
(384,835,qs),
(384,819,o),
(405,796,o),
(423,796,qs),
(442,796,o),
(464,818,o),
(464,835,qs),
(464,852,o),
(442,874,o),
(423,874,qs),
(405,874,o)
);
},
{
closed = 1;
nodes = (
(173,851,o),
(173,835,qs),
(173,819,o),
(194,796,o),
(212,796,qs),
(231,796,o),
(253,818,o),
(253,835,qs),
(253,852,o),
(231,874,o),
(212,874,qs),
(194,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
10 1 4 0 1 76 10 7 9 3 5 8 1 6 0 5 6 105 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 24 23 12 11 30 28 23 34 24 34 18 16 11 22 12 22 17 17 17 17 16 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(234,893,o),
(234,856,qs),
(234,819,o),
(280,776,o),
(318,776,qs),
(356,776,o),
(404,818,o),
(404,856,qs),
(404,893,o),
(358,941,o),
(319,941,qs),
(281,941,o)
);
},
{
closed = 1;
nodes = (
(373,882,o),
(373,857,qs),
(373,831,o),
(344,802,o),
(318,802,qs),
(293,802,o),
(265,831,o),
(265,857,qs),
(265,882,o),
(293,914,o),
(319,914,qs),
(345,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
10 1 4 0 1 76 9 1 5 10 1 7 8 5 7 105 0 8 0 6 0 8 6 105 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 24 23 12 11 30 28 23 34 24 34 18 16 11 22 12 22 17 17 17 17 16 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(318,796,l),
(356,796,l),
(280,923,l),
(230,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
8 1 7 6 7 133 0 6 0 6 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 15 12 15 18 17 17 17 17 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(297,796,l),
(335,796,l),
(423,923,l),
(373,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
8 1 7 6 7 133 0 6 0 6 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 15 12 15 18 17 17 17 17 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(337,923,l),
(305,923,l),
(194,796,l),
(238,796,l),
(320,894,l),
(405,796,l),
(448,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
13 1 6 7 1 76 0 7 6 7 133 9 8 2 6 0 6 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 18 12 18 17 19 17 17 17 17 17 16 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(392,871,o),
(392,855,qs),
(392,839,o),
(413,816,o),
(431,816,qs),
(450,816,o),
(472,838,o),
(472,855,qs),
(472,872,o),
(450,894,o),
(431,894,qs),
(413,894,o)
);
},
{
closed = 1;
nodes = (
(181,871,o),
(181,855,qs),
(181,839,o),
(202,816,o),
(220,816,qs),
(239,816,o),
(261,838,o),
(261,855,qs),
(261,872,o),
(239,894,o),
(220,894,qs),
(202,894,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 8 10 3 6 9 1 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 25 24 13 12 31 29 24 35 25 35 19 17 12 23 13 23 17 17 17 17 17 16 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(109,796,l),
(147,796,l),
(71,923,l),
(21,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 2 3 133 0 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(90,796,l),
(128,796,l),
(216,923,l),
(166,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 2 3 133 0 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(130,923,l),
(98,923,l),
(-13,796,l),
(31,796,l),
(113,894,l),
(198,796,l),
(241,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 3 1 76 0 3 2 3 133 5 4 2 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 4 4 4 10 4 10 17 19 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(179,851,o),
(179,835,qs),
(179,819,o),
(200,796,o),
(218,796,qs),
(237,796,o),
(259,818,o),
(259,835,qs),
(259,852,o),
(237,874,o),
(218,874,qs),
(200,874,o)
);
},
{
closed = 1;
nodes = (
(-32,851,o),
(-32,835,qs),
(-32,819,o),
(-11,796,o),
(7,796,qs),
(26,796,o),
(48,818,o),
(48,835,qs),
(48,852,o),
(26,874,o),
(7,874,qs),
(-11,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,659,l),
(593,0,l),
(651,0,l),
(651,707,l),
(609,707,l),
(609,49,l),
(154,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(264,882,o),
(244,855,o),
(236,818,o),
(236,796,q),
(273,796,l),
(272,808,o),
(275,833,o),
(284,854,o),
(301,868,o),
(316,868,qs),
(333,868,o),
(360,844,o),
(388,816,o),
(423,792,o),
(446,792,qs),
(492,792,o),
(529,850,o),
(529,894,q),
(492,894,l),
(492,882,o),
(490,856,o),
(480,835,o),
(463,822,o),
(448,822,qs),
(431,822,o),
(404,846,o),
(376,874,o),
(342,898,o),
(319,898,qs),
(295,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
7 2 2 2 0 1 76 6 10 2 4 0 8 5 4 8 105 0 5 9 1 7 0 5 7 105 1 1 0 0 38 77 3 1 2 2 39 2 78 11 10 35 34 30 28 25 23 21 20 16 14 10 39 11 39 18 17 18 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(388,796,l),
(426,796,l),
(350,923,l),
(300,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
8 1 5 4 5 133 0 4 1 4 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(350,796,l),
(388,796,l),
(476,923,l),
(426,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
8 1 5 4 5 133 0 4 1 4 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(399,923,l),
(367,923,l),
(256,796,l),
(300,796,l),
(382,894,l),
(467,796,l),
(510,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
41 1 4 5 1 76 0 5 4 5 133 9 6 2 4 1 4 133 8 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 7 1 0 0 47 0 78 40 40 21 20 1 0 40 46 40 46 45 44 43 42 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(269,882,o),
(249,855,o),
(241,818,o),
(241,796,q),
(278,796,l),
(277,808,o),
(280,833,o),
(289,854,o),
(306,868,o),
(321,868,qs),
(338,868,o),
(365,844,o),
(393,816,o),
(428,792,o),
(451,792,qs),
(497,792,o),
(534,850,o),
(534,894,q),
(497,894,l),
(497,882,o),
(495,856,o),
(485,835,o),
(468,822,o),
(453,822,qs),
(436,822,o),
(409,846,o),
(381,874,o),
(347,898,o),
(324,898,qs),
(300,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
6 12 2 4 0 8 5 4 8 105 0 5 9 1 7 1 5 7 105 11 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 10 1 0 0 47 0 78 41 40 21 20 1 0 65 64 60 58 55 53 51 50 46 44 40 69 41 69 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(449,851,o),
(449,835,qs),
(449,819,o),
(470,796,o),
(488,796,qs),
(507,796,o),
(529,818,o),
(529,835,qs),
(529,852,o),
(507,874,o),
(488,874,qs),
(470,874,o)
);
},
{
closed = 1;
nodes = (
(238,851,o),
(238,835,qs),
(238,819,o),
(259,796,o),
(277,796,qs),
(296,796,o),
(318,818,o),
(318,835,qs),
(318,852,o),
(296,874,o),
(277,874,qs),
(259,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
11 6 10 3 4 7 1 5 1 4 5 105 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 53 52 41 40 21 20 1 0 59 57 52 63 53 63 47 45 40 51 41 51 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(374,796,l),
(412,796,l),
(336,923,l),
(286,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
7 1 5 4 5 133 0 4 1 4 133 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 29 26 29 28 27 0 25 0 25 37 21 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(326,796,l),
(364,796,l),
(452,923,l),
(402,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
7 1 5 4 5 133 0 4 1 4 133 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 29 26 29 28 27 0 25 0 25 37 21 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(376,923,l),
(344,923,l),
(233,796,l),
(277,796,l),
(359,894,l),
(444,796,l),
(487,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
27 1 4 5 1 76 0 5 4 5 133 8 6 2 4 1 4 133 7 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 32 26 32 31 30 29 28 0 25 0 25 37 21 37 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(427,851,o),
(427,835,qs),
(427,819,o),
(448,796,o),
(466,796,qs),
(485,796,o),
(507,818,o),
(507,835,qs),
(507,852,o),
(485,874,o),
(466,874,qs),
(448,874,o)
);
},
{
closed = 1;
nodes = (
(216,851,o),
(216,835,qs),
(216,819,o),
(237,796,o),
(255,796,qs),
(274,796,o),
(296,818,o),
(296,835,qs),
(296,852,o),
(274,874,o),
(255,874,qs),
(237,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 6 9 3 4 7 1 5 1 4 5 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 39 38 27 26 0 0 45 43 38 49 39 49 33 31 26 37 27 37 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(20,707,l),
(272,267,l),
(272,0,l),
(314,0,l),
(314,267,l),
(563,707,l),
(514,707,l),
(293,310,l)
);
},
{
closed = 1;
nodes = (
(260,796,l),
(298,796,l),
(386,923,l),
(336,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
8 5 2 3 1 0 1 76 5 1 4 3 4 133 0 3 0 3 133 2 1 0 0 38 77 0 1 1 39 1 78 9 9 9 12 9 12 19 18 18 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = agrave;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(296,636,l),
(334,636,l),
(258,763,l),
(208,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
55 55 39 38 55 58 55 58 57 56 49 47 38 54 39 54 22 36 20 36 40 33 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(243,636,l),
(281,636,l),
(369,763,l),
(319,763,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
55 55 39 38 55 58 55 58 57 56 49 47 38 54 39 54 22 36 20 36 40 33 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(299,763,l),
(267,763,l),
(156,636,l),
(200,636,l),
(282,734,l),
(367,636,l),
(410,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
56 1 8 9 0 1 7 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 9 8 9 133 12 10 2 8 4 8 133 0 3 2 1 2 3 1 128 0 1 11 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 9 8 9 133 12 10 2 8 4 8 133 0 3 2 1 2 3 1 128 0 1 11 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 9 8 9 133 12 10 2 8 4 8 133 0 3 2 1 2 3 1 128 0 1 11 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
55 55 39 38 55 61 55 61 60 59 58 57 49 47 38 54 39 54 22 36 20 36 40 33 13 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(166,722,o),
(146,695,o),
(138,658,o),
(138,636,q),
(175,636,l),
(174,648,o),
(177,673,o),
(186,694,o),
(203,708,o),
(218,708,qs),
(235,708,o),
(262,684,o),
(290,656,o),
(325,632,o),
(348,632,qs),
(394,632,o),
(431,690,o),
(431,734,q),
(394,734,l),
(394,722,o),
(392,696,o),
(382,675,o),
(365,662,o),
(350,662,qs),
(333,662,o),
(306,686,o),
(278,714,o),
(244,738,o),
(221,738,qs),
(197,738,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 3 2 1 2 3 1 128 0 9 13 1 11 4 9 11 105 0 1 14 1 6 7 1 6 103 0 12 12 8 97 10 15 2 8 8 48 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 3 2 1 2 3 1 128 0 9 13 1 11 4 9 11 105 0 1 14 1 6 7 1 6 103 0 12 12 8 97 10 15 2 8 8 48 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 3 2 1 2 3 1 128 0 9 13 1 11 4 9 11 105 0 1 14 1 6 7 1 6 103 0 12 12 8 97 10 15 2 8 8 48 77 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
0 3 2 1 2 3 1 128 10 15 2 8 0 12 9 8 12 105 0 9 13 1 11 4 9 11 105 0 1 14 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
56 55 39 38 80 79 75 73 70 68 66 65 61 59 55 84 56 84 49 47 38 54 39 54 22 36 20 36 40 33 16 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(348,691,o),
(348,675,qs),
(348,659,o),
(369,636,o),
(387,636,qs),
(406,636,o),
(428,658,o),
(428,675,qs),
(428,692,o),
(406,714,o),
(387,714,qs),
(369,714,o)
);
},
{
closed = 1;
nodes = (
(137,691,o),
(137,675,qs),
(137,659,o),
(158,636,o),
(176,636,qs),
(195,636,o),
(217,658,o),
(217,675,qs),
(217,692,o),
(195,714,o),
(176,714,qs),
(158,714,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 2 1 2 3 1 128 0 1 12 1 6 7 1 6 103 11 1 9 9 8 97 14 10 13 3 8 8 46 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 2 1 2 3 1 128 0 1 12 1 6 7 1 6 103 11 1 9 9 8 97 14 10 13 3 8 8 46 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 3 2 1 2 3 1 128 0 1 12 1 6 7 1 6 103 11 1 9 9 8 97 14 10 13 3 8 8 46 77 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
68 67 56 55 39 38 74 72 67 78 68 78 62 60 55 66 56 66 49 47 38 54 39 54 22 36 20 36 40 33 15 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(198,733,o),
(198,696,qs),
(198,659,o),
(244,616,o),
(282,616,qs),
(320,616,o),
(368,658,o),
(368,696,qs),
(368,733,o),
(322,781,o),
(283,781,qs),
(245,781,o)
);
},
{
closed = 1;
nodes = (
(337,722,o),
(337,697,qs),
(337,671,o),
(308,642,o),
(282,642,qs),
(257,642,o),
(229,671,o),
(229,697,qs),
(229,722,o),
(257,754,o),
(283,754,qs),
(309,754,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 3 2 1 2 3 1 128 13 1 8 14 1 10 11 8 10 105 0 11 0 9 4 11 9 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 3 2 1 2 3 1 128 13 1 8 14 1 10 11 8 10 105 0 11 0 9 4 11 9 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 3 2 1 2 3 1 128 13 1 8 14 1 10 11 8 10 105 0 11 0 9 4 11 9 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
68 67 56 55 39 38 74 72 67 78 68 78 62 60 55 66 56 66 49 47 38 54 39 54 22 36 20 36 40 33 15 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = aring;
unicode = 229;
},
{
glyphname = egrave;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(309,636,l),
(347,636,l),
(271,763,l),
(221,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
11 1 8 7 8 133 0 7 3 7 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 43 43 32 32 0 0 43 46 43 46 45 44 32 42 32 42 38 36 0 31 0 31 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(256,636,l),
(294,636,l),
(382,763,l),
(332,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
11 1 8 7 8 133 0 7 3 7 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 43 43 32 32 0 0 43 46 43 46 45 44 32 42 32 42 38 36 0 31 0 31 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(311,763,l),
(279,763,l),
(168,636,l),
(212,636,l),
(294,734,l),
(379,636,l),
(422,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
44 1 7 8 1 76 0 8 7 8 133 12 9 2 7 3 7 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 43 43 32 32 0 0 43 49 43 49 48 47 46 45 32 42 32 42 38 36 0 31 0 31 40 36 20 36 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(359,691,o),
(359,675,qs),
(359,659,o),
(380,636,o),
(398,636,qs),
(417,636,o),
(439,658,o),
(439,675,qs),
(439,692,o),
(417,714,o),
(398,714,qs),
(380,714,o)
);
},
{
closed = 1;
nodes = (
(148,691,o),
(148,675,qs),
(148,659,o),
(169,636,o),
(187,636,qs),
(206,636,o),
(228,658,o),
(228,675,qs),
(228,692,o),
(206,714,o),
(187,714,qs),
(169,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
0 1 4 0 4 1 0 128 12 1 6 11 1 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 46 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 56 55 44 43 32 32 0 0 62 60 55 66 56 66 50 48 43 54 44 54 32 42 32 42 38 36 0 31 0 31 40 36 20 36 15 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(86,636,l),
(124,636,l),
(48,763,l),
(-2,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 2 3 133 0 2 0 2 133 0 0 0 41 77 0 1 1 39 1 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(71,636,l),
(109,636,l),
(197,763,l),
(147,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 2 3 133 0 2 0 2 133 0 0 0 41 77 0 1 1 39 1 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(110,763,l),
(78,763,l),
(-33,636,l),
(11,636,l),
(93,734,l),
(178,636,l),
(221,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 3 1 76 0 3 2 3 133 5 4 2 2 0 2 133 0 0 0 41 77 0 1 1 39 1 78 4 4 4 10 4 10 17 19 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(139,691,o),
(139,675,qs),
(139,659,o),
(160,636,o),
(178,636,qs),
(197,636,o),
(219,658,o),
(219,675,qs),
(219,692,o),
(197,714,o),
(178,714,qs),
(160,714,o)
);
},
{
closed = 1;
nodes = (
(-32,691,o),
(-32,675,qs),
(-32,659,o),
(-11,636,o),
(7,636,qs),
(26,636,o),
(48,658,o),
(48,675,qs),
(48,692,o),
(26,714,o),
(7,714,qs),
(-11,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 46 77 0 0 0 41 77 0 1 1 39 1 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,394,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,342,o),
(499,430,o),
(451,496,o),
(373,534,o),
(316,534,qs),
(254,534,o),
(150,482,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(186,722,o),
(166,695,o),
(158,658,o),
(158,636,q),
(195,636,l),
(194,648,o),
(197,673,o),
(206,694,o),
(223,708,o),
(238,708,qs),
(255,708,o),
(282,684,o),
(310,656,o),
(345,632,o),
(368,632,qs),
(414,632,o),
(451,690,o),
(451,734,q),
(414,734,l),
(414,722,o),
(412,696,o),
(402,675,o),
(385,662,o),
(370,662,qs),
(353,662,o),
(326,686,o),
(298,714,o),
(264,738,o),
(241,738,qs),
(217,738,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 10 1 8 1 6 8 105 0 9 9 5 97 7 12 2 5 5 48 77 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 11 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 12 2 5 0 9 6 5 9 105 0 6 10 1 8 1 6 8 105 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 11 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
27 26 0 0 51 50 46 44 41 39 37 36 32 30 26 55 27 55 0 25 0 25 37 21 35 17 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(307,636,l),
(345,636,l),
(269,763,l),
(219,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
8 1 5 4 5 133 0 4 2 4 133 0 1 1 2 97 7 1 2 2 49 77 6 1 0 0 3 97 0 3 3 50 3 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(274,636,l),
(312,636,l),
(400,763,l),
(350,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
8 1 5 4 5 133 0 4 2 4 133 0 1 1 2 97 7 1 2 2 49 77 6 1 0 0 3 97 0 3 3 50 3 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(321,763,l),
(289,763,l),
(178,636,l),
(222,636,l),
(304,734,l),
(389,636,l),
(432,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
41 1 4 5 1 76 0 5 4 5 133 9 6 2 4 2 4 133 0 1 1 2 97 8 1 2 2 49 77 7 1 0 0 3 97 0 3 3 50 3 78 40 40 21 20 1 0 40 46 40 46 45 44 43 42 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(185,722,o),
(165,695,o),
(157,658,o),
(157,636,q),
(194,636,l),
(193,648,o),
(196,673,o),
(205,694,o),
(222,708,o),
(237,708,qs),
(254,708,o),
(281,684,o),
(309,656,o),
(344,632,o),
(367,632,qs),
(413,632,o),
(450,690,o),
(450,734,q),
(413,734,l),
(413,722,o),
(411,696,o),
(401,675,o),
(384,662,o),
(369,662,qs),
(352,662,o),
(325,686,o),
(297,714,o),
(263,738,o),
(240,738,qs),
(216,738,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 9 1 7 2 5 7 105 0 8 8 4 97 6 12 2 4 4 48 77 0 1 1 2 97 11 1 2 2 49 77 10 1 0 0 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
6 12 2 4 0 8 5 4 8 105 0 5 9 1 7 2 5 7 105 0 1 1 2 97 11 1 2 2 49 77 10 1 0 0 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
41 40 21 20 1 0 65 64 60 58 55 53 51 50 46 44 40 69 41 69 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(368,691,o),
(368,675,qs),
(368,659,o),
(389,636,o),
(407,636,qs),
(426,636,o),
(448,658,o),
(448,675,qs),
(448,692,o),
(426,714,o),
(407,714,qs),
(389,714,o)
);
},
{
closed = 1;
nodes = (
(157,691,o),
(157,675,qs),
(157,659,o),
(178,636,o),
(196,636,qs),
(215,636,o),
(237,658,o),
(237,675,qs),
(237,692,o),
(215,714,o),
(196,714,qs),
(178,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
7 1 5 5 4 97 11 6 10 3 4 4 46 77 0 1 1 2 97 9 1 2 2 49 77 8 1 0 0 3 97 0 3 3 50 3 78 53 52 41 40 21 20 1 0 59 57 52 63 53 63 47 45 40 51 41 51 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(289,636,l),
(327,636,l),
(251,763,l),
(201,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 5 4 5 133 0 4 1 4 133 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 22 22 1 0 22 25 22 25 24 23 16 15 12 10 7 6 0 21 1 21 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(251,636,l),
(289,636,l),
(377,763,l),
(327,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 5 4 5 133 0 4 1 4 133 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 22 22 1 0 22 25 22 25 24 23 16 15 12 10 7 6 0 21 1 21 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(299,763,l),
(267,763,l),
(156,636,l),
(200,636,l),
(282,734,l),
(367,636,l),
(410,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
23 1 4 5 1 76 0 5 4 5 133 8 6 2 4 1 4 133 3 1 1 1 41 77 7 1 0 0 2 97 0 2 2 50 2 78 22 22 1 0 22 28 22 28 27 26 25 24 16 15 12 10 7 6 0 21 1 21 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(354,691,o),
(354,675,qs),
(354,659,o),
(375,636,o),
(393,636,qs),
(412,636,o),
(434,658,o),
(434,675,qs),
(434,692,o),
(412,714,o),
(393,714,qs),
(375,714,o)
);
},
{
closed = 1;
nodes = (
(143,691,o),
(143,675,qs),
(143,659,o),
(164,636,o),
(182,636,qs),
(201,636,o),
(223,658,o),
(223,675,qs),
(223,692,o),
(201,714,o),
(182,714,qs),
(164,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
7 1 5 5 4 97 10 6 9 3 4 4 46 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 35 34 23 22 1 0 41 39 34 45 35 45 29 27 22 33 23 33 16 15 12 10 7 6 0 21 1 21 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,274,ls),
(482,226,o),
(461,138,o),
(414,71,o),
(338,30,o),
(282,29,qs),
(226,29,o),
(159,70,o),
(123,136,o),
(112,222,o),
(112,267,qs),
(112,527,l),
(70,527,l),
(70,241,ls),
(70,191,o),
(89,100,o),
(136,32,o),
(215,-8,o),
(274,-8,qs),
(301,-8,o),
(358,0,o),
(413,25,o),
(463,70,o),
(482,107,q),
(482,-11,ls),
(482,-60,o),
(462,-137,o),
(417,-191,o),
(345,-220,o),
(293,-220,qs),
(244,-220,o),
(152,-189,o),
(111,-160,q),
(92,-196,l),
(134,-228,o),
(241,-258,o),
(294,-258,qs),
(416,-258,o),
(524,-125,o),
(524,-6,qs),
(524,527,l),
(482,527,l)
);
},
{
closed = 1;
nodes = (
(265,636,l),
(303,636,l),
(391,763,l),
(341,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
17 1 4 3 8 7 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
9 1 7 6 7 133 0 6 3 6 133 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 1 7 6 7 133 0 6 3 6 133 0 1 0 0 1 0 101 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
42 42 0 0 42 45 42 45 44 43 0 41 0 41 37 21 41 37 35 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,274,ls),
(482,226,o),
(461,138,o),
(414,71,o),
(338,30,o),
(282,29,qs),
(226,29,o),
(159,70,o),
(123,136,o),
(112,222,o),
(112,267,qs),
(112,527,l),
(70,527,l),
(70,241,ls),
(70,191,o),
(89,100,o),
(136,32,o),
(215,-8,o),
(274,-8,qs),
(301,-8,o),
(358,0,o),
(413,25,o),
(463,70,o),
(482,107,q),
(482,-11,ls),
(482,-60,o),
(462,-137,o),
(417,-191,o),
(345,-220,o),
(293,-220,qs),
(244,-220,o),
(152,-189,o),
(111,-160,q),
(92,-196,l),
(134,-228,o),
(241,-258,o),
(294,-258,qs),
(416,-258,o),
(524,-125,o),
(524,-6,qs),
(524,527,l),
(482,527,l)
);
},
{
closed = 1;
nodes = (
(363,691,o),
(363,675,qs),
(363,659,o),
(384,636,o),
(402,636,qs),
(421,636,o),
(443,658,o),
(443,675,qs),
(443,692,o),
(421,714,o),
(402,714,qs),
(384,714,o)
);
},
{
closed = 1;
nodes = (
(152,691,o),
(152,675,qs),
(152,659,o),
(173,636,o),
(191,636,qs),
(210,636,o),
(232,658,o),
(232,675,qs),
(232,692,o),
(210,714,o),
(191,714,qs),
(173,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
17 1 4 3 8 7 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 7 6 97 12 8 11 3 6 6 46 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 0 1 0 101 9 1 7 7 6 97 12 8 11 3 6 6 46 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
55 54 43 42 0 0 61 59 54 65 55 65 49 47 42 53 43 53 0 41 0 41 37 21 41 37 35 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = OE;
kernLeft = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,627,o),
(633,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(634,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(312,28,o),
(205,80,o),
(134,168,o),
(98,287,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(205,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(624,637,o),
(475,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,563,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,47,o),
(302,-8,o),
(384,-8,qs),
(474,-8,o),
(624,70,o),
(666,152,q),
(666,0,l),
(1108,0,l),
(1108,38,l),
(708,38,l),
(708,332,l),
(1066,332,l),
(1066,370,l),
(708,370,l),
(708,669,l),
(1108,669,l),
(1108,707,l),
(666,707,l),
(666,554,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
48 1 4 3 32 1 6 5 2 76 0 4 0 5 6 4 5 103 10 1 0 0 9 97 0 9 9 46 77 0 3 3 2 95 0 2 2 38 77 0 6 6 7 95 0 7 7 39 77 0 1 1 8 97 0 8 8 47 8 78 1 0 46 44 36 34 31 30 29 28 27 26 25 24 23 22 21 20 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 1162;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(550,329,o),
(579,405,o),
(630,464,o),
(701,498,o),
(746,498,qs),
(792,498,o),
(861,464,o),
(907,406,o),
(932,329,o),
(934,287,q),
(548,287,l)
);
},
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,213,o),
(95,263,qs),
(95,312,o),
(120,398,o),
(171,462,o),
(249,498,o),
(302,498,qs),
(355,498,o),
(433,461,o),
(485,398,o),
(510,312,o),
(510,263,qs),
(510,213,o),
(485,128,o),
(434,65,o),
(355,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(146,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(378,-7,o),
(497,60,o),
(528,132,q),
(557,59,o),
(674,-7,o),
(751,-7,qs),
(781,-7,o),
(845,6,o),
(902,33,o),
(948,76,o),
(961,106,q),
(914,106,l),
(903,85,o),
(867,55,o),
(825,37,o),
(778,29,o),
(756,29,qs),
(703,29,o),
(626,61,o),
(575,120,o),
(549,202,o),
(547,252,q),
(976,252,l),
(976,306,o),
(951,408,o),
(897,486,o),
(811,534,o),
(750,534,qs),
(675,534,o),
(559,460,o),
(530,391,q),
(500,464,o),
(379,534,o),
(302,534,qs),
(240,534,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
34 1 1 0 62 1 8 6 2 76 0 8 6 2 6 8 2 128 11 1 1 0 6 8 1 6 103 3 1 0 0 4 97 5 13 2 4 4 49 77 7 12 2 2 2 9 97 10 1 9 9 50 9 78 32 31 12 11 0 0 66 64 60 58 54 53 49 47 43 42 38 36 31 74 32 74 22 20 11 30 12 30 0 10 0 10 36 14 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,517,l),
(590,517,l),
(590,365,l),
(135,365,l)
);
},
{
closed = 1;
nodes = (
(135,707,l),
(93,707,l),
(93,554,l),
(23,554,l),
(23,517,l),
(93,517,l),
(93,0,l),
(135,0,l),
(135,328,l),
(590,328,l),
(590,0,l),
(632,0,l),
(632,517,l),
(701,517,l),
(701,554,l),
(632,554,l),
(632,707,l),
(590,707,l),
(590,554,l),
(135,554,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
13 11 9 3 3 8 4 2 0 1 3 0 103 12 1 1 0 6 5 1 6 103 10 1 2 2 38 77 7 1 5 5 39 5 78 4 4 0 0 4 23 4 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 0 3 0 3 17 14 8 23 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,270,ls),
(115,315,o),
(140,398,o),
(190,461,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,393,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,343,o),
(498,431,o),
(450,497,o),
(372,534,o),
(316,534,qs),
(250,534,o),
(149,480,o),
(115,423,q),
(115,571,l),
(249,571,l),
(249,606,l),
(115,606,l),
(115,707,l),
(73,707,l),
(73,606,l),
(8,606,l),
(8,571,l),
(73,571,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
11 1 6 7 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 38 77 0 7 7 5 97 0 5 5 49 77 9 8 2 6 6 39 6 78 0 0 0 33 0 33 37 21 35 17 17 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,659,l),
(593,0,l),
(609,0,l),
(609,-34,o),
(604,-93,o),
(582,-136,o),
(536,-161,o),
(494,-161,qs),
(467,-161,l),
(467,-196,l),
(494,-196,ls),
(543,-196,o),
(604,-172,o),
(639,-125,o),
(651,-56,o),
(651,-12,qs),
(651,707,l),
(609,707,l),
(609,49,l),
(154,707,l),
(93,707,l),
(93,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 2 2 4 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
1 1 0 0 38 77 5 1 4 4 39 77 0 3 3 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 2 3 2 101 1 1 0 0 38 77 5 1 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 20 33 37 18 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,392,o),
(478,309,o),
(478,266,qs),
(478,-8,ls),
(478,-41,o),
(472,-98,o),
(448,-138,o),
(402,-161,o),
(362,-161,qs),
(336,-161,l),
(336,-196,l),
(363,-196,ls),
(412,-196,o),
(473,-172,o),
(508,-125,o),
(520,-56,o),
(520,-12,qs),
(520,291,ls),
(520,342,o),
(498,431,o),
(450,496,o),
(372,534,o),
(316,534,qs),
(250,534,o),
(147,480,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 41 77 0 4 4 1 97 0 1 1 49 77 6 1 5 5 39 77 0 3 3 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 0 2 3 2 101 0 0 0 41 77 0 4 4 1 97 0 1 1 49 77 6 1 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 37 0 37 41 33 41 35 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,669,o),
(515,622,o),
(586,538,o),
(621,422,o),
(621,353,qs),
(621,283,o),
(584,167,o),
(511,84,o),
(401,38,o),
(328,38,qs),
(135,38,l),
(135,334,l),
(318,334,l),
(318,372,l),
(135,372,l),
(135,669,l),
(335,669,ls)
);
},
{
closed = 1;
nodes = (
(93,334,l),
(93,0,l),
(336,0,ls),
(417,0,o),
(540,52,o),
(623,145,o),
(665,275,o),
(665,353,qs),
(665,432,o),
(624,562,o),
(541,655,o),
(418,707,o),
(336,707,qs),
(93,707,l),
(93,372,l),
(7,372,l),
(7,334,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
4 1 0 7 1 1 2 0 1 103 8 1 3 3 5 95 0 5 5 38 77 0 2 2 6 95 0 6 6 39 6 78 0 0 33 32 31 29 21 19 18 17 0 16 0 15 33 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(420,461,o),
(471,398,o),
(496,314,o),
(496,266,qs),
(496,218,o),
(468,132,o),
(415,67,o),
(338,29,o),
(288,29,qs),
(230,29,o),
(155,71,o),
(112,138,o),
(95,222,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
},
{
closed = 1;
nodes = (
(494,571,l),
(494,426,l),
(477,456,o),
(430,497,o),
(377,523,o),
(321,534,o),
(295,534,qs),
(238,534,o),
(148,495,o),
(86,424,o),
(53,323,o),
(53,262,qs),
(53,208,o),
(78,110,o),
(133,37,o),
(221,-7,o),
(284,-7,qs),
(311,-7,o),
(371,5,o),
(427,33,o),
(476,79,o),
(494,113,q),
(494,0,l),
(536,0,l),
(536,571,l),
(619,571,l),
(619,606,l),
(536,606,l),
(536,707,l),
(494,707,l),
(494,606,l),
(362,606,l),
(362,571,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
50 30 2 1 0 1 76 4 1 2 9 1 5 8 2 5 103 0 3 3 38 77 10 1 0 0 8 97 0 8 8 49 77 0 6 6 39 77 0 1 1 7 97 0 7 7 50 7 78 1 0 52 51 46 44 36 34 29 28 27 26 25 24 23 22 21 20 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,324,l),
(262,0,l),
(304,0,l),
(304,324,l),
(432,324,l),
(432,359,l),
(304,359,l),
(304,669,l),
(546,669,l),
(546,707,l),
(20,707,l),
(20,669,l),
(262,669,l),
(262,359,l),
(133,359,l),
(133,324,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
4 1 0 7 1 5 6 0 5 103 3 1 1 1 2 95 0 2 2 38 77 0 6 6 39 6 78 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,282,l),
(124,167,ls),
(124,79,o),
(202,0,o),
(284,0,qs),
(322,0,l),
(322,36,l),
(292,36,ls),
(222,36,o),
(166,103,o),
(166,171,qs),
(166,282,l),
(322,282,l),
(322,317,l),
(166,317,l),
(166,492,l),
(322,492,l),
(322,527,l),
(166,527,l),
(166,685,l),
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,317,l),
(31,317,l),
(31,282,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
6 1 0 10 1 7 8 0 7 103 0 3 3 38 77 5 1 1 1 2 95 4 1 2 2 41 77 0 8 8 9 97 0 9 9 39 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 3 133 6 1 0 10 1 7 8 0 7 103 5 1 1 1 2 95 4 1 2 2 41 77 0 8 8 9 97 0 9 9 39 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
27 26 23 21 35 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,822,l),
(468,857,l),
(169,857,l),
(169,822,l)
);
},
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
14 1 6 2 1 76 0 0 0 1 2 0 1 103 0 6 0 4 3 6 4 103 0 2 2 38 77 5 1 3 3 39 3 78 17 17 17 17 17 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(438,662,l),
(438,697,l),
(139,697,l),
(139,662,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 9 9 8 95 0 8 8 38 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 9 9 8 95 0 8 8 38 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 9 9 8 95 0 8 8 38 77 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 2 1 2 3 1 128 0 8 0 9 4 8 9 103 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
39 38 58 57 56 55 49 47 38 54 39 54 22 36 20 36 40 33 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l)
);
},
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(176,866,o),
(202,827,o),
(241,805,o),
(291,796,o),
(318,796,qs),
(345,796,o),
(395,805,o),
(435,828,o),
(462,866,o),
(466,895,q),
(427,895,l),
(419,854,o),
(358,829,o),
(319,829,qs),
(279,829,o),
(219,854,o),
(211,895,q),
(172,895,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 1 4 0 1 76 9 8 2 6 5 6 133 0 5 0 7 0 5 7 105 0 4 0 2 1 4 2 103 0 0 0 38 77 3 1 1 1 39 1 78 11 11 11 28 11 28 36 18 36 17 17 17 17 16 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l)
);
},
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(145,706,o),
(171,667,o),
(210,645,o),
(260,636,o),
(287,636,qs),
(314,636,o),
(364,645,o),
(404,668,o),
(431,706,o),
(435,735,q),
(396,735,l),
(388,694,o),
(327,669,o),
(288,669,qs),
(248,669,o),
(188,694,o),
(180,735,q),
(141,735,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
13 11 2 9 8 9 133 0 3 2 1 2 3 1 128 0 8 0 10 4 8 10 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
13 11 2 9 8 9 133 0 3 2 1 2 3 1 128 0 8 0 10 4 8 10 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
13 11 2 9 8 9 133 0 3 2 1 2 3 1 128 0 8 0 10 4 8 10 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
55 55 39 38 55 72 55 72 68 66 62 61 59 57 49 47 38 54 39 54 22 36 20 36 40 33 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(494,200,l),
(141,200,l),
(318,657,l)
);
},
{
closed = 1;
nodes = (
(663,-164,o),
(640,-169,o),
(631,-168,q),
(596,-168,o),
(554,-133,o),
(554,-97,qs),
(554,-67,o),
(572,-42,qs),
(590,-17,o),
(614,0,q),
(622,0,l),
(341,707,l),
(294,707,l),
(16,0,l),
(64,0,l),
(127,163,l),
(509,163,l),
(573,0,l),
(578,0,l),
(571,-5,o),
(564,-11,qs),
(550,-23,o),
(528,-53,o),
(515,-87,o),
(515,-105,qs),
(515,-155,o),
(580,-201,o),
(626,-201,qs),
(655,-201,o),
(679,-191,q),
(671,-161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
2 1 0 4 33 1 5 3 2 76 22 14 2 3 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 2 3 0 2 103 0 4 4 38 77 0 3 3 39 77 0 5 5 1 97 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 103 0 5 0 1 5 1 101 0 4 4 38 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
24 17 17 26 35 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(440,187,ls),
(440,146,o),
(404,87,o),
(345,46,o),
(273,29,o),
(236,29,qs),
(209,29,o),
(158,43,o),
(119,71,o),
(95,116,o),
(95,147,qs),
(95,185,o),
(129,229,o),
(181,251,o),
(244,256,o),
(273,256,qs),
(440,256,l)
);
},
{
closed = 1;
nodes = (
(527,-164,o),
(504,-169,o),
(495,-168,q),
(460,-168,o),
(418,-133,o),
(418,-97,qs),
(418,-67,o),
(436,-42,qs),
(454,-17,o),
(478,0,q),
(482,0,l),
(482,287,ls),
(482,347,o),
(455,447,o),
(421,481,qs),
(397,505,o),
(324,534,o),
(276,534,qs),
(257,534,o),
(203,528,o),
(148,507,o),
(99,467,o),
(86,432,q),
(133,432,l),
(144,452,o),
(178,478,o),
(217,493,o),
(259,498,o),
(278,498,qs),
(323,497,o),
(385,464,o),
(423,408,o),
(440,333,o),
(440,291,q),
(248,291,ls),
(210,291,o),
(139,277,o),
(85,243,o),
(53,185,o),
(53,142,qs),
(53,98,o),
(90,41,o),
(145,6,o),
(208,-7,o),
(239,-7,qs),
(376,-5,o),
(440,81,q),
(440,0,l),
(442,0,l),
(435,-5,o),
(428,-11,qs),
(414,-23,o),
(392,-53,o),
(379,-87,o),
(379,-105,qs),
(379,-155,o),
(444,-201,o),
(490,-201,qs),
(519,-201,o),
(543,-191,q),
(535,-161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
30 1 1 0 66 28 2 3 1 77 1 8 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 4 9 1 0 1 4 0 103 0 5 5 7 97 0 7 7 49 77 0 1 1 3 97 0 3 3 47 77 0 8 8 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 6 5 4 5 6 4 128 0 4 9 1 0 1 4 0 103 0 5 5 7 97 0 7 7 49 77 0 1 1 3 97 0 3 3 50 77 0 8 8 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 4 5 6 4 128 0 4 9 1 0 1 4 0 103 0 8 0 2 8 2 101 0 5 5 7 97 0 7 7 49 77 0 1 1 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 74 73 60 58 54 53 49 47 43 41 33 31 20 18 11 9 0 16 1 16 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(571,660,o),
(503,697,o),
(422,715,o),
(379,715,qs),
(297,715,o),
(175,659,o),
(94,562,o),
(54,429,o),
(54,353,qs),
(54,275,o),
(92,143,o),
(172,47,o),
(293,-8,o),
(376,-8,qs),
(419,-8,o),
(503,10,o),
(576,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(478,42,o),
(411,28,o),
(378,28,qs),
(305,28,o),
(199,80,o),
(130,170,o),
(96,289,o),
(96,355,qs),
(96,421,o),
(131,538,o),
(201,627,o),
(309,679,o),
(383,679,qs),
(452,679,o)
);
},
{
closed = 1;
nodes = (
(346,796,l),
(384,796,l),
(472,923,l),
(422,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
9 1 7 6 7 133 0 6 4 6 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 40 40 1 0 40 43 40 43 42 41 37 36 32 30 22 20 16 15 11 9 0 39 1 39 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,54,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(249,29,o),
(171,66,o),
(120,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,204,o),
(84,105,o),
(146,33,o),
(238,-7,o),
(300,-7,qs),
(367,-7,o)
);
},
{
closed = 1;
nodes = (
(262,636,l),
(300,636,l),
(388,763,l),
(338,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
9 1 7 6 7 133 0 6 1 6 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 50 0 78 34 34 1 0 34 37 34 37 36 35 31 30 28 26 18 16 14 13 11 9 0 33 1 33 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(571,660,o),
(503,697,o),
(422,715,o),
(379,715,qs),
(297,715,o),
(175,659,o),
(94,562,o),
(54,429,o),
(54,353,qs),
(54,275,o),
(92,143,o),
(172,47,o),
(293,-8,o),
(376,-8,qs),
(419,-8,o),
(503,10,o),
(576,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(478,42,o),
(411,28,o),
(378,28,qs),
(305,28,o),
(199,80,o),
(130,170,o),
(96,289,o),
(96,355,qs),
(96,421,o),
(131,538,o),
(201,627,o),
(309,679,o),
(383,679,qs),
(452,679,o)
);
},
{
closed = 1;
nodes = (
(385,923,l),
(353,923,l),
(242,796,l),
(286,796,l),
(368,894,l),
(453,796,l),
(496,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
41 1 6 7 1 76 0 7 6 7 133 10 8 2 6 4 6 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 40 40 1 0 40 46 40 46 45 44 43 42 37 36 32 30 22 20 16 15 11 9 0 39 1 39 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,54,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(249,29,o),
(171,66,o),
(120,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,204,o),
(84,105,o),
(146,33,o),
(238,-7,o),
(300,-7,qs),
(367,-7,o)
);
},
{
closed = 1;
nodes = (
(310,763,l),
(278,763,l),
(167,636,l),
(211,636,l),
(293,734,l),
(378,636,l),
(421,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
35 1 6 7 1 76 0 7 6 7 133 10 8 2 6 1 6 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 50 0 78 34 34 1 0 34 40 34 40 39 38 37 36 31 30 28 26 18 16 14 13 11 9 0 33 1 33 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(571,660,o),
(503,697,o),
(422,715,o),
(379,715,qs),
(297,715,o),
(175,659,o),
(94,562,o),
(54,429,o),
(54,353,qs),
(54,275,o),
(92,143,o),
(172,47,o),
(293,-8,o),
(376,-8,qs),
(419,-8,o),
(503,10,o),
(576,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(478,42,o),
(411,28,o),
(378,28,qs),
(305,28,o),
(199,80,o),
(130,170,o),
(96,289,o),
(96,355,qs),
(96,421,o),
(131,538,o),
(201,627,o),
(309,679,o),
(383,679,qs),
(452,679,o)
);
},
{
closed = 1;
nodes = (
(338,855,o),
(338,836,qs),
(338,816,o),
(360,796,o),
(377,796,qs),
(394,796,o),
(417,817,o),
(417,836,qs),
(417,854,o),
(395,874,o),
(378,874,qs),
(361,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 6 0 7 4 6 7 105 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 41 40 1 0 47 45 40 51 41 51 37 36 32 30 22 20 16 15 11 9 0 39 1 39 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,54,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(249,29,o),
(171,66,o),
(120,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,204,o),
(84,105,o),
(146,33,o),
(238,-7,o),
(300,-7,qs),
(367,-7,o)
);
},
{
closed = 1;
nodes = (
(262,695,o),
(262,676,qs),
(262,656,o),
(284,636,o),
(301,636,qs),
(318,636,o),
(341,657,o),
(341,676,qs),
(341,694,o),
(319,714,o),
(302,714,qs),
(285,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 7 7 6 97 9 1 6 6 46 77 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 50 0 78 35 34 1 0 41 39 34 45 35 45 31 30 28 26 18 16 14 13 11 9 0 33 1 33 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,620,o),
(594,558,q),
(638,558,l),
(623,600,o),
(571,660,o),
(503,697,o),
(422,715,o),
(379,715,qs),
(297,715,o),
(175,659,o),
(94,562,o),
(54,429,o),
(54,353,qs),
(54,275,o),
(92,143,o),
(172,47,o),
(293,-8,o),
(376,-8,qs),
(419,-8,o),
(503,10,o),
(576,49,o),
(634,108,o),
(651,149,q),
(602,149,l),
(588,117,o),
(539,71,o),
(478,42,o),
(411,28,o),
(378,28,qs),
(305,28,o),
(199,80,o),
(130,170,o),
(96,289,o),
(96,355,qs),
(96,421,o),
(131,538,o),
(201,627,o),
(309,679,o),
(383,679,qs),
(452,679,o)
);
},
{
closed = 1;
nodes = (
(360,796,l),
(392,796,l),
(503,923,l),
(459,923,l),
(377,826,l),
(292,923,l),
(249,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
41 1 7 6 1 76 10 8 2 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 40 40 1 0 40 46 40 46 45 44 43 42 37 36 32 30 22 20 16 15 11 9 0 39 1 39 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 699;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,54,o),
(506,118,q),
(460,118,l),
(440,71,o),
(356,29,o),
(303,29,qs),
(249,29,o),
(171,66,o),
(120,130,o),
(95,214,o),
(95,262,qs),
(95,311,o),
(120,397,o),
(171,461,o),
(248,498,o),
(300,498,qs),
(350,498,o),
(434,455,o),
(451,408,q),
(497,408,l),
(474,471,o),
(371,534,o),
(304,534,qs),
(242,534,o),
(148,493,o),
(85,420,o),
(53,320,o),
(53,262,qs),
(53,204,o),
(84,105,o),
(146,33,o),
(238,-7,o),
(300,-7,qs),
(367,-7,o)
);
},
{
closed = 1;
nodes = (
(284,636,l),
(316,636,l),
(427,763,l),
(383,763,l),
(301,666,l),
(216,763,l),
(173,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
35 1 7 6 1 76 10 8 2 6 7 6 133 0 7 1 7 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 50 0 78 34 34 1 0 34 40 34 40 39 38 37 36 31 30 28 26 18 16 14 13 11 9 0 33 1 33 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,0,ls),
(417,0,o),
(540,52,o),
(623,145,o),
(665,275,o),
(665,353,qs),
(665,432,o),
(623,563,o),
(541,656,o),
(418,707,o),
(336,707,qs),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(407,669,o),
(515,622,o),
(586,537,o),
(621,421,o),
(621,353,qs),
(621,283,o),
(584,167,o),
(510,83,o),
(401,38,o),
(328,38,qs),
(135,38,l),
(135,669,l),
(335,669,ls)
);
},
{
closed = 1;
nodes = (
(320,796,l),
(352,796,l),
(463,923,l),
(419,923,l),
(337,826,l),
(252,923,l),
(209,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
27 1 5 4 1 76 8 6 2 4 5 4 133 0 5 0 5 133 7 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 26 26 13 13 26 32 26 32 31 30 29 28 13 25 13 24 34 40 32 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,690,o),
(576,673,qs),
(576,659,o),
(587,642,o),
(603,634,o),
(621,632,o),
(627,634,q),
(623,604,o),
(589,562,o),
(572,552,q),
(587,532,l),
(621,551,o),
(662,617,o),
(662,658,qs),
(662,684,o),
(638,713,o),
(618,713,qs),
(599,713,o)
);
},
{
closed = 1;
nodes = (
(477,456,o),
(430,497,o),
(377,523,o),
(321,534,o),
(295,534,qs),
(238,534,o),
(148,495,o),
(86,424,o),
(53,323,o),
(53,262,qs),
(53,208,o),
(78,110,o),
(133,37,o),
(221,-7,o),
(284,-7,qs),
(311,-7,o),
(371,5,o),
(427,33,o),
(476,79,o),
(494,113,q),
(494,0,l),
(536,0,l),
(536,707,l),
(494,707,l),
(494,426,l)
);
},
{
closed = 1;
nodes = (
(420,461,o),
(471,398,o),
(496,314,o),
(496,266,qs),
(496,218,o),
(468,132,o),
(415,67,o),
(338,29,o),
(288,29,qs),
(230,29,o),
(155,71,o),
(112,138,o),
(95,222,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
7 1 5 1 6 1 6 5 42 22 2 7 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 1 0 97 2 8 2 0 0 46 77 9 1 6 6 5 97 0 5 5 49 77 0 3 3 39 77 0 7 7 4 97 0 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 2 2 38 77 0 1 1 0 97 8 1 0 0 46 77 9 1 6 6 5 97 0 5 5 49 77 0 3 3 39 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
44 43 1 0 54 52 43 62 44 62 38 36 28 26 21 20 19 18 12 10 0 17 1 17 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(474,822,l),
(474,857,l),
(175,857,l),
(175,822,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 6 0 7 0 6 7 103 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(442,662,l),
(442,697,l),
(143,697,l),
(143,662,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 95 0 7 7 38 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 1 4 0 4 1 0 128 0 7 0 8 3 7 8 103 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
32 32 0 0 46 45 44 43 32 42 32 42 38 36 0 31 0 31 40 36 20 36 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(183,866,o),
(209,827,o),
(248,805,o),
(298,796,o),
(325,796,qs),
(352,796,o),
(402,805,o),
(442,828,o),
(469,866,o),
(473,895,q),
(434,895,l),
(426,854,o),
(365,829,o),
(326,829,qs),
(286,829,o),
(226,854,o),
(218,895,q),
(179,895,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
10 9 2 7 6 7 133 0 6 0 8 0 6 8 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 29 12 29 36 18 35 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(156,706,o),
(182,667,o),
(221,645,o),
(271,636,o),
(298,636,qs),
(325,636,o),
(375,645,o),
(415,668,o),
(442,706,o),
(446,735,q),
(407,735,l),
(399,694,o),
(338,669,o),
(299,669,qs),
(259,669,o),
(199,694,o),
(191,735,q),
(152,735,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
13 10 2 8 7 8 133 0 1 4 0 4 1 0 128 0 7 0 9 3 7 9 105 12 1 6 11 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 43 43 32 32 0 0 43 60 43 60 56 54 50 49 47 45 32 42 32 42 38 36 0 31 0 31 40 36 20 36 14 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(286,855,o),
(286,836,qs),
(286,816,o),
(308,796,o),
(325,796,qs),
(342,796,o),
(365,817,o),
(365,836,qs),
(365,854,o),
(343,874,o),
(326,874,qs),
(309,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
8 1 6 0 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 13 12 19 17 12 23 13 23 17 17 17 17 17 16 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(258,695,o),
(258,676,qs),
(258,656,o),
(280,636,o),
(297,636,qs),
(314,636,o),
(337,657,o),
(337,676,qs),
(337,694,o),
(315,714,o),
(298,714,qs),
(281,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 97 11 1 7 7 46 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 44 43 32 32 0 0 50 48 43 54 44 54 32 42 32 42 38 36 0 31 0 31 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,-164,o),
(387,-169,o),
(378,-168,q),
(343,-168,o),
(301,-133,o),
(301,-97,qs),
(301,-67,o),
(319,-42,qs),
(337,-17,o),
(361,0,q),
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l),
(325,0,l),
(318,-5,o),
(311,-11,qs),
(297,-23,o),
(275,-53,o),
(262,-87,o),
(262,-105,qs),
(262,-155,o),
(327,-201,o),
(373,-201,qs),
(402,-201,o),
(426,-191,q),
(418,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 0 5 6 4 5 103 0 3 3 2 95 0 2 2 38 77 0 6 6 1 95 7 1 1 1 39 77 0 8 8 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 0 5 6 4 5 103 0 8 0 0 8 0 101 0 3 3 2 95 0 2 2 38 77 0 6 6 1 95 7 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
22 17 17 17 17 17 17 24 33 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(384,-164,o),
(361,-169,o),
(352,-168,q),
(317,-168,o),
(275,-133,o),
(275,-97,qs),
(275,-67,o),
(293,-42,qs),
(308,-21,o),
(328,-5,q),
(344,-4,o),
(361,0,qs),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l),
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(190,13,qs),
(232,-5,o),
(289,-7,q),
(285,-11,ls),
(271,-23,o),
(249,-53,o),
(236,-87,o),
(236,-105,qs),
(236,-155,o),
(301,-201,o),
(347,-201,qs),
(376,-201,o),
(400,-191,q),
(392,-161,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
54 9 2 6 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 4 2 3 2 4 3 128 0 3 5 2 3 5 126 9 1 8 0 2 4 8 2 103 0 7 7 1 97 0 1 1 49 77 0 5 5 50 77 0 6 6 0 98 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 4 2 3 2 4 3 128 0 3 5 2 3 5 126 9 1 8 0 2 4 8 2 103 0 6 0 0 6 0 102 0 7 7 1 97 0 1 1 49 77 0 5 5 50 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
55 55 55 65 55 65 61 59 51 50 44 43 38 37 33 31 27 26 22 20 33 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,0,l),
(549,38,l),
(135,38,l),
(135,332,l),
(507,332,l),
(507,370,l),
(135,370,l),
(135,669,l),
(549,669,l),
(549,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(308,796,l),
(340,796,l),
(451,923,l),
(407,923,l),
(325,826,l),
(240,923,l),
(197,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
13 1 7 6 1 76 9 8 2 6 7 6 133 0 7 0 7 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 18 12 18 17 19 17 17 17 17 17 16 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,308,o),
(499,410,o),
(443,488,o),
(358,534,o),
(298,534,qs),
(238,534,o),
(146,491,o),
(84,418,o),
(53,319,o),
(53,263,qs),
(53,204,o),
(83,105,o),
(144,33,o),
(236,-7,o),
(299,-7,qs),
(330,-7,o),
(393,6,o),
(450,33,o),
(496,76,o),
(509,106,q),
(462,106,l),
(451,85,o),
(415,55,o),
(372,37,o),
(326,29,o),
(304,29,qs),
(250,29,o),
(173,62,o),
(123,121,o),
(97,203,o),
(95,252,q),
(524,252,l)
);
},
{
closed = 1;
nodes = (
(98,328,o),
(126,404,o),
(177,463,o),
(248,498,o),
(294,498,qs),
(340,498,o),
(409,464,o),
(456,406,o),
(480,329,o),
(482,287,q),
(96,287,l)
);
},
{
closed = 1;
nodes = (
(278,636,l),
(310,636,l),
(421,763,l),
(377,763,l),
(295,666,l),
(210,763,l),
(167,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
44 1 8 7 1 76 12 9 2 7 8 7 133 0 8 3 8 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 43 43 32 32 0 0 43 49 43 49 48 47 46 45 32 42 32 42 38 36 0 31 0 31 40 36 20 36 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,664,o),
(531,634,o),
(579,589,o),
(593,558,q),
(643,558,l),
(625,601,o),
(570,660,o),
(500,698,o),
(418,715,o),
(373,715,qs),
(292,715,o),
(171,656,o),
(92,556,o),
(53,420,o),
(54,344,qs),
(55,269,o),
(95,141,o),
(175,46,o),
(295,-8,o),
(375,-8,qs),
(442,-8,o),
(552,36,o),
(628,116,o),
(670,227,o),
(670,294,qs),
(670,333,l),
(384,333,l),
(384,296,l),
(632,296,l),
(631,236,o),
(596,137,o),
(531,66,o),
(437,28,o),
(376,28,qs),
(304,28,o),
(199,79,o),
(131,167,o),
(99,284,o),
(99,349,qs),
(99,415,o),
(130,534,o),
(197,625,o),
(302,679,o),
(375,679,qs),
(407,679,o)
);
},
{
closed = 1;
nodes = (
(382,923,l),
(350,923,l),
(239,796,l),
(283,796,l),
(365,894,l),
(450,796,l),
(493,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
46 1 7 8 1 76 0 8 7 8 133 11 9 2 7 5 7 133 0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 10 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 45 45 1 0 45 51 45 51 50 49 48 47 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,452,o),
(432,496,o),
(379,523,o),
(322,534,o),
(295,534,qs),
(237,534,o),
(147,495,o),
(85,424,o),
(53,325,o),
(53,265,qs),
(53,209,o),
(78,110,o),
(134,36,o),
(223,-7,o),
(288,-7,qs),
(318,-7,o),
(377,5,o),
(432,32,o),
(478,76,o),
(494,109,q),
(494,7,ls),
(494,-42,o),
(478,-126,o),
(436,-187,o),
(364,-221,o),
(307,-221,qs),
(283,-221,o),
(232,-212,o),
(186,-191,o),
(149,-158,o),
(139,-133,q),
(92,-133,l),
(104,-166,o),
(145,-213,o),
(200,-243,o),
(267,-257,o),
(303,-257,qs),
(367,-257,o),
(455,-222,o),
(511,-155,o),
(536,-57,o),
(536,6,qs),
(536,527,l),
(497,527,l),
(497,420,l)
);
},
{
closed = 1;
nodes = (
(421,461,o),
(471,397,o),
(496,313,o),
(496,265,qs),
(496,218,o),
(470,133,o),
(419,68,o),
(344,29,o),
(294,29,qs),
(240,29,o),
(164,66,o),
(116,131,o),
(95,217,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
},
{
closed = 1;
nodes = (
(321,763,l),
(289,763,l),
(178,636,l),
(222,636,l),
(304,734,l),
(389,636,l),
(432,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
66 1 8 9 44 24 2 7 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 9 8 9 133 12 10 2 8 5 8 133 0 2 4 3 4 2 3 128 0 0 0 41 77 11 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 9 8 9 133 12 10 2 8 5 8 133 0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 0 0 41 77 11 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
65 65 46 45 65 71 65 71 70 69 68 67 56 54 45 64 46 64 40 41 36 20 37 16 13 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,664,o),
(531,634,o),
(579,589,o),
(593,558,q),
(643,558,l),
(625,601,o),
(570,660,o),
(500,698,o),
(418,715,o),
(373,715,qs),
(292,715,o),
(171,656,o),
(92,556,o),
(53,420,o),
(54,344,qs),
(55,269,o),
(95,141,o),
(175,46,o),
(295,-8,o),
(375,-8,qs),
(442,-8,o),
(552,36,o),
(628,116,o),
(670,227,o),
(670,294,qs),
(670,333,l),
(384,333,l),
(384,296,l),
(632,296,l),
(631,236,o),
(596,137,o),
(531,66,o),
(437,28,o),
(376,28,qs),
(304,28,o),
(199,79,o),
(131,167,o),
(99,284,o),
(99,349,qs),
(99,415,o),
(130,534,o),
(197,625,o),
(302,679,o),
(375,679,qs),
(407,679,o)
);
},
{
closed = 1;
nodes = (
(233,866,o),
(259,827,o),
(298,805,o),
(348,796,o),
(375,796,qs),
(402,796,o),
(452,805,o),
(492,828,o),
(519,866,o),
(523,895,q),
(484,895,l),
(476,854,o),
(415,829,o),
(376,829,qs),
(336,829,o),
(276,854,o),
(268,895,q),
(229,895,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
12 10 2 8 7 8 133 0 6 0 3 0 6 3 128 0 7 0 9 5 7 9 105 0 3 0 2 1 3 2 103 11 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 45 45 1 0 45 62 45 62 58 56 52 51 49 47 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,452,o),
(432,496,o),
(379,523,o),
(322,534,o),
(295,534,qs),
(237,534,o),
(147,495,o),
(85,424,o),
(53,325,o),
(53,265,qs),
(53,209,o),
(78,110,o),
(134,36,o),
(223,-7,o),
(288,-7,qs),
(318,-7,o),
(377,5,o),
(432,32,o),
(478,76,o),
(494,109,q),
(494,7,ls),
(494,-42,o),
(478,-126,o),
(436,-187,o),
(364,-221,o),
(307,-221,qs),
(283,-221,o),
(232,-212,o),
(186,-191,o),
(149,-158,o),
(139,-133,q),
(92,-133,l),
(104,-166,o),
(145,-213,o),
(200,-243,o),
(267,-257,o),
(303,-257,qs),
(367,-257,o),
(455,-222,o),
(511,-155,o),
(536,-57,o),
(536,6,qs),
(536,527,l),
(497,527,l),
(497,420,l)
);
},
{
closed = 1;
nodes = (
(421,461,o),
(471,397,o),
(496,313,o),
(496,265,qs),
(496,218,o),
(470,133,o),
(419,68,o),
(344,29,o),
(294,29,qs),
(240,29,o),
(164,66,o),
(116,131,o),
(95,217,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
},
{
closed = 1;
nodes = (
(164,706,o),
(190,667,o),
(229,645,o),
(279,636,o),
(306,636,qs),
(333,636,o),
(383,645,o),
(423,668,o),
(450,706,o),
(454,735,q),
(415,735,l),
(407,694,o),
(346,669,o),
(307,669,qs),
(267,669,o),
(207,694,o),
(199,735,q),
(160,735,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
44 24 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
13 11 2 9 8 9 133 0 2 4 3 4 2 3 128 0 8 0 10 5 8 10 105 0 0 0 41 77 12 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
13 11 2 9 8 9 133 0 2 4 3 4 2 3 128 0 8 0 10 5 8 10 105 0 3 0 1 3 1 101 0 0 0 41 77 12 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
65 65 46 45 65 82 65 82 78 76 72 71 69 67 56 54 45 64 46 64 40 41 36 20 37 16 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,664,o),
(531,634,o),
(579,589,o),
(593,558,q),
(643,558,l),
(625,601,o),
(570,660,o),
(500,698,o),
(418,715,o),
(373,715,qs),
(292,715,o),
(171,656,o),
(92,556,o),
(53,420,o),
(54,344,qs),
(55,269,o),
(95,141,o),
(175,46,o),
(295,-8,o),
(375,-8,qs),
(442,-8,o),
(552,36,o),
(628,116,o),
(670,227,o),
(670,294,qs),
(670,333,l),
(384,333,l),
(384,296,l),
(632,296,l),
(631,236,o),
(596,137,o),
(531,66,o),
(437,28,o),
(376,28,qs),
(304,28,o),
(199,79,o),
(131,167,o),
(99,284,o),
(99,349,qs),
(99,415,o),
(130,534,o),
(197,625,o),
(302,679,o),
(375,679,qs),
(407,679,o)
);
},
{
closed = 1;
nodes = (
(334,855,o),
(334,836,qs),
(334,816,o),
(356,796,o),
(373,796,qs),
(390,796,o),
(413,817,o),
(413,836,qs),
(413,854,o),
(391,874,o),
(374,874,qs),
(357,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 6 0 3 0 6 3 128 10 1 7 0 8 5 7 8 105 0 3 0 2 1 3 2 103 9 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 46 45 1 0 52 50 45 56 46 56 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,452,o),
(432,496,o),
(379,523,o),
(322,534,o),
(295,534,qs),
(237,534,o),
(147,495,o),
(85,424,o),
(53,325,o),
(53,265,qs),
(53,209,o),
(78,110,o),
(134,36,o),
(223,-7,o),
(288,-7,qs),
(318,-7,o),
(377,5,o),
(432,32,o),
(478,76,o),
(494,109,q),
(494,7,ls),
(494,-42,o),
(478,-126,o),
(436,-187,o),
(364,-221,o),
(307,-221,qs),
(283,-221,o),
(232,-212,o),
(186,-191,o),
(149,-158,o),
(139,-133,q),
(92,-133,l),
(104,-166,o),
(145,-213,o),
(200,-243,o),
(267,-257,o),
(303,-257,qs),
(367,-257,o),
(455,-222,o),
(511,-155,o),
(536,-57,o),
(536,6,qs),
(536,527,l),
(497,527,l),
(497,420,l)
);
},
{
closed = 1;
nodes = (
(421,461,o),
(471,397,o),
(496,313,o),
(496,265,qs),
(496,218,o),
(470,133,o),
(419,68,o),
(344,29,o),
(294,29,qs),
(240,29,o),
(164,66,o),
(116,131,o),
(95,217,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
},
{
closed = 1;
nodes = (
(266,695,o),
(266,676,qs),
(266,656,o),
(288,636,o),
(305,636,qs),
(322,636,o),
(345,657,o),
(345,676,qs),
(345,694,o),
(323,714,o),
(306,714,qs),
(289,714,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
44 24 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 2 4 3 4 2 3 128 0 9 9 8 97 11 1 8 8 46 77 0 0 0 41 77 10 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 9 9 8 97 11 1 8 8 46 77 0 0 0 41 77 10 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
66 65 46 45 72 70 65 76 66 76 56 54 45 64 46 64 40 41 36 20 37 16 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,707,l),
(93,707,l),
(93,0,l),
(135,0,l),
(135,328,l),
(590,328,l),
(590,0,l),
(632,0,l),
(632,707,l),
(590,707,l),
(590,365,l),
(135,365,l)
);
},
{
closed = 1;
nodes = (
(380,923,l),
(348,923,l),
(237,796,l),
(281,796,l),
(363,894,l),
(448,796,l),
(491,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
13 1 6 7 1 76 0 7 6 7 133 10 8 2 6 0 6 133 9 1 5 0 2 1 5 2 103 4 1 0 0 38 77 3 1 1 1 39 1 78 12 12 0 0 12 18 12 18 17 16 15 14 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,394,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,342,o),
(499,430,o),
(451,496,o),
(373,534,o),
(316,534,qs),
(254,534,o),
(150,482,o),
(115,423,q),
(115,707,l),
(73,707,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(299,903,l),
(267,903,l),
(156,776,l),
(200,776,l),
(282,874,l),
(367,776,l),
(410,776,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
27 1 5 6 3 1 2 3 2 76 0 6 5 6 133 9 7 2 5 0 5 133 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 26 26 0 0 26 32 26 32 31 30 29 28 0 25 0 25 37 21 35 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(-3,902,o),
(-23,875,o),
(-31,838,o),
(-31,816,q),
(6,816,l),
(5,828,o),
(8,853,o),
(17,874,o),
(34,888,o),
(49,888,qs),
(66,888,o),
(93,864,o),
(121,836,o),
(156,812,o),
(179,812,qs),
(225,812,o),
(262,870,o),
(262,914,q),
(225,914,l),
(225,902,o),
(223,876,o),
(213,855,o),
(196,842,o),
(181,842,qs),
(164,842,o),
(137,866,o),
(109,894,o),
(75,918,o),
(52,918,qs),
(28,918,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
4 8 2 2 0 6 3 2 6 105 0 3 7 1 5 1 3 5 105 0 1 1 38 77 0 0 0 39 0 78 5 4 29 28 24 22 19 17 15 14 10 8 4 33 5 33 17 16 9 8 24 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(-22,722,o),
(-42,695,o),
(-50,658,o),
(-50,636,q),
(-13,636,l),
(-14,648,o),
(-11,673,o),
(-2,694,o),
(15,708,o),
(30,708,qs),
(47,708,o),
(74,684,o),
(102,656,o),
(137,632,o),
(160,632,qs),
(206,632,o),
(243,690,o),
(243,734,q),
(206,734,l),
(206,722,o),
(204,696,o),
(194,675,o),
(177,662,o),
(162,662,qs),
(145,662,o),
(118,686,o),
(90,714,o),
(56,738,o),
(33,738,qs),
(9,738,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 7 1 5 0 3 5 105 0 6 6 2 97 4 8 2 2 2 48 77 0 0 0 41 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
4 8 2 2 0 6 3 2 6 105 0 3 7 1 5 0 3 5 105 0 0 0 41 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
5 4 29 28 24 22 19 17 15 14 10 8 4 33 5 33 17 16 9 8 24 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(264,822,l),
(264,857,l),
(-35,857,l),
(-35,822,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(213,662,l),
(213,697,l),
(-26,697,l),
(-26,662,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 2 95 0 2 2 38 77 0 0 0 41 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 0 2 3 103 0 0 0 41 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(-29,866,o),
(-3,827,o),
(36,805,o),
(86,796,o),
(113,796,qs),
(140,796,o),
(190,805,o),
(230,828,o),
(257,866,o),
(261,895,q),
(222,895,l),
(214,854,o),
(153,829,o),
(114,829,qs),
(74,829,o),
(14,854,o),
(6,895,q),
(-33,895,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 5 2 3 2 3 133 0 2 0 4 1 2 4 105 0 1 1 38 77 0 0 0 39 0 78 4 4 4 21 4 21 36 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(115,527,l),
(73,527,l),
(73,0,l)
);
},
{
closed = 1;
nodes = (
(-46,706,o),
(-20,667,o),
(16,645,o),
(66,636,o),
(93,636,qs),
(120,636,o),
(170,645,o),
(207,668,o),
(234,706,o),
(238,735,q),
(199,735,l),
(191,694,o),
(133,669,o),
(94,669,qs),
(54,669,o),
(-3,694,o),
(-11,735,q),
(-50,735,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 5 2 3 2 3 133 0 2 0 4 0 2 4 105 0 0 0 41 77 0 1 1 39 1 78 4 4 4 21 4 21 36 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 188;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,-164,o),
(157,-169,o),
(148,-168,q),
(113,-168,o),
(71,-133,o),
(71,-97,qs),
(71,-67,o),
(89,-42,qs),
(107,-17,o),
(131,0,q),
(135,0,l),
(135,707,l),
(93,707,l),
(93,0,l),
(95,0,l),
(88,-5,o),
(81,-11,qs),
(67,-23,o),
(45,-53,o),
(32,-87,o),
(32,-105,qs),
(32,-155,o),
(97,-201,o),
(143,-201,qs),
(172,-201,o),
(196,-191,q),
(188,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
26 15 11 3 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 2 2 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 2 0 0 2 0 101 0 1 1 38 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
24 26 33 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,706,o),
(65,687,qs),
(65,669,o),
(88,648,o),
(105,648,qs),
(123,648,o),
(145,669,o),
(145,687,qs),
(145,704,o),
(123,726,o),
(105,726,qs),
(88,726,o)
);
},
{
closed = 1;
nodes = (
(170,-164,o),
(147,-169,o),
(138,-168,q),
(103,-168,o),
(61,-133,o),
(61,-97,qs),
(61,-67,o),
(79,-42,qs),
(97,-17,o),
(121,0,q),
(125,0,l),
(125,527,l),
(83,527,l),
(83,0,l),
(85,0,l),
(78,-5,o),
(71,-11,qs),
(57,-23,o),
(35,-53,o),
(22,-87,o),
(22,-105,qs),
(22,-155,o),
(87,-201,o),
(133,-201,qs),
(162,-201,o),
(186,-191,q),
(178,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
38 27 23 3 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 97 5 1 0 0 48 77 0 3 3 41 77 0 4 4 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 0 2 4 2 101 0 1 1 0 97 5 1 0 0 48 77 0 3 3 41 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 0 2 4 2 101 0 1 1 0 97 5 1 0 0 46 77 0 3 3 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 0 0 1 3 0 1 105 0 4 0 2 4 2 101 0 3 3 41 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 35 34 26 25 15 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(74,855,o),
(74,836,qs),
(74,816,o),
(96,796,o),
(113,796,qs),
(130,796,o),
(153,817,o),
(153,836,qs),
(153,854,o),
(131,874,o),
(114,874,qs),
(97,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,707,l),
(93,0,l),
(135,0,l),
(135,707,l)
);
},
{
closed = 1;
nodes = (
(199,71,o),
(306,-8,o),
(392,-8,qs),
(457,-8,o),
(538,34,o),
(583,103,o),
(598,190,o),
(598,235,qs),
(598,707,l),
(555,707,l),
(555,243,ls),
(555,200,o),
(543,122,o),
(508,63,o),
(445,28,o),
(395,28,qs),
(325,28,o),
(244,92,o),
(233,161,q),
(186,161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
6 1 5 1 2 1 5 2 128 3 1 1 1 38 77 0 0 0 39 77 0 2 2 4 97 0 4 4 47 4 78 4 4 4 23 4 23 37 21 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,706,o),
(65,687,qs),
(65,669,o),
(88,648,o),
(105,648,qs),
(123,648,o),
(145,669,o),
(145,687,qs),
(145,704,o),
(123,726,o),
(105,726,qs),
(88,726,o)
);
},
{
closed = 1;
nodes = (
(125,0,l),
(125,527,l),
(83,527,l),
(83,0,l)
);
},
{
closed = 1;
nodes = (
(269,706,o),
(269,687,qs),
(269,669,o),
(291,648,o),
(308,648,qs),
(327,648,o),
(349,669,o),
(349,687,qs),
(349,704,o),
(328,726,o),
(309,726,qs),
(292,726,o)
);
},
{
closed = 1;
nodes = (
(286,527,l),
(286,-8,ls),
(286,-41,o),
(280,-97,o),
(256,-138,o),
(210,-161,o),
(170,-161,qs),
(152,-161,l),
(152,-196,l),
(171,-196,ls),
(222,-196,o),
(284,-170,o),
(317,-122,o),
(328,-54,o),
(328,-12,qs),
(328,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
5 1 1 1 0 97 10 4 9 3 0 0 48 77 8 1 2 2 41 77 0 3 3 39 77 0 7 7 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 6 7 6 101 5 1 1 1 0 97 10 4 9 3 0 0 48 77 8 1 2 2 41 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 6 7 6 101 5 1 1 1 0 97 10 4 9 3 0 0 46 77 8 1 2 2 41 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
10 4 9 3 0 5 1 1 2 0 1 105 0 7 0 6 7 6 101 8 1 2 2 41 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
17 16 1 0 43 42 37 35 34 32 23 21 16 27 17 27 15 14 13 12 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = ij;
unicode = 307;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,71,o),
(168,-8,o),
(254,-8,qs),
(319,-8,o),
(400,34,o),
(445,103,o),
(460,190,o),
(460,235,qs),
(460,707,l),
(417,707,l),
(417,243,ls),
(417,200,o),
(405,122,o),
(370,63,o),
(307,28,o),
(257,28,qs),
(187,28,o),
(106,92,o),
(95,161,q),
(48,161,l)
);
},
{
closed = 1;
nodes = (
(450,923,l),
(418,923,l),
(307,796,l),
(351,796,l),
(433,894,l),
(518,796,l),
(561,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
21 1 4 5 1 76 0 5 4 5 133 8 6 2 4 1 4 133 7 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 20 20 0 0 20 26 20 26 25 24 23 22 0 19 0 19 37 21 34 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,527,l),
(116,-8,ls),
(116,-41,o),
(110,-97,o),
(86,-138,o),
(40,-161,o),
(0,-161,qs),
(-18,-161,l),
(-18,-196,l),
(1,-196,ls),
(52,-196,o),
(114,-170,o),
(147,-122,o),
(158,-54,o),
(158,-12,qs),
(158,527,l)
);
},
{
closed = 1;
nodes = (
(149,763,l),
(117,763,l),
(6,636,l),
(50,636,l),
(132,734,l),
(217,636,l),
(260,636,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
17 1 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 3 4 133 6 5 2 3 2 3 133 0 2 2 41 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 4 3 4 133 6 5 2 3 2 3 133 0 1 0 0 1 0 101 0 2 2 41 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
16 16 16 22 16 22 17 19 21 33 36 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,246,l),
(260,246,l),
(438,0,l),
(486,0,l),
(292,273,l),
(468,527,l),
(421,527,l),
(252,281,l),
(115,281,l),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l),
(549,0,l)
);
},
{
closed = 1;
nodes = (
(99,796,l),
(137,796,l),
(225,923,l),
(175,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 4 3 4 133 0 3 0 3 133 0 0 0 38 77 0 1 1 2 95 5 1 2 2 39 2 78 6 6 0 0 6 9 6 9 8 7 0 5 0 5 17 17 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,707,l),
(75,707,l),
(75,0,l),
(117,0,l)
);
},
{
closed = 1;
nodes = (
(77,796,l),
(115,796,l),
(203,923,l),
(153,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
5 1 3 2 3 133 0 2 0 2 133 0 0 0 38 77 4 1 1 1 39 1 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 192;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l),
(549,0,l)
);
},
{
closed = 1;
nodes = (
(269,688,o),
(269,671,qs),
(269,657,o),
(280,640,o),
(296,632,o),
(314,630,o),
(320,632,q),
(316,602,o),
(282,560,o),
(265,550,q),
(280,530,l),
(314,549,o),
(355,615,o),
(355,656,qs),
(355,682,o),
(331,711,o),
(311,711,qs),
(292,711,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
13 12 2 1 4 1 76 0 4 4 0 97 6 3 2 0 0 38 77 0 1 1 2 95 5 1 2 2 39 2 78 7 6 0 0 18 16 6 23 7 23 0 5 0 5 17 17 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,707,l),
(75,707,l),
(75,0,l),
(117,0,l)
);
},
{
closed = 1;
nodes = (
(165,689,o),
(165,672,qs),
(165,658,o),
(176,641,o),
(192,633,o),
(210,631,o),
(216,633,q),
(212,603,o),
(178,561,o),
(161,551,q),
(176,531,l),
(210,550,o),
(251,616,o),
(251,657,qs),
(251,683,o),
(227,712,o),
(207,712,qs),
(188,712,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 10 2 1 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 3 0 97 5 2 2 0 0 38 77 4 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 38 77 0 3 3 2 97 5 1 2 2 46 77 4 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
5 4 0 0 16 14 4 21 5 21 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 226;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l),
(549,0,l)
);
},
{
closed = 1;
nodes = (
(310,379,o),
(310,362,qs),
(310,343,o),
(332,323,o),
(350,323,qs),
(369,323,o),
(389,344,o),
(389,362,qs),
(389,379,o),
(369,400,o),
(350,400,qs),
(331,400,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
6 1 3 0 4 1 3 4 105 0 0 0 38 77 0 1 1 2 95 5 1 2 2 39 2 78 7 6 0 0 13 11 6 17 7 17 0 5 0 5 17 17 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,707,l),
(75,707,l),
(75,0,l),
(117,0,l)
);
},
{
closed = 1;
nodes = (
(158,371,o),
(158,354,qs),
(158,335,o),
(180,315,o),
(198,315,qs),
(217,315,o),
(237,336,o),
(237,354,qs),
(237,371,o),
(217,392,o),
(198,392,qs),
(179,392,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 2 0 3 1 2 3 105 0 0 0 38 77 4 1 1 1 39 1 78 5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 207;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,38,l),
(135,38,l),
(135,309,l),
(315,429,l),
(294,461,l),
(135,355,l),
(135,707,l),
(93,707,l),
(93,327,l),
(0,265,l),
(21,234,l),
(93,281,l),
(93,0,l),
(549,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
10 9 8 7 4 3 2 1 8 1 0 1 76 0 0 0 38 77 0 1 1 2 95 3 1 2 2 39 2 78 0 0 0 13 0 13 21 21 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,345,l),
(230,420,l),
(209,451,l),
(117,390,l),
(117,707,l),
(75,707,l),
(75,362,l),
(-35,289,l),
(-14,257,l),
(75,317,l),
(75,0,l),
(117,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 8 7 4 3 2 1 8 1 0 1 76 0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 11 0 11 21 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 192;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,659,l),
(593,0,l),
(651,0,l),
(651,707,l),
(609,707,l),
(609,49,l),
(154,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(343,796,l),
(381,796,l),
(469,923,l),
(419,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
7 2 2 2 0 1 76 6 1 5 4 5 133 0 4 0 4 133 1 1 0 0 38 77 3 1 2 2 39 2 78 10 10 10 13 10 13 18 18 17 18 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,394,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,342,o),
(499,430,o),
(451,496,o),
(373,534,o),
(316,534,qs),
(254,534,o),
(150,482,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(268,636,l),
(306,636,l),
(394,763,l),
(344,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
3 1 2 3 1 76 8 1 6 5 6 133 0 5 1 5 133 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 7 4 2 2 2 39 2 78 26 26 0 0 26 29 26 29 28 27 0 25 0 25 37 21 35 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,659,l),
(593,0,l),
(651,0,l),
(651,707,l),
(609,707,l),
(609,49,l),
(154,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(368,796,l),
(400,796,l),
(511,923,l),
(467,923,l),
(385,826,l),
(300,923,l),
(257,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
11 1 5 4 7 2 2 2 0 2 76 7 6 2 4 5 4 133 0 5 0 5 133 1 1 0 0 38 77 3 1 2 2 39 2 78 10 10 10 16 10 16 17 19 18 17 18 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,394,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,342,o),
(499,430,o),
(451,496,o),
(373,534,o),
(316,534,qs),
(254,534,o),
(150,482,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(288,636,l),
(320,636,l),
(431,763,l),
(387,763,l),
(305,666,l),
(220,763,l),
(177,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
27 1 6 5 3 1 2 3 2 76 9 7 2 5 6 5 133 0 6 1 6 133 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 26 26 0 0 26 32 26 32 31 30 29 28 0 25 0 25 37 21 35 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,268,ls),
(117,314,o),
(142,397,o),
(192,460,o),
(267,498,o),
(317,498,qs),
(369,498,o),
(433,458,o),
(468,394,o),
(480,310,o),
(480,267,qs),
(480,0,l),
(522,0,l),
(522,292,ls),
(522,342,o),
(501,430,o),
(453,496,o),
(375,534,o),
(318,534,qs),
(256,534,o),
(152,482,o),
(117,423,q),
(117,527,l),
(75,527,l),
(75,0,l),
(117,0,l)
);
},
{
closed = 1;
nodes = (
(-26,689,o),
(-26,672,qs),
(-26,658,o),
(-15,641,o),
(1,633,o),
(19,631,o),
(25,633,q),
(21,603,o),
(-13,561,o),
(-30,551,q),
(-15,531,l),
(19,550,o),
(60,616,o),
(60,657,qs),
(60,683,o),
(36,712,o),
(16,712,qs),
(-3,712,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
33 1 1 6 32 1 0 1 3 1 2 3 3 76 0 6 6 5 97 8 1 5 5 46 77 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 7 4 2 2 2 39 2 78 27 26 0 0 38 36 26 43 27 43 0 25 0 25 37 21 35 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(533,822,l),
(533,857,l),
(234,857,l),
(234,822,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 4 0 5 1 4 5 103 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(455,662,l),
(455,697,l),
(156,697,l),
(156,662,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 4 95 0 4 4 38 77 0 1 1 2 97 7 1 2 2 49 77 6 1 0 0 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 5 2 4 5 103 0 1 1 2 97 7 1 2 2 49 77 6 1 0 0 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(240,866,o),
(266,827,o),
(305,805,o),
(355,796,o),
(382,796,qs),
(409,796,o),
(459,805,o),
(499,828,o),
(526,866,o),
(530,895,q),
(491,895,l),
(483,854,o),
(422,829,o),
(383,829,qs),
(343,829,o),
(283,854,o),
(275,895,q),
(236,895,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
10 7 2 5 4 5 133 0 4 0 6 1 4 6 105 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 40 40 21 20 1 0 40 57 40 57 53 51 47 46 44 42 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(162,706,o),
(188,667,o),
(227,645,o),
(277,636,o),
(304,636,qs),
(331,636,o),
(381,645,o),
(421,668,o),
(448,706,o),
(452,735,q),
(413,735,l),
(405,694,o),
(344,669,o),
(305,669,qs),
(265,669,o),
(205,694,o),
(197,735,q),
(158,735,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
10 7 2 5 4 5 133 0 4 0 6 2 4 6 105 0 1 1 2 97 9 1 2 2 49 77 8 1 0 0 3 97 0 3 3 50 3 78 40 40 21 20 1 0 40 57 40 57 53 51 47 46 44 42 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(671,143,o),
(713,275,o),
(713,353,qs),
(713,431,o),
(671,563,o),
(589,660,o),
(465,715,o),
(384,715,qs),
(302,715,o),
(179,660,o),
(96,564,o),
(54,431,o),
(54,353,qs),
(54,275,o),
(96,143,o),
(179,46,o),
(302,-8,o),
(384,-8,qs),
(465,-8,o)
);
},
{
closed = 1;
nodes = (
(563,627,o),
(634,538,o),
(668,420,o),
(668,353,qs),
(668,285,o),
(633,167,o),
(563,79,o),
(456,28,o),
(384,28,qs),
(313,28,o),
(206,79,o),
(134,168,o),
(98,286,o),
(98,353,qs),
(98,420,o),
(133,538,o),
(204,627,o),
(312,679,o),
(384,679,qs),
(456,679,o)
);
},
{
closed = 1;
nodes = (
(292,796,l),
(330,796,l),
(418,923,l),
(368,923,l)
);
},
{
closed = 1;
nodes = (
(412,796,l),
(450,796,l),
(538,923,l),
(488,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
11 7 10 3 5 6 1 4 1 5 4 103 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 44 44 40 40 21 20 1 0 44 47 44 47 46 45 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,65,o),
(119,128,o),
(95,214,o),
(95,263,qs),
(95,312,o),
(119,397,o),
(170,461,o),
(248,498,o),
(302,498,qs),
(356,498,o),
(434,461,o),
(485,397,o),
(510,312,o),
(510,263,qs),
(510,214,o),
(485,128,o),
(434,65,o),
(356,29,o),
(302,29,qs),
(248,29,o)
);
},
{
closed = 1;
nodes = (
(147,494,o),
(84,422,o),
(53,322,o),
(53,263,qs),
(53,204,o),
(84,105,o),
(147,33,o),
(240,-7,o),
(302,-7,qs),
(363,-7,o),
(457,33,o),
(520,105,o),
(552,204,o),
(552,263,qs),
(552,322,o),
(520,422,o),
(457,494,o),
(363,534,o),
(302,534,qs),
(240,534,o)
);
},
{
closed = 1;
nodes = (
(215,636,l),
(253,636,l),
(341,763,l),
(291,763,l)
);
},
{
closed = 1;
nodes = (
(335,636,l),
(373,636,l),
(461,763,l),
(411,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
11 7 10 3 5 6 1 4 2 5 4 103 0 1 1 2 97 9 1 2 2 49 77 8 1 0 0 3 97 0 3 3 50 3 78 44 44 40 40 21 20 1 0 44 47 44 47 46 45 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,0,l),
(579,0,l),
(421,293,l),
(507,312,o),
(595,415,o),
(595,495,qs),
(595,554,o),
(559,635,o),
(495,685,o),
(405,707,o),
(350,707,qs),
(93,707,l),
(93,0,l),
(135,0,l),
(135,286,l),
(377,286,l)
);
},
{
closed = 1;
nodes = (
(135,669,l),
(340,669,ls),
(385,669,o),
(462,654,o),
(519,615,o),
(551,549,o),
(551,498,qs),
(551,444,o),
(513,375,o),
(449,337,o),
(366,323,o),
(322,323,qs),
(135,323,l)
);
},
{
closed = 1;
nodes = (
(284,796,l),
(322,796,l),
(410,923,l),
(360,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
12 1 3 4 1 76 10 1 7 6 7 133 0 6 1 6 133 9 1 4 8 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 29 29 17 16 0 0 29 32 29 32 31 30 27 25 16 28 17 28 0 15 0 15 24 33 17 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,253,ls),
(115,305,o),
(140,394,o),
(191,458,o),
(271,494,o),
(327,494,qs),
(334,494,l),
(334,530,l),
(324,530,ls),
(296,530,o),
(235,521,o),
(178,494,o),
(129,447,o),
(113,409,q),
(113,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(166,636,l),
(204,636,l),
(292,763,l),
(242,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
3 1 3 2 1 76 7 1 5 4 5 133 0 4 0 4 133 0 2 2 0 97 1 1 0 0 41 77 6 1 3 3 39 3 78 18 18 0 0 18 21 18 21 20 19 0 17 0 17 33 37 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,0,l),
(579,0,l),
(421,293,l),
(507,312,o),
(595,415,o),
(595,495,qs),
(595,554,o),
(559,635,o),
(495,685,o),
(405,707,o),
(350,707,qs),
(93,707,l),
(93,0,l),
(135,0,l),
(135,286,l),
(377,286,l)
);
},
{
closed = 1;
nodes = (
(135,669,l),
(340,669,ls),
(385,669,o),
(462,654,o),
(519,615,o),
(551,549,o),
(551,498,qs),
(551,444,o),
(513,375,o),
(449,337,o),
(366,323,o),
(322,323,qs),
(135,323,l)
);
},
{
closed = 1;
nodes = (
(310,796,l),
(342,796,l),
(453,923,l),
(409,923,l),
(327,826,l),
(242,923,l),
(199,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
30 1 7 6 12 1 3 4 2 76 11 8 2 6 7 6 133 0 7 1 7 133 10 1 4 9 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 29 29 17 16 0 0 29 35 29 35 34 33 32 31 27 25 16 28 17 28 0 15 0 15 24 33 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,253,ls),
(115,305,o),
(140,394,o),
(191,458,o),
(271,494,o),
(327,494,qs),
(334,494,l),
(334,530,l),
(324,530,ls),
(296,530,o),
(235,521,o),
(178,494,o),
(129,447,o),
(113,409,q),
(113,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(195,636,l),
(227,636,l),
(338,763,l),
(294,763,l),
(212,666,l),
(127,763,l),
(84,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
19 1 5 4 3 1 3 2 2 76 8 6 2 4 5 4 133 0 5 0 5 133 0 2 2 0 97 1 1 0 0 41 77 7 1 3 3 39 3 78 18 18 0 0 18 24 18 24 23 22 21 20 0 17 0 17 33 37 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,667,o),
(463,639,o),
(502,594,o),
(511,562,q),
(556,562,l),
(547,604,o),
(503,662,o),
(441,699,o),
(364,715,o),
(324,715,qs),
(278,715,o),
(191,695,o),
(124,651,o),
(83,580,o),
(83,528,qs),
(83,480,o),
(119,418,o),
(178,377,o),
(251,353,o),
(288,344,qs),
(314,337,o),
(371,322,o),
(401,313,qs),
(429,305,o),
(478,284,o),
(514,253,o),
(534,208,o),
(534,176,qs),
(534,137,o),
(499,81,o),
(442,45,o),
(369,28,o),
(332,28,qs),
(299,28,o),
(234,41,o),
(175,70,o),
(126,116,o),
(110,149,q),
(63,149,l),
(78,105,o),
(133,46,o),
(206,8,o),
(291,-8,o),
(335,-8,qs),
(381,-8,o),
(468,13,o),
(537,59,o),
(579,133,o),
(579,187,qs),
(579,219,o),
(556,270,o),
(517,309,o),
(463,338,o),
(433,347,qs),
(395,359,o),
(313,381,o),
(271,392,qs),
(242,400,o),
(190,421,o),
(151,454,o),
(129,501,o),
(129,535,qs),
(129,577,o),
(166,632,o),
(222,665,o),
(290,679,o),
(323,679,qs),
(352,679,o)
);
},
{
closed = 1;
nodes = (
(299,796,l),
(337,796,l),
(425,923,l),
(375,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
9 1 7 6 7 133 0 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 68 68 1 0 68 71 68 71 70 69 63 62 58 56 35 33 29 28 24 22 0 67 1 67 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,490,o),
(354,472,o),
(386,444,o),
(395,425,q),
(437,425,l),
(428,454,o),
(390,495,o),
(339,522,o),
(280,534,o),
(251,534,qs),
(215,534,o),
(145,521,o),
(91,488,o),
(58,434,o),
(58,393,qs),
(58,350,o),
(94,297,o),
(150,264,o),
(219,248,o),
(252,242,qs),
(266,240,o),
(295,234,o),
(309,231,qs),
(328,226,o),
(367,214,o),
(399,192,o),
(418,159,o),
(418,134,qs),
(418,102,o),
(387,61,o),
(340,38,o),
(283,29,o),
(257,29,qs),
(234,29,o),
(186,37,o),
(141,55,o),
(102,86,o),
(90,109,q),
(43,109,l),
(53,78,o),
(99,34,o),
(157,6,o),
(224,-7,o),
(256,-7,qs),
(292,-7,o),
(365,7,o),
(423,40,o),
(459,96,o),
(459,139,qs),
(459,193,o),
(394,249,o),
(342,262,qs),
(310,270,o),
(243,281,o),
(211,289,qs),
(191,293,o),
(151,308,o),
(119,333,o),
(99,368,o),
(99,394,qs),
(99,429,o),
(130,471,o),
(177,492,o),
(229,498,o),
(250,498,qs),
(271,498,o)
);
},
{
closed = 1;
nodes = (
(225,636,l),
(263,636,l),
(351,763,l),
(301,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
9 1 7 6 7 133 0 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 66 66 1 0 66 69 66 69 68 67 61 60 56 54 33 31 27 26 22 20 0 65 1 65 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,667,o),
(463,639,o),
(502,594,o),
(511,562,q),
(556,562,l),
(547,604,o),
(503,662,o),
(441,699,o),
(364,715,o),
(324,715,qs),
(278,715,o),
(191,695,o),
(124,651,o),
(83,580,o),
(83,528,qs),
(83,480,o),
(119,418,o),
(178,377,o),
(251,353,o),
(288,344,qs),
(314,337,o),
(371,322,o),
(401,313,qs),
(429,305,o),
(478,284,o),
(514,253,o),
(534,208,o),
(534,176,qs),
(534,137,o),
(499,81,o),
(442,45,o),
(369,28,o),
(332,28,qs),
(299,28,o),
(234,41,o),
(175,70,o),
(126,116,o),
(110,149,q),
(63,149,l),
(78,105,o),
(133,46,o),
(206,8,o),
(291,-8,o),
(335,-8,qs),
(381,-8,o),
(468,13,o),
(537,59,o),
(579,133,o),
(579,187,qs),
(579,219,o),
(556,270,o),
(517,309,o),
(463,338,o),
(433,347,qs),
(395,359,o),
(313,381,o),
(271,392,qs),
(242,400,o),
(190,421,o),
(151,454,o),
(129,501,o),
(129,535,qs),
(129,577,o),
(166,632,o),
(222,665,o),
(290,679,o),
(323,679,qs),
(352,679,o)
);
},
{
closed = 1;
nodes = (
(344,923,l),
(312,923,l),
(201,796,l),
(245,796,l),
(327,894,l),
(412,796,l),
(455,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
69 1 6 7 1 76 0 7 6 7 133 10 8 2 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 68 68 1 0 68 74 68 74 73 72 71 70 63 62 58 56 35 33 29 28 24 22 0 67 1 67 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,490,o),
(354,472,o),
(386,444,o),
(395,425,q),
(437,425,l),
(428,454,o),
(390,495,o),
(339,522,o),
(280,534,o),
(251,534,qs),
(215,534,o),
(145,521,o),
(91,488,o),
(58,434,o),
(58,393,qs),
(58,350,o),
(94,297,o),
(150,264,o),
(219,248,o),
(252,242,qs),
(266,240,o),
(295,234,o),
(309,231,qs),
(328,226,o),
(367,214,o),
(399,192,o),
(418,159,o),
(418,134,qs),
(418,102,o),
(387,61,o),
(340,38,o),
(283,29,o),
(257,29,qs),
(234,29,o),
(186,37,o),
(141,55,o),
(102,86,o),
(90,109,q),
(43,109,l),
(53,78,o),
(99,34,o),
(157,6,o),
(224,-7,o),
(256,-7,qs),
(292,-7,o),
(365,7,o),
(423,40,o),
(459,96,o),
(459,139,qs),
(459,193,o),
(394,249,o),
(342,262,qs),
(310,270,o),
(243,281,o),
(211,289,qs),
(191,293,o),
(151,308,o),
(119,333,o),
(99,368,o),
(99,394,qs),
(99,429,o),
(130,471,o),
(177,492,o),
(229,498,o),
(250,498,qs),
(271,498,o)
);
},
{
closed = 1;
nodes = (
(271,763,l),
(239,763,l),
(128,636,l),
(172,636,l),
(254,734,l),
(339,636,l),
(382,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
67 1 6 7 1 76 0 7 6 7 133 10 8 2 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 66 66 1 0 66 72 66 72 71 70 69 68 61 60 56 54 33 31 27 26 22 20 0 65 1 65 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,667,o),
(463,639,o),
(502,594,o),
(511,562,q),
(556,562,l),
(547,604,o),
(503,662,o),
(441,699,o),
(364,715,o),
(324,715,qs),
(278,715,o),
(191,695,o),
(124,651,o),
(83,580,o),
(83,528,qs),
(83,480,o),
(119,418,o),
(178,377,o),
(251,353,o),
(288,344,qs),
(314,337,o),
(371,322,o),
(401,313,qs),
(429,305,o),
(478,284,o),
(514,253,o),
(534,208,o),
(534,176,qs),
(534,137,o),
(499,81,o),
(442,45,o),
(369,28,o),
(332,28,qs),
(299,28,o),
(234,41,o),
(175,70,o),
(126,116,o),
(110,149,q),
(63,149,l),
(78,105,o),
(133,46,o),
(206,8,o),
(291,-8,o),
(335,-8,qs),
(381,-8,o),
(468,13,o),
(537,59,o),
(579,133,o),
(579,187,qs),
(579,219,o),
(556,270,o),
(517,309,o),
(463,338,o),
(433,347,qs),
(395,359,o),
(313,381,o),
(271,392,qs),
(242,400,o),
(190,421,o),
(151,454,o),
(129,501,o),
(129,535,qs),
(129,577,o),
(166,632,o),
(222,665,o),
(290,679,o),
(323,679,qs),
(352,679,o)
);
},
{
closed = 1;
nodes = (
(314,796,l),
(346,796,l),
(457,923,l),
(413,923,l),
(331,826,l),
(246,923,l),
(203,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
69 1 7 6 1 76 10 8 2 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 68 68 1 0 68 74 68 74 73 72 71 70 63 62 58 56 35 33 29 28 24 22 0 67 1 67 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,490,o),
(354,472,o),
(386,444,o),
(395,425,q),
(437,425,l),
(428,454,o),
(390,495,o),
(339,522,o),
(280,534,o),
(251,534,qs),
(215,534,o),
(145,521,o),
(91,488,o),
(58,434,o),
(58,393,qs),
(58,350,o),
(94,297,o),
(150,264,o),
(219,248,o),
(252,242,qs),
(266,240,o),
(295,234,o),
(309,231,qs),
(328,226,o),
(367,214,o),
(399,192,o),
(418,159,o),
(418,134,qs),
(418,102,o),
(387,61,o),
(340,38,o),
(283,29,o),
(257,29,qs),
(234,29,o),
(186,37,o),
(141,55,o),
(102,86,o),
(90,109,q),
(43,109,l),
(53,78,o),
(99,34,o),
(157,6,o),
(224,-7,o),
(256,-7,qs),
(292,-7,o),
(365,7,o),
(423,40,o),
(459,96,o),
(459,139,qs),
(459,193,o),
(394,249,o),
(342,262,qs),
(310,270,o),
(243,281,o),
(211,289,qs),
(191,293,o),
(151,308,o),
(119,333,o),
(99,368,o),
(99,394,qs),
(99,429,o),
(130,471,o),
(177,492,o),
(229,498,o),
(250,498,qs),
(271,498,o)
);
},
{
closed = 1;
nodes = (
(242,636,l),
(274,636,l),
(385,763,l),
(341,763,l),
(259,666,l),
(174,763,l),
(131,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
67 1 7 6 1 76 10 8 2 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 66 66 1 0 66 72 66 72 71 70 69 68 61 60 56 54 33 31 27 26 22 20 0 65 1 65 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcaron;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,707,l),
(20,669,l),
(262,669,l),
(262,0,l),
(304,0,l),
(304,669,l),
(546,669,l),
(546,707,l)
);
},
{
closed = 1;
nodes = (
(268,796,l),
(300,796,l),
(411,923,l),
(367,923,l),
(285,826,l),
(200,923,l),
(157,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
9 1 5 4 1 76 7 6 2 4 5 4 133 0 5 3 5 133 2 1 0 0 3 95 0 3 3 38 77 0 1 1 39 1 78 8 8 8 14 8 14 17 19 17 17 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,685,l),
(124,527,l),
(31,527,l),
(31,492,l),
(124,492,l),
(124,167,ls),
(124,79,o),
(202,0,o),
(284,0,qs),
(327,0,l),
(327,36,l),
(292,36,ls),
(222,36,o),
(166,103,o),
(166,171,qs),
(166,492,l),
(298,492,l),
(298,527,l),
(166,527,l),
(166,685,l)
);
},
{
closed = 1;
nodes = (
(318,684,o),
(318,667,qs),
(318,653,o),
(329,636,o),
(345,628,o),
(363,626,o),
(369,628,q),
(365,598,o),
(331,556,o),
(314,546,q),
(329,526,l),
(363,545,o),
(404,611,o),
(404,652,qs),
(404,678,o),
(380,707,o),
(360,707,qs),
(341,707,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
27 1 0 8 26 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 6 38 77 0 8 8 7 97 9 1 7 7 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 7 8 7 6 8 128 0 8 8 7 97 9 1 7 7 38 77 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
21 20 32 30 20 37 21 37 17 17 19 33 35 17 16 10 8 29 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(242,882,o),
(222,855,o),
(214,818,o),
(214,796,q),
(251,796,l),
(250,808,o),
(253,833,o),
(262,854,o),
(279,868,o),
(294,868,qs),
(311,868,o),
(338,844,o),
(366,816,o),
(401,792,o),
(424,792,qs),
(470,792,o),
(507,850,o),
(507,894,q),
(470,894,l),
(470,882,o),
(468,856,o),
(458,835,o),
(441,822,o),
(426,822,qs),
(409,822,o),
(382,846,o),
(354,874,o),
(320,898,o),
(297,898,qs),
(273,898,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
6 11 2 4 0 8 5 4 8 105 0 5 9 1 7 1 5 7 105 10 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 27 26 0 0 51 50 46 44 41 39 37 36 32 30 26 55 27 55 0 25 0 25 37 21 37 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(168,722,o),
(148,695,o),
(140,658,o),
(140,636,q),
(177,636,l),
(176,648,o),
(179,673,o),
(188,694,o),
(205,708,o),
(220,708,qs),
(237,708,o),
(264,684,o),
(292,656,o),
(327,632,o),
(350,632,qs),
(396,632,o),
(433,690,o),
(433,734,q),
(396,734,l),
(396,722,o),
(394,696,o),
(384,675,o),
(367,662,o),
(352,662,qs),
(335,662,o),
(308,686,o),
(280,714,o),
(246,738,o),
(223,738,qs),
(199,738,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 9 1 7 1 5 7 105 0 8 8 4 97 6 11 2 4 4 48 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
6 11 2 4 0 8 5 4 8 105 0 5 9 1 7 1 5 7 105 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
23 22 1 0 47 46 42 40 37 35 33 32 28 26 22 51 23 51 16 15 12 10 7 6 0 21 1 21 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(508,822,l),
(508,857,l),
(209,857,l),
(209,822,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 1 4 5 103 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 29 28 27 26 0 25 0 25 37 21 37 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(436,662,l),
(436,697,l),
(137,697,l),
(137,662,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 4 95 0 4 4 38 77 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 5 1 4 5 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 25 24 23 22 16 15 12 10 7 6 0 21 1 21 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(224,866,o),
(250,827,o),
(289,805,o),
(339,796,o),
(366,796,qs),
(393,796,o),
(443,805,o),
(483,828,o),
(510,866,o),
(514,895,q),
(475,895,l),
(467,854,o),
(406,829,o),
(367,829,qs),
(327,829,o),
(267,854,o),
(259,895,q),
(220,895,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 43 26 43 39 37 33 32 30 28 0 25 0 25 37 21 37 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(144,706,o),
(170,667,o),
(209,645,o),
(259,636,o),
(286,636,qs),
(313,636,o),
(363,645,o),
(403,668,o),
(430,706,o),
(434,735,q),
(395,735,l),
(387,694,o),
(326,669,o),
(287,669,qs),
(247,669,o),
(187,694,o),
(179,735,q),
(140,735,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 22 22 1 0 22 39 22 39 35 33 29 28 26 24 16 15 12 10 7 6 0 21 1 21 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(278,893,o),
(278,856,qs),
(278,819,o),
(324,776,o),
(362,776,qs),
(400,776,o),
(448,818,o),
(448,856,qs),
(448,893,o),
(402,941,o),
(363,941,qs),
(325,941,o)
);
},
{
closed = 1;
nodes = (
(417,882,o),
(417,857,qs),
(417,831,o),
(388,802,o),
(362,802,qs),
(337,802,o),
(309,831,o),
(309,857,qs),
(309,882,o),
(337,914,o),
(363,914,qs),
(389,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
9 1 4 10 1 6 7 4 6 105 0 7 0 5 1 7 5 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 39 38 27 26 0 0 45 43 38 49 39 49 33 31 26 37 27 37 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(202,733,o),
(202,696,qs),
(202,659,o),
(248,616,o),
(286,616,qs),
(324,616,o),
(372,658,o),
(372,696,qs),
(372,733,o),
(326,781,o),
(287,781,qs),
(249,781,o)
);
},
{
closed = 1;
nodes = (
(341,722,o),
(341,697,qs),
(341,671,o),
(312,642,o),
(286,642,qs),
(261,642,o),
(233,671,o),
(233,697,qs),
(233,722,o),
(261,754,o),
(287,754,qs),
(313,754,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
9 1 4 10 1 6 7 4 6 105 0 7 0 5 1 7 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 35 34 23 22 1 0 41 39 34 45 35 45 29 27 22 33 23 33 16 15 12 10 7 6 0 21 1 21 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(287,-8,o),
(359,-8,qs),
(431,-8,o),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l)
);
},
{
closed = 1;
nodes = (
(274,796,l),
(312,796,l),
(400,923,l),
(350,923,l)
);
},
{
closed = 1;
nodes = (
(394,796,l),
(432,796,l),
(520,923,l),
(470,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 7 9 3 5 6 1 4 1 5 4 103 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 30 30 26 26 0 0 30 33 30 33 32 31 26 29 26 29 28 27 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(171,-7,o),
(283,-7,qs),
(398,-7,o),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o)
);
},
{
closed = 1;
nodes = (
(197,636,l),
(235,636,l),
(323,763,l),
(273,763,l)
);
},
{
closed = 1;
nodes = (
(317,636,l),
(355,636,l),
(443,763,l),
(393,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
10 7 9 3 5 6 1 4 1 5 4 103 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 26 26 22 22 1 0 26 29 26 29 28 27 22 25 22 25 24 23 16 15 12 10 7 6 0 21 1 21 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(451,-164,o),
(428,-169,o),
(419,-168,q),
(384,-168,o),
(342,-133,o),
(342,-97,qs),
(342,-67,o),
(360,-42,qs),
(375,-22,o),
(393,-7,q),
(444,-2,o),
(482,14,qs),
(534,37,o),
(599,119,o),
(630,231,o),
(630,299,qs),
(630,707,l),
(588,707,l),
(588,303,ls),
(588,246,o),
(564,146,o),
(510,71,o),
(423,28,o),
(360,28,qs),
(298,28,o),
(211,71,o),
(156,145,o),
(131,245,o),
(131,303,qs),
(131,707,l),
(88,707,l),
(88,299,ls),
(88,231,o),
(119,119,o),
(185,37,o),
(236,14,qs),
(285,-7,o),
(355,-8,q),
(338,-23,o),
(316,-53,o),
(303,-87,o),
(303,-105,qs),
(303,-155,o),
(368,-201,o),
(414,-201,qs),
(443,-201,o),
(467,-191,q),
(459,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
47 1 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
4 1 2 2 38 77 0 3 3 1 97 0 1 1 47 77 0 5 5 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 0 0 5 0 101 4 1 2 2 38 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
29 21 37 22 22 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,-164,o),
(352,-169,o),
(343,-168,q),
(308,-168,o),
(266,-133,o),
(266,-97,qs),
(266,-67,o),
(284,-42,qs),
(300,-21,o),
(319,-5,q),
(406,3,o),
(448,54,qs),
(498,116,o),
(498,227,qs),
(498,527,l),
(456,527,l),
(456,226,ls),
(456,182,o),
(438,109,o),
(398,57,o),
(331,29,o),
(283,29,qs),
(236,29,o),
(171,59,o),
(131,111,o),
(113,184,o),
(113,226,qs),
(113,527,l),
(71,527,l),
(71,227,ls),
(71,115,o),
(121,54,qs),
(170,-6,o),
(280,-7,q),
(267,-17,o),
(239,-52,o),
(227,-87,o),
(227,-105,qs),
(227,-155,o),
(292,-201,o),
(338,-201,qs),
(367,-201,o),
(391,-191,q),
(383,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
4 1 2 2 41 77 0 3 3 1 97 0 1 1 50 77 0 5 5 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 0 0 5 0 101 4 1 2 2 41 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
27 21 37 20 22 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,663,l),
(657,0,l),
(718,0,l),
(917,707,l),
(871,707,l),
(688,44,l),
(498,707,l),
(437,707,l),
(250,44,l),
(66,707,l),
(20,707,l),
(219,0,l),
(284,0,l)
);
},
{
closed = 1;
nodes = (
(484,923,l),
(452,923,l),
(341,796,l),
(385,796,l),
(467,894,l),
(552,796,l),
(595,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
14 1 5 6 11 6 3 3 3 0 2 76 0 6 5 6 133 9 7 2 5 0 5 133 2 1 2 0 0 38 77 8 4 2 3 3 39 3 78 13 13 0 0 13 19 13 19 18 17 16 15 0 12 0 12 17 18 18 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 937;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,527,l),
(212,36,l),
(64,527,l),
(19,527,l),
(178,0,l),
(244,0,l),
(402,492,l),
(559,0,l),
(622,0,l),
(783,527,l),
(737,527,l),
(591,36,l),
(436,527,l)
);
},
{
closed = 1;
nodes = (
(417,763,l),
(385,763,l),
(274,636,l),
(318,636,l),
(400,734,l),
(485,636,l),
(528,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
14 1 5 6 10 5 2 1 0 2 76 0 6 5 6 133 8 7 2 5 0 5 133 4 3 2 0 0 41 77 2 1 1 1 39 1 78 13 13 13 19 13 19 17 19 18 17 18 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 802;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(20,707,l),
(272,267,l),
(272,0,l),
(314,0,l),
(314,267,l),
(563,707,l),
(514,707,l),
(293,310,l)
);
},
{
closed = 1;
nodes = (
(309,923,l),
(277,923,l),
(166,796,l),
(210,796,l),
(292,894,l),
(377,796,l),
(420,796,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 3 4 8 5 2 3 1 0 2 76 0 4 3 4 133 6 5 2 3 0 3 133 2 1 0 0 38 77 0 1 1 39 1 78 9 9 9 15 9 15 17 20 18 18 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,274,ls),
(482,226,o),
(461,138,o),
(414,71,o),
(338,30,o),
(282,29,qs),
(226,29,o),
(159,70,o),
(123,136,o),
(112,222,o),
(112,267,qs),
(112,527,l),
(70,527,l),
(70,241,ls),
(70,191,o),
(89,100,o),
(136,32,o),
(215,-8,o),
(274,-8,qs),
(301,-8,o),
(358,0,o),
(413,25,o),
(463,70,o),
(482,107,q),
(482,-11,ls),
(482,-60,o),
(462,-137,o),
(417,-191,o),
(345,-220,o),
(293,-220,qs),
(244,-220,o),
(152,-189,o),
(111,-160,q),
(92,-196,l),
(134,-228,o),
(241,-258,o),
(294,-258,qs),
(416,-258,o),
(524,-125,o),
(524,-6,qs),
(524,527,l),
(482,527,l)
);
},
{
closed = 1;
nodes = (
(310,763,l),
(278,763,l),
(167,636,l),
(211,636,l),
(293,734,l),
(378,636,l),
(421,636,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
43 1 6 7 17 1 4 3 8 7 2 1 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 6 7 133 10 8 2 6 3 6 133 9 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 7 6 7 133 10 8 2 6 3 6 133 0 1 0 0 1 0 101 9 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
42 42 0 0 42 48 42 48 47 46 45 44 0 41 0 41 37 21 41 37 35 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(20,707,l),
(272,267,l),
(272,0,l),
(314,0,l),
(314,267,l),
(563,707,l),
(514,707,l),
(293,310,l)
);
},
{
closed = 1;
nodes = (
(362,851,o),
(362,835,qs),
(362,819,o),
(383,796,o),
(401,796,qs),
(420,796,o),
(442,818,o),
(442,835,qs),
(442,852,o),
(420,874,o),
(401,874,qs),
(383,874,o)
);
},
{
closed = 1;
nodes = (
(151,851,o),
(151,835,qs),
(151,819,o),
(172,796,o),
(190,796,qs),
(209,796,o),
(231,818,o),
(231,835,qs),
(231,852,o),
(209,874,o),
(190,874,qs),
(172,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 5 2 3 1 0 1 76 8 5 7 3 3 6 1 4 0 3 4 105 2 1 0 0 38 77 0 1 1 39 1 78 22 21 10 9 28 26 21 32 22 32 16 14 9 20 10 20 18 18 16 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,40,l),
(50,0,l),
(538,0,l),
(538,38,l),
(100,38,l),
(543,668,l),
(543,707,l),
(65,707,l),
(65,669,l),
(487,669,l)
);
},
{
closed = 1;
nodes = (
(276,796,l),
(314,796,l),
(402,923,l),
(352,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
8 3 2 1 3 1 76 7 1 5 4 5 133 0 4 0 4 133 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 10 10 0 0 10 13 10 13 12 11 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,527,l),
(58,492,l),
(422,492,l),
(53,43,l),
(53,0,l),
(469,0,l),
(469,36,l),
(97,36,l),
(469,485,l),
(469,527,l)
);
},
{
closed = 1;
nodes = (
(237,636,l),
(275,636,l),
(363,763,l),
(313,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
5 0 2 0 2 1 76 6 1 5 4 5 133 0 4 3 4 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 10 10 10 13 10 13 18 17 18 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,40,l),
(50,0,l),
(538,0,l),
(538,38,l),
(100,38,l),
(543,668,l),
(543,707,l),
(65,707,l),
(65,669,l),
(487,669,l)
);
},
{
closed = 1;
nodes = (
(266,855,o),
(266,836,qs),
(266,816,o),
(288,796,o),
(305,796,qs),
(322,796,o),
(345,817,o),
(345,836,qs),
(345,854,o),
(323,874,o),
(306,874,qs),
(289,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
8 3 2 1 3 1 76 7 1 4 0 5 0 4 5 105 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 11 10 0 0 17 15 10 21 11 21 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,527,l),
(58,492,l),
(422,492,l),
(53,43,l),
(53,0,l),
(469,0,l),
(469,36,l),
(97,36,l),
(469,485,l),
(469,527,l)
);
},
{
closed = 1;
nodes = (
(225,695,o),
(225,676,qs),
(225,656,o),
(247,636,o),
(264,636,qs),
(281,636,o),
(304,657,o),
(304,676,qs),
(304,694,o),
(282,714,o),
(265,714,qs),
(248,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
5 0 2 0 2 1 76 0 5 5 4 97 6 1 4 4 46 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 11 10 17 15 10 21 11 21 17 18 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,40,l),
(50,0,l),
(538,0,l),
(538,38,l),
(100,38,l),
(543,668,l),
(543,707,l),
(65,707,l),
(65,669,l),
(487,669,l)
);
},
{
closed = 1;
nodes = (
(294,796,l),
(326,796,l),
(437,923,l),
(393,923,l),
(311,826,l),
(226,923,l),
(183,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
11 1 5 4 8 3 2 1 3 2 76 8 6 2 4 5 4 133 0 5 0 5 133 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 10 10 0 0 10 16 10 16 15 14 13 12 0 9 0 9 17 18 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,527,l),
(58,492,l),
(422,492,l),
(53,43,l),
(53,0,l),
(469,0,l),
(469,36,l),
(97,36,l),
(469,485,l),
(469,527,l)
);
},
{
closed = 1;
nodes = (
(253,636,l),
(285,636,l),
(396,763,l),
(352,763,l),
(270,666,l),
(185,763,l),
(142,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 5 4 5 0 2 0 2 2 76 7 6 2 4 5 4 133 0 5 3 5 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 10 10 10 16 10 16 17 19 17 18 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = uni0123;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,452,o),
(432,496,o),
(379,523,o),
(322,534,o),
(295,534,qs),
(237,534,o),
(147,495,o),
(85,424,o),
(53,325,o),
(53,265,qs),
(53,209,o),
(78,110,o),
(134,36,o),
(223,-7,o),
(288,-7,qs),
(318,-7,o),
(377,5,o),
(432,32,o),
(478,76,o),
(494,109,q),
(494,7,ls),
(494,-42,o),
(478,-126,o),
(436,-187,o),
(364,-221,o),
(307,-221,qs),
(283,-221,o),
(232,-212,o),
(186,-191,o),
(149,-158,o),
(139,-133,q),
(92,-133,l),
(104,-166,o),
(145,-213,o),
(200,-243,o),
(267,-257,o),
(303,-257,qs),
(367,-257,o),
(455,-222,o),
(511,-155,o),
(536,-57,o),
(536,6,qs),
(536,527,l),
(497,527,l),
(497,420,l)
);
},
{
closed = 1;
nodes = (
(421,461,o),
(471,397,o),
(496,313,o),
(496,265,qs),
(496,218,o),
(470,133,o),
(419,68,o),
(344,29,o),
(294,29,qs),
(240,29,o),
(164,66,o),
(116,131,o),
(95,217,o),
(95,265,qs),
(95,311,o),
(118,395,o),
(166,459,o),
(241,498,o),
(293,498,qs),
(344,498,o)
);
},
{
closed = 1;
nodes = (
(339,657,o),
(339,676,qs),
(339,711,o),
(303,716,qs),
(296,717,o),
(288,715,q),
(291,741,o),
(320,784,o),
(343,797,q),
(328,817,l),
(293,797,o),
(253,732,o),
(253,692,qs),
(253,671,o),
(274,636,o),
(298,636,qs),
(316,636,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
44 24 2 7 6 1 76 75 72 71 3 8 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
10 1 8 5 8 133 0 2 4 3 4 2 3 128 0 0 0 41 77 9 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 8 5 8 133 0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 0 0 41 77 9 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
66 65 46 45 65 81 66 81 56 54 45 64 46 64 40 41 36 20 37 16 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = uni0136;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,323,l),
(293,323,l),
(528,0,l),
(579,0,l),
(324,355,l),
(576,707,l),
(528,707,l),
(280,360,l),
(135,360,l),
(135,707,l),
(93,707,l),
(93,0,l),
(135,0,l)
);
},
{
closed = 1;
nodes = (
(283,-142,o),
(283,-159,qs),
(283,-173,o),
(294,-190,o),
(310,-198,o),
(328,-200,o),
(334,-198,q),
(330,-228,o),
(296,-270,o),
(279,-280,q),
(294,-300,l),
(328,-281,o),
(369,-215,o),
(369,-172,qs),
(369,-151,o),
(346,-119,o),
(324,-119,qs),
(306,-119,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
7 1 4 1 1 76 20 19 2 7 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 38 77 8 5 2 3 3 39 77 9 1 6 6 7 97 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 4 3 1 4 103 9 1 6 0 7 6 7 101 2 1 0 0 38 77 8 5 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
14 13 0 0 25 23 13 30 14 30 0 12 0 12 17 18 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,38,l),
(135,38,l),
(135,707,l),
(93,707,l),
(93,0,l),
(549,0,l)
);
},
{
closed = 1;
nodes = (
(279,-142,o),
(279,-159,qs),
(279,-173,o),
(290,-190,o),
(306,-198,o),
(324,-200,o),
(330,-198,q),
(326,-228,o),
(292,-270,o),
(275,-280,q),
(290,-300,l),
(324,-281,o),
(365,-215,o),
(365,-172,qs),
(365,-151,o),
(342,-119,o),
(320,-119,qs),
(302,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
13 12 2 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 0 38 77 0 1 1 2 95 5 1 2 2 39 77 6 1 3 3 4 97 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
6 1 3 0 4 3 4 101 0 0 0 38 77 0 1 1 2 95 5 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
7 6 0 0 18 16 6 23 7 23 0 5 0 5 17 17 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,707,l),
(75,707,l),
(75,0,l),
(117,0,l)
);
},
{
closed = 1;
nodes = (
(55,-142,o),
(55,-159,qs),
(55,-173,o),
(66,-190,o),
(82,-198,o),
(100,-200,o),
(106,-198,q),
(102,-228,o),
(68,-270,o),
(51,-280,q),
(66,-300,l),
(100,-281,o),
(141,-215,o),
(141,-172,qs),
(141,-151,o),
(118,-119,o),
(96,-119,qs),
(78,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
11 10 2 3 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 38 77 4 1 1 1 39 77 5 1 2 2 3 97 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
5 1 2 0 3 2 3 101 0 0 0 38 77 4 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
5 4 0 0 16 14 4 21 5 21 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 192;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,246,l),
(260,246,l),
(438,0,l),
(486,0,l),
(292,273,l),
(468,527,l),
(421,527,l),
(252,281,l),
(115,281,l),
(115,707,l),
(73,707,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(238,-142,o),
(238,-159,qs),
(238,-173,o),
(249,-190,o),
(265,-198,o),
(283,-200,o),
(289,-198,q),
(285,-228,o),
(251,-270,o),
(234,-280,q),
(249,-300,l),
(283,-281,o),
(324,-215,o),
(324,-172,qs),
(324,-151,o),
(301,-119,o),
(279,-119,qs),
(261,-119,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
7 1 4 1 1 76 20 19 2 7 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 8 5 2 3 3 39 77 9 1 6 6 7 97 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 4 3 1 4 103 9 1 6 0 7 6 7 101 0 0 0 38 77 0 2 2 41 77 8 5 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
14 13 0 0 25 23 13 30 14 30 0 12 0 12 17 18 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,0,l),
(135,659,l),
(593,0,l),
(651,0,l),
(651,707,l),
(609,707,l),
(609,49,l),
(154,707,l),
(93,707,l),
(93,0,l)
);
},
{
closed = 1;
nodes = (
(335,-142,o),
(335,-159,qs),
(335,-173,o),
(346,-190,o),
(362,-198,o),
(380,-200,o),
(386,-198,q),
(382,-228,o),
(348,-270,o),
(331,-280,q),
(346,-300,l),
(380,-281,o),
(421,-215,o),
(421,-172,qs),
(421,-151,o),
(398,-119,o),
(376,-119,qs),
(358,-119,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
7 2 2 2 0 1 76 17 16 2 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
1 1 0 0 38 77 3 1 2 2 39 77 6 1 4 4 5 97 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
6 1 4 0 5 4 5 101 1 1 0 0 38 77 3 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
11 10 22 20 10 27 11 27 18 17 18 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,268,ls),
(115,314,o),
(140,397,o),
(190,460,o),
(265,498,o),
(315,498,qs),
(367,498,o),
(431,458,o),
(466,394,o),
(478,310,o),
(478,267,qs),
(478,0,l),
(520,0,l),
(520,292,ls),
(520,342,o),
(499,430,o),
(451,496,o),
(373,534,o),
(316,534,qs),
(254,534,o),
(150,482,o),
(115,423,q),
(115,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(264,-142,o),
(264,-159,qs),
(264,-173,o),
(275,-190,o),
(291,-198,o),
(309,-200,o),
(315,-198,q),
(311,-228,o),
(277,-270,o),
(260,-280,q),
(275,-300,l),
(309,-281,o),
(350,-215,o),
(350,-172,qs),
(350,-151,o),
(327,-119,o),
(305,-119,qs),
(287,-119,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 2 3 1 76 33 32 2 6 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 7 4 2 2 2 39 77 8 1 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 1 5 0 6 5 6 101 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 7 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
27 26 0 0 38 36 26 43 27 43 0 25 0 25 37 21 35 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = uni0122;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,664,o),
(531,634,o),
(579,589,o),
(593,558,q),
(643,558,l),
(625,601,o),
(570,660,o),
(500,698,o),
(418,715,o),
(373,715,qs),
(292,715,o),
(171,656,o),
(92,556,o),
(53,420,o),
(54,344,qs),
(55,269,o),
(95,141,o),
(175,46,o),
(295,-8,o),
(375,-8,qs),
(442,-8,o),
(552,36,o),
(628,116,o),
(670,227,o),
(670,294,qs),
(670,333,l),
(384,333,l),
(384,296,l),
(632,296,l),
(631,236,o),
(596,137,o),
(531,66,o),
(437,28,o),
(376,28,qs),
(304,28,o),
(199,79,o),
(131,167,o),
(99,284,o),
(99,349,qs),
(99,415,o),
(130,534,o),
(197,625,o),
(302,679,o),
(375,679,qs),
(407,679,o)
);
},
{
closed = 1;
nodes = (
(337,-142,o),
(337,-159,qs),
(337,-173,o),
(348,-190,o),
(364,-198,o),
(382,-200,o),
(388,-198,q),
(384,-228,o),
(350,-270,o),
(333,-280,q),
(348,-300,l),
(382,-281,o),
(423,-215,o),
(423,-172,qs),
(423,-151,o),
(400,-119,o),
(378,-119,qs),
(360,-119,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
52 51 2 8 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 9 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 77 10 1 7 7 8 97 0 8 8 43 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 10 1 7 0 8 7 8 101 9 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
46 45 1 0 57 55 45 62 46 62 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,0,l),
(579,0,l),
(421,293,l),
(507,312,o),
(595,415,o),
(595,495,qs),
(595,554,o),
(559,635,o),
(495,685,o),
(405,707,o),
(350,707,qs),
(93,707,l),
(93,0,l),
(135,0,l),
(135,286,l),
(377,286,l)
);
},
{
closed = 1;
nodes = (
(135,669,l),
(340,669,ls),
(385,669,o),
(462,654,o),
(519,615,o),
(551,549,o),
(551,498,qs),
(551,444,o),
(513,375,o),
(449,337,o),
(366,323,o),
(322,323,qs),
(135,323,l)
);
},
{
closed = 1;
nodes = (
(295,-142,o),
(295,-159,qs),
(295,-173,o),
(306,-190,o),
(322,-198,o),
(340,-200,o),
(346,-198,q),
(342,-228,o),
(308,-270,o),
(291,-280,q),
(306,-300,l),
(340,-281,o),
(381,-215,o),
(381,-172,qs),
(381,-151,o),
(358,-119,o),
(336,-119,qs),
(318,-119,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
12 1 3 4 1 76 36 35 2 7 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 4 8 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 77 10 1 6 6 7 97 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
9 1 4 8 1 3 0 4 3 103 10 1 6 0 7 6 7 101 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
30 29 17 16 0 0 41 39 29 46 30 46 27 25 16 28 17 28 0 15 0 15 24 33 17 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,253,ls),
(115,305,o),
(140,394,o),
(191,458,o),
(271,494,o),
(327,494,qs),
(334,494,l),
(334,530,l),
(324,530,ls),
(296,530,o),
(235,521,o),
(178,494,o),
(129,447,o),
(113,409,q),
(113,527,l),
(73,527,l),
(73,0,l),
(115,0,l)
);
},
{
closed = 1;
nodes = (
(53,-142,o),
(53,-159,qs),
(53,-173,o),
(64,-190,o),
(80,-198,o),
(98,-200,o),
(104,-198,q),
(100,-228,o),
(66,-270,o),
(49,-280,q),
(64,-300,l),
(98,-281,o),
(139,-215,o),
(139,-172,qs),
(139,-151,o),
(116,-119,o),
(94,-119,qs),
(76,-119,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 3 2 1 76 25 24 2 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 2 0 97 1 1 0 0 41 77 6 1 3 3 39 77 7 1 4 4 5 97 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
7 1 4 0 5 4 5 101 0 2 2 0 97 1 1 0 0 41 77 6 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
19 18 0 0 30 28 18 35 19 35 0 17 0 17 33 37 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,527,l),
(116,-8,ls),
(116,-41,o),
(110,-97,o),
(86,-138,o),
(40,-161,o),
(0,-161,qs),
(-18,-161,l),
(-18,-196,l),
(1,-196,ls),
(52,-196,o),
(114,-170,o),
(147,-122,o),
(158,-54,o),
(158,-12,qs),
(158,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 41 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 1 0 0 1 0 101 0 2 2 41 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 33 36 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,663,l),
(657,0,l),
(718,0,l),
(917,707,l),
(871,707,l),
(688,44,l),
(498,707,l),
(437,707,l),
(250,44,l),
(66,707,l),
(20,707,l),
(219,0,l),
(284,0,l)
);
},
{
closed = 1;
nodes = (
(463,796,l),
(501,796,l),
(425,923,l),
(375,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
11 6 3 3 3 0 1 76 8 1 6 5 6 133 0 5 0 5 133 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 13 13 0 0 13 16 13 16 15 14 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 937;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,527,l),
(212,36,l),
(64,527,l),
(19,527,l),
(178,0,l),
(244,0,l),
(402,492,l),
(559,0,l),
(622,0,l),
(783,527,l),
(737,527,l),
(591,36,l),
(436,527,l)
);
},
{
closed = 1;
nodes = (
(396,636,l),
(434,636,l),
(358,763,l),
(308,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
10 5 2 1 0 1 76 7 1 6 5 6 133 0 5 0 5 133 4 3 2 0 0 41 77 2 1 1 1 39 1 78 13 13 13 16 13 16 18 18 17 18 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 802;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,663,l),
(657,0,l),
(718,0,l),
(917,707,l),
(871,707,l),
(688,44,l),
(498,707,l),
(437,707,l),
(250,44,l),
(66,707,l),
(20,707,l),
(219,0,l),
(284,0,l)
);
},
{
closed = 1;
nodes = (
(445,796,l),
(483,796,l),
(571,923,l),
(521,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
11 6 3 3 3 0 1 76 8 1 6 5 6 133 0 5 0 5 133 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 13 13 0 0 13 16 13 16 15 14 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 937;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,527,l),
(212,36,l),
(64,527,l),
(19,527,l),
(178,0,l),
(244,0,l),
(402,492,l),
(559,0,l),
(622,0,l),
(783,527,l),
(737,527,l),
(591,36,l),
(436,527,l)
);
},
{
closed = 1;
nodes = (
(378,636,l),
(416,636,l),
(504,763,l),
(454,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
10 5 2 1 0 1 76 7 1 6 5 6 133 0 5 0 5 133 4 3 2 0 0 41 77 2 1 1 1 39 1 78 13 13 13 16 13 16 18 18 17 18 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 802;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,663,l),
(657,0,l),
(718,0,l),
(917,707,l),
(871,707,l),
(688,44,l),
(498,707,l),
(437,707,l),
(250,44,l),
(66,707,l),
(20,707,l),
(219,0,l),
(284,0,l)
);
},
{
closed = 1;
nodes = (
(537,851,o),
(537,835,qs),
(537,819,o),
(558,796,o),
(576,796,qs),
(595,796,o),
(617,818,o),
(617,835,qs),
(617,852,o),
(595,874,o),
(576,874,qs),
(558,874,o)
);
},
{
closed = 1;
nodes = (
(326,851,o),
(326,835,qs),
(326,819,o),
(347,796,o),
(365,796,qs),
(384,796,o),
(406,818,o),
(406,835,qs),
(406,852,o),
(384,874,o),
(365,874,qs),
(347,874,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
11 6 3 3 3 0 1 76 11 7 10 3 5 8 1 6 0 5 6 105 2 1 2 0 0 38 77 9 4 2 3 3 39 3 78 26 25 14 13 0 0 32 30 25 36 26 36 20 18 13 24 14 24 0 12 0 12 17 18 18 17 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 937;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,527,l),
(212,36,l),
(64,527,l),
(19,527,l),
(178,0,l),
(244,0,l),
(402,492,l),
(559,0,l),
(622,0,l),
(783,527,l),
(737,527,l),
(591,36,l),
(436,527,l)
);
},
{
closed = 1;
nodes = (
(472,691,o),
(472,675,qs),
(472,659,o),
(493,636,o),
(511,636,qs),
(530,636,o),
(552,658,o),
(552,675,qs),
(552,692,o),
(530,714,o),
(511,714,qs),
(493,714,o)
);
},
{
closed = 1;
nodes = (
(261,691,o),
(261,675,qs),
(261,659,o),
(282,636,o),
(300,636,qs),
(319,636,o),
(341,658,o),
(341,675,qs),
(341,692,o),
(319,714,o),
(300,714,qs),
(282,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
10 5 2 1 0 1 76 8 1 6 6 5 97 10 7 9 3 5 5 46 77 4 3 2 0 0 41 77 2 1 1 1 39 1 78 26 25 14 13 32 30 25 36 26 36 20 18 13 24 14 24 18 17 18 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 802;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,531,ls),
(132,567,o),
(159,622,o),
(206,660,o),
(267,679,o),
(301,679,qs),
(325,679,o),
(375,666,o),
(421,642,o),
(457,607,o),
(468,585,q),
(296,358,l),
(450,275,ls),
(518,237,o),
(570,171,o),
(570,133,qs),
(570,108,o),
(550,69,o),
(516,42,o),
(471,28,o),
(446,28,qs),
(402,28,o),
(325,62,o),
(310,104,q),
(265,104,l),
(273,74,o),
(309,32,o),
(357,5,o),
(413,-8,o),
(442,-8,qs),
(478,-8,o),
(541,10,o),
(586,46,o),
(612,100,o),
(612,137,qs),
(612,167,o),
(592,213,o),
(554,254,o),
(499,290,o),
(464,310,qs),
(352,372,l),
(513,580,l),
(502,614,o),
(456,665,o),
(397,699,o),
(332,715,o),
(302,715,qs),
(258,715,o),
(181,693,o),
(124,646,o),
(90,575,o),
(90,527,qs),
(90,0,l),
(132,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
42 41 12 11 4 2 4 1 76 0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 6 1 5 5 39 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 53 0 53 45 34 20 47 37 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 667;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(20,707,l),
(272,267,l),
(272,0,l),
(314,0,l),
(314,267,l),
(563,707,l),
(514,707,l),
(293,310,l)
);
},
{
closed = 1;
nodes = (
(294,796,l),
(332,796,l),
(256,923,l),
(206,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
8 5 2 3 1 0 1 76 5 1 4 3 4 133 0 3 0 3 133 2 1 0 0 38 77 0 1 1 39 1 78 9 9 9 12 9 12 19 18 18 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,274,ls),
(482,226,o),
(461,138,o),
(414,71,o),
(338,30,o),
(282,29,qs),
(226,29,o),
(159,70,o),
(123,136,o),
(112,222,o),
(112,267,qs),
(112,527,l),
(70,527,l),
(70,241,ls),
(70,191,o),
(89,100,o),
(136,32,o),
(215,-8,o),
(274,-8,qs),
(301,-8,o),
(358,0,o),
(413,25,o),
(463,70,o),
(482,107,q),
(482,-11,ls),
(482,-60,o),
(462,-137,o),
(417,-191,o),
(345,-220,o),
(293,-220,qs),
(244,-220,o),
(152,-189,o),
(111,-160,q),
(92,-196,l),
(134,-228,o),
(241,-258,o),
(294,-258,qs),
(416,-258,o),
(524,-125,o),
(524,-6,qs),
(524,527,l),
(482,527,l)
);
},
{
closed = 1;
nodes = (
(302,636,l),
(340,636,l),
(264,763,l),
(214,763,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
17 1 4 3 8 7 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
9 1 7 6 7 133 0 6 3 6 133 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 1 7 6 7 133 0 6 3 6 133 0 1 0 0 1 0 101 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
42 42 0 0 42 45 42 45 44 43 0 41 0 41 37 21 41 37 35 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni0405;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,667,o),
(463,639,o),
(502,594,o),
(511,562,q),
(556,562,l),
(547,604,o),
(503,662,o),
(441,699,o),
(364,715,o),
(324,715,qs),
(278,715,o),
(191,695,o),
(124,651,o),
(83,580,o),
(83,528,qs),
(83,480,o),
(119,418,o),
(178,377,o),
(251,353,o),
(288,344,qs),
(313,338,o),
(371,322,o),
(401,313,qs),
(429,305,o),
(478,284,o),
(514,253,o),
(534,208,o),
(534,176,qs),
(534,137,o),
(499,81,o),
(442,45,o),
(369,28,o),
(332,28,qs),
(299,28,o),
(234,41,o),
(175,70,o),
(126,116,o),
(110,149,q),
(63,149,l),
(78,105,o),
(133,46,o),
(206,8,o),
(291,-8,o),
(335,-8,qs),
(381,-8,o),
(468,13,o),
(537,59,o),
(579,133,o),
(579,187,qs),
(579,219,o),
(556,270,o),
(517,309,o),
(463,338,o),
(433,347,qs),
(395,359,o),
(313,381,o),
(271,392,qs),
(242,400,o),
(190,421,o),
(151,454,o),
(129,501,o),
(129,535,qs),
(129,577,o),
(166,632,o),
(222,665,o),
(290,679,o),
(323,679,qs),
(352,679,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 28 1 78 1 0 63 62 58 56 35 33 29 28 24 22 0 67 1 67 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = uni0405;
unicode = 1029;
},
{
glyphname = uni0455;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,490,o),
(354,472,o),
(386,444,o),
(395,425,q),
(437,425,l),
(428,454,o),
(390,495,o),
(339,522,o),
(280,534,o),
(251,534,qs),
(215,534,o),
(145,521,o),
(91,488,o),
(58,434,o),
(58,393,qs),
(58,350,o),
(94,297,o),
(150,264,o),
(219,248,o),
(248,243,qs),
(265,240,o),
(297,234,o),
(311,231,qs),
(328,227,o),
(367,214,o),
(399,192,o),
(418,159,o),
(418,134,qs),
(418,102,o),
(387,61,o),
(340,38,o),
(283,29,o),
(257,29,qs),
(234,29,o),
(186,37,o),
(141,55,o),
(102,86,o),
(90,109,q),
(43,109,l),
(53,78,o),
(99,34,o),
(157,6,o),
(224,-7,o),
(256,-7,qs),
(292,-7,o),
(365,7,o),
(423,40,o),
(459,96,o),
(459,139,qs),
(459,193,o),
(394,249,o),
(342,262,qs),
(310,270,o),
(243,281,o),
(212,288,qs),
(191,293,o),
(151,308,o),
(119,333,o),
(99,368,o),
(99,394,qs),
(99,429,o),
(130,471,o),
(177,492,o),
(229,498,o),
(250,498,qs),
(271,498,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 61 60 56 54 33 31 27 26 22 20 0 65 1 65 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = uni0455;
unicode = 1109;
},
{
glyphname = uni0458;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,706,o),
(99,687,qs),
(99,669,o),
(121,648,o),
(138,648,qs),
(157,648,o),
(179,669,o),
(179,687,qs),
(179,704,o),
(158,726,o),
(139,726,qs),
(122,726,o)
);
},
{
closed = 1;
nodes = (
(116,527,l),
(116,-8,ls),
(116,-41,o),
(110,-97,o),
(86,-138,o),
(40,-161,o),
(0,-161,qs),
(-18,-161,l),
(-18,-196,l),
(1,-196,ls),
(52,-196,o),
(114,-170,o),
(147,-122,o),
(158,-54,o),
(158,-12,qs),
(158,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 97 5 1 0 0 27 77 0 4 4 22 77 0 3 3 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 3 2 101 0 1 1 0 97 5 1 0 0 27 77 0 4 4 22 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 0 0 1 4 0 1 105 0 3 0 2 3 2 101 0 4 4 22 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 27 26 21 19 18 16 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
note = uni0458;
unicode = 1112;
},
{
glyphname = uni0408;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,71,o),
(168,-8,o),
(254,-8,qs),
(319,-8,o),
(400,34,o),
(445,103,o),
(460,190,o),
(460,235,qs),
(460,707,l),
(417,707,l),
(417,243,ls),
(417,200,o),
(405,122,o),
(370,63,o),
(307,28,o),
(257,28,qs),
(187,28,o),
(106,92,o),
(95,161,q),
(48,161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 20 77 0 0 0 2 97 0 2 2 28 2 78 0 0 0 19 0 19 37 21 34 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = uni0408;
unicode = 1032;
},
{
glyphname = uni040E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,0,o),
(234,28,o),
(289,72,o),
(326,127,o),
(338,155,qs),
(573,707,l),
(526,707,l),
(318,214,l),
(77,707,l),
(26,707,l),
(295,165,l),
(284,143,o),
(255,99,o),
(211,64,o),
(151,42,o),
(109,42,q),
(109,-1,l)
);
},
{
closed = 1;
nodes = (
(163,866,o),
(189,827,o),
(228,805,o),
(278,796,o),
(305,796,qs),
(332,796,o),
(382,805,o),
(422,828,o),
(449,866,o),
(453,895,q),
(414,895,l),
(406,854,o),
(345,829,o),
(306,829,qs),
(266,829,o),
(206,854,o),
(198,895,q),
(159,895,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
8 5 2 0 1 1 76 8 7 2 5 4 5 133 0 4 0 6 1 4 6 105 2 1 1 1 20 77 0 0 0 3 97 0 3 3 21 3 78 17 17 17 34 17 34 36 18 35 21 18 21 16 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni040E;
unicode = 1038;
},
{
glyphname = uni045E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,527,l),
(27,527,l),
(268,-48,l),
(253,-86,o),
(221,-144,o),
(179,-184,o),
(124,-204,o),
(86,-204,q),
(86,-245,l),
(133,-245,o),
(198,-225,o),
(229,-196,qs),
(247,-180,o),
(280,-125,o),
(308,-64,o),
(332,-3,o),
(340,20,qs),
(521,527,l),
(472,527,l),
(292,6,l)
);
},
{
closed = 1;
nodes = (
(138,706,o),
(164,667,o),
(203,645,o),
(253,636,o),
(280,636,qs),
(307,636,o),
(357,645,o),
(397,668,o),
(424,706,o),
(428,735,q),
(389,735,l),
(381,694,o),
(320,669,o),
(281,669,qs),
(241,669,o),
(181,694,o),
(173,735,q),
(134,735,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 3 1 0 0 22 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 0 2 0 1 2 1 101 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
20 20 20 37 20 37 36 18 36 21 17 24 16 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = uni045E;
unicode = 1118;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Thin;
properties = (
{
key = styleNames;
values = (
{
language = ENG;
value = Thin;
}
);
},
{
key = postscriptFullName;
value = "Onest Thin";
},
{
key = postscriptFontName;
value = "Onest-Thin";
}
);
weightClass = 100;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 15;
"@MMK_R_O" = -15;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_colon" = 20;
"@MMK_R_period" = 30;
"@MMK_R_uni0422" = -50;
"@MMK_R_w" = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -15;
"@MMK_R_O" = 5;
"@MMK_R_W" = -5;
"@MMK_R_Y" = -20;
"@MMK_R_period" = -20;
"@MMK_R_uni0417" = 5;
"@MMK_R_uni0422" = -20;
};
"@MMK_L_K_alt" = {
"@MMK_R_a" = -10;
"@MMK_R_uni0422" = 10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_O" = -5;
"@MMK_R_a" = -35;
"@MMK_R_period" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -60;
"@MMK_R_O" = -20;
"@MMK_R_a" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_d" = -70;
"@MMK_R_period" = -80;
"@MMK_R_r" = -30;
"@MMK_R_w" = -20;
};
"@MMK_L_period" = {
"@MMK_R_A" = 30;
"@MMK_R_O" = -20;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -80;
"@MMK_R_uni0422" = -80;
};
"@MMK_L_r" = {
"@MMK_R_d" = -10;
"@MMK_R_t" = 30;
};
"@MMK_L_uni0413" = {
"@MMK_R_colon" = -40;
"@MMK_R_period" = -100;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0432" = -40;
"@MMK_R_uni0433" = -50;
"@MMK_R_uni0444" = -80;
};
"@MMK_L_uni0414" = {
"@MMK_R_period" = 30;
};
"@MMK_L_uni0417" = {
"@MMK_R_uni0417" = 5;
};
"@MMK_L_uni0422" = {
"@MMK_R_A" = -50;
"@MMK_R_O" = -20;
"@MMK_R_a" = -60;
"@MMK_R_colon" = -20;
"@MMK_R_d" = -50;
"@MMK_R_period" = -80;
"@MMK_R_r" = -20;
"@MMK_R_uni0422" = 40;
};
"@MMK_L_uni0433" = {
"@MMK_R_period" = -40;
"@MMK_R_uni0444" = -10;
};
"@MMK_L_uni0434" = {
"@MMK_R_period" = 40;
};
A = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aacute = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Acircumflex = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Adieresis = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Agrave = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Amacron = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aogonek = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aring = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Atilde = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
B = {
V = -10;
W = -10;
W_alt = -10;
Wacute = -10;
Wcircumflex = -10;
Wdieresis = -10;
Wgrave = -10;
X = -10;
Y = -10;
Yacute = -10;
Ycircumflex = -10;
Ydieresis = -10;
Ygrave = -10;
};
C = {
J = 10;
V = -25;
X = -10;
};
Cacute = {
J = 10;
V = -25;
X = -10;
};
Ccaron = {
J = 10;
V = -25;
X = -10;
};
Ccedilla = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ccircumflex = {
J = 10;
V = -25;
X = -10;
};
Cdotaccent = {
J = 10;
V = -25;
X = -10;
};
D = {
C = 15;
Cacute = 15;
Ccaron = 15;
Ccedilla = 15;
Ccircumflex = 15;
Cdotaccent = 15;
G = 15;
Gbreve = 15;
Gcircumflex = 15;
Gdotaccent = 15;
J = 10;
O = 15;
OE = 15;
Oacute = 15;
Obreve = 15;
Ocircumflex = 15;
Odieresis = 15;
Ograve = 15;
Ohungarumlaut = 15;
Omacron = 15;
Oslash = 15;
Otilde = 15;
Q = 15;
S = 15;
Sacute = 15;
Scaron = 15;
Scedilla = 15;
Scircumflex = 15;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
d = 10;
uni0122 = 15;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Dcaron = {
J = 10;
V = -25;
X = -10;
};
Dcroat = {
J = 10;
V = -25;
X = -10;
};
E = {
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
};
Eth = {
J = 10;
V = -25;
X = -10;
};
F = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
J = -30;
T = 20;
Tcaron = 20;
a = -30;
a00E2.alt = -30;
a00E4.alt = -30;
a0103.alt = -30;
a2_alt = -25;
a_alt = -30;
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
agrave = -30;
amacron = -30;
aogonek = -30;
aring = -30;
atilde = -30;
c = -25;
c_alt = -25;
cacute = -25;
ccaron = -25;
ccedilla = -25;
ccircumflex = -25;
cdotaccent = -25;
comma = -30;
d = -25;
dcaron = -25;
dcroat = -25;
e = -25;
eacute = -25;
ebreve = -25;
ecaron = -25;
ecircumflex = -25;
edieresis = -25;
edotaccent = -25;
egrave = -25;
emacron = -25;
eogonek = -25;
eth = -25;
g = -25;
gbreve = -25;
gcircumflex = -25;
gdotaccent = -25;
o = -25;
oacute = -25;
obreve = -25;
ocircumflex = -25;
odieresis = -25;
oe = -25;
ograve = -25;
ohungarumlaut = -25;
omacron = -25;
oslash = -25;
otilde = -25;
period = -30;
q = -25;
quotedblbase = -30;
quotedblright = 20;
quoteright = 20;
s = -25;
s_alt = -25;
sacute = -25;
scaron = -25;
scedilla = -25;
scircumflex = -25;
uni0123 = -25;
uni0162 = 20;
uni0219 = -25;
uni021A = 20;
uni0410 = -50;
uni0422 = 20;
uni0430 = -30;
};
G = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -10;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Gbreve = {
J = 10;
V = -25;
X = -10;
};
Gcircumflex = {
J = 10;
V = -25;
X = -10;
};
Gdotaccent = {
J = 10;
V = -25;
X = -10;
};
I = {
bracketright = 40;
};
J = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -10;
};
K = {
v = -30;
y2_alt = -40;
};
K_alt = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
d = -20;
uni0122 = -30;
v = -30;
w = -20;
w_alt = -20;
wacute = -20;
wcircumflex = -20;
wdieresis = -20;
wgrave = -20;
y2_alt = -40;
};
L = {
A = 20;
Aacute = 20;
Acircumflex = 20;
Adieresis = 20;
Agrave = 20;
Amacron = 20;
Aogonek = 20;
Aring = 20;
Atilde = 20;
J = 30;
T = -40;
Tcaron = -40;
V = -50;
W = -40;
W_alt = -40;
Wacute = -40;
Wcircumflex = -40;
Wdieresis = -40;
Wgrave = -40;
X = 10;
Y = -80;
Yacute = -80;
Ycircumflex = -80;
Ydieresis = -80;
Ygrave = -80;
a = 10;
a00E2.alt = 10;
a00E4.alt = 10;
a0103.alt = 10;
a2_alt = 10;
a_alt = 10;
aacute = 10;
abreve = 10;
acircumflex = 10;
adieresis = 10;
agrave = 10;
amacron = 10;
aogonek = 10;
aring = 10;
atilde = 10;
c = 10;
c_alt = 10;
cacute = 10;
ccaron = 10;
ccedilla = 10;
ccircumflex = 10;
cdotaccent = 10;
colon = 20;
comma = 40;
d = 10;
dcaron = 10;
dcroat = 10;
e = 10;
eacute = 10;
ebreve = 10;
ecaron = 10;
ecircumflex = 10;
edieresis = 10;
edotaccent = 10;
egrave = 10;
emacron = 10;
eogonek = 10;
eth = 10;
g = 10;
gbreve = 10;
gcircumflex = 10;
gdotaccent = 10;
j = 20;
o = 10;
oacute = 10;
obreve = 10;
ocircumflex = 10;
odieresis = 10;
oe = 10;
ograve = 10;
ohungarumlaut = 10;
omacron = 10;
oslash = 10;
otilde = 10;
period = 40;
q = 10;
quotedblbase = 40;
quoteright = -60;
s = 10;
s_alt = 10;
sacute = 10;
scaron = 10;
scedilla = 10;
scircumflex = 10;
semicolon = 20;
uni0123 = 10;
uni0162 = -40;
uni0219 = 10;
uni021A = -40;
uni0410 = 20;
uni0422 = -40;
uni0430 = 10;
y2_alt = -10;
z = 20;
};
O = {
J = 10;
V = -25;
X = -10;
};
Oacute = {
J = 10;
V = -25;
X = -10;
};
Obreve = {
J = 10;
V = -25;
X = -10;
};
Ocircumflex = {
J = 10;
V = -25;
X = -10;
};
Odieresis = {
J = 10;
V = -25;
X = -10;
};
Ograve = {
J = 10;
V = -25;
X = -10;
};
Ohungarumlaut = {
J = 10;
V = -25;
X = -10;
};
Omacron = {
J = 10;
V = -25;
X = -10;
};
Oslash = {
J = 10;
V = -25;
X = -10;
};
Otilde = {
J = 10;
V = -25;
X = -10;
};
P = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = 10;
Ccedilla = 10;
G = 10;
J = -50;
Q = 10;
S = 10;
X = -25;
Y = -15;
Yacute = -15;
Ycircumflex = -15;
Ydieresis = -15;
Ygrave = -15;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
j = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -90;
q = -10;
quotedblbase = -60;
quotedblright = 20;
quoteright = 20;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -50;
uni0430 = -20;
};
Q = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -10;
colon = 20;
semicolon = 20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
R = {
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
a = -10;
a00E2.alt = -10;
a00E4.alt = -10;
a0103.alt = -10;
a2_alt = -10;
a_alt = -10;
aacute = -10;
abreve = -10;
acircumflex = -10;
adieresis = -10;
agrave = -10;
amacron = -10;
aogonek = -10;
aring = -10;
atilde = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0430 = -10;
};
S = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Sacute = {
J = 10;
V = -25;
X = -10;
};
Scaron = {
J = 10;
V = -25;
X = -10;
};
Scedilla = {
J = 10;
V = -25;
X = -10;
};
Scircumflex = {
J = 10;
V = -25;
X = -10;
};
T = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
Tcaron = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
U = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -60;
q = -10;
quotedblbase = -60;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -10;
uni0430 = -20;
};
V = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = -25;
Cacute = -25;
Ccaron = -25;
Ccedilla = -25;
Ccircumflex = -25;
Cdotaccent = -25;
G = -25;
Gbreve = -25;
Gcircumflex = -25;
Gdotaccent = -25;
J = -80;
O = -25;
OE = -25;
Oacute = -25;
Obreve = -25;
Ocircumflex = -25;
Odieresis = -25;
Ograve = -25;
Ohungarumlaut = -25;
Omacron = -25;
Oslash = -25;
Otilde = -25;
Q = -25;
S = -25;
Sacute = -25;
Scaron = -25;
Scedilla = -25;
Scircumflex = -25;
a = -50;
a00E2.alt = -50;
a00E4.alt = -50;
a0103.alt = -50;
a2_alt = -50;
a_alt = -50;
aacute = -50;
abreve = -50;
acircumflex = -50;
adieresis = -50;
agrave = -50;
amacron = -50;
aogonek = -50;
aring = -50;
atilde = -50;
braceright = 20;
bracketright = 40;
c = -50;
c_alt = -50;
cacute = -50;
ccaron = -50;
ccedilla = -50;
ccircumflex = -50;
cdotaccent = -50;
colon = -20;
comma = -80;
d = -50;
dcaron = -50;
dcroat = -50;
e = -50;
eacute = -50;
ebreve = -50;
ecaron = -50;
ecircumflex = -50;
edieresis = -50;
edotaccent = -50;
egrave = -50;
emacron = -50;
eogonek = -50;
eth = -50;
g = -50;
gbreve = -50;
gcircumflex = -50;
gdotaccent = -50;
m = -20;
n = -20;
o = -50;
oacute = -50;
obreve = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
ohungarumlaut = -50;
omacron = -50;
oslash = -50;
otilde = -50;
p = -20;
period = -80;
q = -50;
quotedblbase = -80;
quotedblright = 10;
quoteright = 20;
r = -20;
racute = -20;
rcaron = -20;
s = -50;
s_alt = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
scircumflex = -50;
semicolon = -20;
space = -80;
u = -20;
uni0122 = -25;
uni0123 = -50;
uni0157 = -20;
uni0219 = -50;
uni0410 = -50;
uni0430 = -50;
z = -20;
};
W = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
W_alt = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
uni0410 = -40;
};
Wacute = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wcircumflex = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wdieresis = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wgrave = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
X = {
C = -10;
Cacute = -10;
Ccaron = -10;
Ccedilla = -30;
Ccircumflex = -10;
Cdotaccent = -10;
G = -10;
Gbreve = -10;
Gcircumflex = -10;
Gdotaccent = -10;
O = -10;
OE = -10;
Oacute = -10;
Obreve = -10;
Ocircumflex = -10;
Odieresis = -10;
Ograve = -10;
Ohungarumlaut = -10;
Omacron = -10;
Oslash = -10;
Otilde = -10;
Q = -10;
S = -30;
Sacute = -10;
Scaron = -10;
Scedilla = -10;
Scircumflex = -10;
bracketright = 40;
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
uni0122 = -10;
};
Y = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Yacute = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ycircumflex = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ydieresis = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ygrave = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Z = {
bracketright = 20;
colon = 30;
quoteright = 20;
quotesingle = 40;
semicolon = 30;
};
b = {
c = 10;
d = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
backslash = {
a2_alt = 20;
backslash = -210;
uni0414 = 60;
uni0432 = 40;
uni0433 = 40;
uni0434 = 60;
uni0435 = 20;
uni0436 = 40;
uni0437 = 20;
uni0438 = 40;
uni043A = 40;
uni043C = 40;
uni043D = 40;
uni043E = 20;
uni043F = 40;
uni0440 = 40;
uni0441 = 20;
uni0444 = 20;
uni0446 = 40;
uni0447 = -20;
uni0448 = 40;
uni0449 = 40;
uni044B = 40;
uni044C = 40;
uni044D = 20;
uni044E = 40;
uni044F = 40;
uni0451 = 20;
uni0491 = 40;
};
braceleft = {
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
j = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0434 = 40;
};
bracketleft = {
I = 40;
T = 40;
Tcaron = 40;
V = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
X = 40;
Y = 40;
Yacute = 40;
Ycircumflex = 40;
Ydieresis = 40;
Ygrave = 40;
Z = 20;
i = 40;
j = 40;
l = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0425 = 40;
uni0434 = 40;
uni0443 = 20;
};
c = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
c_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
cacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
ccircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
cdotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
colon = {
backslash = -70;
slash = -30;
};
comma = {
U = -60;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 40;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -20;
uni0443 = -20;
v = -20;
y2_alt = -20;
zero = -10;
};
dcaron = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
};
e = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ebreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edieresis = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
egrave = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
emacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eogonek = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eth = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
f = {
a2_alt = -10;
bracketright = 40;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 50;
quotesingle = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
four = {
comma = 10;
four = 20;
period = 10;
quotedblbase = 10;
};
i = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
j = {
bracketright = 40;
j = 20;
quoteright = 20;
};
k_alt = {
d = -10;
};
l = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
lcaron = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
};
nine = {
comma = -10;
period = -10;
quotedblbase = -10;
seven = -20;
};
o = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
obreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ocircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
odieresis = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oe = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ograve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ohungarumlaut = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
omacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oslash = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
otilde = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
p = {
c = 10;
f = -20;
parenright = -20;
quotedblright = -20;
t = -20;
t_alt = -20;
tbar = -20;
uni0163 = -20;
uni021B = -20;
x = -10;
y2_alt = -5;
};
parenleft = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
uni0414 = 40;
uni0422 = 40;
uni0434 = 40;
uni0443 = 10;
};
period = {
U = -60;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 40;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -20;
uni0443 = -20;
v = -20;
y2_alt = -20;
zero = -10;
};
q = {
j = 20;
};
quotedblbase = {
U = -60;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 40;
uni0410 = 40;
uni0414 = 40;
uni0416 = 20;
uni0417 = -20;
uni041B = 20;
uni041E = -30;
uni0421 = -30;
uni0424 = -50;
uni0425 = 20;
uni0427 = -80;
uni042D = -30;
uni0434 = 60;
uni0436 = 20;
uni043B = 40;
uni0442 = -40;
uni0443 = -30;
uni0445 = 20;
uni0447 = -40;
v = -20;
y2_alt = -20;
zero = -10;
};
quotedblleft = {
J = -100;
T = 40;
Tcaron = 40;
V = 10;
W = 10;
W_alt = 10;
Wacute = 10;
Wcircumflex = 10;
Wdieresis = 10;
Wgrave = 10;
a2_alt = -30;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -30;
uni0162 = 40;
uni0163 = 40;
uni0219 = -30;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -40;
uni0422 = 30;
uni0423 = 30;
uni0434 = -40;
uni043B = -40;
uni0442 = 40;
uni0443 = 40;
uni0444 = -30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quotedblright = {
comma = -50;
period = -50;
quotedblbase = -50;
};
quoteleft = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
J = -100;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
comma = -50;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
f = 40;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
period = -50;
q = -20;
quotedblbase = -50;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -20;
uni0162 = 40;
uni0163 = 40;
uni0219 = -20;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -20;
uni041B = -20;
uni0422 = 40;
uni0423 = 40;
uni042A = 20;
uni0434 = -30;
uni043B = -30;
uni0442 = 30;
uni0443 = 30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quoteright = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -60;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -30;
b = 20;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
j = 20;
k = 20;
k_alt = 20;
kgreenlandic = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
uni0123 = -30;
uni0137 = 20;
uni0162 = 40;
uni0219 = -30;
uni021A = 40;
uni0410 = -40;
uni0422 = 40;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0442 = 40;
uni0443 = 40;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
quotesingle = {
A = -20;
Aacute = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
J = -80;
T = 40;
Tcaron = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
Z = 40;
b = 40;
f = 40;
t = 40;
t_alt = 40;
tbar = 40;
uni0162 = 40;
uni0163 = 40;
uni021A = 40;
uni021B = 40;
uni0410 = -20;
uni0422 = 20;
uni0423 = 20;
uni0427 = 20;
uni0442 = 40;
};
r = {
quotedblright = 40;
quoteright = 40;
};
racute = {
quotedblright = 40;
quoteright = 40;
};
rcaron = {
quotedblright = 40;
quoteright = 40;
};
s = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
t = -10;
t_alt = -10;
tbar = -10;
uni0163 = -10;
uni021B = -10;
x = -15;
y2_alt = -5;
};
s_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
sacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
scircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
seven = {
comma = -100;
four = -60;
one = 20;
period = -100;
quotedblbase = -100;
quotesingle = 20;
seven = 30;
three = -10;
};
slash = {
slash = -210;
uni0422 = 30;
uni0423 = 30;
};
space = {
V = -80;
W = -60;
W_alt = -60;
Wacute = -60;
Wcircumflex = -60;
Wdieresis = -60;
Wgrave = -60;
five = 40;
};
t = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
t_alt = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tbar = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tcaron = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
};
two = {
comma = 30;
four = -20;
period = 30;
quotedblbase = 30;
two = 15;
};
uni0122 = {
J = 10;
V = -25;
X = -10;
};
uni0136 = {
v = -30;
y2_alt = -40;
};
uni0157 = {
quotedblright = 40;
quoteright = 40;
};
uni0162 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni0163 = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0219 = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
uni021A = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni021B = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0401 = {
quotedblright = 20;
uni043B = 10;
};
uni0405 = {
J = 10;
V = -25;
X = -10;
};
uni0410 = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quotedblleft = -40;
quotedblright = -40;
quoteright = -40;
quotesingle = -20;
uni0410 = 15;
uni0414 = 20;
uni0417 = -15;
uni041B = 10;
uni041E = -15;
uni0421 = -15;
uni0422 = -50;
uni0423 = -40;
uni0424 = -15;
uni0427 = -70;
uni042D = -15;
uni0434 = 10;
uni0436 = 10;
uni043B = 10;
uni0442 = -20;
uni0443 = -25;
uni0447 = -35;
v = -30;
x = 5;
y2_alt = -30;
};
uni0411 = {
uni0414 = -20;
uni042F = -20;
uni0434 = -10;
uni0436 = -20;
uni0445 = -20;
};
uni0412 = {
uni0423 = -30;
};
uni0413 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
};
uni0414 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0415 = {
quotedblright = 20;
uni043B = 10;
};
uni0416 = {
a2_alt = -20;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
uni0430 = -10;
uni0431 = -10;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0442 = -20;
uni0443 = -20;
uni0444 = -20;
uni0447 = -40;
uni044D = -20;
uni0451 = -20;
};
uni0417 = {
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni0417 = 15;
uni041B = -15;
uni041E = 15;
uni0421 = 15;
uni0422 = -20;
uni0423 = -20;
uni0424 = 15;
uni0425 = -20;
uni042D = 15;
uni0431 = 10;
uni0442 = 10;
uni0444 = 10;
};
uni041A = {
a2_alt = -20;
colon = 20;
semicolon = 20;
slash = 20;
uni0417 = -30;
uni041E = -30;
uni0421 = -30;
uni0424 = -30;
uni042D = -30;
uni0430 = -10;
uni0431 = -20;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0443 = -30;
uni0444 = -20;
uni044D = -20;
uni0451 = -20;
};
uni041E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -10;
uni0431 = 10;
uni0442 = 10;
};
uni0420 = {
a2_alt = -10;
comma = -90;
period = -90;
quotedblbase = -90;
quotedblleft = 20;
uni0410 = -60;
uni0414 = -50;
uni0416 = -20;
uni0417 = 10;
uni041E = 10;
uni0421 = 10;
uni0424 = 10;
uni0425 = -20;
uni042D = 10;
uni0430 = -10;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043B = -35;
uni043E = -10;
uni0441 = -10;
uni0442 = 20;
uni0444 = -10;
uni044D = -10;
uni044F = -10;
uni0451 = -10;
};
uni0421 = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -10;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0422 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
a2_alt = -50;
backslash = 40;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
parenright = 40;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
u = -20;
uni0410 = -50;
uni0414 = -10;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0422 = 20;
uni0423 = 10;
uni0424 = -20;
uni042D = -20;
uni0432 = -40;
uni0433 = -40;
uni0434 = -40;
uni0435 = -50;
uni0437 = -50;
uni0438 = -40;
uni043A = -40;
uni043B = -40;
uni043C = -40;
uni043D = -40;
uni043E = -50;
uni043F = -40;
uni0440 = -40;
uni0441 = -50;
uni0444 = -50;
uni0445 = -20;
uni0446 = -40;
uni0447 = -40;
uni0448 = -40;
uni0449 = -40;
uni044B = -40;
uni044C = -40;
uni044D = -50;
uni044E = -40;
uni044F = -40;
uni0451 = -30;
uni0491 = -40;
};
uni0423 = {
a2_alt = -55;
braceright = 40;
bracketright = 40;
colon = -20;
comma = -100;
period = -100;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
semicolon = -20;
slash = -30;
uni0410 = -70;
uni0414 = -40;
uni0417 = -15;
uni041E = -15;
uni0421 = -15;
uni0422 = 10;
uni0423 = 16;
uni0424 = -15;
uni042D = -15;
uni042F = -20;
uni0430 = -60;
uni0431 = -20;
uni0432 = -30;
uni0433 = -30;
uni0434 = -70;
uni0435 = -55;
uni0436 = -10;
uni0437 = -55;
uni0438 = -30;
uni0439 = -20;
uni043A = -30;
uni043B = -50;
uni043C = -30;
uni043D = -30;
uni043E = -55;
uni043F = -30;
uni0440 = -30;
uni0441 = -55;
uni0444 = -55;
uni0446 = -30;
uni0447 = -30;
uni0448 = -30;
uni0449 = -30;
uni044B = -30;
uni044C = -30;
uni044D = -55;
uni044E = -30;
uni044F = -30;
uni0451 = -30;
uni0491 = -30;
};
uni0424 = {
comma = -50;
period = -50;
quotedblbase = -50;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0434 = -20;
uni0442 = 10;
};
uni0425 = {
bracketright = 40;
uni0417 = -20;
uni041E = -10;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
};
uni0426 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0429 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni042A = {
quotedblright = -40;
quoteright = -20;
uni0422 = -50;
};
uni042C = {
quotedblleft = -60;
quotedblright = -40;
quoteright = -40;
uni0416 = -20;
uni0422 = -50;
uni0427 = -30;
};
uni042D = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni042E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0431 = {
quoteright = 20;
uni0431 = 15;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0444 = 10;
uni0445 = -10;
};
uni0432 = {
uni0436 = -10;
uni0445 = -15;
uni044F = -10;
};
uni0433 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
uni0434 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0435 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0436 = {
a2_alt = -10;
slash = 30;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0437 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni043A = {
a2_alt = -10;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni043E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0440 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0441 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0442 = {
colon = 20;
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
uni0434 = -20;
uni0442 = 30;
uni0443 = 20;
uni044A = 20;
};
uni0443 = {
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
uni0442 = 10;
uni0443 = 10;
};
uni0444 = {
quotedblright = -30;
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0445 = {
a2_alt = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0446 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0449 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni044C = {
quotedblright = -40;
uni0442 = -30;
uni044F = -10;
};
uni044D = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni044E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0451 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0490 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0433 = -40;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
uni0491 = -40;
};
uni0491 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
v = {
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
};
w = {
quotedblright = 40;
quoteright = 40;
};
w_alt = {
quotedblright = 40;
quoteright = 40;
};
wacute = {
quotedblright = 40;
quoteright = 40;
};
wcircumflex = {
quotedblright = 40;
quoteright = 40;
};
wdieresis = {
quotedblright = 40;
quoteright = 40;
};
wgrave = {
quotedblright = 40;
quoteright = 40;
};
x = {
a2_alt = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
y2_alt = {
a2_alt = -5;
c = -5;
c_alt = -5;
cacute = -5;
ccaron = -5;
ccedilla = -5;
ccircumflex = -5;
cdotaccent = -5;
comma = -20;
d = -5;
dcaron = -5;
dcroat = -5;
e = -5;
eacute = -5;
ebreve = -5;
ecaron = -5;
ecircumflex = -5;
edieresis = -5;
edotaccent = -5;
egrave = -5;
emacron = -5;
eogonek = -5;
eth = -5;
g = -5;
gbreve = -5;
gcircumflex = -5;
gdotaccent = -5;
o = -5;
oacute = -5;
obreve = -5;
ocircumflex = -5;
odieresis = -5;
oe = -5;
ograve = -5;
ohungarumlaut = -5;
omacron = -5;
oslash = -5;
otilde = -5;
period = -20;
q = -5;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
s = -5;
s_alt = -5;
sacute = -5;
scaron = -5;
scedilla = -5;
scircumflex = -5;
uni0123 = -5;
uni0219 = -5;
};
z = {
quotedblright = 40;
quoteright = 40;
};
zero = {
comma = -10;
period = -10;
quotedblbase = -10;
two = -15;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The Onest Project Authors (https://github.com/googlefonts/onest)";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Onest;
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Dmitri Voloshin, Andrey Kudryavtsev";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Andrey Kudryavtsev, Dmitri Voloshin";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://onest.md";
},
{
key = designerURL;
value = "https://onest.md";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
