{
.appVersion = "3112";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = PYRS;
},
{
name = panose;
value = (
2,
11,
5,
3,
4,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
9,
31,
33,
35,
37,
38,
47
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
NULL,
CR,
space,
B,
D,
E,
F,
H,
I,
L,
M,
N,
P,
R,
U,
V,
W,
X,
Y,
Z,
b,
d,
h,
i,
l,
m,
n,
p,
q,
u,
v,
w,
x,
z,
period,
comma,
A,
breve,
circumflex,
uni0326,
acircumflex,
exclam,
quotedbl,
quotesingle,
numbersign,
percent,
asterisk,
plus,
slash,
colon,
semicolon,
less,
equal,
greater,
at,
bracketleft,
bracketright,
backslash,
asciicircum,
underscore,
braceleft,
bar,
braceright,
Euro,
quotedblbase,
quotesinglbase,
quotedblright,
quoteright,
quotedblleft,
quoteleft,
minus,
hyphen,
endash,
emdash,
grave,
acute,
guillemotright,
guilsinglright,
guillemotleft,
guilsinglleft,
uni00AD,
ellipsis,
uni0445,
uni0431,
uni0432,
uni0433,
uni0434,
uni0436,
uni043A,
uni0438,
uni0439,
uni043B,
uni043C,
uni043D,
uni043F,
uni0442,
uni0444,
uni0446,
uni0447,
uni0448,
uni0449,
uni044A,
uni044B,
uni044C,
uni044E,
uni044F,
u_alt,
uni0410,
uni0415,
uni041C,
uni041D,
uni0420,
uni0422,
uni0425,
T,
uni0412,
uni041F,
uni0413,
uni041B,
uni0414,
uni0411,
uni0416,
uni0417,
uni0418,
uni0419,
uni041A,
uni0423,
uni0424,
uni0426,
uni0427,
uni0428,
uni0429,
uni042A,
uni042B,
uni042C,
uni042D,
uni042E,
uni042F,
uni0440,
O,
be_alt,
a,
c,
e,
f,
g,
j,
o,
r,
t,
y_alt,
y2_alt,
uni0443,
uni0451,
uni0437,
uni044D,
C,
S,
uni0421,
G,
uni041E,
Q,
J,
K_alt,
K,
k_alt,
k,
i_alt,
j_alt,
s_alt,
s,
c_alt,
copyright,
ampersand,
dollar,
parenleft,
parenright,
cent,
section,
uni04C1,
uni04C2,
w_alt,
W_alt,
zero,
one,
two,
three,
four,
seven,
eight,
nine,
uni0430,
uni0435,
uni043E,
uni0441,
uni0218,
uni0219,
uni021A,
uni021B,
icircumflex,
question,
uni2116,
uni0401,
asciitilde,
trademark,
registered,
degree,
bullet,
uni27F5,
uni27F6,
arrowup,
arrowdown,
uni21BA,
uni21BB,
uni21B7,
uni21B6,
five,
six,
dieresis,
adieresis,
Adieresis,
cedilla,
ecircumflex,
dotlessi,
udieresis,
Udieresis,
ccedilla,
uni0162,
uni0163,
Ccedilla,
scedilla,
uni21A9,
uni2713,
divide,
multiply,
yen,
uni20BD,
uni20B4,
sterling,
Scedilla,
t_alt,
alt_1,
colon.uc,
t2.alt,
hyphen.uc,
uni00AD.uc,
endash.uc,
emdash.uc,
uni2117,
f_alt,
g_alt,
y,
a_alt,
uni0490,
uni0491,
uni0404,
uni0454,
uni0406,
uni0456,
uni0407,
uni0457,
map,
logo,
uni202F,
uni2009,
uni00A0,
a00E2.alt,
a0103.alt,
a00E4.alt,
a2_alt,
t0163.alt,
t021b.alt,
logom,
plusminus,
twosuperior,
threesuperior,
greaterequal,
lessequal,
approxequal,
notequal,
tab_1,
I_alt,
l_alt,
l2_alt,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE008,
uniE009,
arrowright,
arrowleft,
uni2197,
uni2198,
uni2196,
uni2199,
uniE010,
uniE011,
uniE012,
uniE013,
uniE014,
uniE015,
uniE016,
uniE017,
uniE018,
uniE019,
uniE020,
uniE021,
uniE022,
caron,
exclamdown,
ordfeminine,
macron,
paragraph,
periodcentered,
ordmasculine,
questiondown,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
acutecomb,
gravecomb,
uni0302,
tildecomb,
uni0304,
uni0306,
uni0307,
uni0308,
uni030A,
uni030B,
uni030C,
uni0312,
uni0327,
uni0328,
Agrave,
Aacute,
Acircumflex,
Atilde,
Aring,
AE,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Eth,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
Oslash,
Ugrave,
Uacute,
Ucircumflex,
Yacute,
Thorn,
germandbls,
agrave,
aacute,
atilde,
aring,
ae,
egrave,
eacute,
edieresis,
igrave,
iacute,
idieresis,
eth,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
oslash,
ugrave,
uacute,
ucircumflex,
yacute,
thorn,
ydieresis,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
Hcircumflex,
hcircumflex,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
Idotaccent,
IJ,
ij,
Jcircumflex,
jcircumflex,
kgreenlandic,
Lacute,
lacute,
Ldot,
ldot,
Nacute,
nacute,
Ncaron,
ncaron,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
Racute,
racute,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scaron,
scaron,
Tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
OE,
oe,
Eng,
eng,
Hbar,
hbar,
Lslash,
lslash,
Tbar,
tbar,
uni0136,
uni0137,
uni013B,
uni013C,
uni0122,
uni0145,
uni0146,
uni0156,
uni0157,
uni0123,
Lcaron,
lcaron,
napostrophe,
tcaron,
dcaron,
uni0237,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
uni1E9E,
uni0405,
uni0455,
uni0458,
uni0408,
uni040E,
uni045E
);
}
);
date = "2022-02-06 07:43:33 +0000";
familyName = Onest;
featurePrefixes = (
{
code = "lookup SUB_22 {
	sub colon by colon.uc;
	sub hyphen by hyphen.uc;
	sub endash by endash.uc;
	sub emdash by emdash.uc;
	sub uni00AD by uni00AD.uc;
	sub t by t2.alt;
	sub uni021B by t021b.alt;
	sub uni0163 by t0163.alt;
} SUB_22;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_0;
lookup SUB_0;
script cyrl;
language dflt;
lookup SUB_0;
lookup SUB_1 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_1;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
lookup SUB_2 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_2;
lookup SUB_0;
language AZE;
lookup SUB_0;
lookup SUB_0;
language MOL;
lookup SUB_0;
lookup SUB_0;
language ROM;
lookup SUB_0;
lookup SUB_0;
language TRK;
lookup SUB_0;
lookup SUB_0;
";
tag = salt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 useExtension {
	sub colon by colon.uc;
} SUB_3;
script cyrl;
language dflt;
lookup SUB_3;
script latn;
language dflt;
lookup SUB_3;
language AZE;
lookup SUB_3;
language MOL;
lookup SUB_3;
language ROM;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	@SUB_4_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_0_BT_0 colon' lookup SUB_22;
	@SUB_4_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_1_BT_0 hyphen' lookup SUB_22;
	@SUB_4_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_2_BT_0 endash' lookup SUB_22;
	@SUB_4_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_3_BT_0 emdash' lookup SUB_22;
	@SUB_4_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_4_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_4_5_LA_0;
	@SUB_4_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_4_6_LA_0;
	@SUB_4_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_4_7_LA_0;
} SUB_4;
lookup SUB_5 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_5;
script cyrl;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6 {
	@SUB_6_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_0_BT_0 colon' lookup SUB_22;
	@SUB_6_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_1_BT_0 hyphen' lookup SUB_22;
	@SUB_6_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_2_BT_0 endash' lookup SUB_22;
	@SUB_6_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_3_BT_0 emdash' lookup SUB_22;
	@SUB_6_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_6_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_6_5_LA_0;
	@SUB_6_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_6_6_LA_0;
	@SUB_6_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_6_7_LA_0;
} SUB_6;
lookup SUB_7 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_7;
script latn;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8 {
	@SUB_8_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_0_BT_0 colon' lookup SUB_22;
	@SUB_8_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_1_BT_0 hyphen' lookup SUB_22;
	@SUB_8_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_2_BT_0 endash' lookup SUB_22;
	@SUB_8_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_3_BT_0 emdash' lookup SUB_22;
	@SUB_8_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_8_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_8_5_LA_0;
	@SUB_8_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_8_6_LA_0;
	@SUB_8_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_8_7_LA_0;
} SUB_8;
lookup SUB_9 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_9;
language AZE;
lookup SUB_4;
lookup SUB_5;
language MOL;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language ROM;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language TRK;
lookup SUB_4;
lookup SUB_5;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub l by l_alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
	sub abreve by a0103.alt;
} SUB_10;
script cyrl;
language dflt;
lookup SUB_10;
lookup SUB_11 {
	sub l by l_alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
	sub abreve by a0103.alt;
} SUB_11;
script latn;
language dflt;
lookup SUB_10;
lookup SUB_12 {
	sub l by l_alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
	sub abreve by a0103.alt;
} SUB_12;
language AZE;
lookup SUB_10;
language MOL;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_13;
script cyrl;
language dflt;
lookup SUB_13;
lookup SUB_14 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_14;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_15;
language AZE;
lookup SUB_13;
language MOL;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_16;
script cyrl;
language dflt;
lookup SUB_16;
lookup SUB_18 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_18;
script latn;
language dflt;
lookup SUB_16;
lookup SUB_17 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_17;
language AZE;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TRK;
lookup SUB_16;
script cyrl;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_19;
script cyrl;
language dflt;
lookup SUB_19;
lookup SUB_21 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_21;
script latn;
language dflt;
lookup SUB_19;
lookup SUB_20 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_20;
language AZE;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
script cyrl;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
";
tag = tnum;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 970;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 49 29 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 4 36 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01262 2 46 6 27 5 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123648 2368 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01258 4 38 8 20 7 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    173,\012    173,\012    164,\012    164,\012    708,\012    0,\012    527,\012    0,\012    \"-201\",\012    970,\012    \"-305\",\012    717,\012    \"-8\",\012    538,\012    \"-8\",\012    \"-251\",\012    970,\012    \"-305\",\012    173,\012    173,\012    164,\012    164,\012    708,\012    0,\012    708,\012    527,\012    0,\012    \"-201\",\012    970,\012    \"-305\",\012    717,\012    \"-8\",\012    777,\012    538,\012    \"-8\",\012    \"-248\",\012    970,\012    \"-305\",\012    24,\012    24,\012    24,\012    24,\012    741,\012    349,\012    970,\012    \"-305\",\012    741,\012    345,\012    970,\012    \"-305\"\012)";
}
);
id = m01;
metricValues = (
{
pos = 970;
},
{
pos = 708;
},
{
pos = 527;
},
{
},
{
pos = -305;
},
{
}
);
name = Black;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,-295,l),
(560,960,l),
(20,960,l),
(20,-295,l)
);
},
{
closed = 1;
nodes = (
(550,950,l),
(550,-285,l),
(30,-285,l),
(30,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 0 95 0 0 0 68 77 0 2 2 1 95 0 1 1 69 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = ".notdef";
},
{
glyphname = NULL;
layers = (
{
layerId = m01;
width = 0;
}
);
note = NULL;
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 198;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 290;
}
);
note = space;
unicode = 32;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,0,o),
(544,22,o),
(589,59,qs),
(620,85,o),
(662,167,o),
(662,225,qs),
(662,289,o),
(608,370,o),
(566,390,q),
(597,410,o),
(632,481,o),
(632,519,qs),
(632,573,o),
(599,645,o),
(541,689,o),
(463,708,o),
(418,708,qs),
(66,708,l),
(66,0,l),
(360,0,ls)
);
},
{
closed = 1;
nodes = (
(398,287,ls),
(481,287,o),
(481,229,qs),
(481,201,o),
(439,167,o),
(391,167,qs),
(247,167,l),
(247,287,l)
);
},
{
closed = 1;
nodes = (
(247,541,l),
(376,541,ls),
(411,541,o),
(451,521,o),
(452,492,qs),
(453,468,o),
(416,433,o),
(374,433,qs),
(247,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
10 1 3 4 1 76 7 1 4 0 3 2 4 3 103 0 5 5 0 95 0 0 0 38 77 0 2 2 1 95 6 1 1 1 39 1 78 29 28 0 0 35 33 28 36 29 36 27 25 22 20 0 19 0 18 33 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = B;
unicode = 66;
},
{
glyphname = D;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(517,0,o),
(708,178,o),
(708,356,qs),
(708,443,o),
(657,575,o),
(563,663,o),
(428,708,o),
(344,708,qs),
(67,708,l),
(67,0,l),
(346,0,ls)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(341,540,ls),
(395,540,o),
(466,511,o),
(508,461,o),
(525,393,o),
(525,353,qs),
(525,312,o),
(507,243,o),
(466,194,o),
(398,167,o),
(348,167,qs),
(248,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 3 0 95 0 0 0 38 77 5 1 2 2 1 95 4 1 1 1 39 1 78 12 11 0 0 22 20 11 23 12 23 0 10 0 9 33 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,245,l),
(530,245,l),
(530,411,l),
(248,411,l),
(248,540,l),
(590,540,l),
(590,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 0 2 3 1 2 103 0 0 0 4 95 5 1 4 4 38 77 0 3 3 39 3 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = F;
unicode = 70;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,267,l),
(505,267,l),
(505,0,l),
(686,0,l),
(686,708,l),
(505,708,l),
(505,433,l),
(248,433,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 38 77 4 1 2 2 39 2 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = I;
unicode = 73;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(587,0,l),
(587,167,l),
(248,167,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,451,l),
(430,140,l),
(501,140,l),
(680,451,l),
(680,0,l),
(861,0,l),
(861,708,l),
(641,708,l),
(469,398,l),
(296,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 6 1 3 2 0 1 76 0 2 0 1 0 2 1 128 5 4 2 0 0 38 77 3 1 1 1 39 1 78 0 0 0 12 0 12 18 18 17 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 928;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,399,l),
(552,0,l),
(716,0,l),
(716,708,l),
(535,708,l),
(535,303,l),
(236,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
6 1 2 1 0 1 76 4 3 2 0 0 38 77 2 1 1 1 39 1 78 0 0 0 9 0 9 18 17 18 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = N;
unicode = 78;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,199,l),
(357,199,ls),
(409,199,o),
(505,222,o),
(542,248,qs),
(589,280,o),
(644,384,o),
(645,457,qs),
(645,528,o),
(604,624,o),
(529,683,o),
(426,708,o),
(364,708,qs),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(356,540,ls),
(416,540,o),
(468,497,o),
(467,452,qs),
(466,409,o),
(409,360,o),
(357,360,qs),
(248,360,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 3 0 1 2 3 1 103 0 4 4 0 95 5 1 0 0 38 77 0 2 2 39 2 78 17 16 1 0 23 21 16 24 17 24 14 13 12 10 0 15 1 15 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = P;
unicode = 80;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,239,l),
(335,239,l),
(471,0,l),
(677,0,l),
(513,267,l),
(587,295,o),
(650,405,o),
(652,475,qs),
(651,549,o),
(597,641,o),
(515,691,o),
(414,708,o),
(366,708,qs),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(370,540,ls),
(391,540,o),
(429,535,o),
(457,520,o),
(473,494,o),
(473,472,qs),
(473,436,o),
(418,398,o),
(367,398,qs),
(248,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
8 1 2 4 1 76 7 1 4 0 2 1 4 2 103 0 5 5 0 95 6 1 0 0 38 77 3 1 1 1 39 1 78 17 16 1 0 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = R;
unicode = 82;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 38 77 0 2 2 0 98 4 1 0 0 47 0 78 1 0 18 17 12 10 5 4 0 21 1 21 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,708,l),
(0,708,l),
(254,0,l),
(484,0,l),
(736,708,l),
(540,708,l),
(372,152,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
6 1 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 736;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,478,l),
(618,0,l),
(860,0,l),
(1018,708,l),
(828,708,l),
(734,212,l),
(631,708,l),
(405,708,l),
(300,212,l),
(201,708,l),
(0,708,l),
(161,0,l),
(413,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 38 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1018;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,708,l),
(8,708,l),
(250,355,l),
(0,0,l),
(205,0,l),
(356,225,l),
(501,0,l),
(719,0,l),
(471,354,l),
(712,708,l),
(500,708,l),
(364,483,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,708,l),
(0,708,l),
(272,263,l),
(272,0,l),
(453,0,l),
(453,264,l),
(727,708,l),
(522,708,l),
(363,427,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
8 5 2 3 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 18 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,142,l),
(24,0,l),
(601,0,l),
(601,167,l),
(262,167,l),
(607,567,l),
(607,708,l),
(33,708,l),
(33,540,l),
(370,540,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 3 0 8 1 2 1 2 76 4 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = Z;
unicode = 90;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,31,o),
(286,6,o),
(328,-6,o),
(366,-8,o),
(381,-8,qs),
(440,-8,o),
(527,33,o),
(583,106,o),
(610,208,o),
(610,269,qs),
(610,327,o),
(583,425,o),
(527,497,o),
(444,538,o),
(387,538,qs),
(340,538,o),
(257,508,o),
(224,475,q),
(224,708,l),
(47,708,l),
(47,0,l),
(221,0,l),
(221,55,l)
);
},
{
closed = 1;
nodes = (
(400,359,o),
(424,328,o),
(435,289,o),
(436,270,qs),
(436,249,o),
(427,208,o),
(404,173,o),
(365,150,o),
(335,150,qs),
(306,150,o),
(264,170,o),
(236,201,o),
(224,243,o),
(224,267,qs),
(224,289,o),
(237,329,o),
(264,360,o),
(306,378,o),
(332,378,qs),
(361,378,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
4 1 4 2 22 1 0 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 1 38 77 6 1 4 4 2 97 0 2 2 49 77 0 5 5 0 97 3 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 38 77 6 1 4 4 2 97 0 2 2 49 77 0 0 0 39 77 0 5 5 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
24 23 34 32 23 42 24 42 56 35 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = b;
unicode = 98;
},
{
glyphname = d;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,708,l),
(415,708,l),
(415,490,l),
(393,513,o),
(323,538,o),
(283,537,qs),
(228,537,o),
(145,507,o),
(113,481,qs),
(71,444,o),
(27,334,o),
(27,265,qs),
(27,198,o),
(68,88,o),
(105,52,qs),
(134,23,o),
(218,-8,o),
(264,-8,qs),
(362,-8,o),
(419,46,q),
(419,0,l),
(592,0,l)
);
},
{
closed = 1;
nodes = (
(378,357,o),
(403,325,o),
(415,286,o),
(415,267,qs),
(415,245,o),
(403,205,o),
(378,173,o),
(336,153,o),
(307,153,qs),
(279,153,o),
(239,172,o),
(214,202,o),
(203,240,o),
(203,261,qs),
(203,281,o),
(213,321,o),
(238,355,o),
(280,376,o),
(310,376,qs),
(338,376,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 1 1 1 0 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 1 1 1 3 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 2 38 77 7 1 4 4 1 97 0 1 1 49 77 0 5 5 0 97 6 3 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 38 77 7 1 4 4 1 97 0 1 1 49 77 6 1 3 3 39 77 0 5 5 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 22 0 0 33 31 22 41 23 41 0 21 0 21 19 42 34 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = d;
unicode = 100;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(230,324,o),
(249,356,o),
(285,376,o),
(308,376,qs),
(333,376,o),
(366,357,o),
(385,327,o),
(393,292,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,347,o),
(547,444,o),
(518,478,qs),
(492,507,o),
(423,538,o),
(375,538,qs),
(362,538,o),
(329,535,o),
(284,522,o),
(242,498,o),
(224,479,q),
(224,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 1 2 0 1 76 0 2 0 1 0 2 1 128 0 4 4 38 77 0 0 0 49 77 3 1 1 1 39 1 78 17 21 37 22 36 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,527,l),
(59,0,l),
(235,0,l),
(235,527,l)
);
},
{
closed = 1;
nodes = (
(88,763,o),
(58,735,o),
(39,697,o),
(39,672,qs),
(39,645,o),
(57,606,o),
(87,580,o),
(125,567,o),
(146,567,qs),
(189,567,o),
(253,620,o),
(253,672,qs),
(253,697,o),
(235,735,o),
(206,763,o),
(168,777,o),
(146,777,qs),
(126,777,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
5 4 13 11 4 21 5 21 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = i;
unicode = 105;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,0,l),
(224,0,l),
(224,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,279,ls),
(224,292,o),
(227,325,o),
(240,356,o),
(269,376,o),
(294,376,qs),
(313,376,o),
(337,359,o),
(349,333,o),
(352,305,o),
(352,295,qs),
(352,0,l),
(529,0,l),
(529,284,ls),
(529,296,o),
(532,326,o),
(545,355,o),
(576,376,o),
(595,376,qs),
(616,376,o),
(640,359,o),
(651,334,o),
(654,306,o),
(654,294,qs),
(654,0,l),
(831,0,l),
(831,327,ls),
(831,375,o),
(811,452,o),
(769,507,o),
(702,537,o),
(657,537,qs),
(637,537,o),
(596,532,o),
(554,516,o),
(516,488,o),
(499,466,q),
(474,508,o),
(401,537,o),
(365,537,qs),
(350,537,o),
(315,534,o),
(276,520,o),
(236,494,o),
(219,471,q),
(203,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
8 1 3 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
8 1 3 7 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
5 1 3 0 2 0 3 2 128 7 1 2 0 0 49 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
5 1 3 7 2 7 3 2 128 1 1 0 0 49 77 0 7 7 41 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 21 37 21 37 21 38 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 874;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(232,324,o),
(251,355,o),
(289,376,o),
(311,376,qs),
(336,376,o),
(368,357,o),
(386,327,o),
(393,292,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,347,o),
(547,444,o),
(518,478,qs),
(492,507,o),
(420,538,o),
(372,538,qs),
(359,538,o),
(321,534,o),
(280,522,o),
(238,498,o),
(220,479,q),
(210,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 1 0 2 1 128 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 2 4 1 4 2 1 128 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 21 37 22 36 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = n;
unicode = 110;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(400,355,o),
(425,323,o),
(436,285,o),
(436,267,qs),
(436,246,o),
(427,206,o),
(404,174,o),
(365,153,o),
(335,153,qs),
(306,153,o),
(264,173,o),
(236,204,o),
(224,245,o),
(224,267,qs),
(224,287,o),
(237,326,o),
(264,357,o),
(303,376,o),
(330,376,qs),
(360,376,o)
);
},
{
closed = 1;
nodes = (
(47,527,l),
(47,-201,l),
(224,-201,l),
(224,45,l),
(245,24,o),
(324,-8,o),
(371,-8,qs),
(428,-10,o),
(517,31,o),
(580,106,o),
(610,209,o),
(610,269,qs),
(610,324,o),
(580,422,o),
(522,495,o),
(438,537,o),
(380,538,qs),
(332,538,o),
(256,508,o),
(220,469,q),
(211,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 3 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 0 0 2 97 5 1 2 2 49 77 0 1 1 3 97 0 3 3 47 77 0 4 4 43 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 0 0 2 97 5 1 2 2 49 77 0 1 1 3 97 0 3 3 47 77 0 4 4 2 97 5 1 2 2 49 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 0 0 2 97 0 2 2 49 77 0 1 1 3 97 0 3 3 47 77 0 4 4 5 95 0 5 5 41 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 40 39 38 37 34 32 24 22 11 9 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,358,o),
(402,327,o),
(415,288,o),
(415,267,qs),
(415,243,o),
(402,202,o),
(377,171,o),
(336,153,o),
(309,153,qs),
(282,153,o),
(241,174,o),
(215,206,o),
(203,246,o),
(203,267,qs),
(203,286,o),
(216,325,o),
(241,357,o),
(282,376,o),
(309,376,qs),
(335,376,o)
);
},
{
closed = 1;
nodes = (
(397,511,o),
(324,538,o),
(282,538,qs),
(225,538,o),
(131,499,o),
(65,427,o),
(27,327,o),
(27,268,qs),
(27,209,o),
(58,108,o),
(119,34,o),
(210,-8,o),
(271,-8,qs),
(304,-8,o),
(383,12,o),
(415,42,q),
(415,-201,l),
(592,-201,l),
(592,527,l),
(429,527,l),
(420,481,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
40 1 0 2 24 1 4 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 0 0 2 97 5 1 2 2 41 77 0 1 1 4 97 0 4 4 47 77 0 3 3 43 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 0 0 2 97 5 1 2 2 41 77 0 1 1 4 97 0 4 4 47 77 0 3 3 2 97 5 1 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 0 0 5 97 0 5 5 49 77 0 1 1 4 97 0 4 4 47 77 0 3 3 2 95 0 2 2 41 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 38 36 28 26 23 22 21 20 11 9 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = q;
unicode = 113;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 41 77 4 1 0 0 2 97 0 2 2 47 2 78 1 0 20 19 14 12 7 6 0 25 1 25 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,527,l),
(-5,527,l),
(168,0,l),
(404,0,l),
(577,527,l),
(386,527,l),
(286,136,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
6 1 1 0 1 76 2 1 0 0 41 77 0 1 1 39 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,309,l),
(530,0,l),
(721,0,l),
(888,527,l),
(701,527,l),
(624,212,l),
(538,527,l),
(352,527,l),
(265,212,l),
(187,527,l),
(-5,527,l),
(162,0,l),
(354,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 41 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,527,l),
(10,527,l),
(182,269,l),
(0,0,l),
(196,0,l),
(291,154,l),
(385,0,l),
(590,0,l),
(404,266,l),
(578,527,l),
(380,527,l),
(297,384,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 41 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = x;
unicode = 120;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,527,l),
(27,369,l),
(250,369,l),
(27,128,l),
(27,0,l),
(478,0,l),
(478,159,l),
(255,159,l),
(478,400,l),
(478,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 5 1 1 0 2 76 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = z;
unicode = 122;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,180,o),
(64,153,o),
(47,114,o),
(47,89,qs),
(47,36,o),
(108,-17,o),
(150,-17,qs),
(192,-17,o),
(252,36,o),
(252,89,qs),
(252,139,o),
(192,195,o),
(150,195,qs),
(130,195,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 47 1 78 1 0 7 5 0 13 1 13 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 299;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,-164,o),
(197,-121,o),
(248,-61,o),
(280,15,o),
(281,60,qs),
(281,88,o),
(267,137,o),
(239,173,o),
(198,194,o),
(172,194,qs),
(151,194,o),
(112,181,o),
(82,155,o),
(64,116,o),
(64,90,qs),
(64,46,o),
(119,-3,o),
(152,-6,q),
(147,-17,o),
(123,-43,o),
(91,-69,o),
(59,-90,o),
(47,-94,q),
(98,-175,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 73 0 0 0 118 44 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 328;
}
);
note = comma;
unicode = 44;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 1 1 76 5 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 8 8 8 10 8 10 17 17 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = A;
unicode = 65;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(499,672,o),
(499,769,q),
(357,769,l),
(357,757,ls),
(357,729,o),
(324,698,o),
(296,698,qs),
(269,698,o),
(235,730,o),
(235,757,qs),
(235,769,l),
(93,769,l),
(93,671,o),
(202,577,o),
(297,577,qs),
(391,577,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
3 1 1 2 2 1 112 0 2 0 0 2 89 0 2 2 0 98 4 1 0 2 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 4 1 0 2 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 13 12 9 7 4 3 0 15 1 15 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 592;
}
);
note = breve;
unicode = 728;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,577,l),
(262,577,l),
(320,661,l),
(381,577,l),
(547,577,l),
(378,769,l),
(262,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 643;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-310,-286,o),
(-259,-257,o),
(-220,-213,o),
(-196,-158,o),
(-195,-126,qs),
(-194,-86,o),
(-240,-30,o),
(-281,-30,qs),
(-313,-29,o),
(-362,-67,o),
(-363,-105,qs),
(-362,-137,o),
(-320,-172,o),
(-294,-173,q),
(-297,-181,o),
(-317,-200,o),
(-341,-219,o),
(-365,-234,o),
(-375,-238,q),
(-336,-295,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 25 values pushed */
19 1 0 73 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 21 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = acircumflex;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(69,577,l),
(235,577,l),
(293,661,l),
(354,577,l),
(520,577,l),
(351,769,l),
(235,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
54 1 8 10 12 1 2 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
54 1 8 10 12 1 7 1 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
12 1 10 8 10 133 9 1 8 6 8 133 0 5 4 3 4 5 3 128 0 3 11 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
12 1 10 8 10 133 9 1 8 6 8 133 0 5 4 3 4 5 3 128 0 3 11 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
51 51 1 0 51 57 51 57 56 55 53 52 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,185,o),
(76,159,o),
(57,121,o),
(57,94,qs),
(57,67,o),
(76,28,o),
(107,3,o),
(145,-9,o),
(164,-9,qs),
(182,-9,o),
(219,3,o),
(249,28,o),
(268,67,o),
(268,94,qs),
(268,121,o),
(250,159,o),
(221,185,o),
(184,197,o),
(164,197,qs),
(144,197,o)
);
},
{
closed = 1;
nodes = (
(68,708,l),
(79,254,l),
(248,254,l),
(260,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 2 2 3 95 0 3 3 38 77 4 1 0 0 1 97 0 1 1 47 1 78 1 0 23 22 21 20 11 9 0 19 1 19 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,708,l),
(271,411,l),
(375,411,l),
(408,708,l)
);
},
{
closed = 1;
nodes = (
(39,708,l),
(65,411,l),
(168,411,l),
(202,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 38 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 447;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(79,411,l),
(182,411,l),
(216,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 38 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 263;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,708,l),
(429,549,l),
(320,549,l),
(339,708,l),
(197,708,l),
(176,549,l),
(67,549,l),
(67,393,l),
(157,393,l),
(147,314,l),
(150,314,l),
(39,314,l),
(39,158,l),
(129,158,l),
(107,0,l),
(253,0,l),
(258,40,o),
(267,118,o),
(273,158,q),
(381,158,l),
(362,0,l),
(503,0,l),
(509,41,o),
(518,116,o),
(525,158,q),
(633,158,l),
(633,314,l),
(543,314,l),
(553,393,l),
(661,393,l),
(661,549,l),
(572,549,l),
(593,708,l)
);
},
{
closed = 1;
nodes = (
(410,393,l),
(400,314,l),
(290,314,l),
(300,393,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
14 8 2 2 7 5 2 3 4 2 3 103 13 1 11 11 38 77 15 9 2 1 1 0 95 12 10 2 0 0 41 77 6 1 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
12 10 2 0 15 9 2 1 2 0 1 104 14 8 2 2 7 5 2 3 4 2 3 103 13 1 11 11 38 77 6 1 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
36 35 34 33 32 31 30 29 28 27 26 25 24 23 17 17 19 17 19 17 17 17 16 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(799,708,l),
(618,708,l),
(140,0,l),
(325,0,l)
);
},
{
closed = 1;
nodes = (
(118,691,o),
(68,643,o),
(39,574,o),
(39,531,qs),
(39,487,o),
(67,418,o),
(117,370,o),
(186,345,o),
(226,345,qs),
(266,345,o),
(334,370,o),
(384,418,o),
(413,487,o),
(413,531,qs),
(413,576,o),
(385,645,o),
(335,692,o),
(266,717,o),
(226,717,qs),
(187,717,o)
);
},
{
closed = 1;
nodes = (
(607,338,o),
(556,290,o),
(527,220,o),
(527,177,qs),
(527,133,o),
(556,64,o),
(607,17,o),
(675,-8,o),
(715,-8,qs),
(754,-8,o),
(822,17,o),
(873,64,o),
(902,133,o),
(902,177,qs),
(902,222,o),
(874,292,o),
(824,339,o),
(755,364,o),
(715,364,qs),
(676,364,o)
);
},
{
closed = 1;
nodes = (
(773,197,o),
(773,176,qs),
(773,155,o),
(745,120,o),
(715,120,qs),
(685,120,o),
(657,154,o),
(656,174,qs),
(655,196,o),
(684,233,o),
(715,233,qs),
(744,233,o)
);
},
{
closed = 1;
nodes = (
(284,551,o),
(284,530,qs),
(284,509,o),
(256,474,o),
(226,474,qs),
(196,474,o),
(168,508,o),
(167,528,qs),
(166,550,o),
(195,587,o),
(226,587,qs),
(255,587,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 9 0 3 6 9 3 105 12 1 4 13 1 6 7 4 6 106 14 1 8 8 0 97 11 2 2 0 0 38 77 0 7 7 1 97 5 10 2 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 9 0 3 6 9 3 105 12 1 4 13 1 6 7 4 6 106 0 0 0 38 77 14 1 8 8 2 97 11 1 2 2 46 77 0 7 7 1 97 5 10 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 9 0 3 6 9 3 105 12 1 4 13 1 6 7 4 6 106 0 0 0 38 77 14 1 8 8 2 97 11 1 2 2 46 77 10 1 1 1 39 77 0 7 7 5 97 0 5 5 47 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
57 56 45 44 25 24 5 4 0 0 63 61 56 67 57 67 51 49 44 55 45 55 35 33 24 43 25 43 15 13 4 23 5 23 0 3 0 3 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 941;
}
);
note = percent;
unicode = 37;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,626,l),
(98,676,l),
(49,525,l),
(151,512,l),
(76,443,l),
(204,349,l),
(248,442,l),
(291,349,l),
(419,443,l),
(344,512,l),
(446,525,l),
(397,676,l),
(307,626,l),
(327,727,l),
(168,727,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
13 12 11 10 9 8 7 6 5 4 3 2 1 13 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 38 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
0 0 0 14 0 14 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 495;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,440,l),
(375,440,l),
(375,607,l),
(218,607,l),
(218,440,l),
(54,440,l),
(54,282,l),
(218,282,l),
(218,113,l),
(375,113,l),
(375,282,l),
(539,282,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 2 0 3 87 4 1 2 6 5 2 1 0 2 1 103 0 3 3 0 95 0 0 3 0 79 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = plus;
unicode = 43;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,779,l),
(19,-160,l),
(192,-160,l),
(517,779,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 1 133 0 0 0 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = slash;
unicode = 47;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,516,o),
(65,489,o),
(47,450,o),
(47,425,qs),
(47,372,o),
(111,319,o),
(153,319,qs),
(195,319,o),
(258,372,o),
(258,425,qs),
(258,450,o),
(241,489,o),
(212,516,o),
(174,531,o),
(153,531,qs),
(133,531,o)
);
},
{
closed = 1;
nodes = (
(95,188,o),
(65,161,o),
(47,122,o),
(47,97,qs),
(47,44,o),
(111,-9,o),
(153,-9,qs),
(195,-9,o),
(258,44,o),
(258,97,qs),
(258,122,o),
(241,161,o),
(212,188,o),
(174,203,o),
(153,203,qs),
(133,203,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 0 97 4 1 0 0 41 77 5 1 2 2 3 97 0 3 3 47 3 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,-164,o),
(197,-121,o),
(248,-61,o),
(279,15,o),
(280,60,qs),
(280,88,o),
(266,137,o),
(239,173,o),
(198,194,o),
(172,194,qs),
(151,194,o),
(112,181,o),
(83,155,o),
(65,116,o),
(65,90,qs),
(65,46,o),
(119,-3,o),
(152,-6,q),
(147,-17,o),
(123,-43,o),
(91,-69,o),
(59,-90,o),
(47,-94,q),
(98,-175,l)
);
},
{
closed = 1;
nodes = (
(113,516,o),
(83,489,o),
(65,450,o),
(65,425,qs),
(65,372,o),
(129,319,o),
(171,319,qs),
(213,319,o),
(276,372,o),
(276,425,qs),
(276,450,o),
(259,489,o),
(230,516,o),
(192,531,o),
(171,531,qs),
(151,531,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
23 5 2 0 73 0 0 2 0 134 0 2 2 1 97 3 1 1 1 41 2 78 25 24 33 31 24 39 25 39 44 4 8 23 
CALL[ ]	/* CallFunction */";
};
width = 327;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,404,l),
(19,312,l),
(452,62,l),
(452,244,l),
(244,363,l),
(452,479,l),
(452,657,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 3 1 50 
CALL[ ]	/* CallFunction */";
};
width = 501;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(528,553,l),
(49,553,l),
(49,397,l),
(528,397,l)
);
},
{
closed = 1;
nodes = (
(528,294,l),
(49,294,l),
(49,136,l),
(528,136,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 0 4 1 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 5 1 3 2 3 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,317,l),
(481,409,l),
(49,658,l),
(49,477,l),
(257,359,l),
(49,242,l),
(49,63,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 3 1 50 
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = greater;
unicode = 62;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,4,o),
(227,-100,o),
(380,-154,o),
(469,-156,qs),
(508,-156,o),
(584,-146,o),
(626,-135,q),
(605,6,l),
(575,-2,o),
(513,-9,o),
(472,-9,qs),
(404,-9,o),
(302,34,o),
(234,109,o),
(200,209,o),
(200,267,qs),
(200,333,o),
(242,447,o),
(324,531,o),
(444,579,o),
(522,579,qs),
(600,579,o),
(709,541,o),
(778,473,o),
(810,378,o),
(810,321,qs),
(810,311,o),
(808,266,o),
(796,219,o),
(771,184,o),
(748,184,qs),
(719,184,o),
(702,220,o),
(702,242,qs),
(702,282,o),
(723,407,o),
(739,484,q),
(641,495,l),
(622,445,l),
(615,468,o),
(588,498,o),
(554,516,o),
(515,523,o),
(496,523,qs),
(457,523,o),
(382,496,o),
(350,467,qs),
(316,435,o),
(275,339,o),
(273,277,qs),
(273,228,o),
(297,144,o),
(345,83,o),
(415,49,o),
(461,49,qs),
(478,49,o),
(522,57,o),
(545,68,qs),
(566,79,o),
(604,116,o),
(615,139,q),
(620,116,o),
(646,81,o),
(661,70,qs),
(684,53,o),
(732,43,o),
(750,43,qs),
(799,43,o),
(874,87,o),
(924,161,o),
(950,257,o),
(952,310,qs),
(952,413,o),
(891,567,o),
(782,670,o),
(629,723,o),
(536,724,qs),
(429,724,o),
(254,666,o),
(128,551,o),
(56,377,o),
(50,261,q),
(50,159,o)
);
},
{
closed = 1;
nodes = (
(410,240,o),
(410,278,qs),
(410,298,o),
(421,336,o),
(444,366,o),
(478,384,o),
(502,384,qs),
(523,384,o),
(551,366,o),
(569,339,o),
(577,308,o),
(576,295,qs),
(575,280,o),
(568,242,o),
(549,209,o),
(515,187,o),
(488,187,qs),
(452,187,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
45 44 43 3 9 3 88 1 4 9 21 1 1 4 74 1 6 1 75 1 7 6 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
45 44 43 3 9 3 88 1 4 9 21 1 2 4 74 1 6 1 75 1 7 6 5 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
10 8 2 4 2 1 1 6 4 1 105 0 6 0 7 6 7 101 0 5 5 0 97 0 0 0 46 77 0 9 9 3 97 0 3 3 41 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 4 2 89 10 8 2 4 0 1 6 4 1 105 0 6 0 7 6 7 101 0 5 5 0 97 0 0 0 46 77 0 9 9 3 97 0 3 3 41 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
84 83 94 92 83 100 84 100 37 40 40 43 41 42 40 36 11 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1001;
}
);
note = at;
unicode = 64;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,-160,l),
(359,-4,l),
(238,-4,l),
(238,623,l),
(359,623,l),
(359,779,l),
(67,779,l),
(67,-160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 374;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,779,l),
(15,623,l),
(137,623,l),
(137,-4,l),
(15,-4,l),
(15,-160,l),
(308,-160,l),
(308,779,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 375;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,779,l),
(19,779,l),
(342,-160,l),
(517,-160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,709,l),
(230,709,l),
(39,429,l),
(205,429,l),
(292,567,l),
(376,429,l),
(545,429,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
1 1 0 1 1 76 0 1 0 1 133 3 2 2 0 0 118 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 584;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,-7,l),
(-23,-7,l),
(-23,-161,l),
(455,-161,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 432;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,232,ls),
(69,232,o),
(89,220,o),
(99,203,o),
(101,182,o),
(101,173,qs),
(101,-18,ls),
(101,-57,o),
(124,-111,o),
(165,-144,o),
(221,-159,o),
(254,-159,qs),
(374,-159,l),
(374,-3,l),
(307,-3,ls),
(292,-3,o),
(277,6,o),
(271,19,o),
(271,34,o),
(271,40,qs),
(271,195,ls),
(271,271,o),
(231,310,q),
(271,349,o),
(271,425,qs),
(271,579,ls),
(271,585,o),
(271,601,o),
(277,614,o),
(292,623,o),
(307,623,qs),
(374,623,l),
(374,779,l),
(254,779,ls),
(221,779,o),
(165,764,o),
(124,731,o),
(101,677,o),
(101,638,qs),
(101,448,ls),
(101,439,o),
(99,418,o),
(89,400,o),
(69,388,o),
(50,388,qs),
(17,388,l),
(17,232,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
23 1 5 0 1 76 0 1 0 2 0 1 2 105 0 0 0 5 3 0 5 105 0 3 4 4 3 89 0 3 3 4 95 0 4 3 4 79 41 33 46 33 41 32 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,794,l),
(67,794,l),
(67,-163,l),
(231,-163,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,388,ls),
(344,388,o),
(324,400,o),
(314,418,o),
(312,439,o),
(312,448,qs),
(312,638,ls),
(312,677,o),
(289,731,o),
(249,764,o),
(194,779,o),
(161,779,qs),
(39,779,l),
(39,623,l),
(106,623,ls),
(121,623,o),
(136,614,o),
(142,601,o),
(142,586,o),
(142,580,qs),
(142,425,ls),
(142,387,o),
(160,330,o),
(182,310,q),
(183,310,l),
(142,269,o),
(142,195,qs),
(142,41,ls),
(142,35,o),
(142,19,o),
(136,6,o),
(121,-3,o),
(106,-3,qs),
(39,-3,l),
(39,-159,l),
(161,-159,ls),
(194,-159,o),
(249,-144,o),
(289,-111,o),
(312,-57,o),
(312,-18,qs),
(312,173,ls),
(312,182,o),
(314,202,o),
(325,220,o),
(345,232,o),
(363,232,qs),
(396,232,l),
(396,388,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
23 1 0 5 1 76 0 4 0 3 5 4 3 105 0 5 0 0 2 5 0 105 0 2 1 1 2 89 0 2 2 1 95 0 1 2 1 79 48 46 37 35 34 32 33 41 32 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(676,36,o),
(725,89,q),
(633,211,l),
(607,183,o),
(527,154,o),
(484,154,qs),
(445,154,o),
(373,179,o),
(350,203,q),
(519,203,l),
(546,337,l),
(307,337,l),
(308,374,l),
(548,374,l),
(574,508,l),
(346,508,l),
(354,521,o),
(385,541,o),
(423,556,o),
(466,564,o),
(487,564,qs),
(544,564,o),
(613,531,o),
(629,513,q),
(714,632,l),
(685,661,o),
(630,691,o),
(573,710,o),
(511,717,o),
(475,717,qs),
(423,717,o),
(326,691,o),
(242,638,o),
(177,560,o),
(156,508,q),
(64,508,l),
(36,374,l),
(134,374,l),
(134,337,l),
(58,337,l),
(29,203,l),
(153,203,l),
(166,149,o),
(233,66,o),
(278,40,qs),
(321,14,o),
(419,-8,o),
(478,-8,qs),
(550,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
23 1 6 5 24 1 4 6 45 1 1 2 46 1 0 11 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 8 1 3 3 4 95 7 1 4 4 41 77 0 11 11 0 97 12 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 0 11 11 0 97 12 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
1 0 43 41 39 38 37 36 35 34 33 32 28 26 19 17 13 12 11 10 9 8 7 6 0 48 1 48 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 754;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,-165,o),
(190,-124,o),
(238,-66,o),
(268,7,o),
(269,49,qs),
(269,76,o),
(256,122,o),
(230,157,o),
(191,177,o),
(166,177,qs),
(146,177,o),
(109,165,o),
(81,140,o),
(64,103,o),
(64,78,qs),
(64,36,o),
(115,-11,o),
(147,-14,q),
(143,-24,o),
(119,-49,o),
(89,-73,o),
(58,-94,o),
(47,-98,q),
(96,-175,l)
);
},
{
closed = 1;
nodes = (
(385,-165,o),
(447,-124,o),
(495,-66,o),
(525,7,o),
(526,49,qs),
(526,76,o),
(513,122,o),
(487,157,o),
(448,177,o),
(423,177,qs),
(403,177,o),
(366,165,o),
(338,140,o),
(321,103,o),
(321,78,qs),
(321,36,o),
(372,-11,o),
(404,-14,q),
(400,-24,o),
(376,-49,o),
(346,-73,o),
(315,-94,o),
(304,-98,q),
(353,-175,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 29 23 5 4 0 73 1 1 0 0 118 38 36 44 2 8 23 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,-165,o),
(190,-124,o),
(238,-66,o),
(268,7,o),
(269,49,qs),
(269,76,o),
(256,122,o),
(230,157,o),
(191,177,o),
(166,177,qs),
(146,177,o),
(109,165,o),
(81,140,o),
(64,103,o),
(64,78,qs),
(64,36,o),
(115,-11,o),
(147,-14,q),
(143,-24,o),
(119,-49,o),
(89,-73,o),
(58,-94,o),
(47,-98,q),
(96,-175,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 73 0 0 0 118 44 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,406,o),
(190,447,o),
(238,505,o),
(268,578,o),
(269,620,qs),
(269,647,o),
(256,693,o),
(230,728,o),
(191,748,o),
(166,748,qs),
(146,748,o),
(109,736,o),
(81,711,o),
(64,674,o),
(64,649,qs),
(64,607,o),
(115,560,o),
(147,557,q),
(143,547,o),
(119,522,o),
(89,498,o),
(58,477,o),
(47,473,q),
(96,396,l)
);
},
{
closed = 1;
nodes = (
(385,406,o),
(447,447,o),
(495,505,o),
(525,578,o),
(526,620,qs),
(526,647,o),
(513,693,o),
(487,728,o),
(448,748,o),
(423,748,qs),
(403,748,o),
(366,736,o),
(338,711,o),
(321,674,o),
(321,649,qs),
(321,607,o),
(372,560,o),
(404,557,q),
(400,547,o),
(376,522,o),
(346,498,o),
(315,477,o),
(304,473,q),
(353,396,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 29 23 5 4 0 73 1 1 0 0 118 38 36 44 2 8 23 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,406,o),
(190,447,o),
(238,505,o),
(268,578,o),
(269,620,qs),
(269,647,o),
(256,693,o),
(230,728,o),
(191,748,o),
(166,748,qs),
(146,748,o),
(109,736,o),
(81,711,o),
(64,674,o),
(64,649,qs),
(64,607,o),
(115,560,o),
(147,557,q),
(143,547,o),
(119,522,o),
(89,498,o),
(58,477,o),
(47,473,q),
(96,396,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 73 0 0 0 118 44 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(446,766,o),
(384,726,o),
(336,668,o),
(306,595,o),
(305,553,qs),
(305,526,o),
(318,480,o),
(344,445,o),
(383,425,o),
(408,425,qs),
(428,425,o),
(465,437,o),
(493,462,o),
(510,499,o),
(510,524,qs),
(510,566,o),
(459,613,o),
(427,616,q),
(431,626,o),
(455,651,o),
(485,675,o),
(516,695,o),
(527,700,q),
(478,777,l)
);
},
{
closed = 1;
nodes = (
(189,766,o),
(127,726,o),
(79,668,o),
(49,595,o),
(48,553,qs),
(48,526,o),
(61,480,o),
(87,445,o),
(126,425,o),
(151,425,qs),
(171,425,o),
(208,437,o),
(236,462,o),
(253,499,o),
(253,524,qs),
(253,566,o),
(202,613,o),
(170,616,q),
(174,626,o),
(198,651,o),
(228,675,o),
(259,695,o),
(270,700,q),
(221,777,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 29 23 5 4 0 74 1 1 0 0 118 38 36 44 2 8 23 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,766,o),
(127,726,o),
(79,668,o),
(49,595,o),
(48,553,qs),
(48,526,o),
(61,480,o),
(87,445,o),
(126,425,o),
(151,425,qs),
(171,425,o),
(208,437,o),
(236,462,o),
(253,499,o),
(253,524,qs),
(253,566,o),
(202,613,o),
(170,616,q),
(174,626,o),
(198,651,o),
(228,675,o),
(259,695,o),
(270,700,q),
(221,777,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 74 0 0 0 118 44 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(532,440,l),
(54,440,l),
(54,282,l),
(532,282,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,374,l),
(54,216,l),
(415,216,l),
(415,374,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 469;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,374,l),
(54,216,l),
(582,216,l),
(582,374,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,374,l),
(54,216,l),
(800,216,l),
(800,374,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,769,l),
(30,769,l),
(201,577,l),
(349,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 436;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,769,l),
(87,577,l),
(235,577,l),
(406,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 436;
}
);
note = acute;
unicode = 180;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,76,l),
(603,276,l),
(459,477,l),
(301,477,l),
(445,276,l),
(301,76,l)
);
},
{
closed = 1;
nodes = (
(197,76,l),
(340,276,l),
(197,477,l),
(39,477,l),
(185,276,l),
(39,76,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,76,l),
(223,76,l),
(366,277,l),
(223,477,l),
(39,477,l),
(187,277,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,477,l),
(19,277,l),
(163,76,l),
(323,76,l),
(178,277,l),
(323,477,l)
);
},
{
closed = 1;
nodes = (
(423,477,l),
(281,277,l),
(423,76,l),
(583,76,l),
(439,277,l),
(583,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 0 1 1 76 3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,477,l),
(19,277,l),
(162,76,l),
(344,76,l),
(199,277,l),
(344,477,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 383;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,372,l),
(54,218,l),
(415,218,l),
(415,372,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 469;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,188,o),
(55,161,o),
(37,122,o),
(37,97,qs),
(37,44,o),
(101,-9,o),
(143,-9,qs),
(185,-9,o),
(248,44,o),
(248,97,qs),
(248,122,o),
(231,161,o),
(202,188,o),
(164,203,o),
(143,203,qs),
(123,203,o)
);
},
{
closed = 1;
nodes = (
(346,188,o),
(316,161,o),
(298,122,o),
(298,97,qs),
(298,44,o),
(362,-9,o),
(404,-9,qs),
(446,-9,o),
(509,44,o),
(509,97,qs),
(509,122,o),
(492,161,o),
(463,188,o),
(425,203,o),
(404,203,qs),
(384,203,o)
);
},
{
closed = 1;
nodes = (
(604,188,o),
(574,161,o),
(556,122,o),
(556,97,qs),
(556,44,o),
(620,-9,o),
(662,-9,qs),
(704,-9,o),
(767,44,o),
(767,97,qs),
(767,122,o),
(750,161,o),
(721,188,o),
(683,203,o),
(662,203,qs),
(642,203,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 4 7 2 6 5 0 0 1 97 5 3 2 1 1 47 1 78 33 32 17 16 1 0 41 39 32 47 33 47 25 23 16 31 17 31 9 7 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 804;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = uni0445;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,527,l),
(10,527,l),
(182,269,l),
(0,0,l),
(196,0,l),
(291,154,l),
(385,0,l),
(590,0,l),
(404,266,l),
(578,527,l),
(380,527,l),
(297,384,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 22 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = uni0445;
unicode = 1093;
},
{
glyphname = uni0431;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(68,139,o),
(138,46,o),
(247,-8,o),
(322,-8,qs),
(383,-8,o),
(484,29,o),
(558,99,o),
(599,201,o),
(599,265,qs),
(599,313,o),
(571,401,o),
(514,468,o),
(431,507,o),
(376,507,qs),
(355,507,o),
(305,500,o),
(255,480,o),
(208,444,o),
(190,416,q),
(189,447,o),
(210,489,o),
(218,500,qs),
(234,520,o),
(284,545,o),
(349,558,o),
(418,564,o),
(451,566,qs),
(487,568,o),
(551,574,o),
(572,579,q),
(572,765,l),
(563,763,o),
(544,760,o),
(508,754,o),
(447,747,o),
(398,741,qs),
(341,734,o),
(247,715,o),
(209,697,qs),
(119,653,o),
(30,479,o),
(32,331,qs),
(33,263,o)
);
},
{
closed = 1;
nodes = (
(256,168,o),
(231,195,o),
(219,231,o),
(219,249,qs),
(219,286,o),
(274,343,o),
(325,343,qs),
(349,343,o),
(386,327,o),
(411,300,o),
(423,266,o),
(423,248,qs),
(423,230,o),
(411,195,o),
(386,167,o),
(346,149,o),
(320,149,qs),
(294,149,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
23 1 4 1 1 76 12 11 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 1 0 133 0 4 1 3 1 4 3 128 0 1 1 22 77 5 1 3 3 2 98 0 2 2 28 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 0 133 0 1 4 1 133 0 4 3 4 133 5 1 3 3 2 98 0 2 2 28 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
44 43 54 52 43 60 44 60 40 43 46 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = uni0431;
unicode = 1073;
},
{
glyphname = uni0432;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,0,l),
(336,0,ls),
(366,0,o),
(438,14,o),
(502,51,o),
(545,114,o),
(546,160,qs),
(547,205,o),
(514,270,o),
(482,286,q),
(500,298,o),
(530,351,o),
(530,384,qs),
(530,430,o),
(495,487,o),
(439,517,o),
(372,527,o),
(339,527,qs),
(47,527,l)
);
},
{
closed = 1;
nodes = (
(224,218,l),
(332,218,ls),
(356,218,o),
(374,199,o),
(374,187,qs),
(374,172,o),
(351,153,o),
(329,153,qs),
(224,153,l)
);
},
{
closed = 1;
nodes = (
(224,384,l),
(320,384,ls),
(363,384,o),
(363,356,qs),
(363,344,o),
(346,324,o),
(322,324,qs),
(224,324,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
8 1 3 4 1 76 8 1 4 0 3 2 4 3 103 0 5 5 0 95 6 1 0 0 22 77 7 1 2 2 1 95 0 1 1 21 1 78 29 28 20 19 1 0 34 32 28 35 29 35 26 24 19 27 20 27 17 15 0 18 1 18 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni0432;
unicode = 1074;
},
{
glyphname = uni0433;
kernLeft = uni0432;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,0,l),
(224,0,l),
(224,369,l),
(437,369,l),
(437,527,l),
(47,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 2 95 3 1 2 2 22 77 0 1 1 21 1 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 445;
}
);
note = uni0433;
unicode = 1075;
},
{
glyphname = uni0434;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(112,479,ls),
(112,427,o),
(108,314,o),
(88,220,o),
(45,159,o),
(8,159,q),
(8,-139,l),
(185,-139,l),
(185,0,l),
(459,0,l),
(459,-139,l),
(635,-139,l),
(635,159,l),
(570,159,l),
(570,527,l),
(112,527,l)
);
},
{
closed = 1;
nodes = (
(257,204,o),
(266,316,o),
(266,369,q),
(393,369,l),
(393,159,l),
(239,159,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
3 1 1 0 1 83 0 6 6 5 95 8 1 5 5 22 77 9 7 4 3 0 0 2 95 0 2 2 21 2 78 16 16 0 0 16 21 16 21 18 17 0 15 0 15 17 17 17 17 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = uni0434;
unicode = 1076;
},
{
glyphname = uni0436;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(662,0,l),
(858,0,l),
(726,276,l),
(854,527,l),
(668,527,l),
(588,341,l),
(517,341,l),
(517,527,l),
(340,527,l),
(340,341,l),
(271,341,l),
(187,527,l),
(4,527,l),
(129,276,l),
(0,0,l),
(194,0,l),
(269,182,l),
(340,182,l),
(340,0,l),
(517,0,l),
(517,182,l),
(589,182,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
18 7 2 1 4 1 76 6 1 4 10 9 2 1 0 4 1 103 7 5 2 3 3 22 77 8 2 2 0 0 21 0 78 0 0 0 21 0 21 18 17 17 17 17 18 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 858;
}
);
note = uni0436;
unicode = 1078;
},
{
glyphname = uni043A;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,0,l),
(597,0,l),
(447,281,l),
(605,527,l),
(406,527,l),
(296,341,l),
(224,341,l),
(224,527,l),
(47,527,l),
(47,0,l),
(224,0,l),
(224,182,l),
(303,182,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 22 77 4 1 0 0 21 0 78 0 0 0 12 0 12 18 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = uni043A;
unicode = 1082;
},
{
glyphname = uni0438;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(201,0,l),
(398,241,l),
(398,0,l),
(575,0,l),
(575,527,l),
(429,527,l),
(224,276,l),
(224,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
5 0 2 1 0 1 76 3 1 0 0 22 77 2 1 1 1 21 1 78 17 18 17 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = uni0438;
unicode = 1080;
},
{
glyphname = uni0439;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,638,o),
(525,727,q),
(385,727,l),
(379,670,o),
(322,670,qs),
(298,670,o),
(262,698,o),
(260,727,q),
(119,727,l),
(120,683,o),
(152,618,o),
(206,574,o),
(279,552,o),
(322,552,qs),
(409,552,o)
);
},
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(201,0,l),
(398,241,l),
(398,0,l),
(575,0,l),
(575,527,l),
(429,527,l),
(224,276,l),
(224,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 15 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 8 1 0 4 2 0 106 3 1 1 1 20 77 7 1 4 4 22 77 6 1 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
3 1 1 2 1 133 0 2 8 1 0 4 2 0 106 7 1 4 4 22 77 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 24 23 22 21 19 18 17 16 12 11 10 8 6 5 0 14 1 14 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = uni0439;
unicode = 1081;
},
{
glyphname = uni043B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,518,o),
(96,472,o),
(95,411,o),
(93,342,o),
(91,313,qs),
(91,299,o),
(83,240,o),
(68,195,o),
(35,164,o),
(7,163,q),
(7,-1,l),
(45,-1,ls),
(84,-1,o),
(164,17,o),
(191,45,qs),
(221,76,o),
(235,134,qs),
(242,162,o),
(249,224,o),
(253,287,o),
(254,345,o),
(254,369,q),
(361,369,l),
(361,0,l),
(537,0,l),
(537,527,l),
(96,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 1 4 95 5 1 4 4 22 77 0 3 3 0 97 2 1 0 0 21 0 78 0 0 0 26 0 26 17 41 17 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = uni043B;
unicode = 1083;
},
{
glyphname = uni043C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,280,l),
(524,0,l),
(701,0,l),
(701,527,l),
(502,527,l),
(376,323,l),
(249,527,l),
(47,527,l),
(47,0,l),
(224,0,l),
(224,282,l),
(349,88,l),
(401,88,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 1 3 4 1 1 76 5 1 4 1 0 1 4 0 128 2 1 1 1 22 77 3 1 0 0 21 0 78 0 0 0 12 0 12 17 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = uni043C;
unicode = 1084;
},
{
glyphname = uni043D;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,184,l),
(379,184,l),
(379,0,l),
(556,0,l),
(556,527,l),
(379,527,l),
(379,343,l),
(224,343,l),
(224,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 22 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = uni043D;
unicode = 1085;
},
{
glyphname = uni043F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,0,l),
(224,0,l),
(224,369,l),
(377,369,l),
(377,0,l),
(553,0,l),
(553,527,l),
(47,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 1 3 95 4 1 3 3 22 77 2 1 0 0 21 0 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni043F;
unicode = 1087;
},
{
glyphname = uni0442;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(349,0,l),
(349,369,l),
(516,369,l),
(516,527,l),
(8,527,l),
(8,369,l),
(173,369,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 22 77 0 2 2 21 2 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = uni0442;
unicode = 1090;
},
{
glyphname = uni0444;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,536,l),
(254,536,o),
(146,503,o),
(68,436,o),
(23,335,o),
(23,267,qs),
(23,200,o),
(68,101,o),
(145,34,o),
(253,-1,o),
(315,-4,q),
(315,-201,l),
(492,-201,l),
(492,-5,l),
(553,-1,o),
(660,33,o),
(737,99,o),
(782,195,o),
(784,261,qs),
(784,331,o),
(741,434,o),
(665,503,o),
(558,536,o),
(492,536,q),
(492,698,l),
(315,698,l)
);
},
{
closed = 1;
nodes = (
(288,154,o),
(245,172,o),
(215,203,o),
(200,243,o),
(200,266,qs),
(200,287,o),
(214,326,o),
(243,357,o),
(286,375,o),
(315,375,q),
(315,154,l)
);
},
{
closed = 1;
nodes = (
(520,375,o),
(564,357,o),
(593,326,o),
(607,287,o),
(607,266,qs),
(607,243,o),
(592,203,o),
(562,172,o),
(519,154,o),
(492,154,q),
(492,375,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
10 1 5 5 20 77 9 1 6 6 0 97 4 1 0 0 29 77 8 1 7 7 1 97 3 1 1 1 21 77 0 2 2 24 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
9 1 6 6 0 97 4 1 0 0 29 77 8 1 7 7 1 97 3 1 1 1 21 77 0 2 2 5 95 10 1 5 5 20 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
10 1 5 0 2 5 2 99 9 1 6 6 0 97 4 1 0 0 29 77 8 1 7 7 1 97 3 1 1 1 21 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 47 46 38 37 36 35 27 26 0 25 0 25 24 17 17 24 17 11 7 27 
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = uni0444;
unicode = 1092;
},
{
glyphname = uni0446;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(446,-139,l),
(623,-139,l),
(623,159,l),
(556,159,l),
(556,527,l),
(379,527,l),
(379,159,l),
(224,159,l),
(224,527,l),
(47,527,l),
(47,0,l),
(446,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 4 1 4 84 2 1 0 0 22 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = uni0446;
unicode = 1094;
},
{
glyphname = uni0447;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,323,o),
(52,239,o),
(81,210,qs),
(134,157,o),
(248,157,qs),
(259,157,o),
(274,157,o),
(308,158,o),
(333,160,q),
(333,0,l),
(510,0,l),
(510,527,l),
(333,527,l),
(333,321,l),
(298,318,o),
(272,318,qs),
(247,318,o),
(218,329,o),
(204,349,o),
(201,375,o),
(201,389,qs),
(201,527,l),
(24,527,l),
(24,384,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
9 1 1 0 14 1 4 1 2 76 0 1 0 4 3 1 4 106 2 1 0 0 22 77 0 3 3 21 3 78 66 17 18 37 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = uni0447;
unicode = 1095;
},
{
glyphname = uni0448;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(818,527,l),
(641,527,l),
(641,159,l),
(520,159,l),
(520,527,l),
(343,527,l),
(343,159,l),
(224,159,l),
(224,527,l),
(47,527,l),
(47,0,l),
(818,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 2 0 0 22 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 866;
}
);
note = uni0448;
unicode = 1096;
},
{
glyphname = uni0449;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(709,-139,l),
(886,-139,l),
(886,159,l),
(817,159,l),
(817,527,l),
(640,527,l),
(640,159,l),
(520,159,l),
(520,527,l),
(343,527,l),
(343,159,l),
(224,159,l),
(224,527,l),
(47,527,l),
(47,0,l),
(709,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 6 1 6 84 4 2 2 0 0 22 77 5 3 2 1 1 7 96 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 888;
}
);
note = uni0449;
unicode = 1097;
},
{
glyphname = uni044A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,0,l),
(324,0,ls),
(370,0,o),
(457,18,o),
(526,63,o),
(572,136,o),
(576,193,q),
(576,247,o),
(541,319,o),
(482,362,o),
(402,379,o),
(357,379,qs),
(273,379,l),
(273,527,l),
(-6,527,l),
(-6,369,l),
(96,369,l)
);
},
{
closed = 1;
nodes = (
(379,232,o),
(401,210,o),
(401,195,qs),
(401,175,o),
(371,155,o),
(337,155,qs),
(273,155,l),
(273,232,l),
(348,232,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 1 7 1 5 4 1 5 103 6 1 3 3 0 95 0 0 0 22 77 0 4 4 2 95 0 2 2 21 2 78 17 17 0 0 17 25 17 24 20 18 0 16 0 16 40 33 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = uni044A;
unicode = 1098;
},
{
glyphname = uni044B;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,527,l),
(565,0,l),
(741,0,l),
(741,527,l)
);
},
{
closed = 1;
nodes = (
(47,0,l),
(267,0,ls),
(310,0,o),
(395,20,o),
(462,66,o),
(505,140,o),
(507,196,qs),
(507,251,o),
(472,322,o),
(412,363,o),
(334,379,o),
(291,379,qs),
(224,379,l),
(224,527,l),
(47,527,l)
);
},
{
closed = 1;
nodes = (
(224,232,l),
(279,232,ls),
(306,232,o),
(333,212,o),
(333,195,qs),
(333,175,o),
(306,155,o),
(273,155,qs),
(224,155,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 2 0 6 5 2 6 105 7 4 2 1 1 22 77 8 1 5 5 0 96 3 1 0 0 21 0 78 20 19 4 4 26 24 19 27 20 27 4 18 4 18 40 34 17 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 789;
}
);
note = uni044B;
unicode = 1099;
},
{
glyphname = uni044C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,0,l),
(299,0,ls),
(344,0,o),
(429,20,o),
(496,66,o),
(538,140,o),
(541,196,qs),
(541,247,o),
(508,318,o),
(449,361,o),
(371,379,o),
(325,379,qs),
(224,379,l),
(224,527,l),
(47,527,l)
);
},
{
closed = 1;
nodes = (
(224,232,l),
(311,232,ls),
(367,232,o),
(367,195,qs),
(367,155,o),
(307,155,qs),
(224,155,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 4 3 0 4 103 5 1 2 2 22 77 6 1 3 3 1 96 0 1 1 21 1 78 16 15 0 0 20 18 15 21 16 21 0 14 0 14 40 33 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = uni044C;
unicode = 1100;
},
{
glyphname = uni044E;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(611,355,o),
(633,322,o),
(642,283,o),
(642,265,qs),
(642,246,o),
(633,207,o),
(611,174,o),
(574,153,o),
(546,153,qs),
(519,153,o),
(481,173,o),
(458,204,o),
(447,244,o),
(447,265,qs),
(447,284,o),
(458,324,o),
(481,356,o),
(519,376,o),
(546,376,qs),
(574,376,o)
);
},
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,184,l),
(291,184,l),
(300,139,o),
(344,69,o),
(411,18,o),
(497,-8,o),
(546,-8,qs),
(608,-8,o),
(708,29,o),
(779,100,o),
(816,201,o),
(816,266,qs),
(816,330,o),
(776,432,o),
(703,502,o),
(604,538,o),
(546,538,qs),
(496,538,o),
(410,509,o),
(344,458,o),
(300,386,o),
(291,343,q),
(224,343,l),
(224,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 0 5 1 2 5 103 8 1 0 0 3 97 7 1 3 3 29 77 0 1 1 4 97 6 1 4 4 28 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 5 1 2 5 103 0 7 7 22 77 8 1 0 0 3 97 0 3 3 29 77 0 1 1 4 97 6 1 4 4 28 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 0 5 1 2 5 103 0 7 7 22 77 8 1 0 0 3 97 0 3 3 29 77 0 6 6 21 77 0 1 1 4 97 0 4 4 28 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 46 45 44 43 42 41 37 35 27 25 21 20 11 9 0 19 1 19 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 839;
}
);
note = uni044E;
unicode = 1102;
},
{
glyphname = uni044F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,527,o),
(156,512,o),
(92,471,o),
(53,400,o),
(53,345,qs),
(53,317,o),
(70,267,o),
(98,226,o),
(137,197,o),
(161,190,q),
(14,0,l),
(223,0,l),
(323,153,l),
(373,153,l),
(373,0,l),
(549,0,l),
(549,527,l),
(277,527,ls)
);
},
{
closed = 1;
nodes = (
(280,296,o),
(259,300,o),
(240,310,o),
(228,326,o),
(228,338,qs),
(228,354,o),
(253,377,o),
(279,377,qs),
(373,377,l),
(373,296,l),
(288,296,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
7 1 1 5 1 76 7 1 5 0 1 0 5 1 103 0 4 4 3 95 6 1 3 3 22 77 2 1 0 0 21 0 78 18 18 0 0 18 28 18 27 21 19 0 17 0 16 17 17 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = uni044F;
unicode = 1103;
},
{
glyphname = u_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(569,527,l),
(392,527,l),
(392,258,ls),
(392,241,o),
(389,205,o),
(370,174,o),
(335,153,o),
(307,153,qs),
(278,153,o),
(242,173,o),
(224,205,o),
(219,242,o),
(219,260,qs),
(219,527,l),
(42,527,l),
(42,236,ls),
(42,180,o),
(66,90,o),
(115,26,o),
(193,-8,o),
(246,-8,qs),
(266,-8,o),
(310,-4,o),
(355,12,o),
(391,37,o),
(405,57,q),
(405,0,l),
(569,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
1 1 4 2 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 22 77 5 4 2 0 0 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 1 4 1 2 4 128 3 1 1 1 22 77 5 1 4 4 21 77 0 0 0 28 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 27 0 27 21 37 21 37 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = u_alt;
},
{
glyphname = uni0410;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
9 1 4 1 1 76 5 1 4 0 3 0 4 3 104 0 1 1 20 77 2 1 0 0 21 0 78 8 8 8 10 8 10 17 17 17 16 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = uni0410;
unicode = 1040;
},
{
glyphname = uni0415;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 20 77 0 3 3 4 95 0 4 4 21 4 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = uni0415;
unicode = 1045;
},
{
glyphname = uni041C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,451,l),
(430,140,l),
(501,140,l),
(680,451,l),
(680,0,l),
(861,0,l),
(861,708,l),
(641,708,l),
(469,398,l),
(296,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 6 1 3 2 0 1 76 0 2 0 1 0 2 1 128 5 4 2 0 0 20 77 3 1 1 1 21 1 78 0 0 0 12 0 12 18 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 928;
}
);
note = uni041C;
unicode = 1052;
},
{
glyphname = uni041D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,267,l),
(505,267,l),
(505,0,l),
(686,0,l),
(686,708,l),
(505,708,l),
(505,433,l),
(248,433,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 20 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = uni041D;
unicode = 1053;
},
{
glyphname = uni0420;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,199,l),
(357,199,ls),
(409,199,o),
(505,222,o),
(542,248,qs),
(589,280,o),
(644,384,o),
(645,457,qs),
(645,528,o),
(604,624,o),
(529,683,o),
(426,708,o),
(364,708,qs),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(356,540,ls),
(416,540,o),
(468,497,o),
(467,452,qs),
(466,409,o),
(409,360,o),
(357,360,qs),
(248,360,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 3 0 1 2 3 1 103 0 4 4 0 95 5 1 0 0 20 77 0 2 2 21 2 78 17 16 1 0 23 21 16 24 17 24 14 13 12 10 0 15 1 15 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = uni0420;
unicode = 1056;
},
{
glyphname = uni0422;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,0,l),
(396,0,l),
(396,540,l),
(607,540,l),
(607,708,l),
(5,708,l),
(5,540,l),
(215,540,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 20 77 0 2 2 21 2 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = uni0422;
unicode = 1058;
},
{
glyphname = uni0425;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,708,l),
(8,708,l),
(250,355,l),
(0,0,l),
(205,0,l),
(356,225,l),
(501,0,l),
(719,0,l),
(471,354,l),
(712,708,l),
(500,708,l),
(364,483,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = uni0425;
unicode = 1061;
},
{
glyphname = T;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,0,l),
(396,0,l),
(396,540,l),
(607,540,l),
(607,708,l),
(5,708,l),
(5,540,l),
(215,540,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = T;
unicode = 84;
},
{
glyphname = uni0412;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,0,o),
(544,22,o),
(589,59,qs),
(620,85,o),
(662,167,o),
(662,225,qs),
(662,289,o),
(608,370,o),
(566,390,q),
(597,410,o),
(632,481,o),
(632,519,qs),
(632,573,o),
(599,645,o),
(541,689,o),
(463,708,o),
(418,708,qs),
(66,708,l),
(66,0,l),
(360,0,ls)
);
},
{
closed = 1;
nodes = (
(398,287,ls),
(481,287,o),
(481,229,qs),
(481,201,o),
(439,167,o),
(391,167,qs),
(247,167,l),
(247,287,l)
);
},
{
closed = 1;
nodes = (
(247,541,l),
(382,541,ls),
(417,541,o),
(452,517,o),
(452,490,qs),
(453,467,o),
(416,433,o),
(374,433,qs),
(247,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
10 1 3 4 1 76 7 1 4 0 3 2 4 3 103 0 5 5 0 95 0 0 0 20 77 0 2 2 1 95 6 1 1 1 21 1 78 29 28 0 0 35 33 28 36 29 36 27 25 22 20 0 19 0 18 33 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = uni0412;
unicode = 1042;
},
{
glyphname = uni041F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,542,l),
(496,542,l),
(496,0,l),
(677,0,l),
(677,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 1 1 3 95 4 1 3 3 20 77 2 1 0 0 21 0 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = uni041F;
unicode = 1055;
},
{
glyphname = uni0413;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,540,l),
(579,540,l),
(579,708,l),
(67,708,l),
(67,0,l),
(248,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 20 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni0413;
unicode = 1043;
},
{
glyphname = uni041B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,0,l),
(639,0,l),
(639,708,l),
(117,708,l),
(117,455,ls),
(117,440,o),
(116,404,o),
(115,359,o),
(113,313,o),
(111,292,qs),
(109,275,o),
(104,247,o),
(94,215,o),
(76,187,o),
(61,180,qs),
(50,174,o),
(21,170,o),
(7,170,q),
(7,-1,l),
(45,-1,ls),
(133,-1,o),
(230,59,o),
(275,167,o),
(284,316,o),
(284,404,qs),
(284,540,l),
(458,540,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
5 1 4 4 2 95 0 2 2 20 77 0 1 1 0 97 3 1 0 0 21 0 78 0 0 0 26 0 26 17 29 17 37 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = uni041B;
unicode = 1051;
},
{
glyphname = uni0414;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(662,167,l),
(662,708,l),
(130,708,l),
(130,655,o),
(128,548,o),
(126,493,qs),
(124,435,o),
(116,315,o),
(102,255,qs),
(94,219,o),
(52,167,o),
(7,167,q),
(7,-168,l),
(188,-168,l),
(188,0,l),
(566,0,l),
(566,-168,l),
(747,-168,l),
(747,167,l)
);
},
{
closed = 1;
nodes = (
(292,392,o),
(293,433,o),
(294,494,o),
(294,540,q),
(481,540,l),
(481,167,l),
(261,167,l),
(270,186,o),
(281,235,o),
(287,286,o),
(290,334,o),
(291,352,qs),
(291,364,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 1 0 3 0 83 0 7 7 4 95 0 4 4 20 77 6 5 2 3 3 1 95 0 1 1 21 1 78 17 22 17 24 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 754;
}
);
note = uni0414;
unicode = 1044;
},
{
glyphname = uni0411;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(409,1,o),
(516,21,o),
(602,74,o),
(657,164,o),
(657,235,qs),
(657,301,o),
(614,383,o),
(542,429,o),
(447,446,o),
(395,446,qs),
(248,446,l),
(248,540,l),
(614,540,l),
(614,708,l),
(67,708,l),
(67,0,l),
(358,0,ls)
);
},
{
closed = 1;
nodes = (
(377,291,ls),
(399,291,o),
(436,287,o),
(463,273,o),
(478,249,o),
(478,230,qs),
(478,209,o),
(458,185,o),
(427,171,o),
(388,167,o),
(370,167,qs),
(248,167,l),
(248,291,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 2 0 5 4 2 5 103 0 1 1 0 95 0 0 0 20 77 0 4 4 3 95 6 1 3 3 21 3 78 0 0 29 27 19 17 0 16 0 15 33 17 17 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = uni0411;
unicode = 1041;
},
{
glyphname = uni0416;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(835,0,l),
(1047,0,l),
(844,370,l),
(1048,708,l),
(843,708,l),
(695,434,l),
(614,434,l),
(614,708,l),
(433,708,l),
(433,434,l),
(352,434,l),
(206,708,l),
(0,708,l),
(203,370,l),
(2,0,l),
(212,0,l),
(349,271,l),
(433,270,l),
(433,0,l),
(614,0,l),
(614,270,l),
(700,270,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
18 7 2 1 4 1 76 6 1 4 10 9 2 1 0 4 1 103 7 5 2 3 3 20 77 8 2 2 0 0 21 0 78 0 0 0 21 0 21 18 17 17 17 17 18 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1048;
}
);
note = uni0416;
unicode = 1046;
},
{
glyphname = uni0417;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,178,o),
(84,81,o),
(170,20,o),
(280,-8,o),
(342,-8,qs),
(390,-8,o),
(479,5,o),
(529,29,qs),
(551,41,o),
(592,76,o),
(625,122,o),
(646,179,o),
(646,213,q),
(650,268,o),
(608,363,o),
(555,386,q),
(587,412,o),
(620,473,o),
(620,521,qs),
(620,578,o),
(559,659,o),
(516,682,qs),
(474,704,o),
(388,717,o),
(343,717,qs),
(285,717,o),
(178,691,o),
(95,634,o),
(43,541,o),
(40,474,q),
(213,474,l),
(218,513,o),
(283,549,o),
(337,549,qs),
(355,549,o),
(391,544,o),
(420,531,o),
(439,510,o),
(440,494,qs),
(440,461,o),
(388,434,o),
(347,434,qs),
(255,434,l),
(255,287,l),
(366,287,ls),
(384,287,o),
(420,282,o),
(448,269,o),
(465,247,o),
(465,230,qs),
(465,210,o),
(445,184,o),
(412,169,o),
(369,163,o),
(346,163,qs),
(319,163,o),
(270,171,o),
(231,190,o),
(202,223,o),
(196,248,q),
(24,248,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
44 1 1 2 47 1 0 7 2 76 0 4 3 2 3 4 2 128 8 1 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 27 77 0 0 0 6 97 0 6 6 28 6 78 0 0 0 60 0 60 56 54 36 18 38 33 40 36 9 7 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni0417;
unicode = 1047;
},
{
glyphname = uni0418;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(209,0,l),
(521,389,l),
(521,0,l),
(702,0,l),
(702,708,l),
(560,708,l),
(248,312,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
5 0 2 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 17 18 17 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = uni0418;
unicode = 1048;
},
{
glyphname = uni0419;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(505,757,o),
(559,801,o),
(590,869,o),
(592,916,q),
(450,916,l),
(449,887,o),
(415,857,o),
(389,857,qs),
(365,857,o),
(329,887,o),
(328,916,q),
(186,916,l),
(190,822,o),
(301,736,o),
(389,736,qs),
(432,736,o)
);
},
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(209,0,l),
(521,389,l),
(521,0,l),
(702,0,l),
(702,708,l),
(560,708,l),
(248,312,l),
(248,708,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
21 16 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 2 2 1 112 0 2 8 1 0 4 2 0 106 7 1 4 4 20 77 6 1 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
3 1 1 2 1 133 0 2 8 1 0 4 2 0 106 7 1 4 4 20 77 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 25 24 23 22 20 19 18 17 11 10 8 6 4 3 0 15 1 15 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = uni0419;
unicode = 1049;
},
{
glyphname = uni041A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(703,0,l),
(495,369,l),
(705,708,l),
(499,708,l),
(346,436,l),
(248,436,l),
(248,708,l),
(67,708,l),
(67,0,l),
(248,0,l),
(248,269,l),
(350,269,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 20 77 4 1 0 0 21 0 78 0 0 0 12 0 12 18 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = uni041A;
unicode = 1050;
},
{
glyphname = uni0423;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,708,l),
(5,708,l),
(268,226,l),
(249,198,o),
(192,173,o),
(147,173,qs),
(114,173,l),
(114,0,l),
(156,0,ls),
(232,0,o),
(333,36,o),
(403,103,o),
(454,198,o),
(480,258,qs),
(674,708,l),
(481,708,l),
(360,396,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
16 13 2 2 0 1 76 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 19 33 37 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = uni0423;
unicode = 1059;
},
{
glyphname = uni0424;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,642,l),
(283,642,o),
(164,610,o),
(78,542,o),
(29,436,o),
(28,363,qs),
(28,291,o),
(76,188,o),
(163,122,o),
(283,90,o),
(355,90,q),
(355,-18,l),
(536,-18,l),
(536,90,l),
(611,90,o),
(732,122,o),
(817,188,o),
(863,293,o),
(864,367,qs),
(864,438,o),
(814,542,o),
(725,609,o),
(605,642,o),
(536,642,q),
(536,735,l),
(355,735,l)
);
},
{
closed = 1;
nodes = (
(280,245,o),
(203,310,o),
(203,366,qs),
(203,419,o),
(278,486,o),
(355,486,q),
(355,245,l)
);
},
{
closed = 1;
nodes = (
(613,486,o),
(688,419,o),
(688,366,qs),
(688,310,o),
(611,245,o),
(536,245,q),
(536,486,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
4 1 0 9 1 6 7 0 6 105 8 1 7 3 1 1 2 7 1 105 10 1 5 5 2 95 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
10 1 5 0 2 5 87 4 1 0 9 1 6 7 0 6 105 8 1 7 3 1 1 2 7 1 105 10 1 5 5 2 95 0 2 5 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 39 38 34 33 32 31 27 26 0 25 0 25 24 17 17 24 17 11 7 27 
CALL[ ]	/* CallFunction */";
};
width = 892;
}
);
note = uni0424;
unicode = 1060;
},
{
glyphname = uni0426;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,708,l),
(67,708,l),
(67,0,l),
(567,0,l),
(567,-168,l),
(748,-168,l),
(748,167,l),
(665,167,l),
(665,708,l),
(484,708,l),
(484,167,l),
(248,167,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 84 4 1 0 0 20 77 6 5 2 1 1 3 96 0 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = uni0426;
unicode = 1062;
},
{
glyphname = uni0427;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,416,o),
(79,309,o),
(123,274,qs),
(164,242,o),
(264,219,o),
(313,219,qs),
(343,219,o),
(413,223,o),
(455,229,q),
(455,0,l),
(636,0,l),
(636,708,l),
(455,708,l),
(455,398,l),
(426,393,o),
(377,389,o),
(352,389,qs),
(286,389,o),
(225,432,o),
(225,491,qs),
(225,708,l),
(44,708,l),
(44,482,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
8 1 1 0 13 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 20 77 0 3 3 21 3 78 50 17 19 35 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = uni0427;
unicode = 1063;
},
{
glyphname = uni0428;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(948,708,l),
(767,708,l),
(767,167,l),
(598,167,l),
(598,708,l),
(417,708,l),
(417,167,l),
(248,167,l),
(248,708,l),
(67,708,l),
(67,0,l),
(948,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 2 0 0 20 77 3 1 1 1 5 96 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1015;
}
);
note = uni0428;
unicode = 1064;
},
{
glyphname = uni0429;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(849,-168,l),
(1030,-168,l),
(1030,167,l),
(947,167,l),
(947,708,l),
(766,708,l),
(766,167,l),
(598,167,l),
(598,708,l),
(417,708,l),
(417,167,l),
(248,167,l),
(248,708,l),
(67,708,l),
(67,0,l),
(849,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 6 1 6 84 4 2 2 0 0 20 77 5 3 2 1 1 7 96 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1037;
}
);
note = uni0429;
unicode = 1065;
},
{
glyphname = uni042A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,0,o),
(601,22,o),
(683,76,o),
(735,169,o),
(735,240,qs),
(735,310,o),
(685,398,o),
(608,447,o),
(514,465,o),
(469,465,qs),
(331,465,l),
(331,708,l),
(-6,708,l),
(-6,540,l),
(150,540,l),
(150,0,l),
(445,0,ls)
);
},
{
closed = 1;
nodes = (
(463,306,ls),
(557,306,o),
(558,241,qs),
(558,217,o),
(540,188,o),
(508,172,o),
(464,167,o),
(438,167,qs),
(331,167,l),
(331,306,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 20 77 0 4 4 3 95 6 1 3 3 21 3 78 0 0 26 24 19 17 0 16 0 15 33 17 17 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = uni042A;
unicode = 1066;
},
{
glyphname = uni042B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,0,o),
(466,22,o),
(553,77,o),
(607,170,o),
(608,241,qs),
(608,307,o),
(560,394,o),
(483,445,o),
(387,465,o),
(339,465,qs),
(248,465,l),
(248,708,l),
(67,708,l),
(67,0,l),
(304,0,ls)
);
},
{
closed = 1;
nodes = (
(320,306,ls),
(342,306,o),
(382,301,o),
(412,287,o),
(431,261,o),
(431,241,qs),
(431,219,o),
(414,190,o),
(382,174,o),
(339,167,o),
(313,167,qs),
(248,167,l),
(248,306,l)
);
},
{
closed = 1;
nodes = (
(872,0,l),
(872,708,l),
(691,708,l),
(691,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
0 1 0 4 3 1 4 103 5 1 0 0 20 77 0 3 3 2 96 6 7 2 2 2 21 2 78 0 0 31 30 29 28 27 25 17 15 0 14 0 13 33 17 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 939;
}
);
note = uni042B;
unicode = 1067;
},
{
glyphname = uni042C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,0,o),
(512,22,o),
(598,76,o),
(651,169,o),
(651,240,qs),
(651,304,o),
(610,391,o),
(537,443,o),
(439,465,o),
(382,465,qs),
(247,465,l),
(247,708,l),
(66,708,l),
(66,0,l),
(344,0,ls)
);
},
{
closed = 1;
nodes = (
(375,306,ls),
(420,306,o),
(472,279,o),
(472,241,qs),
(472,218,o),
(455,189,o),
(424,173,o),
(381,167,o),
(356,167,qs),
(247,167,l),
(247,306,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 0 4 3 1 4 103 0 0 0 20 77 0 3 3 2 96 5 1 2 2 21 2 78 0 0 25 23 17 15 0 14 0 13 33 17 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = uni042C;
unicode = 1068;
},
{
glyphname = uni042D;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,275,l),
(506,275,l),
(503,225,o),
(428,163,o),
(360,163,qs),
(299,163,o),
(216,208,o),
(201,257,q),
(28,257,l),
(35,189,o),
(94,89,o),
(182,24,o),
(294,-8,o),
(354,-8,qs),
(435,-8,o),
(563,44,o),
(650,139,o),
(696,273,o),
(696,355,qs),
(696,434,o),
(654,567,o),
(570,663,o),
(444,717,o),
(360,717,qs),
(301,717,o),
(190,685,o),
(100,619,o),
(40,519,o),
(32,452,q),
(207,452,l),
(218,497,o),
(293,549,o),
(360,549,qs),
(398,549,o),
(452,529,o),
(486,497,o),
(503,455,o),
(505,434,q),
(260,434,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 8 1 7 0 6 4 7 6 103 0 0 0 2 97 0 2 2 27 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 38 0 38 18 34 20 40 36 18 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = uni042D;
unicode = 1069;
},
{
glyphname = uni042E;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,453,o),
(541,510,o),
(604,548,o),
(652,548,qs),
(700,548,o),
(763,513,o),
(801,458,o),
(816,390,o),
(816,356,qs),
(816,322,o),
(800,253,o),
(761,197,o),
(698,162,o),
(652,162,qs),
(607,162,o),
(544,196,o),
(506,252,o),
(489,321,o),
(489,356,qs),
(489,386,o)
);
},
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,269,l),
(325,269,l),
(332,207,o),
(384,105,o),
(470,32,o),
(584,-8,o),
(653,-8,qs),
(735,-8,o),
(865,44,o),
(954,140,o),
(1001,274,o),
(1001,357,qs),
(1001,441,o),
(952,574,o),
(861,667,o),
(730,717,o),
(649,717,qs),
(584,717,o),
(472,676,o),
(386,601,o),
(330,495,o),
(323,431,q),
(248,431,l),
(248,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 0 5 0 2 5 103 0 1 1 3 97 7 1 3 3 27 77 0 0 0 4 97 6 1 4 4 28 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 5 0 2 5 103 0 7 7 20 77 0 1 1 3 97 0 3 3 27 77 0 0 0 4 97 6 1 4 4 28 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 5 0 2 5 103 0 7 7 20 77 0 1 1 3 97 0 3 3 27 77 0 6 6 21 77 0 0 0 4 97 0 4 4 28 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 20 40 36 20 40 36 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 1029;
}
);
note = uni042E;
unicode = 1070;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,708,o),
(221,693,o),
(176,667,qs),
(132,641,o),
(74,547,o),
(74,475,qs),
(74,394,o),
(150,282,o),
(231,254,q),
(35,0,l),
(252,0,l),
(409,225,l),
(482,225,l),
(482,0,l),
(663,0,l),
(663,708,l),
(376,708,ls)
);
},
{
closed = 1;
nodes = (
(343,385,o),
(304,392,o),
(272,410,o),
(252,441,o),
(252,464,qs),
(252,486,o),
(269,516,o),
(299,533,o),
(337,540,o),
(358,540,qs),
(482,540,l),
(482,385,l),
(361,385,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
7 1 1 5 1 76 7 1 5 0 1 0 5 1 103 0 4 4 3 95 6 1 3 3 20 77 2 1 0 0 21 0 78 17 17 0 0 17 29 17 28 20 18 0 16 0 15 17 17 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = uni042F;
unicode = 1071;
},
{
glyphname = uni0440;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(400,355,o),
(425,323,o),
(436,285,o),
(436,267,qs),
(436,246,o),
(427,206,o),
(404,174,o),
(365,153,o),
(335,153,qs),
(306,153,o),
(264,173,o),
(236,204,o),
(224,245,o),
(224,267,qs),
(224,287,o),
(237,326,o),
(264,357,o),
(303,376,o),
(330,376,qs),
(360,376,o)
);
},
{
closed = 1;
nodes = (
(47,527,l),
(47,-201,l),
(224,-201,l),
(224,45,l),
(245,26,o),
(313,-6,o),
(374,-8,qs),
(431,-10,o),
(520,31,o),
(580,106,o),
(610,209,o),
(610,269,qs),
(610,324,o),
(580,422,o),
(522,495,o),
(438,537,o),
(386,537,qs),
(341,539,o),
(256,510,o),
(220,469,q),
(211,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 3 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 0 0 2 97 5 1 2 2 29 77 0 1 1 3 97 0 3 3 28 77 0 4 4 24 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 0 0 2 97 5 1 2 2 29 77 0 1 1 3 97 0 3 3 28 77 0 4 4 2 97 5 1 2 2 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 0 0 2 97 0 2 2 29 77 0 1 1 3 97 0 3 3 28 77 0 4 4 5 95 0 5 5 22 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 40 39 38 37 34 32 24 22 11 9 0 19 1 19 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = uni0440;
unicode = 1088;
},
{
glyphname = O;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 3 3 0 97 4 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 1 0 36 34 26 24 11 9 0 19 1 19 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = O;
unicode = 79;
},
{
glyphname = be_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,139,o),
(124,46,o),
(231,-8,o),
(306,-8,qs),
(367,-8,o),
(467,29,o),
(538,99,o),
(578,201,o),
(578,265,qs),
(578,323,o),
(544,413,o),
(486,475,o),
(407,507,o),
(362,507,qs),
(314,507,o),
(230,480,o),
(195,442,q),
(194,442,l),
(197,469,o),
(230,510,o),
(282,543,o),
(347,569,o),
(382,578,qs),
(411,586,o),
(470,603,o),
(522,626,o),
(565,658,o),
(579,679,q),
(492,811,l),
(472,794,o),
(362,753,o),
(296,731,qs),
(220,707,o),
(117,644,o),
(53,553,o),
(24,423,o),
(24,331,qs),
(24,263,o)
);
},
{
closed = 1;
nodes = (
(248,170,o),
(224,198,o),
(212,233,o),
(212,251,qs),
(212,269,o),
(225,301,o),
(249,327,o),
(285,342,o),
(308,342,qs),
(332,342,o),
(369,326,o),
(391,299,o),
(402,266,o),
(402,249,qs),
(402,232,o),
(392,198,o),
(370,170,o),
(333,153,o),
(307,153,qs),
(284,153,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
19 1 3 0 1 76 9 8 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 22 77 4 1 2 2 1 97 0 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
39 38 49 47 38 57 39 57 34 32 24 22 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = be_alt;
},
{
glyphname = a;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 4 3 4 5 3 128 0 3 8 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 5 4 3 4 5 3 128 0 3 8 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = a;
unicode = 97;
},
{
glyphname = c;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,172,o),
(212,202,o),
(202,240,o),
(202,260,qs),
(202,279,o),
(210,319,o),
(231,354,o),
(267,376,o),
(294,376,qs),
(323,376,o),
(364,346,o),
(370,317,q),
(540,317,l),
(538,370,o),
(501,452,o),
(437,509,o),
(350,538,o),
(300,538,qs),
(237,538,o),
(137,501,o),
(66,431,o),
(27,328,o),
(27,264,qs),
(27,199,o),
(65,98,o),
(134,28,o),
(234,-8,o),
(296,-8,qs),
(345,-8,o),
(435,20,o),
(503,75,o),
(544,157,o),
(546,211,q),
(370,211,l),
(365,184,o),
(324,153,o),
(292,153,qs),
(268,153,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 49 77 6 1 0 0 2 97 0 2 2 47 2 78 1 0 29 27 25 24 20 18 10 8 4 3 0 37 1 37 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = c;
unicode = 99;
},
{
glyphname = e;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 103 8 1 5 5 3 97 0 3 3 49 77 7 1 0 0 2 97 0 2 2 47 2 78 34 33 1 0 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,551,ls),
(264,569,o),
(283,588,o),
(304,588,qs),
(386,588,l),
(386,745,l),
(281,745,ls),
(183,745,o),
(87,662,o),
(87,569,qs),
(87,527,l),
(12,527,l),
(12,369,l),
(87,369,l),
(87,0,l),
(264,0,l),
(264,369,l),
(386,369,l),
(386,527,l),
(264,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 3 4 5 103 2 1 0 0 3 95 7 6 2 3 3 41 77 0 1 1 39 1 78 0 0 0 19 0 19 33 35 17 17 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 396;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,527,l),
(416,482,l),
(391,507,o),
(325,537,o),
(271,537,qs),
(214,537,o),
(120,493,o),
(59,418,o),
(27,319,o),
(27,265,qs),
(27,211,o),
(54,113,o),
(109,37,o),
(199,-7,o),
(263,-7,qs),
(280,-7,o),
(319,-3,o),
(360,11,o),
(397,35,o),
(412,56,q),
(412,29,o),
(407,-22,o),
(388,-62,o),
(348,-86,o),
(314,-86,qs),
(279,-86,o),
(234,-60,o),
(227,-39,q),
(47,-39,l),
(57,-94,o),
(106,-174,o),
(178,-225,o),
(267,-249,o),
(315,-249,qs),
(345,-249,o),
(408,-240,o),
(467,-217,o),
(517,-180,o),
(537,-152,qs),
(557,-124,o),
(578,-63,o),
(589,3,o),
(592,73,o),
(592,109,qs),
(592,527,l)
);
},
{
closed = 1;
nodes = (
(377,360,o),
(403,329,o),
(415,289,o),
(415,267,qs),
(415,243,o),
(403,202,o),
(377,170,o),
(335,152,o),
(306,152,qs),
(278,152,o),
(238,171,o),
(214,201,o),
(203,239,o),
(203,258,qs),
(203,277,o),
(213,319,o),
(237,355,o),
(279,378,o),
(309,378,qs),
(337,378,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
42 1 6 4 24 1 3 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
42 1 6 5 24 1 3 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 8 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 77 0 2 2 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 8 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 0 5 5 41 77 8 1 6 6 4 97 0 4 4 49 77 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
46 45 56 54 45 64 46 64 19 40 40 34 20 41 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = g;
unicode = 103;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,-13,o),
(40,-32,o),
(31,-48,o),
(9,-61,o),
(-11,-61,qs),
(-52,-61,l),
(-52,-220,l),
(40,-220,ls),
(138,-220,o),
(218,-128,o),
(218,-35,qs),
(218,527,l),
(41,527,l),
(41,-7,ls)
);
},
{
closed = 1;
nodes = (
(73,763,o),
(42,735,o),
(24,697,o),
(24,672,qs),
(24,645,o),
(41,606,o),
(72,580,o),
(110,567,o),
(131,567,qs),
(174,567,o),
(237,618,o),
(237,672,qs),
(237,697,o),
(220,735,o),
(191,763,o),
(153,777,o),
(131,777,qs),
(111,777,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 3 97 5 1 3 3 48 77 0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 0 4 0 3 4 105 0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 3 0 4 0 3 4 105 0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
15 14 23 21 14 31 15 31 33 35 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 277;
}
);
note = j;
unicode = 106;
},
{
glyphname = o;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
4 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 5 1 2 2 47 2 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = o;
unicode = 111;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,240,ls),
(224,280,o),
(247,328,o),
(286,355,o),
(337,365,o),
(365,365,qs),
(399,365,l),
(399,536,l),
(395,537,o),
(369,538,o),
(356,538,qs),
(338,538,o),
(301,535,o),
(265,523,o),
(229,499,o),
(214,477,q),
(202,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 21 34 52 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = r;
unicode = 114;
},
{
glyphname = t;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,527,l),
(257,527,l),
(257,658,l),
(80,658,l),
(80,527,l),
(7,527,l),
(7,369,l),
(80,369,l),
(80,180,ls),
(80,125,o),
(110,56,o),
(167,15,o),
(249,0,o),
(302,0,qs),
(348,0,l),
(348,159,l),
(301,159,ls),
(285,159,o),
(268,167,o),
(259,180,o),
(257,198,o),
(257,207,qs),
(257,369,l),
(354,369,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 7 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 0 0 0 23 0 23 17 17 17 21 33 37 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = t;
unicode = 116;
},
{
glyphname = y_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,-59,o),
(228,-38,q),
(47,-38,l),
(57,-93,o),
(104,-173,o),
(173,-224,o),
(259,-249,o),
(306,-249,qs),
(370,-249,o),
(487,-208,o),
(529,-150,qs),
(548,-123,o),
(570,-60,o),
(579,9,o),
(580,81,o),
(580,115,qs),
(580,527,l),
(403,527,l),
(403,270,ls),
(403,253,o),
(401,212,o),
(384,177,o),
(347,153,o),
(315,153,qs),
(285,153,o),
(250,176,o),
(232,211,o),
(228,253,o),
(228,271,qs),
(228,527,l),
(52,527,l),
(52,236,ls),
(52,120,o),
(158,-8,o),
(262,-8,qs),
(278,-8,o),
(317,-5,o),
(356,4,o),
(393,20,o),
(408,34,q),
(408,-21,o),
(364,-86,o),
(314,-86,qs),
(278,-86,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 1 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 6 1 0 1 6 0 128 4 1 2 2 22 77 0 1 1 28 77 7 1 0 0 5 98 0 5 5 31 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 3 2 1 2 3 1 128 0 6 1 0 1 6 0 128 7 1 0 0 5 0 5 102 4 1 2 2 22 77 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 41 40 36 34 26 25 20 18 13 12 9 7 0 43 1 43 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = y_alt;
},
{
glyphname = y2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,527,l),
(2,527,l),
(216,-26,l),
(196,-52,o),
(135,-67,o),
(92,-67,qs),
(77,-67,l),
(77,-251,l),
(119,-251,ls),
(221,-251,o),
(356,-171,o),
(398,-99,qs),
(416,-69,o),
(444,3,o),
(458,48,qs),
(592,527,l),
(404,527,l),
(319,170,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 14 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 38 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = y2_alt;
},
{
glyphname = uni0443;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,527,l),
(5,527,l),
(219,-26,l),
(199,-52,o),
(138,-67,o),
(95,-67,qs),
(80,-67,l),
(80,-251,l),
(122,-251,ls),
(224,-251,o),
(359,-171,o),
(401,-99,qs),
(419,-69,o),
(447,3,o),
(461,48,qs),
(595,527,l),
(405,527,l),
(322,170,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 14 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 33 38 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = uni0443;
unicode = 1091;
},
{
glyphname = uni0451;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(115,750,o),
(89,726,o),
(73,692,o),
(73,670,qs),
(73,623,o),
(130,576,o),
(168,576,qs),
(206,576,o),
(263,623,o),
(263,670,qs),
(263,714,o),
(205,763,o),
(168,763,qs),
(149,763,o)
);
},
{
closed = 1;
nodes = (
(373,750,o),
(346,726,o),
(330,692,o),
(330,670,qs),
(330,623,o),
(388,576,o),
(425,576,qs),
(464,576,o),
(520,623,o),
(520,670,qs),
(520,714,o),
(463,763,o),
(425,763,qs),
(407,763,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
0 1 4 0 4 1 0 128 14 9 13 3 7 10 1 8 3 7 8 105 0 6 0 4 1 6 4 103 12 1 5 5 3 97 0 3 3 29 77 11 1 0 0 2 97 0 2 2 28 2 78 59 58 45 44 34 33 1 0 65 63 58 71 59 71 51 49 44 57 45 57 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni0451;
unicode = 1105;
},
{
glyphname = uni0437;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,497,o),
(416,514,qs),
(384,529,o),
(317,538,o),
(282,538,qs),
(236,538,o),
(150,520,o),
(80,476,o),
(29,401,o),
(20,344,q),
(186,344,l),
(191,368,o),
(243,392,o),
(273,392,qs),
(302,392,o),
(340,376,o),
(340,359,qs),
(340,348,o),
(323,328,o),
(288,328,qs),
(220,328,l),
(220,207,l),
(310,207,ls),
(333,207,o),
(351,191,o),
(351,178,qs),
(351,158,o),
(308,140,o),
(280,140,qs),
(245,140,o),
(191,164,o),
(189,189,q),
(17,189,l),
(23,135,o),
(73,60,o),
(145,13,o),
(231,-8,o),
(273,-8,qs),
(319,-8,o),
(409,10,o),
(445,35,qs),
(476,57,o),
(518,123,o),
(520,173,qs),
(520,208,o),
(492,271,o),
(462,289,q),
(484,303,o),
(507,357,o),
(505,384,qs),
(503,434,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
0 1 6 5 3 1 3 4 2 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 29 77 0 2 2 0 97 0 0 0 28 0 78 36 18 36 33 36 34 20 43 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 543;
}
);
note = uni0437;
unicode = 1079;
},
{
glyphname = uni044D;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,156,o),
(192,174,q),
(19,174,l),
(30,125,o),
(81,55,o),
(150,10,o),
(231,-11,o),
(273,-11,qs),
(402,-11,o),
(537,133,o),
(537,263,qs),
(537,393,o),
(402,535,o),
(281,535,qs),
(235,535,o),
(149,510,o),
(78,462,o),
(28,389,o),
(19,342,q),
(195,342,l),
(203,360,o),
(250,386,o),
(281,386,qs),
(317,386,o),
(359,350,o),
(364,330,q),
(207,330,l),
(207,191,l),
(366,191,l),
(364,172,o),
(326,136,o),
(284,136,qs),
(250,136,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 4 3 2 3 4 2 128 0 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 29 77 8 1 0 0 6 97 0 6 6 28 6 78 1 0 30 29 25 23 19 17 13 12 10 8 6 5 4 3 0 32 1 32 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni044D;
unicode = 1101;
},
{
glyphname = C;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,459,o),
(271,513,o),
(335,546,o),
(381,546,qs),
(441,546,o),
(508,493,o),
(520,445,q),
(691,445,l),
(685,514,o),
(632,616,o),
(549,683,o),
(440,717,o),
(379,717,qs),
(300,717,o),
(170,666,o),
(78,572,o),
(28,438,o),
(28,355,qs),
(28,271,o),
(76,136,o),
(167,42,o),
(298,-8,o),
(380,-8,qs),
(440,-8,o),
(551,26,o),
(638,94,o),
(694,196,o),
(699,263,q),
(524,263,l),
(513,215,o),
(441,163,o),
(382,163,qs),
(336,163,o),
(272,198,o),
(233,253,o),
(215,322,o),
(215,356,qs),
(215,391,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 34 20 40 36 18 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = C;
unicode = 67;
},
{
glyphname = S;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,546,o),
(554,639,o),
(512,668,qs),
(479,691,o),
(394,716,o),
(349,717,qs),
(295,717,o),
(198,699,o),
(154,671,qs),
(115,646,o),
(63,566,o),
(59,506,qs),
(59,504,ls),
(59,445,o),
(97,369,o),
(130,344,qs),
(161,321,o),
(261,287,o),
(318,275,qs),
(374,263,ls),
(408,257,o),
(445,234,o),
(445,212,qs),
(445,195,o),
(428,175,o),
(401,164,o),
(369,160,o),
(354,160,qs),
(304,160,o),
(229,196,o),
(219,239,q),
(37,239,l),
(44,169,o),
(105,72,o),
(149,43,qs),
(194,14,o),
(295,-8,o),
(345,-8,qs),
(397,-8,o),
(498,17,o),
(578,71,o),
(627,158,o),
(627,221,qs),
(625,276,o),
(591,345,o),
(533,389,o),
(456,414,o),
(413,425,qs),
(348,441,ls),
(294,455,o),
(238,479,o),
(238,503,qs),
(238,527,o),
(288,551,o),
(322,551,qs),
(371,551,o),
(431,514,o),
(436,481,q),
(611,481,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 58 0 58 53 51 34 21 47 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni0421;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,459,o),
(271,513,o),
(335,546,o),
(381,546,qs),
(441,546,o),
(508,493,o),
(520,445,q),
(691,445,l),
(685,514,o),
(632,616,o),
(549,683,o),
(440,717,o),
(379,717,qs),
(300,717,o),
(170,666,o),
(78,572,o),
(28,438,o),
(28,355,qs),
(28,271,o),
(76,136,o),
(167,42,o),
(298,-8,o),
(380,-8,qs),
(440,-8,o),
(551,26,o),
(638,94,o),
(694,196,o),
(699,263,q),
(524,263,l),
(513,215,o),
(441,163,o),
(382,163,qs),
(336,163,o),
(272,198,o),
(233,253,o),
(215,322,o),
(215,356,qs),
(215,391,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 27 77 0 0 0 2 97 0 2 2 28 2 78 34 20 40 36 18 36 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni0421;
unicode = 1057;
},
{
glyphname = G;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,457,o),
(273,512,o),
(338,546,o),
(386,546,qs),
(441,546,o),
(510,505,o),
(520,458,q),
(699,458,l),
(690,525,o),
(634,622,o),
(549,686,o),
(442,717,o),
(383,717,qs),
(301,717,o),
(170,667,o),
(78,574,o),
(28,439,o),
(28,354,qs),
(28,271,o),
(77,137,o),
(170,43,o),
(301,-8,o),
(384,-8,qs),
(421,-8,o),
(496,6,o),
(563,33,o),
(621,75,o),
(642,104,qs),
(685,162,o),
(712,295,o),
(712,368,qs),
(712,394,l),
(355,394,l),
(355,242,l),
(522,242,l),
(518,221,o),
(493,191,o),
(457,172,o),
(413,163,o),
(391,163,qs),
(341,163,o),
(274,195,o),
(233,249,o),
(215,318,o),
(215,356,qs),
(215,389,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 34 20 40 40 17 20 36 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = G;
unicode = 71;
},
{
glyphname = uni041E;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 3 3 0 97 4 1 0 0 27 77 0 2 2 1 97 0 1 1 28 1 78 1 0 36 34 26 24 11 9 0 19 1 19 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = uni041E;
unicode = 1054;
},
{
glyphname = Q;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,665,o),
(80,570,o),
(28,436,o),
(28,354,qs),
(28,272,o),
(79,138,o),
(173,44,o),
(308,-8,o),
(391,-8,qs),
(420,-8,o),
(487,4,o),
(516,15,q),
(615,-112,l),
(754,-6,l),
(731,23,o),
(683,84,o),
(660,113,q),
(704,159,o),
(753,278,o),
(753,358,qs),
(753,441,o),
(701,574,o),
(606,667,o),
(473,717,o),
(392,717,qs),
(310,717,o)
);
},
{
closed = 1;
nodes = (
(232,455,o),
(275,511,o),
(343,546,o),
(391,546,qs),
(439,546,o),
(507,512,o),
(549,457,o),
(568,389,o),
(568,355,qs),
(568,322,o),
(548,254,o),
(506,199,o),
(440,163,o),
(394,163,qs),
(344,163,o),
(276,196,o),
(232,250,o),
(213,319,o),
(213,355,qs),
(213,388,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
13 11 8 3 1 2 1 76 12 1 1 73 0 3 3 0 97 4 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 1 0 42 40 32 30 17 15 0 25 1 25 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = Q;
unicode = 81;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,708,l),
(358,242,ls),
(358,227,o),
(353,198,o),
(337,175,o),
(308,161,o),
(285,161,qs),
(255,161,o),
(222,182,o),
(206,215,o),
(202,252,o),
(202,269,q),
(22,269,l),
(22,243,ls),
(22,184,o),
(58,90,o),
(127,26,o),
(224,-8,o),
(286,-8,qs),
(540,-8,o),
(539,255,qs),
(539,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 3 2 3 1 2 128 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 21 36 21 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = J;
unicode = 74;
},
{
glyphname = K_alt;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,224,l),
(313,286,l),
(492,0,l),
(710,0,l),
(448,408,l),
(731,708,l),
(494,708,l),
(248,439,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 3 0 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 17 19 18 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = K_alt;
},
{
glyphname = K;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,0,l),
(702,0,l),
(494,369,l),
(704,708,l),
(498,708,l),
(345,436,l),
(248,436,l),
(248,708,l),
(67,708,l),
(67,0,l),
(248,0,l),
(248,269,l),
(349,269,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 38 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = K;
unicode = 75;
},
{
glyphname = k_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,708,l),
(47,708,l),
(47,0,l),
(224,0,l),
(224,149,l),
(275,200,l),
(396,0,l),
(594,0,l),
(396,314,l),
(606,527,l),
(383,527,l),
(224,355,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
11 6 5 2 4 1 0 1 76 0 3 3 20 77 0 0 0 22 77 2 1 1 1 21 1 78 17 19 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = k_alt;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,0,l),
(598,0,l),
(422,276,l),
(585,527,l),
(387,527,l),
(277,341,l),
(224,341,l),
(224,708,l),
(47,708,l),
(47,0,l),
(224,0,l),
(224,183,l),
(280,183,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 0 1 1 38 77 0 3 3 41 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = k;
unicode = 107;
},
{
glyphname = i_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,369,l),
(69,0,l),
(245,0,l),
(245,527,l),
(-8,527,l),
(-8,369,l)
);
},
{
closed = 1;
nodes = (
(92,768,o),
(62,740,o),
(43,702,o),
(43,677,qs),
(43,650,o),
(61,611,o),
(91,585,o),
(129,572,o),
(150,572,qs),
(193,572,o),
(257,623,o),
(257,677,qs),
(257,702,o),
(239,740,o),
(210,768,o),
(172,782,o),
(150,782,qs),
(130,782,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 4 0 3 4 105 0 2 2 0 95 0 0 0 22 77 0 1 1 21 1 78 7 6 15 13 6 23 7 23 17 17 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = i_alt;
},
{
glyphname = j_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,2,o),
(54,-23,o),
(41,-45,o),
(13,-61,o),
(-14,-61,qs),
(-38,-61,l),
(-38,-220,l),
(53,-220,ls),
(149,-220,o),
(230,-128,o),
(231,-35,qs),
(231,527,l),
(-34,527,l),
(-34,369,l),
(55,369,l),
(55,11,ls)
);
},
{
closed = 1;
nodes = (
(83,768,o),
(53,740,o),
(34,702,o),
(34,677,qs),
(34,650,o),
(52,611,o),
(82,585,o),
(120,572,o),
(141,572,qs),
(184,572,o),
(247,623,o),
(247,677,qs),
(247,702,o),
(230,740,o),
(201,768,o),
(163,782,o),
(141,782,qs),
(121,782,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 0 5 1 4 5 105 0 0 0 1 95 0 1 1 22 77 0 3 3 2 95 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 4 0 5 1 4 5 105 0 3 0 2 3 2 99 0 0 0 1 95 0 1 1 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
17 16 25 23 16 33 17 33 33 35 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 287;
}
);
note = j_alt;
},
{
glyphname = s_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,396,o),
(270,395,qs),
(300,394,o),
(344,371,o),
(345,348,q),
(516,348,l),
(511,400,o),
(467,472,o),
(401,517,o),
(319,538,o),
(277,538,qs),
(241,538,o),
(160,524,o),
(90,486,o),
(43,421,o),
(42,372,qs),
(42,320,o),
(88,261,o),
(155,227,o),
(233,213,o),
(267,207,qs),
(285,204,o),
(318,199,o),
(342,191,o),
(357,180,o),
(357,170,qs),
(357,157,o),
(329,139,o),
(291,139,qs),
(279,139,o),
(248,144,o),
(223,156,o),
(204,174,o),
(203,187,q),
(23,187,l),
(30,131,o),
(85,57,o),
(161,11,o),
(250,-8,o),
(294,-8,qs),
(307,-8,o),
(344,-5,o),
(387,3,o),
(430,19,o),
(450,32,qs),
(481,53,o),
(526,118,o),
(526,168,qs),
(526,219,o),
(484,280,o),
(418,312,o),
(340,325,o),
(306,330,qs),
(266,336,o),
(209,352,o),
(209,368,qs),
(209,379,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 29 77 0 2 2 0 97 0 0 0 28 0 78 55 53 51 50 46 44 36 20 47 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = s_alt;
},
{
glyphname = s;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,374,o),
(312,356,q),
(483,356,l),
(477,405,o),
(436,474,o),
(376,518,o),
(299,538,o),
(257,538,qs),
(220,538,o),
(153,526,o),
(123,511,qs),
(86,492,o),
(35,425,o),
(34,376,qs),
(33,339,o),
(60,279,o),
(91,259,qs),
(118,240,o),
(203,215,o),
(240,207,qs),
(258,203,o),
(288,198,o),
(311,190,o),
(324,177,o),
(324,167,qs),
(324,153,o),
(296,136,o),
(274,136,qs),
(245,136,o),
(204,160,o),
(198,180,q),
(19,180,l),
(27,125,o),
(77,53,o),
(146,9,o),
(230,-8,o),
(273,-8,qs),
(309,-8,o),
(387,9,o),
(450,51,o),
(494,119,o),
(496,170,qs),
(496,208,o),
(471,260,o),
(430,293,o),
(380,310,o),
(356,315,qs),
(326,321,o),
(267,333,o),
(234,341,qs),
(215,346,o),
(203,361,o),
(203,368,qs),
(203,380,o),
(229,394,o),
(248,394,qs),
(274,394,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
3 1 5 0 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 54 53 49 47 29 27 25 24 20 18 0 56 1 56 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = s;
unicode = 115;
},
{
glyphname = c_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,167,o),
(208,199,o),
(197,240,o),
(197,265,qs),
(197,283,o),
(206,321,o),
(227,355,o),
(263,376,o),
(289,376,qs),
(319,376,o),
(359,350,o),
(367,323,q),
(543,323,l),
(537,377,o),
(495,458,o),
(430,511,o),
(345,537,o),
(298,537,qs),
(234,537,o),
(133,498,o),
(62,425,o),
(23,325,o),
(23,265,qs),
(23,134,o),
(166,-8,o),
(292,-8,qs),
(335,-8,o),
(417,14,o),
(484,62,o),
(531,135,o),
(540,187,q),
(366,187,l),
(356,167,o),
(316,148,o),
(291,148,qs),
(267,148,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 29 77 6 1 0 0 2 97 0 2 2 28 2 78 1 0 27 25 23 22 18 16 10 8 4 3 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = c_alt;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(704,-31,o),
(815,73,o),
(876,225,o),
(876,322,qs),
(876,413,o),
(814,563,o),
(703,671,o),
(551,730,o),
(460,730,qs),
(366,730,o),
(211,673,o),
(100,567,o),
(39,416,o),
(39,322,qs),
(39,226,o),
(99,75,o),
(208,-30,o),
(364,-85,o),
(460,-85,qs),
(551,-85,o)
);
},
{
closed = 1;
nodes = (
(285,90,o),
(213,163,o),
(177,263,o),
(177,321,qs),
(177,378,o),
(215,478,o),
(288,552,o),
(394,595,o),
(463,595,qs),
(533,595,o),
(638,552,o),
(708,478,o),
(743,378,o),
(743,322,qs),
(743,263,o),
(708,162,o),
(637,89,o),
(532,48,o),
(463,48,qs),
(392,48,o)
);
},
{
closed = 1;
nodes = (
(414,257,o),
(401,281,o),
(397,310,o),
(397,323,qs),
(397,336,o),
(401,364,o),
(415,388,o),
(442,404,o),
(465,404,qs),
(488,404,o),
(522,383,o),
(523,360,q),
(665,360,l),
(660,406,o),
(627,471,o),
(576,513,o),
(509,532,o),
(470,532,qs),
(426,532,o),
(347,507,o),
(289,455,o),
(255,376,o),
(255,323,qs),
(255,269,o),
(286,190,o),
(342,138,o),
(419,113,o),
(464,113,qs),
(503,113,o),
(572,131,o),
(624,171,o),
(659,236,o),
(665,283,q),
(524,283,l),
(522,264,o),
(490,241,o),
(466,241,qs),
(442,241,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 94 values pushed */
0 8 9 5 9 8 5 128 0 5 4 9 5 4 126 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 4 0 6 2 4 6 105 11 1 2 0 0 2 89 11 1 2 2 0 98 10 1 0 2 0 82 41 40 21 20 1 0 69 67 65 64 60 58 50 48 44 43 40 77 41 77 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 915;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(587,168,l),
(611,206,o),
(637,297,o),
(644,356,q),
(499,356,l),
(499,349,o),
(496,328,o),
(491,305,o),
(483,283,o),
(478,275,q),
(405,351,l),
(428,366,o),
(472,402,o),
(506,447,o),
(526,502,o),
(526,536,qs),
(526,582,o),
(490,650,o),
(462,673,qs),
(434,696,o),
(365,717,o),
(326,717,qs),
(288,717,o),
(214,699,o),
(184,679,qs),
(146,653,o),
(101,574,o),
(101,518,qs),
(101,476,o),
(131,408,o),
(156,383,q),
(154,383,l),
(109,353,o),
(47,262,o),
(47,197,qs),
(47,140,o),
(89,62,o),
(157,14,o),
(242,-8,o),
(286,-8,qs),
(331,-8,o),
(435,16,o),
(475,48,q),
(524,0,l),
(740,0,l)
);
},
{
closed = 1;
nodes = (
(361,151,o),
(315,141,o),
(298,141,qs),
(263,141,o),
(211,169,o),
(209,200,qs),
(209,206,o),
(210,224,o),
(221,245,o),
(242,270,o),
(261,283,q),
(375,163,l)
);
},
{
closed = 1;
nodes = (
(331,465,o),
(299,450,q),
(278,467,o),
(257,506,o),
(257,522,qs),
(257,530,o),
(262,549,o),
(276,565,o),
(298,576,o),
(315,576,qs),
(331,576,o),
(352,565,o),
(364,550,o),
(369,533,o),
(369,527,qs),
(367,509,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
70 12 2 2 5 56 43 34 33 4 4 2 1 1 0 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
70 12 2 2 5 56 43 34 33 4 4 2 1 1 3 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 5 1 97 0 1 1 46 77 0 2 2 0 97 6 3 2 0 0 47 77 0 4 4 0 97 6 3 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 1 97 0 1 1 46 77 0 2 2 3 95 6 1 3 3 39 77 0 4 4 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 63 61 54 52 0 44 0 44 40 38 23 21 35 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(613,529,o),
(583,608,o),
(531,666,o),
(459,702,o),
(419,707,q),
(419,856,l),
(258,856,l),
(258,709,l),
(220,705,o),
(149,675,o),
(94,624,o),
(61,552,o),
(61,506,qs),
(61,464,o),
(79,401,o),
(114,355,o),
(164,322,o),
(196,309,qs),
(210,303,o),
(241,293,o),
(281,282,o),
(332,270,o),
(366,262,qs),
(381,258,o),
(411,250,o),
(433,238,o),
(447,222,o),
(447,210,qs),
(447,184,o),
(395,159,o),
(357,159,qs),
(306,159,o),
(231,196,o),
(220,239,q),
(39,239,l),
(43,187,o),
(80,107,o),
(137,50,o),
(211,13,o),
(254,4,q),
(254,-144,l),
(415,-144,l),
(415,0,l),
(460,6,o),
(538,39,o),
(595,93,o),
(628,170,o),
(628,221,qs),
(628,275,o),
(597,344,o),
(542,388,o),
(464,414,o),
(417,425,qs),
(394,430,o),
(342,443,o),
(322,448,qs),
(286,457,o),
(240,482,o),
(240,502,qs),
(240,531,o),
(294,554,o),
(333,553,qs),
(378,552,o),
(434,514,o),
(437,483,q),
(613,483,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
60 57 2 0 4 25 22 2 1 3 2 76 6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 4 0 0 5 4 0 105 0 3 1 1 3 89 0 3 3 1 95 0 1 3 1 79 0 0 0 65 0 65 59 58 35 33 31 30 24 23 34 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,-73,o),
(213,-182,q),
(434,-182,l),
(382,-130,o),
(304,-11,o),
(251,117,o),
(224,247,o),
(224,310,qs),
(224,373,o),
(251,504,o),
(304,631,o),
(382,751,o),
(434,803,q),
(213,803,l),
(128,693,o),
(45,442,o),
(45,310,qs),
(45,179,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
26 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,693,o),
(171,803,q),
(-50,803,l),
(2,751,o),
(80,631,o),
(133,504,o),
(160,373,o),
(160,310,qs),
(160,247,o),
(133,117,o),
(80,-11,o),
(2,-130,o),
(-50,-182,q),
(171,-182,l),
(256,-73,o),
(339,179,o),
(339,310,qs),
(339,442,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
26 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,172,o),
(224,204,o),
(214,244,o),
(214,264,qs),
(214,283,o),
(223,325,o),
(245,361,o),
(282,384,o),
(310,384,qs),
(340,384,o),
(384,349,o),
(390,321,q),
(561,321,l),
(557,412,o),
(461,522,o),
(388,533,q),
(388,684,l),
(226,684,l),
(226,532,l),
(184,524,o),
(115,479,o),
(67,409,o),
(39,318,o),
(39,264,qs),
(39,157,o),
(134,21,o),
(227,1,q),
(227,-140,l),
(389,-140,l),
(389,1,l),
(465,15,o),
(563,125,o),
(569,211,q),
(390,211,l),
(386,186,o),
(341,152,o),
(310,152,qs),
(283,152,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
21 18 2 5 3 10 7 2 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 6 1 0 0 2 0 2 99 0 5 5 3 95 0 3 3 38 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 3 0 5 4 3 5 105 6 1 0 2 2 0 89 6 1 0 0 2 95 0 2 0 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 29 27 25 24 20 19 9 8 4 3 0 37 1 37 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = cent;
unicode = 162;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,568,o),
(346,546,q),
(530,546,l),
(526,593,o),
(485,658,o),
(422,699,o),
(342,717,o),
(299,717,qs),
(260,717,o),
(177,704,o),
(107,670,o),
(61,610,o),
(59,563,qs),
(59,533,o),
(86,474,o),
(114,457,q),
(85,444,o),
(53,390,o),
(52,363,qs),
(51,324,o),
(81,267,o),
(115,244,qs),
(133,232,o),
(184,213,o),
(240,198,o),
(296,188,o),
(320,184,qs),
(350,179,o),
(350,154,qs),
(350,141,o),
(324,124,o),
(299,125,qs),
(270,125,o),
(229,154,o),
(224,177,q),
(39,177,l),
(42,123,o),
(89,52,o),
(161,10,o),
(250,-8,o),
(295,-8,qs),
(341,-9,o),
(435,12,o),
(471,38,qs),
(500,59,o),
(537,118,o),
(537,155,qs),
(537,184,o),
(519,242,o),
(493,263,q),
(515,280,o),
(541,338,o),
(541,365,qs),
(541,409,o),
(505,466,o),
(465,483,qs),
(427,498,o),
(353,512,o),
(313,520,qs),
(305,521,o),
(282,526,o),
(260,534,o),
(244,547,o),
(244,558,qs),
(244,572,o),
(272,588,o),
(292,587,qs),
(312,587,o)
);
},
{
closed = 1;
nodes = (
(224,361,o),
(224,373,qs),
(224,381,o),
(231,399,o),
(239,404,q),
(246,403,o),
(268,398,o),
(290,393,o),
(305,389,o),
(319,385,qs),
(335,381,o),
(370,365,o),
(370,346,qs),
(370,339,o),
(362,318,o),
(355,312,q),
(335,316,o),
(276,330,o),
(257,336,qs),
(238,343,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
71 51 17 3 2 5 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 65 64 60 58 36 34 32 31 27 25 0 67 1 67 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = section;
unicode = 167;
},
{
glyphname = uni04C1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(718,838,o),
(722,927,q),
(580,927,l),
(579,898,o),
(545,868,o),
(519,868,qs),
(495,868,o),
(459,898,o),
(458,927,q),
(316,927,l),
(320,837,o),
(432,751,o),
(520,751,qs),
(607,751,o)
);
},
{
closed = 1;
nodes = (
(829,0,l),
(1041,0,l),
(838,370,l),
(1042,708,l),
(837,708,l),
(689,434,l),
(608,434,l),
(608,708,l),
(427,708,l),
(427,434,l),
(346,434,l),
(200,708,l),
(-6,708,l),
(197,370,l),
(-4,0,l),
(206,0,l),
(343,271,l),
(427,270,l),
(427,0,l),
(608,0,l),
(608,270,l),
(694,270,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
32 21 2 5 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
3 1 1 2 2 1 112 0 2 14 1 0 7 2 0 106 10 1 8 15 13 2 5 4 8 5 103 11 9 2 7 7 20 77 12 6 2 4 4 21 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
3 1 1 2 1 133 0 2 14 1 0 7 2 0 106 10 1 8 15 13 2 5 4 8 5 103 11 9 2 7 7 20 77 12 6 2 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
14 14 1 0 14 35 14 35 34 33 31 30 29 28 27 26 25 24 23 22 20 19 18 17 16 15 11 10 8 6 4 3 0 13 1 13 16 7 22 
CALL[ ]	/* CallFunction */";
};
width = 1036;
}
);
note = uni04C1;
unicode = 1217;
},
{
glyphname = uni04C2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,578,o),
(598,620,o),
(629,688,o),
(631,735,q),
(488,735,l),
(487,706,o),
(452,676,o),
(426,676,qs),
(402,676,o),
(366,706,o),
(365,735,q),
(221,735,l),
(223,688,o),
(255,620,o),
(309,578,o),
(383,558,o),
(427,558,qs),
(471,558,o)
);
},
{
closed = 1;
nodes = (
(666,0,l),
(862,0,l),
(730,276,l),
(857,527,l),
(672,527,l),
(592,341,l),
(516,341,l),
(516,527,l),
(339,527,l),
(339,341,l),
(265,341,l),
(181,527,l),
(-2,527,l),
(123,276,l),
(-6,0,l),
(188,0,l),
(263,182,l),
(339,182,l),
(339,0,l),
(516,0,l),
(516,182,l),
(593,182,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
36 25 2 5 8 1 76 3 1 1 2 1 133 0 2 14 1 0 7 2 0 105 10 1 8 15 13 2 5 4 8 5 104 11 9 2 7 7 22 77 12 6 2 4 4 21 4 78 18 18 1 0 18 39 18 39 38 37 35 34 33 32 31 30 29 28 27 26 24 23 22 21 20 19 13 12 10 8 6 5 0 17 1 17 16 7 22 
CALL[ ]	/* CallFunction */";
};
width = 855;
}
);
note = uni04C2;
unicode = 1218;
},
{
glyphname = w_alt;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(439,244,l),
(531,0,l),
(716,0,l),
(882,527,l),
(696,527,l),
(614,212,l),
(526,427,l),
(359,427,l),
(269,212,l),
(186,527,l),
(-6,527,l),
(160,0,l),
(345,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 6 3 3 3 1 1 76 0 1 0 3 0 1 3 128 2 1 0 0 22 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 876;
}
);
note = w_alt;
},
{
glyphname = W_alt;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,213,l),
(201,708,l),
(0,708,l),
(161,0,l),
(408,0,l),
(488,262,l),
(570,0,l),
(806,0,l),
(964,708,l),
(774,708,l),
(679,213,l),
(579,562,l),
(403,562,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
11 6 1 3 1 4 1 76 3 1 0 0 20 77 5 1 4 4 1 96 2 1 1 1 21 1 78 0 0 0 12 0 12 17 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 964;
}
);
note = W_alt;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,202,o),
(219,264,o),
(215,331,o),
(215,354,qs),
(215,378,o),
(221,444,o),
(245,504,o),
(292,546,o),
(333,546,qs),
(373,546,o),
(417,503,o),
(438,443,o),
(442,377,o),
(442,354,qs),
(442,330,o),
(437,263,o),
(415,202,o),
(370,159,o),
(329,159,qs),
(287,159,o)
);
},
{
closed = 1;
nodes = (
(139,660,o),
(69,561,o),
(37,429,o),
(37,354,qs),
(37,279,o),
(67,148,o),
(136,49,o),
(248,-8,o),
(329,-8,qs),
(409,-8,o),
(520,49,o),
(590,148,o),
(621,279,o),
(621,354,qs),
(621,428,o),
(590,560,o),
(521,659,o),
(411,717,o),
(332,717,qs),
(252,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 2 97 5 1 2 2 46 77 4 1 0 0 3 97 0 3 3 47 3 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,708,l),
(158,661,o),
(68,627,o),
(5,627,q),
(5,487,l),
(140,487,l),
(140,0,l),
(321,0,l),
(321,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 38 77 0 0 0 39 0 78 18 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 408;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,0,l),
(520,0,l),
(520,167,l),
(287,167,l),
(329,198,o),
(414,267,o),
(485,344,o),
(527,439,o),
(527,492,qs),
(527,547,o),
(486,631,o),
(418,689,o),
(329,717,o),
(281,717,qs),
(227,717,o),
(132,688,o),
(56,627,o),
(12,535,o),
(10,474,q),
(178,474,l),
(181,503,o),
(222,545,o),
(268,546,qs),
(311,546,o),
(350,503,o),
(349,473,qs),
(349,448,o),
(318,399,o),
(272,356,o),
(208,304,qs),
(15,148,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
30 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 0 3 3 4 95 0 4 4 39 4 78 17 25 36 18 38 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,512,o),
(259,550,o),
(301,550,qs),
(341,550,o),
(378,518,o),
(378,493,qs),
(378,471,o),
(345,435,o),
(305,435,qs),
(240,435,l),
(240,284,l),
(332,284,ls),
(368,284,o),
(403,251,o),
(403,228,qs),
(403,194,o),
(354,162,o),
(308,162,qs),
(260,162,o),
(195,202,o),
(189,240,q),
(13,240,l),
(19,177,o),
(71,84,o),
(148,23,o),
(246,-6,o),
(304,-7,qs),
(346,-7,o),
(424,5,o),
(460,22,qs),
(513,47,o),
(582,142,o),
(585,214,qs),
(585,241,o),
(574,295,o),
(549,339,o),
(511,375,o),
(487,385,q),
(517,404,o),
(559,477,o),
(559,519,qs),
(559,585,o),
(494,670,o),
(444,692,qs),
(413,706,o),
(345,717,o),
(308,717,qs),
(256,717,o),
(161,690,o),
(87,633,o),
(38,546,o),
(32,486,q),
(206,486,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
14 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 103 0 6 6 0 97 0 0 0 46 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 52 0 52 50 48 44 42 41 39 35 33 31 30 26 24 36 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,708,l),
(22,261,l),
(22,123,l),
(365,123,l),
(365,0,l),
(544,0,l),
(544,123,l),
(622,123,l),
(622,287,l),
(544,287,l),
(544,708,l)
);
},
{
closed = 1;
nodes = (
(365,287,l),
(225,287,l),
(365,498,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
13 1 0 4 8 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 0 4 4 38 77 0 2 2 39 2 78 17 18 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = four;
unicode = 52;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,579,l),
(513,708,l),
(-8,708,l),
(-8,540,l),
(306,540,l),
(46,0,l),
(248,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(463,16,o),
(541,70,o),
(590,154,o),
(590,214,qs),
(589,277,o),
(541,359,o),
(499,382,q),
(525,402,o),
(565,473,o),
(565,514,qs),
(565,570,o),
(522,648,o),
(451,696,o),
(362,717,o),
(316,717,qs),
(269,717,o),
(178,696,o),
(106,649,o),
(62,571,o),
(62,514,qs),
(62,472,o),
(97,405,o),
(125,382,q),
(82,357,o),
(37,274,o),
(37,217,qs),
(37,155,o),
(85,70,o),
(163,16,o),
(263,-8,o),
(315,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(389,524,o),
(389,500,qs),
(389,474,o),
(355,432,o),
(314,432,qs),
(274,432,o),
(237,473,o),
(237,498,qs),
(237,524,o),
(273,562,o),
(314,562,qs),
(350,562,o)
);
},
{
closed = 1;
nodes = (
(356,154,o),
(314,154,qs),
(269,154,o),
(216,194,o),
(216,228,qs),
(216,260,o),
(266,302,o),
(313,302,qs),
(359,302,o),
(409,261,o),
(409,228,qs),
(409,194,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
24 8 2 4 3 1 76 0 3 0 4 5 3 4 105 7 1 2 2 1 97 0 1 1 46 77 0 5 5 0 97 6 1 0 0 47 0 78 33 32 1 0 54 52 48 46 39 37 32 43 33 43 17 15 0 31 1 31 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,153,o),
(86,71,o),
(155,18,o),
(244,-8,o),
(294,-8,qs),
(374,-8,o),
(485,51,o),
(555,152,o),
(586,286,o),
(586,361,qs),
(586,428,o),
(557,557,o),
(491,656,o),
(383,717,o),
(305,717,qs),
(253,717,o),
(155,686,o),
(80,625,o),
(34,531,o),
(34,468,qs),
(34,414,o),
(68,330,o),
(128,272,o),
(213,241,o),
(264,241,qs),
(278,241,o),
(318,246,o),
(361,260,o),
(404,286,o),
(422,307,q),
(423,283,o),
(411,230,o),
(383,187,o),
(335,158,o),
(300,158,qs),
(264,158,o),
(211,185,o),
(204,209,q),
(35,209,l)
);
},
{
closed = 1;
nodes = (
(223,515,o),
(245,539,o),
(280,553,o),
(303,553,qs),
(317,553,o),
(347,546,o),
(360,536,qs),
(373,526,o),
(390,493,o),
(391,473,qs),
(391,461,o),
(383,431,o),
(363,406,o),
(328,388,o),
(302,388,qs),
(279,388,o),
(245,402,o),
(223,426,o),
(212,456,o),
(212,471,qs),
(212,486,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
8 1 1 5 1 76 0 5 6 1 6 5 1 128 0 1 4 6 1 4 126 7 1 4 0 6 4 0 126 0 6 6 2 97 0 2 2 46 77 0 0 0 3 98 0 3 3 47 3 78 0 0 56 54 45 43 0 38 0 38 40 40 40 34 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni0430;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(235,127,o),
(204,150,o),
(204,170,qs),
(204,193,o),
(237,213,o),
(266,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(345,35,o),
(367,59,q),
(367,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 4 3 4 5 3 128 0 3 8 1 0 1 3 0 103 0 4 4 6 97 0 6 6 29 77 0 1 1 2 97 7 1 2 2 28 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 5 4 3 4 5 3 128 0 3 8 1 0 1 3 0 103 0 4 4 6 97 0 6 6 29 77 0 7 7 21 77 0 1 1 2 97 0 2 2 28 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni0430;
unicode = 1072;
},
{
glyphname = uni0435;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 103 8 1 5 5 3 97 0 3 3 29 77 7 1 0 0 2 97 0 2 2 28 2 78 34 33 1 0 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni0435;
unicode = 1077;
},
{
glyphname = uni043E;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(369,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(233,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
4 1 0 0 3 97 0 3 3 29 77 0 1 1 2 97 5 1 2 2 28 2 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = uni043E;
unicode = 1086;
},
{
glyphname = uni0441;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,172,o),
(212,202,o),
(202,240,o),
(202,260,qs),
(202,279,o),
(209,319,o),
(230,354,o),
(267,376,o),
(294,376,qs),
(323,376,o),
(364,346,o),
(370,317,q),
(540,317,l),
(538,370,o),
(501,452,o),
(437,509,o),
(350,538,o),
(300,538,qs),
(237,538,o),
(137,501,o),
(66,431,o),
(27,328,o),
(27,264,qs),
(27,199,o),
(65,98,o),
(134,28,o),
(234,-8,o),
(296,-8,qs),
(345,-8,o),
(435,20,o),
(503,75,o),
(544,157,o),
(546,211,q),
(370,211,l),
(365,184,o),
(324,153,o),
(292,153,qs),
(268,153,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 29 77 6 1 0 0 2 97 0 2 2 28 2 78 1 0 29 27 25 24 20 18 10 8 4 3 0 37 1 37 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = uni0441;
unicode = 1089;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(595,546,o),
(545,639,o),
(503,668,qs),
(470,691,o),
(385,716,o),
(340,717,qs),
(286,717,o),
(189,699,o),
(145,671,qs),
(106,646,o),
(54,566,o),
(50,506,qs),
(50,504,ls),
(50,445,o),
(88,369,o),
(121,344,qs),
(152,321,o),
(252,287,o),
(309,275,qs),
(367,263,ls),
(399,256,o),
(436,234,o),
(436,212,qs),
(436,195,o),
(419,175,o),
(392,164,o),
(360,160,o),
(345,160,qs),
(295,160,o),
(220,196,o),
(210,239,q),
(28,239,l),
(35,169,o),
(96,73,o),
(140,44,qs),
(185,15,o),
(286,-6,o),
(336,-6,qs),
(388,-6,o),
(489,18,o),
(569,72,o),
(618,158,o),
(618,221,qs),
(616,276,o),
(582,345,o),
(524,389,o),
(447,414,o),
(404,425,qs),
(339,441,ls),
(285,455,o),
(229,479,o),
(229,503,qs),
(229,527,o),
(279,551,o),
(313,551,qs),
(362,551,o),
(422,514,o),
(427,481,q),
(602,481,l)
);
},
{
closed = 1;
nodes = (
(311,-288,o),
(362,-258,o),
(401,-215,o),
(425,-160,o),
(426,-128,qs),
(427,-88,o),
(381,-32,o),
(339,-32,qs),
(306,-31,o),
(258,-70,o),
(258,-106,qs),
(259,-139,o),
(301,-174,o),
(327,-175,q),
(324,-183,o),
(304,-202,o),
(280,-221,o),
(256,-236,o),
(246,-240,q),
(285,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
78 1 6 73 8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 7 0 6 7 6 101 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 0 0 71 69 65 64 0 58 0 58 53 51 34 21 47 34 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,374,o),
(316,356,q),
(487,356,l),
(481,405,o),
(440,474,o),
(380,518,o),
(303,538,o),
(261,538,qs),
(224,538,o),
(157,526,o),
(127,511,qs),
(90,492,o),
(39,425,o),
(38,376,qs),
(37,339,o),
(64,279,o),
(95,259,qs),
(122,240,o),
(207,215,o),
(244,207,qs),
(262,203,o),
(292,198,o),
(315,190,o),
(328,177,o),
(328,167,qs),
(328,153,o),
(300,136,o),
(278,136,qs),
(249,136,o),
(208,160,o),
(202,180,q),
(23,180,l),
(31,126,o),
(82,55,o),
(152,12,o),
(234,-5,o),
(276,-5,qs),
(312,-5,o),
(390,11,o),
(455,52,o),
(498,119,o),
(500,170,qs),
(500,208,o),
(475,260,o),
(434,293,o),
(384,310,o),
(360,315,qs),
(330,321,o),
(271,333,o),
(238,341,qs),
(219,346,o),
(207,361,o),
(207,368,qs),
(207,380,o),
(233,394,o),
(253,394,qs),
(278,394,o)
);
},
{
closed = 1;
nodes = (
(246,-289,o),
(298,-260,o),
(337,-215,o),
(362,-160,o),
(363,-127,qs),
(364,-87,o),
(317,-30,o),
(275,-30,qs),
(243,-29,o),
(194,-68,o),
(193,-106,qs),
(194,-138,o),
(236,-174,o),
(263,-175,q),
(260,-183,o),
(239,-202,o),
(215,-221,o),
(191,-236,o),
(181,-240,q),
(220,-298,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
3 1 5 0 1 76 76 1 6 73 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 7 0 6 7 6 101 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 69 67 63 62 54 53 49 47 29 27 25 24 20 18 0 56 1 56 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,0,l),
(398,0,l),
(398,540,l),
(612,540,l),
(612,708,l),
(5,708,l),
(5,540,l),
(218,540,l)
);
},
{
closed = 1;
nodes = (
(280,-286,o),
(331,-257,o),
(370,-213,o),
(394,-158,o),
(395,-126,qs),
(396,-86,o),
(350,-30,o),
(308,-30,qs),
(277,-29,o),
(228,-67,o),
(227,-105,qs),
(228,-137,o),
(270,-172,o),
(296,-173,q),
(293,-181,o),
(273,-200,o),
(249,-219,o),
(225,-234,o),
(215,-238,q),
(254,-295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
27 1 4 73 0 5 0 4 5 4 101 6 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 0 0 20 18 14 13 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,527,l),
(259,527,l),
(259,658,l),
(82,658,l),
(82,527,l),
(9,527,l),
(9,369,l),
(82,369,l),
(82,180,ls),
(82,125,o),
(111,56,o),
(163,15,o),
(236,0,o),
(282,0,qs),
(350,0,l),
(350,159,l),
(303,159,ls),
(287,159,o),
(270,167,o),
(261,180,o),
(259,198,o),
(259,207,qs),
(259,369,l),
(356,369,l)
);
},
{
closed = 1;
nodes = (
(186,-290,o),
(237,-261,o),
(277,-216,o),
(301,-161,o),
(302,-128,qs),
(303,-88,o),
(257,-31,o),
(214,-31,qs),
(183,-30,o),
(133,-69,o),
(132,-107,qs),
(133,-139,o),
(176,-175,o),
(202,-176,q),
(199,-184,o),
(179,-203,o),
(155,-222,o),
(130,-237,o),
(120,-241,q),
(160,-299,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
43 1 7 73 0 4 3 4 133 0 8 0 7 8 7 101 9 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 0 0 36 34 30 29 0 23 0 23 17 17 17 21 33 37 10 8 28 
CALL[ ]	/* CallFunction */";
};
width = 375;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,527,l),
(100,0,l),
(276,0,l),
(276,527,l)
);
},
{
closed = 1;
nodes = (
(-37,577,l),
(129,577,l),
(187,661,l),
(248,577,l),
(414,577,l),
(245,769,l),
(129,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 2 4 1 76 5 1 4 2 4 133 3 1 2 1 2 133 0 1 1 41 77 0 0 0 39 0 78 4 4 4 10 4 10 18 18 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,279,o),
(379,326,o),
(402,348,qs),
(423,367,o),
(460,404,o),
(487,444,o),
(504,491,o),
(506,520,qs),
(506,573,o),
(465,648,o),
(398,695,o),
(313,717,o),
(269,717,qs),
(222,717,o),
(132,695,o),
(61,646,o),
(17,567,o),
(17,510,qs),
(17,485,l),
(188,485,l),
(188,511,o),
(221,551,o),
(263,551,qs),
(296,551,o),
(327,525,o),
(327,503,qs),
(327,482,o),
(288,444,o),
(262,423,qs),
(247,411,o),
(215,382,o),
(190,347,o),
(173,303,o),
(173,276,qs),
(173,260,o),
(176,244,q),
(340,244,l)
);
},
{
closed = 1;
nodes = (
(202,189,o),
(172,164,o),
(154,125,o),
(154,98,qs),
(154,70,o),
(172,30,o),
(202,4,o),
(240,-9,o),
(261,-9,qs),
(281,-9,o),
(318,4,o),
(347,30,o),
(365,70,o),
(365,98,qs),
(365,125,o),
(347,164,o),
(318,189,o),
(281,201,o),
(261,201,qs),
(240,201,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 1 0 3 0 1 3 128 6 1 3 4 0 3 4 126 0 0 0 2 97 0 2 2 46 77 7 1 4 4 5 97 0 5 5 47 5 78 38 37 0 0 48 46 37 56 38 56 0 36 0 36 37 18 44 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = question;
unicode = 63;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1051,182,l),
(1051,323,l),
(712,323,l),
(712,182,l)
);
},
{
closed = 1;
nodes = (
(39,0,l),
(217,0,l),
(217,366,l),
(466,0,l),
(629,0,l),
(629,708,l),
(449,708,l),
(449,340,l),
(206,708,l),
(39,708,l)
);
},
{
closed = 1;
nodes = (
(774,687,o),
(723,640,o),
(694,573,o),
(694,531,qs),
(694,488,o),
(724,421,o),
(775,374,o),
(843,350,o),
(881,350,qs),
(919,350,o),
(987,374,o),
(1038,421,o),
(1069,488,o),
(1069,531,qs),
(1069,572,o),
(1042,639,o),
(992,686,o),
(922,712,o),
(881,712,qs),
(842,712,o)
);
},
{
closed = 1;
nodes = (
(917,570,o),
(929,553,o),
(933,536,o),
(933,531,qs),
(933,525,o),
(929,508,o),
(917,492,o),
(897,481,o),
(881,481,qs),
(865,481,o),
(845,492,o),
(833,508,o),
(829,525,o),
(829,531,qs),
(829,536,o),
(833,553,o),
(845,570,o),
(865,582,o),
(881,582,qs),
(897,582,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
10 1 7 9 5 1 0 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 5 2 2 6 8 6 2 8 128 4 1 3 1 3 134 11 1 6 12 1 8 9 6 8 105 0 9 0 7 0 9 7 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
4 1 3 1 3 134 11 6 10 5 4 2 12 1 8 9 2 8 105 0 9 0 7 0 9 7 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
10 5 2 2 6 8 6 2 8 128 4 1 3 1 3 134 11 1 6 12 1 8 9 6 8 105 0 9 0 7 0 9 7 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
35 34 15 14 4 4 45 43 34 53 35 53 25 23 14 33 15 33 4 13 4 13 18 17 19 17 16 13 6 27 
CALL[ ]	/* CallFunction */";
};
width = 1108;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = uni0401;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(160,939,o),
(134,915,o),
(118,881,o),
(118,859,qs),
(118,813,o),
(175,766,o),
(212,766,qs),
(250,766,o),
(306,813,o),
(306,859,qs),
(306,903,o),
(249,952,o),
(212,952,qs),
(194,952,o)
);
},
{
closed = 1;
nodes = (
(415,939,o),
(389,915,o),
(373,881,o),
(373,859,qs),
(373,813,o),
(430,766,o),
(467,766,qs),
(505,766,o),
(561,813,o),
(561,859,qs),
(561,903,o),
(504,952,o),
(467,952,qs),
(449,952,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 9 1 7 7 6 97 12 8 11 3 6 6 25 77 0 0 0 5 95 10 1 5 5 20 77 0 3 3 4 95 0 4 4 21 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
12 8 11 3 6 9 1 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 20 77 0 3 3 4 95 0 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
27 26 13 12 0 0 33 31 26 39 27 39 19 17 12 25 13 25 0 11 0 11 17 17 17 17 17 13 7 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = uni0401;
unicode = 1025;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,427,o),
(378,435,qs),
(366,445,o),
(341,465,o),
(311,481,o),
(274,492,o),
(250,492,qs),
(164,492,o),
(67,378,o),
(67,271,qs),
(67,263,o),
(68,247,o),
(70,232,q),
(225,232,l),
(223,239,o),
(223,255,o),
(223,264,qs),
(223,285,o),
(243,320,o),
(263,320,qs),
(277,320,o),
(303,302,o),
(314,293,qs),
(327,282,o),
(357,259,o),
(394,238,o),
(436,225,o),
(461,225,qs),
(543,225,o),
(626,338,o),
(626,444,qs),
(626,450,o),
(625,468,o),
(623,483,q),
(470,483,l),
(475,450,o),
(457,406,o),
(434,406,qs),
(418,406,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 0 3 2 0 89 5 1 1 0 3 2 1 3 105 6 1 0 0 2 98 4 1 2 0 2 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 5 0 5 1 0 128 6 1 0 3 2 0 89 0 5 0 3 2 5 3 105 6 1 0 0 2 98 4 1 2 0 2 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 5 0 5 1 0 128 0 4 3 2 3 4 2 128 6 1 0 3 2 0 89 0 5 0 3 4 5 3 105 6 1 0 0 2 98 0 2 0 2 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 32 30 25 24 19 17 11 9 4 3 0 38 1 38 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 693;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,708,l),
(39,578,l),
(125,578,l),
(125,371,l),
(255,371,l),
(255,578,l),
(341,578,l),
(341,708,l)
);
},
{
closed = 1;
nodes = (
(580,421,l),
(654,524,l),
(654,371,l),
(761,371,l),
(761,708,l),
(644,708,l),
(573,594,l),
(500,708,l),
(382,708,l),
(382,371,l),
(491,371,l),
(491,524,l),
(566,421,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
13 1 0 3 18 8 2 8 0 2 76 0 8 0 1 0 8 1 128 7 4 2 1 1 132 6 5 2 3 0 0 3 87 6 5 2 3 3 0 95 2 1 0 3 0 79 18 17 18 17 18 17 17 17 16 9 6 31 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,708,o),
(65,655,o),
(32,579,o),
(32,530,qs),
(32,481,o),
(65,406,o),
(123,355,o),
(202,329,o),
(249,329,qs),
(295,329,o),
(374,356,o),
(431,407,o),
(464,482,o),
(464,530,qs),
(464,578,o),
(432,655,o),
(375,708,o),
(296,736,o),
(249,736,qs),
(202,736,o)
);
},
{
closed = 1;
nodes = (
(388,597,o),
(388,531,qs),
(388,465,o),
(308,400,o),
(248,400,qs),
(188,400,o),
(107,466,o),
(107,531,qs),
(107,597,o),
(187,665,o),
(248,665,qs),
(311,665,o)
);
},
{
closed = 1;
nodes = (
(342,550,o),
(341,570,qs),
(340,605,o),
(292,639,o),
(257,639,qs),
(171,639,l),
(171,437,l),
(235,437,l),
(235,498,l),
(245,498,l),
(279,437,l),
(350,437,l),
(305,508,l),
(323,516,o)
);
},
{
closed = 1;
nodes = (
(267,586,o),
(280,579,o),
(280,568,qs),
(280,559,o),
(267,549,o),
(259,549,qs),
(235,549,l),
(235,586,l),
(256,586,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
12 1 9 7 8 2 9 114 0 8 5 7 8 5 126 0 5 4 4 5 112 10 1 0 11 1 2 7 0 2 105 0 7 6 1 4 3 7 4 103 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
12 1 9 7 8 7 9 8 128 0 8 5 7 8 5 126 0 5 4 4 5 112 10 1 0 11 1 2 7 0 2 105 0 7 6 1 4 3 7 4 103 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
12 1 9 7 8 7 9 8 128 0 8 5 7 8 5 126 0 5 4 7 5 4 126 10 1 0 11 1 2 7 0 2 105 0 7 6 1 4 3 7 4 103 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
46 46 21 20 1 0 46 54 46 53 48 47 41 39 38 37 36 35 34 33 27 25 20 31 21 31 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 496;
}
);
note = registered;
unicode = 174;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,730,o),
(68,686,o),
(39,622,o),
(39,582,qs),
(39,541,o),
(68,479,o),
(116,437,o),
(180,416,o),
(216,416,qs),
(252,416,o),
(316,437,o),
(365,479,o),
(393,541,o),
(393,582,qs),
(393,623,o),
(365,687,o),
(316,731,o),
(252,754,o),
(216,754,qs),
(181,754,o)
);
},
{
closed = 1;
nodes = (
(271,605,o),
(271,583,qs),
(271,561,o),
(241,534,o),
(218,534,qs),
(196,534,o),
(166,561,o),
(166,583,qs),
(166,605,o),
(196,633,o),
(218,633,qs),
(241,633,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 432;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(102,491,o),
(62,452,o),
(39,397,o),
(39,363,qs),
(39,330,o),
(62,275,o),
(102,236,o),
(157,215,o),
(190,215,qs),
(221,215,o),
(276,236,o),
(315,275,o),
(338,330,o),
(338,363,qs),
(338,396,o),
(315,450,o),
(276,490,o),
(221,512,o),
(190,512,qs),
(157,512,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 41 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 11 9 0 19 1 19 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = uni27F5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,277,l),
(426,-59,l),
(525,64,l),
(358,197,l),
(1365,197,l),
(1365,355,l),
(358,355,l),
(525,488,l),
(425,611,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
7 1 1 0 1 76 8 1 0 74 6 5 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 17 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = uni27F5;
unicode = 10229;
},
{
glyphname = uni27F6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1046,355,l),
(39,355,l),
(39,197,l),
(1046,197,l),
(879,64,l),
(978,-59,l),
(1365,277,l),
(979,611,l),
(879,488,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 0 1 1 76 8 1 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1404;
}
);
note = uni27F6;
unicode = 10230;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,384,l),
(310,0,l),
(464,0,l),
(464,384,l),
(611,212,l),
(734,321,l),
(386,680,l),
(39,321,l),
(163,212,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
8 7 4 3 2 1 6 0 74 0 0 0 118 21 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,-5,l),
(734,354,l),
(611,463,l),
(464,291,l),
(464,680,l),
(310,680,l),
(310,291,l),
(163,463,l),
(39,354,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
8 7 6 5 4 1 6 0 73 0 0 0 118 18 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni21BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,751,l),
(497,351,l),
(636,351,l),
(636,519,l),
(661,490,o),
(690,437,o),
(705,392,o),
(708,357,o),
(708,345,qs),
(708,303,o),
(680,218,o),
(620,150,o),
(524,107,o),
(456,107,qs),
(391,107,o),
(296,149,o),
(233,218,o),
(202,304,o),
(202,349,qs),
(202,409,o),
(255,532,o),
(317,575,q),
(211,696,l),
(123,637,o),
(40,458,o),
(40,352,qs),
(41,262,o),
(99,114,o),
(207,8,o),
(363,-50,o),
(462,-50,qs),
(558,-50,o),
(709,7,o),
(815,109,o),
(871,250,o),
(871,334,qs),
(871,370,o),
(853,448,o),
(820,520,o),
(774,582,o),
(746,604,q),
(904,590,l),
(913,727,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
38 20 19 1 0 5 2 3 1 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
42 41 38 20 19 1 0 7 2 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 3 133 0 2 1 2 133 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 1 2 133 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 26 47 42 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 952;
}
);
note = uni21BA;
unicode = 8634;
},
{
glyphname = uni21BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,604,l),
(178,582,o),
(132,520,o),
(99,448,o),
(81,370,o),
(81,334,qs),
(81,250,o),
(137,109,o),
(243,7,o),
(394,-51,o),
(490,-51,qs),
(589,-51,o),
(745,8,o),
(853,114,o),
(911,262,o),
(912,352,qs),
(912,458,o),
(829,637,o),
(741,696,q),
(635,575,l),
(697,532,o),
(750,409,o),
(750,349,qs),
(750,304,o),
(719,218,o),
(656,150,o),
(561,108,o),
(496,108,qs),
(428,108,o),
(332,151,o),
(272,218,o),
(244,303,o),
(244,345,qs),
(244,358,o),
(247,394,o),
(262,438,o),
(290,490,o),
(316,519,q),
(316,351,l),
(455,351,l),
(439,751,l),
(39,727,l),
(48,590,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
42 41 23 22 4 5 1 0 1 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
42 41 23 22 4 1 0 7 1 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 2 1 133 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
47 42 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 952;
}
);
note = uni21BB;
unicode = 8635;
},
{
glyphname = uni21B7;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(822,233,o),
(846,326,o),
(844,375,qs),
(841,457,o),
(782,590,o),
(678,683,o),
(537,733,o),
(453,733,qs),
(366,733,o),
(216,682,o),
(105,581,o),
(41,430,o),
(39,331,q),
(199,331,l),
(200,388,o),
(236,478,o),
(299,541,o),
(387,574,o),
(441,574,qs),
(502,574,o),
(594,537,o),
(656,475,o),
(686,393,o),
(686,348,qs),
(686,325,o),
(671,260,o),
(660,235,q),
(600,400,l),
(449,335,l),
(617,-32,l),
(999,109,l),
(946,258,l),
(798,197,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 3 2 1 0 1 76 32 5 2 1 4 1 73 0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 36 20 44 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1038;
}
);
note = uni21B7;
unicode = 8631;
},
{
glyphname = uni21B6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,109,l),
(421,-32,l),
(588,333,l),
(437,398,l),
(378,244,l),
(367,269,o),
(352,325,o),
(352,348,qs),
(352,393,o),
(382,475,o),
(444,537,o),
(535,574,o),
(597,574,qs),
(651,574,o),
(739,541,o),
(802,478,o),
(837,388,o),
(839,331,q),
(999,331,l),
(997,430,o),
(933,581,o),
(822,682,o),
(672,733,o),
(585,733,qs),
(501,733,o),
(359,684,o),
(256,591,o),
(196,459,o),
(193,377,qs),
(191,328,o),
(216,233,o),
(240,197,q),
(92,258,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
29 28 2 1 2 1 76 32 31 30 27 4 1 73 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 36 20 39 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1038;
}
);
note = uni21B6;
unicode = 8630;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,307,o),
(277,325,o),
(308,325,qs),
(352,325,o),
(397,274,o),
(397,243,qs),
(397,227,o),
(388,198,o),
(368,175,o),
(333,162,o),
(308,162,qs),
(287,162,o),
(255,176,o),
(232,197,o),
(220,222,o),
(218,233,q),
(42,233,l),
(49,171,o),
(93,80,o),
(163,21,o),
(256,-7,o),
(311,-7,qs),
(367,-7,o),
(465,26,o),
(538,91,o),
(580,187,o),
(580,249,qs),
(580,346,o),
(535,405,qs),
(509,440,o),
(428,479,o),
(368,482,qs),
(343,483,o),
(266,472,o),
(233,452,q),
(233,543,l),
(555,543,l),
(555,708,l),
(61,708,l),
(61,291,l),
(204,291,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 97 0 3 3 47 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,555,o),
(541,637,o),
(476,691,o),
(390,717,o),
(341,717,qs),
(263,717,o),
(149,656,o),
(74,554,o),
(38,419,o),
(38,346,qs),
(39,274,o),
(73,142,o),
(111,91,qs),
(146,46,o),
(257,-8,o),
(330,-8,qs),
(383,-8,o),
(477,24,o),
(513,56,qs),
(548,87,o),
(590,182,o),
(590,242,qs),
(588,304,o),
(554,386,o),
(522,415,qs),
(493,442,o),
(416,469,o),
(365,469,qs),
(351,469,o),
(310,463,o),
(265,447,o),
(218,417,o),
(199,392,q),
(199,420,o),
(215,477,o),
(247,524,o),
(297,553,o),
(330,553,qs),
(368,553,o),
(415,522,o),
(423,498,q),
(588,498,l)
);
},
{
closed = 1;
nodes = (
(371,158,o),
(327,157,qs),
(304,157,o),
(271,171,o),
(249,195,o),
(238,225,o),
(238,240,qs),
(238,255,o),
(250,282,o),
(272,304,o),
(303,318,o),
(322,318,qs),
(345,318,o),
(379,305,o),
(400,282,o),
(410,253,o),
(410,238,qs),
(410,208,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
8 1 5 1 1 76 7 1 4 0 1 0 4 1 128 0 1 5 0 1 5 126 0 5 6 0 5 6 126 0 0 0 3 97 0 3 3 46 77 0 6 6 2 98 0 2 2 47 2 78 0 0 58 56 48 46 0 41 0 41 41 42 40 34 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = six;
unicode = 54;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,720,o),
(113,696,o),
(97,662,o),
(97,640,qs),
(97,594,o),
(154,547,o),
(191,547,qs),
(229,547,o),
(285,594,o),
(285,640,qs),
(285,684,o),
(228,733,o),
(191,733,qs),
(173,733,o)
);
},
{
closed = 1;
nodes = (
(394,720,o),
(368,696,o),
(352,662,o),
(352,640,qs),
(352,594,o),
(409,547,o),
(446,547,qs),
(484,547,o),
(540,594,o),
(540,640,qs),
(540,684,o),
(483,733,o),
(446,733,qs),
(428,733,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 15 14 1 0 21 19 14 27 15 27 7 5 0 13 1 13 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 637;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = adieresis;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,753,o),
(89,729,o),
(73,695,o),
(73,672,qs),
(73,626,o),
(130,579,o),
(168,579,qs),
(206,579,o),
(263,626,o),
(263,672,qs),
(263,717,o),
(205,766,o),
(168,766,qs),
(149,766,o)
);
},
{
closed = 1;
nodes = (
(369,753,o),
(342,729,o),
(326,695,o),
(326,672,qs),
(326,626,o),
(384,579,o),
(421,579,qs),
(460,579,o),
(516,626,o),
(516,672,qs),
(516,717,o),
(459,766,o),
(421,766,qs),
(403,766,o)
);
},
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
40 1 6 5 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
40 1 11 5 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 9 8 7 8 9 7 128 0 7 14 1 4 5 7 4 103 3 1 1 1 0 97 13 2 12 3 0 0 48 77 0 8 8 10 97 0 10 10 49 77 0 5 5 6 97 11 1 6 6 47 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 9 8 7 8 9 7 128 13 2 12 3 0 3 1 1 10 0 1 105 0 7 14 1 4 5 7 4 103 0 8 8 10 97 0 10 10 49 77 0 5 5 6 97 11 1 6 6 47 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 9 8 7 8 9 7 128 13 2 12 3 0 3 1 1 10 0 1 105 0 7 14 1 4 5 7 4 103 0 8 8 10 97 0 10 10 49 77 0 11 11 39 77 0 5 5 6 97 0 6 6 47 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
29 28 15 14 1 0 78 77 72 70 66 65 63 61 59 55 46 43 35 33 28 39 29 39 21 19 14 27 15 27 7 5 0 13 1 13 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(196,922,o),
(170,898,o),
(154,864,o),
(154,842,qs),
(154,796,o),
(211,749,o),
(248,749,qs),
(286,749,o),
(342,796,o),
(342,842,qs),
(342,886,o),
(285,935,o),
(248,935,qs),
(230,935,o)
);
},
{
closed = 1;
nodes = (
(451,922,o),
(425,898,o),
(409,864,o),
(409,842,qs),
(409,796,o),
(466,749,o),
(503,749,qs),
(541,749,o),
(597,796,o),
(597,842,qs),
(597,886,o),
(540,935,o),
(503,935,qs),
(485,935,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
9 1 4 1 1 76 11 7 10 3 5 8 1 6 1 5 6 105 9 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 26 25 12 11 8 8 32 30 25 38 26 38 18 16 11 24 12 24 8 10 8 10 17 17 17 16 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(199,-115,l),
(206,-112,o),
(243,-105,o),
(284,-107,o),
(310,-123,o),
(310,-138,qs),
(310,-162,o),
(254,-179,o),
(197,-167,q),
(197,-269,l),
(211,-273,o),
(246,-278,o),
(275,-278,qs),
(305,-278,o),
(363,-261,o),
(410,-226,o),
(439,-173,o),
(441,-136,qs),
(441,-106,o),
(424,-65,o),
(395,-40,o),
(359,-29,o),
(339,-28,q),
(360,52,l),
(248,52,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 51 values pushed */
23 15 14 3 1 2 1 76 0 0 3 2 3 0 2 128 0 1 2 1 134 4 1 3 0 2 3 87 4 1 3 3 2 97 0 2 3 2 81 0 0 0 24 0 24 24 40 17 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 622;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ecircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(201,184,o),
(198,213,q),
(538,213,l),
(542,230,o),
(545,261,o),
(545,280,qs),
(545,336,o),
(510,434,o),
(476,469,qs),
(440,504,o),
(352,538,o),
(291,538,qs),
(231,538,o),
(138,501,o),
(103,468,qs),
(65,431,o),
(23,328,o),
(23,266,qs),
(23,201,o),
(62,100,o),
(132,29,o),
(231,-8,o),
(292,-8,qs),
(336,-8,o),
(418,13,o),
(486,59,o),
(534,128,o),
(545,178,q),
(372,178,l),
(367,164,o),
(325,139,o),
(294,140,qs),
(246,141,o)
);
},
{
closed = 1;
nodes = (
(348,385,o),
(370,364,o),
(379,339,o),
(379,328,q),
(201,328,l),
(201,339,o),
(212,364,o),
(233,385,o),
(268,398,o),
(291,398,qs),
(315,398,o)
);
},
{
closed = 1;
nodes = (
(66,577,l),
(232,577,l),
(290,661,l),
(351,577,l),
(517,577,l),
(348,769,l),
(232,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
47 1 7 9 1 76 12 1 9 7 9 133 8 1 7 3 7 133 0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 103 11 1 5 5 3 97 0 3 3 49 77 10 1 0 0 2 97 0 2 2 47 2 78 44 44 34 33 1 0 44 50 44 50 49 48 46 45 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 570;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 41 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,753,o),
(87,729,o),
(71,695,o),
(71,672,qs),
(71,626,o),
(128,579,o),
(166,579,qs),
(204,579,o),
(261,626,o),
(261,672,qs),
(261,717,o),
(203,766,o),
(166,766,qs),
(147,766,o)
);
},
{
closed = 1;
nodes = (
(371,753,o),
(344,729,o),
(328,695,o),
(328,672,qs),
(328,626,o),
(386,579,o),
(423,579,qs),
(462,579,o),
(518,626,o),
(518,672,qs),
(518,717,o),
(461,766,o),
(423,766,qs),
(405,766,o)
);
},
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
3 1 1 1 0 97 9 2 8 3 0 0 48 77 7 1 5 5 41 77 10 1 4 4 6 97 0 6 6 47 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
9 2 8 3 0 3 1 1 5 0 1 105 7 1 5 5 41 77 10 1 4 4 6 97 0 6 6 47 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
29 28 15 14 1 0 48 47 42 40 35 34 28 53 29 53 21 19 14 27 15 27 7 5 0 13 1 13 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,920,o),
(167,896,o),
(151,862,o),
(151,840,qs),
(151,794,o),
(208,747,o),
(245,747,qs),
(283,747,o),
(339,794,o),
(339,840,qs),
(339,884,o),
(282,933,o),
(245,933,qs),
(227,933,o)
);
},
{
closed = 1;
nodes = (
(448,920,o),
(422,896,o),
(406,862,o),
(406,840,qs),
(406,794,o),
(463,747,o),
(500,747,qs),
(538,747,o),
(594,794,o),
(594,840,qs),
(594,884,o),
(537,933,o),
(500,933,qs),
(482,933,o)
);
},
{
closed = 1;
nodes = (
(685,162,o),
(685,326,qs),
(685,708,l),
(503,708,l),
(503,315,ls),
(503,287,o),
(493,232,o),
(465,188,o),
(415,161,o),
(375,161,qs),
(337,161,o),
(286,187,o),
(256,231,o),
(244,286,o),
(244,315,qs),
(244,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(215,-8,o),
(373,-8,qs),
(534,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
9 2 8 3 0 3 1 1 5 0 1 105 7 1 5 5 38 77 0 6 6 4 98 10 1 4 4 47 4 78 29 28 15 14 1 0 46 45 40 38 33 32 28 49 29 49 21 19 14 27 15 27 7 5 0 13 1 13 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = ccedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,172,o),
(209,202,o),
(199,240,o),
(199,260,qs),
(199,279,o),
(207,319,o),
(228,354,o),
(264,376,o),
(291,376,qs),
(320,376,o),
(361,346,o),
(367,317,q),
(537,317,l),
(535,370,o),
(498,452,o),
(434,509,o),
(347,538,o),
(297,538,qs),
(234,538,o),
(134,501,o),
(63,431,o),
(24,328,o),
(24,264,qs),
(24,152,o),
(131,15,o),
(226,-2,q),
(193,-116,l),
(200,-113,o),
(237,-106,o),
(276,-108,o),
(305,-122,o),
(305,-139,qs),
(305,-164,o),
(248,-181,o),
(191,-169,q),
(191,-272,l),
(205,-276,o),
(240,-281,o),
(270,-281,qs),
(300,-281,o),
(359,-264,o),
(406,-228,o),
(435,-175,o),
(437,-137,qs),
(437,-107,o),
(420,-66,o),
(391,-40,o),
(355,-29,o),
(335,-28,q),
(341,-4,l),
(383,2,o),
(455,34,o),
(509,89,o),
(541,164,o),
(543,211,q),
(367,211,l),
(362,184,o),
(321,153,o),
(289,153,qs),
(265,153,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
33 1 2 0 32 24 23 3 3 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 6 7 1 7 6 1 128 0 1 0 7 1 0 126 0 2 0 4 0 2 4 128 8 1 0 0 4 3 0 4 105 0 7 7 5 97 0 5 5 49 77 0 3 3 45 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 7 1 7 6 1 128 0 1 0 7 1 0 126 0 2 0 4 0 2 4 128 0 3 4 3 134 8 1 0 0 4 3 0 4 105 0 7 7 5 97 0 5 5 49 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 51 49 47 46 42 40 30 29 21 19 11 10 4 3 0 59 1 59 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 565;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = uni0162;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,0,l),
(247,0,l),
(214,-115,l),
(221,-112,o),
(258,-105,o),
(296,-107,o),
(325,-121,o),
(325,-138,qs),
(325,-162,o),
(269,-179,o),
(212,-167,q),
(212,-269,l),
(226,-273,o),
(261,-278,o),
(290,-278,qs),
(320,-278,o),
(378,-261,o),
(425,-226,o),
(454,-173,o),
(456,-136,qs),
(456,-106,o),
(439,-65,o),
(410,-40,o),
(374,-29,o),
(355,-28,q),
(362,0,l),
(396,0,l),
(396,540,l),
(607,540,l),
(607,708,l),
(5,708,l),
(5,540,l),
(216,540,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
29 21 20 3 4 5 1 76 0 3 2 5 2 3 5 128 0 5 4 2 5 4 126 0 4 4 132 8 7 2 1 1 0 95 0 0 0 38 77 6 1 2 2 39 2 78 0 0 0 32 0 32 19 24 40 17 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,527,l),
(259,527,l),
(259,658,l),
(82,658,l),
(82,527,l),
(9,527,l),
(9,369,l),
(82,369,l),
(82,180,ls),
(82,119,o),
(119,45,o),
(155,26,q),
(113,-116,l),
(120,-113,o),
(158,-106,o),
(196,-108,o),
(225,-122,o),
(225,-139,qs),
(225,-164,o),
(169,-181,o),
(111,-169,q),
(111,-272,l),
(125,-276,o),
(161,-281,o),
(190,-281,qs),
(220,-281,o),
(279,-264,o),
(326,-228,o),
(356,-175,o),
(358,-137,qs),
(358,-107,o),
(340,-66,o),
(311,-40,o),
(275,-29,o),
(256,-28,q),
(263,1,l),
(273,0,o),
(293,0,o),
(304,0,qs),
(350,0,l),
(350,159,l),
(303,159,ls),
(287,159,o),
(270,167,o),
(261,180,o),
(259,198,o),
(259,207,qs),
(259,369,l),
(356,369,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
36 12 2 1 0 35 27 26 3 3 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 4 1 2 4 128 0 7 0 4 3 7 4 105 10 9 2 5 5 6 95 8 1 6 6 41 77 0 0 0 1 97 0 1 1 39 77 0 3 3 45 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 4 1 2 4 128 0 3 4 3 134 0 7 0 4 3 7 4 105 10 9 2 5 5 6 95 8 1 6 6 41 77 0 0 0 1 97 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 48 0 48 17 17 17 23 24 40 18 49 37 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,459,o),
(271,513,o),
(335,546,o),
(381,546,qs),
(441,546,o),
(508,493,o),
(520,445,q),
(691,445,l),
(685,514,o),
(632,616,o),
(549,683,o),
(440,717,o),
(379,717,qs),
(300,717,o),
(170,666,o),
(78,572,o),
(28,438,o),
(28,355,qs),
(28,279,o),
(67,154,o),
(142,62,o),
(250,5,o),
(318,-4,q),
(286,-115,l),
(293,-112,o),
(330,-105,o),
(368,-107,o),
(397,-121,o),
(397,-138,qs),
(397,-162,o),
(341,-179,o),
(284,-167,q),
(284,-269,l),
(298,-273,o),
(333,-278,o),
(362,-278,qs),
(392,-278,o),
(450,-261,o),
(497,-226,o),
(526,-173,o),
(528,-136,qs),
(528,-106,o),
(511,-65,o),
(482,-40,o),
(446,-29,o),
(427,-28,q),
(433,-4,l),
(485,2,o),
(577,43,o),
(649,110,o),
(694,203,o),
(699,263,q),
(524,263,l),
(513,215,o),
(441,163,o),
(382,163,qs),
(336,163,o),
(272,198,o),
(233,253,o),
(215,322,o),
(215,356,qs),
(215,391,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
38 1 2 0 37 29 28 3 3 4 2 76 0 6 7 1 7 6 1 128 0 1 0 7 1 0 126 0 2 0 4 0 2 4 128 0 3 4 3 134 0 0 0 4 3 0 4 105 0 7 7 5 97 0 5 5 46 7 78 34 20 44 24 40 22 18 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = scedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,374,o),
(316,356,q),
(487,356,l),
(481,405,o),
(440,474,o),
(380,518,o),
(303,538,o),
(261,538,qs),
(224,538,o),
(157,526,o),
(127,511,qs),
(90,492,o),
(39,425,o),
(38,376,qs),
(37,339,o),
(64,279,o),
(95,259,qs),
(122,240,o),
(207,215,o),
(244,207,qs),
(262,203,o),
(292,198,o),
(315,190,o),
(328,177,o),
(328,167,qs),
(328,153,o),
(300,136,o),
(278,136,qs),
(249,136,o),
(208,160,o),
(202,180,q),
(23,180,l),
(29,137,o),
(62,76,o),
(107,32,o),
(165,6,o),
(196,0,q),
(163,-116,l),
(170,-113,o),
(207,-106,o),
(245,-108,o),
(275,-122,o),
(275,-139,qs),
(275,-164,o),
(218,-181,o),
(161,-169,q),
(161,-272,l),
(175,-276,o),
(210,-281,o),
(239,-281,qs),
(270,-281,o),
(328,-264,o),
(376,-228,o),
(405,-175,o),
(407,-137,qs),
(407,-107,o),
(390,-66,o),
(361,-40,o),
(324,-29,o),
(305,-28,q),
(310,-6,l),
(343,-3,o),
(410,19,o),
(463,61,o),
(498,124,o),
(500,170,qs),
(500,208,o),
(475,260,o),
(434,293,o),
(384,310,o),
(360,315,qs),
(330,321,o),
(271,333,o),
(238,341,qs),
(219,346,o),
(207,361,o),
(207,368,qs),
(207,380,o),
(233,394,o),
(253,394,qs),
(278,394,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
3 1 7 0 43 1 1 5 42 34 33 3 2 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 0 4 0 7 4 128 0 4 5 0 4 5 126 0 1 5 3 5 1 3 128 0 3 2 5 3 2 126 8 1 0 0 6 97 0 6 6 49 77 0 5 5 2 97 0 2 2 45 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 7 0 4 0 7 4 128 0 4 5 0 4 5 126 0 1 5 3 5 1 3 128 0 3 2 5 3 2 126 0 5 0 2 5 2 101 8 1 0 0 6 97 0 6 6 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 78 77 73 71 53 51 49 48 40 39 31 29 21 20 0 80 1 80 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni21A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(829,518,o),
(902,494,o),
(956,448,o),
(987,381,o),
(987,339,qs),
(987,297,o),
(957,230,o),
(903,182,o),
(830,157,o),
(787,157,qs),
(357,157,l),
(522,290,l),
(425,413,l),
(39,79,l),
(426,-256,l),
(522,-135,l),
(355,0,l),
(811,0,ls),
(884,0,o),
(1008,52,o),
(1100,142,o),
(1152,265,o),
(1152,337,qs),
(1152,410,o),
(1100,534,o),
(1009,625,o),
(884,676,o),
(811,676,qs),
(165,676,l),
(165,518,l),
(787,518,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
18 17 2 2 3 16 1 1 2 2 76 15 14 2 1 73 0 0 4 1 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 0 0 0 30 0 29 38 40 33 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1191;
}
);
note = uni21A9;
unicode = 8617;
},
{
glyphname = uni2713;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,372,l),
(407,-18,l),
(1061,716,l),
(937,827,l),
(403,230,l),
(157,488,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = uni2713;
unicode = 10003;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(529,438,l),
(39,438,l),
(39,284,l),
(529,284,l)
);
},
{
closed = 1;
nodes = (
(224,662,o),
(194,635,o),
(176,596,o),
(176,571,qs),
(176,518,o),
(240,465,o),
(282,465,qs),
(324,465,o),
(387,518,o),
(387,571,qs),
(387,596,o),
(370,635,o),
(341,662,o),
(303,677,o),
(282,677,qs),
(262,677,o)
);
},
{
closed = 1;
nodes = (
(224,241,o),
(194,214,o),
(176,175,o),
(176,150,qs),
(176,97,o),
(240,44,o),
(282,44,qs),
(324,44,o),
(387,97,o),
(387,150,qs),
(387,175,o),
(370,214,o),
(341,241,o),
(303,256,o),
(282,256,qs),
(262,256,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
7 1 2 0 3 0 2 3 105 0 0 6 1 1 4 0 1 103 8 1 4 5 5 4 89 8 1 4 4 5 97 0 5 4 5 81 21 20 5 4 0 0 29 27 20 35 21 35 13 11 4 19 5 19 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = divide;
unicode = 247;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(585,207,l),
(425,361,l),
(584,516,l),
(471,622,l),
(318,466,l),
(161,622,l),
(50,515,l),
(208,361,l),
(50,206,l),
(160,96,l),
(318,257,l),
(474,96,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,708,l),
(19,708,l),
(229,375,l),
(231,375,l),
(142,375,l),
(142,241,l),
(297,241,l),
(297,208,l),
(142,208,l),
(142,77,l),
(297,77,l),
(297,0,l),
(477,0,l),
(477,77,l),
(632,77,l),
(632,208,l),
(477,208,l),
(477,241,l),
(632,241,l),
(632,375,l),
(542,375,l),
(753,708,l),
(544,708,l),
(388,425,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
23 1 1 0 1 76 9 1 1 8 1 2 3 1 2 104 7 1 3 6 1 4 5 3 4 103 10 1 0 0 38 77 0 5 5 39 5 78 22 21 19 18 17 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,398,l),
(122,398,l),
(39,398,l),
(39,254,l),
(119,254,l),
(119,208,l),
(39,208,l),
(39,72,l),
(119,72,l),
(119,0,l),
(301,0,l),
(301,72,l),
(503,72,l),
(503,208,l),
(301,208,l),
(301,254,l),
(402,254,ls),
(454,254,o),
(549,277,o),
(621,329,o),
(664,415,o),
(664,477,qs),
(664,545,o),
(617,634,o),
(538,687,o),
(434,708,o),
(377,708,qs),
(119,708,l)
);
},
{
closed = 1;
nodes = (
(301,540,l),
(379,540,ls),
(431,540,o),
(485,508,o),
(485,470,qs),
(485,432,o),
(426,398,o),
(376,398,qs),
(301,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
12 9 2 8 7 1 1 2 8 1 103 6 1 2 5 1 3 4 2 3 103 0 10 10 0 95 11 1 0 0 38 77 0 4 4 39 4 78 29 28 1 0 35 33 28 36 29 36 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 9 0 27 1 27 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 693;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B4;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,699,o),
(116,651,o),
(65,569,o),
(63,506,q),
(238,506,l),
(250,554,o),
(320,554,qs),
(353,554,o),
(389,531,o),
(389,514,qs),
(389,506,o),
(379,487,o),
(365,479,q),
(27,479,l),
(27,370,l),
(218,370,l),
(216,369,o),
(204,361,o),
(189,350,o),
(174,340,o),
(169,337,q),
(27,337,l),
(27,229,l),
(76,229,l),
(71,218,o),
(63,186,o),
(63,168,qs),
(63,117,o),
(110,49,o),
(181,9,o),
(264,-7,o),
(301,-7,qs),
(350,-7,o),
(445,13,o),
(519,61,o),
(565,141,o),
(566,201,q),
(393,201,l),
(386,183,o),
(351,157,o),
(313,157,qs),
(276,157,o),
(238,181,o),
(238,202,qs),
(238,207,o),
(246,223,o),
(255,229,q),
(592,229,l),
(592,337,l),
(412,337,l),
(419,341,o),
(439,353,o),
(465,370,q),
(592,370,l),
(592,480,l),
(552,480,l),
(559,493,o),
(565,527,o),
(565,542,qs),
(565,594,o),
(519,663,o),
(449,702,o),
(366,718,o),
(330,718,qs),
(285,718,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 47 7 78 1 0 60 59 58 56 51 50 49 47 43 42 41 40 33 31 27 26 24 22 17 16 15 14 11 10 9 8 0 64 1 64 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
note = uni20B4;
unicode = 8372;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,512,o),
(304,535,o),
(319,554,o),
(342,567,o),
(360,567,qs),
(381,567,o),
(406,553,o),
(418,532,o),
(422,506,o),
(422,494,q),
(585,494,l),
(583,553,o),
(550,638,o),
(491,692,o),
(410,717,o),
(361,717,qs),
(314,717,o),
(227,692,o),
(161,638,o),
(121,555,o),
(121,498,qs),
(121,418,l),
(39,418,l),
(39,260,l),
(121,260,l),
(121,167,l),
(40,167,l),
(40,0,l),
(594,0,l),
(594,167,l),
(298,167,l),
(298,260,l),
(504,260,l),
(504,418,l),
(298,418,l),
(298,503,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 8 9 0 9 8 0 128 6 1 0 5 1 1 2 0 1 103 0 9 9 7 97 0 7 7 46 77 4 1 2 2 3 95 0 3 3 39 3 78 31 29 20 37 17 17 17 17 17 17 16 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = Scedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(595,546,o),
(545,639,o),
(503,668,qs),
(470,691,o),
(385,716,o),
(340,717,qs),
(286,717,o),
(189,699,o),
(145,671,qs),
(106,646,o),
(54,566,o),
(50,506,qs),
(50,504,ls),
(50,445,o),
(88,369,o),
(121,344,qs),
(152,321,o),
(252,287,o),
(309,275,qs),
(367,263,ls),
(399,256,o),
(436,234,o),
(436,212,qs),
(436,195,o),
(419,175,o),
(392,164,o),
(360,160,o),
(345,160,qs),
(295,160,o),
(220,196,o),
(210,239,q),
(28,239,l),
(35,169,o),
(96,72,o),
(140,43,qs),
(169,23,o),
(232,2,o),
(265,-3,q),
(232,-115,l),
(239,-112,o),
(276,-105,o),
(314,-107,o),
(343,-121,o),
(343,-138,qs),
(343,-162,o),
(287,-179,o),
(230,-167,q),
(230,-269,l),
(244,-273,o),
(279,-278,o),
(308,-278,qs),
(338,-278,o),
(396,-261,o),
(443,-226,o),
(472,-173,o),
(474,-136,qs),
(474,-106,o),
(457,-65,o),
(428,-40,o),
(392,-29,o),
(373,-28,q),
(378,-6,l),
(424,-2,o),
(511,28,o),
(578,83,o),
(618,165,o),
(618,221,qs),
(616,276,o),
(582,345,o),
(524,389,o),
(447,414,o),
(404,425,qs),
(339,441,ls),
(285,455,o),
(229,479,o),
(229,503,qs),
(229,527,o),
(279,551,o),
(313,551,qs),
(362,551,o),
(422,514,o),
(427,481,q),
(602,481,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
44 1 1 5 43 35 34 3 2 3 2 76 8 1 7 0 4 0 7 4 128 0 4 5 0 4 5 126 0 1 5 3 5 1 3 128 0 2 3 2 134 0 5 0 3 2 5 3 105 0 0 0 6 97 0 6 6 46 0 78 0 0 0 82 0 82 77 75 55 53 51 50 41 40 32 30 22 21 34 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = t_alt;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,527,l),
(259,527,l),
(259,658,l),
(113,658,l),
(86,527,l),
(9,527,l),
(9,369,l),
(82,369,l),
(82,180,ls),
(82,125,o),
(112,56,o),
(169,15,o),
(251,0,o),
(304,0,qs),
(350,0,l),
(350,159,l),
(306,159,ls),
(290,159,o),
(272,168,o),
(262,182,o),
(259,201,o),
(259,210,qs),
(259,369,l),
(356,369,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 3 4 133 7 6 2 2 2 3 95 5 1 3 3 22 77 0 0 0 1 98 0 1 1 21 1 78 0 0 0 23 0 23 17 17 17 21 33 37 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 375;
}
);
note = t_alt;
},
{
glyphname = alt_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,0,l),
(523,0,l),
(523,163,l),
(373,163,l),
(373,701,l),
(241,701,l),
(230,678,o),
(193,648,o),
(146,630,o),
(89,623,o),
(59,623,q),
(59,482,l),
(192,482,l),
(192,163,l),
(27,163,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 0 0 3 1 0 103 0 2 2 20 77 6 5 2 3 3 4 96 0 4 4 21 4 78 0 0 0 14 0 14 17 17 20 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = alt_1;
},
{
glyphname = colon.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,592,o),
(65,565,o),
(47,526,o),
(47,501,qs),
(47,448,o),
(111,395,o),
(153,395,qs),
(195,395,o),
(258,448,o),
(258,501,qs),
(258,526,o),
(241,565,o),
(212,592,o),
(174,607,o),
(153,607,qs),
(133,607,o)
);
},
{
closed = 1;
nodes = (
(95,264,o),
(65,237,o),
(47,198,o),
(47,173,qs),
(47,120,o),
(111,67,o),
(153,67,qs),
(195,67,o),
(258,120,o),
(258,173,qs),
(258,198,o),
(241,237,o),
(212,264,o),
(174,279,o),
(153,279,qs),
(133,279,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 305;
}
);
note = colon.uc;
},
{
glyphname = t2.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,196,o),
(260,229,qs),
(260,369,l),
(418,369,l),
(418,527,l),
(260,527,l),
(260,659,l),
(83,659,l),
(83,527,l),
(9,527,l),
(9,369,l),
(83,369,l),
(83,188,ls),
(83,99,o),
(183,-7,o),
(283,-7,qs),
(298,-7,o),
(339,-2,o),
(383,10,o),
(426,29,o),
(444,44,q),
(396,183,l),
(386,175,o),
(352,160,o),
(323,160,qs),
(292,160,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
3 1 0 2 4 1 1 0 2 76 0 4 3 4 133 6 1 2 2 3 95 5 1 3 3 22 77 7 1 0 0 1 98 0 1 1 28 1 78 1 0 22 21 20 19 18 17 16 15 14 13 10 8 0 25 1 25 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 439;
}
);
note = t2.alt;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,436,l),
(54,279,l),
(412,279,l),
(412,436,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 466;
}
);
note = hyphen.uc;
},
{
glyphname = uni00AD.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,436,l),
(54,279,l),
(412,279,l),
(412,436,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 466;
}
);
note = uni00AD.uc;
},
{
glyphname = endash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,436,l),
(54,436,l),
(54,279,l),
(576,279,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(792,436,l),
(54,436,l),
(54,279,l),
(792,279,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 846;
}
);
note = emdash.uc;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(700,-27,o),
(812,76,o),
(876,226,o),
(876,322,qs),
(876,415,o),
(808,564,o),
(694,669,o),
(543,726,o),
(460,726,qs),
(373,726,o),
(220,671,o),
(105,566,o),
(39,416,o),
(39,322,qs),
(39,225,o),
(104,75,o),
(218,-28,o),
(371,-81,o),
(460,-81,qs),
(548,-81,o)
);
},
{
closed = 1;
nodes = (
(289,94,o),
(218,164,o),
(182,262,o),
(182,321,qs),
(182,379,o),
(219,477,o),
(291,548,o),
(396,588,o),
(463,588,qs),
(532,588,o),
(635,547,o),
(704,475,o),
(739,377,o),
(739,321,qs),
(739,262,o),
(706,165,o),
(638,94,o),
(534,55,o),
(463,55,qs),
(394,55,o)
);
},
{
closed = 1;
nodes = (
(494,217,ls),
(530,217,o),
(593,237,o),
(641,277,o),
(669,338,o),
(671,380,qs),
(671,427,o),
(642,488,o),
(593,524,o),
(527,539,o),
(490,539,qs),
(318,539,l),
(318,97,l),
(441,97,l),
(441,218,l)
);
},
{
closed = 1;
nodes = (
(522,429,o),
(549,399,o),
(550,377,qs),
(551,359,o),
(523,323,o),
(491,323,qs),
(441,323,l),
(441,429,l),
(489,429,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
0 4 6 2 6 4 2 128 0 1 0 3 5 1 3 105 0 5 11 1 8 7 5 8 105 0 7 0 6 4 7 6 105 10 1 2 0 0 2 89 10 1 2 2 0 97 9 1 0 2 0 81 55 55 21 20 1 0 55 63 55 62 58 56 54 52 44 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 915;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = f_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,538,ls),
(261,565,o),
(293,597,o),
(325,597,qs),
(344,597,o),
(376,585,o),
(383,580,q),
(426,717,l),
(400,732,o),
(333,749,o),
(298,749,qs),
(255,749,o),
(178,727,o),
(120,680,o),
(84,606,o),
(84,556,qs),
(84,527,l),
(9,527,l),
(9,369,l),
(84,369,l),
(84,0,l),
(261,0,l),
(261,369,l),
(386,369,l),
(386,527,l),
(261,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
17 1 5 4 18 1 3 5 2 76 0 4 0 5 3 4 5 105 2 1 0 0 3 95 7 6 2 3 3 22 77 0 1 1 21 1 78 0 0 0 25 0 25 37 37 17 17 17 17 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 383;
}
);
note = f_alt;
},
{
glyphname = g_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,527,l),
(411,483,l),
(379,518,o),
(305,537,o),
(273,537,qs),
(213,537,o),
(121,495,o),
(57,422,o),
(23,322,o),
(23,265,qs),
(23,205,o),
(53,107,o),
(110,35,o),
(198,-6,o),
(256,-7,qs),
(271,-7,o),
(313,-3,o),
(357,11,o),
(397,35,o),
(411,55,q),
(410,24,o),
(394,-26,o),
(360,-63,o),
(304,-83,o),
(264,-83,qs),
(207,-83,o),
(126,-60,o),
(98,-39,q),
(44,-182,l),
(99,-217,o),
(224,-248,o),
(286,-248,qs),
(355,-248,o),
(483,-203,o),
(528,-147,qs),
(546,-122,o),
(570,-59,o),
(583,12,o),
(588,86,o),
(588,122,qs),
(588,527,l)
);
},
{
closed = 1;
nodes = (
(374,357,o),
(399,325,o),
(411,286,o),
(411,267,qs),
(411,243,o),
(399,202,o),
(373,171,o),
(331,153,o),
(303,153,qs),
(276,153,o),
(237,172,o),
(212,203,o),
(199,241,o),
(199,260,qs),
(199,279,o),
(209,320,o),
(234,355,o),
(276,376,o),
(306,376,qs),
(334,376,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
38 1 5 3 20 1 2 6 12 1 1 2 11 1 0 1 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
38 1 5 4 20 1 2 6 12 1 1 2 11 1 0 1 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 5 2 5 6 2 128 7 1 5 5 3 97 4 1 3 3 29 77 0 2 2 28 77 0 1 1 0 98 0 0 0 31 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 6 5 2 5 6 2 128 0 1 0 0 1 0 102 7 1 5 5 3 97 4 1 3 3 29 77 0 2 2 28 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 6 5 2 5 6 2 128 0 1 0 0 1 0 102 0 4 4 22 77 7 1 5 5 3 97 0 3 3 29 77 0 2 2 28 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
42 41 52 50 41 60 42 60 19 40 40 37 39 8 7 27 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = g_alt;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-83,o),
(264,-83,qs),
(207,-83,o),
(128,-59,o),
(101,-39,q),
(47,-182,l),
(102,-217,o),
(220,-248,o),
(281,-248,qs),
(351,-248,o),
(478,-205,o),
(523,-147,qs),
(542,-122,o),
(566,-58,o),
(578,14,o),
(582,90,o),
(582,126,qs),
(582,527,l),
(405,527,l),
(405,278,ls),
(405,258,o),
(403,214,o),
(386,176,o),
(350,152,o),
(318,152,qs),
(288,152,o),
(253,176,o),
(235,211,o),
(230,253,o),
(230,271,qs),
(230,527,l),
(54,527,l),
(54,239,ls),
(54,177,o),
(82,83,o),
(113,52,qs),
(139,25,o),
(214,-7,o),
(265,-8,qs),
(302,-8,o),
(381,13,o),
(407,42,q),
(408,-23,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 2 37 1 5 0 36 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 40 21 37 22 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = y;
unicode = 121;
},
{
glyphname = a_alt;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,211,o),
(265,215,qs),
(289,220,o),
(339,225,o),
(363,227,q),
(361,185,o),
(303,132,o),
(261,131,qs),
(235,130,o),
(204,150,o),
(204,170,qs),
(204,190,o)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,416,o),
(413,537,o),
(286,537,qs),
(241,537,o),
(159,518,o),
(91,475,o),
(45,403,o),
(38,350,q),
(215,350,l),
(231,390,o),
(292,390,qs),
(321,390,o),
(361,363,o),
(363,336,q),
(327,335,o),
(261,328,o),
(228,323,qs),
(191,317,o),
(119,296,o),
(64,259,o),
(29,201,o),
(29,158,qs),
(29,116,o),
(58,55,o),
(106,13,o),
(171,-8,o),
(206,-8,qs),
(222,-8,o),
(264,-4,o),
(307,11,o),
(349,38,o),
(367,63,q),
(367,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 0 2 12 1 1 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 0 2 12 1 6 0 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 3 2 0 126 0 0 1 3 0 1 126 0 3 3 5 97 0 5 5 29 77 6 1 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 4 3 2 3 4 2 128 0 2 0 3 2 0 126 0 0 6 3 0 6 126 0 3 3 5 97 0 5 5 29 77 0 6 6 21 77 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
19 36 17 34 27 44 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = a_alt;
},
{
glyphname = uni0490;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,540,l),
(579,540,l),
(579,883,l),
(398,883,l),
(398,708,l),
(67,708,l),
(67,0,l),
(248,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uni0490;
unicode = 1168;
},
{
glyphname = uni0491;
kernLeft = uni0433;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,527,l),
(47,527,l),
(47,0,l),
(224,0,l),
(224,369,l),
(459,369,l),
(459,676,l),
(286,676,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 2 3 133 0 0 0 2 95 0 2 2 22 77 0 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = uni0491;
unicode = 1169;
},
{
glyphname = uni0404;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,508,o),
(287,536,o),
(337,549,o),
(366,549,qs),
(392,549,o),
(440,539,o),
(481,517,o),
(510,480,o),
(517,452,q),
(692,452,l),
(684,518,o),
(632,617,o),
(551,684,o),
(444,717,o),
(380,717,qs),
(295,717,o),
(164,667,o),
(72,570,o),
(28,439,o),
(28,355,qs),
(28,275,o),
(71,141,o),
(158,45,o),
(288,-8,o),
(374,-8,qs),
(436,-8,o),
(547,26,o),
(634,93,o),
(689,192,o),
(696,257,q),
(523,257,l),
(515,230,o),
(485,193,o),
(445,172,o),
(396,163,o),
(370,163,qs),
(343,163,o),
(290,176,o),
(246,203,o),
(219,246,o),
(218,275,q),
(464,275,l),
(464,434,l),
(219,434,l),
(222,464,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 7 0 7 6 0 128 0 3 1 2 1 3 2 128 0 0 0 1 3 0 1 103 0 7 7 5 97 0 5 5 27 77 0 2 2 4 97 0 4 4 28 4 78 36 20 40 36 20 36 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = uni0404;
unicode = 1028;
},
{
glyphname = uni0454;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,142,o),
(215,155,o),
(196,176,o),
(195,191,q),
(356,191,l),
(356,330,l),
(197,330,l),
(198,343,o),
(213,365,o),
(236,379,o),
(266,386,o),
(280,386,qs),
(306,386,o),
(355,367,o),
(366,342,q),
(540,342,l),
(531,388,o),
(487,460,o),
(422,509,o),
(340,535,o),
(295,535,qs),
(231,535,o),
(130,497,o),
(61,426,o),
(23,325,o),
(23,263,qs),
(23,132,o),
(164,-11,o),
(294,-11,qs),
(339,-11,o),
(420,12,o),
(484,59,o),
(529,127,o),
(540,174,q),
(369,174,l),
(356,150,o),
(310,136,o),
(284,136,qs),
(271,136,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 4 5 6 5 4 6 128 0 1 7 0 7 1 0 128 0 6 0 7 1 6 7 103 0 5 5 3 97 0 3 3 29 77 8 1 0 0 2 97 0 2 2 28 2 78 1 0 34 33 32 31 27 25 23 22 18 16 10 8 4 3 0 38 1 38 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = uni0454;
unicode = 1108;
},
{
glyphname = uni0406;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 20 77 0 0 0 21 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = uni0406;
unicode = 1030;
},
{
glyphname = uni0456;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,527,l),
(59,0,l),
(235,0,l),
(235,527,l)
);
},
{
closed = 1;
nodes = (
(88,763,o),
(58,735,o),
(39,697,o),
(39,672,qs),
(39,645,o),
(57,606,o),
(87,580,o),
(125,567,o),
(146,567,qs),
(189,567,o),
(253,620,o),
(253,672,qs),
(253,697,o),
(235,735,o),
(206,763,o),
(168,777,o),
(146,777,qs),
(126,777,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 22 77 0 0 0 21 0 78 5 4 13 11 4 21 5 21 17 16 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = uni0456;
unicode = 1110;
},
{
glyphname = uni0407;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,708,l),
(71,0,l),
(252,0,l),
(252,708,l)
);
},
{
closed = 1;
nodes = (
(-33,880,o),
(-33,841,qs),
(-33,799,o),
(17,751,o),
(59,751,qs),
(99,751,o),
(149,800,o),
(149,841,qs),
(149,881,o),
(98,931,o),
(59,931,qs),
(20,931,o)
);
},
{
closed = 1;
nodes = (
(174,880,o),
(174,841,qs),
(174,799,o),
(225,751,o),
(266,751,qs),
(307,751,o),
(357,800,o),
(357,841,qs),
(357,881,o),
(305,931,o),
(266,931,qs),
(228,931,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 20 77 0 0 0 21 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = uni0407;
unicode = 1031;
},
{
glyphname = uni0457;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,527,l),
(74,0,l),
(250,0,l),
(250,527,l)
);
},
{
closed = 1;
nodes = (
(-30,708,o),
(-30,668,qs),
(-30,625,o),
(20,576,o),
(60,576,qs),
(100,576,o),
(149,625,o),
(149,668,qs),
(149,709,o),
(98,761,o),
(60,761,qs),
(21,761,o)
);
},
{
closed = 1;
nodes = (
(174,708,o),
(174,668,qs),
(174,625,o),
(224,576,o),
(265,576,qs),
(304,576,o),
(354,625,o),
(354,668,qs),
(354,709,o),
(303,761,o),
(265,761,qs),
(226,761,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 22 77 0 0 0 21 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 323;
}
);
note = uni0457;
unicode = 1111;
},
{
glyphname = map;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,664,qs),
(32,662,ls),
(32,657,o),
(37,657,qs),
(79,657,ls),
(81,657,o),
(83,655,qs),
(106,632,ls),
(107,631,o),
(107,628,qs),
(107,602,ls),
(107,600,o),
(109,598,qs),
(130,577,ls),
(132,575,o),
(132,573,qs),
(132,544,ls),
(132,541,o),
(133,540,qs),
(164,510,ls),
(165,509,o),
(165,506,qs),
(165,480,ls),
(165,479,o),
(167,477,qs),
(213,431,ls),
(214,430,o),
(214,427,qs),
(214,406,ls),
(214,404,o),
(216,402,qs),
(262,355,l),
(264,355,o),
(264,352,qs),
(264,329,ls),
(264,326,o),
(265,325,qs),
(278,313,ls),
(279,312,o),
(279,309,qs),
(279,190,ls),
(279,187,o),
(278,186,qs),
(264,173,ls),
(263,172,o),
(263,169,qs),
(263,84,ls),
(263,81,o),
(264,80,qs),
(276,68,l),
(282,64,o),
(276,60,q),
(264,48,ls),
(260,44,o),
(264,41,qs),
(273,32,ls),
(275,30,o),
(275,28,qs),
(275,5,ls),
(275,0,o),
(280,0,qs),
(283,0,ls),
(285,0,o),
(286,1,o),
(287,1,q),
(301,16,ls),
(302,17,o),
(305,17,qs),
(325,17,ls),
(330,17,o),
(330,23,qs),
(330,61,ls),
(330,63,o),
(332,65,qs),
(342,75,ls),
(343,76,o),
(345,76,qs),
(354,76,ls),
(355,76,o),
(357,78,qs),
(369,90,ls),
(371,92,o),
(371,94,qs),
(371,106,ls),
(371,108,o),
(372,109,qs),
(394,131,ls),
(396,133,o),
(396,135,qs),
(396,160,ls),
(396,163,o),
(397,164,qs),
(417,184,ls),
(420,187,o),
(417,191,qs),
(407,201,ls),
(406,202,o),
(406,205,qs),
(406,232,ls),
(406,234,o),
(407,235,qs),
(429,257,ls),
(431,259,o),
(438,257,o),
(438,253,qs),
(438,219,ls),
(438,213,o),
(443,213,qs),
(452,213,ls),
(453,213,o),
(455,215,qs),
(482,242,l),
(487,245,o),
(490,242,qs),
(505,227,ls),
(508,224,o),
(513,227,q),
(524,238,ls),
(527,241,o),
(531,238,qs),
(540,229,ls),
(541,228,o),
(543,228,qs),
(557,228,l),
(576,228,ls),
(581,228,o),
(581,233,qs),
(581,236,o),
(580,237,qs),
(559,257,ls),
(555,261,o),
(559,265,qs),
(565,270,ls),
(567,272,o),
(567,274,qs),
(567,311,ls),
(567,313,o),
(565,315,qs),
(549,332,ls),
(548,333,o),
(545,333,qs),
(533,333,ls),
(531,333,o),
(529,335,qs),
(507,357,ls),
(505,359,o),
(505,361,qs),
(505,398,l),
(505,432,ls),
(505,437,o),
(500,437,qs),
(488,437,ls),
(486,437,o),
(485,438,qs),
(426,497,ls),
(422,501,o),
(426,505,qs),
(432,511,ls),
(434,513,o),
(434,515,qs),
(434,594,ls),
(434,599,o),
(428,599,qs),
(422,599,ls),
(419,599,o),
(418,598,qs),
(408,588,ls),
(404,584,o),
(401,588,q),
(381,608,ls),
(379,610,o),
(379,612,qs),
(379,638,ls),
(379,643,o),
(374,643,qs),
(342,643,ls),
(339,643,o),
(338,642,qs),
(322,625,ls),
(321,624,o),
(318,624,qs),
(312,624,ls),
(306,624,o),
(306,629,qs),
(306,654,ls),
(306,659,o),
(301,659,qs),
(268,659,ls),
(266,659,o),
(265,660,qs),
(219,706,ls),
(217,708,o),
(215,708,qs),
(119,708,ls),
(117,708,o),
(115,706,qs),
(96,687,ls),
(95,686,o),
(92,686,qs),
(53,686,ls),
(51,686,o),
(49,684,qs),
(33,668,ls),
(32,667,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
201 1 8 0 193 30 19 18 4 3 8 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
201 1 2 0 193 30 19 18 4 3 8 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
201 1 2 0 18 1 4 8 193 30 19 3 3 4 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 6 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 8 8 0 95 2 1 2 0 0 20 77 4 1 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 8 0 2 8 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 4 1 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 1 1 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 3 0 7 3 7 99 0 1 1 20 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
199 196 135 134 80 77 52 49 50 37 51 51 49 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 653;
}
);
note = map;
},
{
glyphname = logo;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(784,512,qs),
(784,520,o),
(778,526,qs),
(766,539,ls),
(760,545,o),
(752,545,qs),
(726,545,l),
(725,546,o),
(724,546,o),
(723,547,qs),
(692,572,ls),
(687,576,o),
(680,576,qs),
(641,576,l),
(636,589,o),
(623,589,qs),
(615,589,o),
(609,583,qs),
(602,576,l),
(547,576,ls),
(540,576,o),
(533,571,q),
(529,566,l),
(529,586,l),
(555,613,l),
(691,613,l),
(710,593,l),
(717,588,o),
(724,588,qs),
(736,588,ls),
(743,588,o),
(750,593,q),
(763,606,ls),
(769,612,o),
(769,620,qs),
(769,627,o),
(764,632,q),
(769,639,o),
(769,645,qs),
(769,653,o),
(763,659,qs),
(750,671,ls),
(744,677,o),
(736,677,qs),
(724,677,ls),
(716,677,o),
(710,671,qs),
(691,652,l),
(655,652,l),
(655,680,l),
(667,680,o),
(680,710,o),
(680,721,qs),
(680,758,ls),
(680,766,o),
(669,778,o),
(661,778,qs),
(610,778,ls),
(602,778,o),
(591,766,o),
(591,758,qs),
(591,721,ls),
(591,710,o),
(604,680,o),
(616,680,q),
(616,652,l),
(591,652,l),
(591,654,o),
(592,656,o),
(592,657,qs),
(592,665,o),
(581,677,o),
(573,677,qs),
(563,677,o),
(559,671,q),
(522,635,l),
(517,639,o),
(509,639,qs),
(501,639,o),
(490,628,o),
(490,620,qs),
(490,464,l),
(428,402,l),
(428,473,l),
(460,505,ls),
(466,511,o),
(466,519,qs),
(466,526,o),
(457,538,o),
(446,538,qs),
(438,538,o),
(433,533,qs),
(428,528,l),
(428,612,l),
(523,707,l),
(529,711,o),
(529,721,qs),
(529,739,l),
(535,739,ls),
(543,739,o),
(554,750,o),
(554,758,qs),
(554,766,o),
(543,778,o),
(535,778,qs),
(529,778,l),
(529,784,ls),
(529,792,o),
(517,803,o),
(509,803,qs),
(501,803,o),
(490,792,o),
(490,784,qs),
(490,778,l),
(484,778,ls),
(476,778,o),
(465,766,o),
(465,758,qs),
(465,750,o),
(476,739,o),
(484,739,qs),
(490,739,l),
(490,729,l),
(428,667,l),
(428,787,l),
(430,789,o),
(430,790,q),
(485,845,ls),
(491,851,o),
(491,859,qs),
(491,867,o),
(485,873,qs),
(473,886,l),
(470,888,o),
(466,890,q),
(466,910,ls),
(466,918,o),
(460,924,qs),
(448,936,ls),
(442,942,o),
(434,942,qs),
(427,942,o),
(423,939,q),
(417,945,o),
(409,945,qs),
(400,945,o),
(394,939,q),
(389,942,o),
(383,942,qs),
(374,942,o),
(370,936,q),
(357,924,ls),
(351,918,o),
(351,910,qs),
(351,890,l),
(349,889,o),
(346,888,o),
(344,886,qs),
(332,873,ls),
(326,867,o),
(326,859,qs),
(326,851,o),
(332,845,qs),
(387,790,l),
(387,789,o),
(389,787,q),
(389,667,l),
(327,729,l),
(327,739,l),
(333,739,ls),
(341,739,o),
(352,750,o),
(352,758,qs),
(352,766,o),
(341,778,o),
(333,778,qs),
(327,778,l),
(327,784,ls),
(327,792,o),
(316,803,o),
(308,803,qs),
(300,803,o),
(288,792,o),
(288,784,qs),
(288,778,l),
(282,778,ls),
(274,778,o),
(263,766,o),
(263,758,qs),
(263,750,o),
(274,739,o),
(282,739,qs),
(288,739,l),
(288,721,ls),
(288,711,o),
(294,707,q),
(389,612,l),
(389,528,l),
(385,533,l),
(378,538,o),
(371,538,qs),
(363,538,o),
(351,527,o),
(351,519,qs),
(351,511,o),
(357,505,qs),
(389,473,l),
(389,402,l),
(327,464,l),
(327,620,ls),
(327,628,o),
(316,639,o),
(308,639,qs),
(300,639,o),
(295,635,q),
(259,671,ls),
(253,677,o),
(245,677,qs),
(236,677,o),
(225,665,o),
(225,657,qs),
(225,654,o),
(226,652,q),
(201,652,l),
(201,680,l),
(213,680,o),
(226,710,o),
(226,721,qs),
(226,758,ls),
(226,766,o),
(215,778,o),
(207,778,qs),
(156,778,ls),
(148,778,o),
(137,766,o),
(137,758,qs),
(137,721,ls),
(137,710,o),
(150,680,o),
(162,680,q),
(162,652,l),
(127,652,l),
(107,671,ls),
(101,677,o),
(93,677,qs),
(81,677,ls),
(73,677,o),
(67,671,qs),
(54,659,l),
(49,652,o),
(49,645,qs),
(49,637,o),
(53,632,q),
(49,628,o),
(49,620,qs),
(49,613,o),
(54,606,q),
(67,593,l),
(74,588,o),
(81,588,qs),
(93,588,ls),
(100,588,o),
(107,593,q),
(127,613,l),
(262,613,l),
(288,586,l),
(288,566,l),
(284,571,l),
(277,576,o),
(270,576,qs),
(215,576,l),
(208,583,ls),
(202,589,o),
(194,589,qs),
(181,589,o),
(176,576,q),
(137,576,ls),
(130,576,o),
(125,572,qs),
(94,547,ls),
(92,545,o),
(92,545,q),
(65,545,ls),
(57,545,o),
(51,539,qs),
(39,526,ls),
(32,519,o),
(32,512,qs),
(32,504,o),
(42,495,o),
(49,493,q),
(49,485,o),
(60,474,o),
(68,474,q),
(70,459,o),
(87,459,qs),
(94,459,o),
(101,464,q),
(113,477,ls),
(119,483,o),
(119,491,qs),
(119,517,l),
(144,537,l),
(262,537,l),
(288,511,l),
(288,475,l),
(182,475,l),
(181,475,l),
(144,475,ls),
(137,475,o),
(130,470,q),
(105,444,ls),
(98,437,o),
(98,430,qs),
(98,422,o),
(111,411,o),
(119,411,qs),
(156,411,ls),
(165,411,o),
(170,417,q),
(190,436,l),
(300,436,l),
(393,342,l),
(395,342,o),
(403,335,o),
(409,335,qs),
(414,335,o),
(422,342,o),
(424,342,q),
(518,436,l),
(627,436,l),
(647,417,ls),
(653,411,o),
(661,411,qs),
(699,411,ls),
(707,411,o),
(718,422,o),
(718,430,qs),
(718,438,o),
(712,444,qs),
(687,470,ls),
(682,475,o),
(673,475,qs),
(529,475,l),
(529,511,l),
(555,537,l),
(673,537,l),
(698,517,l),
(698,491,ls),
(698,483,o),
(704,477,qs),
(716,464,l),
(723,459,o),
(730,459,qs),
(746,459,o),
(749,474,q),
(757,474,o),
(769,485,o),
(769,493,q),
(779,496,o),
(783,505,qs),
(784,507,o)
);
},
{
closed = 1;
nodes = (
(260,235,o),
(264,235,qs),
(266,235,o),
(267,234,qs),
(385,116,l),
(396,107,o),
(407,107,qs),
(408,107,ls),
(419,107,o),
(430,116,q),
(548,234,ls),
(549,235,o),
(550,235,qs),
(554,235,o),
(554,232,qs),
(554,13,ls),
(554,0,o),
(567,0,qs),
(628,0,ls),
(640,0,o),
(640,13,qs),
(640,362,ls),
(640,375,o),
(628,375,qs),
(567,375,ls),
(555,375,o),
(546,366,qs),
(414,234,ls),
(412,232,o),
(407,232,qs),
(403,232,o),
(401,234,qs),
(269,366,ls),
(260,375,o),
(248,375,qs),
(187,375,ls),
(175,375,o),
(175,362,qs),
(175,13,ls),
(175,0,o),
(187,0,qs),
(248,0,ls),
(260,0,o),
(260,13,qs),
(260,232,ls)
);
},
{
closed = 1;
nodes = (
(769,351,o),
(717,299,o),
(688,228,o),
(688,188,qs),
(688,143,o),
(718,71,o),
(771,21,o),
(844,-6,o),
(887,-6,qs),
(930,-6,o),
(1003,23,o),
(1056,74,o),
(1086,145,o),
(1086,188,qs),
(1086,233,o),
(1056,304,o),
(1003,354,o),
(930,381,o),
(887,381,qs),
(842,381,o)
);
},
{
closed = 1;
nodes = (
(825,91,o),
(796,122,o),
(779,164,o),
(779,188,qs),
(779,239,o),
(840,301,o),
(887,301,qs),
(932,301,o),
(995,239,o),
(995,188,qs),
(995,141,o),
(940,74,o),
(887,74,qs),
(864,74,o)
);
},
{
closed = 1;
nodes = (
(1130,0,o),
(1139,0,qs),
(1359,0,ls),
(1368,0,o),
(1368,9,qs),
(1368,72,ls),
(1368,81,o),
(1359,81,qs),
(1220,81,ls),
(1215,81,o),
(1215,85,qs),
(1215,366,ls),
(1215,375,o),
(1206,375,qs),
(1139,375,ls),
(1130,375,o),
(1130,366,qs),
(1130,9,ls)
);
},
{
closed = 1;
nodes = (
(1416,0,o),
(1425,0,qs),
(1452,0,o),
(1515,-1,o),
(1530,-1,qs),
(1583,-1,o),
(1663,29,o),
(1717,82,o),
(1744,152,o),
(1744,191,qs),
(1744,228,o),
(1721,295,o),
(1670,346,o),
(1590,376,o),
(1534,376,qs),
(1525,376,o),
(1495,376,o),
(1462,375,o),
(1433,375,o),
(1425,375,qs),
(1416,375,o),
(1416,366,qs),
(1416,9,ls)
);
},
{
closed = 1;
nodes = (
(1527,296,o),
(1533,296,qs),
(1585,296,o),
(1653,243,o),
(1653,191,qs),
(1653,137,o),
(1588,80,o),
(1532,80,qs),
(1524,80,o),
(1501,79,o),
(1501,85,qs),
(1501,290,ls),
(1501,295,o),
(1506,295,qs),
(1513,296,o)
);
},
{
closed = 1;
nodes = (
(1868,351,o),
(1816,299,o),
(1787,228,o),
(1787,188,qs),
(1787,143,o),
(1817,71,o),
(1870,21,o),
(1943,-6,o),
(1986,-6,qs),
(2029,-6,o),
(2102,23,o),
(2155,74,o),
(2185,145,o),
(2185,188,qs),
(2185,233,o),
(2155,304,o),
(2102,354,o),
(2029,381,o),
(1986,381,qs),
(1941,381,o)
);
},
{
closed = 1;
nodes = (
(1924,91,o),
(1895,122,o),
(1878,164,o),
(1878,188,qs),
(1878,239,o),
(1939,301,o),
(1986,301,qs),
(2031,301,o),
(2094,239,o),
(2094,188,qs),
(2094,141,o),
(2039,74,o),
(1986,74,qs),
(1963,74,o)
);
},
{
closed = 1;
nodes = (
(2545,367,o),
(2546,368,o),
(2546,369,qs),
(2546,375,o),
(2540,375,qs),
(2470,375,ls),
(2461,375,o),
(2457,366,qs),
(2370,132,l),
(2370,131,o),
(2369,130,q),
(2367,130,o),
(2367,132,q),
(2276,366,ls),
(2272,375,o),
(2264,375,qs),
(2188,375,ls),
(2182,375,o),
(2182,369,qs),
(2182,367,o),
(2183,366,q),
(2329,9,ls),
(2333,0,o),
(2341,0,qs),
(2390,0,ls),
(2399,0,o),
(2403,9,qs),
(2545,366,l)
);
},
{
closed = 1;
nodes = (
(2474,8,o),
(2474,6,qs),
(2474,0,o),
(2480,0,qs),
(2545,0,ls),
(2553,0,o),
(2557,9,qs),
(2581,75,ls),
(2583,79,o),
(2587,79,qs),
(2720,79,ls),
(2724,79,o),
(2726,75,qs),
(2751,9,l),
(2753,0,o),
(2762,0,qs),
(2832,0,ls),
(2838,0,o),
(2838,6,qs),
(2838,7,o),
(2837,8,o),
(2837,9,q),
(2696,367,l),
(2692,375,o),
(2684,375,qs),
(2628,375,ls),
(2620,375,o),
(2616,367,q),
(2475,9,l)
);
},
{
closed = 1;
nodes = (
(2652,261,o),
(2654,262,q),
(2655,261,l),
(2692,163,l),
(2692,162,ls),
(2692,159,o),
(2689,159,qs),
(2618,159,ls),
(2615,159,o),
(2615,162,qs),
(2615,163,l),
(2652,261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 88 values pushed */
234 226 218 214 207 206 195 7 20 31 300 125 2 26 20 238 193 2 19 26 295 237 194 3 24 17 324 285 280 146 4 15 24 337 267 164 95 4 12 15 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 13 76 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 18 267 164 2 16 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 67 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 168 values pushed */
43 41 21 3 19 26 17 15 19 114 44 39 2 24 17 15 17 24 15 128 9 1 1 11 2 3 1 114 0 56 79 77 79 56 77 128 42 36 35 34 29 28 27 7 20 37 33 30 3 26 19 20 26 105 45 40 23 22 18 5 17 47 46 16 3 15 12 17 15 105 50 49 48 14 13 5 12 11 3 12 90 8 1 2 7 6 4 3 3 53 2 3 106 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 181 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 44 39 24 22 4 18 17 15 17 18 15 128 9 1 1 11 2 4 1 114 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 16 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 49 48 14 13 5 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 182 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 44 39 24 22 4 18 17 15 17 18 15 128 9 1 1 11 2 11 1 2 128 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 16 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 49 48 14 13 5 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 196 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 11 2 11 1 2 128 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 98 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 217 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 25 2 25 1 2 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 53 12 3 105 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 98 51 1 11 11 29 77 0 62 62 52 98 78 76 72 69 65 63 58 55 8 52 52 21 77 83 70 66 81 4 59 59 52 97 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 213 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 25 2 25 1 2 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 57 12 3 105 82 68 80 3 57 53 60 57 89 32 1 31 0 5 60 31 5 105 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 98 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 28 58 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 214 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 44 22 2 18 17 24 17 18 24 128 39 1 24 15 17 24 15 126 49 1 13 15 16 15 13 16 128 9 1 1 25 2 25 1 2 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 47 1 15 13 20 15 103 45 40 23 3 17 46 1 16 12 17 16 105 8 1 2 6 1 4 3 2 4 104 50 48 14 3 12 7 1 3 57 12 3 105 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 98 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 28 58 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 170 values pushed */
518 517 498 497 428 427 408 407 592 588 583 581 577 576 572 569 562 560 553 551 542 540 534 532 524 522 517 530 518 530 508 506 497 516 498 516 496 493 489 487 480 475 467 460 457 454 451 449 445 442 434 432 427 440 428 440 418 416 407 426 408 426 400 397 389 386 383 380 372 369 366 363 355 351 348 347 346 344 342 340 336 335 332 330 317 315 313 312 311 310 304 302 297 296 288 287 284 282 272 270 263 261 257 255 252 250 247 245 241 239 216 215 212 211 192 190 186 184 181 179 176 174 170 168 161 159 149 147 143 142 138 137 136 135 129 127 122 121 120 119 116 114 101 99 97 96 91 90 87 86 85 83 79 77 66 64 58 57 71 34 19 35 19 38 34 23 22 84 7 31 
CALL[ ]	/* CallFunction */";
};
width = 2910;
}
);
note = logo;
},
{
glyphname = uni202F;
layers = (
{
layerId = m01;
width = 140;
}
);
note = uni202F;
unicode = 8239;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 140;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 290;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = a00E2.alt;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,211,o),
(265,215,qs),
(289,220,o),
(339,225,o),
(363,227,q),
(361,185,o),
(303,132,o),
(261,131,qs),
(237,130,o),
(204,150,o),
(204,170,qs),
(204,191,o)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,416,o),
(413,537,o),
(286,537,qs),
(241,537,o),
(159,518,o),
(91,475,o),
(45,403,o),
(38,350,q),
(215,350,l),
(231,390,o),
(292,390,qs),
(321,390,o),
(361,363,o),
(363,336,q),
(327,335,o),
(261,328,o),
(228,323,qs),
(191,317,o),
(119,296,o),
(64,259,o),
(29,201,o),
(29,158,qs),
(29,116,o),
(58,55,o),
(106,13,o),
(171,-8,o),
(206,-8,qs),
(222,-8,o),
(264,-4,o),
(307,11,o),
(349,38,o),
(367,63,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(66,577,l),
(232,577,l),
(290,661,l),
(351,577,l),
(517,577,l),
(348,769,l),
(232,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
50 1 7 9 6 1 0 2 12 1 1 0 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
50 1 7 9 6 1 0 2 12 1 6 0 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
10 1 9 7 9 133 8 1 7 5 7 133 0 4 3 2 3 4 2 128 0 2 0 3 2 0 126 0 0 1 3 0 1 126 0 3 3 5 97 0 5 5 29 77 6 1 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
10 1 9 7 9 133 8 1 7 5 7 133 0 4 3 2 3 4 2 128 0 2 0 3 2 0 126 0 0 6 3 0 6 126 0 3 3 5 97 0 5 5 29 77 0 6 6 21 77 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
47 47 47 53 47 53 18 18 19 36 17 34 27 44 34 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = a00E2.alt;
},
{
glyphname = a0103.alt;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,581,o),
(467,625,o),
(498,694,o),
(500,741,q),
(357,741,l),
(356,712,o),
(321,682,o),
(295,682,qs),
(271,682,o),
(234,712,o),
(233,741,q),
(90,741,l),
(94,646,o),
(206,560,o),
(295,560,qs),
(338,560,o)
);
},
{
closed = 1;
nodes = (
(241,211,o),
(265,215,qs),
(289,220,o),
(339,225,o),
(363,227,q),
(361,185,o),
(303,132,o),
(261,131,qs),
(237,130,o),
(204,150,o),
(204,170,qs),
(204,191,o)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,416,o),
(413,537,o),
(286,537,qs),
(241,537,o),
(159,518,o),
(91,475,o),
(45,403,o),
(38,350,q),
(215,350,l),
(231,390,o),
(292,390,qs),
(321,390,o),
(361,363,o),
(363,336,q),
(327,335,o),
(261,328,o),
(228,323,qs),
(191,317,o),
(119,296,o),
(64,259,o),
(29,201,o),
(29,158,qs),
(29,116,o),
(58,55,o),
(106,13,o),
(171,-8,o),
(206,-8,qs),
(222,-8,o),
(264,-4,o),
(307,11,o),
(349,38,o),
(367,63,q),
(367,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
22 1 4 6 28 1 5 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
22 1 4 6 28 1 10 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
3 1 1 2 2 1 112 0 8 7 6 7 8 6 128 0 6 4 7 6 4 126 0 4 5 7 4 5 126 0 2 11 1 0 9 2 0 106 0 7 7 9 97 0 9 9 29 77 10 1 5 5 28 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
3 1 1 2 1 133 0 8 7 6 7 8 6 128 0 6 4 7 6 4 126 0 4 5 7 4 5 126 0 2 11 1 0 9 2 0 106 0 7 7 9 97 0 9 9 29 77 10 1 5 5 28 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
3 1 1 2 1 133 0 8 7 6 7 8 6 128 0 6 4 7 6 4 126 0 4 10 7 4 10 126 0 2 11 1 0 9 2 0 106 0 7 7 9 97 0 9 9 29 77 0 10 10 21 77 0 5 5 28 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
1 0 62 61 58 56 52 51 50 48 46 45 34 32 20 18 11 10 8 6 4 3 0 15 1 15 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = a0103.alt;
},
{
glyphname = a00E4.alt;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,753,o),
(89,729,o),
(73,695,o),
(73,672,qs),
(73,626,o),
(130,579,o),
(168,579,qs),
(206,579,o),
(263,626,o),
(263,672,qs),
(263,717,o),
(205,766,o),
(168,766,qs),
(149,766,o)
);
},
{
closed = 1;
nodes = (
(369,753,o),
(342,729,o),
(326,695,o),
(326,672,qs),
(326,626,o),
(384,579,o),
(421,579,qs),
(460,579,o),
(516,626,o),
(516,672,qs),
(516,717,o),
(459,766,o),
(421,766,qs),
(403,766,o)
);
},
{
closed = 1;
nodes = (
(241,211,o),
(265,215,qs),
(289,220,o),
(339,225,o),
(363,227,q),
(361,185,o),
(303,132,o),
(261,131,qs),
(237,130,o),
(204,150,o),
(204,170,qs),
(204,191,o)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,416,o),
(413,537,o),
(286,537,qs),
(241,537,o),
(159,518,o),
(91,475,o),
(45,403,o),
(38,350,q),
(215,350,l),
(231,390,o),
(292,390,qs),
(321,390,o),
(361,363,o),
(363,336,q),
(327,335,o),
(261,328,o),
(228,323,qs),
(191,317,o),
(119,296,o),
(64,259,o),
(29,201,o),
(29,158,qs),
(29,116,o),
(58,55,o),
(106,13,o),
(171,-8,o),
(206,-8,qs),
(222,-8,o),
(264,-4,o),
(307,11,o),
(349,38,o),
(367,63,q),
(367,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
34 1 4 6 40 1 5 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
34 1 4 6 40 1 10 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 7 6 7 8 6 128 0 6 4 7 6 4 126 0 4 5 7 4 5 126 12 2 11 3 0 3 1 1 9 0 1 105 0 7 7 9 97 0 9 9 29 77 10 1 5 5 28 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 8 7 6 7 8 6 128 0 6 4 7 6 4 126 0 4 10 7 4 10 126 12 2 11 3 0 3 1 1 9 0 1 105 0 7 7 9 97 0 9 9 29 77 0 10 10 21 77 0 5 5 28 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
15 14 1 0 74 73 70 68 64 63 62 60 58 57 46 44 32 30 21 19 14 27 15 27 7 5 0 13 1 13 13 7 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = a00E4.alt;
},
{
glyphname = a2_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,358,o),
(402,327,o),
(415,288,o),
(415,267,qs),
(415,243,o),
(402,202,o),
(377,171,o),
(336,153,o),
(309,153,qs),
(282,153,o),
(241,174,o),
(215,206,o),
(203,246,o),
(203,267,qs),
(203,286,o),
(216,325,o),
(241,357,o),
(282,376,o),
(309,376,qs),
(335,376,o)
);
},
{
closed = 1;
nodes = (
(397,512,o),
(324,539,o),
(282,538,qs),
(225,538,o),
(131,499,o),
(65,427,o),
(27,327,o),
(27,268,qs),
(27,209,o),
(58,108,o),
(119,34,o),
(210,-8,o),
(271,-8,qs),
(304,-8,o),
(383,12,o),
(418,40,q),
(424,0,l),
(592,0,l),
(592,527,l),
(429,527,l),
(420,487,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
40 1 0 2 24 1 3 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
6 1 0 0 2 97 5 1 2 2 22 77 0 1 1 3 97 4 1 3 3 21 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 22 77 6 1 0 0 5 97 0 5 5 29 77 0 1 1 3 97 4 1 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 22 77 6 1 0 0 5 97 0 5 5 29 77 0 3 3 21 77 0 1 1 4 97 0 4 4 28 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 38 36 28 26 23 22 21 20 11 9 0 19 1 19 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = a2_alt;
},
{
glyphname = t0163.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,196,o),
(260,229,qs),
(260,369,l),
(418,369,l),
(418,527,l),
(260,527,l),
(260,659,l),
(83,659,l),
(83,527,l),
(9,527,l),
(9,369,l),
(83,369,l),
(83,188,ls),
(83,99,o),
(132,45,qs),
(152,25,o),
(178,13,q),
(140,-119,l),
(147,-116,o),
(185,-109,o),
(223,-111,o),
(253,-125,o),
(253,-142,qs),
(253,-167,o),
(196,-184,o),
(138,-172,q),
(138,-275,l),
(153,-279,o),
(188,-284,o),
(217,-284,qs),
(247,-284,o),
(306,-267,o),
(354,-231,o),
(383,-178,o),
(385,-140,qs),
(385,-110,o),
(368,-69,o),
(338,-43,o),
(302,-32,o),
(283,-31,q),
(288,-7,l),
(301,-6,o),
(318,-4,qs),
(339,-2,o),
(383,10,o),
(426,29,o),
(444,44,q),
(396,183,l),
(386,175,o),
(352,160,o),
(323,160,qs),
(292,160,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
3 1 0 4 34 4 2 1 0 33 25 24 3 2 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
9 1 0 4 1 4 0 1 128 0 1 3 4 1 3 126 0 6 0 3 2 6 3 105 8 1 4 4 5 95 7 1 5 5 22 77 0 2 2 26 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
9 1 0 4 1 4 0 1 128 0 1 3 4 1 3 126 0 2 3 2 134 0 6 0 3 2 6 3 105 8 1 4 4 5 95 7 1 5 5 22 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 48 47 46 45 44 43 42 41 40 39 31 30 22 20 12 11 0 51 1 51 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = t0163.alt;
},
{
glyphname = t021b.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,-292,o),
(277,-263,o),
(316,-218,o),
(340,-163,o),
(341,-130,qs),
(342,-90,o),
(296,-33,o),
(254,-33,qs),
(222,-32,o),
(173,-71,o),
(172,-109,qs),
(173,-141,o),
(215,-177,o),
(241,-178,q),
(238,-186,o),
(218,-205,o),
(194,-224,o),
(170,-239,o),
(160,-243,q),
(199,-301,l)
);
},
{
closed = 1;
nodes = (
(260,196,o),
(260,229,qs),
(260,369,l),
(418,369,l),
(418,527,l),
(260,527,l),
(260,659,l),
(83,659,l),
(83,527,l),
(9,527,l),
(9,369,l),
(83,369,l),
(83,188,ls),
(83,99,o),
(183,-7,o),
(283,-7,qs),
(298,-7,o),
(339,-2,o),
(383,10,o),
(426,29,o),
(444,44,q),
(396,183,l),
(386,175,o),
(352,160,o),
(323,160,qs),
(292,160,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
23 1 2 4 24 1 3 2 2 76 19 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 5 6 133 8 1 4 4 5 95 7 1 5 5 22 77 9 1 2 2 3 98 0 3 3 28 77 0 1 1 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 5 6 133 0 1 0 0 1 0 101 8 1 4 4 5 95 7 1 5 5 22 77 9 1 2 2 3 98 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
21 20 42 41 40 39 38 37 36 35 34 33 30 28 20 45 21 45 36 21 10 7 24 
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = t021b.alt;
},
{
glyphname = logom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(781,529,qs),
(773,537,o),
(765,545,o),
(757,548,o),
(743,548,o),
(728,548,q),
(694,575,l),
(689,580,o),
(682,580,qs),
(643,580,l),
(638,592,o),
(625,592,qs),
(617,592,o),
(609,585,o),
(604,580,q),
(549,580,ls),
(542,580,o),
(535,574,o),
(530,569,q),
(530,590,l),
(557,616,l),
(693,616,l),
(712,597,ls),
(718,591,o),
(726,591,qs),
(734,591,o),
(748,592,o),
(753,597,qs),
(760,604,o),
(777,624,o),
(767,636,q),
(777,650,o),
(766,663,qs),
(759,670,o),
(747,681,o),
(739,681,qs),
(729,681,o),
(720,680,o),
(712,676,o),
(703,666,o),
(693,656,q),
(657,656,l),
(657,684,l),
(669,689,o),
(683,711,o),
(683,725,qs),
(683,763,ls),
(683,771,o),
(671,783,o),
(663,783,qs),
(612,783,ls),
(604,783,o),
(592,771,o),
(592,763,qs),
(592,725,ls),
(592,711,o),
(606,689,o),
(618,684,q),
(618,656,l),
(593,656,l),
(595,663,o),
(589,676,o),
(579,682,o),
(565,681,o),
(560,675,q),
(523,639,l),
(513,647,o),
(491,636,o),
(491,623,qs),
(491,467,l),
(429,404,l),
(429,476,l),
(461,508,ls),
(470,517,o),
(461,542,o),
(447,542,qs),
(440,542,o),
(433,536,o),
(429,531,q),
(429,615,l),
(525,711,ls),
(530,717,o),
(530,733,o),
(530,743,q),
(536,743,ls),
(546,743,o),
(555,755,o),
(555,770,o),
(546,783,o),
(536,783,qs),
(530,783,l),
(530,788,ls),
(530,798,o),
(518,807,o),
(503,807,o),
(491,798,o),
(491,788,qs),
(491,783,l),
(485,783,ls),
(475,783,o),
(465,770,o),
(465,755,o),
(475,743,o),
(485,743,qs),
(491,743,l),
(491,733,l),
(429,671,l),
(429,792,ls),
(429,793,o),
(445,810,o),
(465,830,o),
(483,848,o),
(486,851,qs),
(492,856,o),
(492,873,o),
(486,879,qs),
(482,883,o),
(472,894,o),
(467,896,q),
(467,906,o),
(467,923,o),
(461,929,qs),
(457,933,o),
(449,941,o),
(440,947,o),
(430,949,o),
(424,945,q),
(420,950,o),
(402,952,o),
(394,945,q),
(380,954,o),
(370,942,qs),
(362,934,o),
(354,926,o),
(351,919,o),
(351,908,o),
(351,896,q),
(346,894,o),
(336,883,o),
(332,879,qs),
(326,873,o),
(326,856,o),
(332,851,qs),
(335,848,o),
(353,830,o),
(373,810,o),
(389,793,o),
(389,792,qs),
(389,671,l),
(327,733,l),
(327,743,l),
(333,743,ls),
(343,743,o),
(352,755,o),
(352,770,o),
(343,783,o),
(333,783,qs),
(327,783,l),
(327,788,ls),
(327,798,o),
(315,807,o),
(300,807,o),
(288,798,o),
(288,788,qs),
(288,783,l),
(282,783,ls),
(272,783,o),
(262,770,o),
(262,755,o),
(272,743,o),
(282,743,qs),
(288,743,l),
(288,733,o),
(288,717,o),
(294,711,qs),
(389,615,l),
(389,531,l),
(385,536,ls),
(378,543,o),
(362,541,o),
(352,530,o),
(350,515,o),
(357,508,qs),
(389,476,l),
(389,404,l),
(327,467,l),
(327,623,ls),
(327,631,o),
(315,643,o),
(307,643,qs),
(302,643,o),
(298,641,qs),
(296,640,o),
(295,639,q),
(258,675,l),
(253,681,o),
(239,682,o),
(229,676,o),
(223,663,o),
(225,656,q),
(200,656,l),
(200,684,l),
(212,689,o),
(226,711,o),
(226,725,qs),
(226,763,ls),
(226,771,o),
(214,783,o),
(206,783,qs),
(155,783,ls),
(147,783,o),
(135,771,o),
(135,763,qs),
(135,725,ls),
(135,711,o),
(149,689,o),
(161,684,q),
(161,656,l),
(125,656,l),
(106,675,ls),
(100,681,o),
(92,681,qs),
(84,681,o),
(70,681,o),
(65,675,qs),
(62,672,o),
(52,663,o),
(46,654,o),
(46,642,o),
(51,636,q),
(41,622,o),
(52,609,qs),
(59,602,o),
(71,591,o),
(79,591,qs),
(89,591,o),
(98,591,o),
(106,596,o),
(115,606,o),
(125,616,q),
(261,616,l),
(288,590,l),
(288,569,l),
(283,574,o),
(276,580,o),
(269,580,qs),
(214,580,l),
(207,587,ls),
(199,594,o),
(179,590,o),
(175,580,q),
(136,580,ls),
(129,580,o),
(124,575,q),
(90,548,l),
(76,548,o),
(62,548,o),
(53,545,o),
(45,537,o),
(37,529,qs),
(29,521,o),
(35,498,o),
(47,496,q),
(47,488,o),
(58,477,o),
(66,477,q),
(68,465,o),
(91,459,o),
(99,467,qs),
(107,475,o),
(115,483,o),
(118,492,o),
(118,506,o),
(118,520,q),
(143,540,l),
(261,540,l),
(288,514,l),
(288,478,l),
(142,478,ls),
(134,478,o),
(128,472,qs),
(103,447,ls),
(94,437,o),
(104,413,o),
(117,413,qs),
(155,413,ls),
(163,413,o),
(169,419,qs),
(189,439,l),
(299,439,l),
(394,344,l),
(400,336,o),
(417,336,o),
(424,344,qs),
(519,439,l),
(629,439,l),
(641,427,o),
(651,416,o),
(662,412,o),
(681,413,o),
(701,413,qs),
(714,413,o),
(724,438,o),
(715,447,qs),
(690,472,ls),
(684,478,o),
(676,478,qs),
(530,478,l),
(530,514,l),
(557,540,l),
(675,540,l),
(700,520,l),
(700,506,o),
(700,492,o),
(703,483,o),
(711,475,o),
(719,467,qs),
(727,459,o),
(750,466,o),
(752,477,q),
(760,477,o),
(771,488,o),
(771,496,q),
(781,499,o),
(786,508,qs),
(791,520,o)
);
},
{
closed = 1;
nodes = (
(260,235,o),
(264,238,o),
(266,236,qs),
(386,116,ls),
(395,108,o),
(421,108,o),
(430,116,qs),
(549,236,ls),
(551,238,o),
(556,235,o),
(556,233,qs),
(556,13,ls),
(556,0,o),
(569,0,qs),
(630,0,ls),
(642,0,o),
(642,13,qs),
(642,364,ls),
(642,377,o),
(630,377,qs),
(569,377,ls),
(558,377,o),
(547,368,q),
(414,235,ls),
(408,229,o),
(401,235,qs),
(269,368,l),
(258,377,o),
(247,377,qs),
(186,377,ls),
(173,377,o),
(173,364,qs),
(173,13,ls),
(173,0,o),
(186,0,qs),
(247,0,ls),
(260,0,o),
(260,13,qs),
(260,233,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 77 values pushed */
271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 18 14 294 259 131 95 4 12 18 305 245 149 83 4 10 12 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 10 76 233 228 206 198 195 177 166 161 8 16 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 15 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 37 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 108 values pushed */
32 30 2 18 14 12 14 18 12 128 8 1 0 9 1 3 0 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 26 25 22 21 20 7 16 28 24 23 3 19 14 16 19 105 33 17 15 3 14 35 34 13 3 12 10 14 12 105 7 1 1 5 1 3 2 1 3 104 38 37 36 11 4 10 6 1 2 41 10 2 105 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 117 values pushed */
26 1 21 16 21 133 32 30 18 17 4 15 14 12 14 15 12 128 8 1 0 9 1 3 0 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 13 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 38 37 36 11 4 10 6 1 2 41 10 2 105 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 118 values pushed */
26 1 21 16 21 133 32 30 18 17 4 15 14 12 14 15 12 128 8 1 0 9 1 9 0 1 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 13 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 38 37 36 11 4 10 6 1 2 41 10 2 105 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 124 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 8 1 0 9 1 9 0 1 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 13 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 38 37 36 11 4 10 6 1 2 41 10 2 105 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 131 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 0 37 12 13 12 37 13 128 8 1 0 9 1 9 0 1 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 37 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 38 36 11 3 10 6 1 2 41 10 2 105 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 135 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 0 37 12 13 12 37 13 128 8 1 0 29 1 29 0 1 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 37 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 38 36 11 3 10 6 1 2 41 10 2 105 39 1 9 9 29 77 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 138 values pushed */
26 1 21 16 21 133 32 30 17 3 15 14 18 14 15 18 128 0 18 12 14 18 12 126 0 37 12 13 12 37 13 128 39 1 9 10 29 10 9 29 128 8 1 0 29 1 29 0 1 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 28 24 23 3 19 14 16 19 89 31 27 25 22 20 5 16 35 1 12 37 16 12 103 33 1 14 34 1 13 10 14 13 105 7 1 1 5 1 3 2 1 3 104 38 36 11 3 10 6 1 2 41 10 2 105 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 84 values pushed */
359 358 351 348 345 342 336 333 330 327 321 319 316 315 314 312 310 308 304 303 301 299 289 288 284 283 275 273 266 265 250 248 240 239 236 235 231 230 226 225 222 220 173 172 169 168 164 163 159 158 155 153 136 134 125 124 116 114 107 106 104 101 90 88 85 84 79 78 74 72 70 68 18 36 50 18 18 19 53 18 30 45 7 31 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = logom;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,496,l),
(375,496,l),
(375,663,l),
(218,663,l),
(218,496,l),
(54,496,l),
(54,338,l),
(218,338,l),
(218,209,l),
(375,209,l),
(375,338,l),
(539,338,l)
);
},
{
closed = 1;
nodes = (
(539,0,l),
(539,158,l),
(54,158,l),
(54,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
4 1 2 8 5 2 1 0 2 1 103 0 3 0 0 6 3 0 103 0 6 6 7 95 0 7 7 39 7 78 0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,572,o),
(196,553,o),
(176,537,o),
(169,531,qs),
(53,437,l),
(53,349,l),
(336,349,l),
(336,456,l),
(232,456,l),
(246,467,o),
(272,488,o),
(284,500,qs),
(308,524,o),
(339,579,o),
(339,614,qs),
(339,674,o),
(262,741,o),
(204,741,qs),
(132,741,o),
(50,664,o),
(50,594,q),
(157,594,l),
(157,611,o),
(173,632,o),
(195,632,qs),
(208,632,o),
(226,618,o),
(226,605,qs),
(226,593,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 3 0 1 114 0 0 0 2 97 0 2 2 58 77 0 3 3 4 95 0 4 4 59 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 58 77 0 3 3 4 95 0 4 4 59 4 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 24 34 18 34 5 9 27 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,611,o),
(355,630,qs),
(355,660,o),
(332,703,o),
(293,729,o),
(243,741,o),
(216,741,qs),
(148,741,o),
(64,676,o),
(60,607,q),
(172,607,l),
(172,633,o),
(211,633,qs),
(221,633,o),
(240,624,o),
(240,612,qs),
(240,601,o),
(222,592,o),
(213,592,qs),
(168,592,l),
(168,500,l),
(231,500,ls),
(239,500,o),
(253,488,o),
(253,478,qs),
(253,462,o),
(224,454,o),
(211,454,qs),
(191,454,o),
(163,468,o),
(163,486,q),
(50,486,l),
(52,418,o),
(142,346,o),
(212,345,qs),
(240,345,o),
(295,358,o),
(339,388,o),
(367,436,o),
(368,470,qs),
(369,495,o),
(348,546,o),
(321,559,q),
(339,571,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 6 5 4 5 6 114 0 1 3 2 2 1 114 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
48 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 4 5 6 114 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 98 0 0 0 63 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
34 17 36 33 36 34 18 39 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 419;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,353,l),
(482,461,l),
(50,644,l),
(50,470,l),
(229,404,l),
(50,338,l),
(50,166,l)
);
},
{
closed = 1;
nodes = (
(50,158,l),
(50,0,l),
(482,0,l),
(482,158,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 1 74 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,457,l),
(50,349,l),
(482,166,l),
(482,340,l),
(303,406,l),
(482,472,l),
(482,644,l)
);
},
{
closed = 1;
nodes = (
(50,158,l),
(50,0,l),
(482,0,l),
(482,158,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 1 74 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(350,289,o),
(304,317,o),
(249,340,o),
(216,340,qs),
(163,340,o),
(95,300,o),
(58,236,o),
(48,157,o),
(54,118,q),
(197,118,l),
(195,127,o),
(195,148,o),
(202,166,o),
(218,177,o),
(233,177,qs),
(251,177,o),
(291,154,o),
(337,127,o),
(391,104,o),
(424,104,qs),
(478,104,o),
(546,144,o),
(583,208,o),
(592,287,o),
(586,326,q),
(443,326,l),
(445,317,o),
(445,296,o),
(438,278,o),
(422,266,o),
(407,266,qs),
(389,266,o)
);
},
{
closed = 1;
nodes = (
(350,546,o),
(304,573,o),
(249,596,o),
(216,596,qs),
(163,596,o),
(95,556,o),
(58,492,o),
(48,413,o),
(54,374,q),
(197,374,l),
(195,383,o),
(195,404,o),
(202,422,o),
(218,434,o),
(233,434,qs),
(251,434,o),
(291,411,o),
(337,383,o),
(391,360,o),
(424,360,qs),
(478,360,o),
(546,400,o),
(583,464,o),
(592,543,o),
(586,582,q),
(443,582,l),
(445,573,o),
(445,552,o),
(438,534,o),
(422,523,o),
(407,523,qs),
(389,523,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
0 7 11 6 6 7 114 0 10 9 8 9 10 114 0 1 5 0 0 1 114 0 4 3 2 3 4 114 0 11 0 9 10 11 9 105 13 1 6 0 8 5 6 8 106 12 1 0 3 2 0 89 0 5 0 3 4 5 3 105 12 1 0 0 2 98 0 2 0 2 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
0 7 11 6 6 7 114 0 10 9 8 9 10 8 128 0 1 5 0 5 1 0 128 0 4 3 2 3 4 114 0 11 0 9 10 11 9 105 13 1 6 0 8 5 6 8 106 12 1 0 3 2 0 89 0 5 0 3 4 5 3 105 12 1 0 0 2 98 0 2 0 2 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
0 7 11 6 11 7 6 128 0 10 9 8 9 10 8 128 0 1 5 0 5 1 0 128 0 4 3 2 3 4 2 128 0 11 0 9 10 11 9 105 13 1 6 0 8 5 6 8 106 12 1 0 3 2 0 89 0 5 0 3 4 5 3 105 12 1 0 0 2 98 0 2 0 2 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
33 32 1 0 60 58 54 53 49 47 44 42 38 37 32 63 33 63 28 26 22 21 17 15 12 10 6 5 0 31 1 31 14 6 22 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,295,l),
(50,295,l),
(50,137,l),
(113,137,l),
(50,0,l),
(212,0,l),
(275,137,l),
(529,137,l),
(529,295,l),
(348,295,l),
(393,393,l),
(529,393,l),
(529,549,l),
(466,549,l),
(529,685,l),
(367,685,l),
(304,549,l),
(50,549,l),
(50,393,l),
(232,393,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 1 0 1 133 0 6 5 6 134 2 1 0 10 9 2 3 4 0 3 103 8 1 4 5 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = tab_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,0,l),
(575,0,l),
(575,163,l),
(425,163,l),
(425,708,l),
(293,708,l),
(282,685,o),
(245,655,o),
(221,646,qs),
(208,641,o),
(176,634,o),
(142,631,o),
(108,630,o),
(94,630,q),
(94,489,l),
(244,489,l),
(244,163,l),
(79,163,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 0 0 3 1 0 103 0 2 2 20 77 6 5 2 3 3 4 96 0 4 4 21 4 78 0 0 0 17 0 17 17 17 22 33 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = tab_1;
},
{
glyphname = I_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,540,l),
(221,540,l),
(221,168,l),
(35,168,l),
(35,0,l),
(589,0,l),
(589,168,l),
(402,168,l),
(402,540,l),
(589,540,l),
(589,708,l),
(35,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
4 1 0 0 5 95 6 1 5 5 20 77 3 1 1 1 2 95 0 2 2 21 2 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = I_alt;
},
{
glyphname = l_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,184,ls),
(47,88,o),
(90,45,qs),
(118,19,o),
(203,0,o),
(259,0,qs),
(314,0,l),
(314,159,l),
(268,159,ls),
(242,159,o),
(224,181,o),
(224,207,qs),
(224,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 20 77 0 0 0 1 98 0 1 1 21 1 78 21 33 34 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 329;
}
);
note = l_alt;
},
{
glyphname = l2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,197,o),
(224,229,qs),
(224,708,l),
(47,708,l),
(47,188,ls),
(47,92,o),
(148,-7,o),
(242,-7,qs),
(289,-7,o),
(368,13,o),
(405,44,q),
(357,183,l),
(325,159,o),
(285,160,qs),
(252,161,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
2 1 0 2 3 1 1 0 2 76 0 2 2 20 77 3 1 0 0 1 98 0 1 1 28 1 78 1 0 11 10 7 5 0 14 1 14 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 400;
}
);
note = l2_alt;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,660,o),
(77,561,o),
(45,429,o),
(45,354,qs),
(45,279,o),
(75,148,o),
(144,49,o),
(256,-8,o),
(337,-8,qs),
(417,-8,o),
(528,49,o),
(598,148,o),
(629,279,o),
(629,354,qs),
(629,428,o),
(598,560,o),
(529,659,o),
(419,717,o),
(340,717,qs),
(260,717,o)
);
},
{
closed = 1;
nodes = (
(249,202,o),
(227,264,o),
(223,331,o),
(223,354,qs),
(223,378,o),
(229,444,o),
(253,504,o),
(300,546,o),
(341,546,qs),
(381,546,o),
(425,503,o),
(446,443,o),
(450,377,o),
(450,354,qs),
(450,330,o),
(445,263,o),
(423,202,o),
(378,159,o),
(337,159,qs),
(295,159,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 0 97 4 1 0 0 27 77 5 1 2 2 1 97 0 1 1 28 1 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,708,l),
(266,661,o),
(176,627,o),
(113,627,q),
(113,487,l),
(248,487,l),
(248,0,l),
(429,0,l),
(429,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 20 77 0 0 0 21 0 78 18 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,0,l),
(584,0,l),
(584,167,l),
(351,167,l),
(393,198,o),
(478,267,o),
(549,344,o),
(591,439,o),
(591,492,qs),
(591,547,o),
(550,631,o),
(482,689,o),
(393,717,o),
(345,717,qs),
(291,717,o),
(196,688,o),
(120,627,o),
(76,535,o),
(74,474,q),
(242,474,l),
(245,503,o),
(286,545,o),
(332,546,qs),
(375,546,o),
(414,503,o),
(413,473,qs),
(413,448,o),
(382,399,o),
(336,356,o),
(272,304,qs),
(79,148,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
30 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 27 77 0 3 3 4 95 0 4 4 21 4 78 17 25 36 18 38 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,512,o),
(289,550,o),
(331,550,qs),
(371,550,o),
(408,518,o),
(408,493,qs),
(408,471,o),
(375,435,o),
(335,435,qs),
(270,435,l),
(270,284,l),
(362,284,ls),
(398,284,o),
(433,251,o),
(433,228,qs),
(433,194,o),
(384,162,o),
(338,162,qs),
(290,162,o),
(225,202,o),
(219,240,q),
(43,240,l),
(49,177,o),
(101,84,o),
(178,23,o),
(276,-6,o),
(334,-7,qs),
(376,-7,o),
(454,5,o),
(490,22,qs),
(543,47,o),
(612,142,o),
(615,214,qs),
(615,241,o),
(604,294,o),
(577,339,o),
(541,375,o),
(517,385,q),
(547,404,o),
(589,477,o),
(589,519,qs),
(589,585,o),
(524,670,o),
(474,692,qs),
(443,706,o),
(375,717,o),
(338,717,qs),
(286,717,o),
(191,690,o),
(117,633,o),
(68,546,o),
(62,486,q),
(236,486,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
14 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 103 0 6 6 0 97 0 0 0 27 77 0 3 3 1 97 0 1 1 28 1 78 0 0 0 52 0 52 50 48 44 42 41 39 35 33 31 30 26 24 36 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,708,l),
(37,261,l),
(37,123,l),
(380,123,l),
(380,0,l),
(559,0,l),
(559,123,l),
(637,123,l),
(637,287,l),
(559,287,l),
(559,708,l)
);
},
{
closed = 1;
nodes = (
(380,287,l),
(240,287,l),
(380,498,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
13 1 0 4 8 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 0 4 4 20 77 0 2 2 21 2 78 17 18 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE004;
unicode = 57348;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,307,o),
(304,325,o),
(335,325,qs),
(379,325,o),
(424,274,o),
(424,243,qs),
(424,227,o),
(415,198,o),
(395,175,o),
(360,162,o),
(335,162,qs),
(314,162,o),
(282,176,o),
(259,197,o),
(247,222,o),
(245,233,q),
(69,233,l),
(76,171,o),
(120,80,o),
(190,21,o),
(283,-7,o),
(338,-7,qs),
(394,-7,o),
(492,26,o),
(565,91,o),
(607,187,o),
(607,249,qs),
(607,346,o),
(562,405,qs),
(536,440,o),
(455,479,o),
(395,482,qs),
(369,483,o),
(293,472,o),
(260,452,q),
(260,543,l),
(582,543,l),
(582,708,l),
(88,708,l),
(88,291,l),
(231,291,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE005;
unicode = 57349;
},
{
glyphname = uniE006;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(593,555,o),
(551,637,o),
(486,691,o),
(400,717,o),
(351,717,qs),
(273,717,o),
(159,656,o),
(84,554,o),
(48,419,o),
(48,346,qs),
(49,274,o),
(83,142,o),
(121,91,qs),
(156,46,o),
(267,-8,o),
(340,-8,qs),
(393,-8,o),
(487,24,o),
(523,56,qs),
(558,87,o),
(600,182,o),
(600,242,qs),
(598,304,o),
(564,386,o),
(532,415,qs),
(503,442,o),
(426,469,o),
(375,469,qs),
(361,469,o),
(320,463,o),
(275,447,o),
(228,417,o),
(209,392,q),
(209,420,o),
(225,477,o),
(257,524,o),
(307,553,o),
(340,553,qs),
(378,553,o),
(425,522,o),
(433,498,q),
(598,498,l)
);
},
{
closed = 1;
nodes = (
(381,158,o),
(337,157,qs),
(314,157,o),
(281,171,o),
(259,195,o),
(248,225,o),
(248,240,qs),
(248,255,o),
(260,282,o),
(282,304,o),
(313,318,o),
(332,318,qs),
(355,318,o),
(389,305,o),
(410,282,o),
(420,253,o),
(420,238,qs),
(420,208,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
8 1 5 1 1 76 7 1 4 0 1 0 4 1 128 0 1 5 0 1 5 126 0 5 6 0 5 6 126 0 0 0 3 97 0 3 3 27 77 0 6 6 2 98 0 2 2 28 2 78 0 0 58 56 48 46 0 41 0 41 41 42 40 34 8 7 26 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE006;
unicode = 57350;
},
{
glyphname = uniE007;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,579,l),
(604,708,l),
(83,708,l),
(83,540,l),
(397,540,l),
(137,0,l),
(339,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE007;
unicode = 57351;
},
{
glyphname = uniE008;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,16,o),
(564,70,o),
(613,154,o),
(613,214,qs),
(612,277,o),
(564,359,o),
(522,382,q),
(548,402,o),
(588,473,o),
(588,514,qs),
(588,570,o),
(545,648,o),
(474,696,o),
(385,717,o),
(339,717,qs),
(292,717,o),
(201,696,o),
(129,649,o),
(85,571,o),
(85,514,qs),
(85,472,o),
(120,405,o),
(148,382,q),
(105,357,o),
(60,274,o),
(60,217,qs),
(60,155,o),
(108,70,o),
(186,16,o),
(286,-8,o),
(338,-8,qs),
(387,-8,o)
);
},
{
closed = 1;
nodes = (
(412,524,o),
(412,500,qs),
(412,474,o),
(378,432,o),
(337,432,qs),
(297,432,o),
(260,473,o),
(260,498,qs),
(260,524,o),
(296,562,o),
(337,562,qs),
(373,562,o)
);
},
{
closed = 1;
nodes = (
(379,154,o),
(337,154,qs),
(292,154,o),
(239,194,o),
(239,228,qs),
(239,260,o),
(289,302,o),
(336,302,qs),
(382,302,o),
(432,261,o),
(432,228,qs),
(432,194,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
24 8 2 4 3 1 76 0 3 0 4 5 3 4 105 7 1 2 2 1 97 0 1 1 27 77 0 5 5 0 97 6 1 0 0 28 0 78 33 32 1 0 54 52 48 46 39 37 32 43 33 43 17 15 0 31 1 31 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE008;
unicode = 57352;
},
{
glyphname = uniE009;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,153,o),
(124,71,o),
(193,18,o),
(282,-8,o),
(332,-8,qs),
(412,-8,o),
(523,51,o),
(593,152,o),
(624,286,o),
(624,361,qs),
(624,428,o),
(595,557,o),
(529,656,o),
(421,717,o),
(343,717,qs),
(291,717,o),
(193,686,o),
(118,625,o),
(72,531,o),
(72,468,qs),
(72,414,o),
(106,330,o),
(166,272,o),
(251,241,o),
(302,241,qs),
(316,241,o),
(356,246,o),
(399,260,o),
(442,286,o),
(460,307,q),
(461,283,o),
(449,230,o),
(421,187,o),
(373,158,o),
(338,158,qs),
(302,158,o),
(249,185,o),
(242,209,q),
(73,209,l)
);
},
{
closed = 1;
nodes = (
(261,515,o),
(283,539,o),
(318,553,o),
(341,553,qs),
(355,553,o),
(385,546,o),
(398,536,qs),
(411,526,o),
(429,494,o),
(429,473,qs),
(429,461,o),
(421,431,o),
(401,406,o),
(366,388,o),
(340,388,qs),
(317,388,o),
(283,402,o),
(261,426,o),
(250,456,o),
(250,471,qs),
(250,486,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
8 1 1 5 1 76 0 5 6 1 6 5 1 128 0 1 4 6 1 4 126 7 1 4 0 6 4 0 126 0 6 6 2 97 0 2 2 27 77 0 0 0 3 98 0 3 3 28 3 78 0 0 56 54 45 43 0 38 0 38 40 40 40 34 8 7 26 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = uniE009;
unicode = 57353;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,416,l),
(46,416,l),
(46,262,l),
(430,262,l),
(258,115,l),
(367,-8,l),
(726,340,l),
(367,687,l),
(258,563,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 0 1 1 76 8 1 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,264,l),
(726,264,l),
(726,418,l),
(342,418,l),
(514,565,l),
(405,688,l),
(46,340,l),
(405,-7,l),
(514,117,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
1 1 1 0 1 76 3 2 2 0 74 8 1 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = uni2197;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,425,l),
(92,153,l),
(201,44,l),
(472,316,l),
(455,90,l),
(619,80,l),
(626,580,l),
(127,572,l),
(138,407,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
8 7 6 4 4 1 0 1 76 5 1 1 73 0 0 1 0 133 0 1 1 118 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = uni2197;
unicode = 8599;
},
{
glyphname = uni2198;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(471,363,l),
(199,634,l),
(90,525,l),
(362,254,l),
(136,271,l),
(126,107,l),
(626,100,l),
(618,599,l),
(453,588,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
7 5 4 3 4 0 1 1 76 6 1 1 74 2 1 1 0 1 133 0 0 0 118 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = uni2198;
unicode = 8600;
},
{
glyphname = uni2196;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,317,l),
(573,46,l),
(682,155,l),
(410,426,l),
(636,409,l),
(646,573,l),
(146,580,l),
(154,81,l),
(319,92,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
7 5 4 3 4 1 0 1 76 6 1 1 73 0 0 1 0 133 2 1 1 1 118 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = uni2196;
unicode = 8598;
},
{
glyphname = uni2199;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(409,255,l),
(680,527,l),
(571,636,l),
(300,364,l),
(317,590,l),
(153,600,l),
(146,100,l),
(645,108,l),
(634,273,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
8 7 6 4 4 0 1 1 76 5 1 1 74 0 1 0 1 133 0 0 0 118 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = uni2199;
unicode = 8601;
},
{
glyphname = uniE010;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,180,o),
(92,153,o),
(75,114,o),
(75,89,qs),
(75,36,o),
(136,-17,o),
(178,-17,qs),
(220,-17,o),
(280,36,o),
(280,89,qs),
(280,139,o),
(220,195,o),
(178,195,qs),
(158,195,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 28 1 78 1 0 7 5 0 13 1 13 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 355;
}
);
note = uniE010;
unicode = 57360;
},
{
glyphname = uniE011;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,-164,o),
(218,-121,o),
(269,-61,o),
(301,15,o),
(302,60,qs),
(302,88,o),
(288,137,o),
(260,173,o),
(219,194,o),
(193,194,qs),
(172,194,o),
(133,181,o),
(103,155,o),
(85,116,o),
(85,90,qs),
(85,46,o),
(140,-3,o),
(173,-6,q),
(168,-17,o),
(144,-43,o),
(112,-69,o),
(80,-90,o),
(68,-94,q),
(119,-175,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 73 0 0 0 118 44 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = uniE011;
unicode = 57361;
},
{
glyphname = uniE012;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,516,o),
(93,489,o),
(75,450,o),
(75,425,qs),
(75,372,o),
(139,319,o),
(181,319,qs),
(223,319,o),
(286,372,o),
(286,425,qs),
(286,450,o),
(269,489,o),
(240,516,o),
(202,531,o),
(181,531,qs),
(161,531,o)
);
},
{
closed = 1;
nodes = (
(123,188,o),
(93,161,o),
(75,122,o),
(75,97,qs),
(75,44,o),
(139,-9,o),
(181,-9,qs),
(223,-9,o),
(286,44,o),
(286,97,qs),
(286,122,o),
(269,161,o),
(240,188,o),
(202,203,o),
(181,203,qs),
(161,203,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 0 97 4 1 0 0 22 77 5 1 2 2 3 97 0 3 3 28 3 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 361;
}
);
note = uniE012;
unicode = 57362;
},
{
glyphname = uniE013;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,-164,o),
(219,-121,o),
(270,-61,o),
(301,15,o),
(302,60,qs),
(302,88,o),
(288,137,o),
(261,173,o),
(220,194,o),
(194,194,qs),
(173,194,o),
(134,181,o),
(105,155,o),
(87,116,o),
(87,90,qs),
(87,46,o),
(141,-3,o),
(174,-6,q),
(169,-17,o),
(145,-43,o),
(113,-69,o),
(81,-90,o),
(69,-94,q),
(120,-175,l)
);
},
{
closed = 1;
nodes = (
(135,516,o),
(105,489,o),
(87,450,o),
(87,425,qs),
(87,372,o),
(151,319,o),
(193,319,qs),
(235,319,o),
(298,372,o),
(298,425,qs),
(298,450,o),
(281,489,o),
(252,516,o),
(214,531,o),
(193,531,qs),
(173,531,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
23 5 2 0 73 0 0 2 0 134 0 2 2 1 97 3 1 1 1 22 2 78 25 24 33 31 24 39 25 39 44 4 7 23 
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = uniE013;
unicode = 57363;
},
{
glyphname = uniE014;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,708,l),
(123,411,l),
(226,411,l),
(260,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 20 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = uniE014;
unicode = 57364;
},
{
glyphname = uniE015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,708,l),
(282,411,l),
(386,411,l),
(419,708,l)
);
},
{
closed = 1;
nodes = (
(50,708,l),
(76,411,l),
(179,411,l),
(213,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 20 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 469;
}
);
note = uniE015;
unicode = 57365;
},
{
glyphname = uniE016;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,406,o),
(211,447,o),
(259,505,o),
(289,578,o),
(290,620,qs),
(290,647,o),
(277,693,o),
(251,728,o),
(212,748,o),
(187,748,qs),
(167,748,o),
(130,736,o),
(102,711,o),
(85,674,o),
(85,649,qs),
(85,607,o),
(136,560,o),
(168,557,q),
(164,547,o),
(140,522,o),
(110,498,o),
(79,477,o),
(68,473,q),
(117,396,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 73 0 0 0 118 44 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 365;
}
);
note = uniE016;
unicode = 57366;
},
{
glyphname = uniE017;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,406,o),
(165,447,o),
(213,505,o),
(243,578,o),
(244,620,qs),
(244,647,o),
(231,693,o),
(205,728,o),
(166,748,o),
(141,748,qs),
(121,748,o),
(84,736,o),
(56,711,o),
(39,674,o),
(39,649,qs),
(39,607,o),
(90,560,o),
(122,557,q),
(118,547,o),
(94,522,o),
(64,498,o),
(33,477,o),
(22,473,q),
(71,396,l)
);
},
{
closed = 1;
nodes = (
(360,406,o),
(422,447,o),
(470,505,o),
(500,578,o),
(501,620,qs),
(501,647,o),
(488,693,o),
(462,728,o),
(423,748,o),
(398,748,qs),
(378,748,o),
(341,736,o),
(313,711,o),
(296,674,o),
(296,649,qs),
(296,607,o),
(347,560,o),
(379,557,q),
(375,547,o),
(351,522,o),
(321,498,o),
(290,477,o),
(279,473,q),
(328,396,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 29 23 5 4 0 73 1 1 0 0 118 38 36 44 2 7 23 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = uniE017;
unicode = 57367;
},
{
glyphname = uniE018;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,766,o),
(148,726,o),
(100,668,o),
(70,595,o),
(69,553,qs),
(69,526,o),
(82,480,o),
(108,445,o),
(147,425,o),
(172,425,qs),
(192,425,o),
(229,437,o),
(257,462,o),
(274,499,o),
(274,524,qs),
(274,566,o),
(223,613,o),
(191,616,q),
(195,626,o),
(219,651,o),
(249,675,o),
(280,695,o),
(291,700,q),
(242,777,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 74 0 0 0 118 44 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = uniE018;
unicode = 57368;
},
{
glyphname = uniE019;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(420,766,o),
(358,726,o),
(310,668,o),
(280,595,o),
(279,553,qs),
(279,526,o),
(292,480,o),
(318,445,o),
(357,425,o),
(382,425,qs),
(402,425,o),
(439,437,o),
(467,462,o),
(484,499,o),
(484,524,qs),
(484,566,o),
(433,613,o),
(401,616,q),
(405,626,o),
(429,651,o),
(459,675,o),
(490,695,o),
(501,700,q),
(452,777,l)
);
},
{
closed = 1;
nodes = (
(163,766,o),
(101,726,o),
(53,668,o),
(23,595,o),
(22,553,qs),
(22,526,o),
(35,480,o),
(61,445,o),
(100,425,o),
(125,425,qs),
(145,425,o),
(182,437,o),
(210,462,o),
(227,499,o),
(227,524,qs),
(227,566,o),
(176,613,o),
(144,616,q),
(148,626,o),
(172,651,o),
(202,675,o),
(233,695,o),
(244,700,q),
(195,777,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 29 23 5 4 0 74 1 1 0 0 118 38 36 44 2 7 23 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = uniE019;
unicode = 57369;
},
{
glyphname = uniE020;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,-165,o),
(211,-124,o),
(259,-66,o),
(289,7,o),
(290,49,qs),
(290,76,o),
(277,122,o),
(251,157,o),
(212,177,o),
(187,177,qs),
(167,177,o),
(130,165,o),
(102,140,o),
(85,103,o),
(85,78,qs),
(85,36,o),
(136,-11,o),
(168,-14,q),
(164,-24,o),
(140,-49,o),
(110,-73,o),
(79,-94,o),
(68,-98,q),
(117,-175,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
23 5 2 0 73 0 0 0 118 44 1 7 23 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = uniE020;
unicode = 57376;
},
{
glyphname = uniE021;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,-165,o),
(165,-124,o),
(213,-66,o),
(243,7,o),
(244,49,qs),
(244,76,o),
(231,122,o),
(205,157,o),
(166,177,o),
(141,177,qs),
(121,177,o),
(84,165,o),
(56,140,o),
(39,103,o),
(39,78,qs),
(39,36,o),
(90,-11,o),
(122,-14,q),
(118,-24,o),
(94,-49,o),
(64,-73,o),
(33,-94,o),
(22,-98,q),
(71,-175,l)
);
},
{
closed = 1;
nodes = (
(360,-165,o),
(422,-124,o),
(470,-66,o),
(500,7,o),
(501,49,qs),
(501,76,o),
(488,122,o),
(462,157,o),
(423,177,o),
(398,177,qs),
(378,177,o),
(341,165,o),
(313,140,o),
(296,103,o),
(296,78,qs),
(296,36,o),
(347,-11,o),
(379,-14,q),
(375,-24,o),
(351,-49,o),
(321,-73,o),
(290,-94,o),
(279,-98,q),
(328,-175,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 29 23 5 4 0 73 1 1 0 0 118 38 36 44 2 7 23 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = uniE021;
unicode = 57377;
},
{
glyphname = uniE022;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,592,o),
(93,565,o),
(75,526,o),
(75,501,qs),
(75,448,o),
(139,395,o),
(181,395,qs),
(223,395,o),
(286,448,o),
(286,501,qs),
(286,526,o),
(269,565,o),
(240,592,o),
(202,607,o),
(181,607,qs),
(161,607,o)
);
},
{
closed = 1;
nodes = (
(123,264,o),
(93,237,o),
(75,198,o),
(75,173,qs),
(75,120,o),
(139,67,o),
(181,67,qs),
(223,67,o),
(286,120,o),
(286,173,qs),
(286,198,o),
(269,237,o),
(240,264,o),
(202,279,o),
(181,279,qs),
(161,279,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 361;
}
);
note = uniE022;
unicode = 57378;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(547,769,l),
(381,769,l),
(323,685,l),
(262,769,l),
(96,769,l),
(264,577,l),
(381,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 643;
}
);
note = caron;
unicode = 711;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,387,o),
(268,435,qs),
(268,483,o),
(207,538,o),
(161,538,qs),
(116,538,o),
(57,481,o),
(57,435,qs),
(57,388,o),
(114,332,o),
(161,332,qs),
(207,332,o)
);
},
{
closed = 1;
nodes = (
(257,-179,l),
(246,275,l),
(77,275,l),
(65,-179,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 0 0 1 97 0 1 1 49 77 0 2 2 3 95 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 2 0 3 2 3 99 4 1 0 0 1 97 0 1 1 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 15 14 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,453,l),
(334,625,ls),
(334,779,o),
(185,779,qs),
(158,779,o),
(107,765,o),
(67,737,o),
(39,694,o),
(36,665,q),
(143,665,l),
(144,672,o),
(154,681,o),
(167,687,o),
(181,689,o),
(186,689,qs),
(206,689,o),
(231,668,o),
(232,648,q),
(180,648,ls),
(153,648,o),
(98,641,o),
(75,630,qs),
(55,619,o),
(30,580,o),
(30,551,qs),
(30,503,o),
(88,448,o),
(135,448,qs),
(167,448,o),
(218,469,o),
(235,495,q),
(235,453,l)
);
},
{
closed = 1;
nodes = (
(232,571,o),
(222,554,o),
(214,546,qs),
(197,530,o),
(171,530,qs),
(156,530,o),
(136,544,o),
(136,556,qs),
(136,569,o),
(153,582,o),
(168,582,qs),
(233,582,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
0 1 5 7 1 76 0 3 2 1 2 3 1 128 0 5 7 0 7 5 0 128 0 4 0 2 3 4 2 105 0 1 8 1 6 7 1 6 105 0 7 5 0 7 89 0 7 7 0 97 0 0 7 0 81 33 32 39 37 32 43 33 43 18 36 36 18 39 34 9 9 28 
CALL[ ]	/* CallFunction */";
};
width = 379;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,769,l),
(100,616,l),
(496,616,l),
(496,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 596;
}
);
note = macron;
unicode = 175;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,708,o),
(96,684,o),
(40,637,o),
(5,566,o),
(5,519,qs),
(5,465,o),
(41,388,o),
(97,338,o),
(167,315,o),
(201,315,qs),
(217,315,l),
(217,0,l),
(398,0,l),
(398,540,l),
(503,540,l),
(503,0,l),
(684,0,l),
(684,540,l),
(789,540,l),
(789,708,l),
(199,708,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 4 0 1 0 4 1 128 2 1 0 0 5 95 6 1 5 5 38 77 3 1 1 1 39 1 78 0 0 0 20 0 19 33 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 794;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,400,o),
(47,354,qs),
(47,307,o),
(106,249,o),
(154,249,qs),
(202,249,o),
(261,306,o),
(261,354,qs),
(261,402,o),
(199,459,o),
(154,459,qs),
(109,459,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 308;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,752,o),
(56,707,o),
(40,646,o),
(40,613,qs),
(40,580,o),
(55,520,o),
(90,475,o),
(148,448,o),
(190,448,qs),
(232,448,o),
(290,475,o),
(325,520,o),
(341,580,o),
(341,613,qs),
(341,646,o),
(326,706,o),
(291,752,o),
(234,779,o),
(192,779,qs),
(150,779,o)
);
},
{
closed = 1;
nodes = (
(152,553,o),
(142,576,o),
(139,602,o),
(139,614,qs),
(139,626,o),
(143,652,o),
(154,675,o),
(175,689,o),
(192,689,qs),
(209,689,o),
(229,674,o),
(239,651,o),
(242,625,o),
(242,614,qs),
(242,602,o),
(239,576,o),
(228,553,o),
(207,538,o),
(190,538,qs),
(172,538,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 3 2 0 3 105 5 1 2 1 1 2 89 5 1 2 2 1 97 0 1 2 1 81 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 9 22 
CALL[ ]	/* CallFunction */";
};
width = 381;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,382,o),
(387,431,qs),
(387,479,o),
(328,538,o),
(280,538,qs),
(232,538,o),
(176,478,o),
(176,431,qs),
(176,383,o),
(233,328,o),
(280,328,qs),
(328,328,o)
);
},
{
closed = 1;
nodes = (
(200,249,o),
(181,226,qs),
(158,198,o),
(108,154,o),
(66,107,o),
(38,49,o),
(35,9,q),
(35,-38,o),
(71,-116,o),
(109,-143,qs),
(144,-167,o),
(230,-188,o),
(272,-188,qs),
(317,-188,o),
(407,-168,o),
(444,-142,qs),
(486,-113,o),
(524,-31,o),
(524,19,qs),
(524,44,l),
(353,44,l),
(353,9,o),
(310,-22,o),
(278,-22,qs),
(254,-22,o),
(214,-2,o),
(214,27,qs),
(214,39,o),
(228,62,o),
(248,83,o),
(270,101,o),
(279,108,qs),
(316,137,o),
(368,203,o),
(368,253,qs),
(368,260,o),
(367,273,o),
(366,281,q),
(201,281,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 0 3 2 126 6 1 0 0 1 97 0 1 1 49 77 0 2 2 4 98 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 0 3 2 126 0 2 0 4 2 4 102 6 1 0 0 1 97 0 1 1 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
12 12 1 0 12 50 12 50 38 36 30 29 27 25 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(200,724,o),
(200,678,qs),
(200,631,o),
(259,573,o),
(307,573,qs),
(355,573,o),
(414,630,o),
(414,678,qs),
(414,726,o),
(352,783,o),
(307,783,qs),
(262,783,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 614;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,818,o),
(204,785,o),
(183,738,o),
(183,711,qs),
(183,683,o),
(203,637,o),
(238,604,o),
(287,586,o),
(316,586,qs),
(375,586,o),
(449,655,o),
(449,711,qs),
(449,739,o),
(429,785,o),
(393,818,o),
(344,836,o),
(316,836,qs),
(288,836,o)
);
},
{
closed = 1;
nodes = (
(356,727,o),
(356,711,qs),
(356,695,o),
(334,674,o),
(316,674,qs),
(298,674,o),
(277,695,o),
(277,711,qs),
(277,727,o),
(300,748,o),
(316,748,qs),
(333,748,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 19 18 1 0 25 23 18 29 19 29 9 7 0 17 1 17 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 633;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,-197,o),
(265,-197,qs),
(287,-197,o),
(332,-190,o),
(351,-179,q),
(335,-83,l),
(326,-87,o),
(307,-92,o),
(296,-92,qs),
(277,-92,o),
(252,-71,o),
(253,-51,qs),
(254,-31,o),
(285,-5,o),
(308,1,q),
(214,12,l),
(180,-1,o),
(140,-57,o),
(140,-89,qs),
(140,-140,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 33 values pushed */
14 1 1 0 1 76 13 4 3 3 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 37 41 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 491;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,726,o),
(295,750,o),
(256,769,o),
(229,769,qs),
(192,769,o),
(140,743,o),
(108,700,o),
(93,642,o),
(93,610,qs),
(93,602,o),
(94,589,o),
(95,582,q),
(210,582,l),
(208,589,o),
(208,611,o),
(214,631,o),
(227,645,o),
(238,645,qs),
(250,645,o),
(279,624,o),
(314,598,o),
(358,577,o),
(386,577,qs),
(422,577,o),
(469,604,o),
(497,647,o),
(508,704,o),
(508,734,qs),
(508,742,o),
(507,755,o),
(506,762,q),
(392,762,l),
(393,754,o),
(393,735,o),
(388,719,o),
(376,707,o),
(365,707,qs),
(352,707,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 0 1 3 1 0 114 5 1 1 0 3 2 1 3 105 5 1 1 1 2 97 4 1 2 1 2 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 1 3 1 0 3 128 5 1 1 0 3 2 1 3 105 5 1 1 1 2 97 4 1 2 1 2 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 0 1 3 1 0 3 128 0 1 0 2 1 87 0 5 0 3 2 5 3 105 0 1 1 2 97 4 1 2 1 2 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
6 1 0 1 3 1 0 3 128 0 4 3 2 3 4 2 128 0 1 0 2 1 87 0 5 0 3 4 5 3 105 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 34 32 25 24 20 18 15 13 6 5 0 37 1 37 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 601;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,769,l),
(107,577,l),
(236,577,l),
(353,769,l)
);
},
{
closed = 1;
nodes = (
(422,769,l),
(302,577,l),
(438,577,l),
(594,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 654;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-238,769,l),
(-370,577,l),
(-222,577,l),
(-51,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-293,769,l),
(-480,769,l),
(-309,577,l),
(-161,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-510,577,l),
(-344,577,l),
(-286,661,l),
(-225,577,l),
(-59,577,l),
(-228,769,l),
(-344,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-247,726,o),
(-278,750,o),
(-317,769,o),
(-344,769,qs),
(-381,769,o),
(-433,743,o),
(-465,700,o),
(-480,642,o),
(-480,610,qs),
(-480,602,o),
(-479,589,o),
(-478,582,q),
(-363,582,l),
(-365,589,o),
(-365,611,o),
(-359,631,o),
(-346,645,o),
(-335,645,qs),
(-323,645,o),
(-294,624,o),
(-259,598,o),
(-215,577,o),
(-187,577,qs),
(-151,577,o),
(-104,604,o),
(-76,647,o),
(-65,704,o),
(-65,734,qs),
(-65,742,o),
(-66,755,o),
(-67,762,q),
(-181,762,l),
(-180,754,o),
(-180,735,o),
(-185,719,o),
(-197,707,o),
(-208,707,qs),
(-221,707,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 0 1 3 1 0 114 5 1 1 0 3 2 1 3 105 5 1 1 1 2 97 4 1 2 1 2 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 1 3 1 0 3 128 5 1 1 0 3 2 1 3 105 5 1 1 1 2 97 4 1 2 1 2 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 0 1 3 1 0 3 128 0 1 0 2 1 87 0 5 0 3 2 5 3 105 0 1 1 2 97 4 1 2 1 2 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
6 1 0 1 3 1 0 3 128 0 4 3 2 3 4 2 128 0 1 0 2 1 87 0 5 0 3 4 5 3 105 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 34 32 25 24 20 18 15 13 6 5 0 37 1 37 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-496,769,l),
(-496,616,l),
(-100,616,l),
(-100,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-82,672,o),
(-82,769,q),
(-224,769,l),
(-224,757,ls),
(-224,729,o),
(-257,698,o),
(-285,698,qs),
(-312,698,o),
(-346,730,o),
(-346,757,qs),
(-346,769,l),
(-488,769,l),
(-488,671,o),
(-379,577,o),
(-284,577,qs),
(-190,577,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
3 1 1 2 2 1 112 0 2 0 0 2 89 0 2 2 0 98 4 1 0 2 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 4 1 0 2 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 13 12 9 7 4 3 0 15 1 15 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-400,714,o),
(-400,668,qs),
(-400,621,o),
(-341,563,o),
(-293,563,qs),
(-245,563,o),
(-186,620,o),
(-186,668,qs),
(-186,716,o),
(-248,773,o),
(-293,773,qs),
(-338,773,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-468,750,o),
(-494,726,o),
(-510,692,o),
(-510,670,qs),
(-510,623,o),
(-453,576,o),
(-415,576,qs),
(-377,576,o),
(-320,623,o),
(-320,670,qs),
(-320,714,o),
(-378,763,o),
(-415,763,qs),
(-434,763,o)
);
},
{
closed = 1;
nodes = (
(-210,750,o),
(-237,726,o),
(-253,692,o),
(-253,670,qs),
(-253,623,o),
(-195,576,o),
(-158,576,qs),
(-119,576,o),
(-63,623,o),
(-63,670,qs),
(-63,714,o),
(-120,763,o),
(-158,763,qs),
(-176,763,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 15 14 1 0 21 19 14 27 15 27 7 5 0 13 1 13 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-366,818,o),
(-402,785,o),
(-423,738,o),
(-423,711,qs),
(-423,683,o),
(-403,637,o),
(-368,604,o),
(-319,586,o),
(-290,586,qs),
(-231,586,o),
(-157,655,o),
(-157,711,qs),
(-157,739,o),
(-177,785,o),
(-213,818,o),
(-262,836,o),
(-290,836,qs),
(-318,836,o)
);
},
{
closed = 1;
nodes = (
(-250,727,o),
(-250,711,qs),
(-250,695,o),
(-272,674,o),
(-290,674,qs),
(-308,674,o),
(-329,695,o),
(-329,711,qs),
(-329,727,o),
(-306,748,o),
(-290,748,qs),
(-273,748,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 19 18 1 0 25 23 18 29 19 29 9 7 0 17 1 17 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-387,769,l),
(-460,577,l),
(-331,577,l),
(-214,769,l)
);
},
{
closed = 1;
nodes = (
(-145,769,l),
(-265,577,l),
(-129,577,l),
(27,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-69,769,l),
(-235,769,l),
(-293,685,l),
(-354,769,l),
(-520,769,l),
(-352,577,l),
(-235,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-255,864,o),
(-315,828,o),
(-361,777,o),
(-391,713,o),
(-392,676,qs),
(-392,652,o),
(-379,611,o),
(-355,581,o),
(-316,563,o),
(-291,563,qs),
(-273,563,o),
(-236,573,o),
(-210,595,o),
(-193,628,o),
(-193,650,qs),
(-193,687,o),
(-242,729,o),
(-274,731,q),
(-270,740,o),
(-246,762,o),
(-216,783,o),
(-187,801,o),
(-176,805,q),
(-223,873,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 18 values pushed */
23 1 0 74 0 0 1 0 133 0 1 1 118 38 21 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-394,-115,l),
(-387,-112,o),
(-350,-105,o),
(-309,-107,o),
(-283,-123,o),
(-283,-138,qs),
(-283,-162,o),
(-339,-179,o),
(-396,-167,q),
(-396,-269,l),
(-382,-273,o),
(-347,-278,o),
(-318,-278,qs),
(-288,-278,o),
(-230,-261,o),
(-183,-226,o),
(-154,-173,o),
(-152,-136,qs),
(-152,-106,o),
(-169,-65,o),
(-198,-40,o),
(-234,-29,o),
(-254,-28,q),
(-233,52,l),
(-345,52,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 51 values pushed */
23 15 14 3 1 2 1 76 0 0 3 2 3 0 2 128 0 1 2 1 134 4 1 3 0 2 3 87 4 1 3 3 2 97 0 2 3 2 81 0 0 0 24 0 24 24 40 17 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-180,-197,o),
(-125,-197,qs),
(-103,-197,o),
(-58,-190,o),
(-39,-179,q),
(-55,-83,l),
(-64,-87,o),
(-83,-92,o),
(-94,-92,qs),
(-113,-92,o),
(-138,-71,o),
(-137,-51,qs),
(-136,-31,o),
(-105,-5,o),
(-82,1,q),
(-176,12,l),
(-210,-1,o),
(-250,-57,o),
(-250,-89,qs),
(-250,-140,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 33 values pushed */
14 1 1 0 1 76 13 4 3 3 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 37 41 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,950,l),
(176,950,l),
(347,758,l),
(495,758,l)
);
},
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 6 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 1 6 0 5 2 6 5 104 7 1 1 1 0 95 0 0 0 44 77 0 3 3 38 77 4 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 0 7 1 1 3 0 1 103 8 1 6 0 5 2 6 5 104 0 3 3 38 77 4 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 12 0 0 12 14 12 14 11 10 9 8 7 6 5 4 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(402,950,l),
(270,758,l),
(418,758,l),
(589,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
7 1 4 0 3 0 4 3 104 0 5 5 6 95 0 6 6 44 77 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 6 0 5 1 6 5 103 7 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
8 8 14 13 12 11 8 10 8 10 17 17 17 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(144,758,l),
(310,758,l),
(368,842,l),
(429,758,l),
(595,758,l),
(426,950,l),
(310,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 5 7 9 1 4 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
6 1 5 7 1 7 5 1 128 8 1 4 0 3 0 4 3 104 9 1 7 7 44 77 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
9 1 7 5 7 133 6 1 5 1 5 133 8 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
11 11 8 8 11 17 11 17 16 15 13 12 8 10 8 10 17 17 17 16 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(402,907,o),
(371,931,o),
(332,950,o),
(305,950,qs),
(268,950,o),
(216,924,o),
(184,881,o),
(169,823,o),
(169,791,qs),
(169,783,o),
(170,770,o),
(171,763,q),
(286,763,l),
(284,770,o),
(284,792,o),
(290,812,o),
(303,826,o),
(314,826,qs),
(326,826,o),
(355,805,o),
(390,779,o),
(434,758,o),
(462,758,qs),
(498,758,o),
(545,785,o),
(573,828,o),
(584,885,o),
(584,915,qs),
(584,923,o),
(583,936,o),
(582,943,q),
(468,943,l),
(469,935,o),
(469,916,o),
(464,900,o),
(452,888,o),
(441,888,qs),
(428,888,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
12 1 5 6 8 6 5 114 0 8 7 6 8 89 10 1 6 9 1 7 1 6 7 105 11 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
12 1 5 6 8 6 5 8 128 0 8 7 6 8 89 10 1 6 9 1 7 1 6 7 105 11 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
12 1 5 6 8 6 5 8 128 0 10 0 8 7 10 8 105 0 6 9 1 7 1 6 7 105 11 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
12 1 5 6 8 6 5 8 128 0 9 8 7 8 9 7 128 0 10 0 8 9 10 8 105 0 6 0 7 1 6 7 105 11 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
12 11 8 8 45 43 36 35 31 29 26 24 17 16 11 48 12 48 8 10 8 10 17 17 17 16 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(293,950,o),
(257,918,o),
(236,872,o),
(236,846,qs),
(236,819,o),
(256,774,o),
(291,742,o),
(340,724,o),
(369,724,qs),
(428,724,o),
(502,791,o),
(502,846,qs),
(502,873,o),
(482,918,o),
(446,950,o),
(397,968,o),
(369,968,qs),
(341,968,o)
);
},
{
closed = 1;
nodes = (
(409,862,o),
(409,846,qs),
(409,830,o),
(387,810,o),
(369,810,qs),
(351,810,o),
(330,830,o),
(330,846,qs),
(330,862,o),
(353,882,o),
(369,882,qs),
(386,882,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
9 1 4 1 1 76 0 8 0 6 1 8 6 105 9 1 4 0 3 0 4 3 104 11 1 7 7 5 97 10 1 5 5 44 77 0 1 1 38 77 2 1 0 0 39 0 78 30 29 12 11 8 8 36 34 29 40 30 40 20 18 11 28 12 28 8 10 8 10 17 17 17 16 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,100,l),
(415,0,l),
(914,0,l),
(914,167,l),
(596,167,l),
(596,272,l),
(852,272,l),
(852,432,l),
(596,432,l),
(596,540,l),
(914,540,l),
(914,708,l),
(290,708,l),
(-7,0,l),
(187,0,l),
(229,100,l)
);
},
{
closed = 1;
nodes = (
(288,263,l),
(396,540,l),
(415,540,l),
(415,263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 3 0 4 9 3 4 103 0 9 0 7 0 9 7 103 8 1 2 2 1 95 0 1 1 38 77 0 5 5 0 95 6 1 0 0 39 0 78 19 18 17 17 17 17 17 17 17 17 16 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 942;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(322,950,l),
(135,950,l),
(306,758,l),
(454,758,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 2 3 1 2 103 9 1 7 7 6 95 0 6 6 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 6 9 1 7 5 6 7 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(337,950,l),
(205,758,l),
(353,758,l),
(524,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 0 2 3 1 2 103 0 6 6 7 95 0 7 7 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 6 5 7 6 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(106,758,l),
(272,758,l),
(330,842,l),
(391,758,l),
(557,758,l),
(388,950,l),
(272,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
7 1 6 8 5 8 6 5 128 0 1 0 2 3 1 2 103 10 1 8 8 44 77 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
10 1 8 6 8 133 7 1 6 5 6 133 0 1 0 2 3 1 2 103 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 12 0 0 12 18 12 18 17 16 14 13 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(153,931,o),
(127,907,o),
(111,873,o),
(111,851,qs),
(111,804,o),
(168,757,o),
(206,757,qs),
(244,757,o),
(301,804,o),
(301,851,qs),
(301,895,o),
(243,944,o),
(206,944,qs),
(187,944,o)
);
},
{
closed = 1;
nodes = (
(411,931,o),
(384,907,o),
(368,873,o),
(368,851,qs),
(368,804,o),
(426,757,o),
(463,757,qs),
(502,757,o),
(558,804,o),
(558,851,qs),
(558,895,o),
(501,944,o),
(463,944,qs),
(445,944,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
12 8 11 3 6 9 1 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 27 26 13 12 0 0 33 31 26 39 27 39 19 17 12 25 13 25 0 11 0 11 17 17 17 17 17 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(148,950,l),
(-39,950,l),
(132,758,l),
(280,758,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 2 95 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 4 1 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(185,950,l),
(53,758,l),
(201,758,l),
(372,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(-68,758,l),
(98,758,l),
(156,842,l),
(217,758,l),
(383,758,l),
(214,950,l),
(98,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 2 4 1 4 2 1 128 5 1 4 4 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 2 4 133 3 1 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
4 4 4 10 4 10 18 18 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-14,931,o),
(-40,907,o),
(-56,873,o),
(-56,851,qs),
(-56,804,o),
(1,757,o),
(39,757,qs),
(77,757,o),
(134,804,o),
(134,851,qs),
(134,895,o),
(76,944,o),
(39,944,qs),
(20,944,o)
);
},
{
closed = 1;
nodes = (
(224,931,o),
(197,907,o),
(181,873,o),
(181,851,qs),
(181,804,o),
(239,757,o),
(276,757,qs),
(315,757,o),
(371,804,o),
(371,851,qs),
(371,895,o),
(314,944,o),
(276,944,qs),
(258,944,o)
);
},
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 2 6 3 0 3 1 1 5 0 1 105 0 5 5 38 77 0 4 4 39 4 78 15 14 1 0 31 30 29 28 21 19 14 27 15 27 7 5 0 13 1 13 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,0,o),
(708,179,o),
(708,356,qs),
(708,442,o),
(658,574,o),
(564,663,o),
(429,708,o),
(344,708,qs),
(67,708,l),
(67,430,l),
(-15,430,l),
(-15,278,l),
(67,278,l),
(67,0,l),
(346,0,ls)
);
},
{
closed = 1;
nodes = (
(248,430,l),
(248,540,l),
(341,540,ls),
(438,540,o),
(525,445,o),
(525,353,qs),
(525,262,o),
(442,167,o),
(348,167,qs),
(248,167,l),
(248,278,l),
(375,278,l),
(375,430,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 1 4 1 0 5 1 0 103 0 6 6 2 95 0 2 2 38 77 0 5 5 3 95 8 1 3 3 39 3 78 0 0 27 26 25 23 19 17 16 15 0 14 0 13 33 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,399,l),
(552,0,l),
(716,0,l),
(716,708,l),
(535,708,l),
(535,303,l),
(236,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(424,907,o),
(393,931,o),
(354,950,o),
(327,950,qs),
(290,950,o),
(238,924,o),
(206,881,o),
(191,823,o),
(191,791,qs),
(191,783,o),
(192,770,o),
(193,763,q),
(308,763,l),
(306,770,o),
(306,792,o),
(312,812,o),
(325,826,o),
(336,826,qs),
(348,826,o),
(377,805,o),
(412,779,o),
(456,758,o),
(484,758,qs),
(520,758,o),
(567,785,o),
(595,828,o),
(606,885,o),
(606,915,qs),
(606,923,o),
(605,936,o),
(604,943,q),
(490,943,l),
(491,935,o),
(491,916,o),
(486,900,o),
(474,888,o),
(463,888,qs),
(450,888,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 1 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
11 1 4 5 7 5 4 114 0 7 6 5 7 89 9 1 5 8 1 6 0 5 6 105 10 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
11 1 4 5 7 5 4 7 128 0 7 6 5 7 89 9 1 5 8 1 6 0 5 6 105 10 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
11 1 4 5 7 5 4 7 128 0 9 0 7 6 9 7 105 0 5 8 1 6 0 5 6 105 10 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
11 1 4 5 7 5 4 7 128 0 8 7 6 7 8 6 128 0 9 0 7 8 9 7 105 0 5 0 6 0 5 6 105 10 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
11 10 0 0 44 42 35 34 30 28 25 23 16 15 10 47 11 47 0 9 0 9 18 17 18 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(388,950,l),
(201,950,l),
(372,758,l),
(520,758,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 5 4 95 0 4 4 44 77 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 7 1 5 0 4 5 103 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
40 40 1 0 40 43 40 43 42 41 36 34 26 24 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(423,950,l),
(291,758,l),
(439,758,l),
(610,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 5 95 0 5 5 44 77 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 4 0 5 4 103 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 43 42 41 40 36 34 26 24 11 9 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(168,758,l),
(334,758,l),
(392,842,l),
(453,758,l),
(619,758,l),
(450,950,l),
(334,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
5 1 4 6 0 6 4 0 128 8 1 6 6 44 77 0 3 3 0 97 7 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
8 1 6 4 6 133 5 1 4 0 4 133 0 3 3 0 97 7 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
40 40 1 0 40 46 40 46 45 44 42 41 36 34 26 24 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(421,907,o),
(390,931,o),
(351,950,o),
(324,950,qs),
(287,950,o),
(235,924,o),
(203,881,o),
(188,823,o),
(188,791,qs),
(188,783,o),
(189,770,o),
(190,763,q),
(305,763,l),
(303,770,o),
(303,792,o),
(309,812,o),
(322,826,o),
(333,826,qs),
(345,826,o),
(374,805,o),
(409,779,o),
(453,758,o),
(481,758,qs),
(517,758,o),
(564,785,o),
(592,828,o),
(603,885,o),
(603,915,qs),
(603,923,o),
(602,936,o),
(601,943,q),
(487,943,l),
(488,935,o),
(488,916,o),
(483,900,o),
(471,888,o),
(460,888,qs),
(447,888,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
11 1 4 5 7 5 4 114 0 7 6 5 7 89 9 1 5 8 1 6 0 5 6 105 0 3 3 0 97 10 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
11 1 4 5 7 5 4 7 128 0 7 6 5 7 89 9 1 5 8 1 6 0 5 6 105 0 3 3 0 97 10 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 1 4 5 7 5 4 7 128 0 9 0 7 6 9 7 105 0 5 8 1 6 0 5 6 105 0 3 3 0 97 10 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
11 1 4 5 7 5 4 7 128 0 8 7 6 7 8 6 128 0 9 0 7 8 9 7 105 0 5 0 6 0 5 6 105 0 3 3 0 97 10 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
41 40 1 0 74 72 65 64 60 58 55 53 46 45 40 77 41 77 36 34 26 24 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(212,931,o),
(186,907,o),
(170,873,o),
(170,851,qs),
(170,804,o),
(227,757,o),
(265,757,qs),
(303,757,o),
(360,804,o),
(360,851,qs),
(360,895,o),
(302,944,o),
(265,944,qs),
(246,944,o)
);
},
{
closed = 1;
nodes = (
(470,931,o),
(443,907,o),
(427,873,o),
(427,851,qs),
(427,804,o),
(485,757,o),
(522,757,qs),
(561,757,o),
(617,804,o),
(617,851,qs),
(617,895,o),
(560,944,o),
(522,944,qs),
(504,944,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
10 6 9 3 4 7 1 5 0 4 5 105 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 55 54 41 40 1 0 61 59 54 67 55 67 47 45 40 53 41 53 36 34 26 24 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-8,o),
(380,-8,o),
(391,-8,qs),
(472,-8,o),
(606,46,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,465,o),
(664,624,o),
(586,669,q),
(638,821,l),
(464,821,l),
(428,715,l),
(419,716,o),
(401,717,o),
(392,717,qs),
(311,717,o),
(177,665,o),
(81,570,o),
(28,436,o),
(28,355,qs),
(28,246,o),
(116,85,o),
(195,40,q),
(142,-112,l),
(315,-112,l),
(352,-7,l)
);
},
{
closed = 1;
nodes = (
(213,356,qs),
(213,395,o),
(235,463,o),
(278,513,o),
(340,543,o),
(379,545,q),
(265,213,l),
(213,267,o)
);
},
{
closed = 1;
nodes = (
(568,395,o),
(568,353,qs),
(568,315,o),
(546,246,o),
(503,195,o),
(440,164,o),
(400,163,q),
(516,496,l),
(542,470,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
16 1 4 1 2 1 3 5 2 76 0 2 1 2 133 0 0 3 0 134 0 4 4 1 97 0 1 1 46 77 0 5 5 3 98 0 3 3 47 3 78 23 19 56 18 56 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(350,950,l),
(163,950,l),
(334,758,l),
(482,758,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 5 4 95 0 4 4 44 77 3 1 1 1 38 77 0 2 2 0 98 6 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 7 1 5 1 4 5 103 3 1 1 1 38 77 0 2 2 0 98 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
22 22 1 0 22 25 22 25 24 23 18 17 12 10 5 4 0 21 1 21 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(385,950,l),
(253,758,l),
(401,758,l),
(572,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 5 95 0 5 5 44 77 3 1 1 1 38 77 0 2 2 0 98 6 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 4 1 5 4 103 3 1 1 1 38 77 0 2 2 0 98 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 25 24 23 22 18 17 12 10 5 4 0 21 1 21 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(147,758,l),
(313,758,l),
(371,842,l),
(432,758,l),
(598,758,l),
(429,950,l),
(313,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 1 6 4 1 128 8 1 6 6 44 77 3 1 1 1 38 77 0 2 2 0 98 7 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
8 1 6 4 6 133 5 1 4 1 4 133 3 1 1 1 38 77 0 2 2 0 98 7 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
22 22 1 0 22 28 22 28 27 26 24 23 18 17 12 10 5 4 0 21 1 21 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,708,l),
(0,708,l),
(272,263,l),
(272,0,l),
(453,0,l),
(453,264,l),
(727,708,l),
(522,708,l),
(363,427,l)
);
},
{
closed = 1;
nodes = (
(396,950,l),
(264,758,l),
(412,758,l),
(583,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
8 5 2 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 4 95 0 4 4 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 4 0 3 0 4 3 103 2 1 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,99,ls),
(408,99,o),
(513,131,o),
(590,195,o),
(635,292,o),
(635,357,qs),
(635,426,o),
(595,522,o),
(522,581,o),
(418,608,o),
(354,608,qs),
(248,608,l),
(248,708,l),
(67,708,l),
(67,0,l),
(248,0,l),
(248,99,l)
);
},
{
closed = 1;
nodes = (
(369,440,o),
(410,432,o),
(440,413,o),
(457,378,o),
(457,351,qs),
(455,302,o),
(392,260,o),
(347,260,qs),
(248,260,l),
(248,440,l),
(346,440,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 2 6 1 5 4 2 5 103 0 4 0 3 0 4 3 103 0 1 1 38 77 0 0 0 39 0 78 17 17 17 27 17 26 34 40 33 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,436,o),
(484,448,qs),
(494,458,o),
(518,482,o),
(538,510,o),
(551,545,o),
(551,567,qs),
(551,618,o),
(506,686,o),
(472,707,qs),
(435,730,o),
(347,749,o),
(302,749,qs),
(255,749,o),
(163,730,o),
(91,686,o),
(47,611,o),
(47,556,qs),
(47,0,l),
(224,0,l),
(224,538,ls),
(224,568,o),
(263,597,o),
(299,597,qs),
(319,597,o),
(347,586,o),
(365,570,o),
(372,551,o),
(372,542,qs),
(371,521,o),
(351,493,o),
(340,479,qs),
(331,467,o),
(312,444,o),
(295,418,o),
(285,388,o),
(285,370,qs),
(285,328,o),
(325,281,o),
(360,263,qs),
(465,211,ls),
(484,201,o),
(494,183,o),
(494,172,qs),
(494,154,o),
(469,136,o),
(455,136,qs),
(406,136,o),
(406,180,q),
(244,180,l),
(245,133,o),
(281,63,o),
(340,16,o),
(418,-8,o),
(462,-8,qs),
(504,-8,o),
(577,12,o),
(632,56,o),
(665,123,o),
(666,170,qs),
(668,218,o),
(622,296,o),
(577,319,qs),
(490,362,ls),
(474,370,o),
(457,387,o),
(457,403,qs),
(457,414,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 3 2 3 1 2 128 0 5 0 3 1 5 3 105 0 2 2 0 97 4 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 2 3 1 2 128 0 5 0 3 1 5 3 105 0 4 4 39 77 0 2 2 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
55 53 48 47 44 42 33 20 43 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 682;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = agrave;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(275,769,l),
(88,769,l),
(259,577,l),
(407,577,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 4 3 4 5 3 128 0 8 11 1 9 6 8 9 103 0 3 10 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 128 0 8 11 1 9 6 8 9 103 0 3 10 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
51 51 1 0 51 54 51 54 53 52 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(300,769,l),
(168,577,l),
(316,577,l),
(487,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 3 4 5 3 128 0 9 0 8 6 9 8 103 0 3 10 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 4 3 4 5 3 128 0 9 0 8 6 9 8 103 0 3 10 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 54 53 52 51 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = atilde;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(323,726,o),
(292,750,o),
(253,769,o),
(226,769,qs),
(189,769,o),
(137,743,o),
(105,700,o),
(90,642,o),
(90,610,qs),
(90,602,o),
(91,589,o),
(92,582,q),
(207,582,l),
(205,589,o),
(205,611,o),
(211,631,o),
(224,645,o),
(235,645,qs),
(247,645,o),
(276,624,o),
(311,598,o),
(355,577,o),
(383,577,qs),
(419,577,o),
(466,604,o),
(494,647,o),
(505,704,o),
(505,734,qs),
(505,742,o),
(504,755,o),
(503,762,q),
(389,762,l),
(390,754,o),
(390,735,o),
(385,719,o),
(373,707,o),
(362,707,qs),
(349,707,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
0 5 4 3 4 5 3 128 0 3 14 1 0 1 3 0 103 15 1 8 8 38 77 0 11 11 9 97 13 1 9 9 48 77 12 1 10 10 9 97 13 1 9 9 48 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 5 4 3 4 5 3 128 0 11 10 9 11 89 13 1 9 12 1 10 6 9 10 105 0 3 14 1 0 1 3 0 103 15 1 8 8 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 5 4 3 4 5 3 128 0 13 0 11 10 13 11 105 0 9 12 1 10 6 9 10 105 0 3 14 1 0 1 3 0 103 15 1 8 8 38 77 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
0 12 11 10 11 12 10 128 0 5 4 3 4 5 3 128 0 13 0 11 12 13 11 105 0 9 0 10 6 9 10 105 0 3 14 1 0 1 3 0 103 15 1 8 8 38 77 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
52 51 1 0 85 83 76 75 71 69 66 64 57 56 51 88 52 88 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 16 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = aring;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(216,818,o),
(180,785,o),
(159,738,o),
(159,711,qs),
(159,683,o),
(179,637,o),
(214,604,o),
(263,586,o),
(292,586,qs),
(351,586,o),
(425,655,o),
(425,711,qs),
(425,739,o),
(405,785,o),
(369,818,o),
(320,836,o),
(292,836,qs),
(264,836,o)
);
},
{
closed = 1;
nodes = (
(332,727,o),
(332,711,qs),
(332,695,o),
(310,674,o),
(292,674,qs),
(274,674,o),
(253,695,o),
(253,711,qs),
(253,727,o),
(276,748,o),
(292,748,qs),
(309,748,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 5 4 3 4 5 3 128 13 1 8 14 1 10 11 8 10 105 0 11 0 9 6 11 9 105 0 3 12 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 5 4 3 4 5 3 128 13 1 8 14 1 10 11 8 10 105 0 11 0 9 6 11 9 105 0 3 12 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
70 69 52 51 1 0 76 74 69 80 70 80 60 58 51 68 52 68 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = aring;
unicode = 229;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,31,o),
(425,72,q),
(457,34,o),
(554,-8,o),
(620,-8,qs),
(666,-8,o),
(749,15,o),
(815,61,o),
(862,131,o),
(873,178,q),
(700,178,l),
(692,157,o),
(642,139,o),
(622,140,qs),
(586,141,o),
(530,174,o),
(526,213,q),
(866,213,l),
(873,245,o),
(873,280,qs),
(873,339,o),
(838,434,o),
(772,502,o),
(678,538,o),
(619,538,qs),
(571,538,o),
(489,509,o),
(456,485,q),
(421,515,o),
(332,537,o),
(285,537,qs),
(240,537,o),
(157,514,o),
(89,468,o),
(45,398,o),
(39,350,q),
(215,350,l),
(217,360,o),
(233,375,o),
(254,385,o),
(278,389,o),
(287,389,qs),
(318,389,o),
(360,354,o),
(362,322,q),
(276,322,ls),
(233,322,o),
(147,313,o),
(109,293,qs),
(71,273,o),
(29,204,o),
(29,162,qs),
(29,83,o),
(86,37,qs),
(115,14,o),
(192,-8,o),
(231,-8,qs),
(295,-8,o)
);
},
{
closed = 1;
nodes = (
(707,361,o),
(707,322,q),
(529,322,l),
(529,341,o),
(544,369,o),
(569,388,o),
(602,398,o),
(619,398,qs),
(655,398,o)
);
},
{
closed = 1;
nodes = (
(360,173,o),
(299,127,o),
(263,127,qs),
(243,127,o),
(204,146,o),
(204,170,qs),
(204,195,o),
(243,213,o),
(265,213,qs),
(366,213,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
29 1 2 4 55 1 0 7 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
29 1 2 4 55 1 0 13 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
29 1 10 4 55 1 0 13 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 11 1 1 16 12 2 6 8 1 6 103 15 10 2 2 2 4 97 5 1 4 4 49 77 13 1 7 7 0 97 9 14 2 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 11 1 1 16 12 2 6 8 1 6 103 15 10 2 2 2 4 97 5 1 4 4 49 77 0 7 7 0 97 9 14 2 0 0 47 77 0 13 13 0 97 9 14 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 75 values pushed */
0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 11 1 1 16 12 2 6 8 1 6 103 15 1 10 10 4 97 5 1 4 4 49 77 0 2 2 4 97 5 1 4 4 49 77 0 7 7 0 97 9 14 2 0 0 47 77 0 13 13 0 97 9 14 2 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
68 67 59 58 1 0 74 72 67 76 68 76 64 63 58 66 59 66 53 51 47 46 44 42 40 39 33 31 27 25 21 20 16 14 12 10 0 57 1 57 17 8 22 
CALL[ ]	/* CallFunction */";
};
width = 900;
}
);
note = ae;
unicode = 230;
},
{
glyphname = egrave;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(285,769,l),
(98,769,l),
(269,577,l),
(417,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
0 1 4 0 4 1 0 128 0 7 11 1 8 3 7 8 103 0 6 0 4 1 6 4 103 10 1 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 44 44 34 33 1 0 44 47 44 47 46 45 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(310,769,l),
(178,577,l),
(326,577,l),
(497,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 1 4 0 4 1 0 128 0 8 0 7 3 8 7 103 0 6 0 4 1 6 4 103 10 1 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 34 33 1 0 47 46 45 44 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = edieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(118,750,o),
(92,726,o),
(76,692,o),
(76,670,qs),
(76,623,o),
(133,576,o),
(171,576,qs),
(209,576,o),
(266,623,o),
(266,670,qs),
(266,714,o),
(208,763,o),
(171,763,qs),
(152,763,o)
);
},
{
closed = 1;
nodes = (
(376,750,o),
(349,726,o),
(333,692,o),
(333,670,qs),
(333,623,o),
(391,576,o),
(428,576,qs),
(467,576,o),
(523,623,o),
(523,670,qs),
(523,714,o),
(466,763,o),
(428,763,qs),
(410,763,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 48 77 12 1 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 1 4 0 4 1 0 128 14 9 13 3 7 10 1 8 3 7 8 105 0 6 0 4 1 6 4 103 12 1 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 41 values pushed */
59 58 45 44 34 33 1 0 65 63 58 71 59 71 51 49 44 57 45 57 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,527,l)
);
},
{
closed = 1;
nodes = (
(123,769,l),
(-64,769,l),
(107,577,l),
(255,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 1 2 3 103 0 1 1 41 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,527,l)
);
},
{
closed = 1;
nodes = (
(158,769,l),
(26,577,l),
(174,577,l),
(345,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 3 0 2 1 3 2 103 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,527,l)
);
},
{
closed = 1;
nodes = (
(-36,750,o),
(-62,726,o),
(-78,692,o),
(-78,670,qs),
(-78,623,o),
(-21,576,o),
(17,576,qs),
(55,576,o),
(112,623,o),
(112,670,qs),
(112,714,o),
(54,763,o),
(17,763,qs),
(-2,763,o)
);
},
{
closed = 1;
nodes = (
(202,750,o),
(175,726,o),
(159,692,o),
(159,670,qs),
(159,623,o),
(217,576,o),
(254,576,qs),
(293,576,o),
(349,623,o),
(349,670,qs),
(349,714,o),
(292,763,o),
(254,763,qs),
(236,763,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
19 18 5 4 25 23 18 31 19 31 11 9 4 17 5 17 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = eth;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,203,o),
(203,248,qs),
(203,291,o),
(258,343,o),
(301,343,qs),
(343,343,o),
(407,294,o),
(407,249,qs),
(407,205,o),
(350,149,o),
(306,149,qs),
(261,149,o)
);
},
{
closed = 1;
nodes = (
(372,567,o),
(400,530,o),
(421,486,o),
(434,443,o),
(434,426,q),
(405,469,o),
(314,508,o),
(264,508,qs),
(211,508,o),
(123,470,o),
(61,403,o),
(27,313,o),
(27,260,qs),
(27,198,o),
(66,99,o),
(138,29,o),
(238,-8,o),
(299,-8,qs),
(374,-8,o),
(485,46,o),
(558,139,o),
(594,261,o),
(594,330,qs),
(594,385,o),
(583,474,o),
(559,552,o),
(519,622,o),
(490,659,q),
(554,695,l),
(494,798,l),
(389,740,l),
(338,769,o),
(230,803,o),
(173,811,q),
(146,682,l),
(173,678,o),
(234,665,o),
(254,653,q),
(195,620,l),
(250,520,l),
(359,578,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 1 1 3 1 76 52 24 23 22 21 18 17 14 13 9 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 1 3 97 0 3 3 41 77 4 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 1 0 3 1 105 4 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
1 0 45 43 35 33 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = eth;
unicode = 240;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,528,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(232,324,o),
(251,355,o),
(289,376,o),
(311,376,qs),
(336,376,o),
(368,357,o),
(386,327,o),
(393,292,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,347,o),
(547,444,o),
(518,478,qs),
(492,507,o),
(420,538,o),
(372,538,qs),
(359,538,o),
(321,534,o),
(280,522,o),
(238,498,o),
(220,479,q),
(210,528,l)
);
},
{
closed = 1;
nodes = (
(348,726,o),
(317,750,o),
(278,769,o),
(251,769,qs),
(214,769,o),
(162,743,o),
(130,700,o),
(115,642,o),
(115,610,qs),
(115,602,o),
(116,589,o),
(117,582,q),
(232,582,l),
(230,589,o),
(230,611,o),
(236,631,o),
(249,645,o),
(260,645,qs),
(272,645,o),
(301,624,o),
(336,598,o),
(380,577,o),
(408,577,qs),
(444,577,o),
(491,604,o),
(519,647,o),
(530,704,o),
(530,734,qs),
(530,742,o),
(529,755,o),
(528,762,q),
(414,762,l),
(415,754,o),
(415,735,o),
(410,719,o),
(398,707,o),
(387,707,qs),
(374,707,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 1 0 2 1 128 11 1 5 5 38 77 0 8 8 6 97 10 1 6 6 48 77 9 1 7 7 6 97 10 1 6 6 48 77 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 0 1 0 2 1 128 0 8 7 6 8 89 10 1 6 9 1 7 0 6 7 105 11 1 5 5 38 77 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 4 1 4 2 1 128 0 8 7 6 8 89 10 1 6 9 1 7 0 6 7 105 11 1 5 5 38 77 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 4 1 4 2 1 128 0 10 0 8 7 10 8 105 0 6 9 1 7 0 6 7 105 11 1 5 5 38 77 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 9 8 7 8 9 7 128 0 2 4 1 4 2 1 128 0 10 0 8 9 10 8 105 0 6 0 7 0 6 7 105 11 1 5 5 38 77 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
30 29 63 61 54 53 49 47 44 42 35 34 29 66 30 66 17 21 37 22 36 12 8 27 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(288,769,l),
(101,769,l),
(272,577,l),
(420,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 4 8 1 5 3 4 5 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 47 2 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(313,769,l),
(181,577,l),
(329,577,l),
(500,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 5 0 4 3 5 4 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 47 2 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(81,577,l),
(247,577,l),
(305,661,l),
(366,577,l),
(532,577,l),
(363,769,l),
(247,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
43 1 4 6 1 76 9 1 6 4 6 133 5 1 4 3 4 133 7 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 8 1 2 2 47 2 78 40 40 21 20 1 0 40 46 40 46 45 44 42 41 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(329,726,o),
(298,750,o),
(259,769,o),
(232,769,qs),
(195,769,o),
(143,743,o),
(111,700,o),
(96,642,o),
(96,610,qs),
(96,602,o),
(97,589,o),
(98,582,q),
(213,582,l),
(211,589,o),
(211,611,o),
(217,631,o),
(230,645,o),
(241,645,qs),
(253,645,o),
(282,624,o),
(317,598,o),
(361,577,o),
(389,577,qs),
(425,577,o),
(472,604,o),
(500,647,o),
(511,704,o),
(511,734,qs),
(511,742,o),
(510,755,o),
(509,762,q),
(395,762,l),
(396,754,o),
(396,735,o),
(391,719,o),
(379,707,o),
(368,707,qs),
(355,707,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 4 4 38 77 0 7 7 5 97 9 1 5 5 48 77 8 1 6 6 5 97 9 1 5 5 48 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 7 6 5 7 89 9 1 5 8 1 6 3 5 6 105 12 1 4 4 38 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 9 0 7 6 9 7 105 0 5 8 1 6 3 5 6 105 12 1 4 4 38 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 8 7 6 7 8 6 128 0 9 0 7 8 9 7 105 0 5 0 6 3 5 6 105 12 1 4 4 38 77 10 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 11 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
41 40 21 20 1 0 74 72 65 64 60 58 55 53 46 45 40 77 41 77 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(122,750,o),
(96,726,o),
(80,692,o),
(80,670,qs),
(80,623,o),
(137,576,o),
(175,576,qs),
(213,576,o),
(270,623,o),
(270,670,qs),
(270,714,o),
(212,763,o),
(175,763,qs),
(156,763,o)
);
},
{
closed = 1;
nodes = (
(380,750,o),
(353,726,o),
(337,692,o),
(337,670,qs),
(337,623,o),
(395,576,o),
(432,576,qs),
(471,576,o),
(527,623,o),
(527,670,qs),
(527,714,o),
(470,763,o),
(432,763,qs),
(414,763,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 5 5 4 97 11 6 10 3 4 4 48 77 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
11 6 10 3 4 7 1 5 3 4 5 105 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
55 54 41 40 21 20 1 0 61 59 54 67 55 67 47 45 40 53 41 53 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = oslash;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,30,o),
(536,101,o),
(574,203,o),
(574,266,qs),
(574,335,o),
(522,446,o),
(476,482,q),
(546,640,l),
(372,640,l),
(330,537,l),
(322,537,o),
(309,538,o),
(301,538,qs),
(241,538,o),
(140,499,o),
(67,427,o),
(27,327,o),
(27,266,qs),
(27,194,o),
(77,83,o),
(124,47,q),
(54,-110,l),
(227,-110,l),
(270,-7,l),
(278,-8,o),
(293,-8,o),
(301,-8,qs),
(364,-8,o)
);
},
{
closed = 1;
nodes = (
(200,265,qs),
(200,305,o),
(241,363,o),
(279,371,q),
(212,205,l),
(200,230,o)
);
},
{
closed = 1;
nodes = (
(401,265,qs),
(401,223,o),
(363,166,o),
(325,158,q),
(389,318,l),
(401,294,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
35 29 20 6 4 0 2 1 76 0 3 2 3 133 0 1 0 1 134 0 2 2 49 77 4 1 0 0 47 0 78 2 0 19 18 16 13 5 4 0 27 2 27 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(273,769,l),
(86,769,l),
(257,577,l),
(405,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 4 7 1 5 1 4 5 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 26 26 1 0 26 29 26 29 28 27 20 19 14 12 7 6 0 25 1 25 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(328,769,l),
(196,577,l),
(344,577,l),
(515,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 5 0 4 1 5 4 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 1 0 29 28 27 26 20 19 14 12 7 6 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(70,577,l),
(236,577,l),
(294,661,l),
(355,577,l),
(521,577,l),
(352,769,l),
(236,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
29 1 4 6 1 76 8 1 6 4 6 133 5 1 4 1 4 133 3 1 1 1 41 77 7 1 0 0 2 98 0 2 2 47 2 78 26 26 1 0 26 32 26 32 31 30 28 27 20 19 14 12 7 6 0 25 1 25 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,-83,o),
(261,-83,qs),
(205,-83,o),
(128,-59,o),
(101,-39,q),
(47,-182,l),
(102,-217,o),
(220,-248,o),
(281,-248,qs),
(351,-248,o),
(478,-205,o),
(523,-147,qs),
(542,-122,o),
(566,-58,o),
(578,14,o),
(582,90,o),
(582,126,qs),
(582,527,l),
(405,527,l),
(405,278,ls),
(405,258,o),
(403,214,o),
(386,176,o),
(350,152,o),
(318,152,qs),
(288,152,o),
(253,176,o),
(235,211,o),
(230,253,o),
(230,271,qs),
(230,527,l),
(54,527,l),
(54,239,ls),
(54,177,o),
(82,83,o),
(113,52,qs),
(139,25,o),
(214,-7,o),
(265,-8,qs),
(302,-8,o),
(381,13,o),
(407,42,q),
(408,-23,o)
);
},
{
closed = 1;
nodes = (
(347,769,l),
(215,577,l),
(363,577,l),
(534,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 2 37 1 5 0 36 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 7 0 6 1 7 6 103 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 7 0 6 1 7 6 103 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 18 37 40 21 37 22 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,-201,l),
(224,45,l),
(253,16,o),
(338,-8,o),
(378,-8,qs),
(437,-8,o),
(524,38,o),
(582,114,o),
(610,215,o),
(610,269,qs),
(610,322,o),
(582,420,o),
(525,494,o),
(440,538,o),
(382,538,qs),
(337,538,o),
(253,509,o),
(224,473,q),
(224,708,l),
(47,708,l),
(47,-201,l)
);
},
{
closed = 1;
nodes = (
(436,315,o),
(436,267,qs),
(436,218,o),
(388,153,o),
(335,153,qs),
(283,153,o),
(224,216,o),
(224,267,qs),
(224,314,o),
(282,376,o),
(330,376,qs),
(378,376,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 4 1 18 1 2 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 38 77 6 1 4 4 1 97 0 1 1 49 77 0 5 5 2 97 0 2 2 47 77 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 1 97 0 1 1 49 77 0 5 5 2 97 0 2 2 47 77 0 3 3 0 95 0 0 0 38 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 28 26 21 32 22 32 19 40 35 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 637;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,-83,o),
(261,-83,qs),
(205,-83,o),
(128,-59,o),
(101,-39,q),
(47,-182,l),
(102,-217,o),
(220,-248,o),
(281,-248,qs),
(351,-248,o),
(478,-205,o),
(523,-147,qs),
(542,-122,o),
(566,-58,o),
(578,14,o),
(582,90,o),
(582,126,qs),
(582,527,l),
(405,527,l),
(405,278,ls),
(405,258,o),
(403,214,o),
(386,176,o),
(350,152,o),
(318,152,qs),
(288,152,o),
(253,176,o),
(235,211,o),
(230,253,o),
(230,271,qs),
(230,527,l),
(54,527,l),
(54,239,ls),
(54,177,o),
(82,83,o),
(113,52,qs),
(139,25,o),
(214,-7,o),
(265,-8,qs),
(302,-8,o),
(381,13,o),
(407,42,q),
(408,-23,o)
);
},
{
closed = 1;
nodes = (
(138,750,o),
(112,726,o),
(96,692,o),
(96,670,qs),
(96,623,o),
(153,576,o),
(191,576,qs),
(229,576,o),
(286,623,o),
(286,670,qs),
(286,714,o),
(228,763,o),
(191,763,qs),
(172,763,o)
);
},
{
closed = 1;
nodes = (
(396,750,o),
(369,726,o),
(353,692,o),
(353,670,qs),
(353,623,o),
(411,576,o),
(448,576,qs),
(487,576,o),
(543,623,o),
(543,670,qs),
(543,714,o),
(486,763,o),
(448,763,qs),
(430,763,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 2 37 1 5 0 36 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
9 1 7 7 6 97 11 8 10 3 6 6 48 77 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
11 8 10 3 6 9 1 7 1 6 7 105 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
11 8 10 3 6 9 1 7 1 6 7 105 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
58 57 44 43 64 62 57 70 58 70 50 48 43 56 44 56 37 40 21 37 22 34 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(174,950,l),
(174,797,l),
(570,797,l),
(570,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
7 1 4 0 3 0 4 3 104 0 5 5 6 95 0 6 6 44 77 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 6 0 5 1 6 5 103 7 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
8 8 14 13 12 11 8 10 8 10 17 17 17 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(94,769,l),
(94,616,l),
(490,616,l),
(490,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 4 3 4 5 3 128 0 9 0 8 6 9 8 103 0 3 10 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 4 3 4 5 3 128 0 9 0 8 6 9 8 103 0 3 10 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 54 53 52 51 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,100,l),
(549,0,l),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l)
);
},
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(572,853,o),
(572,950,q),
(430,950,l),
(430,938,ls),
(430,910,o),
(397,879,o),
(369,879,qs),
(342,879,o),
(308,911,o),
(308,938,qs),
(308,950,l),
(166,950,l),
(166,852,o),
(275,758,o),
(370,758,qs),
(464,758,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 10 1 5 1 7 5 106 9 1 4 0 3 0 4 3 104 8 1 6 6 44 77 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
8 1 6 7 6 133 0 7 10 1 5 1 7 5 106 9 1 4 0 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
12 11 8 8 24 23 20 18 15 14 11 26 12 26 8 10 8 10 17 17 17 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(338,322,ls),
(306,322,o),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l)
);
},
{
closed = 1;
nodes = (
(498,672,o),
(498,769,q),
(356,769,l),
(356,757,ls),
(356,729,o),
(323,698,o),
(295,698,qs),
(268,698,o),
(234,730,o),
(234,757,qs),
(234,769,l),
(92,769,l),
(92,671,o),
(201,577,o),
(296,577,qs),
(390,577,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
12 1 7 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 10 10 9 112 0 5 4 3 4 5 3 128 0 3 12 1 0 1 3 0 103 13 1 8 8 10 97 0 10 10 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
11 1 9 10 9 133 0 5 4 3 4 5 3 128 0 3 12 1 0 1 3 0 103 13 1 8 8 10 97 0 10 10 38 77 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
11 1 9 10 9 133 0 5 4 3 4 5 3 128 0 3 12 1 0 1 3 0 103 13 1 8 8 10 97 0 10 10 38 77 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
11 1 9 10 9 133 0 5 4 3 4 5 3 128 0 10 13 1 8 6 10 8 106 0 3 12 1 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
52 51 1 0 64 63 60 58 55 54 51 66 52 66 50 49 44 42 38 37 35 33 31 27 18 15 7 5 0 11 1 11 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(371,506,l),
(457,263,l),
(282,263,l)
);
},
{
closed = 1;
nodes = (
(581,-197,o),
(636,-197,qs),
(658,-197,o),
(703,-190,o),
(722,-179,q),
(706,-83,l),
(697,-87,o),
(678,-92,o),
(667,-92,qs),
(648,-92,o),
(623,-71,o),
(624,-51,qs),
(625,-31,o),
(640,-18,qs),
(654,-6,o),
(674,0,q),
(744,0,l),
(463,708,l),
(279,708,l),
(-5,0,l),
(189,0,l),
(225,100,l),
(514,100,l),
(549,0,l),
(561,0,l),
(543,-11,o),
(531,-29,qs),
(511,-57,o),
(511,-89,qs),
(511,-140,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 0 4 26 1 6 1 27 1 7 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 1 0 0 2 1 0 2 104 0 4 4 38 77 5 3 2 1 1 39 77 0 6 6 7 97 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 1 0 0 2 1 0 2 104 0 6 0 7 6 7 101 0 4 4 38 77 5 3 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
0 0 31 29 24 22 16 15 14 13 12 11 10 9 8 7 0 2 0 2 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,196,o),
(346,166,o),
(319,141,o),
(282,127,o),
(261,127,qs),
(237,127,o),
(204,149,o),
(204,170,qs),
(204,193,o),
(240,213,o),
(265,213,qs),
(364,213,l)
);
},
{
closed = 1;
nodes = (
(407,-197,o),
(462,-197,qs),
(484,-197,o),
(529,-190,o),
(548,-179,q),
(532,-83,l),
(523,-87,o),
(504,-92,o),
(493,-92,qs),
(474,-92,o),
(449,-71,o),
(450,-51,qs),
(451,-31,o),
(466,-18,qs),
(480,-6,o),
(500,0,q),
(530,0,l),
(530,283,ls),
(530,432,o),
(446,493,qs),
(417,515,o),
(338,537,o),
(285,537,qs),
(241,537,o),
(159,515,o),
(91,470,o),
(45,399,o),
(39,350,q),
(215,350,l),
(218,367,o),
(261,389,o),
(287,389,qs),
(322,389,o),
(361,350,o),
(362,322,q),
(275,322,ls),
(245,322,o),
(188,318,o),
(133,305,o),
(109,293,qs),
(76,276,o),
(29,208,o),
(29,162,qs),
(29,117,o),
(59,54,o),
(107,12,o),
(170,-8,o),
(203,-8,qs),
(213,-8,o),
(253,-6,o),
(300,8,o),
(347,39,o),
(367,69,q),
(367,0,l),
(387,0,l),
(369,-11,o),
(357,-29,qs),
(337,-57,o),
(337,-89,qs),
(337,-140,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
18 1 2 1 65 1 9 2 66 1 10 9 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
18 1 2 1 65 1 9 3 66 1 10 9 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 4 11 1 0 1 4 0 103 0 5 5 7 97 0 7 7 49 77 0 1 1 2 95 8 3 2 2 2 39 77 0 9 9 10 97 0 10 10 43 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 4 5 6 4 128 0 4 11 1 0 1 4 0 103 0 9 0 10 9 10 101 0 5 5 7 97 0 7 7 49 77 0 1 1 2 95 8 3 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 6 5 4 5 6 4 128 0 4 11 1 0 1 4 0 103 0 9 0 10 9 10 101 0 5 5 7 97 0 7 7 49 77 8 1 2 2 39 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
1 0 70 68 63 61 55 54 49 47 43 42 40 38 36 33 24 21 17 16 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,459,o),
(271,513,o),
(335,546,o),
(381,546,qs),
(441,546,o),
(508,493,o),
(520,445,q),
(691,445,l),
(685,514,o),
(632,616,o),
(549,683,o),
(440,717,o),
(379,717,qs),
(300,717,o),
(170,666,o),
(78,572,o),
(28,438,o),
(28,355,qs),
(28,271,o),
(76,136,o),
(167,42,o),
(298,-8,o),
(380,-8,qs),
(440,-8,o),
(551,26,o),
(638,94,o),
(694,196,o),
(699,263,q),
(524,263,l),
(513,215,o),
(441,163,o),
(382,163,qs),
(336,163,o),
(272,198,o),
(233,253,o),
(215,322,o),
(215,356,qs),
(215,391,o)
);
},
{
closed = 1;
nodes = (
(393,950,l),
(261,758,l),
(409,758,l),
(580,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 6 6 7 95 0 7 7 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 0 6 3 7 6 103 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 20 34 20 40 36 18 36 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,172,o),
(212,202,o),
(202,240,o),
(202,260,qs),
(202,279,o),
(210,319,o),
(231,354,o),
(267,376,o),
(294,376,qs),
(323,376,o),
(364,346,o),
(370,317,q),
(540,317,l),
(538,370,o),
(501,452,o),
(437,509,o),
(350,538,o),
(300,538,qs),
(237,538,o),
(137,501,o),
(66,431,o),
(27,328,o),
(27,264,qs),
(27,199,o),
(65,98,o),
(134,28,o),
(234,-8,o),
(296,-8,qs),
(345,-8,o),
(435,20,o),
(503,75,o),
(544,157,o),
(546,211,q),
(370,211,l),
(365,184,o),
(324,153,o),
(292,153,qs),
(268,153,o)
);
},
{
closed = 1;
nodes = (
(306,769,l),
(174,577,l),
(322,577,l),
(493,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 0 6 3 7 6 103 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 47 2 78 1 0 41 40 39 38 29 27 25 24 20 18 10 8 4 3 0 37 1 37 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,459,o),
(271,513,o),
(335,546,o),
(381,546,qs),
(441,546,o),
(508,493,o),
(520,445,q),
(691,445,l),
(685,514,o),
(632,616,o),
(549,683,o),
(440,717,o),
(379,717,qs),
(300,717,o),
(170,666,o),
(78,572,o),
(28,438,o),
(28,355,qs),
(28,271,o),
(76,136,o),
(167,42,o),
(298,-8,o),
(380,-8,qs),
(440,-8,o),
(551,26,o),
(638,94,o),
(694,196,o),
(699,263,q),
(524,263,l),
(513,215,o),
(441,163,o),
(382,163,qs),
(336,163,o),
(272,198,o),
(233,253,o),
(215,322,o),
(215,356,qs),
(215,391,o)
);
},
{
closed = 1;
nodes = (
(150,758,l),
(316,758,l),
(374,842,l),
(435,758,l),
(601,758,l),
(432,950,l),
(316,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
41 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
7 1 6 8 3 8 6 3 128 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 9 1 8 8 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
9 1 8 6 8 133 7 1 6 3 6 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
38 38 38 44 38 44 18 21 34 20 40 36 18 36 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,172,o),
(212,202,o),
(202,240,o),
(202,260,qs),
(202,279,o),
(210,319,o),
(231,354,o),
(267,376,o),
(294,376,qs),
(323,376,o),
(364,346,o),
(370,317,q),
(540,317,l),
(538,370,o),
(501,452,o),
(437,509,o),
(350,538,o),
(300,538,qs),
(237,538,o),
(137,501,o),
(66,431,o),
(27,328,o),
(27,264,qs),
(27,199,o),
(65,98,o),
(134,28,o),
(234,-8,o),
(296,-8,qs),
(345,-8,o),
(435,20,o),
(503,75,o),
(544,157,o),
(546,211,q),
(370,211,l),
(365,184,o),
(324,153,o),
(292,153,qs),
(268,153,o)
);
},
{
closed = 1;
nodes = (
(68,577,l),
(234,577,l),
(292,661,l),
(353,577,l),
(519,577,l),
(350,769,l),
(234,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
41 1 6 8 1 76 10 1 8 6 8 133 7 1 6 3 6 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 38 38 1 0 38 44 38 44 43 42 40 39 29 27 25 24 20 18 10 8 4 3 0 37 1 37 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,459,o),
(271,513,o),
(335,546,o),
(381,546,qs),
(441,546,o),
(508,493,o),
(520,445,q),
(691,445,l),
(685,514,o),
(632,616,o),
(549,683,o),
(440,717,o),
(379,717,qs),
(300,717,o),
(170,666,o),
(78,572,o),
(28,438,o),
(28,355,qs),
(28,271,o),
(76,136,o),
(167,42,o),
(298,-8,o),
(380,-8,qs),
(440,-8,o),
(551,26,o),
(638,94,o),
(694,196,o),
(699,263,q),
(524,263,l),
(513,215,o),
(441,163,o),
(382,163,qs),
(336,163,o),
(272,198,o),
(233,253,o),
(215,322,o),
(215,356,qs),
(215,391,o)
);
},
{
closed = 1;
nodes = (
(273,895,o),
(273,849,qs),
(273,802,o),
(332,744,o),
(380,744,qs),
(428,744,o),
(487,801,o),
(487,849,qs),
(487,897,o),
(425,954,o),
(380,954,qs),
(335,954,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 7 6 97 8 1 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 8 1 6 0 7 3 6 7 105 0 5 5 3 97 0 3 3 46 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
39 38 45 43 38 49 39 49 34 20 40 36 18 36 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,172,o),
(212,202,o),
(202,240,o),
(202,260,qs),
(202,279,o),
(210,319,o),
(231,354,o),
(267,376,o),
(294,376,qs),
(323,376,o),
(364,346,o),
(370,317,q),
(540,317,l),
(538,370,o),
(501,452,o),
(437,509,o),
(350,538,o),
(300,538,qs),
(237,538,o),
(137,501,o),
(66,431,o),
(27,328,o),
(27,264,qs),
(27,199,o),
(65,98,o),
(134,28,o),
(234,-8,o),
(296,-8,qs),
(345,-8,o),
(435,20,o),
(503,75,o),
(544,157,o),
(546,211,q),
(370,211,l),
(365,184,o),
(324,153,o),
(292,153,qs),
(268,153,o)
);
},
{
closed = 1;
nodes = (
(193,724,o),
(193,678,qs),
(193,631,o),
(252,573,o),
(300,573,qs),
(348,573,o),
(407,630,o),
(407,678,qs),
(407,726,o),
(345,783,o),
(300,783,qs),
(255,783,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 7 7 6 97 9 1 6 6 48 77 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 9 1 6 0 7 3 6 7 105 0 5 5 3 97 0 3 3 49 77 8 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
39 38 1 0 45 43 38 49 39 49 29 27 25 24 20 18 10 8 4 3 0 37 1 37 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,459,o),
(271,513,o),
(335,546,o),
(381,546,qs),
(441,546,o),
(508,493,o),
(520,445,q),
(691,445,l),
(685,514,o),
(632,616,o),
(549,683,o),
(440,717,o),
(379,717,qs),
(300,717,o),
(170,666,o),
(78,572,o),
(28,438,o),
(28,355,qs),
(28,271,o),
(76,136,o),
(167,42,o),
(298,-8,o),
(380,-8,qs),
(440,-8,o),
(551,26,o),
(638,94,o),
(694,196,o),
(699,263,q),
(524,263,l),
(513,215,o),
(441,163,o),
(382,163,qs),
(336,163,o),
(272,198,o),
(233,253,o),
(215,322,o),
(215,356,qs),
(215,391,o)
);
},
{
closed = 1;
nodes = (
(601,950,l),
(435,950,l),
(377,866,l),
(316,950,l),
(150,950,l),
(318,758,l),
(435,758,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
41 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 8 6 3 6 8 3 128 0 4 5 1 5 4 114 0 1 0 5 1 0 126 7 1 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 98 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
9 1 8 6 3 6 8 3 128 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 7 1 6 6 44 77 0 5 5 3 97 0 3 3 46 77 0 0 0 2 98 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
7 1 6 8 6 133 9 1 8 3 8 133 0 4 5 1 5 4 1 128 0 1 0 5 1 0 126 0 5 5 3 97 0 3 3 46 77 0 0 0 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
38 38 38 44 38 44 18 21 34 20 40 36 18 36 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,172,o),
(212,202,o),
(202,240,o),
(202,260,qs),
(202,279,o),
(210,319,o),
(231,354,o),
(267,376,o),
(294,376,qs),
(323,376,o),
(364,346,o),
(370,317,q),
(540,317,l),
(538,370,o),
(501,452,o),
(437,509,o),
(350,538,o),
(300,538,qs),
(237,538,o),
(137,501,o),
(66,431,o),
(27,328,o),
(27,264,qs),
(27,199,o),
(65,98,o),
(134,28,o),
(234,-8,o),
(296,-8,qs),
(345,-8,o),
(435,20,o),
(503,75,o),
(544,157,o),
(546,211,q),
(370,211,l),
(365,184,o),
(324,153,o),
(292,153,qs),
(268,153,o)
);
},
{
closed = 1;
nodes = (
(523,769,l),
(357,769,l),
(299,685,l),
(238,769,l),
(72,769,l),
(240,577,l),
(357,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
41 1 8 6 1 76 10 1 8 6 3 6 8 3 128 0 1 4 0 4 1 0 128 7 1 6 0 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 9 1 0 0 2 98 0 2 2 47 2 78 38 38 1 0 38 44 38 44 43 42 40 39 29 27 25 24 20 18 10 8 4 3 0 37 1 37 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(517,0,o),
(708,178,o),
(708,356,qs),
(708,443,o),
(657,575,o),
(563,663,o),
(428,708,o),
(344,708,qs),
(67,708,l),
(67,0,l),
(346,0,ls)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(341,540,ls),
(395,540,o),
(466,511,o),
(508,461,o),
(525,393,o),
(525,353,qs),
(525,312,o),
(507,243,o),
(466,194,o),
(398,167,o),
(348,167,qs),
(248,167,l)
);
},
{
closed = 1;
nodes = (
(574,950,l),
(408,950,l),
(350,866,l),
(289,950,l),
(123,950,l),
(291,758,l),
(408,758,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
27 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 6 4 0 4 6 0 128 5 1 4 4 44 77 0 3 3 0 95 0 0 0 38 77 8 1 2 2 1 95 7 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
5 1 4 6 4 133 9 1 6 0 6 133 0 3 3 0 95 0 0 0 38 77 8 1 2 2 1 95 7 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
24 24 12 11 0 0 24 30 24 30 29 28 26 25 22 20 11 23 12 23 0 10 0 9 33 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,0,o),
(708,179,o),
(708,356,qs),
(708,442,o),
(658,574,o),
(564,663,o),
(429,708,o),
(344,708,qs),
(67,708,l),
(67,430,l),
(-15,430,l),
(-15,278,l),
(67,278,l),
(67,0,l),
(346,0,ls)
);
},
{
closed = 1;
nodes = (
(248,430,l),
(248,540,l),
(341,540,ls),
(438,540,o),
(525,445,o),
(525,353,qs),
(525,262,o),
(442,167,o),
(348,167,qs),
(248,167,l),
(248,278,l),
(375,278,l),
(375,430,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 1 4 1 0 5 1 0 103 0 6 6 2 95 0 2 2 38 77 0 5 5 3 95 8 1 3 3 39 3 78 0 0 27 26 25 23 19 17 16 15 0 14 0 13 33 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,357,o),
(403,325,o),
(415,286,o),
(415,267,qs),
(415,245,o),
(403,205,o),
(378,173,o),
(336,153,o),
(307,153,qs),
(279,153,o),
(239,172,o),
(214,202,o),
(203,240,o),
(203,261,qs),
(203,281,o),
(213,321,o),
(238,355,o),
(280,376,o),
(310,376,qs),
(338,376,o)
);
},
{
closed = 1;
nodes = (
(592,659,l),
(592,708,l),
(415,708,l),
(415,659,l),
(313,659,l),
(313,552,l),
(415,552,l),
(415,490,l),
(393,513,o),
(323,538,o),
(283,537,qs),
(228,537,o),
(145,507,o),
(113,481,qs),
(71,444,o),
(27,334,o),
(27,265,qs),
(27,198,o),
(68,88,o),
(105,52,qs),
(134,23,o),
(218,-8,o),
(264,-8,qs),
(362,-8,o),
(419,46,q),
(419,0,l),
(592,0,l),
(592,552,l),
(663,552,l),
(663,659,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
41 1 0 5 24 1 3 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 7 6 1 2 5 7 2 103 0 8 8 38 77 10 1 0 0 5 97 0 5 5 49 77 0 1 1 3 97 4 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 6 1 2 5 7 2 103 0 8 8 38 77 10 1 0 0 5 97 0 5 5 49 77 0 3 3 39 77 0 1 1 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 49 48 47 46 45 44 43 42 39 37 27 25 23 22 21 20 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(141,950,l),
(141,797,l),
(537,797,l),
(537,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 0 2 3 1 2 103 0 6 6 7 95 0 7 7 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 6 5 7 6 103 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(95,769,l),
(95,616,l),
(491,616,l),
(491,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 1 4 0 4 1 0 128 0 8 0 7 3 8 7 103 0 6 0 4 1 6 4 103 10 1 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 34 33 1 0 47 46 45 44 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(542,853,o),
(542,950,q),
(400,950,l),
(400,938,ls),
(400,910,o),
(367,879,o),
(339,879,qs),
(312,879,o),
(278,911,o),
(278,938,qs),
(278,950,l),
(136,950,l),
(136,852,o),
(245,758,o),
(340,758,qs),
(434,758,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 8 11 1 6 5 8 6 106 0 1 0 2 3 1 2 103 9 1 7 7 44 77 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 8 7 133 0 8 11 1 6 5 8 6 106 0 1 0 2 3 1 2 103 0 0 0 5 95 10 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
13 12 0 0 25 24 21 19 16 15 12 27 13 27 0 11 0 11 17 17 17 17 17 12 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(501,672,o),
(501,769,q),
(359,769,l),
(359,757,ls),
(359,729,o),
(326,698,o),
(298,698,qs),
(271,698,o),
(237,730,o),
(237,757,qs),
(237,769,l),
(95,769,l),
(95,671,o),
(204,577,o),
(299,577,qs),
(393,577,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
10 1 8 9 9 8 112 0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 103 13 1 7 7 9 97 0 9 9 38 77 12 1 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
10 1 8 9 8 133 0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 103 13 1 7 7 9 97 0 9 9 38 77 12 1 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
10 1 8 9 8 133 0 1 4 0 4 1 0 128 0 9 13 1 7 3 9 7 106 0 6 0 4 1 6 4 103 12 1 5 5 3 97 0 3 3 49 77 11 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
45 44 34 33 1 0 57 56 53 51 48 47 44 59 45 59 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(232,895,o),
(232,849,qs),
(232,802,o),
(291,744,o),
(339,744,qs),
(387,744,o),
(446,801,o),
(446,849,qs),
(446,897,o),
(384,954,o),
(339,954,qs),
(294,954,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 2 3 1 2 103 0 7 7 6 97 9 1 6 6 44 77 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
9 1 6 0 7 5 6 7 105 0 1 0 2 3 1 2 103 0 0 0 5 95 8 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
13 12 0 0 19 17 12 23 13 23 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(191,724,o),
(191,678,qs),
(191,631,o),
(250,573,o),
(298,573,qs),
(346,573,o),
(405,630,o),
(405,678,qs),
(405,726,o),
(343,783,o),
(298,783,qs),
(253,783,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 103 0 8 8 7 97 11 1 7 7 48 77 10 1 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 1 4 0 4 1 0 128 11 1 7 0 8 3 7 8 105 0 6 0 4 1 6 4 103 10 1 5 5 3 97 0 3 3 49 77 9 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
45 44 34 33 1 0 51 49 44 55 45 55 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,-197,o),
(365,-197,qs),
(387,-197,o),
(432,-190,o),
(451,-179,q),
(435,-83,l),
(426,-87,o),
(407,-92,o),
(396,-92,qs),
(377,-92,o),
(352,-71,o),
(353,-51,qs),
(354,-31,o),
(369,-18,qs),
(383,-6,o),
(403,0,q),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l),
(67,0,l),
(290,0,l),
(272,-11,o),
(260,-29,qs),
(240,-57,o),
(240,-89,qs),
(240,-140,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
27 1 7 0 28 1 8 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 0 4 5 3 4 103 0 2 2 1 95 0 1 1 38 77 0 5 5 0 95 6 1 0 0 39 77 0 7 7 8 97 0 8 8 43 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 0 4 5 3 4 103 0 7 0 8 7 8 101 0 2 2 1 95 0 1 1 38 77 0 5 5 0 95 6 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
37 38 17 17 17 17 17 17 20 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(268,-197,o),
(323,-197,qs),
(345,-197,o),
(390,-190,o),
(409,-179,q),
(393,-83,l),
(384,-87,o),
(365,-92,o),
(354,-92,qs),
(335,-92,o),
(310,-71,o),
(311,-51,qs),
(312,-31,o),
(327,-18,qs),
(337,-9,o),
(351,-4,q),
(366,-1,o),
(381,2,qs),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o),
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(185,10,qs),
(212,0,o),
(242,-4,q),
(228,-14,o),
(218,-29,qs),
(198,-57,o),
(198,-89,qs),
(198,-140,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
60 15 2 6 4 61 1 7 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 8 1 0 0 2 97 0 2 2 49 77 0 6 6 7 98 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 3 4 3 5 4 128 0 4 6 3 4 6 126 0 1 0 3 5 1 3 103 0 6 0 7 6 7 102 8 1 0 0 2 97 0 2 2 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 65 63 58 56 44 43 41 39 37 36 28 26 6 5 0 10 1 10 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(601,0,l),
(601,167,l),
(248,167,l),
(248,272,l),
(539,272,l),
(539,432,l),
(248,432,l),
(248,540,l),
(601,540,l),
(601,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(565,950,l),
(399,950,l),
(341,866,l),
(280,950,l),
(114,950,l),
(282,758,l),
(399,758,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
10 1 8 6 5 6 8 5 128 0 1 0 2 3 1 2 103 7 1 6 6 44 77 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 6 8 6 133 10 1 8 5 8 133 0 1 0 2 3 1 2 103 0 0 0 5 95 9 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 12 0 0 12 18 12 18 17 16 14 13 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,184,o),
(202,213,q),
(542,213,l),
(546,230,o),
(549,261,o),
(549,280,qs),
(549,336,o),
(514,434,o),
(480,469,qs),
(444,504,o),
(357,538,o),
(295,538,qs),
(235,538,o),
(142,501,o),
(107,468,qs),
(69,431,o),
(27,328,o),
(27,266,qs),
(27,201,o),
(66,100,o),
(136,29,o),
(235,-8,o),
(296,-8,qs),
(340,-8,o),
(422,13,o),
(490,59,o),
(538,128,o),
(549,178,q),
(376,178,l),
(371,164,o),
(329,139,o),
(298,140,qs),
(250,141,o)
);
},
{
closed = 1;
nodes = (
(352,385,o),
(374,364,o),
(383,339,o),
(383,328,q),
(205,328,l),
(205,339,o),
(216,364,o),
(237,385,o),
(272,398,o),
(295,398,qs),
(319,398,o)
);
},
{
closed = 1;
nodes = (
(523,769,l),
(357,769,l),
(299,685,l),
(238,769,l),
(72,769,l),
(240,577,l),
(357,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
47 1 9 7 1 76 8 1 7 9 7 133 12 1 9 3 9 133 0 1 4 0 4 1 0 128 0 6 0 4 1 6 4 104 11 1 5 5 3 97 0 3 3 49 77 10 1 0 0 2 97 0 2 2 47 2 78 44 44 34 33 1 0 44 50 44 50 49 48 46 45 39 38 33 43 34 43 30 29 21 19 10 8 4 3 0 32 1 32 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,457,o),
(273,512,o),
(338,546,o),
(386,546,qs),
(441,546,o),
(510,505,o),
(520,458,q),
(699,458,l),
(690,525,o),
(634,622,o),
(549,686,o),
(442,717,o),
(383,717,qs),
(301,717,o),
(170,667,o),
(78,574,o),
(28,439,o),
(28,354,qs),
(28,271,o),
(77,137,o),
(170,43,o),
(301,-8,o),
(384,-8,qs),
(421,-8,o),
(496,6,o),
(563,33,o),
(621,75,o),
(642,104,qs),
(685,162,o),
(712,295,o),
(712,368,qs),
(712,394,l),
(355,394,l),
(355,242,l),
(522,242,l),
(518,221,o),
(493,191,o),
(457,172,o),
(413,163,o),
(391,163,qs),
(341,163,o),
(274,195,o),
(233,249,o),
(215,318,o),
(215,356,qs),
(215,389,o)
);
},
{
closed = 1;
nodes = (
(157,758,l),
(323,758,l),
(381,842,l),
(442,758,l),
(608,758,l),
(439,950,l),
(323,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
49 1 7 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
8 1 7 9 4 9 7 4 128 0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 10 1 9 9 44 77 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 1 9 7 9 133 8 1 7 4 7 133 0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
46 46 46 52 46 52 18 21 34 20 40 40 17 20 36 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,527,l),
(416,482,l),
(391,507,o),
(325,537,o),
(271,537,qs),
(214,537,o),
(120,493,o),
(59,418,o),
(27,319,o),
(27,265,qs),
(27,211,o),
(54,113,o),
(109,37,o),
(199,-7,o),
(263,-7,qs),
(280,-7,o),
(319,-3,o),
(360,11,o),
(397,35,o),
(412,56,q),
(412,29,o),
(407,-22,o),
(388,-62,o),
(348,-86,o),
(314,-86,qs),
(279,-86,o),
(234,-60,o),
(227,-39,q),
(47,-39,l),
(57,-94,o),
(106,-174,o),
(178,-225,o),
(267,-249,o),
(315,-249,qs),
(345,-249,o),
(408,-240,o),
(467,-217,o),
(517,-180,o),
(537,-152,qs),
(557,-124,o),
(578,-63,o),
(589,3,o),
(592,73,o),
(592,109,qs),
(592,527,l)
);
},
{
closed = 1;
nodes = (
(377,360,o),
(403,329,o),
(415,289,o),
(415,267,qs),
(415,243,o),
(403,202,o),
(377,170,o),
(335,152,o),
(306,152,qs),
(278,152,o),
(238,171,o),
(214,201,o),
(203,239,o),
(203,258,qs),
(203,277,o),
(213,319,o),
(237,355,o),
(279,378,o),
(309,378,qs),
(337,378,o)
);
},
{
closed = 1;
nodes = (
(102,577,l),
(268,577,l),
(326,661,l),
(387,577,l),
(553,577,l),
(384,769,l),
(268,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
68 1 8 10 42 1 6 4 24 1 3 7 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
68 1 8 10 42 1 6 5 24 1 3 7 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 11 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 77 0 2 2 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 11 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
12 1 10 8 10 133 9 1 8 4 8 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 0 5 5 41 77 11 1 6 6 4 97 0 4 4 49 77 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
65 65 46 45 65 71 65 71 70 69 67 66 56 54 45 64 46 64 19 40 40 34 20 41 13 8 28 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,457,o),
(273,512,o),
(338,546,o),
(386,546,qs),
(441,546,o),
(510,505,o),
(520,458,q),
(699,458,l),
(690,525,o),
(634,622,o),
(549,686,o),
(442,717,o),
(383,717,qs),
(301,717,o),
(170,667,o),
(78,574,o),
(28,439,o),
(28,354,qs),
(28,271,o),
(77,137,o),
(170,43,o),
(301,-8,o),
(384,-8,qs),
(421,-8,o),
(496,6,o),
(563,33,o),
(621,75,o),
(642,104,qs),
(685,162,o),
(712,295,o),
(712,368,qs),
(712,394,l),
(355,394,l),
(355,242,l),
(522,242,l),
(518,221,o),
(493,191,o),
(457,172,o),
(413,163,o),
(391,163,qs),
(341,163,o),
(274,195,o),
(233,249,o),
(215,318,o),
(215,356,qs),
(215,389,o)
);
},
{
closed = 1;
nodes = (
(582,853,o),
(582,950,q),
(440,950,l),
(440,938,ls),
(440,910,o),
(407,879,o),
(379,879,qs),
(352,879,o),
(318,911,o),
(318,938,qs),
(318,950,l),
(176,950,l),
(176,852,o),
(285,758,o),
(380,758,qs),
(474,758,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 5 6 2 6 5 2 128 0 9 11 1 7 4 9 7 106 0 2 0 1 0 2 1 103 10 1 8 8 44 77 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 9 8 133 0 5 6 2 6 5 2 128 0 9 11 1 7 4 9 7 106 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
47 46 59 58 55 53 50 49 46 61 47 61 34 20 40 40 17 20 36 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,527,l),
(416,482,l),
(391,507,o),
(325,537,o),
(271,537,qs),
(214,537,o),
(120,493,o),
(59,418,o),
(27,319,o),
(27,265,qs),
(27,211,o),
(54,113,o),
(109,37,o),
(199,-7,o),
(263,-7,qs),
(280,-7,o),
(319,-3,o),
(360,11,o),
(397,35,o),
(412,56,q),
(412,29,o),
(407,-22,o),
(388,-62,o),
(348,-86,o),
(314,-86,qs),
(279,-86,o),
(234,-60,o),
(227,-39,q),
(47,-39,l),
(57,-94,o),
(106,-174,o),
(178,-225,o),
(267,-249,o),
(315,-249,qs),
(345,-249,o),
(408,-240,o),
(467,-217,o),
(517,-180,o),
(537,-152,qs),
(557,-124,o),
(578,-63,o),
(589,3,o),
(592,73,o),
(592,109,qs),
(592,527,l)
);
},
{
closed = 1;
nodes = (
(377,360,o),
(403,329,o),
(415,289,o),
(415,267,qs),
(415,243,o),
(403,202,o),
(377,170,o),
(335,152,o),
(306,152,qs),
(278,152,o),
(238,171,o),
(214,201,o),
(203,239,o),
(203,258,qs),
(203,277,o),
(213,319,o),
(237,355,o),
(279,378,o),
(309,378,qs),
(337,378,o)
);
},
{
closed = 1;
nodes = (
(536,672,o),
(536,769,q),
(394,769,l),
(394,757,ls),
(394,729,o),
(361,698,o),
(333,698,qs),
(306,698,o),
(272,730,o),
(272,757,qs),
(272,769,l),
(130,769,l),
(130,671,o),
(239,577,o),
(334,577,qs),
(428,577,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
42 1 6 4 24 1 3 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
42 1 6 5 24 1 3 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
11 1 9 10 10 9 112 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 13 1 8 8 10 97 0 10 10 38 77 12 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 77 0 2 2 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
11 1 9 10 10 9 112 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 13 1 8 8 10 97 0 10 10 38 77 12 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
11 1 9 10 9 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 13 1 8 8 10 97 0 10 10 38 77 12 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
11 1 9 10 9 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 13 1 8 8 10 97 0 10 10 38 77 0 5 5 41 77 12 1 6 6 4 97 0 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
11 1 9 10 9 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 10 13 1 8 4 10 8 106 0 2 0 0 2 0 102 0 5 5 41 77 12 1 6 6 4 97 0 4 4 49 77 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
66 65 46 45 78 77 74 72 69 68 65 80 66 80 56 54 45 64 46 64 19 40 40 34 20 41 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,457,o),
(273,512,o),
(338,546,o),
(386,546,qs),
(441,546,o),
(510,505,o),
(520,458,q),
(699,458,l),
(690,525,o),
(634,622,o),
(549,686,o),
(442,717,o),
(383,717,qs),
(301,717,o),
(170,667,o),
(78,574,o),
(28,439,o),
(28,354,qs),
(28,271,o),
(77,137,o),
(170,43,o),
(301,-8,o),
(384,-8,qs),
(421,-8,o),
(496,6,o),
(563,33,o),
(621,75,o),
(642,104,qs),
(685,162,o),
(712,295,o),
(712,368,qs),
(712,394,l),
(355,394,l),
(355,242,l),
(522,242,l),
(518,221,o),
(493,191,o),
(457,172,o),
(413,163,o),
(391,163,qs),
(341,163,o),
(274,195,o),
(233,249,o),
(215,318,o),
(215,356,qs),
(215,389,o)
);
},
{
closed = 1;
nodes = (
(270,895,o),
(270,849,qs),
(270,802,o),
(329,744,o),
(377,744,qs),
(425,744,o),
(484,801,o),
(484,849,qs),
(484,897,o),
(422,954,o),
(377,954,qs),
(332,954,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 8 8 7 97 9 1 7 7 44 77 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 5 6 2 6 5 2 128 9 1 7 0 8 4 7 8 105 0 2 0 1 0 2 1 103 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
47 46 53 51 46 57 47 57 34 20 40 40 17 20 36 10 8 29 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,527,l),
(416,482,l),
(391,507,o),
(325,537,o),
(271,537,qs),
(214,537,o),
(120,493,o),
(59,418,o),
(27,319,o),
(27,265,qs),
(27,211,o),
(54,113,o),
(109,37,o),
(199,-7,o),
(263,-7,qs),
(280,-7,o),
(319,-3,o),
(360,11,o),
(397,35,o),
(412,56,q),
(412,29,o),
(407,-22,o),
(388,-62,o),
(348,-86,o),
(314,-86,qs),
(279,-86,o),
(234,-60,o),
(227,-39,q),
(47,-39,l),
(57,-94,o),
(106,-174,o),
(178,-225,o),
(267,-249,o),
(315,-249,qs),
(345,-249,o),
(408,-240,o),
(467,-217,o),
(517,-180,o),
(537,-152,qs),
(557,-124,o),
(578,-63,o),
(589,3,o),
(592,73,o),
(592,109,qs),
(592,527,l)
);
},
{
closed = 1;
nodes = (
(377,360,o),
(403,329,o),
(415,289,o),
(415,267,qs),
(415,243,o),
(403,202,o),
(377,170,o),
(335,152,o),
(306,152,qs),
(278,152,o),
(238,171,o),
(214,201,o),
(203,239,o),
(203,258,qs),
(203,277,o),
(213,319,o),
(237,355,o),
(279,378,o),
(309,378,qs),
(337,378,o)
);
},
{
closed = 1;
nodes = (
(214,724,o),
(214,678,qs),
(214,631,o),
(273,573,o),
(321,573,qs),
(369,573,o),
(428,630,o),
(428,678,qs),
(428,726,o),
(366,783,o),
(321,783,qs),
(276,783,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
42 1 6 4 24 1 3 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
42 1 6 5 24 1 3 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 9 9 8 97 11 1 8 8 48 77 10 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 77 0 2 2 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 11 1 8 0 9 4 8 9 105 10 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 77 0 2 2 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 11 1 8 0 9 4 8 9 105 0 2 0 0 2 0 102 10 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 11 1 8 0 9 4 8 9 105 0 2 0 0 2 0 102 0 5 5 41 77 10 1 6 6 4 97 0 4 4 49 77 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
66 65 46 45 72 70 65 76 66 76 56 54 45 64 46 64 19 40 40 34 20 41 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,267,l),
(505,267,l),
(505,0,l),
(686,0,l),
(686,708,l),
(505,708,l),
(505,433,l),
(248,433,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(147,758,l),
(313,758,l),
(371,842,l),
(432,758,l),
(598,758,l),
(429,950,l),
(313,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 6 8 1 8 6 1 128 0 0 0 3 2 0 3 104 9 1 8 8 44 77 5 1 1 1 38 77 4 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
9 1 8 6 8 133 7 1 6 1 6 133 0 0 0 3 2 0 3 104 5 1 1 1 38 77 4 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
12 12 12 18 12 18 18 18 17 17 17 17 17 16 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(230,324,o),
(249,356,o),
(285,376,o),
(308,376,qs),
(333,376,o),
(366,357,o),
(385,327,o),
(393,292,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,347,o),
(547,444,o),
(518,478,qs),
(492,507,o),
(423,538,o),
(375,538,qs),
(362,538,o),
(329,535,o),
(284,522,o),
(242,498,o),
(224,479,q),
(224,708,l)
);
},
{
closed = 1;
nodes = (
(73,757,l),
(239,757,l),
(297,841,l),
(358,757,l),
(524,757,l),
(355,949,l),
(239,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
32 1 5 7 0 1 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
6 1 5 7 4 7 5 4 128 0 4 4 38 77 0 0 0 49 77 0 2 2 7 95 8 1 7 7 44 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
6 1 5 7 4 7 5 4 128 8 1 7 0 2 1 7 2 105 0 4 4 38 77 0 0 0 49 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
29 29 29 35 29 35 18 18 17 21 37 22 36 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(197,907,o),
(166,931,o),
(127,950,o),
(100,950,qs),
(63,950,o),
(11,924,o),
(-21,881,o),
(-36,823,o),
(-36,791,qs),
(-36,783,o),
(-35,770,o),
(-34,763,q),
(81,763,l),
(79,770,o),
(79,792,o),
(85,812,o),
(98,826,o),
(109,826,qs),
(121,826,o),
(150,805,o),
(185,779,o),
(229,758,o),
(257,758,qs),
(293,758,o),
(340,785,o),
(368,828,o),
(379,885,o),
(379,915,qs),
(379,923,o),
(378,936,o),
(377,943,q),
(263,943,l),
(264,935,o),
(264,916,o),
(259,900,o),
(247,888,o),
(236,888,qs),
(223,888,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
8 1 2 3 5 3 2 114 0 5 4 3 5 89 7 1 3 6 1 4 1 3 4 105 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 1 2 3 5 3 2 5 128 0 5 4 3 5 89 7 1 3 6 1 4 1 3 4 105 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
8 1 2 3 5 3 2 5 128 0 7 0 5 4 7 5 105 0 3 6 1 4 1 3 4 105 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
8 1 2 3 5 3 2 5 128 0 6 5 4 5 6 4 128 0 7 0 5 6 7 5 105 0 3 0 4 1 3 4 105 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
5 4 38 36 29 28 24 22 19 17 10 9 4 41 5 41 17 16 9 8 24 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,527,l)
);
},
{
closed = 1;
nodes = (
(169,726,o),
(138,750,o),
(99,769,o),
(72,769,qs),
(35,769,o),
(-17,743,o),
(-49,700,o),
(-64,642,o),
(-64,610,qs),
(-64,602,o),
(-63,589,o),
(-62,582,q),
(53,582,l),
(51,589,o),
(51,611,o),
(57,631,o),
(70,645,o),
(81,645,qs),
(93,645,o),
(122,624,o),
(157,598,o),
(201,577,o),
(229,577,qs),
(265,577,o),
(312,604,o),
(340,647,o),
(351,704,o),
(351,734,qs),
(351,742,o),
(350,755,o),
(349,762,q),
(235,762,l),
(236,754,o),
(236,735,o),
(231,719,o),
(219,707,o),
(208,707,qs),
(195,707,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
8 1 2 2 38 77 0 5 5 3 97 7 1 3 3 48 77 6 1 4 4 3 97 7 1 3 3 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 4 3 5 89 7 1 3 6 1 4 1 3 4 105 8 1 2 2 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 7 0 5 4 7 5 105 0 3 6 1 4 1 3 4 105 8 1 2 2 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 4 5 6 4 128 0 7 0 5 6 7 5 105 0 3 0 4 1 3 4 105 8 1 2 2 38 77 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
5 4 38 36 29 28 24 22 19 17 10 9 4 41 5 41 17 16 9 8 24 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(-10,950,l),
(-10,797,l),
(326,797,l),
(326,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,527,l)
);
},
{
closed = 1;
nodes = (
(-22,769,l),
(-22,616,l),
(294,616,l),
(294,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 3 0 2 1 3 2 103 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(360,853,o),
(360,950,q),
(218,950,l),
(218,938,ls),
(218,910,o),
(185,879,o),
(157,879,qs),
(130,879,o),
(96,911,o),
(96,938,qs),
(96,950,l),
(-46,950,l),
(-46,852,o),
(63,758,o),
(158,758,qs),
(252,758,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 6 1 2 1 4 2 106 5 1 3 3 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 6 1 2 1 4 2 106 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
5 4 17 16 13 11 8 7 4 19 5 19 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,527,l)
);
},
{
closed = 1;
nodes = (
(339,672,o),
(339,769,q),
(197,769,l),
(197,757,ls),
(197,729,o),
(164,698,o),
(136,698,qs),
(109,698,o),
(75,730,o),
(75,757,qs),
(75,769,l),
(-67,769,l),
(-67,671,o),
(42,577,o),
(137,577,qs),
(231,577,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 3 4 4 3 112 6 1 2 2 4 97 0 4 4 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 3 4 3 133 6 1 2 2 4 97 0 4 4 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 6 1 2 1 4 2 106 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
5 4 17 16 13 11 8 7 4 19 5 19 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,-197,o),
(182,-197,qs),
(204,-197,o),
(249,-190,o),
(268,-179,q),
(252,-83,l),
(243,-87,o),
(224,-92,o),
(213,-92,qs),
(194,-92,o),
(169,-71,o),
(170,-51,qs),
(171,-31,o),
(186,-18,qs),
(200,-6,o),
(220,0,q),
(248,0,l),
(248,708,l),
(67,708,l),
(67,0,l),
(107,0,l),
(89,-11,o),
(77,-29,qs),
(57,-57,o),
(57,-89,qs),
(57,-140,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 3 0 20 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 1 38 77 2 1 0 0 39 77 0 3 3 4 97 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 4 3 4 101 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
37 38 17 17 20 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,763,o),
(58,735,o),
(39,697,o),
(39,672,qs),
(39,645,o),
(57,606,o),
(87,580,o),
(125,567,o),
(146,567,qs),
(189,567,o),
(253,620,o),
(253,672,qs),
(253,697,o),
(235,735,o),
(206,763,o),
(168,777,o),
(146,777,qs),
(126,777,o)
);
},
{
closed = 1;
nodes = (
(110,-197,o),
(165,-197,qs),
(187,-197,o),
(232,-190,o),
(251,-179,q),
(235,-83,l),
(226,-87,o),
(207,-92,o),
(196,-92,qs),
(177,-92,o),
(152,-71,o),
(153,-51,qs),
(154,-31,o),
(169,-18,qs),
(183,-6,o),
(203,0,q),
(235,0,l),
(235,527,l),
(59,527,l),
(59,0,l),
(90,0,l),
(72,-11,o),
(60,-29,qs),
(40,-57,o),
(40,-89,qs),
(40,-140,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
37 1 5 2 38 1 6 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 0 97 7 1 0 0 48 77 0 3 3 41 77 4 1 2 2 39 77 0 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
7 1 0 0 1 3 0 1 105 0 3 3 41 77 4 1 2 2 39 77 0 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
7 1 0 0 1 3 0 1 105 0 5 0 6 5 6 101 0 3 3 41 77 4 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 42 40 35 33 27 26 25 24 23 22 9 7 0 17 1 17 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(50,897,o),
(50,851,qs),
(50,804,o),
(109,746,o),
(157,746,qs),
(205,746,o),
(264,803,o),
(264,851,qs),
(264,899,o),
(202,956,o),
(157,956,qs),
(112,956,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 97 4 1 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(248,0,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(613,708,l),
(613,242,ls),
(613,227,o),
(608,198,o),
(592,175,o),
(563,161,o),
(540,161,qs),
(510,161,o),
(477,182,o),
(461,215,o),
(457,252,o),
(457,269,q),
(277,269,l),
(277,243,ls),
(277,184,o),
(313,90,o),
(382,26,o),
(479,-8,o),
(541,-8,qs),
(795,-8,o),
(794,255,qs),
(794,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 1 4 1 3 4 128 5 1 1 1 38 77 0 4 4 0 98 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 3 1 4 1 3 4 128 5 1 1 1 38 77 0 0 0 39 77 0 4 4 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
21 36 21 34 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 857;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,527,l),
(59,0,l),
(235,0,l),
(235,527,l)
);
},
{
closed = 1;
nodes = (
(88,763,o),
(58,735,o),
(39,697,o),
(39,672,qs),
(39,645,o),
(57,606,o),
(87,580,o),
(125,567,o),
(146,567,qs),
(189,567,o),
(253,620,o),
(253,672,qs),
(253,697,o),
(235,735,o),
(206,763,o),
(168,777,o),
(146,777,qs),
(126,777,o)
);
},
{
closed = 1;
nodes = (
(333,-13,o),
(332,-32,o),
(323,-48,o),
(301,-61,o),
(281,-61,qs),
(240,-61,l),
(240,-220,l),
(332,-220,ls),
(430,-220,o),
(510,-128,o),
(510,-35,qs),
(510,527,l),
(333,527,l),
(333,-7,ls)
);
},
{
closed = 1;
nodes = (
(365,763,o),
(334,735,o),
(316,697,o),
(316,672,qs),
(316,645,o),
(333,606,o),
(364,580,o),
(402,567,o),
(423,567,qs),
(466,567,o),
(529,618,o),
(529,672,qs),
(529,697,o),
(512,735,o),
(483,763,o),
(445,777,o),
(423,777,qs),
(403,777,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 1 3 3 2 97 10 7 9 3 2 2 48 77 4 1 1 1 41 77 0 0 0 39 77 0 6 6 5 96 0 5 5 43 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
10 7 9 3 2 8 1 3 1 2 3 105 4 1 1 1 41 77 0 0 0 39 77 0 6 6 5 96 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
10 7 9 3 2 8 1 3 1 2 3 105 0 6 0 5 6 5 100 4 1 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
37 36 5 4 45 43 36 53 37 53 31 29 28 26 23 22 13 11 4 21 5 21 17 16 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = ij;
unicode = 307;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,708,l),
(358,242,ls),
(358,227,o),
(353,198,o),
(337,175,o),
(308,161,o),
(285,161,qs),
(255,161,o),
(222,182,o),
(206,215,o),
(202,252,o),
(202,269,q),
(22,269,l),
(22,243,ls),
(22,184,o),
(58,90,o),
(127,26,o),
(224,-8,o),
(286,-8,qs),
(540,-8,o),
(539,255,qs),
(539,708,l)
);
},
{
closed = 1;
nodes = (
(205,758,l),
(371,758,l),
(429,842,l),
(490,758,l),
(656,758,l),
(487,950,l),
(371,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
5 1 4 6 3 6 4 3 128 0 1 3 2 3 1 2 128 7 1 6 6 44 77 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
7 1 6 4 6 133 5 1 4 3 4 133 0 1 3 2 3 1 2 128 0 3 3 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 22 22 28 22 28 18 18 21 36 21 33 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,-13,o),
(40,-32,o),
(31,-48,o),
(9,-61,o),
(-11,-61,qs),
(-72,-61,l),
(-72,-220,l),
(40,-220,ls),
(138,-220,o),
(218,-128,o),
(218,-35,qs),
(218,527,l),
(41,527,l),
(41,-7,ls)
);
},
{
closed = 1;
nodes = (
(-107,577,l),
(59,577,l),
(117,661,l),
(178,577,l),
(344,577,l),
(175,769,l),
(59,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
17 1 3 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 5 3 5 133 4 1 3 0 3 133 0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
6 1 5 3 5 133 4 1 3 0 3 133 0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
14 14 14 20 14 20 18 22 33 35 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 277;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,0,l),
(598,0,l),
(422,276,l),
(585,527,l),
(387,527,l),
(277,341,l),
(224,341,l),
(224,527,l),
(47,527,l),
(47,0,l),
(224,0,l),
(224,183,l),
(280,183,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
9 1 5 2 1 76 0 2 6 1 5 0 2 5 103 3 1 1 1 41 77 4 1 0 0 39 0 78 0 0 0 12 0 12 18 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(587,0,l),
(587,167,l),
(248,167,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(216,950,l),
(84,758,l),
(232,758,l),
(403,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 4 95 0 4 4 44 77 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 0 3 2 4 3 103 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,0,l),
(224,0,l),
(224,708,l)
);
},
{
closed = 1;
nodes = (
(168,949,l),
(36,757,l),
(184,757,l),
(355,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 103 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(587,0,l),
(587,167,l),
(248,167,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(326,470,o),
(326,424,qs),
(326,377,o),
(385,319,o),
(433,319,qs),
(481,319,o),
(540,376,o),
(540,424,qs),
(540,472,o),
(478,529,o),
(433,529,qs),
(388,529,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 38 77 0 4 4 3 97 5 1 3 3 41 77 0 0 0 1 96 0 1 1 39 1 78 7 6 13 11 6 17 7 17 17 17 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,0,l),
(224,0,l),
(224,708,l)
);
},
{
closed = 1;
nodes = (
(264,398,o),
(264,360,qs),
(264,322,o),
(315,274,o),
(356,274,qs),
(397,274,o),
(448,321,o),
(448,360,qs),
(448,399,o),
(395,446,o),
(356,446,qs),
(317,446,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 0 2 3 105 0 1 1 38 77 0 0 0 39 0 78 5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,399,l),
(552,0,l),
(716,0,l),
(716,708,l),
(535,708,l),
(535,303,l),
(236,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(424,950,l),
(292,758,l),
(440,758,l),
(611,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 1 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 5 95 0 5 5 44 77 6 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 5 0 4 0 5 4 103 6 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 13 12 11 10 0 9 0 9 18 17 18 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(232,324,o),
(251,355,o),
(289,376,o),
(311,376,qs),
(336,376,o),
(368,357,o),
(386,327,o),
(393,292,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,347,o),
(547,444,o),
(518,478,qs),
(492,507,o),
(420,538,o),
(372,538,qs),
(359,538,o),
(321,534,o),
(280,522,o),
(238,498,o),
(220,479,q),
(210,527,l)
);
},
{
closed = 1;
nodes = (
(319,769,l),
(187,577,l),
(335,577,l),
(506,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 1 0 2 1 128 0 6 0 5 0 6 5 103 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 4 1 4 2 1 128 0 6 0 5 0 6 5 103 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
17 17 17 21 37 22 36 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,399,l),
(552,0,l),
(716,0,l),
(716,708,l),
(535,708,l),
(535,303,l),
(236,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(626,950,l),
(460,950,l),
(402,866,l),
(341,950,l),
(175,950,l),
(343,758,l),
(460,758,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
13 1 6 4 6 1 2 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 3 2 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 3 2 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
10 10 0 0 10 16 10 16 15 14 12 11 0 9 0 9 18 17 18 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(232,324,o),
(251,355,o),
(289,376,o),
(311,376,qs),
(336,376,o),
(368,357,o),
(386,327,o),
(393,292,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,347,o),
(547,444,o),
(518,478,qs),
(492,507,o),
(420,538,o),
(372,538,qs),
(359,538,o),
(321,534,o),
(280,522,o),
(238,498,o),
(220,479,q),
(210,527,l)
);
},
{
closed = 1;
nodes = (
(532,769,l),
(366,769,l),
(308,685,l),
(247,769,l),
(81,769,l),
(249,577,l),
(366,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 7 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 5 7 5 133 8 1 7 0 7 133 0 2 0 1 0 2 1 128 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
6 1 5 7 5 133 8 1 7 0 7 133 0 2 4 1 4 2 1 128 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
29 29 29 35 29 35 18 18 17 21 37 22 36 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(191,950,l),
(191,797,l),
(587,797,l),
(587,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 5 95 0 5 5 44 77 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 4 0 5 4 103 0 3 3 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 43 42 41 40 36 34 26 24 11 9 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(104,769,l),
(104,616,l),
(500,616,l),
(500,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 5 0 4 3 5 4 103 6 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 7 1 2 2 47 2 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(594,853,o),
(594,950,q),
(452,950,l),
(452,938,ls),
(452,910,o),
(419,879,o),
(391,879,qs),
(364,879,o),
(330,911,o),
(330,938,qs),
(330,950,l),
(188,950,l),
(188,852,o),
(297,758,o),
(392,758,qs),
(486,758,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 9 1 4 0 6 4 106 7 1 5 5 44 77 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
7 1 5 6 5 133 0 6 9 1 4 0 6 4 106 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
41 40 1 0 53 52 49 47 44 43 40 55 41 55 36 34 26 24 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(504,672,o),
(504,769,q),
(362,769,l),
(362,757,ls),
(362,729,o),
(329,698,o),
(301,698,qs),
(274,698,o),
(240,730,o),
(240,757,qs),
(240,769,l),
(98,769,l),
(98,671,o),
(207,577,o),
(302,577,qs),
(396,577,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
7 1 5 6 6 5 112 10 1 4 4 6 97 0 6 6 38 77 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
7 1 5 6 5 133 10 1 4 4 6 97 0 6 6 38 77 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 5 133 0 6 10 1 4 3 6 4 106 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
41 40 21 20 1 0 53 52 49 47 44 43 40 55 41 55 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,665,o),
(81,571,o),
(28,437,o),
(28,355,qs),
(28,273,o),
(79,139,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(472,-8,o),
(605,45,o),
(701,142,o),
(753,277,o),
(753,358,qs),
(753,440,o),
(700,573,o),
(605,666,o),
(472,717,o),
(392,717,qs),
(311,717,o)
);
},
{
closed = 1;
nodes = (
(233,458,o),
(276,512,o),
(345,546,o),
(393,546,qs),
(441,546,o),
(508,509,o),
(550,453,o),
(568,384,o),
(568,353,qs),
(568,320,o),
(549,253,o),
(507,198,o),
(442,163,o),
(396,163,qs),
(347,163,o),
(278,196,o),
(234,251,o),
(213,320,o),
(213,356,qs),
(213,390,o)
);
},
{
closed = 1;
nodes = (
(293,950,l),
(220,758,l),
(349,758,l),
(466,950,l)
);
},
{
closed = 1;
nodes = (
(535,950,l),
(415,758,l),
(551,758,l),
(707,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 4 4 5 95 7 1 5 5 44 77 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 6 1 4 0 5 4 103 0 3 3 0 97 8 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 47 46 45 44 43 42 41 40 36 34 26 24 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,351,o),
(391,319,o),
(401,281,o),
(401,265,qs),
(401,245,o),
(391,206,o),
(368,175,o),
(329,156,o),
(301,156,qs),
(272,156,o),
(234,175,o),
(210,205,o),
(200,244,o),
(200,265,qs),
(200,282,o),
(210,320,o),
(233,351,o),
(272,373,o),
(301,373,qs),
(329,373,o)
);
},
{
closed = 1;
nodes = (
(460,27,o),
(533,96,o),
(574,199,o),
(574,266,qs),
(574,329,o),
(531,431,o),
(458,501,o),
(359,538,o),
(301,538,qs),
(244,538,o),
(145,502,o),
(71,432,o),
(27,330,o),
(27,266,qs),
(27,199,o),
(70,97,o),
(144,27,o),
(243,-8,o),
(301,-8,qs),
(361,-8,o)
);
},
{
closed = 1;
nodes = (
(197,769,l),
(124,577,l),
(253,577,l),
(370,769,l)
);
},
{
closed = 1;
nodes = (
(439,769,l),
(319,577,l),
(455,577,l),
(611,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
7 1 5 6 1 4 3 5 4 103 8 1 0 0 3 97 0 3 3 49 77 0 1 1 2 97 9 1 2 2 47 2 78 21 20 1 0 47 46 45 44 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,239,l),
(335,239,l),
(471,0,l),
(677,0,l),
(513,267,l),
(587,295,o),
(650,405,o),
(652,475,qs),
(651,549,o),
(597,641,o),
(515,691,o),
(414,708,o),
(366,708,qs),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(370,540,ls),
(391,540,o),
(429,535,o),
(457,520,o),
(473,494,o),
(473,472,qs),
(473,436,o),
(418,398,o),
(367,398,qs),
(248,398,l)
);
},
{
closed = 1;
nodes = (
(367,950,l),
(235,758,l),
(383,758,l),
(554,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
9 1 4 0 2 1 4 2 103 0 6 6 7 95 0 7 7 44 77 0 5 5 0 95 8 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 7 0 6 0 7 6 103 9 1 4 0 2 1 4 2 103 0 5 5 0 95 8 1 0 0 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
17 16 1 0 30 29 28 27 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,240,ls),
(224,280,o),
(247,328,o),
(286,355,o),
(337,365,o),
(365,365,qs),
(399,365,l),
(399,536,l),
(395,537,o),
(369,538,o),
(356,538,qs),
(338,538,o),
(301,535,o),
(265,523,o),
(229,499,o),
(214,477,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(255,769,l),
(123,577,l),
(271,577,l),
(442,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 0 4 0 5 4 103 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 4 0 5 4 103 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 21 34 52 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,239,l),
(335,239,l),
(471,0,l),
(677,0,l),
(513,267,l),
(587,295,o),
(650,405,o),
(652,475,qs),
(651,549,o),
(597,641,o),
(515,691,o),
(414,708,o),
(366,708,qs),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(370,540,ls),
(391,540,o),
(429,535,o),
(457,520,o),
(473,494,o),
(473,472,qs),
(473,436,o),
(418,398,o),
(367,398,qs),
(248,398,l)
);
},
{
closed = 1;
nodes = (
(570,950,l),
(404,950,l),
(346,866,l),
(285,950,l),
(119,950,l),
(287,758,l),
(404,758,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
30 1 8 6 8 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
11 1 8 6 0 6 8 0 128 10 1 4 0 2 1 4 2 103 7 1 6 6 44 77 0 5 5 0 95 9 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
11 1 8 6 0 6 8 0 128 10 1 4 0 2 1 4 2 103 0 5 5 0 95 9 1 0 0 38 77 7 1 6 6 1 95 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
27 27 17 16 1 0 27 33 27 33 32 31 29 28 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,240,ls),
(224,280,o),
(247,328,o),
(286,355,o),
(337,365,o),
(365,365,qs),
(399,365,l),
(399,536,l),
(395,537,o),
(369,538,o),
(356,538,qs),
(338,538,o),
(301,535,o),
(265,523,o),
(229,499,o),
(214,477,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(460,769,l),
(294,769,l),
(236,685,l),
(175,769,l),
(9,769,l),
(177,577,l),
(294,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 6 4 133 7 1 6 0 6 133 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 4 133 7 1 6 0 6 133 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
20 20 20 26 20 26 18 18 17 21 34 52 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,546,o),
(554,639,o),
(512,668,qs),
(479,691,o),
(394,716,o),
(349,717,qs),
(295,717,o),
(198,699,o),
(154,671,qs),
(115,646,o),
(63,566,o),
(59,506,qs),
(59,504,ls),
(59,445,o),
(97,369,o),
(130,344,qs),
(161,321,o),
(261,287,o),
(318,275,qs),
(374,263,ls),
(408,257,o),
(445,234,o),
(445,212,qs),
(445,195,o),
(428,175,o),
(401,164,o),
(369,160,o),
(354,160,qs),
(304,160,o),
(229,196,o),
(219,239,q),
(37,239,l),
(44,169,o),
(105,72,o),
(149,43,qs),
(194,14,o),
(295,-8,o),
(345,-8,qs),
(397,-8,o),
(498,17,o),
(578,71,o),
(627,158,o),
(627,221,qs),
(625,276,o),
(591,345,o),
(533,389,o),
(456,414,o),
(413,425,qs),
(348,441,ls),
(294,455,o),
(238,479,o),
(238,503,qs),
(238,527,o),
(288,551,o),
(322,551,qs),
(371,551,o),
(431,514,o),
(436,481,q),
(611,481,l)
);
},
{
closed = 1;
nodes = (
(365,950,l),
(233,758,l),
(381,758,l),
(552,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 6 7 95 0 7 7 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
8 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 7 0 6 4 7 6 103 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 62 61 60 59 0 58 0 58 53 51 34 21 47 34 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,374,o),
(312,356,q),
(483,356,l),
(477,405,o),
(436,474,o),
(376,518,o),
(299,538,o),
(257,538,qs),
(220,538,o),
(153,526,o),
(123,511,qs),
(86,492,o),
(35,425,o),
(34,376,qs),
(33,339,o),
(60,279,o),
(91,259,qs),
(118,240,o),
(203,215,o),
(240,207,qs),
(258,203,o),
(288,198,o),
(311,190,o),
(324,177,o),
(324,167,qs),
(324,153,o),
(296,136,o),
(274,136,qs),
(245,136,o),
(204,160,o),
(198,180,q),
(19,180,l),
(27,125,o),
(77,53,o),
(146,9,o),
(230,-8,o),
(273,-8,qs),
(309,-8,o),
(387,9,o),
(450,51,o),
(494,119,o),
(496,170,qs),
(496,208,o),
(471,260,o),
(430,293,o),
(380,310,o),
(356,315,qs),
(326,321,o),
(267,333,o),
(234,341,qs),
(215,346,o),
(203,361,o),
(203,368,qs),
(203,380,o),
(229,394,o),
(248,394,qs),
(274,394,o)
);
},
{
closed = 1;
nodes = (
(280,769,l),
(148,577,l),
(296,577,l),
(467,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
3 1 5 0 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 7 0 6 4 7 6 103 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 60 59 58 57 54 53 49 47 29 27 25 24 20 18 0 56 1 56 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,546,o),
(554,639,o),
(512,668,qs),
(479,691,o),
(394,716,o),
(349,717,qs),
(295,717,o),
(198,699,o),
(154,671,qs),
(115,646,o),
(63,566,o),
(59,506,qs),
(59,504,ls),
(59,445,o),
(97,369,o),
(130,344,qs),
(161,321,o),
(261,287,o),
(318,275,qs),
(374,263,ls),
(408,257,o),
(445,234,o),
(445,212,qs),
(445,195,o),
(428,175,o),
(401,164,o),
(369,160,o),
(354,160,qs),
(304,160,o),
(229,196,o),
(219,239,q),
(37,239,l),
(44,169,o),
(105,72,o),
(149,43,qs),
(194,14,o),
(295,-8,o),
(345,-8,qs),
(397,-8,o),
(498,17,o),
(578,71,o),
(627,158,o),
(627,221,qs),
(625,276,o),
(591,345,o),
(533,389,o),
(456,414,o),
(413,425,qs),
(348,441,ls),
(294,455,o),
(238,479,o),
(238,503,qs),
(238,527,o),
(288,551,o),
(322,551,qs),
(371,551,o),
(431,514,o),
(436,481,q),
(611,481,l)
);
},
{
closed = 1;
nodes = (
(117,758,l),
(283,758,l),
(341,842,l),
(402,758,l),
(568,758,l),
(399,950,l),
(283,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
62 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 6 8 4 8 6 4 128 9 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 10 1 8 8 44 77 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 1 8 6 8 133 7 1 6 4 6 133 9 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
59 59 0 0 59 65 59 65 64 63 61 60 0 58 0 58 53 51 34 21 47 34 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,374,o),
(312,356,q),
(483,356,l),
(477,405,o),
(436,474,o),
(376,518,o),
(299,538,o),
(257,538,qs),
(220,538,o),
(153,526,o),
(123,511,qs),
(86,492,o),
(35,425,o),
(34,376,qs),
(33,339,o),
(60,279,o),
(91,259,qs),
(118,240,o),
(203,215,o),
(240,207,qs),
(258,203,o),
(288,198,o),
(311,190,o),
(324,177,o),
(324,167,qs),
(324,153,o),
(296,136,o),
(274,136,qs),
(245,136,o),
(204,160,o),
(198,180,q),
(19,180,l),
(27,125,o),
(77,53,o),
(146,9,o),
(230,-8,o),
(273,-8,qs),
(309,-8,o),
(387,9,o),
(450,51,o),
(494,119,o),
(496,170,qs),
(496,208,o),
(471,260,o),
(430,293,o),
(380,310,o),
(356,315,qs),
(326,321,o),
(267,333,o),
(234,341,qs),
(215,346,o),
(203,361,o),
(203,368,qs),
(203,380,o),
(229,394,o),
(248,394,qs),
(274,394,o)
);
},
{
closed = 1;
nodes = (
(37,577,l),
(203,577,l),
(261,661,l),
(322,577,l),
(488,577,l),
(319,769,l),
(203,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
60 1 6 8 3 1 5 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
10 1 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 114 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 1 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
57 57 1 0 57 63 57 63 62 61 59 58 54 53 49 47 29 27 25 24 20 18 0 56 1 56 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,546,o),
(554,639,o),
(512,668,qs),
(479,691,o),
(394,716,o),
(349,717,qs),
(295,717,o),
(198,699,o),
(154,671,qs),
(115,646,o),
(63,566,o),
(59,506,qs),
(59,504,ls),
(59,445,o),
(97,369,o),
(130,344,qs),
(161,321,o),
(261,287,o),
(318,275,qs),
(374,263,ls),
(408,257,o),
(445,234,o),
(445,212,qs),
(445,195,o),
(428,175,o),
(401,164,o),
(369,160,o),
(354,160,qs),
(304,160,o),
(229,196,o),
(219,239,q),
(37,239,l),
(44,169,o),
(105,72,o),
(149,43,qs),
(194,14,o),
(295,-8,o),
(345,-8,qs),
(397,-8,o),
(498,17,o),
(578,71,o),
(627,158,o),
(627,221,qs),
(625,276,o),
(591,345,o),
(533,389,o),
(456,414,o),
(413,425,qs),
(348,441,ls),
(294,455,o),
(238,479,o),
(238,503,qs),
(238,527,o),
(288,551,o),
(322,551,qs),
(371,551,o),
(431,514,o),
(436,481,q),
(611,481,l)
);
},
{
closed = 1;
nodes = (
(568,950,l),
(402,950,l),
(344,866,l),
(283,950,l),
(117,950,l),
(285,758,l),
(402,758,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
62 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 0 0 0 4 97 0 4 4 46 77 9 1 5 5 6 95 7 1 6 6 44 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 9 1 5 2 6 5 103 0 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
59 59 0 0 59 65 59 65 64 63 61 60 0 58 0 58 53 51 34 21 47 34 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,374,o),
(312,356,q),
(483,356,l),
(477,405,o),
(436,474,o),
(376,518,o),
(299,538,o),
(257,538,qs),
(220,538,o),
(153,526,o),
(123,511,qs),
(86,492,o),
(35,425,o),
(34,376,qs),
(33,339,o),
(60,279,o),
(91,259,qs),
(118,240,o),
(203,215,o),
(240,207,qs),
(258,203,o),
(288,198,o),
(311,190,o),
(324,177,o),
(324,167,qs),
(324,153,o),
(296,136,o),
(274,136,qs),
(245,136,o),
(204,160,o),
(198,180,q),
(19,180,l),
(27,125,o),
(77,53,o),
(146,9,o),
(230,-8,o),
(273,-8,qs),
(309,-8,o),
(387,9,o),
(450,51,o),
(494,119,o),
(496,170,qs),
(496,208,o),
(471,260,o),
(430,293,o),
(380,310,o),
(356,315,qs),
(326,321,o),
(267,333,o),
(234,341,qs),
(215,346,o),
(203,361,o),
(203,368,qs),
(203,380,o),
(229,394,o),
(248,394,qs),
(274,394,o)
);
},
{
closed = 1;
nodes = (
(497,769,l),
(331,769,l),
(273,685,l),
(212,769,l),
(46,769,l),
(214,577,l),
(331,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
60 1 8 6 3 1 5 0 2 76 10 1 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 57 57 1 0 57 63 57 63 62 61 59 58 54 53 49 47 29 27 25 24 20 18 0 56 1 56 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcaron;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,0,l),
(396,0,l),
(396,540,l),
(607,540,l),
(607,708,l),
(5,708,l),
(5,540,l),
(215,540,l)
);
},
{
closed = 1;
nodes = (
(532,950,l),
(366,950,l),
(308,866,l),
(247,950,l),
(81,950,l),
(249,758,l),
(366,758,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 3 2 1 1 0 95 0 0 0 38 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
8 8 0 0 8 14 8 14 13 12 10 9 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(403,907,o),
(372,931,o),
(333,950,o),
(306,950,qs),
(269,950,o),
(217,924,o),
(185,881,o),
(170,823,o),
(170,791,qs),
(170,783,o),
(171,770,o),
(172,763,q),
(287,763,l),
(285,770,o),
(285,792,o),
(291,812,o),
(304,826,o),
(315,826,qs),
(327,826,o),
(356,805,o),
(391,779,o),
(435,758,o),
(463,758,qs),
(499,758,o),
(546,785,o),
(574,828,o),
(585,885,o),
(585,915,qs),
(585,923,o),
(584,936,o),
(583,943,q),
(469,943,l),
(470,935,o),
(470,916,o),
(465,900,o),
(453,888,o),
(442,888,qs),
(429,888,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
11 1 4 5 7 5 4 114 0 7 6 5 7 89 9 1 5 8 1 6 1 5 6 105 3 1 1 1 38 77 0 2 2 0 98 10 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
11 1 4 5 7 5 4 7 128 0 7 6 5 7 89 9 1 5 8 1 6 1 5 6 105 3 1 1 1 38 77 0 2 2 0 98 10 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
11 1 4 5 7 5 4 7 128 0 9 0 7 6 9 7 105 0 5 8 1 6 1 5 6 105 3 1 1 1 38 77 0 2 2 0 98 10 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
11 1 4 5 7 5 4 7 128 0 8 7 6 7 8 6 128 0 9 0 7 8 9 7 105 0 5 0 6 1 5 6 105 3 1 1 1 38 77 0 2 2 0 98 10 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
23 22 1 0 56 54 47 46 42 40 37 35 28 27 22 59 23 59 18 17 12 10 5 4 0 21 1 21 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(329,726,o),
(298,750,o),
(259,769,o),
(232,769,qs),
(195,769,o),
(143,743,o),
(111,700,o),
(96,642,o),
(96,610,qs),
(96,602,o),
(97,589,o),
(98,582,q),
(213,582,l),
(211,589,o),
(211,611,o),
(217,631,o),
(230,645,o),
(241,645,qs),
(253,645,o),
(282,624,o),
(317,598,o),
(361,577,o),
(389,577,qs),
(425,577,o),
(472,604,o),
(500,647,o),
(511,704,o),
(511,734,qs),
(511,742,o),
(510,755,o),
(509,762,q),
(395,762,l),
(396,754,o),
(396,735,o),
(391,719,o),
(379,707,o),
(368,707,qs),
(355,707,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
11 1 4 4 38 77 0 7 7 5 97 9 1 5 5 48 77 8 1 6 6 5 97 9 1 5 5 48 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 6 5 7 89 9 1 5 8 1 6 1 5 6 105 11 1 4 4 38 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 9 0 7 6 9 7 105 0 5 8 1 6 1 5 6 105 11 1 4 4 38 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 8 7 6 7 8 6 128 0 9 0 7 8 9 7 105 0 5 0 6 1 5 6 105 11 1 4 4 38 77 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
27 26 1 0 60 58 51 50 46 44 41 39 32 31 26 63 27 63 20 19 14 12 7 6 0 25 1 25 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(175,950,l),
(175,797,l),
(571,797,l),
(571,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 5 95 0 5 5 44 77 3 1 1 1 38 77 0 2 2 0 98 6 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 4 1 5 4 103 3 1 1 1 38 77 0 2 2 0 98 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 25 24 23 22 18 17 12 10 5 4 0 21 1 21 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(97,769,l),
(97,616,l),
(493,616,l),
(493,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 5 0 4 1 5 4 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 1 0 29 28 27 26 20 19 14 12 7 6 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(574,853,o),
(574,950,q),
(432,950,l),
(432,938,ls),
(432,910,o),
(399,879,o),
(371,879,qs),
(344,879,o),
(310,911,o),
(310,938,qs),
(310,950,l),
(168,950,l),
(168,852,o),
(277,758,o),
(372,758,qs),
(466,758,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 6 9 1 4 1 6 4 106 7 1 5 5 44 77 3 1 1 1 38 77 0 2 2 0 98 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 6 5 133 0 6 9 1 4 1 6 4 106 3 1 1 1 38 77 0 2 2 0 98 8 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
23 22 1 0 35 34 31 29 26 25 22 37 23 37 18 17 12 10 5 4 0 21 1 21 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(500,672,o),
(500,769,q),
(358,769,l),
(358,757,ls),
(358,729,o),
(325,698,o),
(297,698,qs),
(270,698,o),
(236,730,o),
(236,757,qs),
(236,769,l),
(94,769,l),
(94,671,o),
(203,577,o),
(298,577,qs),
(392,577,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 5 6 6 5 112 9 1 4 4 6 97 0 6 6 38 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 9 1 4 4 6 97 0 6 6 38 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 6 5 133 0 6 9 1 4 1 6 4 106 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
27 26 1 0 39 38 35 33 30 29 26 41 27 41 20 19 14 12 7 6 0 25 1 25 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(296,949,o),
(260,916,o),
(239,869,o),
(239,842,qs),
(239,814,o),
(259,768,o),
(294,735,o),
(343,717,o),
(372,717,qs),
(431,717,o),
(505,786,o),
(505,842,qs),
(505,870,o),
(485,916,o),
(449,949,o),
(400,967,o),
(372,967,qs),
(344,967,o)
);
},
{
closed = 1;
nodes = (
(412,858,o),
(412,842,qs),
(412,826,o),
(390,805,o),
(372,805,qs),
(354,805,o),
(333,826,o),
(333,842,qs),
(333,858,o),
(356,879,o),
(372,879,qs),
(389,879,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 7 0 5 1 7 5 105 10 1 6 6 4 97 9 1 4 4 44 77 3 1 1 1 38 77 0 2 2 0 98 8 1 0 0 47 0 78 41 40 23 22 1 0 47 45 40 51 41 51 31 29 22 39 23 39 18 17 12 10 5 4 0 21 1 21 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(222,808,o),
(186,775,o),
(165,728,o),
(165,701,qs),
(165,673,o),
(185,627,o),
(220,594,o),
(269,576,o),
(298,576,qs),
(357,576,o),
(431,645,o),
(431,701,qs),
(431,729,o),
(411,775,o),
(375,808,o),
(326,826,o),
(298,826,qs),
(270,826,o)
);
},
{
closed = 1;
nodes = (
(338,717,o),
(338,701,qs),
(338,685,o),
(316,664,o),
(298,664,qs),
(280,664,o),
(259,685,o),
(259,701,qs),
(259,717,o),
(282,738,o),
(298,738,qs),
(315,738,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
9 1 4 10 1 6 7 4 6 105 0 7 0 5 1 7 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 45 44 27 26 1 0 51 49 44 55 45 55 35 33 26 43 27 43 20 19 14 12 7 6 0 25 1 25 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(214,-8,o),
(372,-8,qs),
(533,-8,o)
);
},
{
closed = 1;
nodes = (
(257,950,l),
(184,758,l),
(313,758,l),
(430,950,l)
);
},
{
closed = 1;
nodes = (
(499,950,l),
(379,758,l),
(515,758,l),
(671,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 4 5 95 7 1 5 5 44 77 3 1 1 1 38 77 0 2 2 0 98 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
7 1 5 6 1 4 1 5 4 103 3 1 1 1 38 77 0 2 2 0 98 8 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 29 28 27 26 25 24 23 22 18 17 12 10 5 4 0 21 1 21 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(237,-8,o),
(295,-8,qs),
(354,-8,o),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o)
);
},
{
closed = 1;
nodes = (
(185,769,l),
(112,577,l),
(241,577,l),
(358,769,l)
);
},
{
closed = 1;
nodes = (
(427,769,l),
(307,577,l),
(443,577,l),
(599,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
7 1 5 6 1 4 1 5 4 103 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 1 0 33 32 31 30 29 28 27 26 20 19 14 12 7 6 0 25 1 25 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,-197,o),
(412,-197,qs),
(434,-197,o),
(479,-190,o),
(498,-179,q),
(482,-83,l),
(473,-87,o),
(454,-92,o),
(443,-92,qs),
(424,-92,o),
(399,-71,o),
(400,-51,qs),
(401,-31,o),
(416,-18,qs),
(427,-9,o),
(441,-3,q),
(550,11,o),
(608,77,qs),
(683,162,o),
(683,326,qs),
(683,708,l),
(502,708,l),
(502,315,ls),
(502,287,o),
(492,232,o),
(464,188,o),
(414,161,o),
(374,161,qs),
(336,161,o),
(285,187,o),
(255,231,o),
(243,286,o),
(243,315,qs),
(243,708,l),
(62,708,l),
(62,326,ls),
(62,161,o),
(138,76,qs),
(203,4,o),
(328,-6,q),
(316,-16,o),
(307,-29,qs),
(287,-57,o),
(287,-89,qs),
(287,-140,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
38 4 2 3 1 39 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 38 77 0 3 3 4 98 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 102 2 1 0 0 38 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
37 43 21 37 25 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,-197,o),
(329,-197,qs),
(351,-197,o),
(396,-190,o),
(415,-179,q),
(399,-83,l),
(390,-87,o),
(371,-92,o),
(360,-92,qs),
(341,-92,o),
(316,-71,o),
(317,-51,qs),
(318,-31,o),
(333,-18,qs),
(343,-9,o),
(356,-4,q),
(379,0,o),
(400,5,qs),
(446,19,o),
(510,78,o),
(545,170,o),
(545,234,qs),
(545,527,l),
(369,527,l),
(369,248,ls),
(369,233,o),
(366,199,o),
(352,171,o),
(323,153,o),
(297,153,qs),
(276,153,o),
(247,168,o),
(230,194,o),
(222,229,o),
(222,248,qs),
(222,527,l),
(45,527,l),
(45,234,ls),
(45,170,o),
(82,78,o),
(145,19,o),
(191,5,qs),
(216,-2,o),
(246,-5,q),
(233,-15,o),
(224,-29,qs),
(204,-57,o),
(204,-89,qs),
(204,-140,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
42 4 2 3 1 43 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 3 0 1 3 128 2 1 0 0 41 77 0 3 3 4 98 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 3 0 1 3 128 0 3 0 4 3 4 102 2 1 0 0 41 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
37 45 21 37 27 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 591;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,476,l),
(618,0,l),
(860,0,l),
(1018,708,l),
(828,708,l),
(734,214,l),
(631,708,l),
(405,708,l),
(300,214,l),
(201,708,l),
(0,708,l),
(161,0,l),
(413,0,l)
);
},
{
closed = 1;
nodes = (
(290,758,l),
(456,758,l),
(514,842,l),
(575,758,l),
(741,758,l),
(572,950,l),
(456,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
16 1 5 7 11 6 3 3 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 7 0 7 5 0 128 9 1 7 7 44 77 2 1 2 0 0 38 77 8 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
9 1 7 5 7 133 6 1 5 0 5 133 2 1 2 0 0 38 77 8 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
13 13 0 0 13 19 13 19 18 17 15 14 0 12 0 12 17 18 18 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1018;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,309,l),
(530,0,l),
(721,0,l),
(888,527,l),
(701,527,l),
(624,212,l),
(538,527,l),
(352,527,l),
(265,212,l),
(187,527,l),
(-5,527,l),
(162,0,l),
(354,0,l)
);
},
{
closed = 1;
nodes = (
(217,577,l),
(383,577,l),
(441,661,l),
(502,577,l),
(668,577,l),
(499,769,l),
(383,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
16 1 5 7 11 6 3 3 3 0 2 76 9 1 7 5 7 133 6 1 5 0 5 133 2 1 2 0 0 41 77 8 4 2 3 3 39 3 78 13 13 0 0 13 19 13 19 18 17 15 14 0 12 0 12 17 18 18 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,708,l),
(0,708,l),
(272,263,l),
(272,0,l),
(453,0,l),
(453,264,l),
(727,708,l),
(522,708,l),
(363,427,l)
);
},
{
closed = 1;
nodes = (
(135,758,l),
(301,758,l),
(359,842,l),
(420,758,l),
(586,758,l),
(417,950,l),
(301,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
12 1 3 5 8 5 2 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
4 1 3 5 0 5 3 0 128 6 1 5 5 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
4 1 3 5 0 5 3 0 128 2 1 0 0 38 77 6 1 5 5 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
9 9 9 15 9 15 18 19 18 18 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-83,o),
(264,-83,qs),
(207,-83,o),
(128,-59,o),
(101,-39,q),
(47,-182,l),
(102,-217,o),
(220,-248,o),
(281,-248,qs),
(351,-248,o),
(478,-205,o),
(523,-147,qs),
(542,-122,o),
(566,-58,o),
(578,14,o),
(582,90,o),
(582,126,qs),
(582,527,l),
(405,527,l),
(405,278,ls),
(405,258,o),
(403,214,o),
(386,176,o),
(350,152,o),
(318,152,qs),
(288,152,o),
(253,176,o),
(235,211,o),
(230,253,o),
(230,271,qs),
(230,527,l),
(54,527,l),
(54,239,ls),
(54,177,o),
(82,83,o),
(113,52,qs),
(139,25,o),
(214,-7,o),
(265,-8,qs),
(302,-8,o),
(381,13,o),
(407,42,q),
(408,-23,o)
);
},
{
closed = 1;
nodes = (
(92,577,l),
(258,577,l),
(316,661,l),
(377,577,l),
(543,577,l),
(374,769,l),
(258,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
46 1 6 8 0 1 0 2 37 1 5 0 36 1 4 5 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
9 1 8 6 8 133 7 1 6 1 6 133 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 1 8 6 8 133 7 1 6 1 6 133 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
43 43 43 49 43 49 18 19 37 40 21 37 22 34 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,708,l),
(0,708,l),
(272,263,l),
(272,0,l),
(453,0,l),
(453,264,l),
(727,708,l),
(522,708,l),
(363,427,l)
);
},
{
closed = 1;
nodes = (
(182,931,o),
(156,907,o),
(140,873,o),
(140,851,qs),
(140,804,o),
(197,757,o),
(235,757,qs),
(273,757,o),
(330,804,o),
(330,851,qs),
(330,895,o),
(272,944,o),
(235,944,qs),
(216,944,o)
);
},
{
closed = 1;
nodes = (
(440,931,o),
(413,907,o),
(397,873,o),
(397,851,qs),
(397,804,o),
(455,757,o),
(492,757,qs),
(531,757,o),
(587,804,o),
(587,851,qs),
(587,895,o),
(530,944,o),
(492,944,qs),
(474,944,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 5 2 3 1 0 1 76 8 5 7 3 3 6 1 4 0 3 4 105 2 1 0 0 38 77 0 1 1 39 1 78 24 23 10 9 30 28 23 36 24 36 16 14 9 22 10 22 18 18 16 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,142,l),
(24,0,l),
(601,0,l),
(601,167,l),
(262,167,l),
(607,567,l),
(607,708,l),
(33,708,l),
(33,540,l),
(370,540,l)
);
},
{
closed = 1;
nodes = (
(338,950,l),
(206,758,l),
(354,758,l),
(525,950,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 3 0 8 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 5 95 0 5 5 44 77 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 4 0 5 4 103 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,527,l),
(27,369,l),
(250,369,l),
(27,128,l),
(27,0,l),
(478,0,l),
(478,159,l),
(255,159,l),
(478,400,l),
(478,527,l)
);
},
{
closed = 1;
nodes = (
(285,769,l),
(153,577,l),
(301,577,l),
(472,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 1 2 3 5 1 1 0 2 76 0 5 0 4 3 5 4 103 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 17 17 18 17 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,142,l),
(24,0,l),
(601,0,l),
(601,167,l),
(262,167,l),
(607,567,l),
(607,708,l),
(33,708,l),
(33,540,l),
(370,540,l)
);
},
{
closed = 1;
nodes = (
(213,905,o),
(213,859,qs),
(213,812,o),
(272,754,o),
(320,754,qs),
(368,754,o),
(427,811,o),
(427,859,qs),
(427,907,o),
(365,964,o),
(320,964,qs),
(275,964,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
3 1 3 0 8 1 2 1 2 76 0 5 5 4 97 7 1 4 4 44 77 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 11 10 0 0 17 15 10 21 11 21 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,527,l),
(27,369,l),
(250,369,l),
(27,128,l),
(27,0,l),
(478,0,l),
(478,159,l),
(255,159,l),
(478,400,l),
(478,527,l)
);
},
{
closed = 1;
nodes = (
(144,724,o),
(144,678,qs),
(144,631,o),
(203,573,o),
(251,573,qs),
(299,573,o),
(358,630,o),
(358,678,qs),
(358,726,o),
(296,783,o),
(251,783,qs),
(206,783,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 2 3 5 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 97 6 1 4 4 48 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 0 5 3 4 5 105 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
11 10 17 15 10 21 11 21 17 18 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,142,l),
(24,0,l),
(601,0,l),
(601,167,l),
(262,167,l),
(607,567,l),
(607,708,l),
(33,708,l),
(33,540,l),
(370,540,l)
);
},
{
closed = 1;
nodes = (
(548,950,l),
(382,950,l),
(324,866,l),
(263,950,l),
(97,950,l),
(265,758,l),
(382,758,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
13 1 6 4 3 1 3 0 8 1 2 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 0 4 6 0 128 5 1 4 4 44 77 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
5 1 4 6 4 133 8 1 6 0 6 133 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
10 10 0 0 10 16 10 16 15 14 12 11 0 9 0 9 17 18 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,527,l),
(27,369,l),
(250,369,l),
(27,128,l),
(27,0,l),
(478,0,l),
(478,159,l),
(255,159,l),
(478,400,l),
(478,527,l)
);
},
{
closed = 1;
nodes = (
(485,769,l),
(319,769,l),
(261,685,l),
(200,769,l),
(34,769,l),
(202,577,l),
(319,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
13 1 6 4 0 1 2 3 5 1 1 0 3 76 5 1 4 6 4 133 7 1 6 3 6 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 10 10 10 16 10 16 18 18 17 18 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = OE;
kernLeft = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,671,l),
(531,694,o),
(446,717,o),
(392,717,qs),
(311,717,o),
(177,665,o),
(81,570,o),
(28,436,o),
(28,355,qs),
(28,272,o),
(80,138,o),
(174,44,o),
(308,-8,o),
(391,-8,qs),
(446,-8,o),
(531,16,o),
(563,39,q),
(563,0,l),
(1097,0,l),
(1097,167,l),
(744,167,l),
(744,272,l),
(1035,272,l),
(1035,432,l),
(744,432,l),
(744,540,l),
(1097,540,l),
(1097,708,l),
(563,708,l)
);
},
{
closed = 1;
nodes = (
(237,466,o),
(284,517,o),
(351,546,o),
(393,546,qs),
(435,546,o),
(499,515,o),
(543,463,o),
(565,392,o),
(565,353,qs),
(565,314,o),
(543,245,o),
(500,193,o),
(437,163,o),
(396,163,qs),
(352,163,o),
(284,192,o),
(238,243,o),
(213,314,o),
(213,356,qs),
(213,397,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
27 1 0 6 11 1 4 3 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
27 1 0 7 11 1 4 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
27 1 9 7 11 1 4 3 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 2 3 1 2 103 9 1 0 0 6 97 10 7 2 6 6 46 77 8 1 3 3 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 9 1 0 0 6 97 0 6 6 46 77 9 1 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 97 5 1 4 4 39 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 1 0 2 3 1 2 103 9 1 0 0 6 97 0 6 6 46 77 9 1 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 95 0 4 4 39 77 8 1 3 3 5 97 0 5 5 47 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 1 0 2 3 1 2 103 0 9 9 6 97 0 6 6 46 77 0 0 0 7 95 10 1 7 7 38 77 8 1 3 3 4 95 0 4 4 39 77 8 1 3 3 5 97 0 5 5 47 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 45 43 35 33 0 28 0 28 40 35 17 17 17 17 17 11 8 29 
CALL[ ]	/* CallFunction */";
};
width = 1125;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,50,q),
(514,22,o),
(604,-8,o),
(659,-8,qs),
(705,-8,o),
(788,15,o),
(855,61,o),
(901,131,o),
(912,178,q),
(739,178,l),
(731,157,o),
(681,139,o),
(661,140,qs),
(625,141,o),
(569,174,o),
(565,213,q),
(905,213,l),
(912,245,o),
(912,280,qs),
(912,339,o),
(877,434,o),
(811,502,o),
(717,538,o),
(658,538,qs),
(604,538,o),
(514,505,o),
(479,476,q),
(445,506,o),
(355,538,o),
(301,538,qs),
(241,538,o),
(140,499,o),
(67,427,o),
(27,327,o),
(27,266,qs),
(27,204,o),
(66,103,o),
(138,31,o),
(239,-8,o),
(301,-8,qs),
(413,-8,o)
);
},
{
closed = 1;
nodes = (
(706,390,o),
(731,372,o),
(746,346,o),
(746,328,q),
(568,328,l),
(568,346,o),
(585,372,o),
(611,389,o),
(643,398,o),
(658,398,qs),
(674,398,o)
);
},
{
closed = 1;
nodes = (
(401,310,o),
(401,265,qs),
(401,217,o),
(352,156,o),
(301,156,qs),
(250,156,o),
(200,216,o),
(200,265,qs),
(200,311,o),
(253,373,o),
(301,373,qs),
(349,373,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
13 1 7 1 39 1 0 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 3 4 3 5 4 128 0 8 0 3 5 8 3 103 13 9 12 3 7 7 1 97 2 1 1 1 49 77 10 1 4 4 0 97 6 11 2 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 5 3 4 3 5 4 128 0 8 0 3 5 8 3 103 12 1 7 7 1 97 2 1 1 1 49 77 13 1 9 9 1 97 2 1 1 1 49 77 10 1 4 4 0 97 6 11 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 5 3 10 3 5 10 128 0 8 0 3 5 8 3 103 12 1 7 7 1 97 2 1 1 1 49 77 13 1 9 9 1 97 2 1 1 1 49 77 0 10 10 0 97 6 11 2 0 0 47 77 0 4 4 0 97 6 11 2 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
53 52 42 41 1 0 59 57 52 63 53 63 47 46 41 51 42 51 37 35 31 30 28 26 24 23 17 15 11 9 0 40 1 40 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 939;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,399,l),
(539,17,l),
(539,-7,ls),
(539,-34,o),
(517,-61,o),
(487,-61,qs),
(446,-61,l),
(446,-220,l),
(538,-220,ls),
(634,-220,o),
(716,-125,o),
(716,-30,qs),
(716,708,l),
(535,708,l),
(535,303,l),
(236,708,l),
(67,708,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
15 14 1 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 4 2 0 0 38 77 0 3 3 39 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 0 1 2 1 100 5 4 2 0 0 38 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 18 0 18 21 33 35 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,528,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,292,o),
(234,329,o),
(256,358,o),
(288,376,o),
(311,376,qs),
(333,376,o),
(365,360,o),
(384,332,o),
(393,296,o),
(393,276,qs),
(393,-7,ls),
(393,-34,o),
(371,-61,o),
(341,-61,qs),
(300,-61,l),
(300,-220,l),
(392,-220,ls),
(488,-220,o),
(570,-125,o),
(570,-30,qs),
(570,291,ls),
(570,341,o),
(551,431,o),
(505,498,o),
(429,538,o),
(372,538,qs),
(329,538,o),
(250,511,o),
(220,479,q),
(210,528,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 3 0 97 5 1 0 0 49 77 0 4 4 39 77 0 2 2 1 95 0 1 1 43 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 1 2 1 99 0 3 3 0 97 5 1 0 0 49 77 0 4 4 39 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 0 1 2 1 99 0 5 5 41 77 0 3 3 0 97 0 0 0 49 77 0 4 4 39 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 21 39 33 39 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(505,482,l),
(505,403,l),
(248,403,l),
(248,482,l)
);
},
{
closed = 1;
nodes = (
(248,708,l),
(67,708,l),
(67,629,l),
(2,629,l),
(2,482,l),
(67,482,l),
(67,0,l),
(248,0,l),
(248,237,l),
(505,237,l),
(505,0,l),
(686,0,l),
(686,482,l),
(751,482,l),
(751,629,l),
(686,629,l),
(686,708,l),
(505,708,l),
(505,629,l),
(248,629,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
12 11 9 3 3 8 4 2 1 0 3 1 103 0 0 0 6 5 0 6 103 10 1 2 2 38 77 7 1 5 5 39 5 78 4 4 4 23 4 23 22 21 20 19 17 17 17 17 17 17 18 17 16 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,552,l),
(321,659,l),
(224,659,l),
(224,708,l),
(47,708,l),
(47,659,l),
(-12,659,l),
(-12,552,l),
(47,552,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(227,306,qs),
(230,324,o),
(240,340,qs),
(248,355,o),
(267,366,qs),
(284,376,o),
(308,376,qs),
(334,376,o),
(350,366,qs),
(365,358,o),
(376,342,qs),
(386,325,o),
(389,309,qs),
(393,294,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,345,o),
(559,395,qs),
(547,445,o),
(518,478,qs),
(492,507,o),
(458,522,qs),
(425,538,o),
(375,538,qs),
(369,538,o),
(354,537,o),
(346,536,qs),
(338,535,o),
(318,532,o),
(307,528,qs),
(284,522,o),
(263,510,qs),
(241,497,o),
(224,479,q),
(224,552,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 2 0 1 76 0 2 0 1 0 2 1 128 7 1 5 8 1 4 0 5 4 103 0 6 6 38 77 0 0 0 49 77 3 1 1 1 39 1 78 17 17 17 17 17 24 40 24 56 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(392,400,l),
(316,532,l),
(248,493,l),
(248,708,l),
(67,708,l),
(67,389,l),
(-50,321,l),
(26,189,l),
(67,212,l),
(67,0,l),
(587,0,l),
(587,167,l),
(248,167,l),
(248,317,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
13 12 11 10 7 6 5 4 8 0 2 1 76 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 21 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,393,l),
(287,526,l),
(224,490,l),
(224,708,l),
(47,708,l),
(47,387,l),
(-79,314,l),
(-3,182,l),
(47,211,l),
(47,0,l),
(224,0,l),
(224,313,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 10 9 8 5 4 3 2 8 0 1 1 76 0 1 1 38 77 0 0 0 39 0 78 21 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,346,l),
(100,346,l),
(100,194,l),
(215,194,l),
(215,0,l),
(396,0,l),
(396,194,l),
(511,194,l),
(511,346,l),
(396,346,l),
(396,540,l),
(607,540,l),
(607,708,l),
(5,708,l),
(5,540,l),
(215,540,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
6 1 2 5 1 3 4 2 3 103 8 7 2 1 1 0 95 0 0 0 38 77 0 4 4 39 4 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,527,l),
(257,527,l),
(257,658,l),
(80,658,l),
(80,527,l),
(7,527,l),
(7,374,l),
(80,374,l),
(80,327,l),
(7,327,l),
(7,210,l),
(80,210,l),
(80,180,ls),
(80,160,o),
(85,119,o),
(97,82,o),
(118,48,o),
(135,35,qs),
(164,12,o),
(243,0,o),
(280,0,qs),
(354,0,l),
(354,159,l),
(301,159,ls),
(268,159,o),
(261,174,qs),
(258,181,o),
(257,197,o),
(257,210,q),
(354,210,l),
(354,327,l),
(257,327,l),
(257,374,l),
(354,374,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 8 7 8 133 5 1 0 4 1 1 2 0 1 103 11 10 2 6 6 7 95 9 1 7 7 41 77 0 2 2 3 96 0 3 3 39 3 78 0 0 0 33 0 33 32 31 17 17 17 17 24 33 36 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = uni0136;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,0,l),
(702,0,l),
(494,369,l),
(704,708,l),
(498,708,l),
(345,436,l),
(248,436,l),
(248,708,l),
(67,708,l),
(67,0,l),
(248,0,l),
(248,269,l),
(349,269,l)
);
},
{
closed = 1;
nodes = (
(342,-288,o),
(393,-258,o),
(432,-215,o),
(456,-160,o),
(457,-128,qs),
(458,-88,o),
(412,-32,o),
(370,-32,qs),
(337,-31,o),
(289,-70,o),
(289,-106,qs),
(290,-139,o),
(332,-174,o),
(358,-175,q),
(355,-183,o),
(335,-202,o),
(311,-221,o),
(287,-236,o),
(277,-240,q),
(316,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 1 5 2 1 76 32 1 6 73 0 2 8 1 5 0 2 5 103 0 7 0 6 7 6 101 3 1 1 1 38 77 4 1 0 0 39 0 78 0 0 25 23 19 18 0 12 0 12 18 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,0,l),
(598,0,l),
(422,276,l),
(585,527,l),
(387,527,l),
(277,341,l),
(224,341,l),
(224,708,l),
(47,708,l),
(47,0,l),
(224,0,l),
(224,183,l),
(280,183,l)
);
},
{
closed = 1;
nodes = (
(282,-288,o),
(333,-258,o),
(372,-215,o),
(396,-160,o),
(397,-128,qs),
(398,-88,o),
(352,-32,o),
(310,-32,qs),
(277,-31,o),
(229,-70,o),
(229,-106,qs),
(230,-139,o),
(272,-174,o),
(298,-175,q),
(295,-183,o),
(275,-202,o),
(251,-221,o),
(227,-236,o),
(217,-240,q),
(256,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
9 1 5 2 1 76 32 1 6 73 0 2 8 1 5 0 2 5 103 0 7 0 6 7 6 101 0 1 1 38 77 0 3 3 41 77 4 1 0 0 39 0 78 0 0 25 23 19 18 0 12 0 12 18 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(587,0,l),
(587,167,l),
(248,167,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(315,-288,o),
(366,-258,o),
(405,-215,o),
(429,-160,o),
(430,-128,qs),
(431,-88,o),
(385,-32,o),
(343,-32,qs),
(310,-31,o),
(262,-70,o),
(262,-106,qs),
(263,-139,o),
(305,-174,o),
(331,-175,q),
(328,-183,o),
(308,-202,o),
(284,-221,o),
(260,-236,o),
(250,-240,q),
(289,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
25 1 3 73 0 4 0 3 4 3 101 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 36 22 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,0,l),
(224,0,l),
(224,708,l)
);
},
{
closed = 1;
nodes = (
(105,-288,o),
(156,-258,o),
(195,-215,o),
(219,-160,o),
(220,-128,qs),
(221,-88,o),
(175,-32,o),
(133,-32,qs),
(100,-31,o),
(52,-70,o),
(52,-106,qs),
(53,-139,o),
(95,-174,o),
(121,-175,q),
(118,-183,o),
(98,-202,o),
(74,-221,o),
(50,-236,o),
(40,-240,q),
(79,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
23 1 2 73 0 3 0 2 3 2 101 0 1 1 38 77 0 0 0 39 0 78 36 22 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 272;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = uni0122;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,457,o),
(273,512,o),
(338,546,o),
(386,546,qs),
(441,546,o),
(510,505,o),
(520,458,q),
(699,458,l),
(690,525,o),
(634,622,o),
(549,686,o),
(442,717,o),
(383,717,qs),
(301,717,o),
(170,667,o),
(78,574,o),
(28,439,o),
(28,354,qs),
(28,271,o),
(77,137,o),
(170,43,o),
(301,-8,o),
(384,-8,qs),
(421,-8,o),
(496,6,o),
(563,33,o),
(621,75,o),
(642,104,qs),
(685,162,o),
(712,295,o),
(712,368,qs),
(712,394,l),
(355,394,l),
(355,242,l),
(522,242,l),
(518,221,o),
(493,191,o),
(457,172,o),
(413,163,o),
(391,163,qs),
(341,163,o),
(274,195,o),
(233,249,o),
(215,318,o),
(215,356,qs),
(215,389,o)
);
},
{
closed = 1;
nodes = (
(359,-288,o),
(410,-258,o),
(449,-215,o),
(473,-160,o),
(474,-128,qs),
(475,-88,o),
(429,-32,o),
(387,-32,qs),
(354,-31,o),
(306,-70,o),
(306,-106,qs),
(307,-139,o),
(349,-174,o),
(375,-175,q),
(372,-183,o),
(352,-202,o),
(328,-221,o),
(304,-236,o),
(294,-240,q),
(333,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
65 1 7 73 0 5 6 2 6 5 2 128 0 2 0 1 0 2 1 103 0 8 0 7 8 7 101 0 6 6 4 97 0 4 4 46 77 0 0 0 3 97 0 3 3 47 3 78 36 25 34 20 40 40 17 20 36 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,399,l),
(552,0,l),
(716,0,l),
(716,708,l),
(535,708,l),
(535,303,l),
(236,708,l),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(374,-288,o),
(425,-258,o),
(464,-215,o),
(488,-160,o),
(489,-128,qs),
(490,-88,o),
(444,-32,o),
(402,-32,qs),
(369,-31,o),
(321,-70,o),
(321,-106,qs),
(322,-139,o),
(364,-174,o),
(390,-175,q),
(387,-183,o),
(367,-202,o),
(343,-221,o),
(319,-236,o),
(309,-240,q),
(348,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
6 1 2 1 0 1 76 29 1 4 73 0 5 0 4 5 4 101 6 3 2 0 0 38 77 2 1 1 1 39 1 78 0 0 22 20 16 15 0 9 0 9 18 17 18 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 783;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,272,ls),
(224,288,o),
(232,324,o),
(251,355,o),
(289,376,o),
(311,376,qs),
(336,376,o),
(368,357,o),
(386,327,o),
(393,292,o),
(393,276,qs),
(393,0,l),
(570,0,l),
(570,291,ls),
(570,347,o),
(547,444,o),
(518,478,qs),
(492,507,o),
(420,538,o),
(372,538,qs),
(359,538,o),
(321,534,o),
(280,522,o),
(238,498,o),
(220,479,q),
(210,527,l)
);
},
{
closed = 1;
nodes = (
(281,-288,o),
(332,-258,o),
(371,-215,o),
(395,-160,o),
(396,-128,qs),
(397,-88,o),
(351,-32,o),
(309,-32,qs),
(276,-31,o),
(228,-70,o),
(228,-106,qs),
(229,-139,o),
(271,-174,o),
(297,-175,q),
(294,-183,o),
(274,-202,o),
(250,-221,o),
(226,-236,o),
(216,-240,q),
(255,-297,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
48 1 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 0 1 0 2 1 128 0 6 0 5 6 5 101 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 4 2 1 128 0 6 0 5 6 5 101 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 22 17 21 37 22 36 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,0,l),
(248,0,l),
(248,239,l),
(335,239,l),
(471,0,l),
(677,0,l),
(513,267,l),
(587,295,o),
(650,405,o),
(652,475,qs),
(651,549,o),
(597,641,o),
(515,691,o),
(414,708,o),
(366,708,qs),
(67,708,l)
);
},
{
closed = 1;
nodes = (
(248,540,l),
(370,540,ls),
(391,540,o),
(429,535,o),
(457,520,o),
(473,494,o),
(473,472,qs),
(473,436,o),
(418,398,o),
(367,398,qs),
(248,398,l)
);
},
{
closed = 1;
nodes = (
(330,-288,o),
(381,-258,o),
(420,-215,o),
(444,-160,o),
(445,-128,qs),
(446,-88,o),
(400,-32,o),
(358,-32,qs),
(325,-31,o),
(277,-70,o),
(277,-106,qs),
(278,-139,o),
(320,-174,o),
(346,-175,q),
(343,-183,o),
(323,-202,o),
(299,-221,o),
(275,-236,o),
(265,-240,q),
(304,-297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
8 1 2 4 1 76 46 1 6 73 9 1 4 0 2 1 4 2 103 0 7 0 6 7 6 101 0 5 5 0 95 8 1 0 0 38 77 3 1 1 1 39 1 78 17 16 1 0 39 37 33 32 25 23 16 26 17 26 14 13 12 11 10 9 0 15 1 15 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 710;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(47,0,l),
(224,0,l),
(224,240,ls),
(224,280,o),
(247,328,o),
(286,355,o),
(337,365,o),
(365,365,qs),
(399,365,l),
(399,536,l),
(395,537,o),
(369,538,o),
(356,538,qs),
(338,538,o),
(301,535,o),
(265,523,o),
(229,499,o),
(214,477,q),
(202,527,l)
);
},
{
closed = 1;
nodes = (
(108,-288,o),
(159,-258,o),
(198,-215,o),
(222,-160,o),
(223,-128,qs),
(224,-88,o),
(178,-32,o),
(136,-32,qs),
(103,-31,o),
(55,-70,o),
(55,-106,qs),
(56,-139,o),
(98,-174,o),
(124,-175,q),
(121,-183,o),
(101,-202,o),
(77,-221,o),
(53,-236,o),
(43,-240,q),
(82,-297,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
39 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 0 4 5 4 101 0 1 1 0 97 3 1 0 0 49 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 4 5 4 101 0 3 3 41 77 0 1 1 0 97 0 0 0 49 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 22 17 21 34 52 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = uni0123;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,527,l),
(416,482,l),
(391,507,o),
(325,537,o),
(271,537,qs),
(214,537,o),
(120,493,o),
(59,418,o),
(27,319,o),
(27,265,qs),
(27,211,o),
(54,113,o),
(109,37,o),
(199,-7,o),
(263,-7,qs),
(280,-7,o),
(319,-3,o),
(360,11,o),
(397,35,o),
(412,56,q),
(412,29,o),
(407,-22,o),
(388,-62,o),
(348,-86,o),
(314,-86,qs),
(279,-86,o),
(234,-60,o),
(227,-39,q),
(47,-39,l),
(57,-94,o),
(106,-174,o),
(178,-225,o),
(267,-249,o),
(315,-249,qs),
(345,-249,o),
(408,-240,o),
(467,-217,o),
(517,-180,o),
(537,-152,qs),
(557,-124,o),
(578,-63,o),
(589,3,o),
(592,73,o),
(592,109,qs),
(592,527,l)
);
},
{
closed = 1;
nodes = (
(377,360,o),
(403,329,o),
(415,289,o),
(415,267,qs),
(415,243,o),
(403,202,o),
(377,170,o),
(335,152,o),
(306,152,qs),
(278,152,o),
(238,171,o),
(214,201,o),
(203,239,o),
(203,258,qs),
(203,277,o),
(213,319,o),
(237,355,o),
(279,378,o),
(309,378,qs),
(337,378,o)
);
},
{
closed = 1;
nodes = (
(334,874,o),
(274,838,o),
(228,787,o),
(198,723,o),
(197,686,qs),
(197,662,o),
(210,621,o),
(234,591,o),
(273,573,o),
(298,573,qs),
(316,573,o),
(353,583,o),
(379,605,o),
(396,638,o),
(396,660,qs),
(396,697,o),
(347,739,o),
(315,741,q),
(319,750,o),
(343,772,o),
(373,793,o),
(402,811,o),
(413,815,q),
(366,883,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
42 1 6 4 24 1 3 7 2 76 88 1 8 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
42 1 6 5 24 1 3 7 2 76 88 1 8 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 9 8 4 8 9 4 128 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 8 8 46 77 10 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 77 0 2 2 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 9 8 4 8 9 4 128 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 0 8 8 46 77 10 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 9 8 133 0 9 4 9 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 10 1 6 6 4 97 5 1 4 4 49 77 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 8 9 8 133 0 9 4 9 133 0 7 6 3 6 7 3 128 0 1 3 2 3 1 2 128 0 2 0 0 2 0 102 0 5 5 41 77 10 1 6 6 4 97 0 4 4 49 77 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
46 45 79 77 71 70 56 54 45 64 46 64 19 40 40 34 20 41 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 639;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,708,l),
(67,0,l),
(587,0,l),
(587,167,l),
(248,167,l),
(248,708,l)
);
},
{
closed = 1;
nodes = (
(411,404,o),
(471,442,o),
(518,495,o),
(547,563,o),
(548,601,qs),
(548,626,o),
(535,668,o),
(510,700,o),
(472,719,o),
(448,719,qs),
(428,719,o),
(392,708,o),
(365,685,o),
(349,651,o),
(349,628,qs),
(349,589,o),
(398,546,o),
(429,543,q),
(425,534,o),
(402,511,o),
(373,489,o),
(343,470,o),
(332,466,q),
(380,395,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
29 11 2 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 46 77 0 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
45 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,708,l),
(47,0,l),
(224,0,l),
(224,708,l)
);
},
{
closed = 1;
nodes = (
(331,404,o),
(391,442,o),
(438,495,o),
(467,563,o),
(468,601,qs),
(468,626,o),
(455,668,o),
(430,700,o),
(392,719,o),
(368,719,qs),
(348,719,o),
(312,708,o),
(285,685,o),
(269,651,o),
(269,628,qs),
(269,589,o),
(318,546,o),
(349,543,q),
(345,534,o),
(322,511,o),
(293,489,o),
(263,470,o),
(252,466,q),
(300,395,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
27 9 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 46 77 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
45 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 458;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,527,l),
(215,0,l),
(392,0,l),
(392,272,ls),
(392,288,o),
(400,324,o),
(419,355,o),
(457,376,o),
(479,376,qs),
(504,376,o),
(536,357,o),
(554,327,o),
(561,292,o),
(561,276,qs),
(561,0,l),
(738,0,l),
(738,291,ls),
(738,347,o),
(715,444,o),
(686,478,qs),
(660,507,o),
(588,538,o),
(540,538,qs),
(527,538,o),
(489,534,o),
(448,522,o),
(406,498,o),
(388,479,q),
(378,527,l)
);
},
{
closed = 1;
nodes = (
(69,404,o),
(129,442,o),
(176,495,o),
(205,563,o),
(206,601,qs),
(206,626,o),
(193,668,o),
(168,700,o),
(130,719,o),
(106,719,qs),
(86,719,o),
(50,708,o),
(23,685,o),
(7,651,o),
(7,628,qs),
(7,589,o),
(56,546,o),
(87,543,q),
(83,534,o),
(60,511,o),
(31,489,o),
(1,470,o),
(-10,466,q),
(38,395,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
34 1 0 5 52 1 2 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
34 1 0 5 52 1 2 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 128 0 5 5 46 77 4 1 0 0 49 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 1 4 2 1 128 0 5 5 46 77 0 0 0 49 77 0 4 4 41 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
45 17 21 37 22 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 782;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,527,l),
(257,527,l),
(257,658,l),
(80,658,l),
(80,527,l),
(7,527,l),
(7,369,l),
(80,369,l),
(80,180,ls),
(80,125,o),
(110,56,o),
(167,15,o),
(249,0,o),
(302,0,qs),
(370,0,l),
(370,159,l),
(301,159,ls),
(285,159,o),
(268,167,o),
(259,180,o),
(257,198,o),
(257,207,qs),
(257,369,l),
(340,369,l)
);
},
{
closed = 1;
nodes = (
(428,349,o),
(488,387,o),
(535,440,o),
(564,508,o),
(565,546,qs),
(565,571,o),
(552,613,o),
(527,645,o),
(489,664,o),
(465,664,qs),
(445,664,o),
(409,653,o),
(382,630,o),
(366,596,o),
(366,573,qs),
(366,534,o),
(415,491,o),
(446,488,q),
(442,479,o),
(419,456,o),
(390,434,o),
(360,415,o),
(349,411,q),
(397,340,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
29 1 2 3 47 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 4 3 4 133 8 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 7 4 7 133 0 4 3 4 133 8 6 2 2 2 3 95 5 1 3 3 41 77 0 0 0 1 98 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 38 36 0 23 0 23 17 17 17 21 33 37 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = dcaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,708,l),
(415,708,l),
(415,490,l),
(393,513,o),
(323,538,o),
(283,537,qs),
(228,537,o),
(145,507,o),
(113,481,qs),
(71,444,o),
(27,334,o),
(27,265,qs),
(27,198,o),
(68,88,o),
(105,52,qs),
(134,23,o),
(218,-8,o),
(264,-8,qs),
(362,-8,o),
(419,46,q),
(419,0,l),
(592,0,l)
);
},
{
closed = 1;
nodes = (
(378,357,o),
(403,325,o),
(415,286,o),
(415,267,qs),
(415,245,o),
(403,205,o),
(378,173,o),
(336,153,o),
(307,153,qs),
(279,153,o),
(239,172,o),
(214,202,o),
(203,240,o),
(203,261,qs),
(203,281,o),
(213,321,o),
(238,355,o),
(280,376,o),
(310,376,qs),
(338,376,o)
);
},
{
closed = 1;
nodes = (
(683,401,o),
(743,439,o),
(790,492,o),
(819,560,o),
(820,598,qs),
(820,623,o),
(807,665,o),
(782,697,o),
(744,716,o),
(720,716,qs),
(700,716,o),
(664,705,o),
(637,682,o),
(621,648,o),
(621,625,qs),
(621,586,o),
(670,543,o),
(701,540,q),
(697,531,o),
(674,508,o),
(645,486,o),
(615,467,o),
(604,463,q),
(652,392,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
47 1 1 2 65 18 2 4 1 1 1 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
47 1 1 2 65 18 2 4 1 1 1 3 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 2 2 38 77 8 1 4 4 1 97 0 1 1 49 77 0 5 5 0 97 7 3 2 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 6 6 46 77 0 2 2 38 77 8 1 4 4 1 97 0 1 1 49 77 7 1 3 3 39 77 0 5 5 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
23 22 0 0 56 54 33 31 22 41 23 41 0 21 0 21 19 42 34 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 805;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,-13,o),
(40,-32,o),
(31,-48,o),
(9,-61,o),
(-11,-61,qs),
(-52,-61,l),
(-52,-220,l),
(40,-220,ls),
(138,-220,o),
(218,-128,o),
(218,-35,qs),
(218,527,l),
(41,527,l),
(41,-7,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 41 77 0 2 2 1 96 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 2 0 1 2 1 100 0 0 0 41 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
33 35 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 277;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,476,l),
(618,0,l),
(860,0,l),
(1018,708,l),
(828,708,l),
(734,214,l),
(631,708,l),
(405,708,l),
(300,214,l),
(201,708,l),
(0,708,l),
(161,0,l),
(413,0,l)
);
},
{
closed = 1;
nodes = (
(516,950,l),
(329,950,l),
(500,758,l),
(648,758,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
8 1 6 6 5 95 0 5 5 44 77 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 8 1 6 0 5 6 103 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
13 13 0 0 13 16 13 16 15 14 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1018;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,309,l),
(530,0,l),
(721,0,l),
(888,527,l),
(701,527,l),
(624,212,l),
(538,527,l),
(352,527,l),
(265,212,l),
(187,527,l),
(-5,527,l),
(162,0,l),
(354,0,l)
);
},
{
closed = 1;
nodes = (
(429,769,l),
(242,769,l),
(413,577,l),
(561,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
11 6 3 3 3 0 1 76 0 5 8 1 6 0 5 6 103 2 1 2 0 0 41 77 7 4 2 3 3 39 3 78 13 13 0 0 13 16 13 16 15 14 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,476,l),
(618,0,l),
(860,0,l),
(1018,708,l),
(828,708,l),
(734,214,l),
(631,708,l),
(405,708,l),
(300,214,l),
(201,708,l),
(0,708,l),
(161,0,l),
(413,0,l)
);
},
{
closed = 1;
nodes = (
(531,950,l),
(399,758,l),
(547,758,l),
(718,950,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 6 95 0 6 6 44 77 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 6 0 5 0 6 5 103 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 16 15 14 13 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1018;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,309,l),
(530,0,l),
(721,0,l),
(888,527,l),
(701,527,l),
(624,212,l),
(538,527,l),
(352,527,l),
(265,212,l),
(187,527,l),
(-5,527,l),
(162,0,l),
(354,0,l)
);
},
{
closed = 1;
nodes = (
(472,769,l),
(340,577,l),
(488,577,l),
(659,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
11 6 3 3 3 0 1 76 0 6 0 5 0 6 5 103 2 1 2 0 0 41 77 7 4 2 3 3 39 3 78 0 0 16 15 14 13 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,476,l),
(618,0,l),
(860,0,l),
(1018,708,l),
(828,708,l),
(734,214,l),
(631,708,l),
(405,708,l),
(300,214,l),
(201,708,l),
(0,708,l),
(161,0,l),
(413,0,l)
);
},
{
closed = 1;
nodes = (
(317,931,o),
(291,907,o),
(275,873,o),
(275,851,qs),
(275,804,o),
(332,757,o),
(370,757,qs),
(408,757,o),
(465,804,o),
(465,851,qs),
(465,895,o),
(407,944,o),
(370,944,qs),
(351,944,o)
);
},
{
closed = 1;
nodes = (
(615,931,o),
(588,907,o),
(572,873,o),
(572,851,qs),
(572,804,o),
(630,757,o),
(667,757,qs),
(706,757,o),
(762,804,o),
(762,851,qs),
(762,895,o),
(705,944,o),
(667,944,qs),
(649,944,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
11 6 3 3 3 0 1 76 11 7 10 3 5 8 1 6 0 5 6 105 2 1 2 0 0 38 77 9 4 2 3 3 39 3 78 28 27 14 13 0 0 34 32 27 40 28 40 20 18 13 26 14 26 0 12 0 12 17 18 18 17 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1018;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,309,l),
(530,0,l),
(721,0,l),
(888,527,l),
(701,527,l),
(624,212,l),
(538,527,l),
(352,527,l),
(265,212,l),
(187,527,l),
(-5,527,l),
(162,0,l),
(354,0,l)
);
},
{
closed = 1;
nodes = (
(240,750,o),
(214,726,o),
(198,692,o),
(198,670,qs),
(198,623,o),
(255,576,o),
(293,576,qs),
(331,576,o),
(388,623,o),
(388,670,qs),
(388,714,o),
(330,763,o),
(293,763,qs),
(274,763,o)
);
},
{
closed = 1;
nodes = (
(538,750,o),
(511,726,o),
(495,692,o),
(495,670,qs),
(495,623,o),
(553,576,o),
(590,576,qs),
(629,576,o),
(685,623,o),
(685,670,qs),
(685,714,o),
(628,763,o),
(590,763,qs),
(572,763,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 6 6 5 97 11 7 10 3 5 5 48 77 2 1 2 0 0 41 77 9 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
11 7 10 3 5 8 1 6 0 5 6 105 2 1 2 0 0 41 77 9 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
28 27 14 13 0 0 34 32 27 40 28 40 20 18 13 26 14 26 0 12 0 12 17 18 18 17 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,708,l),
(0,708,l),
(272,263,l),
(272,0,l),
(453,0,l),
(453,264,l),
(727,708,l),
(522,708,l),
(363,427,l)
);
},
{
closed = 1;
nodes = (
(331,950,l),
(144,950,l),
(315,758,l),
(463,758,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
8 5 2 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 4 3 95 0 3 3 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 5 1 4 0 3 4 103 2 1 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
9 9 9 12 9 12 19 18 18 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-83,o),
(264,-83,qs),
(207,-83,o),
(128,-59,o),
(101,-39,q),
(47,-182,l),
(102,-217,o),
(220,-248,o),
(281,-248,qs),
(351,-248,o),
(478,-205,o),
(523,-147,qs),
(542,-122,o),
(566,-58,o),
(578,14,o),
(582,90,o),
(582,126,qs),
(582,527,l),
(405,527,l),
(405,278,ls),
(405,258,o),
(403,214,o),
(386,176,o),
(350,152,o),
(318,152,qs),
(288,152,o),
(253,176,o),
(235,211,o),
(230,253,o),
(230,271,qs),
(230,527,l),
(54,527,l),
(54,239,ls),
(54,177,o),
(82,83,o),
(113,52,qs),
(139,25,o),
(214,-7,o),
(265,-8,qs),
(302,-8,o),
(381,13,o),
(407,42,q),
(408,-23,o)
);
},
{
closed = 1;
nodes = (
(302,769,l),
(115,769,l),
(286,577,l),
(434,577,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 2 37 1 5 0 36 1 4 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 8 1 7 1 6 7 103 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 77 0 5 5 4 97 0 4 4 51 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 6 8 1 7 1 6 7 103 0 5 0 4 5 4 101 3 1 1 1 41 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
43 43 43 46 43 46 19 37 40 21 37 22 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,448,ls),
(248,476,o),
(266,514,o),
(295,537,o),
(330,547,o),
(348,547,qs),
(377,547,o),
(425,521,o),
(439,493,q),
(330,334,l),
(413,300,ls),
(438,290,o),
(484,271,o),
(518,250,o),
(539,222,o),
(539,205,qs),
(539,188,o),
(518,160,o),
(497,160,qs),
(473,160,o),
(451,185,o),
(451,202,q),
(289,202,l),
(289,106,o),
(399,-8,o),
(502,-8,qs),
(554,-8,o),
(634,23,o),
(688,77,o),
(716,152,o),
(716,196,qs),
(716,241,o),
(684,308,o),
(633,358,o),
(570,392,o),
(539,403,q),
(636,519,l),
(624,569,o),
(568,643,o),
(490,693,o),
(397,717,o),
(349,717,qs),
(289,717,o),
(186,685,o),
(110,622,o),
(67,526,o),
(67,463,qs),
(67,0,l),
(248,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
39 38 12 11 4 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 3 2 114 0 4 4 0 97 0 0 0 46 77 0 3 3 1 98 6 5 2 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 6 1 5 5 39 77 0 3 3 1 98 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 4 3 3 2 114 0 4 4 0 97 0 0 0 46 77 6 1 5 5 39 77 0 3 3 1 98 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 6 1 5 5 39 77 0 3 3 1 98 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 48 0 48 43 34 18 46 37 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 754;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = uni0405;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,546,o),
(554,639,o),
(512,668,qs),
(479,691,o),
(394,716,o),
(349,717,qs),
(295,717,o),
(198,699,o),
(154,671,qs),
(115,646,o),
(63,566,o),
(59,506,qs),
(59,504,ls),
(59,445,o),
(97,369,o),
(130,344,qs),
(161,321,o),
(261,287,o),
(318,275,qs),
(374,263,ls),
(408,257,o),
(445,234,o),
(445,212,qs),
(445,195,o),
(428,175,o),
(401,164,o),
(369,160,o),
(354,160,qs),
(304,160,o),
(229,196,o),
(219,239,q),
(37,239,l),
(44,169,o),
(105,72,o),
(149,43,qs),
(194,14,o),
(295,-8,o),
(345,-8,qs),
(397,-8,o),
(498,17,o),
(578,71,o),
(627,158,o),
(627,221,qs),
(625,276,o),
(591,345,o),
(533,389,o),
(456,414,o),
(413,425,qs),
(348,441,ls),
(294,455,o),
(238,479,o),
(238,503,qs),
(238,527,o),
(288,551,o),
(322,551,qs),
(371,551,o),
(431,514,o),
(436,481,q),
(611,481,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 28 1 78 0 0 0 58 0 58 53 51 34 21 47 34 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = uni0405;
unicode = 1029;
},
{
glyphname = uni0455;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,374,o),
(312,356,q),
(483,356,l),
(477,405,o),
(436,474,o),
(376,518,o),
(299,538,o),
(257,538,qs),
(220,538,o),
(153,526,o),
(123,511,qs),
(86,492,o),
(35,425,o),
(34,376,qs),
(33,339,o),
(60,279,o),
(91,259,qs),
(118,240,o),
(203,215,o),
(240,207,qs),
(258,203,o),
(288,198,o),
(311,190,o),
(324,177,o),
(324,167,qs),
(324,153,o),
(296,136,o),
(274,136,qs),
(245,136,o),
(204,160,o),
(198,180,q),
(19,180,l),
(27,125,o),
(77,53,o),
(146,9,o),
(230,-8,o),
(273,-8,qs),
(309,-8,o),
(387,9,o),
(450,51,o),
(494,119,o),
(496,170,qs),
(496,208,o),
(471,260,o),
(430,293,o),
(380,310,o),
(356,315,qs),
(326,321,o),
(267,333,o),
(234,341,qs),
(215,346,o),
(203,361,o),
(203,368,qs),
(203,380,o),
(229,394,o),
(248,394,qs),
(274,394,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
3 1 5 0 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 28 1 78 1 0 54 53 49 47 29 27 25 24 20 18 0 56 1 56 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = uni0455;
unicode = 1109;
},
{
glyphname = uni0458;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,-13,o),
(40,-32,o),
(31,-48,o),
(9,-61,o),
(-11,-61,qs),
(-52,-61,l),
(-52,-220,l),
(40,-220,ls),
(138,-220,o),
(218,-128,o),
(218,-35,qs),
(218,527,l),
(41,527,l),
(41,-7,ls)
);
},
{
closed = 1;
nodes = (
(73,763,o),
(42,735,o),
(24,697,o),
(24,672,qs),
(24,645,o),
(41,606,o),
(72,580,o),
(110,567,o),
(131,567,qs),
(174,567,o),
(237,618,o),
(237,672,qs),
(237,697,o),
(220,735,o),
(191,763,o),
(153,777,o),
(131,777,qs),
(111,777,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 0 4 0 3 4 105 0 0 0 22 77 0 2 2 1 96 0 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 3 0 4 0 3 4 105 0 2 0 1 2 1 100 0 0 0 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
15 14 23 21 14 31 15 31 33 35 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 277;
}
);
note = uni0458;
unicode = 1112;
},
{
glyphname = uni0408;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,708,l),
(358,242,ls),
(358,227,o),
(353,198,o),
(337,175,o),
(308,161,o),
(285,161,qs),
(255,161,o),
(222,182,o),
(206,215,o),
(202,252,o),
(202,269,q),
(22,269,l),
(22,243,ls),
(22,184,o),
(58,90,o),
(127,26,o),
(224,-8,o),
(286,-8,qs),
(540,-8,o),
(539,255,qs),
(539,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 3 2 3 1 2 128 0 3 3 20 77 0 2 2 0 98 0 0 0 28 0 78 21 36 21 33 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = uni0408;
unicode = 1032;
},
{
glyphname = uni040E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,708,l),
(5,708,l),
(268,226,l),
(249,198,o),
(192,173,o),
(147,173,qs),
(114,173,l),
(114,0,l),
(156,0,ls),
(232,0,o),
(333,36,o),
(403,103,o),
(454,198,o),
(480,258,qs),
(674,708,l),
(481,708,l),
(360,396,l)
);
},
{
closed = 1;
nodes = (
(551,853,o),
(551,950,q),
(409,950,l),
(409,938,ls),
(409,910,o),
(376,879,o),
(348,879,qs),
(321,879,o),
(287,911,o),
(287,938,qs),
(287,950,l),
(145,950,l),
(145,852,o),
(254,758,o),
(349,758,qs),
(443,758,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
16 13 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 6 8 1 4 0 6 4 106 7 1 5 5 25 77 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 6 5 133 0 6 8 1 4 0 6 4 106 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
18 17 30 29 26 24 21 20 17 32 18 32 19 33 37 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = uni040E;
unicode = 1038;
},
{
glyphname = uni045E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,527,l),
(5,527,l),
(219,-26,l),
(199,-52,o),
(138,-67,o),
(95,-67,qs),
(80,-67,l),
(80,-251,l),
(122,-251,ls),
(224,-251,o),
(359,-171,o),
(401,-99,qs),
(419,-69,o),
(447,3,o),
(461,48,qs),
(595,527,l),
(405,527,l),
(322,170,l)
);
},
{
closed = 1;
nodes = (
(511,672,o),
(511,769,q),
(369,769,l),
(369,757,ls),
(369,729,o),
(336,698,o),
(308,698,qs),
(281,698,o),
(247,730,o),
(247,757,qs),
(247,769,l),
(105,769,l),
(105,671,o),
(214,577,o),
(309,577,qs),
(403,577,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 14 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 6 5 112 8 1 4 4 6 97 0 6 6 20 77 3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 6 6 5 112 0 2 0 1 2 1 102 8 1 4 4 6 97 0 6 6 20 77 3 1 0 0 22 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
7 1 5 6 5 133 0 2 0 1 2 1 102 8 1 4 4 6 97 0 6 6 20 77 3 1 0 0 22 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 6 5 133 0 6 8 1 4 0 6 4 106 0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
19 18 31 30 27 25 22 21 18 33 19 33 19 33 38 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = uni045E;
unicode = 1118;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Black;
properties = (
{
key = styleNames;
values = (
{
language = ENG;
value = Black;
}
);
},
{
key = postscriptFullName;
value = "Onest Black";
},
{
key = postscriptFontName;
value = "Onest-Black";
}
);
weightClass = 900;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 15;
"@MMK_R_O" = -30;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_colon" = 20;
"@MMK_R_period" = 30;
"@MMK_R_uni0422" = -50;
"@MMK_R_w" = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -35;
"@MMK_R_O" = 15;
"@MMK_R_W" = -10;
"@MMK_R_Y" = -50;
"@MMK_R_period" = -20;
"@MMK_R_uni0417" = 15;
};
"@MMK_L_K_alt" = {
"@MMK_R_acircumflex" = -10;
"@MMK_R_uni0422" = 10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_O" = -10;
"@MMK_R_acircumflex" = -35;
"@MMK_R_period" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -60;
"@MMK_R_O" = -50;
"@MMK_R_acircumflex" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_d" = -70;
"@MMK_R_period" = -80;
"@MMK_R_r" = -30;
"@MMK_R_w" = -20;
};
"@MMK_L_period" = {
"@MMK_R_A" = 30;
"@MMK_R_O" = -20;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -80;
"@MMK_R_uni0422" = -80;
};
"@MMK_L_r" = {
"@MMK_R_d" = -10;
"@MMK_R_t" = 30;
};
"@MMK_L_uni0413" = {
"@MMK_R_colon" = -40;
"@MMK_R_period" = -100;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0432" = -40;
"@MMK_R_uni0433" = -50;
"@MMK_R_uni0444" = -80;
};
"@MMK_L_uni0414" = {
"@MMK_R_period" = 30;
};
"@MMK_L_uni0417" = {
"@MMK_R_O" = 15;
};
"@MMK_L_uni0422" = {
"@MMK_R_A" = -70;
"@MMK_R_acircumflex" = -60;
"@MMK_R_colon" = -20;
"@MMK_R_d" = -50;
"@MMK_R_period" = -80;
"@MMK_R_r" = -20;
"@MMK_R_uni0422" = 40;
};
"@MMK_L_uni0433" = {
"@MMK_R_period" = -40;
"@MMK_R_uni0444" = -10;
};
"@MMK_L_uni0434" = {
"@MMK_R_period" = 40;
};
A = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aacute = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Acircumflex = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Adieresis = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Agrave = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Amacron = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aogonek = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aring = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Atilde = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
B = {
V = -10;
W = -10;
W_alt = -10;
Wacute = -10;
Wcircumflex = -10;
Wdieresis = -10;
Wgrave = -10;
X = -10;
Y = -10;
Yacute = -10;
Ycircumflex = -10;
Ydieresis = -10;
Ygrave = -10;
};
C = {
J = 10;
V = -25;
X = -40;
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
};
Cacute = {
J = 10;
V = -30;
X = -40;
};
Ccaron = {
J = 10;
V = -30;
X = -40;
};
Ccedilla = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ccircumflex = {
J = 10;
V = -30;
X = -40;
};
Cdotaccent = {
J = 10;
V = -30;
X = -40;
};
D = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
W = -5;
W_alt = -5;
Wacute = -5;
Wcircumflex = -5;
Wdieresis = -5;
Wgrave = -5;
X = -30;
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
d = 10;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Dcaron = {
J = 10;
V = -30;
X = -40;
};
Dcroat = {
J = 10;
V = -30;
X = -40;
};
E = {
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
};
Eth = {
J = 10;
V = -30;
X = -40;
};
F = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
J = -30;
T = 20;
Tcaron = 20;
a = -30;
a00E2.alt = -30;
a00E4.alt = -30;
a0103.alt = -30;
a2_alt = -25;
a_alt = -30;
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
agrave = -30;
amacron = -30;
aogonek = -30;
aring = -30;
atilde = -30;
c = -25;
c_alt = -25;
cacute = -25;
ccaron = -25;
ccedilla = -25;
ccircumflex = -25;
cdotaccent = -25;
comma = -30;
d = -25;
dcaron = -25;
dcroat = -25;
e = -25;
eacute = -25;
ebreve = -25;
ecaron = -25;
ecircumflex = -25;
edieresis = -25;
edotaccent = -25;
egrave = -25;
emacron = -25;
eogonek = -25;
eth = -25;
g = -25;
gbreve = -25;
gcircumflex = -25;
gdotaccent = -25;
o = -25;
oacute = -25;
obreve = -25;
ocircumflex = -25;
odieresis = -25;
oe = -25;
ograve = -25;
ohungarumlaut = -25;
omacron = -25;
oslash = -25;
otilde = -25;
period = -30;
q = -25;
quotedblbase = -30;
quotedblright = 20;
quoteright = 20;
s = -25;
s_alt = -25;
sacute = -25;
scaron = -25;
scedilla = -25;
scircumflex = -25;
uni0123 = -25;
uni0162 = 20;
uni0219 = -25;
uni021A = 20;
uni0410 = -50;
uni0422 = 20;
uni0430 = -30;
};
G = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -40;
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Gbreve = {
J = 10;
V = -30;
X = -40;
};
Gcircumflex = {
J = 10;
V = -30;
X = -40;
};
Gdotaccent = {
J = 10;
V = -30;
X = -40;
};
I = {
bracketright = 40;
};
J = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -10;
};
K = {
v = -30;
y2_alt = -40;
};
K_alt = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
d = -20;
uni0122 = -30;
v = -30;
w = -20;
w_alt = -20;
wacute = -20;
wcircumflex = -20;
wdieresis = -20;
wgrave = -20;
y2_alt = -40;
};
L = {
A = 20;
Aacute = 20;
Acircumflex = 20;
Adieresis = 20;
Agrave = 20;
Amacron = 20;
Aogonek = 20;
Aring = 20;
Atilde = 20;
J = 30;
T = -40;
Tcaron = -40;
V = -50;
W = -40;
W_alt = -40;
Wacute = -40;
Wcircumflex = -40;
Wdieresis = -40;
Wgrave = -40;
X = 10;
Y = -80;
Yacute = -80;
Ycircumflex = -80;
Ydieresis = -80;
Ygrave = -80;
a = 10;
a00E2.alt = 10;
a00E4.alt = 10;
a0103.alt = 10;
a2_alt = 10;
a_alt = 10;
aacute = 10;
abreve = 10;
acircumflex = 10;
adieresis = 10;
agrave = 10;
amacron = 10;
aogonek = 10;
aring = 10;
atilde = 10;
c = 10;
c_alt = 10;
cacute = 10;
ccaron = 10;
ccedilla = 10;
ccircumflex = 10;
cdotaccent = 10;
colon = 20;
comma = 40;
d = 10;
dcaron = 10;
dcroat = 10;
e = 10;
eacute = 10;
ebreve = 10;
ecaron = 10;
ecircumflex = 10;
edieresis = 10;
edotaccent = 10;
egrave = 10;
emacron = 10;
eogonek = 10;
eth = 10;
g = 10;
gbreve = 10;
gcircumflex = 10;
gdotaccent = 10;
j = 20;
o = 10;
oacute = 10;
obreve = 10;
ocircumflex = 10;
odieresis = 10;
oe = 10;
ograve = 10;
ohungarumlaut = 10;
omacron = 10;
oslash = 10;
otilde = 10;
period = 40;
q = 10;
quotedblbase = 40;
quoteright = -60;
s = 10;
s_alt = 10;
sacute = 10;
scaron = 10;
scedilla = 10;
scircumflex = 10;
semicolon = 20;
uni0123 = 10;
uni0162 = -40;
uni0219 = 10;
uni021A = -40;
uni0410 = 20;
uni0422 = -40;
uni0430 = 10;
y2_alt = -10;
z = 20;
};
O = {
J = 10;
V = -30;
X = -40;
};
Oacute = {
J = 10;
V = -30;
X = -40;
};
Obreve = {
J = 10;
V = -30;
X = -40;
};
Ocircumflex = {
J = 10;
V = -30;
X = -40;
};
Odieresis = {
J = 10;
V = -30;
X = -40;
};
Ograve = {
J = 10;
V = -30;
X = -40;
};
Ohungarumlaut = {
J = 10;
V = -30;
X = -40;
};
Omacron = {
J = 10;
V = -30;
X = -40;
};
Oslash = {
J = 10;
V = -30;
X = -40;
};
Otilde = {
J = 10;
V = -30;
X = -40;
};
P = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
C = 10;
Ccedilla = 10;
G = 10;
J = -50;
Q = 10;
S = 10;
X = -25;
Y = -15;
Yacute = -15;
Ycircumflex = -15;
Ydieresis = -15;
Ygrave = -15;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
j = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -90;
q = -10;
quotedblbase = -60;
quotedblright = 20;
quoteright = 20;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -60;
uni0430 = -20;
};
Q = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -40;
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
colon = 20;
semicolon = 20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
R = {
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
a = -10;
a00E2.alt = -10;
a00E4.alt = -10;
a0103.alt = -10;
a2_alt = -10;
a_alt = -10;
aacute = -10;
abreve = -10;
acircumflex = -10;
adieresis = -10;
agrave = -10;
amacron = -10;
aogonek = -10;
aring = -10;
atilde = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0430 = -10;
};
S = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Sacute = {
J = 10;
V = -30;
X = -40;
};
Scaron = {
J = 10;
V = -30;
X = -40;
};
Scedilla = {
J = 10;
V = -30;
X = -40;
};
Scircumflex = {
J = 10;
V = -30;
X = -40;
};
T = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
Tcaron = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
U = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -40;
q = -10;
quotedblbase = -60;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -10;
uni0430 = -20;
};
V = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = -25;
Cacute = -32;
Ccaron = -32;
Ccedilla = -25;
Ccircumflex = -32;
Cdotaccent = -32;
G = -25;
Gbreve = -32;
Gcircumflex = -32;
Gdotaccent = -32;
J = -80;
O = -32;
OE = -32;
Oacute = -32;
Obreve = -32;
Ocircumflex = -32;
Odieresis = -32;
Ograve = -32;
Ohungarumlaut = -32;
Omacron = -32;
Oslash = -32;
Otilde = -32;
Q = -25;
S = -25;
Sacute = -32;
Scaron = -32;
Scedilla = -32;
Scircumflex = -32;
V = 10;
a = -50;
a00E2.alt = -50;
a00E4.alt = -50;
a0103.alt = -50;
a2_alt = -50;
a_alt = -50;
aacute = -50;
abreve = -50;
acircumflex = -50;
adieresis = -50;
agrave = -50;
amacron = -50;
aogonek = -50;
aring = -50;
atilde = -50;
braceright = 20;
bracketright = 40;
c = -50;
c_alt = -50;
cacute = -50;
ccaron = -50;
ccedilla = -50;
ccircumflex = -50;
cdotaccent = -50;
colon = -20;
comma = -80;
d = -50;
dcaron = -50;
dcroat = -50;
e = -50;
eacute = -50;
ebreve = -50;
ecaron = -50;
ecircumflex = -50;
edieresis = -50;
edotaccent = -50;
egrave = -50;
emacron = -50;
eogonek = -50;
eth = -50;
g = -50;
gbreve = -50;
gcircumflex = -50;
gdotaccent = -50;
m = -20;
n = -20;
o = -50;
oacute = -50;
obreve = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
ohungarumlaut = -50;
omacron = -50;
oslash = -50;
otilde = -50;
p = -20;
period = -80;
q = -50;
quotedblbase = -80;
quotedblright = 10;
quoteright = 20;
r = -20;
racute = -20;
rcaron = -20;
s = -50;
s_alt = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
scircumflex = -50;
semicolon = -20;
space = -80;
u = -20;
uni0122 = -32;
uni0123 = -50;
uni0157 = -20;
uni0219 = -50;
uni0410 = -50;
uni0430 = -50;
z = -20;
};
W = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
W_alt = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
uni0410 = -40;
};
Wacute = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wcircumflex = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wdieresis = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wgrave = {
C = -5;
Ccedilla = -5;
G = -5;
J = -30;
Q = -5;
S = -5;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
X = {
C = -40;
Cacute = -40;
Ccaron = -40;
Ccedilla = -30;
Ccircumflex = -40;
Cdotaccent = -40;
G = -40;
Gbreve = -40;
Gcircumflex = -40;
Gdotaccent = -40;
O = -40;
OE = -40;
Oacute = -40;
Obreve = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Ohungarumlaut = -40;
Omacron = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
S = -30;
Sacute = -40;
Scaron = -40;
Scedilla = -40;
Scircumflex = -40;
bracketright = 40;
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
uni0122 = -40;
};
Y = {
C = -20;
Ccedilla = -20;
G = -20;
J = -90;
Q = -20;
S = -20;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Yacute = {
C = -20;
Ccedilla = -20;
G = -20;
J = -90;
Q = -20;
S = -20;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ycircumflex = {
C = -20;
Ccedilla = -20;
G = -20;
J = -90;
Q = -20;
S = -20;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ydieresis = {
C = -20;
Ccedilla = -20;
G = -20;
J = -90;
Q = -20;
S = -20;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ygrave = {
C = -20;
Ccedilla = -20;
G = -20;
J = -90;
Q = -20;
S = -20;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Z = {
bracketright = 20;
colon = 30;
quoteright = 20;
quotesingle = 40;
semicolon = 30;
};
b = {
c = 10;
d = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
backslash = {
a2_alt = 20;
backslash = -210;
uni0414 = 60;
uni0432 = 40;
uni0433 = 40;
uni0434 = 60;
uni0435 = 20;
uni0436 = 40;
uni0437 = 20;
uni0438 = 40;
uni043A = 40;
uni043C = 40;
uni043D = 40;
uni043E = 20;
uni043F = 40;
uni0440 = 40;
uni0441 = 20;
uni0444 = 20;
uni0446 = 40;
uni0447 = -20;
uni0448 = 40;
uni0449 = 40;
uni044B = 40;
uni044C = 40;
uni044D = 20;
uni044E = 40;
uni044F = 40;
uni0451 = 20;
uni0491 = 40;
};
braceleft = {
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
j = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0434 = 40;
};
bracketleft = {
I = 40;
T = 40;
Tcaron = 40;
V = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
X = 40;
Y = 40;
Yacute = 40;
Ycircumflex = 40;
Ydieresis = 40;
Ygrave = 40;
Z = 20;
i = 40;
j = 40;
l = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0425 = 40;
uni0434 = 40;
uni0443 = 20;
};
c = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
c_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
cacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
ccircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
cdotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
colon = {
backslash = -70;
slash = -30;
};
comma = {
U = -60;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
two = 20;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0443 = -20;
v = -20;
y2_alt = -20;
};
dcaron = {
a2_alt = -60;
c = -60;
c_alt = -60;
cacute = -60;
ccaron = -60;
ccedilla = -60;
ccircumflex = -60;
cdotaccent = -60;
d = -60;
dcaron = -60;
dcroat = -60;
e = -60;
eacute = -60;
ebreve = -60;
ecaron = -60;
ecircumflex = -60;
edieresis = -60;
edotaccent = -60;
egrave = -60;
emacron = -60;
eogonek = -60;
eth = -60;
g = -60;
gbreve = -60;
gcircumflex = -60;
gdotaccent = -60;
o = -60;
oacute = -60;
obreve = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
ohungarumlaut = -60;
omacron = -60;
oslash = -60;
otilde = -60;
q = -60;
s = -60;
s_alt = -60;
sacute = -60;
scaron = -60;
scedilla = -60;
scircumflex = -60;
uni0123 = -60;
uni0219 = -60;
};
e = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ebreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecircumflex = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
edieresis = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
egrave = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
emacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eogonek = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eth = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
f = {
a2_alt = -10;
bracketright = 40;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 50;
quotesingle = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
four = {
four = 20;
};
i = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
j = {
bracketright = 40;
j = 20;
quoteright = 20;
};
k_alt = {
d = -10;
};
l = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
lcaron = {
a2_alt = -60;
c = -60;
c_alt = -60;
cacute = -60;
ccaron = -60;
ccedilla = -60;
ccircumflex = -60;
cdotaccent = -60;
d = -60;
dcaron = -60;
dcroat = -60;
e = -60;
eacute = -60;
ebreve = -60;
ecaron = -60;
ecircumflex = -60;
edieresis = -60;
edotaccent = -60;
egrave = -60;
emacron = -60;
eogonek = -60;
eth = -60;
g = -60;
gbreve = -60;
gcircumflex = -60;
gdotaccent = -60;
o = -60;
oacute = -60;
obreve = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
ohungarumlaut = -60;
omacron = -60;
oslash = -60;
otilde = -60;
q = -60;
s = -60;
s_alt = -60;
sacute = -60;
scaron = -60;
scedilla = -60;
scircumflex = -60;
uni0123 = -60;
uni0219 = -60;
};
nine = {
seven = -20;
};
o = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
obreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ocircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
odieresis = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oe = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ograve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ohungarumlaut = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
omacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oslash = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
otilde = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
p = {
c = 10;
f = -20;
parenright = -20;
quotedblright = -20;
t = -20;
t_alt = -20;
tbar = -20;
uni0163 = -20;
uni021B = -20;
x = -10;
y2_alt = -5;
};
parenleft = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
uni0414 = 40;
uni0422 = 40;
uni0434 = 40;
uni0443 = 10;
};
period = {
U = -40;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
two = 20;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0443 = -20;
v = -20;
y2_alt = -20;
};
q = {
j = 20;
};
quotedblbase = {
U = -60;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
two = 20;
uni0410 = 40;
uni0414 = 40;
uni0416 = 20;
uni0417 = -20;
uni041B = 20;
uni041E = -30;
uni0421 = -30;
uni0424 = -50;
uni0425 = 20;
uni0427 = -80;
uni042D = -30;
uni0434 = 60;
uni0436 = 20;
uni043B = 40;
uni0442 = -40;
uni0443 = -30;
uni0445 = 20;
uni0447 = -40;
v = -20;
y2_alt = -20;
};
quotedblleft = {
J = -100;
T = 40;
Tcaron = 40;
V = 10;
W = 10;
W_alt = 10;
Wacute = 10;
Wcircumflex = 10;
Wdieresis = 10;
Wgrave = 10;
a2_alt = -30;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -30;
uni0162 = 40;
uni0163 = 40;
uni0219 = -30;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -40;
uni0422 = 30;
uni0423 = 30;
uni0434 = -40;
uni043B = -40;
uni0442 = 40;
uni0443 = 40;
uni0444 = -30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quotedblright = {
comma = -50;
period = -50;
quotedblbase = -50;
};
quoteleft = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
J = -100;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
comma = -50;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
f = 40;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
period = -50;
q = -20;
quotedblbase = -50;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -20;
uni0162 = 40;
uni0163 = 40;
uni0219 = -20;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -20;
uni041B = -20;
uni0422 = 40;
uni0423 = 40;
uni042A = 20;
uni0434 = -30;
uni043B = -30;
uni0442 = 30;
uni0443 = 30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quoteright = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -60;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -30;
b = 20;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
j = 20;
k = 20;
k_alt = 20;
kgreenlandic = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
uni0123 = -30;
uni0137 = 20;
uni0162 = 40;
uni0219 = -30;
uni021A = 40;
uni0410 = -40;
uni0422 = 40;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0442 = 40;
uni0443 = 40;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
quotesingle = {
A = -20;
Aacute = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
J = -80;
T = 40;
Tcaron = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
Z = 40;
b = 40;
f = 40;
t = 40;
t_alt = 40;
tbar = 40;
uni0162 = 40;
uni0163 = 40;
uni021A = 40;
uni021B = 40;
uni0410 = -20;
uni0422 = 20;
uni0423 = 20;
uni0427 = 20;
uni0442 = 40;
};
r = {
quotedblright = 40;
quoteright = 40;
};
racute = {
quotedblright = 40;
quoteright = 40;
};
rcaron = {
quotedblright = 40;
quoteright = 40;
};
s = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
t = -10;
t_alt = -10;
tbar = -10;
uni0163 = -10;
uni021B = -10;
x = -15;
y2_alt = -5;
};
s_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
sacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
scircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
seven = {
comma = -100;
four = -60;
one = 20;
period = -100;
quotedblbase = -100;
quotesingle = 20;
seven = 30;
three = -10;
};
slash = {
slash = -210;
uni0422 = 30;
uni0423 = 30;
};
space = {
V = -80;
W = -60;
W_alt = -60;
Wacute = -60;
Wcircumflex = -60;
Wdieresis = -60;
Wgrave = -60;
five = 40;
};
t = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
t_alt = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tbar = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tcaron = {
a2_alt = -40;
c = -40;
c_alt = -40;
cacute = -40;
ccaron = -40;
ccedilla = -40;
ccircumflex = -40;
cdotaccent = -40;
d = -40;
dcaron = -40;
dcroat = -40;
e = -40;
eacute = -40;
ebreve = -40;
ecaron = -40;
ecircumflex = -40;
edieresis = -40;
edotaccent = -40;
egrave = -40;
emacron = -40;
eogonek = -40;
eth = -40;
g = -40;
gbreve = -40;
gcircumflex = -40;
gdotaccent = -40;
o = -40;
oacute = -40;
obreve = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
ohungarumlaut = -40;
omacron = -40;
oslash = -40;
otilde = -40;
q = -40;
s = -40;
s_alt = -40;
sacute = -40;
scaron = -40;
scedilla = -40;
scircumflex = -40;
uni0123 = -40;
uni0219 = -40;
};
two = {
four = -20;
two = 15;
};
uni0122 = {
J = 10;
V = -30;
X = -40;
};
uni0136 = {
v = -30;
y2_alt = -40;
};
uni0157 = {
quotedblright = 40;
quoteright = 40;
};
uni0162 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni0163 = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0219 = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
uni021A = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni021B = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0401 = {
quotedblright = 20;
uni043B = 10;
};
uni0405 = {
J = 10;
V = -30;
X = -40;
};
uni0410 = {
J = 20;
T = -70;
Tcaron = -70;
U = -10;
V = -50;
W_alt = -40;
quotedblleft = -40;
quotedblright = -40;
quoteright = -40;
quotesingle = -20;
uni0162 = -70;
uni021A = -70;
uni0410 = 15;
uni0414 = 20;
uni0417 = -15;
uni041B = 10;
uni041E = -30;
uni0421 = -15;
uni0422 = -70;
uni0423 = -40;
uni0424 = -15;
uni0427 = -70;
uni042D = -15;
uni0434 = 10;
uni0436 = 10;
uni043B = 10;
uni0442 = -20;
uni0443 = -25;
uni0447 = -35;
v = -30;
x = 5;
y2_alt = -30;
};
uni0411 = {
uni0414 = -20;
uni042F = -20;
uni0434 = -10;
uni0436 = -20;
uni0445 = -20;
};
uni0412 = {
uni0423 = -30;
};
uni0413 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
};
uni0414 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0415 = {
quotedblright = 20;
uni043B = 10;
};
uni0416 = {
a2_alt = -20;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
uni0430 = -10;
uni0431 = -10;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0442 = -20;
uni0443 = -20;
uni0444 = -20;
uni0447 = -40;
uni044D = -20;
uni0451 = -20;
};
uni0417 = {
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni0417 = 15;
uni041B = -15;
uni041E = 15;
uni0421 = 15;
uni0422 = -20;
uni0423 = -20;
uni0424 = 15;
uni0425 = -20;
uni042D = 15;
uni0431 = 10;
uni0442 = 10;
uni0444 = 10;
};
uni041A = {
a2_alt = -20;
colon = 20;
semicolon = 20;
slash = 20;
uni0417 = -30;
uni041E = -30;
uni0421 = -30;
uni0424 = -30;
uni042D = -30;
uni0430 = -10;
uni0431 = -20;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0443 = -30;
uni0444 = -20;
uni044D = -20;
uni0451 = -20;
};
uni041E = {
uni0410 = -35;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -40;
uni0431 = 10;
uni0442 = 10;
};
uni0420 = {
a2_alt = -10;
comma = -90;
period = -90;
quotedblbase = -90;
quotedblleft = 20;
uni0410 = -60;
uni0414 = -50;
uni0416 = -20;
uni0417 = 10;
uni041E = 10;
uni0421 = 10;
uni0424 = 10;
uni0425 = -20;
uni042D = 10;
uni0430 = -10;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043B = -35;
uni043E = -10;
uni0441 = -10;
uni0442 = 20;
uni0444 = -10;
uni044D = -10;
uni044F = -10;
uni0451 = -10;
};
uni0421 = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -10;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0422 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
a2_alt = -50;
backslash = 40;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
parenright = 40;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
u = -20;
uni0410 = -70;
uni0414 = -10;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0422 = 20;
uni0423 = 10;
uni0424 = -20;
uni042D = -20;
uni0432 = -40;
uni0433 = -40;
uni0434 = -40;
uni0435 = -50;
uni0437 = -50;
uni0438 = -40;
uni043A = -40;
uni043B = -40;
uni043C = -40;
uni043D = -40;
uni043E = -50;
uni043F = -40;
uni0440 = -40;
uni0441 = -50;
uni0444 = -50;
uni0445 = -20;
uni0446 = -40;
uni0447 = -40;
uni0448 = -40;
uni0449 = -40;
uni044B = -40;
uni044C = -40;
uni044D = -50;
uni044E = -40;
uni044F = -40;
uni0451 = -30;
uni0491 = -40;
};
uni0423 = {
a2_alt = -55;
braceright = 40;
bracketright = 40;
colon = -20;
comma = -100;
period = -100;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
semicolon = -20;
slash = -30;
uni0410 = -70;
uni0414 = -40;
uni0417 = -15;
uni041E = -15;
uni0421 = -15;
uni0422 = 10;
uni0423 = 16;
uni0424 = -15;
uni042D = -15;
uni042F = -20;
uni0430 = -60;
uni0431 = -20;
uni0432 = -30;
uni0433 = -30;
uni0434 = -70;
uni0435 = -55;
uni0436 = -10;
uni0437 = -55;
uni0438 = -30;
uni0439 = -20;
uni043A = -30;
uni043B = -50;
uni043C = -30;
uni043D = -30;
uni043E = -55;
uni043F = -30;
uni0440 = -30;
uni0441 = -55;
uni0444 = -55;
uni0446 = -30;
uni0447 = -30;
uni0448 = -30;
uni0449 = -30;
uni044B = -30;
uni044C = -30;
uni044D = -55;
uni044E = -30;
uni044F = -30;
uni0451 = -30;
uni0491 = -30;
};
uni0424 = {
comma = -50;
period = -50;
quotedblbase = -50;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0434 = -20;
uni0442 = 10;
};
uni0425 = {
bracketright = 40;
uni0417 = -20;
uni041E = -40;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
};
uni0426 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0429 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni042A = {
quotedblright = -40;
quoteright = -20;
uni0422 = -50;
};
uni042C = {
quotedblleft = -60;
quotedblright = -40;
quoteright = -40;
uni0416 = -20;
uni0422 = -50;
uni0427 = -30;
};
uni042D = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni042E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0431 = {
quoteright = 20;
uni0431 = 15;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0444 = 10;
uni0445 = -10;
};
uni0432 = {
uni0436 = -10;
uni0445 = -15;
uni044F = -10;
};
uni0433 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
uni0434 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0435 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0436 = {
a2_alt = -10;
slash = 30;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0437 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni043A = {
a2_alt = -10;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni043E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0440 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0441 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0442 = {
colon = 20;
quotedblright = 40;
quoteright = 40;
uni0434 = -20;
uni0442 = 30;
uni0443 = 20;
uni044A = 20;
};
uni0443 = {
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
uni0442 = 10;
uni0443 = 10;
};
uni0444 = {
quotedblright = -30;
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0445 = {
a2_alt = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0446 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0449 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni044C = {
quotedblright = -40;
uni0442 = -30;
uni044F = -10;
};
uni044D = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni044E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0451 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0490 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0433 = -40;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
uni0491 = -40;
};
uni0491 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
v = {
comma = -20;
period = -20;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
};
w = {
quotedblright = 40;
quoteright = 40;
};
w_alt = {
quotedblright = 40;
quoteright = 40;
};
wacute = {
quotedblright = 40;
quoteright = 40;
};
wcircumflex = {
quotedblright = 40;
quoteright = 40;
};
wdieresis = {
quotedblright = 40;
quoteright = 40;
};
wgrave = {
quotedblright = 40;
quoteright = 40;
};
x = {
a2_alt = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
y2_alt = {
a2_alt = -5;
c = -5;
c_alt = -5;
cacute = -5;
ccaron = -5;
ccedilla = -5;
ccircumflex = -5;
cdotaccent = -5;
comma = -20;
d = -5;
dcaron = -5;
dcroat = -5;
e = -5;
eacute = -5;
ebreve = -5;
ecaron = -5;
ecircumflex = -5;
edieresis = -5;
edotaccent = -5;
egrave = -5;
emacron = -5;
eogonek = -5;
eth = -5;
g = -5;
gbreve = -5;
gcircumflex = -5;
gdotaccent = -5;
o = -5;
oacute = -5;
obreve = -5;
ocircumflex = -5;
odieresis = -5;
oe = -5;
ograve = -5;
ohungarumlaut = -5;
omacron = -5;
oslash = -5;
otilde = -5;
period = -20;
q = -5;
quotedblbase = -20;
quotedblright = 40;
quoteright = 40;
s = -5;
s_alt = -5;
sacute = -5;
scaron = -5;
scedilla = -5;
scircumflex = -5;
uni0123 = -5;
uni0219 = -5;
};
z = {
quotedblright = 40;
quoteright = 40;
};
zero = {
two = -15;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The Onest Project Authors (https://github.com/googlefonts/onest)";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Onest;
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Dmitri Voloshin, Andrey Kudryavtsev";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Andrey Kudryavtsev, Dmitri Voloshin";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://onest.md";
},
{
key = designerURL;
value = "https://onest.md";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
