{
.appVersion = "3112";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = PYRS;
},
{
name = panose;
value = (
2,
11,
5,
3,
3,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
9,
31,
33,
35,
37,
38,
47
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
uni0000,
uni000D,
space,
B,
D,
E,
F,
H,
I,
L,
M,
N,
P,
R,
U,
V,
W,
X,
Y,
Z,
b,
d,
h,
i,
l,
m,
n,
p,
q,
u,
v,
w,
x,
z,
period,
comma,
A,
breve,
circumflex,
uni0326,
abreve,
acircumflex,
Abreve,
Acircumflex,
Icircumflex,
exclam,
quotedbl,
quotesingle,
numbersign,
percent,
asterisk,
plus,
slash,
colon,
semicolon,
less,
equal,
greater,
at,
bracketleft,
bracketright,
backslash,
asciicircum,
underscore,
braceleft,
bar,
braceright,
Euro,
quotedblbase,
quotesinglbase,
quotedblright,
quoteright,
quotedblleft,
quoteleft,
minus,
hyphen,
endash,
emdash,
grave,
acute,
guillemotright,
guilsinglright,
guillemotleft,
guilsinglleft,
uni00AD,
ellipsis,
uni0445,
uni0431,
uni0432,
uni0433,
uni0434,
uni0436,
uni043A,
uni0438,
uni0439,
uni043B,
uni043C,
uni043D,
uni043F,
uni0442,
uni0444,
uni0446,
uni0447,
uni0448,
uni0449,
uni044A,
uni044B,
uni044C,
uni044E,
uni044F,
uni0410,
uni0415,
uni041C,
uni041D,
uni0420,
uni0422,
uni0425,
T,
uni0412,
uni041F,
uni0413,
uni041B,
uni0414,
uni0411,
uni0416,
uni0417,
uni0418,
uni0419,
uni041A,
uni0423,
uni0424,
uni0426,
uni0427,
uni0428,
uni0429,
uni042A,
uni042B,
uni042C,
uni042D,
uni042E,
uni042F,
uni0440,
O,
a,
c,
e,
f,
g,
j,
o,
r,
t,
y2_alt,
uni0443,
uni0451,
uni0437,
uni044D,
C,
S,
uni0421,
G,
uni041E,
Q,
J,
K_alt,
K,
k_alt,
k,
i_alt,
j_alt,
s_alt,
s,
c_alt,
copyright,
ampersand,
dollar,
parenleft,
parenright,
cent,
section,
uni04C1,
uni04C2,
w_alt,
W_alt,
zero,
one,
two,
three,
four,
seven,
eight,
nine,
uni0430,
uni0435,
uni043E,
uni0441,
uni0218,
uni0219,
uni021A,
uni021B,
icircumflex,
question,
uni2116,
uni0401,
asciitilde,
trademark,
registered,
degree,
bullet,
uni27F5,
uni27F6,
arrowup,
arrowdown,
uni21BA,
uni21BB,
uni21B7,
uni21B6,
five,
six,
dieresis,
adieresis,
Adieresis,
cedilla,
Ecircumflex,
ecircumflex,
Odieresis,
odieresis,
dotlessi,
Idotaccent,
udieresis,
Udieresis,
ccedilla,
uni0162,
uni0163,
Ccedilla,
scedilla,
uni21A9,
uni2713,
divide,
multiply,
yen,
uni20BD,
uni20B4,
sterling,
Scedilla,
t_alt,
alt_1,
uni2117,
colon.uc,
y_alt,
u_alt,
be_alt,
g_alt,
y,
t2.alt,
f_alt,
hyphen.uc,
uni00AD.uc,
endash.uc,
emdash.uc,
a_alt,
uni0490,
uni0491,
uni0406,
uni0456,
uni0404,
uni0454,
uni0407,
uni0457,
t0163.alt,
t021b.alt,
uni202F,
uni2009,
uni00A0,
map,
logo,
a00E2.alt,
a0103.alt,
a00E4.alt,
a2_alt,
logom,
plusminus,
notequal,
greaterequal,
lessequal,
approxequal,
twosuperior,
threesuperior,
I_alt,
tab_1,
l_alt,
l2_alt,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE008,
uniE009,
arrowright,
arrowleft,
uni2197,
uni2196,
uni2198,
uni2199,
uniE010,
uniE011,
uniE012,
uniE013,
uniE014,
uniE015,
uniE016,
uniE017,
uniE018,
uniE019,
uniE020,
uniE021,
uniE022,
paragraph,
ordfeminine,
hungarumlaut,
macron,
periodcentered,
exclamdown,
questiondown,
ordmasculine,
caron,
dotaccent,
tilde,
ogonek,
ring,
gravecomb,
acutecomb,
uni0302,
tildecomb,
uni0304,
uni0306,
uni0307,
uni0308,
uni030A,
uni030B,
uni030C,
uni0312,
uni0327,
uni0328,
AE,
Oslash,
ae,
oslash,
germandbls,
uni1E9E,
Eth,
OE,
oe,
Thorn,
thorn,
eth,
Agrave,
Aacute,
Atilde,
Aring,
Egrave,
Eacute,
Edieresis,
Igrave,
Iacute,
Idieresis,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Ugrave,
Uacute,
Ucircumflex,
Yacute,
agrave,
aacute,
atilde,
aring,
egrave,
eacute,
edieresis,
igrave,
iacute,
idieresis,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
ugrave,
uacute,
ucircumflex,
yacute,
ydieresis,
Amacron,
amacron,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
Dcroat,
Emacron,
emacron,
dcroat,
dcaron,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
uni0122,
uni0123,
Hbar,
hbar,
Imacron,
imacron,
Iogonek,
iogonek,
IJ,
ij,
uni0136,
uni0137,
Lacute,
lacute,
uni013B,
uni013C,
Lcaron,
lcaron,
Ldot,
ldot,
Nacute,
nacute,
Ncaron,
ncaron,
Eng,
eng,
Ebreve,
ebreve,
Gcircumflex,
gcircumflex,
Hcircumflex,
hcircumflex,
Itilde,
itilde,
Ibreve,
ibreve,
Jcircumflex,
jcircumflex,
kgreenlandic,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
Racute,
racute,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scaron,
scaron,
Tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
Tbar,
tbar,
tcaron,
uni0156,
uni0157,
uni0145,
uni0146,
napostrophe,
Lslash,
lslash,
uni0237,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
uni0405,
uni0455,
uni0458,
uni0408,
uni040E,
uni045E
);
}
);
date = "2022-02-06 07:28:40 +0000";
familyName = Onest;
featurePrefixes = (
{
code = "lookup SUB_22 {
	sub colon by colon.uc;
	sub hyphen by hyphen.uc;
	sub endash by endash.uc;
	sub emdash by emdash.uc;
	sub uni00AD by uni00AD.uc;
	sub t by t2.alt;
	sub uni021B by t021b.alt;
	sub uni0163 by t0163.alt;
} SUB_22;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_0;
lookup SUB_0;
script cyrl;
language dflt;
lookup SUB_0;
lookup SUB_1 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_1;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
lookup SUB_2 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_2;
lookup SUB_0;
language AZE;
lookup SUB_0;
lookup SUB_0;
language MOL;
lookup SUB_0;
lookup SUB_0;
language ROM;
lookup SUB_0;
lookup SUB_0;
language TRK;
lookup SUB_0;
lookup SUB_0;
";
tag = salt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 useExtension {
	sub colon by colon.uc;
} SUB_3;
script cyrl;
language dflt;
lookup SUB_3;
script latn;
language dflt;
lookup SUB_3;
language AZE;
lookup SUB_3;
language MOL;
lookup SUB_3;
language ROM;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	@SUB_4_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_0_BT_0 colon' lookup SUB_22;
	@SUB_4_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_1_BT_0 hyphen' lookup SUB_22;
	@SUB_4_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_2_BT_0 endash' lookup SUB_22;
	@SUB_4_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_3_BT_0 emdash' lookup SUB_22;
	@SUB_4_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_4_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_4_5_LA_0;
	@SUB_4_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_4_6_LA_0;
	@SUB_4_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_4_7_LA_0;
} SUB_4;
lookup SUB_5 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_5;
script cyrl;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6 {
	@SUB_6_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_0_BT_0 colon' lookup SUB_22;
	@SUB_6_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_1_BT_0 hyphen' lookup SUB_22;
	@SUB_6_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_2_BT_0 endash' lookup SUB_22;
	@SUB_6_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_3_BT_0 emdash' lookup SUB_22;
	@SUB_6_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_6_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_6_5_LA_0;
	@SUB_6_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_6_6_LA_0;
	@SUB_6_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_6_7_LA_0;
} SUB_6;
lookup SUB_7 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_7;
script latn;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8 {
	@SUB_8_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_0_BT_0 colon' lookup SUB_22;
	@SUB_8_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_1_BT_0 hyphen' lookup SUB_22;
	@SUB_8_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_2_BT_0 endash' lookup SUB_22;
	@SUB_8_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_3_BT_0 emdash' lookup SUB_22;
	@SUB_8_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_8_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_8_5_LA_0;
	@SUB_8_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_8_6_LA_0;
	@SUB_8_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_8_7_LA_0;
} SUB_8;
lookup SUB_9 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_9;
language AZE;
lookup SUB_4;
lookup SUB_5;
language MOL;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language ROM;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language TRK;
lookup SUB_4;
lookup SUB_5;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub l by l_alt;
	sub abreve by a0103.alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
} SUB_10;
script cyrl;
language dflt;
lookup SUB_10;
lookup SUB_11 {
	sub l by l_alt;
	sub abreve by a0103.alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
} SUB_11;
script latn;
language dflt;
lookup SUB_10;
lookup SUB_12 {
	sub l by l_alt;
	sub abreve by a0103.alt;
	sub acircumflex by a00E2.alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub adieresis by a00E4.alt;
	sub y by y_alt;
} SUB_12;
language AZE;
lookup SUB_10;
language MOL;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_13;
script cyrl;
language dflt;
lookup SUB_13;
lookup SUB_14 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_14;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_15;
language AZE;
lookup SUB_13;
language MOL;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_16;
script cyrl;
language dflt;
lookup SUB_16;
lookup SUB_18 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_18;
script latn;
language dflt;
lookup SUB_16;
lookup SUB_17 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_17;
language AZE;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TRK;
lookup SUB_16;
script cyrl;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_19;
script cyrl;
language dflt;
lookup SUB_19;
lookup SUB_21 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_21;
script latn;
language dflt;
lookup SUB_19;
lookup SUB_20 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_20;
language AZE;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
script cyrl;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
";
tag = tnum;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 970;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 49 29 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 4 36 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01262 2 46 6 27 5 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123648 2368 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01258 4 38 8 20 7 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    65,\012    65,\012    56,\012    56,\012    707,\012    0,\012    527,\012    0,\012    \"-197\",\012    970,\012    \"-305\",\012    715,\012    \"-8\",\012    533,\012    \"-6\",\012    \"-235\",\012    970,\012    \"-305\",\012    65,\012    65,\012    56,\012    56,\012    707,\012    0,\012    707,\012    527,\012    0,\012    \"-197\",\012    970,\012    \"-305\",\012    715,\012    \"-8\",\012    717,\012    533,\012    \"-6\",\012    \"-245\",\012    970,\012    \"-305\",\012    24,\012    24,\012    24,\012    24,\012    772,\012    419,\012    970,\012    \"-305\",\012    772,\012    415,\012    970,\012    \"-305\"\012)";
}
);
iconName = Light;
id = m01;
metricValues = (
{
pos = 970;
},
{
pos = 707;
},
{
pos = 527;
},
{
},
{
pos = -305;
},
{
}
);
name = Light;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,-295,l),
(520,960,l),
(20,960,l),
(20,-295,l)
);
},
{
closed = 1;
nodes = (
(510,950,l),
(510,-285,l),
(30,-285,l),
(30,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 0 95 0 0 0 68 77 0 2 2 1 95 0 1 1 69 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = ".notdef";
},
{
glyphname = uni0000;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni0000;
},
{
glyphname = uni000D;
layers = (
{
layerId = m01;
width = 189;
}
);
note = uni000D;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 270;
}
);
note = space;
unicode = 32;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,0,ls),
(378,0,o),
(476,16,o),
(554,59,o),
(603,133,o),
(603,192,qs),
(603,266,o),
(522,360,o),
(450,372,q),
(506,390,o),
(565,473,o),
(565,533,qs),
(565,588,o),
(527,656,o),
(464,694,o),
(381,707,o),
(335,707,qs),
(91,707,l),
(91,0,l)
);
},
{
closed = 1;
nodes = (
(368,647,o),
(428,639,o),
(475,615,o),
(503,568,o),
(503,529,qs),
(503,489,o),
(469,436,o),
(415,404,o),
(348,391,o),
(314,391,qs),
(156,391,l),
(156,647,l),
(336,647,ls)
);
},
{
closed = 1;
nodes = (
(156,331,l),
(356,331,ls),
(390,331,o),
(456,319,o),
(506,289,o),
(537,237,o),
(537,196,qs),
(537,149,o),
(498,95,o),
(437,68,o),
(362,60,o),
(326,60,qs),
(156,60,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 38 77 7 1 4 4 1 95 0 1 1 39 1 78 33 32 19 19 43 41 32 44 33 44 19 31 19 30 34 46 32 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = B;
unicode = 66;
},
{
glyphname = D;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,0,ls),
(420,0,o),
(544,52,o),
(627,145,o),
(670,275,o),
(670,353,qs),
(670,432,o),
(628,563,o),
(545,656,o),
(421,707,o),
(339,707,qs),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(405,648,o),
(505,603,o),
(571,524,o),
(603,416,o),
(603,353,qs),
(603,288,o),
(569,180,o),
(501,102,o),
(399,59,o),
(332,59,qs),
(157,59,l),
(157,648,l),
(338,648,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 13 13 13 25 13 24 34 40 32 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,298,l),
(499,298,l),
(499,358,l),
(157,358,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 5 1 4 4 39 4 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = F;
unicode = 70;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,707,l),
(92,707,l),
(92,0,l),
(157,0,l),
(157,317,l),
(573,317,l),
(573,0,l),
(638,0,l),
(638,707,l),
(573,707,l),
(573,377,l),
(157,377,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 1 5 0 2 1 5 2 103 4 1 0 0 38 77 3 1 1 1 39 1 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = I;
unicode = 73;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l),
(557,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 38 77 0 1 1 2 95 3 1 2 2 39 2 78 0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,292,l),
(197,707,l),
(92,707,l),
(92,0,l),
(157,0,l),
(157,646,l),
(404,188,l),
(435,188,l),
(495,299,o),
(619,535,o),
(679,646,q),
(679,0,l),
(744,0,l),
(744,707,l),
(643,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
13 8 3 3 1 3 1 76 0 1 3 0 3 1 0 128 5 4 2 3 3 38 77 2 1 0 0 39 0 78 0 0 0 14 0 14 17 18 20 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 836;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,641,l),
(557,0,l),
(656,0,l),
(656,707,l),
(591,707,l),
(591,64,l),
(193,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 38 77 4 3 2 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = N;
unicode = 78;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,0,l),
(157,241,l),
(312,241,ls),
(368,241,o),
(465,269,o),
(536,328,o),
(577,416,o),
(577,476,qs),
(577,595,o),
(447,707,o),
(332,707,qs),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(157,647,l),
(327,647,ls),
(412,647,o),
(510,570,o),
(510,480,qs),
(510,433,o),
(481,365,o),
(429,321,o),
(355,301,o),
(310,301,qs),
(157,301,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 38 77 0 2 2 39 2 78 14 13 22 20 13 23 14 23 17 38 32 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = P;
unicode = 80;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,0,l),
(593,0,l),
(439,287,l),
(518,307,o),
(602,409,o),
(602,490,qs),
(602,550,o),
(566,633,o),
(500,684,o),
(408,707,o),
(353,707,qs),
(92,707,l),
(92,0,l),
(157,0,l),
(157,276,l),
(372,276,l)
);
},
{
closed = 1;
nodes = (
(157,647,l),
(344,647,ls),
(385,647,o),
(455,633,o),
(506,599,o),
(535,539,o),
(535,493,qs),
(535,444,o),
(501,383,o),
(445,348,o),
(370,336,o),
(330,336,qs),
(157,336,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
12 1 3 4 1 76 7 1 4 6 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 17 16 0 0 27 25 16 28 17 28 0 15 0 15 24 33 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = R;
unicode = 82;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 0 25 0 25 37 21 37 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,707,l),
(286,0,l),
(378,0,l),
(644,707,l),
(571,707,l),
(333,60,l),
(93,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
2 1 0 0 38 77 0 1 1 39 1 78 17 17 17 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 663;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,648,l),
(641,0,l),
(742,0,l),
(934,707,l),
(860,707,l),
(692,60,l),
(530,707,l),
(425,707,l),
(262,60,l),
(94,707,l),
(19,707,l),
(211,0,l),
(313,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 38 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 953;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,707,l),
(26,707,l),
(247,354,l),
(19,0,l),
(98,0,l),
(290,303,l),
(481,0,l),
(562,0,l),
(333,357,l),
(553,707,l),
(472,707,l),
(290,407,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,707,l),
(19,707,l),
(270,267,l),
(270,0,l),
(335,0,l),
(335,267,l),
(584,707,l),
(509,707,l),
(304,334,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
8 5 2 3 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 18 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,57,l),
(49,0,l),
(545,0,l),
(545,60,l),
(127,60,l),
(550,651,l),
(550,707,l),
(63,707,l),
(63,647,l),
(466,647,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 3 0 8 1 2 1 2 76 4 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = Z;
unicode = 90;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,54,o),
(197,22,o),
(246,3,o),
(298,-5,o),
(323,-5,qs),
(368,-5,o),
(443,20,o),
(470,41,qs),
(515,75,o),
(558,185,o),
(560,253,qs),
(561,309,o),
(537,412,o),
(481,490,o),
(393,536,o),
(331,536,qs),
(271,536,o),
(170,490,o),
(138,441,q),
(138,707,l),
(72,707,l),
(72,0,l),
(136,0,l),
(137,78,l)
);
},
{
closed = 1;
nodes = (
(210,85,qs),
(169,116,o),
(136,213,o),
(136,262,qs),
(136,303,o),
(156,378,o),
(179,407,qs),
(202,438,o),
(274,477,o),
(317,477,qs),
(366,477,o),
(433,442,o),
(475,384,o),
(494,305,o),
(494,262,qs),
(494,220,o),
(474,143,o),
(432,84,o),
(366,50,o),
(319,50,qs),
(257,50,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 4 2 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 1 38 77 0 5 5 2 97 0 2 2 49 77 6 1 4 4 0 97 3 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 38 77 0 5 5 2 97 0 2 2 49 77 0 0 0 39 77 6 1 4 4 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
25 24 35 33 24 44 25 44 41 35 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = b;
unicode = 98;
},
{
glyphname = d;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,472,o),
(420,504,o),
(373,524,o),
(321,533,o),
(295,533,qs),
(238,533,o),
(149,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(220,-6,o),
(282,-6,qs),
(342,-6,o),
(442,38,o),
(475,83,q),
(475,0,l),
(541,0,l),
(541,707,l),
(475,707,l),
(475,449,l)
);
},
{
closed = 1;
nodes = (
(381,458,o),
(404,441,qs),
(445,410,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(325,477,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 4 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 0 38 77 6 1 4 4 3 97 0 3 3 49 77 0 5 5 1 97 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 38 77 6 1 4 4 3 97 0 3 3 49 77 0 1 1 39 77 0 5 5 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
24 23 34 32 23 44 24 44 40 35 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = d;
unicode = 100;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(185,416,qs),
(208,444,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(372,533,o),
(330,533,qs),
(300,533,o),
(241,522,o),
(216,510,qs),
(191,497,o),
(152,463,o),
(138,439,q),
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 2 3 1 76 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 0 0 0 31 0 31 38 22 38 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,692,o),
(64,669,qs),
(64,646,o),
(91,620,o),
(113,620,qs),
(135,620,o),
(163,646,o),
(163,669,qs),
(163,691,o),
(135,717,o),
(113,717,qs),
(91,717,o)
);
},
{
closed = 1;
nodes = (
(146,0,l),
(146,527,l),
(80,527,l),
(80,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 1 0 97 4 1 0 0 48 77 0 2 2 41 77 0 3 3 39 3 78 1 0 15 14 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 227;
}
);
note = i;
unicode = 105;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,270,ls),
(138,306,o),
(146,372,o),
(161,401,qs),
(178,434,o),
(238,475,o),
(276,476,qs),
(314,476,o),
(358,446,o),
(380,396,o),
(386,335,o),
(386,305,qs),
(386,0,l),
(452,0,l),
(452,285,ls),
(452,326,o),
(473,409,o),
(500,438,qs),
(517,455,o),
(563,476,o),
(593,476,qs),
(630,476,o),
(674,444,o),
(695,395,o),
(701,335,o),
(701,306,qs),
(701,0,l),
(767,0,l),
(767,348,ls),
(767,432,o),
(688,531,o),
(603,533,qs),
(575,534,o),
(524,523,o),
(479,499,o),
(444,461,o),
(435,435,q),
(422,483,o),
(346,533,o),
(295,533,qs),
(247,534,o),
(164,497,o),
(137,457,q),
(135,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 0 2 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 3 0 97 7 1 2 0 0 49 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 7 7 41 77 5 1 3 3 0 97 1 1 0 0 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 22 37 22 37 19 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 834;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(186,416,qs),
(209,443,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(373,533,o),
(330,533,qs),
(298,533,o),
(243,522,o),
(217,509,qs),
(194,498,o),
(152,461,o),
(138,437,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 3 0 97 1 1 0 0 41 77 5 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 31 0 31 38 22 38 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = n;
unicode = 110;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,51,o),
(197,19,o),
(245,1,o),
(297,-6,o),
(323,-6,qs),
(368,-6,o),
(443,17,o),
(470,38,qs),
(515,72,o),
(558,182,o),
(560,250,qs),
(561,306,o),
(537,409,o),
(481,487,o),
(393,533,o),
(331,533,qs),
(293,533,o),
(230,517,o),
(198,497,qs),
(162,474,o),
(138,437,q),
(138,527,l),
(72,527,l),
(72,-197,l),
(138,-197,l),
(138,76,l)
);
},
{
closed = 1;
nodes = (
(208,84,qs),
(167,115,o),
(136,213,o),
(136,262,qs),
(136,303,o),
(156,378,o),
(179,407,qs),
(202,438,o),
(273,477,o),
(317,477,qs),
(366,477,o),
(433,442,o),
(475,384,o),
(494,305,o),
(494,262,qs),
(494,220,o),
(474,143,o),
(432,84,o),
(366,50,o),
(319,50,qs),
(254,50,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
25 4 2 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 1 97 2 1 1 1 41 77 6 1 4 4 3 97 0 3 3 50 77 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 3 0 134 0 5 5 1 97 2 1 1 1 41 77 6 1 4 4 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 3 0 134 0 1 1 41 77 0 5 5 2 97 0 2 2 49 77 6 1 4 4 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
27 26 37 35 26 46 27 46 41 37 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,470,o),
(426,498,o),
(407,508,qs),
(381,522,o),
(324,533,o),
(292,533,qs),
(235,533,o),
(147,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(220,-6,o),
(282,-6,qs),
(322,-6,o),
(395,12,o),
(425,33,qs),
(439,43,o),
(464,65,o),
(475,82,q),
(475,-197,l),
(541,-197,l),
(541,527,l),
(479,527,l),
(475,449,l)
);
},
{
closed = 1;
nodes = (
(405,442,qs),
(446,411,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(182,442,o),
(248,477,o),
(295,477,qs),
(358,477,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
26 4 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 0 97 3 1 0 0 41 77 0 5 5 2 97 0 2 2 50 77 0 1 1 43 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 2 1 134 6 1 4 4 0 97 3 1 0 0 41 77 0 5 5 2 97 0 2 2 50 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 2 1 134 0 0 0 41 77 6 1 4 4 3 97 0 3 3 49 77 0 5 5 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
28 27 38 36 27 47 28 47 40 38 17 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = q;
unicode = 113;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 41 77 4 1 0 0 2 97 0 2 2 50 2 78 1 0 16 15 12 10 7 6 0 21 1 21 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,0,l),
(512,527,l),
(436,527,l),
(262,55,l),
(87,527,l),
(12,527,l),
(215,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 41 77 0 2 2 39 2 78 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,527,l),
(226,55,l),
(92,527,l),
(17,527,l),
(179,0,l),
(273,0,l),
(411,474,l),
(549,0,l),
(642,0,l),
(802,527,l),
(727,527,l),
(596,55,l),
(462,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
10 5 2 1 0 1 76 4 3 2 0 0 41 77 2 1 1 1 39 1 78 18 17 18 17 17 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,0,l),
(297,266,l),
(476,527,l),
(396,527,l),
(255,312,l),
(111,527,l),
(28,527,l),
(209,267,l),
(19,0,l),
(97,0,l),
(251,219,l),
(407,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 0 1 1 76 2 1 1 1 41 77 3 1 0 0 39 0 78 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = x;
unicode = 120;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,527,l),
(57,472,l),
(394,472,l),
(52,60,l),
(52,0,l),
(472,0,l),
(472,55,l),
(127,55,l),
(472,468,l),
(472,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
5 0 2 0 2 1 76 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = z;
unicode = 122;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,66,o),
(72,44,qs),
(72,22,o),
(100,-8,o),
(123,-8,qs),
(146,-8,o),
(173,22,o),
(173,44,qs),
(173,66,o),
(146,94,o),
(123,94,qs),
(100,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 47 1 78 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,66,o),
(74,44,qs),
(74,19,o),
(102,-10,o),
(128,-8,q),
(123,-37,o),
(94,-79,o),
(72,-93,q),
(88,-119,l),
(131,-101,o),
(180,-18,o),
(179,27,qs),
(180,54,o),
(155,93,o),
(126,94,qs),
(103,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
10 7 6 3 0 73 1 1 0 0 118 1 0 0 15 1 15 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = comma;
unicode = 44;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
10 1 4 1 1 76 0 4 5 1 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 0 0 9 8 0 7 0 7 17 17 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = A;
unicode = 65;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,674,o),
(206,690,o),
(189,718,o),
(186,740,q),
(126,740,l),
(129,705,o),
(156,658,o),
(198,630,o),
(253,618,o),
(285,618,qs),
(316,618,o),
(371,630,o),
(415,658,o),
(443,705,o),
(446,740,q),
(386,740,l),
(383,718,o),
(365,690,o),
(339,674,o),
(305,668,o),
(286,668,qs),
(267,668,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 133 4 1 0 2 2 0 89 4 1 0 0 2 97 0 2 0 2 81 1 0 17 16 12 10 6 5 0 21 1 21 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 572;
}
);
note = breve;
unicode = 728;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,628,l),
(285,769,l),
(244,769,l),
(121,628,l),
(186,628,l),
(264,721,l),
(344,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 2 1 0 0 118 17 17 17 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 529;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-343,-120,o),
(-343,-142,qs),
(-343,-166,o),
(-314,-195,o),
(-289,-193,q),
(-294,-222,o),
(-323,-264,o),
(-345,-278,q),
(-329,-304,l),
(-286,-286,o),
(-236,-203,o),
(-237,-160,qs),
(-236,-130,o),
(-264,-91,o),
(-291,-91,qs),
(-314,-91,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
10 7 6 3 0 73 1 1 0 0 118 1 0 0 15 1 15 2 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = abreve;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,674,o),
(200,689,o),
(179,717,o),
(176,740,q),
(115,740,l),
(118,705,o),
(147,658,o),
(192,629,o),
(250,617,o),
(281,617,qs),
(312,617,o),
(370,629,o),
(417,658,o),
(448,705,o),
(451,740,q),
(390,740,l),
(387,717,o),
(366,689,o),
(336,674,o),
(300,668,o),
(283,668,qs),
(266,668,o)
);
},
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,495,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(187,520,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,106,o),
(85,50,o),
(136,12,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,29,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
12 1 0 0 2 8 0 2 105 3 1 1 0 7 5 1 7 103 0 5 13 1 10 11 5 10 104 0 6 6 8 97 0 8 8 49 77 0 11 11 4 97 9 1 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
12 1 0 0 2 8 0 2 105 3 1 1 0 7 5 1 7 103 0 5 13 1 10 11 5 10 104 0 6 6 8 97 0 8 8 49 77 0 9 9 39 77 0 11 11 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
62 60 1 0 71 69 60 76 62 76 59 58 53 51 47 46 42 40 36 34 26 24 17 16 12 10 6 5 0 21 1 21 14 8 22 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = acircumflex;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,623,l),
(309,769,l),
(268,769,l),
(145,623,l),
(210,623,l),
(288,720,l),
(370,623,l)
);
},
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,495,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(187,520,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,106,o),
(85,50,o),
(136,12,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,29,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 0 1 133 2 1 0 7 0 133 0 6 5 4 5 6 4 128 0 4 11 1 9 10 4 9 103 0 5 5 7 97 0 7 7 49 77 0 10 10 3 97 8 1 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 1 0 1 133 2 1 0 7 0 133 0 6 5 4 5 6 4 128 0 4 11 1 9 10 4 9 103 0 5 5 7 97 0 7 7 49 77 0 8 8 39 77 0 10 10 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
47 45 56 54 45 61 47 61 21 36 20 36 40 35 17 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,861,o),
(243,876,o),
(222,904,o),
(219,927,q),
(158,927,l),
(161,892,o),
(190,845,o),
(235,816,o),
(293,804,o),
(324,804,qs),
(355,804,o),
(413,816,o),
(460,845,o),
(491,892,o),
(494,927,q),
(433,927,l),
(430,904,o),
(409,876,o),
(379,861,o),
(343,855,o),
(326,855,qs),
(309,855,o)
);
},
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
32 1 8 5 1 76 3 1 1 0 1 133 9 1 0 0 2 5 0 2 105 0 8 10 1 7 4 8 7 104 0 5 5 38 77 6 1 4 4 39 4 78 22 22 1 0 31 30 22 29 22 29 28 27 26 25 24 23 17 16 12 10 6 5 0 21 1 21 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
},
{
closed = 1;
nodes = (
(469,786,l),
(346,927,l),
(305,927,l),
(182,786,l),
(247,786,l),
(325,879,l),
(405,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 1 4 1 1 76 0 6 5 6 133 7 1 5 1 5 133 0 4 8 1 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 0 0 17 16 15 14 13 12 9 8 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,800,l),
(100,946,l),
(59,946,l),
(-64,800,l),
(0,800,l),
(79,897,l),
(161,800,l)
);
},
{
closed = 1;
nodes = (
(46,707,l),
(46,0,l),
(111,0,l),
(111,707,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
2 1 0 1 4 1 0 4 128 0 1 1 44 77 0 4 4 38 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 1 133 2 1 0 4 0 133 0 4 4 38 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 17 17 17 17 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 159;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,66,o),
(82,43,qs),
(82,20,o),
(109,-8,o),
(132,-8,qs),
(154,-8,o),
(181,21,o),
(181,43,qs),
(181,64,o),
(153,93,o),
(132,93,qs),
(109,93,o)
);
},
{
closed = 1;
nodes = (
(164,707,l),
(100,707,l),
(102,195,l),
(162,195,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 3 3 2 95 0 2 2 38 77 4 1 0 0 1 97 0 1 1 47 1 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 263;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,707,l),
(74,486,l),
(120,486,l),
(129,707,l)
);
},
{
closed = 1;
nodes = (
(206,707,l),
(216,486,l),
(262,486,l),
(271,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 38 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(81,486,l),
(127,486,l),
(137,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 38 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 209;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,187,l),
(145,0,l),
(207,0,l),
(227,187,l),
(392,187,l),
(373,0,l),
(435,0,l),
(455,187,l),
(561,187,l),
(561,245,l),
(461,245,l),
(484,463,l),
(591,463,l),
(591,521,l),
(491,521,l),
(511,707,l),
(448,707,l),
(429,521,l),
(263,521,l),
(283,707,l),
(220,707,l),
(200,521,l),
(94,521,l),
(94,463,l),
(194,463,l),
(171,245,l),
(64,245,l),
(64,187,l)
);
},
{
closed = 1;
nodes = (
(422,463,l),
(400,245,l),
(233,245,l),
(256,463,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
14 8 2 0 13 11 2 9 10 0 9 103 5 1 3 3 38 77 15 7 2 1 1 2 95 6 4 2 2 2 41 77 12 1 10 10 39 10 78 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(659,707,l),
(584,707,l),
(149,0,l),
(225,0,l)
);
},
{
closed = 1;
nodes = (
(287,439,o),
(322,479,o),
(339,534,o),
(339,565,qs),
(339,596,o),
(322,650,o),
(288,691,o),
(237,715,o),
(203,715,qs),
(169,715,o),
(117,692,o),
(82,652,o),
(64,597,o),
(64,565,qs),
(64,533,o),
(82,478,o),
(118,438,o),
(170,415,o),
(203,415,qs),
(236,415,o)
);
},
{
closed = 1;
nodes = (
(255,641,o),
(273,614,o),
(280,581,o),
(280,565,qs),
(280,548,o),
(273,515,o),
(255,488,o),
(225,471,o),
(203,471,qs),
(180,471,o),
(149,487,o),
(130,514,o),
(121,547,o),
(121,565,qs),
(121,583,o),
(130,616,o),
(149,642,o),
(180,658,o),
(203,658,qs),
(225,658,o)
);
},
{
closed = 1;
nodes = (
(693,16,o),
(728,56,o),
(745,111,o),
(745,142,qs),
(745,173,o),
(728,227,o),
(694,268,o),
(643,292,o),
(609,292,qs),
(575,292,o),
(523,269,o),
(488,229,o),
(470,174,o),
(470,142,qs),
(470,110,o),
(488,55,o),
(524,15,o),
(576,-8,o),
(609,-8,qs),
(642,-8,o)
);
},
{
closed = 1;
nodes = (
(661,218,o),
(679,191,o),
(686,158,o),
(686,142,qs),
(686,125,o),
(679,92,o),
(661,65,o),
(631,48,o),
(609,48,qs),
(586,48,o),
(555,64,o),
(536,91,o),
(527,124,o),
(527,142,qs),
(527,160,o),
(536,193,o),
(555,219,o),
(586,235,o),
(609,235,qs),
(631,235,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 11 1 2 7 5 2 105 0 7 14 1 8 9 7 8 106 12 1 4 4 0 97 3 1 0 0 38 77 0 9 9 1 97 13 6 10 3 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 11 1 2 7 5 2 105 0 7 14 1 8 9 7 8 106 0 0 0 38 77 12 1 4 4 3 97 0 3 3 46 77 10 1 1 1 39 77 0 9 9 6 97 13 1 6 6 47 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
65 64 45 44 25 24 5 4 0 0 75 73 64 83 65 83 55 53 44 63 45 63 35 33 24 43 25 43 15 13 4 23 5 23 0 3 0 3 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 809;
}
);
note = percent;
unicode = 37;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,738,l),
(186,637,l),
(89,668,l),
(74,619,l),
(170,587,l),
(110,506,l),
(151,476,l),
(211,558,l),
(271,476,l),
(312,506,l),
(252,587,l),
(349,619,l),
(331,668,l),
(236,637,l),
(236,738,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
12 11 10 9 8 7 6 5 4 3 2 1 0 13 0 73 0 0 0 118 29 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(225,385,l),
(79,385,l),
(79,325,l),
(225,325,l),
(225,165,l),
(290,165,l),
(290,325,l),
(439,325,l),
(439,385,l),
(290,385,l),
(290,542,l),
(225,542,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 0 3 1 1 2 0 1 103 0 2 2 5 95 6 1 5 5 41 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 5 0 2 5 87 4 1 0 3 1 1 2 0 1 103 6 1 5 5 2 95 0 2 5 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = plus;
unicode = 43;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,-173,l),
(426,804,l),
(356,804,l),
(44,-173,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = slash;
unicode = 47;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,430,o),
(72,408,qs),
(72,386,o),
(100,356,o),
(123,356,qs),
(146,356,o),
(173,386,o),
(173,408,qs),
(173,430,o),
(146,459,o),
(123,459,qs),
(100,459,o)
);
},
{
closed = 1;
nodes = (
(72,66,o),
(72,44,qs),
(72,22,o),
(100,-8,o),
(123,-8,qs),
(146,-8,o),
(173,22,o),
(173,44,qs),
(173,66,o),
(146,94,o),
(123,94,qs),
(100,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 47 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,430,o),
(77,408,qs),
(77,386,o),
(104,356,o),
(127,356,qs),
(151,356,o),
(178,386,o),
(178,408,qs),
(178,430,o),
(150,459,o),
(127,459,qs),
(104,459,o)
);
},
{
closed = 1;
nodes = (
(74,66,o),
(74,44,qs),
(74,19,o),
(102,-10,o),
(128,-8,q),
(123,-37,o),
(94,-79,o),
(72,-93,q),
(88,-119,l),
(131,-101,o),
(180,-18,o),
(179,27,qs),
(180,54,o),
(155,93,o),
(126,94,qs),
(103,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
22 19 18 3 2 73 4 1 2 1 2 134 3 1 0 1 1 0 89 3 1 0 0 1 97 0 1 0 1 81 13 12 1 0 12 27 13 27 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,111,l),
(367,182,l),
(114,353,l),
(367,519,l),
(367,590,l),
(44,367,l),
(44,333,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,191,l),
(465,251,l),
(74,251,l),
(74,191,l)
);
},
{
closed = 1;
nodes = (
(465,447,l),
(465,507,l),
(74,507,l),
(74,447,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 1 0 1 99 0 3 3 2 95 0 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,590,l),
(74,519,l),
(327,350,l),
(74,182,l),
(74,111,l),
(397,333,l),
(397,367,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = greater;
unicode = 62;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(700,34,o),
(747,34,qs),
(796,34,o),
(863,80,o),
(904,155,o),
(921,249,o),
(921,296,qs),
(921,386,o),
(869,539,o),
(768,651,o),
(622,715,o),
(529,715,qs),
(421,715,o),
(251,642,o),
(135,511,o),
(75,333,o),
(76,228,qs),
(77,134,o),
(136,-17,o),
(245,-124,o),
(398,-184,o),
(492,-185,qs),
(521,-186,o),
(575,-183,o),
(603,-178,q),
(597,-117,l),
(573,-122,o),
(527,-126,o),
(502,-125,qs),
(418,-122,o),
(286,-69,o),
(193,25,o),
(144,156,o),
(144,236,qs),
(144,323,o),
(195,476,o),
(292,590,o),
(435,656,o),
(528,656,qs),
(614,656,o),
(741,595,o),
(823,491,o),
(862,352,o),
(860,274,qs),
(859,239,o),
(848,172,o),
(823,119,o),
(782,86,o),
(752,86,qs),
(728,86,o),
(699,105,o),
(682,135,o),
(676,173,o),
(676,193,qs),
(676,225,o),
(682,286,o),
(684,317,qs),
(687,351,o),
(698,428,o),
(702,462,q),
(644,462,l),
(636,407,l),
(628,426,o),
(600,453,o),
(565,471,o),
(526,479,o),
(507,479,qs),
(455,479,o),
(378,438,o),
(326,370,o),
(300,282,o),
(300,235,qs),
(300,195,o),
(320,124,o),
(361,70,o),
(425,39,o),
(468,39,qs),
(517,38,o),
(602,84,o),
(630,131,q),
(635,83,o)
);
},
{
closed = 1;
nodes = (
(377,336,o),
(412,390,o),
(466,423,o),
(504,423,qs),
(537,423,o),
(584,397,o),
(613,354,o),
(626,299,o),
(626,270,qs),
(626,240,o),
(605,177,o),
(566,122,o),
(512,91,o),
(479,91,qs),
(448,91,o),
(403,116,o),
(374,157,o),
(360,209,o),
(360,237,qs),
(360,270,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
23 18 2 3 10 54 1 5 0 55 1 6 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
23 18 2 9 10 54 1 5 0 55 1 6 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 10 1 2 10 128 0 1 0 10 3 1 10 105 9 1 3 8 1 0 5 3 0 105 0 4 4 7 97 0 7 7 46 77 0 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 10 1 2 10 128 0 1 0 10 3 1 10 105 9 1 3 8 1 0 5 3 0 105 0 5 0 6 5 6 101 0 4 4 7 97 0 7 7 46 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 10 1 2 10 128 0 1 0 10 9 1 10 105 0 9 3 0 9 89 0 3 8 1 0 5 3 0 105 0 5 0 6 5 6 101 0 4 4 7 97 0 7 7 46 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
97 95 87 85 40 40 52 40 40 42 21 40 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 995;
}
);
note = at;
unicode = 64;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,-135,l),
(157,-135,l),
(157,737,l),
(277,737,l),
(277,793,l),
(92,793,l),
(92,-191,l),
(277,-191,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 1 2 0 1 103 0 2 2 3 95 4 1 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 4 1 3 2 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 317;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,737,l),
(159,737,l),
(159,-135,l),
(40,-135,l),
(40,-191,l),
(224,-191,l),
(224,793,l),
(40,793,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 316;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,-173,l),
(426,-173,l),
(114,804,l),
(44,804,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,528,l),
(238,715,l),
(195,715,l),
(64,528,l),
(126,528,l),
(216,663,l),
(308,528,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 2 1 0 0 118 17 17 17 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 433;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,-182,l),
(461,-122,l),
(2,-122,l),
(2,-182,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 463;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,212,o),
(168,280,o),
(121,302,q),
(166,323,o),
(204,392,o),
(204,440,qs),
(204,652,ls),
(204,668,o),
(206,714,o),
(217,727,qs),
(228,740,o),
(263,742,o),
(280,742,qs),
(320,742,l),
(320,793,l),
(252,793,ls),
(225,793,o),
(184,783,o),
(170,771,qs),
(143,747,o),
(143,694,qs),
(143,469,ls),
(143,442,o),
(135,391,o),
(113,351,o),
(74,326,o),
(42,324,q),
(42,278,l),
(75,276,o),
(114,251,o),
(136,212,o),
(143,162,o),
(143,134,qs),
(143,-91,ls),
(143,-144,o),
(171,-169,qs),
(197,-191,o),
(252,-191,qs),
(320,-191,l),
(320,-140,l),
(291,-140,ls),
(264,-140,o),
(229,-136,o),
(219,-125,qs),
(209,-115,o),
(204,-87,o),
(204,-61,qs),
(204,162,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
44 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 0 5 3 4 5 105 0 3 0 2 0 3 2 105 0 0 0 1 97 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 0 5 3 4 5 105 0 3 0 2 0 3 2 105 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
49 41 17 24 33 37 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,804,l),
(92,804,l),
(92,-173,l),
(157,-173,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 133 2 1 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,390,o),
(216,322,o),
(263,300,q),
(218,279,o),
(180,210,o),
(180,162,qs),
(180,-54,ls),
(180,-80,o),
(178,-111,o),
(167,-125,qs),
(157,-137,o),
(121,-140,o),
(104,-140,qs),
(64,-140,l),
(64,-191,l),
(132,-191,ls),
(185,-191,o),
(212,-170,qs),
(241,-147,o),
(241,-92,qs),
(241,133,ls),
(241,160,o),
(249,211,o),
(271,251,o),
(310,276,o),
(342,278,q),
(342,324,l),
(309,326,o),
(269,351,o),
(248,390,o),
(241,440,o),
(241,468,qs),
(241,693,ls),
(241,747,o),
(212,771,qs),
(187,793,o),
(132,793,qs),
(64,793,l),
(64,742,l),
(92,742,ls),
(120,742,o),
(154,738,o),
(165,727,qs),
(174,717,o),
(180,688,o),
(180,663,qs),
(180,440,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 0 2 1 0 105 0 2 0 3 5 2 3 105 0 5 5 4 97 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 0 2 1 0 105 0 2 0 3 5 2 3 105 0 5 4 4 5 89 0 5 5 4 97 0 4 5 4 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
33 40 17 24 33 37 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(590,21,o),
(628,56,q),
(594,103,l),
(559,74,o),
(488,51,o),
(443,51,qs),
(355,51,o),
(239,148,o),
(222,232,q),
(463,232,l),
(472,292,l),
(213,292,l),
(208,321,o),
(210,389,o),
(214,418,q),
(496,418,l),
(505,478,l),
(224,478,l),
(234,517,o),
(271,582,o),
(324,629,o),
(392,656,o),
(434,656,qs),
(478,656,o),
(549,634,o),
(584,607,q),
(616,658,l),
(577,688,o),
(489,715,o),
(437,715,qs),
(380,715,o),
(288,681,o),
(220,619,o),
(172,532,o),
(159,478,q),
(64,478,l),
(54,418,l),
(151,418,l),
(147,386,o),
(146,324,o),
(149,292,q),
(63,292,l),
(54,232,l),
(154,232,l),
(176,120,o),
(319,-8,o),
(438,-8,qs),
(489,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
20 1 6 5 21 1 4 6 45 44 2 11 1 3 76 7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 0 11 11 0 97 12 1 0 0 47 0 78 1 0 42 40 38 37 36 35 32 31 30 29 25 23 18 16 12 11 10 9 6 5 4 3 0 47 1 47 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 682;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,66,o),
(74,44,qs),
(74,19,o),
(102,-10,o),
(128,-8,q),
(123,-37,o),
(94,-79,o),
(72,-93,q),
(88,-119,l),
(131,-101,o),
(180,-18,o),
(179,29,qs),
(180,53,o),
(152,94,o),
(126,94,qs),
(104,95,o)
);
},
{
closed = 1;
nodes = (
(257,66,o),
(257,44,qs),
(257,19,o),
(285,-10,o),
(311,-8,q),
(306,-37,o),
(277,-79,o),
(255,-93,q),
(271,-119,l),
(314,-101,o),
(363,-18,o),
(362,29,qs),
(363,53,o),
(335,94,o),
(309,94,qs),
(287,95,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
26 23 22 10 7 6 6 0 73 3 1 2 3 0 0 118 17 16 1 0 16 31 17 31 0 15 1 15 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,66,o),
(74,44,qs),
(74,19,o),
(102,-10,o),
(128,-8,q),
(123,-37,o),
(94,-79,o),
(72,-93,q),
(88,-119,l),
(131,-101,o),
(180,-18,o),
(179,29,qs),
(180,53,o),
(152,94,o),
(126,94,qs),
(104,95,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
10 7 6 3 0 73 1 1 0 0 118 1 0 0 15 1 15 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,703,o),
(74,681,qs),
(74,657,o),
(102,628,o),
(128,630,q),
(123,601,o),
(94,559,o),
(72,544,q),
(88,518,l),
(131,537,o),
(180,620,o),
(179,665,qs),
(180,690,o),
(155,731,o),
(126,732,qs),
(103,732,o)
);
},
{
closed = 1;
nodes = (
(257,703,o),
(257,681,qs),
(257,657,o),
(286,628,o),
(312,630,q),
(307,601,o),
(277,559,o),
(256,544,q),
(272,518,l),
(314,537,o),
(364,620,o),
(363,665,qs),
(364,690,o),
(339,731,o),
(310,732,qs),
(287,732,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
26 23 22 10 7 6 6 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 9 values pushed */
3 1 2 3 0 0 48 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
3 1 2 3 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
17 16 1 0 16 31 17 31 0 15 1 15 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,703,o),
(74,681,qs),
(74,657,o),
(102,628,o),
(128,630,q),
(123,601,o),
(94,559,o),
(72,544,q),
(88,518,l),
(131,537,o),
(180,620,o),
(179,665,q),
(181,688,o),
(155,731,o),
(126,732,qs),
(103,732,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
10 7 6 3 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 48 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
1 0 0 15 1 15 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,556,o),
(363,578,qs),
(363,602,o),
(335,631,o),
(309,629,q),
(314,658,o),
(343,700,o),
(365,714,q),
(349,740,l),
(328,731,o),
(294,700,o),
(270,661,o),
(257,616,o),
(258,594,qs),
(257,569,o),
(282,528,o),
(311,527,qs),
(334,526,o)
);
},
{
closed = 1;
nodes = (
(180,556,o),
(180,578,qs),
(180,602,o),
(151,631,o),
(126,629,q),
(131,658,o),
(160,700,o),
(181,714,q),
(165,740,l),
(144,731,o),
(110,700,o),
(86,661,o),
(73,616,o),
(74,594,qs),
(74,569,o),
(98,528,o),
(127,527,qs),
(150,526,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
30 27 26 12 9 8 6 0 74 3 1 2 3 0 0 118 19 18 1 0 18 35 19 35 0 17 1 17 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,556,o),
(180,578,qs),
(180,602,o),
(151,631,o),
(126,629,q),
(131,658,o),
(160,700,o),
(181,714,q),
(165,740,l),
(144,731,o),
(110,700,o),
(86,661,o),
(73,616,o),
(74,594,qs),
(74,568,o),
(99,528,o),
(128,527,qs),
(151,526,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
12 9 8 3 0 74 1 1 0 0 118 1 0 0 17 1 17 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,325,l),
(439,325,l),
(439,385,l),
(79,385,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,251,l),
(374,311,l),
(79,311,l),
(79,251,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,311,l),
(79,251,l),
(497,251,l),
(497,311,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,311,l),
(79,251,l),
(684,251,l),
(684,311,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 763;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,628,l),
(206,628,l),
(122,769,l),
(54,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 320;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,628,l),
(268,769,l),
(200,769,l),
(114,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 322;
}
);
note = acute;
unicode = 180;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,93,l),
(129,93,l),
(241,262,l),
(129,429,l),
(64,429,l),
(175,261,l)
);
},
{
closed = 1;
nodes = (
(245,93,l),
(310,93,l),
(422,262,l),
(310,429,l),
(245,429,l),
(356,261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 466;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,93,l),
(129,93,l),
(241,262,l),
(129,429,l),
(64,429,l),
(175,261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,429,l),
(337,429,l),
(225,260,l),
(337,93,l),
(402,93,l),
(291,261,l)
);
},
{
closed = 1;
nodes = (
(221,429,l),
(156,429,l),
(44,260,l),
(156,93,l),
(221,93,l),
(110,261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 0 1 1 76 3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 466;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,429,l),
(156,429,l),
(44,260,l),
(156,93,l),
(221,93,l),
(110,261,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,251,l),
(374,311,l),
(79,311,l),
(79,251,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,66,o),
(62,44,qs),
(62,22,o),
(89,-8,o),
(112,-8,qs),
(136,-8,o),
(163,22,o),
(163,44,qs),
(163,66,o),
(135,94,o),
(112,94,qs),
(89,94,o)
);
},
{
closed = 1;
nodes = (
(537,66,o),
(537,44,qs),
(537,22,o),
(564,-8,o),
(588,-8,qs),
(611,-8,o),
(638,22,o),
(638,44,qs),
(638,66,o),
(611,94,o),
(588,94,qs),
(565,94,o)
);
},
{
closed = 1;
nodes = (
(300,66,o),
(300,44,qs),
(300,22,o),
(327,-8,o),
(350,-8,qs),
(373,-8,o),
(401,22,o),
(401,44,qs),
(401,66,o),
(373,94,o),
(350,94,qs),
(327,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 4 7 2 6 5 0 0 1 97 5 3 2 1 1 47 1 78 25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = uni0445;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,0,l),
(297,266,l),
(476,527,l),
(396,527,l),
(255,312,l),
(111,527,l),
(28,527,l),
(209,267,l),
(19,0,l),
(97,0,l),
(251,219,l),
(407,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
9 6 3 3 0 1 1 76 2 1 1 1 22 77 3 1 0 0 21 0 78 18 18 18 17 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = uni0445;
unicode = 1093;
},
{
glyphname = uni0431;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,511,o),
(145,552,qs),
(170,595,o),
(248,629,o),
(294,636,qs),
(326,641,o),
(395,647,o),
(427,650,qs),
(447,652,o),
(489,657,o),
(509,662,q),
(509,724,l),
(479,718,o),
(443,713,o),
(431,712,qs),
(379,706,o),
(283,696,o),
(248,688,qs),
(215,680,o),
(156,653,o),
(132,631,qs),
(86,590,o),
(68,524,qs),
(49,460,o),
(49,350,qs),
(49,318,o),
(53,254,o),
(57,222,qs),
(63,171,o),
(96,87,o),
(153,27,o),
(234,-6,o),
(288,-6,qs),
(344,-6,o),
(433,32,o),
(494,100,o),
(527,193,o),
(527,247,qs),
(527,298,o),
(498,385,o),
(442,449,o),
(359,485,o),
(306,485,qs),
(244,485,o),
(140,432,o),
(110,377,q),
(109,422,o)
);
},
{
closed = 1;
nodes = (
(184,80,o),
(141,132,o),
(120,203,o),
(120,242,qs),
(120,279,o),
(146,346,o),
(192,398,o),
(256,429,o),
(294,429,qs),
(334,429,o),
(397,401,o),
(439,351,o),
(461,284,o),
(461,244,qs),
(461,205,o),
(439,134,o),
(396,80,o),
(332,49,o),
(290,49,qs),
(248,49,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 2 3 1 76 35 34 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 48 47 58 56 47 66 48 66 40 34 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = uni0431;
unicode = 1073;
},
{
glyphname = uni0432;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(311,0,ls),
(344,0,o),
(408,13,o),
(432,29,qs),
(461,47,o),
(496,108,o),
(496,152,qs),
(496,209,o),
(440,272,o),
(392,282,q),
(430,301,o),
(465,365,o),
(464,403,qs),
(463,444,o),
(426,493,o),
(371,519,o),
(304,527,o),
(274,527,qs),
(72,527,l),
(72,0,l)
);
},
{
closed = 1;
nodes = (
(294,472,o),
(340,467,o),
(378,449,o),
(401,415,o),
(401,387,qs),
(401,362,o),
(381,329,o),
(365,319,qs),
(346,306,o),
(292,297,o),
(272,297,qs),
(138,297,l),
(138,472,l),
(271,472,ls)
);
},
{
closed = 1;
nodes = (
(280,242,ls),
(306,242,o),
(359,237,o),
(403,217,o),
(430,179,o),
(430,145,qs),
(430,116,o),
(404,81,o),
(365,62,o),
(317,55,o),
(294,55,qs),
(138,55,l),
(138,242,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 22 77 0 4 4 1 95 0 1 1 21 1 78 20 20 46 44 36 34 20 33 20 32 34 47 32 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 550;
}
);
note = uni0432;
unicode = 1074;
},
{
glyphname = uni0433;
kernLeft = uni0432;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,472,l),
(429,472,l),
(429,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 22 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = uni0433;
unicode = 1075;
},
{
glyphname = uni0434;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,481,o),
(138,387,o),
(137,340,qs),
(136,298,o),
(126,193,o),
(112,148,qs),
(107,133,o),
(93,101,o),
(72,74,o),
(45,55,o),
(27,54,q),
(27,-168,l),
(89,-168,l),
(89,0,l),
(514,0,l),
(514,-168,l),
(577,-168,l),
(577,55,l),
(505,55,l),
(505,527,l),
(139,527,l)
);
},
{
closed = 1;
nodes = (
(132,55,l),
(144,68,o),
(170,113,o),
(178,142,qs),
(191,186,o),
(198,277,o),
(199,322,qs),
(200,357,o),
(201,437,o),
(202,472,q),
(439,472,l),
(439,55,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 1 0 1 83 0 6 6 5 95 8 1 5 5 22 77 7 4 2 0 0 2 95 0 2 2 21 2 78 0 0 32 31 22 21 0 20 0 20 17 17 17 17 17 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = uni0434;
unicode = 1076;
},
{
glyphname = uni0436;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,237,l),
(511,237,l),
(657,0,l),
(732,0,l),
(561,277,l),
(716,527,l),
(643,527,l),
(501,292,l),
(408,292,l),
(408,527,l),
(342,527,l),
(342,292,l),
(249,292,l),
(107,527,l),
(34,527,l),
(189,277,l),
(19,0,l),
(94,0,l),
(239,237,l),
(342,237,l),
(342,0,l),
(408,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
16 5 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 22 77 10 9 7 3 1 1 21 1 78 0 0 0 21 0 21 17 18 17 17 17 17 18 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = uni0436;
unicode = 1078;
},
{
glyphname = uni043A;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,236,l),
(258,236,l),
(428,0,l),
(504,0,l),
(310,274,l),
(487,527,l),
(414,527,l),
(251,291,l),
(138,291,l),
(138,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 12 0 12 17 18 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = uni043A;
unicode = 1082;
},
{
glyphname = uni0438;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,0,l),
(518,0,l),
(518,527,l),
(427,527,l),
(138,73,l),
(138,527,l),
(72,527,l),
(72,0,l),
(164,0,l),
(452,450,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
9 4 2 0 1 1 76 2 1 1 1 22 77 3 1 0 0 21 0 78 17 18 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = uni0438;
unicode = 1080;
},
{
glyphname = uni0439;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,662,o),
(213,677,o),
(192,705,o),
(189,728,q),
(128,728,l),
(131,693,o),
(160,646,o),
(205,617,o),
(263,605,o),
(294,605,qs),
(325,605,o),
(383,617,o),
(430,646,o),
(461,693,o),
(464,728,q),
(403,728,l),
(400,705,o),
(379,677,o),
(349,662,o),
(313,656,o),
(296,656,qs),
(279,656,o)
);
},
{
closed = 1;
nodes = (
(452,450,l),
(452,0,l),
(518,0,l),
(518,527,l),
(427,527,l),
(138,73,l),
(138,527,l),
(72,527,l),
(72,0,l),
(164,0,l),
(165,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
31 26 2 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 0 0 2 5 0 2 105 3 1 1 1 20 77 6 1 5 5 22 77 7 9 2 4 4 21 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 0 1 133 8 1 0 0 2 5 0 2 105 6 1 5 5 22 77 7 9 2 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
23 22 1 0 30 29 28 27 25 24 22 32 23 32 17 16 12 10 6 5 0 21 1 21 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = uni0439;
unicode = 1081;
},
{
glyphname = uni043B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,458,o),
(133,322,o),
(128,253,qs),
(126,226,o),
(117,149,o),
(104,117,qs),
(93,91,o),
(54,60,o),
(24,58,q),
(24,-4,l),
(57,-4,o),
(109,11,o),
(133,35,qs),
(152,54,o),
(174,106,o),
(186,163,o),
(191,221,o),
(193,247,qs),
(195,304,o),
(200,415,o),
(202,472,q),
(430,472,l),
(430,0,l),
(496,0,l),
(496,527,l),
(138,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 3 1 1 76 0 1 1 4 95 5 1 4 4 22 77 0 3 3 0 97 2 1 0 0 21 0 78 0 0 0 25 0 25 17 26 17 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
note = uni043B;
unicode = 1083;
},
{
glyphname = uni043C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,0,l),
(138,465,l),
(336,134,l),
(362,134,l),
(558,466,l),
(558,0,l),
(624,0,l),
(624,527,l),
(521,527,l),
(351,241,l),
(177,527,l),
(72,527,l),
(72,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 22 77 4 1 2 2 21 2 78 18 18 17 18 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = uni043C;
unicode = 1084;
},
{
glyphname = uni043D;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,231,l),
(436,231,l),
(436,0,l),
(502,0,l),
(502,527,l),
(436,527,l),
(436,286,l),
(138,286,l),
(138,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = uni043D;
unicode = 1085;
},
{
glyphname = uni043F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,472,l),
(439,472,l),
(439,0,l),
(505,0,l),
(505,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 2 2 0 95 0 0 0 22 77 4 3 2 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni043F;
unicode = 1087;
},
{
glyphname = uni0442;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,472,l),
(201,472,l),
(201,0,l),
(267,0,l),
(267,472,l),
(456,472,l),
(456,527,l),
(12,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 3 95 4 1 3 3 22 77 0 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 468;
}
);
note = uni0442;
unicode = 1090;
},
{
glyphname = uni0444;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,532,o),
(162,497,o),
(88,430,o),
(48,328,o),
(48,259,qs),
(48,192,o),
(89,93,o),
(164,28,o),
(270,-5,o),
(335,-7,q),
(335,-197,l),
(401,-197,l),
(401,-7,l),
(467,-5,o),
(573,28,o),
(648,92,o),
(688,191,o),
(688,259,qs),
(688,327,o),
(648,429,o),
(573,497,o),
(467,532,o),
(401,533,q),
(401,696,l),
(335,696,l),
(335,533,l)
);
},
{
closed = 1;
nodes = (
(509,476,o),
(622,371,o),
(622,262,qs),
(622,206,o),
(591,126,o),
(533,74,o),
(452,48,o),
(401,48,q),
(401,476,l)
);
},
{
closed = 1;
nodes = (
(284,48,o),
(203,74,o),
(145,126,o),
(114,207,o),
(114,262,qs),
(114,371,o),
(227,476,o),
(335,476,q),
(335,48,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 0 20 77 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 77 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 2 3 134 0 0 0 20 77 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 0 1 0 133 0 3 2 3 134 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 30 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
43 42 17 22 17 24 17 17 24 17 16 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 736;
}
);
note = uni0444;
unicode = 1092;
},
{
glyphname = uni0446;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,527,l),
(72,527,l),
(72,0,l),
(502,0,l),
(502,-168,l),
(565,-168,l),
(565,55,l),
(493,55,l),
(493,527,l),
(427,527,l),
(427,55,l),
(138,55,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 3 2 134 4 1 0 0 22 77 6 5 2 1 1 3 96 0 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = uni0446;
unicode = 1094;
},
{
glyphname = uni0447;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,351,o),
(71,270,o),
(119,218,o),
(196,194,o),
(252,194,qs),
(287,194,o),
(352,199,o),
(394,207,q),
(394,0,l),
(460,0,l),
(460,527,l),
(394,527,l),
(394,263,l),
(356,256,o),
(292,252,o),
(259,252,qs),
(214,252,o),
(158,271,o),
(126,311,o),
(115,371,o),
(115,413,qs),
(115,527,l),
(49,527,l),
(49,407,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 22 77 0 3 3 21 3 78 35 17 18 53 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = uni0447;
unicode = 1095;
},
{
glyphname = uni0448;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(730,0,l),
(730,527,l),
(664,527,l),
(664,55,l),
(433,55,l),
(433,527,l),
(367,527,l),
(367,55,l),
(138,55,l),
(138,527,l),
(72,527,l),
(72,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 22 77 3 1 1 1 5 96 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 802;
}
);
note = uni0448;
unicode = 1096;
},
{
glyphname = uni0449;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(739,0,l),
(739,-168,l),
(802,-168,l),
(802,55,l),
(730,55,l),
(730,527,l),
(664,527,l),
(664,55,l),
(433,55,l),
(433,527,l),
(367,527,l),
(367,55,l),
(138,55,l),
(138,527,l),
(72,527,l),
(72,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 6 7 6 134 4 2 2 0 0 22 77 5 3 2 1 1 7 96 0 7 7 21 7 78 17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 829;
}
);
note = uni0449;
unicode = 1097;
},
{
glyphname = uni044A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,0,ls),
(394,0,o),
(468,18,o),
(523,57,o),
(555,121,o),
(555,168,qs),
(555,216,o),
(516,277,o),
(454,308,o),
(374,318,o),
(334,318,qs),
(220,318,l),
(220,527,l),
(19,527,l),
(19,472,l),
(153,472,l),
(153,0,l)
);
},
{
closed = 1;
nodes = (
(220,263,l),
(334,263,ls),
(361,263,o),
(416,257,o),
(460,237,o),
(488,198,o),
(488,165,qs),
(488,127,o),
(459,83,o),
(411,61,o),
(351,55,o),
(320,55,qs),
(220,55,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 22 77 6 1 4 4 3 95 0 3 3 21 3 78 18 17 28 26 17 29 18 29 40 33 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni044A;
unicode = 1098;
},
{
glyphname = uni044B;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,527,l),
(539,527,l),
(539,0,l),
(604,0,l)
);
},
{
closed = 1;
nodes = (
(249,0,ls),
(291,0,o),
(365,18,o),
(420,57,o),
(452,121,o),
(452,168,qs),
(452,216,o),
(413,278,o),
(351,309,o),
(271,318,o),
(231,318,qs),
(139,318,l),
(139,527,l),
(72,527,l),
(72,0,l)
);
},
{
closed = 1;
nodes = (
(139,263,l),
(232,263,ls),
(259,263,o),
(314,257,o),
(358,237,o),
(385,198,o),
(385,165,qs),
(385,127,o),
(356,83,o),
(308,61,o),
(248,55,o),
(217,55,qs),
(139,55,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 3 0 6 5 3 6 103 2 1 0 0 22 77 8 1 5 5 1 96 4 7 2 1 1 21 1 78 20 19 0 0 30 28 19 31 20 31 18 16 8 6 5 4 0 3 0 3 17 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni044B;
unicode = 1099;
},
{
glyphname = uni044C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,0,ls),
(313,0,o),
(387,18,o),
(442,57,o),
(474,121,o),
(474,168,qs),
(474,216,o),
(435,277,o),
(373,309,o),
(293,318,o),
(253,318,qs),
(139,318,l),
(139,527,l),
(72,527,l),
(72,0,l)
);
},
{
closed = 1;
nodes = (
(139,263,l),
(253,263,ls),
(280,263,o),
(335,257,o),
(379,237,o),
(407,198,o),
(407,165,qs),
(407,127,o),
(378,83,o),
(330,61,o),
(270,55,o),
(239,55,qs),
(139,55,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 1 0 4 3 1 4 103 0 0 0 22 77 5 1 3 3 2 96 0 2 2 21 2 78 16 15 26 24 15 27 16 27 40 33 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = uni044C;
unicode = 1100;
},
{
glyphname = uni044E;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,498,o),
(298,435,o),
(264,346,o),
(260,291,q),
(138,291,l),
(138,527,l),
(72,527,l),
(72,0,l),
(138,0,l),
(138,236,l),
(260,236,l),
(264,181,o),
(297,92,o),
(357,29,o),
(444,-6,o),
(501,-6,qs),
(562,-6,o),
(655,34,o),
(718,106,o),
(749,204,o),
(749,263,qs),
(749,321,o),
(718,420,o),
(657,492,o),
(564,533,o),
(502,533,qs),
(444,533,o)
);
},
{
closed = 1;
nodes = (
(387,84,o),
(343,142,o),
(323,219,o),
(323,263,qs),
(323,307,o),
(342,385,o),
(385,443,o),
(453,477,o),
(502,477,qs),
(550,477,o),
(619,443,o),
(663,385,o),
(683,307,o),
(683,263,qs),
(683,219,o),
(663,142,o),
(619,84,o),
(550,50,o),
(502,50,qs),
(454,50,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 0 2 6 5 2 103 0 7 7 0 97 4 8 2 0 0 29 77 9 1 6 6 1 97 3 1 1 1 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 0 2 6 5 2 103 0 4 4 22 77 0 7 7 0 97 8 1 0 0 29 77 0 3 3 21 77 9 1 6 6 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
28 27 1 0 38 36 27 46 28 46 22 21 20 19 18 17 16 15 11 9 0 26 1 26 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 797;
}
);
note = uni044E;
unicode = 1102;
},
{
glyphname = uni044F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,527,ls),
(208,527,o),
(137,516,o),
(109,498,qs),
(80,479,o),
(46,417,o),
(46,366,qs),
(46,301,o),
(122,224,o),
(184,213,q),
(39,0,l),
(117,0,l),
(252,204,l),
(394,204,l),
(394,0,l),
(459,0,l),
(459,527,l)
);
},
{
closed = 1;
nodes = (
(292,259,ls),
(274,259,o),
(236,260,o),
(197,266,o),
(162,279,o),
(147,290,qs),
(131,302,o),
(112,343,o),
(112,371,qs),
(112,403,o),
(137,444,o),
(154,455,qs),
(172,466,o),
(230,472,o),
(262,472,qs),
(394,472,l),
(394,259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 1 1 5 1 76 0 5 0 1 0 5 1 103 0 4 4 3 95 0 3 3 22 77 2 1 0 0 21 0 78 59 33 41 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = uni044F;
unicode = 1103;
},
{
glyphname = uni0410;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
10 1 4 1 1 76 0 4 5 1 3 0 4 3 104 0 1 1 20 77 2 1 0 0 21 0 78 0 0 9 8 0 7 0 7 17 17 17 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = uni0410;
unicode = 1040;
},
{
glyphname = uni0415;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = uni0415;
unicode = 1045;
},
{
glyphname = uni041C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,292,l),
(197,707,l),
(92,707,l),
(92,0,l),
(157,0,l),
(157,646,l),
(404,188,l),
(435,188,l),
(495,299,o),
(619,535,o),
(679,646,q),
(679,0,l),
(744,0,l),
(744,707,l),
(643,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
13 8 3 3 1 3 1 76 0 1 3 0 3 1 0 128 5 4 2 3 3 20 77 2 1 0 0 21 0 78 0 0 0 14 0 14 17 18 20 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 836;
}
);
note = uni041C;
unicode = 1052;
},
{
glyphname = uni041D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,317,l),
(573,317,l),
(573,0,l),
(638,0,l),
(638,707,l),
(573,707,l),
(573,377,l),
(157,377,l),
(157,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 20 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = uni041D;
unicode = 1053;
},
{
glyphname = uni0420;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,0,l),
(157,241,l),
(312,241,ls),
(368,241,o),
(465,269,o),
(536,328,o),
(577,416,o),
(577,476,qs),
(577,595,o),
(447,707,o),
(332,707,qs),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(157,647,l),
(327,647,ls),
(412,647,o),
(510,570,o),
(510,480,qs),
(510,433,o),
(481,365,o),
(429,321,o),
(355,301,o),
(310,301,qs),
(157,301,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 20 77 0 2 2 21 2 78 14 13 22 20 13 23 14 23 17 38 32 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = uni0420;
unicode = 1056;
},
{
glyphname = uni0422;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,707,l),
(19,647,l),
(253,647,l),
(253,0,l),
(318,0,l),
(318,647,l),
(552,647,l),
(552,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 3 95 0 3 3 20 77 0 1 1 21 1 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni0422;
unicode = 1058;
},
{
glyphname = uni0425;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,707,l),
(26,707,l),
(247,354,l),
(19,0,l),
(98,0,l),
(290,303,l),
(481,0,l),
(562,0,l),
(333,357,l),
(553,707,l),
(472,707,l),
(290,407,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = uni0425;
unicode = 1061;
},
{
glyphname = T;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,707,l),
(19,647,l),
(253,647,l),
(253,0,l),
(318,0,l),
(318,647,l),
(552,647,l),
(552,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 3 95 0 3 3 38 77 0 1 1 39 1 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = T;
unicode = 84;
},
{
glyphname = uni0412;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,0,ls),
(378,0,o),
(476,16,o),
(554,59,o),
(603,133,o),
(603,192,qs),
(603,266,o),
(522,360,o),
(450,372,q),
(506,390,o),
(565,473,o),
(565,533,qs),
(565,588,o),
(527,656,o),
(464,694,o),
(381,707,o),
(335,707,qs),
(91,707,l),
(91,0,l)
);
},
{
closed = 1;
nodes = (
(368,647,o),
(428,639,o),
(475,615,o),
(503,568,o),
(503,529,qs),
(503,489,o),
(469,436,o),
(415,404,o),
(348,391,o),
(314,391,qs),
(156,391,l),
(156,647,l),
(336,647,ls)
);
},
{
closed = 1;
nodes = (
(156,331,l),
(356,331,ls),
(390,331,o),
(456,319,o),
(506,289,o),
(537,237,o),
(537,196,qs),
(537,149,o),
(498,95,o),
(437,68,o),
(362,60,o),
(326,60,qs),
(156,60,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 20 77 7 1 4 4 1 95 0 1 1 21 1 78 33 32 19 19 43 41 32 44 33 44 19 31 19 30 34 46 32 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = uni0412;
unicode = 1042;
},
{
glyphname = uni041F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,647,l),
(576,647,l),
(576,0,l),
(641,0,l),
(641,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
0 1 1 3 95 0 3 3 20 77 2 1 0 0 21 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 733;
}
);
note = uni041F;
unicode = 1055;
},
{
glyphname = uni0413;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,647,l),
(537,647,l),
(537,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 20 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uni0413;
unicode = 1043;
},
{
glyphname = uni041B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(605,707,l),
(143,707,l),
(141,621,o),
(139,451,o),
(137,366,qs),
(136,342,o),
(134,273,o),
(128,201,o),
(115,135,o),
(104,114,qs),
(91,90,o),
(49,61,o),
(19,61,q),
(19,-6,l),
(85,-4,o),
(165,56,o),
(182,121,qs),
(196,173,o),
(202,290,o),
(204,344,qs),
(206,420,o),
(208,571,o),
(210,647,q),
(540,647,l),
(540,0,l),
(605,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 3 95 0 3 3 20 77 0 2 2 1 97 5 4 2 1 1 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 3 95 0 3 3 20 77 5 1 4 4 21 77 0 2 2 1 97 0 1 1 30 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 25 0 25 26 17 24 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni041B;
unicode = 1051;
},
{
glyphname = uni0414;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,0,l),
(625,0,l),
(625,-201,l),
(690,-201,l),
(690,60,l),
(602,60,l),
(602,707,l),
(161,707,l),
(159,629,o),
(156,475,o),
(152,397,qs),
(150,353,o),
(144,243,o),
(136,195,qs),
(133,174,o),
(117,122,o),
(103,100,qs),
(92,83,o),
(59,60,o),
(37,60,qs),
(27,60,l),
(27,-201,l),
(92,-201,l)
);
},
{
closed = 1;
nodes = (
(167,74,o),
(191,120,o),
(197,149,qs),
(207,196,o),
(213,305,o),
(215,353,qs),
(225,647,l),
(538,647,l),
(538,60,l),
(152,60,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 6 1 95 0 1 1 20 77 9 7 2 3 0 0 4 95 0 4 4 21 77 9 7 2 3 0 0 3 95 8 5 2 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 5 2 3 0 3 83 0 6 6 1 95 0 1 1 20 77 9 7 2 3 0 0 4 95 0 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
23 23 0 0 23 32 23 32 25 24 0 22 0 22 17 17 17 27 33 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = uni0414;
unicode = 1044;
},
{
glyphname = uni0411;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,0,ls),
(386,0,o),
(481,21,o),
(553,70,o),
(595,151,o),
(595,212,qs),
(595,273,o),
(553,349,o),
(482,392,o),
(388,407,o),
(336,407,qs),
(157,407,l),
(157,647,l),
(563,647,l),
(563,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(325,347,ls),
(363,347,o),
(436,339,o),
(494,311,o),
(529,256,o),
(529,208,qs),
(529,160,o),
(494,102,o),
(436,71,o),
(360,60,o),
(320,60,qs),
(157,60,l),
(157,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 1 1 0 95 0 0 0 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = uni0411;
unicode = 1041;
},
{
glyphname = uni0416;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,317,l),
(591,317,l),
(760,0,l),
(839,0,l),
(646,357,l),
(838,707,l),
(767,707,l),
(589,377,l),
(461,377,l),
(461,707,l),
(396,707,l),
(396,377,l),
(269,377,l),
(92,707,l),
(19,707,l),
(211,357,l),
(19,0,l),
(96,0,l),
(266,317,l),
(396,317,l),
(396,0,l),
(461,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
16 5 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 20 77 10 9 7 3 1 1 21 1 78 0 0 0 21 0 21 17 18 17 17 17 17 18 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 858;
}
);
note = uni0416;
unicode = 1046;
},
{
glyphname = uni0417;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(53,115,o),
(105,49,o),
(182,9,o),
(272,-8,o),
(314,-8,qs),
(364,-8,o),
(460,14,o),
(498,41,qs),
(533,65,o),
(574,141,o),
(574,192,qs),
(574,264,o),
(494,358,o),
(424,372,q),
(479,389,o),
(542,482,o),
(542,539,qs),
(542,595,o),
(494,666,o),
(456,686,qs),
(426,702,o),
(355,715,o),
(317,715,qs),
(285,715,o),
(212,706,o),
(178,691,qs),
(133,672,o),
(69,599,o),
(68,546,q),
(134,546,l),
(137,578,o),
(174,621,o),
(199,634,qs),
(226,647,o),
(286,656,o),
(313,656,qs),
(345,656,o),
(404,644,o),
(428,629,qs),
(451,614,o),
(479,563,o),
(479,526,qs),
(479,498,o),
(451,448,o),
(429,431,qs),
(400,407,o),
(325,390,o),
(287,390,qs),
(218,390,l),
(218,330,l),
(312,330,ls),
(348,330,o),
(418,320,o),
(473,291,o),
(507,237,o),
(507,193,qs),
(507,150,o),
(473,95,o),
(419,63,o),
(350,51,o),
(314,51,qs),
(286,51,o),
(220,61,o),
(161,87,o),
(119,131,o),
(115,165,q),
(49,165,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
52 1 1 2 1 76 0 4 3 2 3 4 2 128 8 1 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 27 77 0 0 0 6 97 0 6 6 28 6 78 0 0 0 66 0 66 62 60 37 21 42 33 40 36 9 7 28 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = uni0417;
unicode = 1047;
},
{
glyphname = uni0418;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(581,616,l),
(581,0,l),
(646,0,l),
(646,707,l),
(563,707,l),
(157,86,l),
(157,707,l),
(92,707,l),
(92,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 9 0 9 17 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = uni0418;
unicode = 1048;
},
{
glyphname = uni0419;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,880,o),
(255,924,q),
(193,924,l),
(196,886,o),
(228,835,o),
(277,804,o),
(338,791,o),
(371,791,qs),
(404,791,o),
(465,804,o),
(513,836,o),
(545,886,o),
(548,924,q),
(486,924,l),
(478,880,o),
(413,845,o),
(371,845,qs),
(329,845,o)
);
},
{
closed = 1;
nodes = (
(581,616,l),
(581,0,l),
(646,0,l),
(646,707,l),
(563,707,l),
(157,86,l),
(157,707,l),
(92,707,l),
(92,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
26 21 2 6 4 1 76 3 1 1 0 1 133 8 1 0 0 2 4 0 2 105 5 1 4 4 20 77 9 7 2 6 6 21 6 78 18 18 1 0 18 27 18 27 25 24 23 22 20 19 15 14 10 8 4 3 0 17 1 17 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = uni0419;
unicode = 1049;
},
{
glyphname = uni041A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,312,l),
(292,312,l),
(519,0,l),
(597,0,l),
(342,355,l),
(595,707,l),
(518,707,l),
(281,372,l),
(157,372,l),
(157,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 20 77 6 5 2 3 3 21 3 78 0 0 0 12 0 12 17 18 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni041A;
unicode = 1050;
},
{
glyphname = uni0423;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,-1,o),
(225,16,o),
(258,41,qs),
(294,68,o),
(340,140,o),
(360,179,qs),
(393,244,o),
(449,376,o),
(503,509,o),
(557,641,o),
(587,707,q),
(512,707,l),
(325,245,l),
(100,707,l),
(20,707,l),
(286,177,l),
(269,147,o),
(236,104,o),
(215,90,qs),
(193,76,o),
(142,64,o),
(107,63,q),
(107,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
9 6 2 0 1 1 76 2 1 1 1 20 77 0 0 0 3 97 0 3 3 21 3 78 26 18 22 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = uni0423;
unicode = 1059;
},
{
glyphname = uni0424;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,634,l),
(314,634,ls),
(256,634,o),
(160,596,o),
(91,527,o),
(53,431,o),
(53,373,qs),
(53,315,o),
(85,215,o),
(147,142,o),
(240,100,o),
(300,100,qs),
(390,100,l),
(390,-20,l),
(455,-20,l),
(455,100,l),
(544,100,ls),
(602,100,o),
(695,143,o),
(758,217,o),
(792,317,o),
(792,373,qs),
(792,431,o),
(754,527,o),
(686,596,o),
(591,634,o),
(533,634,qs),
(455,634,l),
(455,736,l),
(390,736,l)
);
},
{
closed = 1;
nodes = (
(267,155,o),
(192,188,o),
(143,247,o),
(119,327,o),
(119,375,qs),
(119,420,o),
(147,495,o),
(199,548,o),
(272,578,o),
(318,578,qs),
(390,578,l),
(390,155,l),
(318,155,ls)
);
},
{
closed = 1;
nodes = (
(527,578,ls),
(572,578,o),
(646,548,o),
(698,495,o),
(726,420,o),
(726,375,qs),
(726,327,o),
(703,247,o),
(654,188,o),
(579,155,o),
(528,155,qs),
(455,155,l),
(455,578,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
10 1 5 0 5 133 4 1 0 9 1 6 7 0 6 103 8 11 2 7 3 1 1 2 7 1 103 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
10 1 5 0 5 133 0 2 1 2 134 4 1 0 9 1 6 7 0 6 103 8 11 2 7 1 1 7 87 8 11 2 7 7 1 95 3 1 1 7 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
30 30 0 0 55 53 45 43 30 42 30 41 33 31 0 29 0 29 40 33 17 40 33 12 7 27 
CALL[ ]	/* CallFunction */";
};
width = 845;
}
);
note = uni0424;
unicode = 1060;
},
{
glyphname = uni0426;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(640,-201,l),
(705,-201,l),
(705,60,l),
(617,60,l),
(617,707,l),
(552,707,l),
(552,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l),
(640,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 20 77 3 1 1 1 5 95 6 1 5 5 21 77 0 4 4 24 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 5 4 134 2 1 0 0 20 77 3 1 1 1 5 95 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = uni0426;
unicode = 1062;
},
{
glyphname = uni0427;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,318,o),
(233,326,o),
(196,341,o),
(181,354,qs),
(148,384,o),
(134,462,o),
(134,504,qs),
(134,707,l),
(69,707,l),
(69,484,ls),
(69,458,o),
(75,405,o),
(91,355,o),
(121,312,o),
(144,297,qs),
(166,283,o),
(215,266,o),
(266,258,o),
(318,256,o),
(343,256,qs),
(381,256,o),
(453,261,o),
(491,266,q),
(491,0,l),
(556,0,l),
(556,707,l),
(491,707,l),
(491,325,l),
(449,320,o),
(376,315,o),
(334,315,qs),
(315,315,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 0 1 8 1 3 0 2 76 5 1 0 0 3 2 0 3 105 4 1 1 1 20 77 0 2 2 21 2 78 2 0 23 22 13 9 7 6 5 4 0 31 2 31 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = uni0427;
unicode = 1063;
},
{
glyphname = uni0428;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(883,0,l),
(883,707,l),
(818,707,l),
(818,60,l),
(520,60,l),
(520,707,l),
(455,707,l),
(455,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 20 77 3 1 1 1 5 95 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 975;
}
);
note = uni0428;
unicode = 1064;
},
{
glyphname = uni0429;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(906,0,l),
(906,-201,l),
(971,-201,l),
(971,60,l),
(883,60,l),
(883,707,l),
(818,707,l),
(818,60,l),
(520,60,l),
(520,707,l),
(455,707,l),
(455,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
4 2 2 0 0 20 77 5 3 2 1 1 7 95 0 7 7 21 77 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 6 7 6 134 4 2 2 0 0 20 77 5 3 2 1 1 7 95 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 995;
}
);
note = uni0429;
unicode = 1065;
},
{
glyphname = uni042A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,0,ls),
(461,0,o),
(558,21,o),
(631,71,o),
(674,153,o),
(673,214,qs),
(672,280,o),
(620,357,o),
(538,396,o),
(436,407,o),
(385,407,qs),
(250,407,l),
(250,707,l),
(19,707,l),
(19,647,l),
(185,647,l),
(185,0,l)
);
},
{
closed = 1;
nodes = (
(401,347,ls),
(439,347,o),
(513,339,o),
(571,311,o),
(607,256,o),
(607,208,qs),
(607,160,o),
(569,102,o),
(509,70,o),
(433,60,o),
(394,60,qs),
(250,60,l),
(250,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 729;
}
);
note = uni042A;
unicode = 1066;
},
{
glyphname = uni042B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,0,ls),
(346,0,o),
(442,21,o),
(515,71,o),
(558,153,o),
(558,214,qs),
(558,280,o),
(507,356,o),
(425,396,o),
(322,407,o),
(270,407,qs),
(157,407,l),
(157,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(288,347,ls),
(326,347,o),
(399,339,o),
(457,311,o),
(492,256,o),
(492,208,qs),
(492,160,o),
(454,102,o),
(394,70,o),
(318,60,o),
(279,60,qs),
(157,60,l),
(157,347,l)
);
},
{
closed = 1;
nodes = (
(730,707,l),
(665,707,l),
(665,0,l),
(730,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 3 1 4 103 5 1 0 0 20 77 0 3 3 2 95 7 6 2 2 2 21 2 78 28 28 28 31 28 31 18 40 33 40 33 16 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 822;
}
);
note = uni042B;
unicode = 1067;
},
{
glyphname = uni042C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,0,ls),
(367,0,o),
(463,21,o),
(536,71,o),
(579,153,o),
(579,214,qs),
(579,280,o),
(527,356,o),
(444,396,o),
(342,407,o),
(291,407,qs),
(156,407,l),
(156,707,l),
(91,707,l),
(91,0,l)
);
},
{
closed = 1;
nodes = (
(306,347,ls),
(344,347,o),
(418,339,o),
(477,311,o),
(513,256,o),
(513,208,qs),
(513,160,o),
(475,102,o),
(415,70,o),
(339,60,o),
(300,60,qs),
(156,60,l),
(156,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 1 0 4 3 1 4 103 0 0 0 20 77 0 3 3 2 95 0 2 2 21 2 78 40 33 40 33 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = uni042C;
unicode = 1068;
},
{
glyphname = uni042D;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,612,o),
(551,538,o),
(585,439,o),
(588,384,q),
(227,384,l),
(227,324,l),
(588,324,l),
(586,265,o),
(555,165,o),
(493,92,o),
(401,51,o),
(338,51,qs),
(306,51,o),
(242,64,o),
(184,92,o),
(138,136,o),
(126,168,q),
(53,168,l),
(68,121,o),
(124,54,o),
(198,12,o),
(286,-8,o),
(333,-8,qs),
(415,-8,o),
(537,45,o),
(617,139,o),
(656,270,o),
(656,348,qs),
(656,423,o),
(619,556,o),
(542,656,o),
(424,715,o),
(343,715,qs),
(297,715,o),
(207,695,o),
(131,653,o),
(73,586,o),
(59,539,q),
(127,539,l),
(139,570,o),
(185,614,o),
(243,643,o),
(308,656,o),
(339,656,qs),
(399,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 0 7 0 6 4 7 6 103 8 1 0 0 2 97 0 2 2 27 77 0 5 5 3 97 0 3 3 28 3 78 1 0 40 39 38 37 33 31 27 26 22 20 12 10 6 5 0 44 1 44 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni042D;
unicode = 1069;
},
{
glyphname = uni042E;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,324,l),
(299,324,l),
(303,252,o),
(346,130,o),
(426,42,o),
(542,-8,o),
(619,-8,qs),
(701,-8,o),
(825,46,o),
(908,143,o),
(950,275,o),
(950,353,qs),
(950,431,o),
(908,564,o),
(825,660,o),
(701,715,o),
(619,715,qs),
(543,715,o),
(427,665,o),
(347,577,o),
(303,456,o),
(299,384,q),
(157,384,l),
(157,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
},
{
closed = 1;
nodes = (
(786,608,o),
(850,525,o),
(882,415,o),
(882,353,qs),
(882,290,o),
(850,180,o),
(786,98,o),
(686,51,o),
(619,51,qs),
(552,51,o),
(456,100,o),
(394,182,o),
(365,292,o),
(365,353,qs),
(365,414,o),
(394,524,o),
(455,607,o),
(551,656,o),
(619,656,qs),
(686,656,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 0 4 7 1 4 103 9 1 6 6 0 97 2 1 0 0 20 77 0 7 7 3 97 8 5 2 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 4 7 1 4 103 0 0 0 20 77 9 1 6 6 2 97 0 2 2 27 77 8 1 5 5 21 77 0 7 7 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
28 27 0 0 38 36 27 46 28 46 0 26 0 26 20 40 36 17 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1003;
}
);
note = uni042E;
unicode = 1070;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,274,l),
(506,0,l),
(571,0,l),
(571,707,l),
(313,707,ls),
(257,707,o),
(165,684,o),
(97,631,o),
(60,548,o),
(60,488,qs),
(60,318,o),
(227,283,q),
(72,0,l),
(148,0,l),
(293,274,l)
);
},
{
closed = 1;
nodes = (
(276,334,o),
(207,350,o),
(156,387,o),
(126,447,o),
(126,491,qs),
(126,535,o),
(153,595,o),
(201,631,o),
(270,647,o),
(312,647,qs),
(506,647,l),
(506,334,l),
(315,334,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
2 1 3 5 1 76 6 1 5 0 3 0 5 3 103 0 4 4 1 95 0 1 1 20 77 2 1 0 0 21 0 78 15 15 15 27 15 26 34 17 17 39 16 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 663;
}
);
note = uni042F;
unicode = 1071;
},
{
glyphname = uni0440;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,51,o),
(199,20,o),
(245,1,o),
(297,-6,o),
(323,-6,qs),
(368,-6,o),
(443,17,o),
(470,38,qs),
(515,72,o),
(558,182,o),
(560,250,qs),
(561,306,o),
(537,409,o),
(481,487,o),
(393,533,o),
(331,533,qs),
(293,533,o),
(228,517,o),
(198,498,qs),
(162,474,o),
(138,437,q),
(138,527,l),
(72,527,l),
(72,-197,l),
(138,-197,l),
(138,76,l)
);
},
{
closed = 1;
nodes = (
(208,84,qs),
(167,115,o),
(136,213,o),
(136,262,qs),
(136,303,o),
(156,378,o),
(179,407,qs),
(202,438,o),
(273,477,o),
(317,477,qs),
(366,477,o),
(433,442,o),
(475,384,o),
(494,305,o),
(494,262,qs),
(494,220,o),
(474,143,o),
(432,84,o),
(366,50,o),
(319,50,qs),
(254,50,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
25 4 2 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 1 97 2 1 1 1 22 77 6 1 4 4 3 97 0 3 3 30 77 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 3 0 134 0 5 5 1 97 2 1 1 1 22 77 6 1 4 4 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 3 0 134 0 1 1 22 77 0 5 5 2 97 0 2 2 29 77 6 1 4 4 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
27 26 37 35 26 46 27 46 41 37 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = uni0440;
unicode = 1088;
},
{
glyphname = O;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 4 1 0 0 47 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = O;
unicode = 79;
},
{
glyphname = a;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
40 38 49 47 38 54 40 54 21 36 20 36 40 34 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = a;
unicode = 97;
},
{
glyphname = c;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,10,o),
(459,45,o),
(501,98,o),
(512,135,q),
(444,135,l),
(427,86,o),
(351,50,o),
(303,50,qs),
(255,50,o),
(184,84,o),
(139,142,o),
(117,219,o),
(117,262,qs),
(117,306,o),
(139,384,o),
(184,443,o),
(253,477,o),
(300,477,qs),
(346,477,o),
(423,435,o),
(437,391,q),
(504,391,l),
(485,463,o),
(376,533,o),
(304,533,qs),
(242,533,o),
(148,493,o),
(84,421,o),
(52,322,o),
(52,262,qs),
(52,204,o),
(83,106,o),
(145,34,o),
(237,-6,o),
(299,-6,qs),
(334,-6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 6 1 0 0 50 0 78 1 0 31 30 28 26 18 16 14 13 11 9 0 35 1 35 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = c;
unicode = 99;
},
{
glyphname = e;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 32 32 0 0 32 42 32 42 38 36 0 31 0 31 40 36 20 36 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,0,l),
(192,0,l),
(192,472,l),
(339,472,l),
(339,527,l),
(192,527,l),
(192,575,ls),
(192,610,o),
(197,661,o),
(212,681,qs),
(227,700,o),
(272,707,o),
(295,707,qs),
(339,707,l),
(339,762,l),
(288,762,ls),
(228,762,o),
(163,729,o),
(145,697,qs),
(132,674,o),
(126,617,o),
(126,580,qs),
(126,527,l),
(37,527,l),
(37,472,l),
(126,472,l),
(126,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 41 77 0 6 6 39 6 78 17 17 22 33 38 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,495,o),
(350,533,o),
(295,533,qs),
(237,533,o),
(147,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(222,-6,o),
(285,-6,qs),
(345,-6,o),
(442,36,o),
(475,84,q),
(475,18,ls),
(475,-27,o),
(460,-102,o),
(423,-158,o),
(358,-189,o),
(307,-189,qs),
(284,-189,o),
(237,-180,o),
(195,-161,o),
(162,-129,o),
(154,-105,q),
(86,-105,l),
(96,-143,o),
(137,-196,o),
(194,-230,o),
(264,-245,o),
(303,-245,qs),
(367,-245,o),
(458,-209,o),
(515,-142,o),
(541,-49,o),
(541,17,qs),
(541,527,l),
(479,527,l),
(475,452,l)
);
},
{
closed = 1;
nodes = (
(405,442,qs),
(446,411,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(358,477,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
40 24 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 4 3 4 2 3 128 8 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 8 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 0 0 41 77 8 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
42 41 52 50 41 61 42 61 40 39 36 20 37 16 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = g;
unicode = 103;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,692,o),
(88,669,qs),
(88,646,o),
(115,620,o),
(137,620,qs),
(160,620,o),
(187,646,o),
(187,669,qs),
(187,691,o),
(160,717,o),
(137,717,qs),
(115,717,o)
);
},
{
closed = 1;
nodes = (
(105,527,l),
(105,2,ls),
(105,-45,o),
(95,-92,o),
(80,-107,qs),
(66,-122,o),
(19,-132,o),
(-1,-132,qs),
(-26,-132,l),
(-26,-187,l),
(10,-187,ls),
(98,-187,o),
(134,-148,qs),
(147,-133,o),
(162,-98,o),
(170,-59,o),
(171,-19,o),
(171,0,qs),
(171,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 97 5 1 0 0 48 77 0 4 4 41 77 0 3 3 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 3 2 101 0 1 1 0 97 5 1 0 0 48 77 0 4 4 41 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 30 29 23 21 20 18 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = j;
unicode = 106;
},
{
glyphname = o;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 2 97 5 1 2 2 49 77 4 1 0 0 3 97 0 3 3 50 3 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = o;
unicode = 111;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,258,ls),
(138,303,o),
(157,385,o),
(189,418,qs),
(212,443,o),
(282,472,o),
(330,472,qs),
(348,472,l),
(348,532,l),
(315,533,o),
(255,526,o),
(201,504,o),
(156,466,o),
(138,436,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 1 1 0 0 41 77 4 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 4 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 17 0 17 33 21 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = r;
unicode = 114;
},
{
glyphname = t;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,171,ls),
(123,128,o),
(140,61,o),
(159,41,qs),
(184,16,o),
(251,0,o),
(285,0,qs),
(331,0,l),
(331,57,l),
(291,57,ls),
(274,57,o),
(238,64,o),
(225,72,qs),
(200,88,o),
(189,148,o),
(189,175,qs),
(189,471,l),
(336,471,l),
(336,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 17 17 22 33 38 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = t;
unicode = 116;
},
{
glyphname = y2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,527,l),
(22,527,l),
(260,-32,l),
(252,-52,o),
(232,-93,o),
(206,-129,o),
(173,-158,o),
(151,-165,qs),
(138,-170,o),
(106,-172,o),
(88,-172,q),
(88,-235,l),
(139,-235,o),
(212,-216,o),
(244,-185,qs),
(261,-169,o),
(294,-115,o),
(323,-55,o),
(347,5,o),
(355,28,qs),
(531,527,l),
(455,527,l),
(298,52,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 19 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 101 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
23 33 24 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = y2_alt;
},
{
glyphname = uni0443;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,527,l),
(22,527,l),
(255,-32,l),
(247,-52,o),
(227,-93,o),
(201,-129,o),
(168,-158,o),
(146,-165,qs),
(133,-170,o),
(101,-172,o),
(83,-172,q),
(83,-235,l),
(134,-235,o),
(207,-217,o),
(239,-185,qs),
(256,-169,o),
(289,-115,o),
(318,-55,o),
(342,5,o),
(350,28,qs),
(526,527,l),
(450,527,l),
(293,52,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 19 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 101 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
23 33 24 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 543;
}
);
note = uni0443;
unicode = 1091;
},
{
glyphname = uni0451;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,677,o),
(129,657,qs),
(129,637,o),
(158,609,o),
(178,609,qs),
(198,609,o),
(228,636,o),
(228,657,qs),
(228,678,o),
(198,705,o),
(178,705,qs),
(158,705,o)
);
},
{
closed = 1;
nodes = (
(360,677,o),
(360,657,qs),
(360,637,o),
(388,609,o),
(408,609,qs),
(428,609,o),
(458,636,o),
(458,657,qs),
(458,678,o),
(428,705,o),
(408,705,qs),
(388,705,o)
);
},
{
closed = 1;
nodes = (
(527,297,o),
(505,402,o),
(451,483,o),
(365,533,o),
(302,533,qs),
(241,533,o),
(147,494,o),
(84,423,o),
(52,324,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,333,o),
(144,398,o),
(188,448,o),
(252,477,o),
(293,477,qs),
(334,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
0 5 8 4 8 5 4 128 14 1 10 13 1 8 5 10 8 103 3 1 1 1 0 97 12 2 11 3 0 0 20 77 0 9 9 7 97 0 7 7 29 77 0 4 4 6 97 0 6 6 30 6 78 56 56 24 24 13 12 1 0 56 66 56 66 62 60 24 55 24 55 51 49 41 39 35 34 30 28 19 17 12 23 13 23 7 5 0 11 1 11 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni0451;
unicode = 1105;
},
{
glyphname = uni0437;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,354,o),
(447,397,qs),
(447,436,o),
(412,489,o),
(358,520,o),
(291,533,o),
(259,533,qs),
(228,533,o),
(161,521,o),
(104,492,o),
(64,443,o),
(61,406,q),
(126,406,l),
(131,428,o),
(160,456,o),
(198,472,o),
(241,477,o),
(260,477,qs),
(281,477,o),
(325,468,o),
(361,448,o),
(384,414,o),
(384,389,qs),
(384,360,o),
(353,320,o),
(331,309,qs),
(311,299,o),
(263,293,o),
(240,293,qs),
(172,293,l),
(172,238,l),
(266,238,ls),
(291,238,o),
(341,232,o),
(380,213,o),
(405,177,o),
(405,147,qs),
(405,117,o),
(378,79,o),
(336,58,o),
(285,50,o),
(260,50,qs),
(241,50,o),
(193,57,o),
(148,73,o),
(113,102,o),
(107,125,q),
(42,125,l),
(46,85,o),
(90,34,o),
(153,5,o),
(226,-6,o),
(259,-6,qs),
(296,-6,o),
(372,8,o),
(432,43,o),
(470,102,o),
(470,147,qs),
(470,200,o),
(421,264,o),
(368,278,q),
(409,293,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 29 77 0 2 2 0 97 0 0 0 30 0 78 36 20 41 33 40 36 20 39 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = uni0437;
unicode = 1079;
},
{
glyphname = uni044D;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,234,l),
(437,234,l),
(436,195,o),
(414,128,o),
(371,79,o),
(308,50,o),
(266,50,qs),
(243,50,o),
(196,59,o),
(153,79,o),
(120,111,o),
(112,135,q),
(44,135,l),
(54,97,o),
(97,44,o),
(156,10,o),
(225,-6,o),
(262,-6,qs),
(325,-6,o),
(416,34,o),
(475,105,o),
(504,204,o),
(504,263,qs),
(504,321,o),
(476,420,o),
(417,492,o),
(327,533,o),
(265,533,qs),
(229,533,o),
(160,517,o),
(103,482,o),
(60,429,o),
(50,392,q),
(114,392,l),
(122,416,o),
(155,448,o),
(196,468,o),
(243,477,o),
(266,477,qs),
(308,477,o),
(371,447,o),
(413,396,o),
(436,327,o),
(438,289,q),
(177,289,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 8 1 7 0 6 4 7 6 103 0 0 0 2 97 0 2 2 29 77 0 5 5 3 97 0 3 3 30 3 78 0 0 0 44 0 44 20 36 20 40 36 20 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = uni044D;
unicode = 1101;
},
{
glyphname = C;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,643,o),
(524,614,o),
(567,570,o),
(579,539,q),
(645,539,l),
(631,586,o),
(580,653,o),
(509,695,o),
(424,715,o),
(378,715,qs),
(296,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,275,o),
(92,143,o),
(171,47,o),
(293,-8,o),
(376,-8,qs),
(422,-8,o),
(511,12,o),
(586,54,o),
(643,121,o),
(658,168,q),
(585,168,l),
(573,137,o),
(529,93,o),
(473,64,o),
(409,51,o),
(378,51,qs),
(310,51,o),
(213,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,525,o),
(212,608,o),
(309,656,o),
(377,656,qs),
(408,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 1 0 37 36 32 30 22 20 16 15 11 9 0 41 1 41 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = C;
unicode = 67;
},
{
glyphname = S;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,645,o),
(464,619,o),
(497,576,o),
(503,543,q),
(569,543,l),
(563,590,o),
(519,655,o),
(454,696,o),
(374,715,o),
(331,715,qs),
(284,715,o),
(196,695,o),
(127,649,o),
(86,576,o),
(86,522,qs),
(86,448,o),
(171,362,o),
(239,344,qs),
(279,333,o),
(356,317,o),
(396,307,qs),
(422,301,o),
(468,282,o),
(502,252,o),
(522,211,o),
(522,182,qs),
(522,146,o),
(491,96,o),
(441,65,o),
(379,51,o),
(348,51,qs),
(315,51,o),
(250,63,o),
(191,90,o),
(145,135,o),
(132,168,q),
(62,168,l),
(75,119,o),
(131,52,o),
(206,10,o),
(294,-8,o),
(341,-8,qs),
(392,-8,o),
(482,14,o),
(549,63,o),
(589,142,o),
(589,198,qs),
(589,233,o),
(566,286,o),
(526,325,o),
(472,351,o),
(441,360,qs),
(400,371,o),
(324,388,o),
(284,399,qs),
(258,406,o),
(211,426,o),
(175,457,o),
(154,500,o),
(154,530,qs),
(154,567,o),
(186,616,o),
(237,645,o),
(300,656,o),
(331,656,qs),
(361,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 61 60 56 54 35 33 29 28 24 22 0 65 1 65 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni0421;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,643,o),
(524,614,o),
(567,570,o),
(579,539,q),
(645,539,l),
(631,586,o),
(580,652,o),
(509,695,o),
(424,715,o),
(378,715,qs),
(297,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,275,o),
(92,143,o),
(171,47,o),
(293,-8,o),
(376,-8,qs),
(422,-8,o),
(511,12,o),
(586,54,o),
(643,121,o),
(658,168,q),
(585,168,l),
(573,137,o),
(529,93,o),
(473,64,o),
(409,51,o),
(378,51,qs),
(310,51,o),
(213,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,525,o),
(212,608,o),
(310,655,o),
(377,656,qs),
(408,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 27 77 0 1 1 3 97 0 3 3 28 3 78 1 0 37 36 32 30 22 20 16 15 11 9 0 41 1 41 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 711;
}
);
note = uni0421;
unicode = 1057;
},
{
glyphname = G;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,642,o),
(523,614,o),
(566,570,o),
(578,539,q),
(651,539,l),
(636,586,o),
(581,653,o),
(508,695,o),
(421,715,o),
(374,715,qs),
(290,715,o),
(169,656,o),
(90,556,o),
(53,420,o),
(54,344,qs),
(55,268,o),
(95,139,o),
(175,45,o),
(295,-8,o),
(376,-8,qs),
(444,-8,o),
(554,36,o),
(631,117,o),
(673,228,o),
(673,296,qs),
(673,346,l),
(373,346,l),
(373,286,l),
(613,286,l),
(612,233,o),
(579,146,o),
(519,85,o),
(432,51,o),
(377,51,qs),
(310,51,o),
(214,99,o),
(152,180,o),
(122,288,o),
(121,349,qs),
(120,409,o),
(148,520,o),
(209,605,o),
(306,656,o),
(375,656,qs),
(406,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 7 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 1 0 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = G;
unicode = 71;
},
{
glyphname = uni041E;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 27 77 0 3 3 0 97 4 1 0 0 28 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = uni041E;
unicode = 1054;
},
{
glyphname = Q;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,23,q),
(647,-131,l),
(700,-92,l),
(592,58,l),
(653,106,o),
(714,259,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(469,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
18 1 3 2 21 1 0 3 2 76 20 19 2 0 73 5 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 4 1 0 0 47 0 78 24 23 1 0 34 32 23 42 24 42 11 9 0 22 1 22 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Q;
unicode = 81;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,80,o),
(169,-8,o),
(260,-8,qs),
(322,-8,o),
(406,34,o),
(452,103,o),
(470,192,o),
(470,239,qs),
(470,707,l),
(405,707,l),
(405,241,ls),
(405,203,o),
(395,134,o),
(365,82,o),
(310,51,o),
(265,51,qs),
(200,51,o),
(123,113,o),
(115,179,q),
(47,179,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 0 0 0 19 0 19 37 21 34 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = J;
unicode = 74;
},
{
glyphname = K_alt;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,227,l),
(264,345,l),
(519,0,l),
(597,0,l),
(310,390,l),
(595,707,l),
(521,707,l),
(157,297,l),
(157,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 6 3 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = K_alt;
},
{
glyphname = K;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,312,l),
(292,312,l),
(519,0,l),
(597,0,l),
(342,355,l),
(595,707,l),
(518,707,l),
(281,372,l),
(157,372,l),
(157,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 38 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = K;
unicode = 75;
},
{
glyphname = k_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,164,l),
(233,264,l),
(428,0,l),
(504,0,l),
(278,308,l),
(488,527,l),
(413,527,l),
(138,236,l),
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
10 9 6 3 4 2 1 1 76 0 0 0 20 77 0 1 1 22 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 523;
}
);
note = k_alt;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,236,l),
(258,236,l),
(428,0,l),
(504,0,l),
(310,274,l),
(487,527,l),
(414,527,l),
(251,291,l),
(138,291,l),
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = k;
unicode = 107;
},
{
glyphname = i_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,527,l),
(17,527,l),
(17,472,l),
(106,472,l),
(106,0,l),
(172,0,l)
);
},
{
closed = 1;
nodes = (
(86,692,o),
(86,669,qs),
(86,646,o),
(113,620,o),
(135,620,qs),
(157,620,o),
(185,646,o),
(185,669,qs),
(185,691,o),
(157,717,o),
(135,717,qs),
(113,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 4 3 97 6 1 3 3 27 77 0 0 0 1 95 0 1 1 22 77 5 1 2 2 21 2 78 7 6 0 0 13 11 6 17 7 17 0 5 0 5 17 17 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = i_alt;
},
{
glyphname = j_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(29,527,l),
(29,472,l),
(118,472,l),
(118,-11,ls),
(118,-52,o),
(102,-101,o),
(69,-126,o),
(20,-134,o),
(-13,-133,q),
(-13,-187,l),
(23,-187,ls),
(110,-187,o),
(184,-107,o),
(184,-21,qs),
(184,527,l)
);
},
{
closed = 1;
nodes = (
(98,692,o),
(98,669,qs),
(98,646,o),
(125,620,o),
(147,620,qs),
(169,620,o),
(197,646,o),
(197,669,qs),
(197,691,o),
(169,717,o),
(147,717,qs),
(125,717,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 97 6 1 4 4 27 77 0 2 2 3 95 0 3 3 22 77 0 1 1 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 0 1 0 101 0 5 5 4 97 6 1 4 4 27 77 0 2 2 3 95 0 3 3 22 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
16 15 22 20 15 26 16 26 17 21 17 34 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = j_alt;
},
{
glyphname = s_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,469,o),
(378,453,o),
(409,426,o),
(416,408,q),
(477,408,l),
(471,442,o),
(430,490,o),
(373,520,o),
(307,533,o),
(276,533,qs),
(241,533,o),
(165,519,o),
(103,486,o),
(63,428,o),
(63,387,qs),
(63,327,o),
(133,258,o),
(193,247,qs),
(209,243,o),
(246,237,o),
(288,231,o),
(328,224,o),
(343,221,qs),
(360,217,o),
(392,206,o),
(416,188,o),
(430,160,o),
(430,140,qs),
(430,111,o),
(400,75,o),
(355,56,o),
(303,50,o),
(280,50,qs),
(257,50,o),
(208,58,o),
(163,75,o),
(126,104,o),
(115,127,q),
(48,127,l),
(56,89,o),
(104,39,o),
(169,8,o),
(243,-6,o),
(277,-6,qs),
(314,-6,o),
(392,7,o),
(455,42,o),
(495,102,o),
(495,144,qs),
(495,202,o),
(429,264,o),
(375,275,qs),
(343,283,o),
(257,294,o),
(225,300,qs),
(207,303,o),
(173,316,o),
(145,337,o),
(128,368,o),
(128,389,qs),
(128,416,o),
(157,450,o),
(200,469,o),
(251,477,o),
(274,477,qs),
(293,477,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 61 60 56 54 33 31 27 26 22 20 0 65 1 65 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 544;
}
);
note = s_alt;
},
{
glyphname = s;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,469,o),
(352,453,o),
(380,426,o),
(387,408,q),
(448,408,l),
(442,442,o),
(405,490,o),
(353,520,o),
(290,533,o),
(259,533,qs),
(224,533,o),
(152,519,o),
(95,486,o),
(59,430,o),
(59,387,qs),
(59,327,o),
(131,260,o),
(186,247,qs),
(218,239,o),
(278,228,o),
(309,221,qs),
(326,217,o),
(359,206,o),
(385,188,o),
(401,160,o),
(401,140,qs),
(401,111,o),
(375,75,o),
(335,56,o),
(286,50,o),
(263,50,qs),
(240,50,o),
(195,58,o),
(155,75,o),
(122,104,o),
(111,127,q),
(44,127,l),
(52,89,o),
(96,39,o),
(156,8,o),
(226,-6,o),
(260,-6,qs),
(297,-6,o),
(371,7,o),
(429,42,o),
(466,100,o),
(466,144,qs),
(466,202,o),
(399,264,o),
(346,275,qs),
(314,283,o),
(252,295,o),
(220,302,qs),
(202,306,o),
(168,318,o),
(141,338,o),
(124,368,o),
(124,389,qs),
(124,416,o),
(149,450,o),
(187,469,o),
(234,477,o),
(257,477,qs),
(276,477,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 59 58 54 52 33 31 27 26 22 20 0 63 1 63 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = s;
unicode = 115;
},
{
glyphname = c_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,7,o),
(444,36,o),
(488,79,o),
(501,109,q),
(430,109,l),
(409,75,o),
(337,50,o),
(299,50,qs),
(251,50,o),
(181,84,o),
(135,143,o),
(113,220,o),
(113,263,qs),
(113,308,o),
(137,387,o),
(185,444,o),
(256,477,o),
(305,477,qs),
(343,477,o),
(412,444,o),
(429,411,q),
(497,411,l),
(485,445,o),
(445,492,o),
(393,521,o),
(333,533,o),
(301,533,qs),
(239,533,o),
(145,494,o),
(81,422,o),
(48,323,o),
(48,263,qs),
(48,204,o),
(79,105,o),
(141,34,o),
(233,-6,o),
(295,-6,qs),
(327,-6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 30 0 78 1 0 33 32 30 28 20 18 16 15 11 9 0 37 1 37 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 549;
}
);
note = c_alt;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,653,o),
(121,541,o),
(64,386,o),
(64,294,qs),
(64,202,o),
(119,48,o),
(224,-63,o),
(374,-125,o),
(469,-125,qs),
(564,-125,o),
(714,-63,o),
(819,48,o),
(874,202,o),
(874,294,qs),
(874,386,o),
(817,541,o),
(712,653,o),
(562,715,o),
(469,715,qs),
(376,715,o)
);
},
{
closed = 1;
nodes = (
(675,599,o),
(763,503,o),
(809,371,o),
(809,294,qs),
(809,217,o),
(763,86,o),
(676,-10,o),
(549,-65,o),
(469,-65,qs),
(389,-65,o),
(263,-11,o),
(175,85,o),
(129,217,o),
(129,294,qs),
(129,372,o),
(176,504,o),
(263,600,o),
(389,654,o),
(469,654,qs),
(549,654,o)
);
},
{
closed = 1;
nodes = (
(634,141,o),
(651,202,q),
(589,202,l),
(577,166,o),
(517,139,o),
(482,139,qs),
(447,139,o),
(398,164,o),
(366,207,o),
(351,263,o),
(351,295,qs),
(351,326,o),
(365,383,o),
(396,426,o),
(449,451,o),
(485,451,qs),
(521,451,o),
(576,422,o),
(587,387,q),
(646,387,l),
(632,451,o),
(544,506,o),
(483,506,qs),
(433,506,o),
(362,473,o),
(314,416,o),
(290,339,o),
(290,295,qs),
(290,250,o),
(314,172,o),
(361,116,o),
(433,84,o),
(481,84,qs),
(542,84,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 10 1 0 11 1 2 5 0 2 105 0 5 0 7 6 5 7 105 0 8 12 1 4 3 8 4 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 41 40 21 20 1 0 71 70 68 66 58 56 54 53 51 49 40 73 41 73 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 938;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(639,0,l),
(534,118,l),
(562,160,o),
(603,248,o),
(609,299,q),
(546,299,l),
(540,261,o),
(514,194,o),
(491,163,q),
(317,368,l),
(351,386,o),
(410,426,o),
(454,473,o),
(479,530,o),
(479,565,qs),
(479,600,o),
(456,655,o),
(414,694,o),
(356,715,o),
(322,715,qs),
(283,715,o),
(217,693,o),
(170,650,o),
(143,587,o),
(143,547,qs),
(143,496,o),
(194,413,o),
(229,380,q),
(199,364,o),
(142,325,o),
(99,276,o),
(72,215,o),
(72,178,qs),
(72,132,o),
(105,62,o),
(162,16,o),
(239,-8,o),
(282,-8,qs),
(342,-8,o),
(444,29,o),
(489,69,q),
(552,0,l)
);
},
{
closed = 1;
nodes = (
(239,454,o),
(218,488,o),
(206,527,o),
(206,552,qs),
(206,603,o),
(264,655,o),
(315,656,qs),
(358,657,o),
(419,606,o),
(419,561,qs),
(419,533,o),
(392,486,o),
(352,448,o),
(303,417,o),
(282,405,q),
(267,423,o)
);
},
{
closed = 1;
nodes = (
(421,84,o),
(339,51,o),
(296,51,qs),
(267,51,o),
(211,67,o),
(167,99,o),
(141,148,o),
(141,180,qs),
(141,208,o),
(161,255,o),
(194,294,o),
(238,325,o),
(261,337,q),
(451,116,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
31 13 2 2 4 71 39 32 3 5 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 4 1 97 0 1 1 46 77 0 2 2 0 97 3 1 0 0 47 77 0 5 5 0 97 3 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 1 97 0 1 1 46 77 0 2 2 3 95 0 3 3 39 77 0 5 5 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
69 67 51 49 41 40 36 35 22 20 34 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,712,o),
(185,689,o),
(124,643,o),
(88,572,o),
(88,522,qs),
(88,448,o),
(173,359,o),
(241,344,qs),
(281,333,o),
(358,317,o),
(398,307,qs),
(423,301,o),
(469,281,o),
(504,252,o),
(524,210,o),
(524,182,qs),
(524,146,o),
(493,96,o),
(443,65,o),
(381,51,o),
(350,51,qs),
(317,51,o),
(251,63,o),
(193,90,o),
(147,135,o),
(134,168,q),
(64,168,l),
(76,124,o),
(123,61,o),
(186,19,o),
(262,-4,o),
(303,-7,q),
(303,-142,l),
(368,-142,l),
(368,-8,l),
(414,-5,o),
(496,20,o),
(556,69,o),
(591,145,o),
(591,198,qs),
(591,232,o),
(568,286,o),
(527,325,o),
(473,352,o),
(442,361,qs),
(402,372,o),
(326,388,o),
(286,399,qs),
(260,406,o),
(213,426,o),
(177,457,o),
(156,500,o),
(156,530,qs),
(156,567,o),
(188,616,o),
(239,645,o),
(302,656,o),
(333,656,qs),
(363,656,o),
(420,644,o),
(467,618,o),
(500,575,o),
(506,543,q),
(571,543,l),
(566,584,o),
(530,644,o),
(478,685,o),
(411,708,o),
(374,712,q),
(374,848,l),
(308,848,l),
(308,714,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
2 1 2 7 1 76 39 1 3 1 75 0 0 7 0 133 0 1 2 5 2 1 5 128 0 5 6 2 5 6 126 0 4 3 4 134 0 2 2 7 97 0 7 7 46 77 0 6 6 3 97 0 3 3 47 3 78 71 70 51 49 45 44 38 37 36 35 36 22 16 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,-37,o),
(159,90,o),
(135,227,o),
(135,302,qs),
(135,378,o),
(159,513,o),
(206,639,o),
(273,760,o),
(316,821,q),
(248,821,l),
(204,768,o),
(138,644,o),
(93,510,o),
(70,370,o),
(70,302,qs),
(70,234,o),
(94,94,o),
(140,-41,o),
(207,-166,o),
(250,-218,q),
(318,-218,l),
(274,-158,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 0 1 133 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
26 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,-166,o),
(153,-41,o),
(199,94,o),
(223,234,o),
(223,302,qs),
(223,370,o),
(200,510,o),
(155,644,o),
(89,768,o),
(45,821,q),
(-23,821,l),
(20,760,o),
(87,639,o),
(133,513,o),
(158,378,o),
(158,302,qs),
(158,227,o),
(134,90,o),
(87,-37,o),
(19,-158,o),
(-25,-218,q),
(43,-218,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 133 2 1 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 21 0 21 26 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,476,o),
(90,406,o),
(64,314,o),
(64,260,qs),
(64,153,o),
(168,8,o),
(271,-6,q),
(271,-165,l),
(336,-165,l),
(336,-7,l),
(368,-4,o),
(428,15,o),
(477,49,o),
(515,99,o),
(524,133,q),
(456,133,l),
(439,84,o),
(363,48,o),
(315,48,qs),
(267,48,o),
(196,82,o),
(151,140,o),
(129,217,o),
(129,260,qs),
(129,304,o),
(150,382,o),
(195,441,o),
(264,475,o),
(312,475,qs),
(358,475,o),
(435,433,o),
(449,389,q),
(517,389,l),
(499,456,o),
(402,525,o),
(336,530,q),
(336,670,l),
(271,670,l),
(271,528,l),
(220,521,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
3 0 2 2 0 32 29 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 22 18 40 34 20 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = cent;
unicode = 162;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,654,o),
(373,638,o),
(400,611,o),
(405,591,q),
(464,591,l),
(459,625,o),
(423,672,o),
(371,702,o),
(309,715,o),
(278,715,qs),
(243,715,o),
(174,702,o),
(118,670,o),
(84,615,o),
(84,574,qs),
(84,511,o),
(137,481,q),
(108,463,o),
(73,401,o),
(74,366,qs),
(73,308,o),
(147,244,o),
(205,233,qs),
(234,227,o),
(296,215,o),
(328,209,qs),
(344,206,o),
(377,195,o),
(404,177,o),
(420,150,o),
(420,130,qs),
(420,101,o),
(391,68,o),
(347,51,o),
(298,47,o),
(279,47,qs),
(259,47,o),
(215,55,o),
(174,73,o),
(140,102,o),
(131,123,q),
(64,123,l),
(74,84,o),
(120,33,o),
(181,4,o),
(252,-8,o),
(288,-8,qs),
(323,-8,o),
(393,5,o),
(448,39,o),
(483,94,o),
(483,136,qs),
(483,212,o),
(423,238,q),
(480,276,o),
(481,343,qs),
(482,371,o),
(463,414,o),
(430,441,o),
(384,459,o),
(359,465,qs),
(321,475,o),
(252,491,o),
(214,502,qs),
(187,508,o),
(143,545,o),
(143,576,qs),
(143,603,o),
(169,637,o),
(208,655,o),
(251,662,o),
(276,661,qs),
(295,661,o)
);
},
{
closed = 1;
nodes = (
(310,422,o),
(357,409,qs),
(383,401,o),
(421,365,o),
(421,336,qs),
(421,309,o),
(386,272,o),
(369,264,q),
(339,269,o),
(281,277,o),
(252,284,qs),
(235,288,o),
(194,299,o),
(159,317,o),
(136,347,o),
(136,370,qs),
(136,393,o),
(162,436,o),
(185,451,q),
(228,437,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
84 55 18 3 2 5 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 68 67 63 61 37 35 31 30 26 24 0 72 1 72 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = section;
unicode = 167;
},
{
glyphname = uni04C1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,317,l),
(591,317,l),
(760,0,l),
(839,0,l),
(646,357,l),
(838,707,l),
(767,707,l),
(589,377,l),
(461,377,l),
(461,707,l),
(396,707,l),
(396,377,l),
(269,377,l),
(92,707,l),
(19,707,l),
(211,357,l),
(19,0,l),
(96,0,l),
(266,317,l),
(396,317,l),
(396,0,l),
(461,0,l)
);
},
{
closed = 1;
nodes = (
(320,883,o),
(312,927,q),
(251,927,l),
(254,889,o),
(287,838,o),
(336,807,o),
(397,794,o),
(429,794,qs),
(462,794,o),
(523,807,o),
(571,839,o),
(603,889,o),
(606,927,q),
(545,927,l),
(542,905,o),
(520,875,o),
(488,856,o),
(450,848,o),
(429,848,qs),
(388,848,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
16 5 2 0 3 1 76 13 1 11 10 11 133 15 1 10 0 12 2 10 12 105 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 20 77 14 9 7 3 1 1 21 1 78 23 22 0 0 39 38 34 32 28 27 22 41 23 41 0 21 0 21 17 18 17 17 17 17 18 17 17 16 7 31 
CALL[ ]	/* CallFunction */";
};
width = 858;
}
);
note = uni04C1;
unicode = 1217;
},
{
glyphname = uni04C2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,237,l),
(511,237,l),
(657,0,l),
(732,0,l),
(561,277,l),
(716,527,l),
(643,527,l),
(501,292,l),
(408,292,l),
(408,527,l),
(342,527,l),
(342,292,l),
(249,292,l),
(107,527,l),
(34,527,l),
(189,277,l),
(19,0,l),
(94,0,l),
(239,237,l),
(342,237,l),
(342,0,l),
(408,0,l)
);
},
{
closed = 1;
nodes = (
(322,674,o),
(292,689,o),
(271,717,o),
(268,740,q),
(208,740,l),
(211,705,o),
(240,658,o),
(285,629,o),
(342,617,o),
(373,617,qs),
(404,617,o),
(463,629,o),
(509,658,o),
(540,705,o),
(543,740,q),
(483,740,l),
(480,717,o),
(459,689,o),
(428,674,o),
(392,668,o),
(375,668,qs),
(358,668,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
16 5 2 0 3 1 76 13 1 11 10 11 133 15 1 10 0 12 2 10 12 105 5 1 3 8 1 0 1 3 0 104 6 4 2 2 2 22 77 14 9 7 3 1 1 21 1 78 23 22 0 0 39 38 34 32 28 27 22 43 23 43 0 21 0 21 17 18 17 17 17 17 18 17 17 16 7 31 
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = uni04C2;
unicode = 1218;
},
{
glyphname = w_alt;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,402,l),
(228,55,l),
(94,527,l),
(19,527,l),
(178,0,l),
(275,0,l),
(384,339,l),
(495,0,l),
(591,0,l),
(746,527,l),
(672,527,l),
(541,55,l),
(428,402,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
10 5 2 1 4 1 76 0 4 0 1 0 4 1 128 3 1 0 0 22 77 2 1 1 1 21 1 78 18 17 18 17 17 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = w_alt;
},
{
glyphname = W_alt;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,60,l),
(94,707,l),
(19,707,l),
(211,0,l),
(313,0,l),
(451,455,l),
(590,0,l),
(691,0,l),
(883,707,l),
(809,707,l),
(641,60,l),
(493,549,l),
(411,549,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 1 3 1 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 0 0 20 77 5 1 4 4 22 77 2 1 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 4 0 1 0 4 1 128 3 1 0 0 20 77 2 1 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 17 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 902;
}
);
note = W_alt;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(581,550,o),
(518,652,o),
(413,715,o),
(334,715,qs),
(255,715,o),
(151,652,o),
(88,550,o),
(62,420,o),
(62,353,qs),
(62,285,o),
(88,155,o),
(150,54,o),
(255,-8,o),
(334,-8,qs),
(413,-8,o),
(518,54,o),
(581,156,o),
(607,286,o),
(607,353,qs),
(607,420,o)
);
},
{
closed = 1;
nodes = (
(145,512,o),
(190,600,o),
(270,656,o),
(334,656,qs),
(398,656,o),
(478,600,o),
(523,512,o),
(539,405,o),
(539,353,qs),
(539,300,o),
(524,193,o),
(479,106,o),
(399,51,o),
(334,51,qs),
(269,51,o),
(189,106,o),
(145,193,o),
(129,300,o),
(129,353,qs),
(129,405,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 46 77 0 2 2 0 97 0 0 0 47 0 78 40 40 40 36 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,707,l),
(181,680,o),
(148,648,o),
(106,631,o),
(57,625,o),
(30,624,q),
(30,585,l),
(172,585,l),
(172,0,l),
(237,0,l),
(237,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 38 77 0 0 0 39 0 78 20 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,389,o),
(341,323,o),
(270,263,o),
(239,236,qs),
(35,62,l),
(35,0,l),
(512,0,l),
(512,60,l),
(128,60,l),
(330,233,ls),
(364,262,o),
(427,321,o),
(475,389,o),
(504,467,o),
(504,515,qs),
(504,564,o),
(471,639,o),
(412,689,o),
(332,715,o),
(285,715,qs),
(249,715,o),
(176,699,o),
(113,663,o),
(66,608,o),
(56,571,q),
(129,571,l),
(148,616,o),
(232,656,o),
(281,656,qs),
(314,656,o),
(372,638,o),
(414,602,o),
(438,548,o),
(438,513,qs),
(438,469,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
29 1 3 1 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 0 3 3 4 95 0 4 4 39 4 78 17 26 36 18 36 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 567;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,99,o),
(96,41,o),
(164,7,o),
(245,-8,o),
(284,-8,qs),
(332,-8,o),
(423,13,o),
(494,61,o),
(536,138,o),
(536,193,qs),
(536,265,o),
(456,358,o),
(386,372,q),
(441,389,o),
(504,482,o),
(504,539,qs),
(504,588,o),
(467,655,o),
(406,697,o),
(327,715,o),
(285,715,qs),
(249,715,o),
(173,700,o),
(108,665,o),
(63,609,o),
(58,568,q),
(126,568,l),
(132,593,o),
(164,627,o),
(206,648,o),
(256,656,o),
(281,656,qs),
(313,656,o),
(371,642,o),
(416,612,o),
(442,562,o),
(441,526,qs),
(440,498,o),
(413,448,o),
(391,431,qs),
(361,407,o),
(287,390,o),
(249,390,qs),
(201,390,l),
(201,330,l),
(274,330,ls),
(310,330,o),
(380,320,o),
(435,291,o),
(469,237,o),
(469,193,qs),
(469,152,o),
(438,96,o),
(387,63,o),
(321,50,o),
(285,51,qs),
(261,51,o),
(205,60,o),
(154,80,o),
(114,115,o),
(106,141,q),
(38,141,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
48 1 1 2 1 76 0 4 3 2 3 4 2 128 8 1 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 46 77 0 0 0 6 97 0 6 6 47 6 78 0 0 0 61 0 61 46 36 20 41 33 40 36 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,146,l),
(581,146,l),
(581,206,l),
(493,206,l),
(493,707,l),
(397,707,l),
(47,198,l),
(47,146,l),
(428,146,l),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(126,206,l),
(428,647,l),
(428,206,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
11 1 2 1 2 1 0 2 2 76 5 1 2 3 1 0 4 2 0 104 0 1 1 38 77 0 4 4 39 4 78 18 17 17 17 18 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = four;
unicode = 52;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,646,l),
(477,707,l),
(17,707,l),
(17,647,l),
(407,647,l),
(112,0,l),
(186,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 2 0 1 76 0 0 0 1 95 0 1 1 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 505;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,349,o),
(418,366,q),
(470,383,o),
(532,472,o),
(532,532,qs),
(532,580,o),
(494,650,o),
(431,694,o),
(350,715,o),
(308,715,qs),
(265,715,o),
(185,694,o),
(122,650,o),
(84,580,o),
(84,532,qs),
(84,472,o),
(142,380,o),
(196,363,q),
(168,354,o),
(119,323,o),
(83,279,o),
(62,224,o),
(62,192,qs),
(62,137,o),
(102,61,o),
(170,13,o),
(259,-8,o),
(307,-8,qs),
(355,-8,o),
(444,14,o),
(512,62,o),
(553,138,o),
(553,192,qs),
(553,258,o)
);
},
{
closed = 1;
nodes = (
(399,640,o),
(441,607,o),
(464,554,o),
(464,517,qs),
(464,484,o),
(437,436,o),
(392,404,o),
(336,388,o),
(308,388,qs),
(277,388,o),
(220,403,o),
(177,436,o),
(152,486,o),
(152,521,qs),
(152,557,o),
(176,608,o),
(218,641,o),
(275,656,o),
(308,656,qs),
(342,656,o)
);
},
{
closed = 1;
nodes = (
(404,316,o),
(454,283,o),
(485,230,o),
(485,191,qs),
(485,152,o),
(455,98,o),
(405,65,o),
(342,51,o),
(308,51,qs),
(274,51,o),
(210,65,o),
(160,98,o),
(129,152,o),
(129,191,qs),
(129,230,o),
(160,283,o),
(211,316,o),
(275,331,o),
(308,331,qs),
(341,331,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
31 15 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 46 77 0 5 5 0 97 0 0 0 47 0 78 55 54 35 34 65 63 54 73 55 73 45 43 34 53 35 53 24 22 36 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,284,o),
(435,307,qs),
(455,322,o),
(488,363,o),
(496,387,q),
(496,380,o),
(497,362,o),
(497,355,qs),
(497,309,o),
(485,210,o),
(467,167,qs),
(419,51,o),
(293,51,qs),
(247,51,o),
(166,88,o),
(145,128,q),
(70,128,l),
(81,92,o),
(127,40,o),
(186,7,o),
(256,-8,o),
(291,-8,qs),
(362,-8,o),
(475,45,o),
(510,108,qs),
(541,162,o),
(561,292,o),
(560,353,qs),
(560,381,o),
(554,444,o),
(542,508,o),
(522,569,o),
(506,596,qs),
(436,715,o),
(298,715,qs),
(246,715,o),
(158,683,o),
(95,623,o),
(59,538,o),
(59,485,qs),
(59,435,o),
(93,354,o),
(153,296,o),
(235,264,o),
(283,264,qs),
(323,263,o)
);
},
{
closed = 1;
nodes = (
(153,588,o),
(199,632,o),
(261,656,o),
(296,656,qs),
(334,656,o),
(396,630,o),
(441,583,o),
(466,520,o),
(466,483,qs),
(466,447,o),
(438,389,o),
(391,348,o),
(329,325,o),
(295,325,qs),
(217,325,o),
(126,415,o),
(126,493,qs),
(126,529,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 3 0 4 0 3 4 128 0 5 7 1 0 3 5 0 105 0 6 6 1 97 0 1 1 46 77 0 4 4 2 97 0 2 2 47 2 78 1 0 60 58 50 48 33 31 29 28 24 22 11 9 0 45 1 45 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni0430;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 7 7 0 97 5 1 0 0 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 0 1 8 1 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 5 5 21 77 0 7 7 0 97 0 0 0 30 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
40 38 49 47 38 54 40 54 21 36 20 36 40 34 9 7 28 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = uni0430;
unicode = 1072;
},
{
glyphname = uni0435;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 29 77 0 0 0 2 97 0 2 2 30 2 78 32 32 0 0 32 42 32 42 38 36 0 31 0 31 40 36 20 36 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni0435;
unicode = 1077;
},
{
glyphname = uni043E;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 2 97 5 1 2 2 29 77 4 1 0 0 3 97 0 3 3 30 3 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = uni043E;
unicode = 1086;
},
{
glyphname = uni0441;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,10,o),
(459,45,o),
(501,98,o),
(512,135,q),
(444,135,l),
(427,86,o),
(351,50,o),
(303,50,qs),
(255,50,o),
(184,84,o),
(139,142,o),
(117,219,o),
(117,262,qs),
(117,306,o),
(139,384,o),
(184,443,o),
(253,477,o),
(300,477,qs),
(346,477,o),
(423,435,o),
(437,391,q),
(504,391,l),
(485,463,o),
(376,533,o),
(304,533,qs),
(242,533,o),
(148,493,o),
(84,421,o),
(52,322,o),
(52,262,qs),
(52,204,o),
(83,106,o),
(145,34,o),
(237,-6,o),
(299,-6,qs),
(334,-6,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 30 0 78 1 0 31 30 28 26 18 16 14 13 11 9 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = uni0441;
unicode = 1089;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,-120,o),
(274,-142,qs),
(274,-166,o),
(302,-195,o),
(328,-193,q),
(323,-222,o),
(294,-264,o),
(272,-278,q),
(288,-304,l),
(331,-286,o),
(381,-203,o),
(380,-158,qs),
(381,-132,o),
(354,-92,o),
(326,-91,qs),
(303,-90,o)
);
},
{
closed = 1;
nodes = (
(408,645,o),
(455,619,o),
(488,576,o),
(494,543,q),
(560,543,l),
(554,590,o),
(510,655,o),
(445,696,o),
(365,715,o),
(322,715,qs),
(275,715,o),
(187,695,o),
(118,649,o),
(77,576,o),
(77,522,qs),
(77,448,o),
(162,362,o),
(230,344,qs),
(270,333,o),
(347,317,o),
(387,307,qs),
(413,301,o),
(459,282,o),
(493,252,o),
(513,211,o),
(513,182,qs),
(513,146,o),
(482,96,o),
(432,65,o),
(370,51,o),
(339,51,qs),
(306,51,o),
(241,63,o),
(182,90,o),
(136,135,o),
(123,168,q),
(53,168,l),
(66,119,o),
(122,52,o),
(197,10,o),
(285,-8,o),
(332,-8,qs),
(383,-8,o),
(473,14,o),
(540,63,o),
(580,142,o),
(580,198,qs),
(580,233,o),
(557,286,o),
(517,325,o),
(463,351,o),
(432,360,qs),
(391,371,o),
(315,388,o),
(275,399,qs),
(249,406,o),
(202,426,o),
(166,457,o),
(145,500,o),
(145,530,qs),
(145,567,o),
(177,616,o),
(228,645,o),
(291,656,o),
(322,656,qs),
(352,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
10 7 6 3 0 73 0 6 1 3 1 6 3 128 0 3 4 1 3 4 126 7 1 0 2 0 134 8 1 1 1 5 97 0 5 5 46 77 0 4 4 2 97 0 2 2 47 2 78 17 16 1 0 77 76 72 70 51 49 45 44 40 38 16 81 17 81 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,-120,o),
(209,-142,qs),
(209,-166,o),
(237,-195,o),
(263,-193,q),
(258,-222,o),
(229,-264,o),
(207,-278,q),
(223,-304,l),
(266,-286,o),
(316,-203,o),
(315,-158,q),
(317,-133,o),
(288,-91,o),
(261,-91,qs),
(238,-90,o)
);
},
{
closed = 1;
nodes = (
(320,469,o),
(356,453,o),
(384,426,o),
(391,408,q),
(452,408,l),
(446,442,o),
(409,490,o),
(357,520,o),
(294,533,o),
(263,533,qs),
(228,533,o),
(156,519,o),
(99,486,o),
(63,429,o),
(63,387,qs),
(63,327,o),
(131,260,o),
(193,246,qs),
(222,239,o),
(282,228,o),
(313,221,qs),
(330,217,o),
(363,206,o),
(389,188,o),
(405,160,o),
(405,140,qs),
(405,111,o),
(379,75,o),
(339,56,o),
(290,50,o),
(267,50,qs),
(244,50,o),
(199,58,o),
(159,75,o),
(126,104,o),
(115,127,q),
(48,127,l),
(56,89,o),
(100,39,o),
(160,8,o),
(230,-6,o),
(264,-6,qs),
(301,-6,o),
(375,7,o),
(433,42,o),
(470,100,o),
(470,144,qs),
(470,202,o),
(403,264,o),
(350,275,qs),
(318,283,o),
(256,295,o),
(224,302,qs),
(206,306,o),
(172,318,o),
(145,338,o),
(128,368,o),
(128,389,qs),
(128,416,o),
(153,450,o),
(191,469,o),
(238,477,o),
(261,477,qs),
(280,477,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
10 7 6 3 4 0 73 0 6 1 3 1 6 3 128 0 3 4 1 3 4 126 7 1 0 2 0 134 8 1 1 1 5 97 0 5 5 49 77 0 4 4 2 97 0 2 2 50 2 78 17 16 1 0 75 74 70 68 49 47 43 42 38 36 16 79 17 79 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,-120,o),
(237,-142,qs),
(237,-166,o),
(265,-195,o),
(291,-193,q),
(286,-222,o),
(257,-264,o),
(235,-278,q),
(251,-304,l),
(294,-286,o),
(344,-203,o),
(343,-158,qs),
(344,-135,o),
(317,-91,o),
(289,-91,qs),
(266,-90,o)
);
},
{
closed = 1;
nodes = (
(19,707,l),
(19,647,l),
(253,647,l),
(253,0,l),
(318,0,l),
(318,647,l),
(552,647,l),
(552,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
10 7 6 3 0 73 5 1 0 2 0 134 3 1 1 1 4 95 0 4 4 38 77 0 2 2 39 2 78 1 0 23 22 21 20 19 18 17 16 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,-120,o),
(165,-142,qs),
(165,-166,o),
(193,-195,o),
(219,-193,q),
(214,-222,o),
(185,-264,o),
(163,-278,q),
(179,-304,l),
(222,-286,o),
(272,-203,o),
(271,-158,qs),
(272,-134,o),
(245,-91,o),
(217,-91,qs),
(194,-90,o)
);
},
{
closed = 1;
nodes = (
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,171,ls),
(123,128,o),
(140,61,o),
(159,41,qs),
(184,15,o),
(251,0,o),
(285,0,qs),
(331,0,l),
(331,57,l),
(291,57,ls),
(274,57,o),
(238,64,o),
(225,72,qs),
(200,88,o),
(189,148,o),
(189,175,qs),
(189,471,l),
(336,471,l),
(336,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
10 7 6 3 0 73 0 7 1 7 133 8 1 0 4 0 134 5 1 2 2 1 95 6 1 1 1 41 77 0 3 3 4 97 0 4 4 39 4 78 1 0 41 40 39 38 37 36 30 28 27 25 19 18 17 16 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,0,l),
(148,527,l),
(82,527,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(258,640,l),
(135,786,l),
(94,786,l),
(-29,640,l),
(36,640,l),
(114,737,l),
(196,640,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 3 2 3 133 4 1 2 0 2 133 0 0 0 41 77 0 1 1 39 1 78 17 17 18 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 239;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,240,o),
(276,280,o),
(292,300,qs),
(306,317,o),
(339,350,o),
(354,365,qs),
(395,403,o),
(450,484,o),
(450,543,qs),
(450,587,o),
(419,651,o),
(365,694,o),
(293,715,o),
(253,715,qs),
(218,715,o),
(149,699,o),
(91,664,o),
(49,610,o),
(42,574,q),
(111,574,l),
(118,598,o),
(147,629,o),
(184,648,o),
(228,656,o),
(251,656,qs),
(278,656,o),
(327,641,o),
(363,612,o),
(385,568,o),
(385,539,qs),
(385,504,o),
(349,444,o),
(324,418,qs),
(298,392,o),
(241,340,o),
(221,309,qs),
(208,289,o),
(196,240,o),
(198,216,q),
(265,216,l)
);
},
{
closed = 1;
nodes = (
(181,66,o),
(181,44,qs),
(181,22,o),
(208,-8,o),
(231,-8,qs),
(254,-8,o),
(282,22,o),
(282,44,qs),
(282,66,o),
(254,94,o),
(231,94,qs),
(208,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 1 0 3 0 1 3 128 6 1 3 4 0 3 4 126 0 0 0 2 97 0 2 2 46 77 7 1 4 4 5 97 0 5 5 47 5 78 41 40 0 0 47 45 40 51 41 51 0 39 0 39 36 20 45 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = question;
unicode = 63;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(932,439,o),
(967,479,o),
(986,534,o),
(986,565,qs),
(986,597,o),
(968,652,o),
(933,692,o),
(882,715,o),
(848,715,qs),
(779,715,o),
(707,631,o),
(707,565,qs),
(707,533,o),
(725,478,o),
(761,438,o),
(813,415,o),
(847,415,qs),
(880,415,o)
);
},
{
closed = 1;
nodes = (
(930,607,o),
(930,565,qs),
(930,524,o),
(892,465,o),
(847,465,qs),
(801,465,o),
(760,522,o),
(760,565,qs),
(760,607,o),
(802,664,o),
(847,664,qs),
(890,663,o)
);
},
{
closed = 1;
nodes = (
(129,641,l),
(520,0,l),
(620,0,l),
(620,707,l),
(555,707,l),
(555,64,l),
(166,707,l),
(64,707,l),
(64,0,l),
(129,0,l)
);
},
{
closed = 1;
nodes = (
(714,342,l),
(714,282,l),
(979,282,l),
(979,342,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
38 1 3 2 33 1 6 8 2 76 5 1 4 1 2 1 4 2 128 12 7 2 6 8 6 134 0 1 11 1 2 3 1 2 105 0 3 10 1 0 9 3 0 105 0 9 8 8 9 87 0 9 9 8 95 0 8 9 8 79 30 30 19 18 1 0 43 42 41 40 30 39 30 39 37 36 35 34 32 31 25 23 18 29 19 29 9 7 0 17 1 17 13 6 22 
CALL[ ]	/* CallFunction */";
};
width = 1050;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = uni0401;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,900,o),
(162,879,qs),
(162,856,o),
(187,830,o),
(210,830,qs),
(233,830,o),
(257,856,o),
(257,879,qs),
(257,900,o),
(230,925,o),
(210,925,qs),
(190,925,o)
);
},
{
closed = 1;
nodes = (
(402,900,o),
(402,879,qs),
(402,856,o),
(426,830,o),
(449,830,qs),
(472,830,o),
(496,856,o),
(496,879,qs),
(496,900,o),
(469,925,o),
(449,925,qs),
(429,925,o)
);
},
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
11 2 10 3 0 3 1 1 4 0 1 105 0 6 0 7 8 6 7 103 0 5 5 4 95 0 4 4 20 77 0 8 8 9 95 0 9 9 21 9 78 13 12 1 0 35 34 33 32 31 30 29 28 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = uni0401;
unicode = 1025;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(142,417,o),
(112,374,o),
(98,318,o),
(97,288,q),
(160,288,l),
(160,303,o),
(165,337,o),
(177,366,o),
(200,385,o),
(218,385,qs),
(242,385,o),
(283,350,o),
(327,308,o),
(380,273,o),
(416,273,qs),
(450,273,o),
(497,298,o),
(526,341,o),
(540,396,o),
(542,426,q),
(480,426,l),
(479,411,o),
(474,377,o),
(462,348,o),
(439,330,o),
(420,330,qs),
(396,330,o),
(355,365,o),
(310,408,o),
(258,443,o),
(223,443,qs),
(189,443,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 60 values pushed */
0 2 0 4 0 2 4 128 0 5 1 3 1 5 3 128 6 1 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 1 0 27 26 22 20 17 15 11 10 6 4 0 31 1 31 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 639;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,459,l),
(193,669,l),
(282,669,l),
(282,707,l),
(64,707,l),
(64,669,l),
(152,669,l),
(152,459,l)
);
},
{
closed = 1;
nodes = (
(529,668,l),
(529,459,l),
(570,459,l),
(570,707,l),
(507,707,l),
(446,571,l),
(385,707,l),
(320,707,l),
(320,459,l),
(361,459,l),
(361,668,l),
(431,515,l),
(459,515,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
19 14 9 3 8 0 1 76 9 1 8 0 3 0 8 3 128 6 5 2 1 2 1 0 8 1 0 103 6 5 2 1 1 3 95 7 4 2 3 1 3 79 8 8 8 20 8 20 17 18 17 19 17 17 17 16 10 6 30 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,718,o),
(83,669,o),
(57,600,o),
(57,558,qs),
(57,473,o),
(158,377,o),
(242,377,qs),
(326,377,o),
(425,474,o),
(425,558,qs),
(425,600,o),
(400,668,o),
(352,718,o),
(284,745,o),
(242,745,qs),
(200,745,o)
);
},
{
closed = 1;
nodes = (
(387,626,o),
(387,558,qs),
(387,490,o),
(310,412,o),
(242,412,qs),
(173,412,o),
(94,490,o),
(94,558,qs),
(94,626,o),
(173,711,o),
(242,711,qs),
(311,711,o)
);
},
{
closed = 1;
nodes = (
(278,543,l),
(296,549,o),
(319,576,o),
(319,599,qs),
(319,630,o),
(283,656,o),
(254,656,qs),
(175,656,l),
(175,471,l),
(206,471,l),
(206,540,l),
(243,540,l),
(288,471,l),
(326,471,l)
);
},
{
closed = 1;
nodes = (
(267,625,o),
(287,613,o),
(287,598,qs),
(287,581,o),
(265,568,o),
(251,568,qs),
(206,568,l),
(206,625,l),
(253,625,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 98 values pushed */
40 1 4 8 1 76 12 7 2 5 4 3 4 5 3 128 10 1 0 11 1 2 6 0 2 105 0 6 13 1 9 8 6 9 105 0 8 0 4 5 8 4 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 42 42 28 28 17 16 1 0 42 50 42 49 45 43 28 41 28 41 35 33 32 31 30 29 23 21 16 27 17 27 9 7 0 15 1 15 14 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 482;
}
);
note = registered;
unicode = 174;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,663,o),
(103,701,qs),
(103,738,o),
(146,786,o),
(184,786,qs),
(222,786,o),
(264,738,o),
(264,701,qs),
(264,664,o),
(222,617,o),
(184,617,qs),
(146,617,o)
);
},
{
closed = 1;
nodes = (
(303,648,o),
(303,701,qs),
(303,753,o),
(241,821,o),
(185,821,qs),
(129,821,o),
(64,754,o),
(64,701,qs),
(64,647,o),
(127,581,o),
(184,581,qs),
(240,581,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 3 0 1 0 3 1 105 4 1 0 2 2 0 89 4 1 0 0 2 97 5 1 2 0 2 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 367;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,408,o),
(64,366,qs),
(64,324,o),
(116,266,o),
(161,266,qs),
(207,266,o),
(259,324,o),
(259,366,qs),
(259,408,o),
(206,464,o),
(161,464,qs),
(117,464,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 323;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = uni27F5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,295,l),
(415,532,l),
(372,578,l),
(64,265,l),
(372,-47,l),
(415,-1,l),
(178,235,l),
(1307,235,l),
(1307,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 0 1 1 76 6 5 2 1 74 3 2 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 22 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1371;
}
);
note = uni27F5;
unicode = 10229;
},
{
glyphname = uni27F6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1193,235,l),
(956,-1,l),
(999,-47,l),
(1307,265,l),
(999,578,l),
(956,532,l),
(1193,295,l),
(64,295,l),
(64,235,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 1 0 1 76 3 2 2 0 74 6 5 2 1 73 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 22 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1371;
}
);
note = uni27F6;
unicode = 10230;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(601,294,l),
(645,332,l),
(354,668,l),
(64,332,l),
(107,294,l),
(325,554,l),
(325,0,l),
(383,0,l),
(383,554,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 74 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,374,l),
(64,336,l),
(355,0,l),
(645,336,l),
(602,374,l),
(384,114,l),
(384,668,l),
(326,668,l),
(326,114,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 73 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni21BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(863,761,l),
(514,771,l),
(505,424,l),
(569,424,l),
(574,664,l),
(615,634,o),
(680,558,o),
(725,471,o),
(749,378,o),
(749,331,qs),
(749,263,o),
(705,146,o),
(624,61,o),
(510,13,o),
(440,13,qs),
(371,13,o),
(257,63,o),
(176,150,o),
(132,267,o),
(132,335,qs),
(132,411,o),
(188,550,o),
(239,607,q),
(193,655,l),
(128,590,o),
(65,426,o),
(65,335,qs),
(65,250,o),
(120,108,o),
(220,6,o),
(360,-51,o),
(446,-51,qs),
(527,-51,o),
(663,7,o),
(762,109,o),
(817,248,o),
(817,328,qs),
(817,451,o),
(710,650,o),
(614,710,q),
(861,699,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
35 17 16 3 2 4 1 76 0 2 4 1 4 2 1 128 0 3 5 1 4 2 3 4 103 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 0 0 0 40 0 40 17 26 47 39 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 927;
}
);
note = uni21BA;
unicode = 8634;
},
{
glyphname = uni21BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,650,o),
(110,451,o),
(110,328,qs),
(110,248,o),
(165,109,o),
(264,7,o),
(400,-51,o),
(481,-51,qs),
(566,-51,o),
(707,6,o),
(807,108,o),
(862,250,o),
(862,335,qs),
(862,426,o),
(799,590,o),
(734,655,q),
(688,607,l),
(739,550,o),
(795,411,o),
(795,335,qs),
(795,267,o),
(750,150,o),
(669,63,o),
(556,13,o),
(487,13,qs),
(417,13,o),
(303,61,o),
(222,146,o),
(178,263,o),
(178,331,qs),
(178,378,o),
(202,471,o),
(247,558,o),
(312,634,o),
(353,664,q),
(358,424,l),
(422,424,l),
(413,771,l),
(64,761,l),
(66,699,l),
(313,710,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
24 23 5 3 1 4 1 76 0 1 4 2 4 1 2 128 0 0 5 1 4 1 0 4 103 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 0 0 0 40 0 40 47 42 17 17 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 927;
}
);
note = uni21BB;
unicode = 8635;
},
{
glyphname = uni21B7;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(769,156,o),
(795,233,o),
(808,313,o),
(808,351,qs),
(808,435,o),
(757,577,o),
(661,680,o),
(523,739,o),
(437,739,qs),
(359,739,o),
(229,686,o),
(133,592,o),
(73,463,o),
(64,388,q),
(132,388,l),
(140,449,o),
(190,553,o),
(268,629,o),
(373,673,o),
(437,673,qs),
(508,673,o),
(621,624,o),
(700,537,o),
(742,420,o),
(742,351,qs),
(742,322,o),
(732,256,o),
(711,185,o),
(678,114,o),
(655,81,q),
(584,325,l),
(525,306,l),
(628,-28,l),
(956,85,l),
(935,147,l),
(708,57,l),
(732,86,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 5 4 3 2 1 6 1 73 0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 36 20 47 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1020;
}
);
note = uni21B7;
unicode = 8631;
},
{
glyphname = uni21B6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,85,l),
(391,-30,l),
(493,306,l),
(434,325,l),
(364,81,l),
(341,114,o),
(308,185,o),
(287,256,o),
(277,322,o),
(277,351,qs),
(277,420,o),
(319,537,o),
(398,624,o),
(511,673,o),
(582,673,qs),
(645,673,o),
(750,629,o),
(829,553,o),
(879,449,o),
(887,388,q),
(955,388,l),
(946,463,o),
(886,592,o),
(790,686,o),
(660,739,o),
(582,739,qs),
(496,739,o),
(358,680,o),
(262,577,o),
(211,435,o),
(211,351,qs),
(211,313,o),
(224,233,o),
(248,156,o),
(285,86,o),
(309,57,q),
(84,147,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
36 35 34 33 32 31 6 1 73 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 36 20 41 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1019;
}
);
note = uni21B6;
unicode = 8630;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,350,o),
(272,386,o),
(314,386,qs),
(393,386,o),
(488,300,o),
(488,219,qs),
(488,176,o),
(460,113,o),
(411,71,o),
(342,51,o),
(301,51,qs),
(278,51,o),
(228,63,o),
(182,86,o),
(146,120,o),
(136,143,q),
(67,143,l),
(78,102,o),
(126,45,o),
(189,9,o),
(265,-8,o),
(304,-8,qs),
(357,-8,o),
(449,22,o),
(517,81,o),
(556,167,o),
(556,224,qs),
(556,274,o),
(524,356,o),
(466,414,o),
(384,446,o),
(334,446,qs),
(283,446,o),
(191,417,o),
(153,386,q),
(177,647,l),
(530,647,l),
(530,707,l),
(119,707,l),
(85,320,l),
(161,320,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
5 1 6 1 75 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 97 0 3 3 47 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,386,o),
(129,330,q),
(129,383,o),
(147,506,o),
(174,556,qs),
(198,600,o),
(280,656,o),
(343,656,qs),
(385,656,o),
(465,617,o),
(486,579,q),
(556,579,l),
(529,645,o),
(415,715,o),
(345,715,qs),
(289,715,o),
(198,679,o),
(164,645,qs),
(136,618,o),
(98,548,o),
(75,470,o),
(65,390,o),
(64,352,qs),
(62,297,o),
(82,172,o),
(108,121,qs),
(142,56,o),
(255,-8,o),
(328,-8,qs),
(380,-8,o),
(467,25,o),
(531,86,o),
(567,171,o),
(567,223,qs),
(567,272,o),
(533,354,o),
(473,412,o),
(391,445,o),
(339,445,qs),
(275,445,o)
);
},
{
closed = 1;
nodes = (
(472,118,o),
(426,75,o),
(364,51,o),
(329,51,qs),
(294,51,o),
(232,76,o),
(184,121,o),
(156,182,o),
(155,218,qs),
(154,254,o),
(184,315,o),
(233,360,o),
(299,385,o),
(334,385,qs),
(371,385,o),
(433,359,o),
(476,313,o),
(500,251,o),
(500,214,qs),
(500,178,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
37 1 6 5 1 76 0 3 4 0 4 3 0 128 7 1 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 46 77 0 6 6 1 97 0 1 1 47 1 78 1 0 56 54 46 44 32 30 28 27 25 23 11 9 0 39 1 39 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = six;
unicode = 54;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,678,o),
(340,656,qs),
(340,635,o),
(367,605,o),
(390,605,qs),
(414,605,o),
(441,635,o),
(441,656,qs),
(441,678,o),
(413,707,o),
(390,707,qs),
(367,707,o)
);
},
{
closed = 1;
nodes = (
(122,678,o),
(122,656,qs),
(122,635,o),
(149,605,o),
(172,605,qs),
(196,605,o),
(223,635,o),
(223,656,qs),
(223,678,o),
(195,707,o),
(172,707,qs),
(149,707,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 563;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = adieresis;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,691,o),
(122,671,qs),
(122,651,o),
(151,623,o),
(171,623,qs),
(191,623,o),
(221,650,o),
(221,671,qs),
(221,692,o),
(191,719,o),
(171,719,qs),
(151,719,o)
);
},
{
closed = 1;
nodes = (
(353,691,o),
(353,671,qs),
(353,651,o),
(381,623,o),
(401,623,qs),
(421,623,o),
(451,650,o),
(451,671,qs),
(451,692,o),
(421,719,o),
(401,719,qs),
(381,719,o)
);
},
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,495,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(187,520,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,106,o),
(85,50,o),
(136,12,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,29,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 7 6 5 6 7 5 128 0 5 14 1 10 11 5 10 103 3 1 1 1 0 97 13 2 12 3 0 0 48 77 0 6 6 8 97 0 8 8 49 77 0 11 11 4 97 9 1 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 6 5 6 7 5 128 0 5 14 1 10 11 5 10 103 3 1 1 1 0 97 13 2 12 3 0 0 48 77 0 6 6 8 97 0 8 8 49 77 0 9 9 39 77 0 11 11 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 39 values pushed */
64 62 13 12 1 0 73 71 62 78 64 78 61 60 55 53 49 48 44 42 38 36 28 26 19 17 12 23 13 23 7 5 0 11 1 11 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(161,875,o),
(161,854,qs),
(161,831,o),
(186,805,o),
(209,805,qs),
(232,805,o),
(256,831,o),
(256,854,qs),
(256,875,o),
(229,900,o),
(209,900,qs),
(189,900,o)
);
},
{
closed = 1;
nodes = (
(401,875,o),
(401,854,qs),
(401,831,o),
(425,805,o),
(448,805,qs),
(471,805,o),
(495,831,o),
(495,854,qs),
(495,875,o),
(468,900,o),
(448,900,qs),
(428,900,o)
);
},
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
34 1 8 5 1 76 10 2 9 3 0 3 1 1 5 0 1 105 0 8 11 1 7 4 8 7 104 0 5 5 38 77 6 1 4 4 39 4 78 24 24 13 12 1 0 33 32 24 31 24 31 30 29 28 27 26 25 19 17 12 23 13 23 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,7,l),
(225,-124,l),
(237,-121,o),
(272,-117,o),
(285,-117,qs),
(308,-117,o),
(335,-137,o),
(336,-159,qs),
(336,-184,o),
(313,-209,o),
(279,-221,o),
(239,-224,o),
(222,-222,q),
(222,-262,l),
(250,-266,o),
(308,-260,o),
(356,-235,o),
(387,-191,o),
(387,-157,qs),
(387,-109,o),
(355,-89,qs),
(323,-72,o),
(278,-80,q),
(298,7,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
21 10 9 3 0 73 0 1 0 0 1 87 0 1 1 0 97 0 0 1 0 81 23 22 19 17 2 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 593;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,798,l),
(350,944,l),
(309,944,l),
(186,798,l),
(250,798,l),
(329,895,l),
(411,798,l)
);
},
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 1 0 1 133 2 1 0 3 0 133 0 5 0 6 7 5 6 103 0 4 4 3 95 0 3 3 38 77 0 7 7 8 95 0 8 8 39 8 78 17 17 17 17 17 17 17 17 17 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = ecircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(523,297,o),
(500,402,o),
(446,483,o),
(359,533,o),
(296,533,qs),
(236,533,o),
(143,494,o),
(80,423,o),
(48,323,o),
(48,263,qs),
(48,204,o),
(78,105,o),
(140,34,o),
(233,-6,o),
(295,-6,qs),
(329,-6,o),
(397,8,o),
(455,39,o),
(500,89,o),
(511,124,q),
(442,124,l),
(433,103,o),
(401,75,o),
(362,58,o),
(319,50,o),
(298,50,qs),
(253,50,o),
(186,79,o),
(140,130,o),
(115,200,o),
(113,242,q),
(521,242,l)
);
},
{
closed = 1;
nodes = (
(116,332,o),
(140,397,o),
(184,447,o),
(247,477,o),
(288,477,qs),
(329,477,o),
(391,448,o),
(432,399,o),
(453,333,o),
(454,297,q),
(114,297,l)
);
},
{
closed = 1;
nodes = (
(435,623,l),
(312,769,l),
(271,769,l),
(148,623,l),
(213,623,l),
(291,720,l),
(373,623,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
0 8 7 8 133 9 1 7 3 7 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 32 32 0 0 49 48 47 46 45 44 32 42 32 42 38 36 0 31 0 31 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,875,o),
(219,854,qs),
(219,831,o),
(244,805,o),
(267,805,qs),
(290,805,o),
(314,831,o),
(314,854,qs),
(314,875,o),
(287,900,o),
(267,900,qs),
(247,900,o)
);
},
{
closed = 1;
nodes = (
(459,875,o),
(459,854,qs),
(459,831,o),
(483,805,o),
(506,805,qs),
(529,805,o),
(553,831,o),
(553,854,qs),
(553,875,o),
(526,900,o),
(506,900,qs),
(486,900,o)
);
},
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
9 2 8 3 0 3 1 1 5 0 1 105 11 1 6 6 5 97 0 5 5 46 77 0 7 7 4 97 10 1 4 4 47 4 78 45 44 25 24 13 12 1 0 55 53 44 63 45 63 35 33 24 43 25 43 19 17 12 23 13 23 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = odieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,691,o),
(133,671,qs),
(133,651,o),
(162,623,o),
(182,623,qs),
(202,623,o),
(232,650,o),
(232,671,qs),
(232,692,o),
(202,719,o),
(182,719,qs),
(162,719,o)
);
},
{
closed = 1;
nodes = (
(364,691,o),
(364,671,qs),
(364,651,o),
(392,623,o),
(412,623,qs),
(432,623,o),
(462,650,o),
(462,671,qs),
(462,692,o),
(432,719,o),
(412,719,qs),
(392,719,o)
);
},
{
closed = 1;
nodes = (
(179,83,o),
(134,141,o),
(113,219,o),
(113,263,qs),
(113,307,o),
(134,385,o),
(179,443,o),
(249,477,o),
(297,477,qs),
(345,477,o),
(415,443,o),
(460,385,o),
(481,307,o),
(481,263,qs),
(481,219,o),
(460,141,o),
(415,83,o),
(345,50,o),
(297,50,qs),
(249,50,o)
);
},
{
closed = 1;
nodes = (
(142,493,o),
(79,421,o),
(48,322,o),
(48,263,qs),
(48,204,o),
(79,105,o),
(142,34,o),
(235,-6,o),
(297,-6,qs),
(359,-6,o),
(452,34,o),
(515,105,o),
(547,204,o),
(547,263,qs),
(547,322,o),
(515,421,o),
(452,493,o),
(359,533,o),
(297,533,qs),
(235,533,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
3 1 1 1 0 97 9 2 8 3 0 0 48 77 0 5 5 6 97 11 1 6 6 49 77 10 1 4 4 7 97 0 7 7 50 7 78 45 44 25 24 13 12 1 0 55 53 44 63 45 63 35 33 24 43 25 43 19 17 12 23 13 23 7 5 0 11 1 11 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 41 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,707,l),
(95,0,l),
(160,0,l),
(160,707,l)
);
},
{
closed = 1;
nodes = (
(78,879,o),
(78,856,qs),
(78,833,o),
(105,807,o),
(127,807,qs),
(149,807,o),
(177,833,o),
(177,856,qs),
(177,878,o),
(149,904,o),
(127,904,qs),
(105,904,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 255;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,691,o),
(127,671,qs),
(127,651,o),
(156,623,o),
(176,623,qs),
(196,623,o),
(226,650,o),
(226,671,qs),
(226,692,o),
(196,719,o),
(176,719,qs),
(156,719,o)
);
},
{
closed = 1;
nodes = (
(358,691,o),
(358,671,qs),
(358,651,o),
(386,623,o),
(406,623,qs),
(426,623,o),
(456,650,o),
(456,671,qs),
(456,692,o),
(426,719,o),
(406,719,qs),
(386,719,o)
);
},
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(173,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
3 1 1 1 0 97 9 2 8 3 0 0 48 77 7 1 5 5 41 77 10 1 4 4 6 97 0 6 6 50 6 78 25 24 13 12 1 0 40 39 36 34 31 30 24 45 25 45 19 17 12 23 13 23 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,875,o),
(198,854,qs),
(198,831,o),
(223,805,o),
(246,805,qs),
(269,805,o),
(293,831,o),
(293,854,qs),
(293,875,o),
(266,900,o),
(246,900,qs),
(226,900,o)
);
},
{
closed = 1;
nodes = (
(438,875,o),
(438,854,qs),
(438,831,o),
(462,805,o),
(485,805,qs),
(508,805,o),
(532,831,o),
(532,854,qs),
(532,875,o),
(505,900,o),
(485,900,qs),
(465,900,o)
);
},
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
9 2 8 3 0 3 1 1 5 0 1 105 10 7 2 5 5 38 77 0 6 6 4 97 0 4 4 47 4 78 24 24 13 12 1 0 24 49 24 49 44 42 37 36 31 29 19 17 12 23 13 23 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = ccedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,-5,o),
(405,13,o),
(459,48,o),
(499,99,o),
(509,135,q),
(441,135,l),
(424,86,o),
(348,50,o),
(300,50,qs),
(252,50,o),
(181,84,o),
(136,142,o),
(114,219,o),
(114,262,qs),
(114,306,o),
(136,384,o),
(181,443,o),
(250,477,o),
(297,477,qs),
(343,477,o),
(420,435,o),
(434,391,q),
(501,391,l),
(482,463,o),
(373,533,o),
(301,533,qs),
(239,533,o),
(145,493,o),
(81,421,o),
(49,322,o),
(49,262,qs),
(49,208,o),
(76,115,o),
(130,44,o),
(211,1,o),
(265,-4,q),
(241,-120,l),
(253,-117,o),
(285,-113,o),
(301,-113,qs),
(322,-113,o),
(352,-133,o),
(352,-157,qs),
(352,-180,o),
(329,-205,o),
(295,-217,o),
(255,-220,o),
(238,-218,q),
(238,-258,l),
(266,-262,o),
(324,-256,o),
(372,-231,o),
(403,-187,o),
(403,-153,qs),
(403,-104,o),
(339,-67,o),
(294,-76,q),
(308,-6,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
21 1 6 4 1 76 20 9 8 3 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 0 6 6 0 113 0 3 3 1 97 0 1 1 49 77 0 4 4 6 97 0 6 6 50 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 0 6 0 134 0 3 3 1 97 0 1 1 49 77 0 4 4 6 97 0 6 6 50 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
57 56 52 51 49 47 39 37 35 34 32 30 18 16 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = uni0162;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,707,l),
(19,647,l),
(253,647,l),
(253,0,l),
(263,0,l),
(237,-124,l),
(249,-121,o),
(281,-117,o),
(298,-117,qs),
(321,-117,o),
(348,-137,o),
(348,-161,qs),
(348,-184,o),
(325,-209,o),
(291,-221,o),
(251,-224,o),
(234,-222,q),
(234,-262,l),
(262,-266,o),
(320,-260,o),
(368,-235,o),
(399,-191,o),
(399,-157,qs),
(399,-108,o),
(335,-71,o),
(290,-80,q),
(306,0,l),
(318,0,l),
(318,647,l),
(552,647,l),
(552,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
4 1 2 1 1 76 24 13 12 3 2 73 0 2 1 2 134 4 1 0 0 5 95 0 5 5 38 77 3 1 1 1 39 1 78 30 29 28 27 26 25 22 20 17 16 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,171,ls),
(123,128,o),
(140,61,o),
(159,41,qs),
(174,25,o),
(195,15,q),
(165,-117,l),
(177,-114,o),
(209,-110,o),
(225,-110,qs),
(246,-110,o),
(276,-131,o),
(276,-154,qs),
(276,-177,o),
(253,-202,o),
(219,-214,o),
(179,-217,o),
(162,-215,q),
(162,-255,l),
(190,-259,o),
(248,-253,o),
(296,-228,o),
(327,-184,o),
(327,-150,qs),
(327,-101,o),
(263,-64,o),
(218,-73,q),
(236,3,l),
(260,0,o),
(285,0,qs),
(331,0,l),
(331,57,l),
(291,57,ls),
(274,57,o),
(237,64,o),
(225,72,qs),
(212,81,o),
(198,105,o),
(191,132,o),
(189,161,o),
(189,175,qs),
(189,471,l),
(336,471,l),
(336,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
39 1 3 2 18 1 4 3 2 76 38 27 26 3 4 73 0 7 0 7 133 0 4 3 4 134 5 1 1 1 0 95 6 1 0 0 41 77 0 2 2 3 97 0 3 3 39 3 78 50 49 48 47 46 45 36 34 33 40 17 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,643,o),
(524,614,o),
(567,570,o),
(579,539,q),
(645,539,l),
(631,586,o),
(580,653,o),
(509,695,o),
(424,715,o),
(378,715,qs),
(296,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,279,o),
(88,151,o),
(161,56,o),
(272,-2,o),
(347,-7,q),
(323,-124,l),
(335,-121,o),
(367,-117,o),
(383,-117,qs),
(404,-117,o),
(434,-137,o),
(434,-161,qs),
(434,-183,o),
(411,-209,o),
(377,-221,o),
(337,-224,o),
(320,-222,q),
(320,-262,l),
(348,-266,o),
(406,-260,o),
(454,-235,o),
(485,-191,o),
(485,-157,qs),
(485,-108,o),
(421,-71,o),
(376,-80,q),
(391,-7,l),
(435,-6,o),
(519,16,o),
(589,58,o),
(643,123,o),
(658,168,q),
(585,168,l),
(573,137,o),
(529,93,o),
(474,64,o),
(411,51,o),
(380,51,qs),
(312,51,o),
(214,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,525,o),
(212,608,o),
(309,656,o),
(377,656,qs),
(408,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
22 1 4 3 1 76 42 31 30 3 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 0 2 0 7 2 128 0 2 1 0 2 1 126 0 4 3 3 4 113 8 1 0 0 6 97 0 6 6 46 77 0 1 1 3 97 5 1 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 7 0 2 0 7 2 128 0 2 1 0 2 1 126 0 4 3 4 134 8 1 0 0 6 97 0 6 6 46 77 0 1 1 3 97 5 1 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 59 58 54 52 44 43 40 38 21 20 16 15 11 9 0 63 1 63 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 711;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = scedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,469,o),
(356,453,o),
(384,426,o),
(391,408,q),
(452,408,l),
(446,442,o),
(409,490,o),
(357,520,o),
(294,533,o),
(263,533,qs),
(228,533,o),
(156,519,o),
(99,486,o),
(63,430,o),
(63,387,qs),
(63,327,o),
(135,260,o),
(190,247,qs),
(222,239,o),
(282,228,o),
(313,221,qs),
(330,217,o),
(363,206,o),
(389,188,o),
(405,160,o),
(405,140,qs),
(405,111,o),
(379,75,o),
(339,56,o),
(290,50,o),
(267,50,qs),
(244,50,o),
(199,58,o),
(159,75,o),
(126,104,o),
(115,127,q),
(48,127,l),
(55,94,o),
(91,48,o),
(140,16,o),
(198,-1,o),
(228,-4,q),
(206,-114,l),
(218,-110,o),
(252,-106,o),
(266,-107,qs),
(286,-108,o),
(317,-130,o),
(317,-151,qs),
(317,-174,o),
(294,-199,o),
(260,-211,o),
(220,-214,o),
(203,-212,q),
(203,-252,l),
(231,-256,o),
(289,-250,o),
(337,-225,o),
(368,-181,o),
(368,-147,qs),
(368,-98,o),
(304,-61,o),
(259,-70,q),
(272,-6,l),
(308,-6,o),
(379,9,o),
(435,43,o),
(470,101,o),
(470,144,qs),
(470,202,o),
(403,264,o),
(350,275,qs),
(318,283,o),
(256,295,o),
(224,302,qs),
(206,306,o),
(172,318,o),
(145,338,o),
(128,368,o),
(128,389,qs),
(128,416,o),
(153,450,o),
(191,469,o),
(238,477,o),
(261,477,qs),
(280,477,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
43 1 1 4 22 1 2 1 2 76 42 31 30 3 2 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 6 0 3 0 6 3 128 0 3 4 0 3 4 126 0 2 1 1 2 113 7 1 0 0 5 97 0 5 5 49 77 0 4 4 1 97 0 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 0 3 0 6 3 128 0 3 4 0 3 4 126 0 2 1 2 134 7 1 0 0 5 97 0 5 5 49 77 0 4 4 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 81 80 76 74 55 53 49 48 39 38 21 20 0 85 1 85 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni21A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,296,l),
(372,342,l),
(64,30,l),
(372,-283,l),
(415,-237,l),
(178,0,l),
(769,0,ls),
(845,0,o),
(964,51,o),
(1045,141,o),
(1087,266,o),
(1087,340,qs),
(1087,413,o),
(1045,537,o),
(964,627,o),
(845,678,o),
(769,678,qs),
(201,678,l),
(201,618,l),
(761,618,ls),
(823,618,o),
(920,576,o),
(988,501,o),
(1023,399,o),
(1023,340,qs),
(1023,280,o),
(988,178,o),
(921,103,o),
(823,60,o),
(761,60,qs),
(178,60,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
29 28 2 0 1 27 1 3 0 2 76 26 25 2 3 73 0 2 0 1 0 2 1 103 4 1 0 3 3 0 87 4 1 0 0 3 95 0 3 0 3 79 1 0 24 22 14 12 11 9 0 30 1 30 5 6 22 
CALL[ ]	/* CallFunction */";
};
width = 1151;
}
);
note = uni21A9;
unicode = 8617;
},
{
glyphname = uni2713;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,417,l),
(64,370,l),
(378,7,l),
(996,774,l),
(937,820,l),
(378,118,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
2 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 1060;
}
);
note = uni2713;
unicode = 10003;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(185,203,o),
(185,181,qs),
(185,159,o),
(212,129,o),
(235,129,qs),
(259,129,o),
(286,159,o),
(286,181,qs),
(286,203,o),
(258,232,o),
(235,232,qs),
(212,232,o)
);
},
{
closed = 1;
nodes = (
(185,559,o),
(185,537,qs),
(185,515,o),
(212,485,o),
(235,485,qs),
(259,485,o),
(286,515,o),
(286,537,qs),
(286,559,o),
(258,587,o),
(235,587,qs),
(212,587,o)
);
},
{
closed = 1;
nodes = (
(64,388,l),
(64,328,l),
(407,328,l),
(407,388,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
7 1 2 0 3 5 2 3 105 0 5 0 4 0 5 4 103 6 1 0 1 1 0 89 6 1 0 0 1 97 0 1 0 1 81 13 12 1 0 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 471;
}
);
note = divide;
unicode = 247;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(409,212,l),
(267,353,l),
(409,495,l),
(371,533,l),
(230,390,l),
(88,533,l),
(50,495,l),
(193,353,l),
(50,212,l),
(88,174,l),
(230,316,l),
(371,174,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 459;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,707,l),
(44,707,l),
(268,312,l),
(145,312,l),
(145,253,l),
(294,253,l),
(294,157,l),
(145,157,l),
(145,98,l),
(294,98,l),
(294,0,l),
(359,0,l),
(359,98,l),
(507,98,l),
(507,157,l),
(359,157,l),
(359,253,l),
(507,253,l),
(507,312,l),
(386,312,l),
(610,707,l),
(534,707,l),
(329,330,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
22 1 1 0 1 76 9 1 1 8 1 2 3 1 2 103 7 1 3 6 1 4 5 3 4 103 10 1 0 0 38 77 0 5 5 39 5 78 21 20 19 18 17 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,317,l),
(64,257,l),
(165,257,l),
(165,154,l),
(64,154,l),
(64,94,l),
(165,94,l),
(165,0,l),
(230,0,l),
(230,94,l),
(517,94,l),
(517,154,l),
(230,154,l),
(230,257,l),
(385,257,ls),
(441,257,o),
(538,283,o),
(609,338,o),
(650,424,o),
(650,484,qs),
(650,544,o),
(616,628,o),
(552,682,o),
(461,707,o),
(403,707,qs),
(165,707,l),
(165,317,l)
);
},
{
closed = 1;
nodes = (
(230,647,l),
(399,647,ls),
(442,647,o),
(510,630,o),
(558,592,o),
(583,531,o),
(583,487,qs),
(583,440,o),
(555,375,o),
(502,335,o),
(428,317,o),
(383,317,qs),
(230,317,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 9 2 8 7 1 1 2 8 1 103 6 1 2 5 1 3 4 2 3 103 0 10 10 0 95 0 0 0 38 77 0 4 4 39 4 78 28 27 38 36 27 39 28 39 17 17 17 17 17 17 17 40 32 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B4;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,700,o),
(159,668,o),
(116,617,o),
(108,580,q),
(179,580,l),
(186,604,o),
(214,633,o),
(251,650,o),
(293,656,o),
(316,656,qs),
(342,656,o),
(389,644,o),
(425,619,o),
(447,578,o),
(447,549,qs),
(447,534,o),
(436,503,o),
(419,475,o),
(398,452,o),
(388,446,q),
(52,446,l),
(52,387,l),
(319,387,l),
(171,279,l),
(52,279,l),
(52,220,l),
(123,220,l),
(112,204,o),
(101,161,o),
(101,143,qs),
(101,101,o),
(134,44,o),
(189,8,o),
(259,-8,o),
(295,-8,qs),
(328,-8,o),
(397,4,o),
(455,34,o),
(499,83,o),
(508,119,q),
(439,119,l),
(430,96,o),
(399,69,o),
(361,54,o),
(317,49,o),
(296,49,qs),
(272,49,o),
(225,61,o),
(188,86,o),
(165,126,o),
(165,154,qs),
(165,192,o),
(191,220,q),
(538,220,l),
(538,279,l),
(255,279,l),
(406,387,l),
(538,387,l),
(538,446,l),
(457,446,l),
(480,468,o),
(508,526,o),
(507,562,qs),
(506,602,o),
(474,660,o),
(421,697,o),
(354,715,o),
(319,715,qs),
(285,715,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 47 7 78 1 0 64 63 59 57 48 47 46 45 44 43 42 41 34 32 28 27 23 21 15 14 13 12 11 10 9 8 0 68 1 68 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = uni20B4;
unicode = 8372;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,367,l),
(212,518,ls),
(212,587,o),
(276,656,o),
(345,656,qs),
(362,656,o),
(397,648,o),
(426,631,o),
(447,604,o),
(452,585,q),
(516,585,l),
(511,618,o),
(480,667,o),
(434,700,o),
(376,715,o),
(344,715,qs),
(252,715,o),
(149,619,o),
(149,525,qs),
(149,367,l),
(64,367,l),
(64,307,l),
(149,307,l),
(149,60,l),
(64,60,l),
(64,0,l),
(520,0,l),
(520,60,l),
(212,60,l),
(212,307,l),
(426,307,l),
(426,365,l),
(426,367,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 7 8 5 8 7 5 128 9 1 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 32 31 36 20 35 17 17 17 17 17 17 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = Scedilla;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,-8,o),
(475,15,o),
(541,64,o),
(580,142,o),
(580,198,qs),
(580,233,o),
(557,286,o),
(517,325,o),
(463,351,o),
(432,360,qs),
(391,371,o),
(315,388,o),
(275,399,qs),
(249,406,o),
(202,426,o),
(166,457,o),
(145,500,o),
(145,530,qs),
(145,567,o),
(177,616,o),
(228,645,o),
(291,656,o),
(322,656,qs),
(352,656,o),
(408,645,o),
(455,619,o),
(488,576,o),
(494,543,q),
(560,543,l),
(554,590,o),
(510,655,o),
(445,696,o),
(365,715,o),
(322,715,qs),
(275,715,o),
(187,695,o),
(118,649,o),
(77,576,o),
(77,522,qs),
(77,448,o),
(162,363,o),
(230,344,qs),
(270,333,o),
(347,317,o),
(387,307,qs),
(413,301,o),
(459,282,o),
(493,252,o),
(513,211,o),
(513,182,qs),
(513,146,o),
(482,96,o),
(432,65,o),
(370,51,o),
(339,51,qs),
(306,51,o),
(241,63,o),
(182,90,o),
(136,135,o),
(123,168,q),
(53,168,l),
(65,124,o),
(112,62,o),
(175,20,o),
(251,-3,o),
(292,-6,q),
(268,-124,l),
(280,-121,o),
(312,-117,o),
(328,-117,qs),
(349,-118,o),
(361,-125,qs),
(369,-130,o),
(379,-149,o),
(379,-162,qs),
(379,-184,o),
(356,-209,o),
(322,-221,o),
(282,-224,o),
(265,-222,q),
(265,-262,l),
(293,-266,o),
(352,-260,o),
(400,-235,o),
(430,-191,o),
(430,-157,qs),
(430,-109,o),
(366,-71,o),
(321,-80,q),
(336,-8,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
23 1 6 2 1 76 22 9 8 3 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 0 6 6 0 113 0 5 5 3 97 0 3 3 46 77 0 2 2 6 97 0 6 6 47 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 0 6 0 134 0 5 5 3 97 0 3 3 46 77 0 2 2 6 97 0 6 6 47 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
89 88 67 65 61 60 56 54 35 33 29 28 20 18 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 634;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = t_alt;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,678,l),
(122,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,171,ls),
(123,128,o),
(140,61,o),
(159,41,qs),
(184,16,o),
(251,0,o),
(285,0,qs),
(331,0,l),
(331,57,l),
(291,57,ls),
(274,57,o),
(238,64,o),
(225,72,qs),
(200,88,o),
(189,148,o),
(189,175,qs),
(189,471,l),
(336,471,l),
(336,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 21 3 78 17 17 22 33 38 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 380;
}
);
note = t_alt;
},
{
glyphname = alt_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,707,l),
(256,685,o),
(228,656,o),
(187,637,o),
(132,627,o),
(96,626,q),
(96,585,l),
(243,585,l),
(243,60,l),
(52,60,l),
(52,0,l),
(469,0,l),
(469,60,l),
(308,60,l),
(308,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 0 4 3 103 0 5 5 20 77 2 1 0 0 1 95 0 1 1 21 1 78 20 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 493;
}
);
note = alt_1;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,653,o),
(121,541,o),
(64,386,o),
(64,294,qs),
(64,202,o),
(119,48,o),
(224,-63,o),
(374,-125,o),
(469,-125,qs),
(564,-125,o),
(714,-63,o),
(819,48,o),
(874,202,o),
(874,294,qs),
(874,386,o),
(817,541,o),
(712,653,o),
(562,715,o),
(469,715,qs),
(376,715,o)
);
},
{
closed = 1;
nodes = (
(675,599,o),
(763,503,o),
(809,371,o),
(809,294,qs),
(809,217,o),
(763,86,o),
(676,-10,o),
(549,-65,o),
(469,-65,qs),
(389,-65,o),
(263,-11,o),
(175,85,o),
(129,217,o),
(129,294,qs),
(129,372,o),
(176,504,o),
(263,600,o),
(389,654,o),
(469,654,qs),
(549,654,o)
);
},
{
closed = 1;
nodes = (
(483,213,ls),
(520,213,o),
(583,230,o),
(628,266,o),
(652,321,o),
(652,359,qs),
(651,433,o),
(566,500,o),
(496,500,qs),
(346,500,l),
(346,75,l),
(403,75,l),
(403,213,l)
);
},
{
closed = 1;
nodes = (
(403,447,l),
(494,447,ls),
(538,447,o),
(595,406,o),
(595,359,qs),
(595,307,o),
(533,266,o),
(485,266,qs),
(403,266,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 4 6 3 6 4 3 128 9 1 0 10 1 2 5 0 2 105 0 5 0 8 7 5 8 103 11 1 7 0 6 4 7 6 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 54 53 21 20 1 0 60 58 53 61 54 61 52 50 44 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 938;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = colon.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,548,o),
(72,526,qs),
(72,504,o),
(100,474,o),
(123,474,qs),
(146,474,o),
(173,504,o),
(173,526,qs),
(173,548,o),
(146,577,o),
(123,577,qs),
(100,577,o)
);
},
{
closed = 1;
nodes = (
(72,184,o),
(72,162,qs),
(72,140,o),
(100,110,o),
(123,110,qs),
(146,110,o),
(173,140,o),
(173,162,qs),
(173,184,o),
(146,212,o),
(123,212,qs),
(100,212,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 245;
}
);
note = colon.uc;
},
{
glyphname = y_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,267,ls),
(466,227,o),
(448,149,o),
(405,87,o),
(336,49,o),
(285,49,qs),
(235,49,o),
(177,84,o),
(147,143,o),
(138,217,o),
(138,256,qs),
(138,527,l),
(72,527,l),
(72,234,ls),
(72,181,o),
(92,93,o),
(139,29,o),
(217,-7,o),
(276,-7,qs),
(300,-7,o),
(354,1,o),
(405,23,o),
(450,60,o),
(467,90,q),
(467,35,o),
(461,-66,o),
(430,-143,o),
(362,-189,o),
(301,-189,qs),
(278,-189,o),
(231,-180,o),
(188,-160,o),
(154,-128,o),
(146,-105,q),
(76,-105,l),
(86,-142,o),
(128,-195,o),
(186,-229,o),
(256,-245,o),
(294,-245,qs),
(408,-245,o),
(532,-128,o),
(532,-12,qs),
(532,527,l),
(466,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
20 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 3 2 3 1 2 128 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 44 0 44 37 21 40 36 20 35 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = y_alt;
},
{
glyphname = u_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,271,ls),
(455,227,o),
(442,144,o),
(420,115,qs),
(398,86,o),
(329,50,o),
(280,50,qs),
(229,50,o),
(171,85,o),
(141,142,o),
(133,216,o),
(133,255,qs),
(133,527,l),
(67,527,l),
(67,232,ls),
(67,180,o),
(86,93,o),
(135,27,o),
(214,-9,o),
(269,-9,qs),
(294,-9,o),
(346,-1,o),
(395,18,o),
(439,50,o),
(457,74,q),
(462,0,l),
(521,0,l),
(521,527,l),
(455,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
5 4 2 2 2 22 77 0 3 3 0 97 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 4 2 2 2 22 77 0 0 0 21 77 0 3 3 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 28 0 28 37 21 37 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = u_alt;
},
{
glyphname = be_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,132,o),
(124,45,o),
(216,-6,o),
(288,-6,qs),
(345,-6,o),
(433,32,o),
(494,99,o),
(526,192,o),
(526,247,qs),
(526,297,o),
(498,384,o),
(444,448,o),
(363,485,o),
(310,485,qs),
(284,485,o),
(228,475,o),
(176,452,o),
(130,415,o),
(114,388,q),
(115,460,o),
(146,547,o),
(177,575,qs),
(208,603,o),
(302,636,o),
(368,656,qs),
(422,673,o),
(509,704,o),
(525,730,q),
(487,779,l),
(457,751,o),
(388,728,o),
(347,714,qs),
(321,707,o),
(267,690,o),
(213,669,o),
(162,642,o),
(140,623,qs),
(112,599,o),
(77,541,o),
(57,465,o),
(49,369,o),
(49,309,qs),
(49,246,o)
);
},
{
closed = 1;
nodes = (
(187,79,o),
(143,130,o),
(120,198,o),
(120,235,qs),
(120,273,o),
(143,343,o),
(188,397,o),
(254,429,o),
(295,429,qs),
(335,429,o),
(397,399,o),
(439,348,o),
(460,281,o),
(460,244,qs),
(460,205,o),
(439,135,o),
(396,81,o),
(332,49,o),
(289,49,qs),
(249,49,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
23 1 2 3 1 76 14 13 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 30 1 78 44 43 54 52 43 62 44 62 39 37 29 27 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = be_alt;
},
{
glyphname = g_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,495,o),
(345,533,o),
(291,533,qs),
(231,533,o),
(143,493,o),
(83,425,o),
(50,332,o),
(49,277,qs),
(47,221,o),
(72,118,o),
(127,40,o),
(216,-6,o),
(279,-6,qs),
(339,-6,o),
(440,38,o),
(471,86,q),
(471,18,ls),
(471,-27,o),
(456,-102,o),
(419,-158,o),
(354,-189,o),
(303,-189,qs),
(258,-189,o),
(165,-159,o),
(121,-125,q),
(92,-179,l),
(128,-205,o),
(226,-245,o),
(299,-245,qs),
(363,-245,o),
(454,-209,o),
(511,-142,o),
(537,-45,o),
(537,17,qs),
(537,527,l),
(475,527,l),
(471,450,l)
);
},
{
closed = 1;
nodes = (
(401,442,qs),
(442,411,o),
(473,314,o),
(473,265,qs),
(473,224,o),
(453,149,o),
(430,119,qs),
(407,89,o),
(336,50,o),
(292,50,qs),
(243,50,o),
(176,85,o),
(134,143,o),
(115,221,o),
(115,265,qs),
(115,307,o),
(135,383,o),
(177,442,o),
(243,477,o),
(290,477,qs),
(354,477,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
36 20 2 6 5 11 10 2 2 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 5 0 97 4 1 0 0 22 77 0 6 6 3 97 0 3 3 30 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 1 2 1 101 7 1 5 5 0 97 4 1 0 0 22 77 0 6 6 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 1 2 1 101 0 0 0 22 77 7 1 5 5 4 97 0 4 4 29 77 0 6 6 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
38 37 48 46 37 57 38 57 40 39 37 37 16 8 7 27 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = g_alt;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,274,ls),
(466,238,o),
(455,170,o),
(441,141,qs),
(421,100,o),
(348,51,o),
(291,50,qs),
(245,49,o),
(184,80,o),
(167,106,qs),
(147,136,o),
(138,222,o),
(138,267,qs),
(138,527,l),
(72,527,l),
(72,242,ls),
(72,185,o),
(93,85,o),
(122,53,qs),
(145,26,o),
(222,-8,o),
(276,-8,qs),
(303,-8,o),
(358,1,o),
(408,22,o),
(451,56,o),
(466,80,q),
(466,1,ls),
(466,-42,o),
(449,-114,o),
(428,-138,qs),
(407,-162,o),
(343,-188,o),
(297,-188,qs),
(249,-188,o),
(158,-155,o),
(118,-125,q),
(89,-179,l),
(131,-214,o),
(243,-246,o),
(297,-246,qs),
(345,-246,o),
(441,-220,o),
(475,-183,qs),
(506,-149,o),
(532,-62,o),
(532,0,qs),
(532,527,l),
(466,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
21 1 4 3 11 10 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 0 1 0 101 6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 48 0 48 38 22 42 37 38 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = y;
unicode = 121;
},
{
glyphname = t2.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,163,ls),
(123,124,o),
(137,61,o),
(171,18,o),
(227,-6,o),
(268,-6,qs),
(299,-6,o),
(350,7,o),
(373,25,q),
(347,72,l),
(335,61,o),
(296,50,o),
(277,50,qs),
(247,50,o),
(212,72,o),
(194,107,o),
(189,151,o),
(189,174,qs),
(189,471,l),
(358,471,l),
(358,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
12 1 2 1 13 1 3 2 2 76 0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 17 17 21 37 37 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 393;
}
);
note = t2.alt;
},
{
glyphname = f_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,472,l),
(355,472,l),
(355,527,l),
(189,527,l),
(189,587,ls),
(189,609,o),
(194,651,o),
(212,686,o),
(246,707,o),
(275,708,qs),
(319,707,o),
(344,684,q),
(368,738,l),
(347,753,o),
(300,763,o),
(270,763,qs),
(231,763,o),
(175,738,o),
(160,721,qs),
(135,692,o),
(124,625,o),
(123,580,qs),
(123,527,l),
(34,527,l),
(34,472,l),
(123,472,l),
(123,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
14 1 3 2 15 1 1 3 2 76 0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 22 77 7 1 6 6 21 6 78 0 0 0 27 0 27 17 21 36 38 17 17 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 375;
}
);
note = f_alt;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,307,l),
(374,367,l),
(79,367,l),
(79,307,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = hyphen.uc;
},
{
glyphname = uni00AD.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,307,l),
(374,367,l),
(79,367,l),
(79,307,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni00AD.uc;
},
{
glyphname = endash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,307,l),
(497,367,l),
(79,367,l),
(79,307,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(684,307,l),
(684,367,l),
(79,367,l),
(79,307,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 763;
}
);
note = emdash.uc;
},
{
glyphname = a_alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,214,o),
(186,225,qs),
(210,234,o),
(272,245,o),
(337,251,o),
(401,254,o),
(429,255,q),
(429,212,ls),
(429,170,o),
(398,109,o),
(346,68,o),
(277,49,o),
(240,49,qs),
(219,49,o),
(178,58,o),
(144,79,o),
(122,113,o),
(122,138,qs),
(121,168,o)
);
},
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,495,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(187,520,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,452,o),
(412,407,o),
(427,346,o),
(427,310,q),
(319,307,o),
(251,298,qs),
(222,294,o),
(162,280,o),
(131,264,qs),
(99,248,o),
(54,184,o),
(54,142,qs),
(54,103,o),
(83,47,o),
(132,11,o),
(197,-6,o),
(233,-6,qs),
(291,-6,o),
(392,31,o),
(430,76,q),
(439,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 5 4 3 4 5 3 128 0 3 0 1 0 3 1 105 0 4 4 6 97 0 6 6 29 77 0 0 0 2 97 7 1 2 2 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 4 3 4 5 3 128 0 3 0 1 0 3 1 105 0 4 4 6 97 0 6 6 29 77 0 7 7 21 77 0 0 0 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 36 20 36 27 40 37 36 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = a_alt;
},
{
glyphname = uni0490;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,647,l),
(537,647,l),
(537,856,l),
(472,856,l),
(472,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = uni0490;
unicode = 1168;
},
{
glyphname = uni0491;
kernLeft = uni0433;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,472,l),
(426,472,l),
(426,675,l),
(362,675,l),
(362,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 22 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = uni0491;
unicode = 1169;
},
{
glyphname = uni0406;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 20 77 0 0 0 21 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = uni0406;
unicode = 1030;
},
{
glyphname = uni0456;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,692,o),
(64,669,qs),
(64,646,o),
(91,620,o),
(113,620,qs),
(135,620,o),
(163,646,o),
(163,669,qs),
(163,691,o),
(135,717,o),
(113,717,qs),
(91,717,o)
);
},
{
closed = 1;
nodes = (
(146,0,l),
(146,527,l),
(80,527,l),
(80,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 1 1 0 97 4 1 0 0 27 77 0 2 2 22 77 0 3 3 21 3 78 1 0 15 14 13 12 7 5 0 11 1 11 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 227;
}
);
note = uni0456;
unicode = 1110;
},
{
glyphname = uni0404;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,643,o),
(523,614,o),
(569,570,o),
(581,539,q),
(648,539,l),
(634,584,o),
(581,650,o),
(512,693,o),
(429,714,o),
(385,715,qs),
(302,716,o),
(177,662,o),
(94,563,o),
(53,427,o),
(53,348,qs),
(53,270,o),
(90,139,o),
(168,45,o),
(287,-8,o),
(370,-8,qs),
(416,-8,o),
(506,12,o),
(583,54,o),
(641,121,o),
(656,168,q),
(584,168,l),
(572,136,o),
(527,92,o),
(470,64,o),
(405,51,o),
(374,51,qs),
(311,51,o),
(218,92,o),
(155,165,o),
(123,265,o),
(121,324,q),
(482,324,l),
(482,384,l),
(121,384,l),
(124,439,o),
(158,538,o),
(220,612,o),
(311,656,o),
(371,656,qs),
(402,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 7 0 1 0 7 1 128 0 4 2 3 2 4 3 128 0 1 0 2 4 1 2 103 8 1 0 0 6 97 0 6 6 27 77 0 3 3 5 97 0 5 5 28 5 78 1 0 40 39 35 33 25 23 19 18 14 12 8 7 6 5 0 44 1 44 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni0404;
unicode = 1028;
},
{
glyphname = uni0454;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,397,o),
(183,448,o),
(246,477,o),
(288,477,qs),
(310,477,o),
(357,468,o),
(398,447,o),
(430,415,o),
(438,392,q),
(501,392,l),
(491,428,o),
(450,482,o),
(394,516,o),
(327,533,o),
(291,533,qs),
(229,533,o),
(138,492,o),
(78,420,o),
(48,321,o),
(48,263,qs),
(48,203,o),
(76,104,o),
(135,33,o),
(226,-6,o),
(289,-6,qs),
(323,-6,o),
(393,11,o),
(454,46,o),
(500,99,o),
(509,135,q),
(441,135,l),
(433,111,o),
(400,79,o),
(357,59,o),
(309,50,o),
(287,50,qs),
(246,50,o),
(183,78,o),
(139,128,o),
(116,195,o),
(115,234,q),
(375,234,l),
(375,289,l),
(114,289,l),
(116,329,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 7 0 7 6 0 128 0 3 1 2 1 3 2 128 0 0 0 1 3 0 1 103 0 7 7 5 97 0 5 5 29 77 0 2 2 4 97 0 4 4 30 4 78 36 20 40 36 20 36 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = uni0454;
unicode = 1108;
},
{
glyphname = uni0407;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,707,l),
(91,0,l),
(156,0,l),
(156,707,l)
);
},
{
closed = 1;
nodes = (
(10,819,o),
(10,797,qs),
(10,775,o),
(35,750,o),
(56,750,qs),
(77,750,o),
(103,775,o),
(103,797,qs),
(103,818,o),
(76,843,o),
(56,843,qs),
(35,843,o)
);
},
{
closed = 1;
nodes = (
(145,797,qs),
(145,775,o),
(169,750,o),
(191,750,qs),
(212,750,o),
(238,775,o),
(238,797,qs),
(238,818,o),
(211,843,o),
(191,843,qs),
(145,843,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 20 77 0 0 0 21 0 78 17 16 5 4 23 21 16 26 17 26 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = uni0407;
unicode = 1031;
},
{
glyphname = uni0457;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,0,l),
(147,527,l),
(81,527,l),
(81,0,l)
);
},
{
closed = 1;
nodes = (
(2,680,o),
(2,658,qs),
(2,636,o),
(27,611,o),
(48,611,qs),
(69,611,o),
(95,636,o),
(95,658,qs),
(95,679,o),
(68,704,o),
(48,704,qs),
(27,704,o)
);
},
{
closed = 1;
nodes = (
(133,658,qs),
(133,636,o),
(157,611,o),
(179,611,qs),
(200,611,o),
(226,636,o),
(226,658,qs),
(226,679,o),
(199,704,o),
(179,704,qs),
(133,704,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 20 77 0 0 0 22 77 0 1 1 21 1 78 17 16 5 4 23 21 16 26 17 26 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 228;
}
);
note = uni0457;
unicode = 1111;
},
{
glyphname = t0163.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,163,ls),
(123,124,o),
(137,61,o),
(154,39,qs),
(170,18,o),
(198,6,q),
(170,-117,l),
(182,-114,o),
(214,-110,o),
(230,-110,qs),
(251,-110,o),
(281,-131,o),
(281,-154,qs),
(281,-177,o),
(258,-202,o),
(224,-214,o),
(184,-217,o),
(167,-215,q),
(167,-255,l),
(195,-259,o),
(253,-253,o),
(301,-228,o),
(332,-184,o),
(332,-150,qs),
(332,-101,o),
(268,-64,o),
(223,-73,q),
(239,-4,l),
(252,-6,o),
(268,-6,qs),
(299,-6,o),
(350,7,o),
(373,25,q),
(347,72,l),
(335,61,o),
(296,50,o),
(277,50,qs),
(247,50,o),
(212,72,o),
(194,107,o),
(189,151,o),
(189,174,qs),
(189,471,l),
(358,471,l),
(358,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
12 1 2 1 40 13 2 3 2 19 1 4 3 3 76 39 28 27 3 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 7 0 7 133 0 4 3 3 4 113 5 1 1 1 0 95 6 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 7 133 0 4 3 4 134 5 1 1 1 0 95 6 1 0 0 22 77 0 2 2 3 97 0 3 3 30 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
51 50 49 48 47 46 37 35 37 37 17 16 8 7 26 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = t0163.alt;
},
{
glyphname = t021b.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,-120,o),
(176,-142,qs),
(176,-166,o),
(204,-195,o),
(230,-193,q),
(225,-222,o),
(196,-264,o),
(174,-278,q),
(190,-304,l),
(233,-286,o),
(283,-203,o),
(282,-158,qs),
(283,-134,o),
(256,-91,o),
(228,-91,qs),
(205,-90,o)
);
},
{
closed = 1;
nodes = (
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,163,ls),
(123,124,o),
(137,61,o),
(171,18,o),
(227,-6,o),
(268,-6,qs),
(299,-6,o),
(350,7,o),
(373,25,q),
(347,72,l),
(335,61,o),
(296,50,o),
(277,50,qs),
(247,50,o),
(212,72,o),
(194,107,o),
(189,151,o),
(189,174,qs),
(189,471,l),
(358,471,l),
(358,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
28 1 3 2 29 1 4 3 2 76 10 7 6 3 0 73 0 7 1 7 133 8 1 0 4 0 134 5 1 2 2 1 95 6 1 1 1 22 77 0 3 3 4 97 0 4 4 30 4 78 1 0 43 42 41 40 39 38 33 31 26 24 19 18 17 16 0 15 1 15 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = t021b.alt;
},
{
glyphname = uni202F;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni202F;
unicode = 8239;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 270;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = map;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,664,qs),
(48,662,ls),
(48,657,o),
(53,657,qs),
(95,657,ls),
(97,657,o),
(99,655,qs),
(122,632,ls),
(123,631,o),
(123,628,qs),
(123,602,ls),
(123,600,o),
(125,598,qs),
(146,577,ls),
(148,575,o),
(148,573,qs),
(148,544,ls),
(148,541,o),
(149,540,qs),
(180,510,ls),
(181,509,o),
(181,506,qs),
(181,480,ls),
(181,479,o),
(183,477,qs),
(229,431,ls),
(230,430,o),
(230,427,qs),
(230,406,ls),
(230,404,o),
(232,402,qs),
(278,355,l),
(280,355,o),
(280,352,qs),
(280,329,ls),
(280,326,o),
(281,325,qs),
(294,313,ls),
(295,312,o),
(295,309,qs),
(295,190,ls),
(295,187,o),
(294,186,qs),
(280,173,ls),
(279,172,o),
(279,169,qs),
(279,84,ls),
(279,81,o),
(280,80,qs),
(292,68,l),
(298,64,o),
(292,60,q),
(280,48,ls),
(276,44,o),
(280,41,qs),
(289,32,ls),
(291,30,o),
(291,28,qs),
(291,5,ls),
(291,0,o),
(296,0,qs),
(299,0,ls),
(301,0,o),
(302,1,o),
(303,1,q),
(317,16,ls),
(318,17,o),
(321,17,qs),
(341,17,ls),
(346,17,o),
(346,23,qs),
(346,61,ls),
(346,63,o),
(348,65,qs),
(358,75,ls),
(359,76,o),
(361,76,qs),
(370,76,ls),
(371,76,o),
(373,78,qs),
(385,90,ls),
(387,92,o),
(387,94,qs),
(387,106,ls),
(387,108,o),
(388,109,qs),
(410,131,ls),
(412,133,o),
(412,135,qs),
(412,160,ls),
(412,163,o),
(413,164,qs),
(433,184,ls),
(436,187,o),
(433,191,qs),
(423,201,ls),
(422,202,o),
(422,205,qs),
(422,232,ls),
(422,234,o),
(423,235,qs),
(445,257,ls),
(447,259,o),
(454,257,o),
(454,253,qs),
(454,219,ls),
(454,213,o),
(459,213,qs),
(468,213,ls),
(469,213,o),
(471,215,qs),
(498,242,l),
(503,245,o),
(506,242,qs),
(521,227,ls),
(524,224,o),
(529,227,q),
(540,238,ls),
(543,241,o),
(547,238,qs),
(556,229,ls),
(557,228,o),
(559,228,qs),
(573,228,l),
(592,228,ls),
(597,228,o),
(597,233,qs),
(597,236,o),
(596,237,qs),
(575,257,ls),
(571,261,o),
(575,265,qs),
(581,270,ls),
(583,272,o),
(583,274,qs),
(583,311,ls),
(583,313,o),
(581,315,qs),
(565,332,ls),
(564,333,o),
(561,333,qs),
(549,333,ls),
(547,333,o),
(545,335,qs),
(523,357,ls),
(521,359,o),
(521,361,qs),
(521,398,l),
(521,432,ls),
(521,437,o),
(516,437,qs),
(504,437,ls),
(502,437,o),
(501,438,qs),
(442,497,ls),
(438,501,o),
(442,505,qs),
(448,511,ls),
(450,513,o),
(450,515,qs),
(450,594,ls),
(450,599,o),
(444,599,qs),
(438,599,ls),
(435,599,o),
(434,598,qs),
(424,588,ls),
(420,584,o),
(417,588,q),
(397,608,ls),
(395,610,o),
(395,612,qs),
(395,638,ls),
(395,643,o),
(390,643,qs),
(358,643,ls),
(355,643,o),
(354,642,qs),
(338,625,ls),
(337,624,o),
(334,624,qs),
(328,624,ls),
(322,624,o),
(322,629,qs),
(322,654,ls),
(322,659,o),
(317,659,qs),
(284,659,ls),
(282,659,o),
(281,660,qs),
(235,706,ls),
(233,708,o),
(231,708,qs),
(135,708,ls),
(133,708,o),
(131,706,qs),
(112,687,ls),
(111,686,o),
(108,686,qs),
(69,686,ls),
(67,686,o),
(65,684,qs),
(49,668,ls),
(48,667,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
201 1 2 0 18 1 4 8 193 30 19 3 3 4 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 6 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 3 5 8 3 5 126 0 5 6 8 5 6 126 0 6 7 8 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 3 5 8 3 5 126 0 5 6 8 5 6 126 0 6 7 8 6 7 126 0 0 0 8 4 0 8 103 0 1 1 20 77 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 3 5 8 3 5 126 0 5 6 8 5 6 126 0 6 7 8 6 7 126 0 7 7 132 0 0 0 8 4 0 8 103 0 1 1 20 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
199 196 135 134 80 77 52 49 50 37 51 51 49 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
note = map;
},
{
glyphname = logo;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(800,512,qs),
(800,520,o),
(794,526,qs),
(782,539,ls),
(776,545,o),
(768,545,qs),
(742,545,l),
(741,546,o),
(740,546,o),
(739,547,qs),
(708,572,ls),
(703,576,o),
(696,576,qs),
(657,576,l),
(652,589,o),
(639,589,qs),
(631,589,o),
(625,583,qs),
(618,576,l),
(563,576,ls),
(556,576,o),
(549,571,q),
(545,566,l),
(545,586,l),
(571,613,l),
(707,613,l),
(726,593,l),
(733,588,o),
(740,588,qs),
(752,588,ls),
(759,588,o),
(766,593,q),
(779,606,ls),
(785,612,o),
(785,620,qs),
(785,627,o),
(780,632,q),
(785,639,o),
(785,645,qs),
(785,653,o),
(779,659,qs),
(766,671,ls),
(760,677,o),
(752,677,qs),
(740,677,ls),
(732,677,o),
(726,671,qs),
(707,652,l),
(671,652,l),
(671,680,l),
(683,680,o),
(696,710,o),
(696,721,qs),
(696,758,ls),
(696,766,o),
(685,778,o),
(677,778,qs),
(626,778,ls),
(618,778,o),
(607,766,o),
(607,758,qs),
(607,721,ls),
(607,710,o),
(620,680,o),
(632,680,q),
(632,652,l),
(607,652,l),
(607,654,o),
(608,656,o),
(608,657,qs),
(608,665,o),
(597,677,o),
(589,677,qs),
(579,677,o),
(575,671,q),
(538,635,l),
(533,639,o),
(525,639,qs),
(517,639,o),
(506,628,o),
(506,620,qs),
(506,464,l),
(444,402,l),
(444,473,l),
(476,505,ls),
(482,511,o),
(482,519,qs),
(482,526,o),
(473,538,o),
(462,538,qs),
(454,538,o),
(449,533,qs),
(444,528,l),
(444,612,l),
(539,707,l),
(545,711,o),
(545,721,qs),
(545,739,l),
(551,739,ls),
(559,739,o),
(570,750,o),
(570,758,qs),
(570,766,o),
(559,778,o),
(551,778,qs),
(545,778,l),
(545,784,ls),
(545,792,o),
(533,803,o),
(525,803,qs),
(517,803,o),
(506,792,o),
(506,784,qs),
(506,778,l),
(500,778,ls),
(492,778,o),
(481,766,o),
(481,758,qs),
(481,750,o),
(492,739,o),
(500,739,qs),
(506,739,l),
(506,729,l),
(444,667,l),
(444,787,l),
(446,789,o),
(446,790,q),
(501,845,ls),
(507,851,o),
(507,859,qs),
(507,867,o),
(501,873,qs),
(489,886,l),
(486,888,o),
(482,890,q),
(482,910,ls),
(482,918,o),
(476,924,qs),
(464,936,ls),
(458,942,o),
(450,942,qs),
(443,942,o),
(439,939,q),
(433,945,o),
(425,945,qs),
(416,945,o),
(410,939,q),
(405,942,o),
(399,942,qs),
(390,942,o),
(386,936,q),
(373,924,ls),
(367,918,o),
(367,910,qs),
(367,890,l),
(365,889,o),
(362,888,o),
(360,886,qs),
(348,873,ls),
(342,867,o),
(342,859,qs),
(342,851,o),
(348,845,qs),
(403,790,l),
(403,789,o),
(405,787,q),
(405,667,l),
(343,729,l),
(343,739,l),
(349,739,ls),
(357,739,o),
(368,750,o),
(368,758,qs),
(368,766,o),
(357,778,o),
(349,778,qs),
(343,778,l),
(343,784,ls),
(343,792,o),
(332,803,o),
(324,803,qs),
(316,803,o),
(304,792,o),
(304,784,qs),
(304,778,l),
(298,778,ls),
(290,778,o),
(279,766,o),
(279,758,qs),
(279,750,o),
(290,739,o),
(298,739,qs),
(304,739,l),
(304,721,ls),
(304,711,o),
(310,707,q),
(405,612,l),
(405,528,l),
(401,533,l),
(394,538,o),
(387,538,qs),
(379,538,o),
(367,527,o),
(367,519,qs),
(367,511,o),
(373,505,qs),
(405,473,l),
(405,402,l),
(343,464,l),
(343,620,ls),
(343,628,o),
(332,639,o),
(324,639,qs),
(316,639,o),
(311,635,q),
(275,671,ls),
(269,677,o),
(261,677,qs),
(252,677,o),
(241,665,o),
(241,657,qs),
(241,654,o),
(242,652,q),
(217,652,l),
(217,680,l),
(229,680,o),
(242,710,o),
(242,721,qs),
(242,758,ls),
(242,766,o),
(231,778,o),
(223,778,qs),
(172,778,ls),
(164,778,o),
(153,766,o),
(153,758,qs),
(153,721,ls),
(153,710,o),
(166,680,o),
(178,680,q),
(178,652,l),
(143,652,l),
(123,671,ls),
(117,677,o),
(109,677,qs),
(97,677,ls),
(89,677,o),
(83,671,qs),
(70,659,l),
(65,652,o),
(65,645,qs),
(65,637,o),
(69,632,q),
(65,628,o),
(65,620,qs),
(65,613,o),
(70,606,q),
(83,593,l),
(90,588,o),
(97,588,qs),
(109,588,ls),
(116,588,o),
(123,593,q),
(143,613,l),
(278,613,l),
(304,586,l),
(304,566,l),
(300,571,l),
(293,576,o),
(286,576,qs),
(231,576,l),
(224,583,ls),
(218,589,o),
(210,589,qs),
(197,589,o),
(192,576,q),
(153,576,ls),
(146,576,o),
(141,572,qs),
(110,547,ls),
(108,545,o),
(108,545,q),
(81,545,ls),
(73,545,o),
(67,539,qs),
(55,526,ls),
(48,519,o),
(48,512,qs),
(48,504,o),
(58,495,o),
(65,493,q),
(65,485,o),
(76,474,o),
(84,474,q),
(86,459,o),
(103,459,qs),
(110,459,o),
(117,464,q),
(129,477,ls),
(135,483,o),
(135,491,qs),
(135,517,l),
(160,537,l),
(278,537,l),
(304,511,l),
(304,475,l),
(198,475,l),
(197,475,l),
(160,475,ls),
(153,475,o),
(146,470,q),
(121,444,ls),
(114,437,o),
(114,430,qs),
(114,422,o),
(127,411,o),
(135,411,qs),
(172,411,ls),
(181,411,o),
(186,417,q),
(206,436,l),
(316,436,l),
(409,342,l),
(411,342,o),
(419,335,o),
(425,335,qs),
(430,335,o),
(438,342,o),
(440,342,q),
(534,436,l),
(643,436,l),
(663,417,ls),
(669,411,o),
(677,411,qs),
(715,411,ls),
(723,411,o),
(734,422,o),
(734,430,qs),
(734,438,o),
(728,444,qs),
(703,470,ls),
(698,475,o),
(689,475,qs),
(545,475,l),
(545,511,l),
(571,537,l),
(689,537,l),
(714,517,l),
(714,491,ls),
(714,483,o),
(720,477,qs),
(732,464,l),
(739,459,o),
(746,459,qs),
(762,459,o),
(765,474,q),
(773,474,o),
(785,485,o),
(785,493,q),
(795,496,o),
(799,505,qs),
(800,507,o)
);
},
{
closed = 1;
nodes = (
(276,235,o),
(280,235,qs),
(282,235,o),
(283,234,qs),
(401,116,l),
(412,107,o),
(423,107,qs),
(424,107,ls),
(435,107,o),
(446,116,q),
(564,234,ls),
(565,235,o),
(566,235,qs),
(570,235,o),
(570,232,qs),
(570,13,ls),
(570,0,o),
(583,0,qs),
(644,0,ls),
(656,0,o),
(656,13,qs),
(656,362,ls),
(656,375,o),
(644,375,qs),
(583,375,ls),
(571,375,o),
(562,366,qs),
(430,234,ls),
(428,232,o),
(423,232,qs),
(419,232,o),
(417,234,qs),
(285,366,ls),
(276,375,o),
(264,375,qs),
(203,375,ls),
(191,375,o),
(191,362,qs),
(191,13,ls),
(191,0,o),
(203,0,qs),
(264,0,ls),
(276,0,o),
(276,13,qs),
(276,232,ls)
);
},
{
closed = 1;
nodes = (
(785,351,o),
(733,299,o),
(704,228,o),
(704,188,qs),
(704,143,o),
(734,71,o),
(787,21,o),
(860,-6,o),
(903,-6,qs),
(946,-6,o),
(1019,23,o),
(1072,74,o),
(1102,145,o),
(1102,188,qs),
(1102,233,o),
(1072,304,o),
(1019,354,o),
(946,381,o),
(903,381,qs),
(858,381,o)
);
},
{
closed = 1;
nodes = (
(841,91,o),
(812,122,o),
(795,164,o),
(795,188,qs),
(795,239,o),
(856,301,o),
(903,301,qs),
(948,301,o),
(1011,239,o),
(1011,188,qs),
(1011,141,o),
(956,74,o),
(903,74,qs),
(880,74,o)
);
},
{
closed = 1;
nodes = (
(1146,0,o),
(1155,0,qs),
(1375,0,ls),
(1384,0,o),
(1384,9,qs),
(1384,72,ls),
(1384,81,o),
(1375,81,qs),
(1236,81,ls),
(1231,81,o),
(1231,85,qs),
(1231,366,ls),
(1231,375,o),
(1222,375,qs),
(1155,375,ls),
(1146,375,o),
(1146,366,qs),
(1146,9,ls)
);
},
{
closed = 1;
nodes = (
(1432,0,o),
(1441,0,qs),
(1468,0,o),
(1531,-1,o),
(1546,-1,qs),
(1599,-1,o),
(1679,29,o),
(1733,82,o),
(1760,152,o),
(1760,191,qs),
(1760,228,o),
(1737,295,o),
(1686,346,o),
(1606,376,o),
(1550,376,qs),
(1541,376,o),
(1511,376,o),
(1478,375,o),
(1449,375,o),
(1441,375,qs),
(1432,375,o),
(1432,366,qs),
(1432,9,ls)
);
},
{
closed = 1;
nodes = (
(1543,296,o),
(1549,296,qs),
(1601,296,o),
(1669,243,o),
(1669,191,qs),
(1669,137,o),
(1604,80,o),
(1548,80,qs),
(1540,80,o),
(1517,79,o),
(1517,85,qs),
(1517,290,ls),
(1517,295,o),
(1522,295,qs),
(1529,296,o)
);
},
{
closed = 1;
nodes = (
(1884,351,o),
(1832,299,o),
(1803,228,o),
(1803,188,qs),
(1803,143,o),
(1833,71,o),
(1886,21,o),
(1959,-6,o),
(2002,-6,qs),
(2045,-6,o),
(2118,23,o),
(2171,74,o),
(2201,145,o),
(2201,188,qs),
(2201,233,o),
(2171,304,o),
(2118,354,o),
(2045,381,o),
(2002,381,qs),
(1957,381,o)
);
},
{
closed = 1;
nodes = (
(1940,91,o),
(1911,122,o),
(1894,164,o),
(1894,188,qs),
(1894,239,o),
(1955,301,o),
(2002,301,qs),
(2047,301,o),
(2110,239,o),
(2110,188,qs),
(2110,141,o),
(2055,74,o),
(2002,74,qs),
(1979,74,o)
);
},
{
closed = 1;
nodes = (
(2561,367,o),
(2562,368,o),
(2562,369,qs),
(2562,375,o),
(2556,375,qs),
(2486,375,ls),
(2477,375,o),
(2473,366,qs),
(2386,132,l),
(2386,131,o),
(2385,130,q),
(2383,130,o),
(2383,132,q),
(2292,366,ls),
(2288,375,o),
(2280,375,qs),
(2204,375,ls),
(2198,375,o),
(2198,369,qs),
(2198,367,o),
(2199,366,q),
(2345,9,ls),
(2349,0,o),
(2357,0,qs),
(2406,0,ls),
(2415,0,o),
(2419,9,qs),
(2561,366,l)
);
},
{
closed = 1;
nodes = (
(2490,8,o),
(2490,6,qs),
(2490,0,o),
(2496,0,qs),
(2561,0,ls),
(2569,0,o),
(2573,9,qs),
(2597,75,ls),
(2599,79,o),
(2603,79,qs),
(2736,79,ls),
(2740,79,o),
(2742,75,qs),
(2767,9,l),
(2769,0,o),
(2778,0,qs),
(2848,0,ls),
(2854,0,o),
(2854,6,qs),
(2854,7,o),
(2853,8,o),
(2853,9,q),
(2712,367,l),
(2708,375,o),
(2700,375,qs),
(2644,375,ls),
(2636,375,o),
(2632,367,q),
(2491,9,l)
);
},
{
closed = 1;
nodes = (
(2668,261,o),
(2670,262,q),
(2671,261,l),
(2708,163,l),
(2708,162,ls),
(2708,159,o),
(2705,159,qs),
(2634,159,ls),
(2631,159,o),
(2631,162,qs),
(2631,163,l),
(2668,261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 67 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 189 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 53 4 3 114 0 5 53 60 53 5 60 128 0 56 79 77 79 56 77 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 210 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 53 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 0 62 62 52 98 78 76 72 69 65 63 58 55 8 52 52 21 77 83 70 66 81 4 59 59 52 97 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 206 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 53 60 57 89 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 30 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 204 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 53 60 57 89 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 30 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 205 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 30 58 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 206 values pushed */
32 1 31 28 31 133 35 1 28 20 28 133 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 57 128 0 5 53 60 53 5 60 128 0 56 79 62 79 56 62 128 37 33 30 3 26 19 20 26 89 42 36 34 29 27 5 20 43 41 21 3 19 17 20 19 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 51 1 11 10 1 0 4 11 0 105 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 30 58 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 170 values pushed */
518 517 498 497 428 427 408 407 592 588 583 581 577 576 572 569 562 560 553 551 542 540 534 532 524 522 517 530 518 530 508 506 497 516 498 516 496 493 489 487 480 475 467 460 457 454 451 449 445 442 434 432 427 440 428 440 418 416 407 426 408 426 400 397 389 386 383 380 372 369 366 363 355 351 348 347 346 344 342 340 336 335 332 330 317 315 313 312 311 310 304 302 297 296 288 287 284 282 272 270 263 261 257 255 252 250 247 245 241 239 216 215 212 211 192 190 186 184 181 179 176 174 170 168 161 159 149 147 143 142 138 137 136 135 129 127 122 121 120 119 116 114 101 99 97 96 91 90 87 86 85 83 79 77 66 64 58 57 71 34 19 35 19 38 34 23 22 84 7 31 
CALL[ ]	/* CallFunction */";
};
width = 2942;
}
);
note = logo;
},
{
glyphname = a00E2.alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,637,l),
(309,783,l),
(268,783,l),
(145,637,l),
(210,637,l),
(288,734,l),
(370,637,l)
);
},
{
closed = 1;
nodes = (
(156,214,o),
(186,225,qs),
(210,234,o),
(272,245,o),
(337,251,o),
(401,254,o),
(429,255,q),
(429,212,ls),
(429,170,o),
(398,109,o),
(346,68,o),
(277,49,o),
(240,49,qs),
(219,49,o),
(178,58,o),
(144,79,o),
(122,113,o),
(122,138,qs),
(121,168,o)
);
},
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,495,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(187,520,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,452,o),
(412,407,o),
(427,346,o),
(427,310,q),
(319,307,o),
(253,298,qs),
(224,294,o),
(162,280,o),
(131,264,qs),
(99,248,o),
(54,184,o),
(54,142,qs),
(54,103,o),
(83,47,o),
(132,11,o),
(197,-6,o),
(233,-6,qs),
(291,-6,o),
(391,30,o),
(430,76,q),
(439,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 0 1 133 2 1 0 9 0 133 0 8 7 6 7 8 6 128 0 6 0 4 3 6 4 105 0 7 7 9 97 0 9 9 29 77 0 3 3 5 97 10 1 5 5 30 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 1 0 1 133 2 1 0 9 0 133 0 8 7 6 7 8 6 128 0 6 0 4 3 6 4 105 0 7 7 9 97 0 9 9 29 77 0 10 10 21 77 0 3 3 5 97 0 5 5 30 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
65 64 59 57 20 36 27 40 37 37 17 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = a00E2.alt;
},
{
glyphname = a0103.alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,672,o),
(208,687,o),
(187,715,o),
(184,738,q),
(123,738,l),
(126,703,o),
(155,656,o),
(200,627,o),
(258,615,o),
(289,615,qs),
(320,615,o),
(378,627,o),
(425,656,o),
(456,703,o),
(459,738,q),
(398,738,l),
(395,715,o),
(374,687,o),
(344,672,o),
(308,666,o),
(291,666,qs),
(274,666,o)
);
},
{
closed = 1;
nodes = (
(156,214,o),
(186,225,qs),
(210,234,o),
(272,245,o),
(337,251,o),
(401,254,o),
(429,255,q),
(429,212,ls),
(429,170,o),
(398,109,o),
(346,68,o),
(277,49,o),
(240,49,qs),
(219,49,o),
(178,58,o),
(144,79,o),
(122,113,o),
(122,138,qs),
(121,168,o)
);
},
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,495,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(187,520,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,452,o),
(412,407,o),
(427,346,o),
(427,310,q),
(319,307,o),
(253,298,qs),
(224,294,o),
(162,280,o),
(131,264,qs),
(99,248,o),
(54,184,o),
(54,142,qs),
(54,103,o),
(83,47,o),
(132,11,o),
(197,-6,o),
(233,-6,qs),
(291,-6,o),
(391,30,o),
(430,76,q),
(439,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
12 1 0 0 2 10 0 2 105 3 1 1 0 9 7 1 9 103 0 7 0 5 4 7 5 106 0 8 8 10 97 0 10 10 29 77 0 4 4 6 97 11 1 6 6 30 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
12 1 0 0 2 10 0 2 105 3 1 1 0 9 7 1 9 103 0 7 0 5 4 7 5 106 0 8 8 10 97 0 10 10 29 77 0 11 11 21 77 0 4 4 6 97 0 6 6 30 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
1 0 80 79 74 72 68 67 63 61 57 56 45 43 35 33 28 26 17 16 12 10 6 5 0 21 1 21 13 7 22 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = a0103.alt;
},
{
glyphname = a00E4.alt;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,691,o),
(131,671,qs),
(131,651,o),
(160,623,o),
(180,623,qs),
(200,623,o),
(230,650,o),
(230,671,qs),
(230,692,o),
(200,719,o),
(180,719,qs),
(160,719,o)
);
},
{
closed = 1;
nodes = (
(353,691,o),
(353,671,qs),
(353,651,o),
(381,623,o),
(401,623,qs),
(421,623,o),
(451,650,o),
(451,671,qs),
(451,692,o),
(421,719,o),
(401,719,qs),
(381,719,o)
);
},
{
closed = 1;
nodes = (
(156,214,o),
(186,225,qs),
(210,234,o),
(272,245,o),
(337,251,o),
(401,254,o),
(429,255,q),
(429,212,ls),
(429,170,o),
(398,109,o),
(346,68,o),
(277,49,o),
(240,49,qs),
(219,49,o),
(178,58,o),
(144,79,o),
(122,113,o),
(122,138,qs),
(121,168,o)
);
},
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,495,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(187,520,o),
(131,492,o),
(89,447,o),
(80,414,q),
(151,414,l),
(160,432,o),
(190,457,o),
(225,471,o),
(263,477,o),
(283,477,qs),
(323,477,o),
(378,452,o),
(412,407,o),
(427,346,o),
(427,310,q),
(319,307,o),
(253,298,qs),
(224,294,o),
(162,280,o),
(131,264,qs),
(99,248,o),
(54,184,o),
(54,142,qs),
(54,103,o),
(83,47,o),
(132,11,o),
(197,-6,o),
(233,-6,qs),
(291,-6,o),
(391,30,o),
(430,76,q),
(439,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 9 8 7 8 9 7 128 0 7 0 5 4 7 5 105 3 1 1 1 0 97 13 2 12 3 0 0 27 77 0 8 8 10 97 0 10 10 29 77 0 4 4 6 97 11 1 6 6 30 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 9 8 7 8 9 7 128 0 7 0 5 4 7 5 105 3 1 1 1 0 97 13 2 12 3 0 0 27 77 0 8 8 10 97 0 10 10 29 77 0 11 11 21 77 0 4 4 6 97 0 6 6 30 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
13 12 1 0 82 81 76 74 70 69 65 63 59 58 47 45 37 35 30 28 19 17 12 23 13 23 7 5 0 11 1 11 14 7 22 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = a00E4.alt;
},
{
glyphname = a2_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,470,o),
(426,498,o),
(407,508,qs),
(381,522,o),
(324,533,o),
(292,533,qs),
(235,533,o),
(147,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(220,-6,o),
(282,-6,qs),
(322,-6,o),
(395,12,o),
(425,33,qs),
(439,43,o),
(464,65,o),
(475,82,q),
(475,0,l),
(541,0,l),
(541,527,l),
(475,527,l),
(475,449,l)
);
},
{
closed = 1;
nodes = (
(405,442,qs),
(446,411,o),
(477,314,o),
(477,265,qs),
(477,221,o),
(457,148,o),
(434,118,qs),
(411,88,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(182,442,o),
(248,477,o),
(295,477,qs),
(358,477,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
26 4 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
6 1 4 4 0 97 3 1 0 0 22 77 0 5 5 1 97 2 1 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 22 77 6 1 4 4 3 97 0 3 3 29 77 0 1 1 21 77 0 5 5 2 97 0 2 2 30 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
28 27 38 36 27 47 28 47 40 38 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = a2_alt;
},
{
glyphname = logom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(795,529,qs),
(787,537,o),
(779,545,o),
(771,548,o),
(757,548,o),
(742,548,q),
(708,575,l),
(703,580,o),
(696,580,qs),
(657,580,l),
(652,592,o),
(639,592,qs),
(631,592,o),
(623,585,o),
(618,580,q),
(563,580,ls),
(556,580,o),
(549,574,o),
(544,569,q),
(544,590,l),
(571,616,l),
(707,616,l),
(726,597,ls),
(732,591,o),
(740,591,qs),
(748,591,o),
(762,592,o),
(767,597,qs),
(774,604,o),
(791,624,o),
(781,636,q),
(791,650,o),
(780,663,qs),
(773,670,o),
(761,681,o),
(753,681,qs),
(743,681,o),
(734,680,o),
(726,676,o),
(717,666,o),
(707,656,q),
(671,656,l),
(671,684,l),
(683,689,o),
(697,711,o),
(697,725,qs),
(697,763,ls),
(697,771,o),
(685,783,o),
(677,783,qs),
(626,783,ls),
(618,783,o),
(606,771,o),
(606,763,qs),
(606,725,ls),
(606,711,o),
(620,689,o),
(632,684,q),
(632,656,l),
(607,656,l),
(609,663,o),
(603,676,o),
(593,682,o),
(579,681,o),
(574,675,q),
(537,639,l),
(527,647,o),
(505,636,o),
(505,623,qs),
(505,467,l),
(443,404,l),
(443,476,l),
(475,508,ls),
(484,517,o),
(475,542,o),
(461,542,qs),
(454,542,o),
(447,536,o),
(443,531,q),
(443,615,l),
(539,711,ls),
(544,717,o),
(544,733,o),
(544,743,q),
(550,743,ls),
(560,743,o),
(569,755,o),
(569,770,o),
(560,783,o),
(550,783,qs),
(544,783,l),
(544,788,ls),
(544,798,o),
(532,807,o),
(517,807,o),
(505,798,o),
(505,788,qs),
(505,783,l),
(499,783,ls),
(489,783,o),
(479,770,o),
(479,755,o),
(489,743,o),
(499,743,qs),
(505,743,l),
(505,733,l),
(443,671,l),
(443,792,ls),
(443,793,o),
(459,810,o),
(479,830,o),
(497,848,o),
(500,851,qs),
(506,856,o),
(506,873,o),
(500,879,qs),
(496,883,o),
(486,894,o),
(481,896,q),
(481,906,o),
(481,923,o),
(475,929,qs),
(471,933,o),
(463,941,o),
(454,947,o),
(444,949,o),
(438,945,q),
(434,950,o),
(416,952,o),
(408,945,q),
(394,954,o),
(384,942,qs),
(376,934,o),
(368,926,o),
(365,919,o),
(365,908,o),
(365,896,q),
(360,894,o),
(350,883,o),
(346,879,qs),
(340,873,o),
(340,856,o),
(346,851,qs),
(349,848,o),
(367,830,o),
(387,810,o),
(403,793,o),
(403,792,qs),
(403,671,l),
(341,733,l),
(341,743,l),
(347,743,ls),
(357,743,o),
(366,755,o),
(366,770,o),
(357,783,o),
(347,783,qs),
(341,783,l),
(341,788,ls),
(341,798,o),
(329,807,o),
(314,807,o),
(302,798,o),
(302,788,qs),
(302,783,l),
(296,783,ls),
(286,783,o),
(276,770,o),
(276,755,o),
(286,743,o),
(296,743,qs),
(302,743,l),
(302,733,o),
(302,717,o),
(308,711,qs),
(403,615,l),
(403,531,l),
(399,536,ls),
(392,543,o),
(376,541,o),
(366,530,o),
(364,515,o),
(371,508,qs),
(403,476,l),
(403,404,l),
(341,467,l),
(341,623,ls),
(341,631,o),
(329,643,o),
(321,643,qs),
(316,643,o),
(312,641,qs),
(310,640,o),
(309,639,q),
(272,675,l),
(267,681,o),
(253,682,o),
(243,676,o),
(237,663,o),
(239,656,q),
(214,656,l),
(214,684,l),
(226,689,o),
(240,711,o),
(240,725,qs),
(240,763,ls),
(240,771,o),
(228,783,o),
(220,783,qs),
(169,783,ls),
(161,783,o),
(149,771,o),
(149,763,qs),
(149,725,ls),
(149,711,o),
(163,689,o),
(175,684,q),
(175,656,l),
(139,656,l),
(120,675,ls),
(114,681,o),
(106,681,qs),
(98,681,o),
(84,681,o),
(79,675,qs),
(76,672,o),
(66,663,o),
(60,654,o),
(60,642,o),
(65,636,q),
(55,622,o),
(66,609,qs),
(73,602,o),
(85,591,o),
(93,591,qs),
(103,591,o),
(112,591,o),
(120,596,o),
(129,606,o),
(139,616,q),
(275,616,l),
(302,590,l),
(302,569,l),
(297,574,o),
(290,580,o),
(283,580,qs),
(228,580,l),
(221,587,ls),
(213,594,o),
(193,590,o),
(189,580,q),
(150,580,ls),
(143,580,o),
(138,575,q),
(104,548,l),
(90,548,o),
(76,548,o),
(67,545,o),
(59,537,o),
(51,529,qs),
(43,521,o),
(49,498,o),
(61,496,q),
(61,488,o),
(72,477,o),
(80,477,q),
(82,465,o),
(105,459,o),
(113,467,qs),
(121,475,o),
(129,483,o),
(132,492,o),
(132,506,o),
(132,520,q),
(157,540,l),
(275,540,l),
(302,514,l),
(302,478,l),
(156,478,ls),
(148,478,o),
(142,472,qs),
(117,447,ls),
(108,437,o),
(118,413,o),
(131,413,qs),
(169,413,ls),
(177,413,o),
(183,419,qs),
(203,439,l),
(313,439,l),
(408,344,l),
(414,336,o),
(431,336,o),
(438,344,qs),
(533,439,l),
(643,439,l),
(655,427,o),
(665,416,o),
(676,412,o),
(695,413,o),
(715,413,qs),
(728,413,o),
(738,438,o),
(729,447,qs),
(704,472,ls),
(698,478,o),
(690,478,qs),
(544,478,l),
(544,514,l),
(571,540,l),
(689,540,l),
(714,520,l),
(714,506,o),
(714,492,o),
(717,483,o),
(725,475,o),
(733,467,qs),
(741,459,o),
(764,466,o),
(766,477,q),
(774,477,o),
(785,488,o),
(785,496,q),
(795,499,o),
(800,508,qs),
(805,520,o)
);
},
{
closed = 1;
nodes = (
(274,235,o),
(278,238,o),
(280,236,qs),
(400,116,ls),
(409,108,o),
(435,108,o),
(444,116,qs),
(563,236,ls),
(565,238,o),
(570,235,o),
(570,233,qs),
(570,13,ls),
(570,0,o),
(583,0,qs),
(644,0,ls),
(656,0,o),
(656,13,qs),
(656,364,ls),
(656,377,o),
(644,377,qs),
(583,377,ls),
(572,377,o),
(561,368,q),
(428,235,ls),
(422,229,o),
(415,235,qs),
(283,368,l),
(272,377,o),
(261,377,qs),
(200,377,ls),
(187,377,o),
(187,364,qs),
(187,13,ls),
(187,0,o),
(200,0,qs),
(261,0,ls),
(274,0,o),
(274,13,qs),
(274,233,ls)
);
}
);
userData = {
assembly = "NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 37 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 124 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 127 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 29 2 9 10 0 10 9 0 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 131 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 132 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 84 values pushed */
359 358 351 348 345 342 336 333 330 327 321 319 316 315 314 312 310 308 304 303 301 299 289 288 284 283 275 273 266 265 250 248 240 239 236 235 231 230 226 225 222 220 173 172 169 168 164 163 159 158 155 153 136 134 125 124 116 114 107 106 104 101 90 88 85 84 79 78 74 72 70 68 18 36 50 18 18 19 53 18 30 45 7 31 
CALL[ ]	/* CallFunction */";
};
width = 847;
}
);
note = logom;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,463,l),
(74,463,l),
(74,403,l),
(220,403,l),
(220,251,l),
(285,251,l),
(285,403,l),
(434,403,l),
(434,463,l),
(285,463,l),
(285,620,l),
(220,620,l)
);
},
{
closed = 1;
nodes = (
(74,141,l),
(434,141,l),
(434,201,l),
(74,201,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
4 1 0 3 1 1 2 0 1 103 8 1 5 0 2 7 5 2 103 9 1 7 6 6 7 87 9 1 7 7 6 95 0 6 7 6 79 12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,447,l),
(190,251,l),
(74,251,l),
(74,191,l),
(162,191,l),
(74,0,l),
(141,0,l),
(229,191,l),
(465,191,l),
(465,251,l),
(257,251,l),
(347,447,l),
(465,447,l),
(465,507,l),
(375,507,l),
(465,703,l),
(398,703,l),
(307,507,l),
(74,507,l),
(74,447,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 0 1 133 0 6 5 6 134 2 1 0 9 1 3 4 0 3 103 8 1 4 5 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 19 18 17 17 17 17 17 17 17 17 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,655,l),
(74,586,l),
(371,432,l),
(74,279,l),
(74,213,l),
(465,418,l),
(465,449,l)
);
},
{
closed = 1;
nodes = (
(465,141,l),
(465,201,l),
(74,201,l),
(74,141,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,213,l),
(465,281,l),
(168,435,l),
(465,588,l),
(465,655,l),
(74,450,l),
(74,419,l)
);
},
{
closed = 1;
nodes = (
(465,141,l),
(465,201,l),
(74,201,l),
(74,141,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,312,o),
(89,271,o),
(75,217,o),
(74,187,q),
(137,187,l),
(137,202,o),
(142,234,o),
(154,261,o),
(177,278,o),
(195,278,qs),
(219,278,o),
(260,243,o),
(304,201,o),
(357,166,o),
(393,166,qs),
(427,166,o),
(474,190,o),
(503,230,o),
(517,284,o),
(519,314,q),
(457,314,l),
(456,299,o),
(451,266,o),
(439,240,o),
(416,223,o),
(397,223,qs),
(373,223,o),
(332,258,o),
(287,301,o),
(235,336,o),
(200,336,qs),
(166,336,o)
);
},
{
closed = 1;
nodes = (
(119,507,o),
(89,466,o),
(75,412,o),
(74,382,q),
(137,382,l),
(137,397,o),
(142,429,o),
(154,456,o),
(177,473,o),
(195,473,qs),
(219,473,o),
(260,438,o),
(304,396,o),
(357,361,o),
(393,361,qs),
(427,361,o),
(474,385,o),
(503,425,o),
(517,479,o),
(519,509,q),
(457,509,l),
(456,494,o),
(451,461,o),
(439,435,o),
(416,418,o),
(397,418,qs),
(373,418,o),
(332,453,o),
(287,496,o),
(235,531,o),
(200,531,qs),
(166,531,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 109 values pushed */
0 8 6 10 6 8 10 128 0 11 7 9 7 11 9 128 0 2 0 4 0 2 4 128 0 5 1 3 1 5 3 128 13 1 6 0 10 7 6 10 105 0 7 0 9 0 7 9 105 12 1 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 33 32 1 0 59 58 54 52 49 47 43 42 38 36 32 63 33 63 27 26 22 20 17 15 11 10 6 4 0 31 1 31 14 6 22 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,419,l),
(297,419,l),
(297,470,l),
(138,470,l),
(152,483,o),
(184,507,o),
(199,520,qs),
(217,535,o),
(252,566,o),
(280,601,o),
(297,642,o),
(297,668,qs),
(297,693,o),
(279,732,o),
(248,758,o),
(207,772,o),
(183,772,qs),
(161,772,o),
(120,761,o),
(87,738,o),
(66,704,o),
(63,680,q),
(120,680,l),
(125,702,o),
(159,720,o),
(179,720,qs),
(208,720,o),
(241,690,o),
(240,661,qs),
(240,643,o),
(222,611,o),
(196,583,o),
(168,559,o),
(156,549,qs),
(60,466,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
34 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 58 77 0 3 3 4 95 0 4 4 59 4 78 17 28 36 18 39 5 9 27 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,427,o),
(297,453,o),
(318,493,o),
(318,522,qs),
(318,554,o),
(288,597,o),
(257,605,q),
(304,628,o),
(304,680,qs),
(304,704,o),
(285,738,o),
(254,761,o),
(214,772,o),
(193,772,qs),
(147,772,o),
(77,728,o),
(71,679,q),
(127,679,l),
(132,702,o),
(167,720,o),
(188,720,qs),
(213,720,o),
(249,698,o),
(248,670,qs),
(247,641,o),
(202,620,o),
(177,620,qs),
(156,620,l),
(156,571,l),
(189,571,ls),
(202,571,o),
(228,567,o),
(248,556,o),
(261,537,o),
(261,521,qs),
(261,489,o),
(218,466,o),
(191,466,qs),
(168,466,o),
(126,484,o),
(118,508,q),
(60,508,l),
(62,483,o),
(86,448,o),
(123,425,o),
(168,415,o),
(191,415,qs),
(216,415,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
40 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 97 8 1 0 0 63 0 78 1 0 34 32 30 29 27 25 21 19 18 16 10 8 6 5 0 47 1 47 9 9 22 
CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = I_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,707,l),
(45,647,l),
(257,647,l),
(257,60,l),
(45,60,l),
(45,0,l),
(536,0,l),
(536,60,l),
(322,60,l),
(322,647,l),
(536,647,l),
(536,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 0 0 5 95 0 5 5 20 77 3 1 1 1 2 95 0 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = I_alt;
},
{
glyphname = tab_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,707,l),
(318,686,o),
(291,657,o),
(269,646,qs),
(243,634,o),
(170,627,o),
(142,627,q),
(142,585,l),
(305,585,l),
(305,60,l),
(114,60,l),
(114,0,l),
(554,0,l),
(554,60,l),
(370,60,l),
(370,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 0 4 3 103 0 5 5 20 77 2 1 0 0 1 95 0 1 1 21 1 78 21 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = tab_1;
},
{
glyphname = l_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(72,171,ls),
(72,139,o),
(85,65,o),
(108,41,qs),
(133,15,o),
(199,0,o),
(234,0,qs),
(267,0,l),
(267,57,l),
(242,57,ls),
(226,57,o),
(188,63,o),
(174,72,qs),
(161,80,o),
(147,104,o),
(140,131,o),
(138,161,o),
(138,175,qs),
(138,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 20 77 0 0 0 1 97 0 1 1 21 1 78 22 33 39 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
note = l_alt;
},
{
glyphname = l2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,707,l),
(72,163,ls),
(72,132,o),
(84,65,o),
(104,39,qs),
(125,13,o),
(187,-6,o),
(219,-6,qs),
(248,-6,o),
(298,6,o),
(322,25,q),
(296,73,l),
(282,60,o),
(247,50,o),
(228,50,qs),
(205,50,o),
(163,67,o),
(152,89,qs),
(142,108,o),
(138,153,o),
(138,174,qs),
(138,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
9 1 0 2 10 1 1 0 2 76 0 2 2 20 77 0 0 0 1 97 0 1 1 30 1 78 22 37 37 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = l2_alt;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,550,o),
(519,652,o),
(414,715,o),
(335,715,qs),
(256,715,o),
(152,652,o),
(89,550,o),
(63,420,o),
(63,353,qs),
(63,285,o),
(89,155,o),
(151,54,o),
(256,-8,o),
(335,-8,qs),
(414,-8,o),
(519,54,o),
(582,156,o),
(608,286,o),
(608,353,qs),
(608,420,o)
);
},
{
closed = 1;
nodes = (
(146,512,o),
(191,600,o),
(271,656,o),
(335,656,qs),
(399,656,o),
(479,600,o),
(524,512,o),
(540,405,o),
(540,353,qs),
(540,300,o),
(525,193,o),
(480,106,o),
(400,51,o),
(335,51,qs),
(270,51,o),
(190,106,o),
(146,193,o),
(130,300,o),
(130,353,qs),
(130,405,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 27 77 0 2 2 0 97 0 0 0 28 0 78 40 40 40 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,707,l),
(314,680,o),
(281,648,o),
(239,631,o),
(190,625,o),
(163,624,q),
(163,585,l),
(305,585,l),
(305,0,l),
(370,0,l),
(370,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 20 77 0 0 0 21 0 78 20 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,390,o),
(398,323,o),
(327,263,o),
(296,236,qs),
(92,62,l),
(92,0,l),
(569,0,l),
(569,60,l),
(185,60,l),
(387,233,ls),
(421,262,o),
(484,321,o),
(532,389,o),
(561,467,o),
(561,515,qs),
(561,564,o),
(528,639,o),
(469,689,o),
(389,715,o),
(342,715,qs),
(306,715,o),
(233,699,o),
(170,663,o),
(123,608,o),
(113,571,q),
(186,571,l),
(205,616,o),
(289,656,o),
(338,656,qs),
(371,656,o),
(429,638,o),
(471,602,o),
(495,548,o),
(495,513,qs),
(495,469,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
29 1 3 1 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 27 77 0 3 3 4 95 0 4 4 21 4 78 17 26 36 18 36 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,99,o),
(150,41,o),
(218,7,o),
(299,-8,o),
(338,-8,qs),
(386,-8,o),
(477,13,o),
(548,61,o),
(590,138,o),
(590,193,qs),
(590,265,o),
(510,358,o),
(440,372,q),
(495,393,o),
(558,482,o),
(558,539,qs),
(558,588,o),
(521,655,o),
(460,697,o),
(381,715,o),
(339,715,qs),
(303,715,o),
(227,700,o),
(162,665,o),
(117,609,o),
(112,568,q),
(180,568,l),
(186,593,o),
(218,627,o),
(260,648,o),
(310,656,o),
(335,656,qs),
(367,656,o),
(425,642,o),
(470,612,o),
(496,562,o),
(495,526,qs),
(494,498,o),
(467,448,o),
(445,431,qs),
(415,407,o),
(341,390,o),
(303,390,qs),
(255,390,l),
(255,330,l),
(328,330,ls),
(364,330,o),
(434,320,o),
(489,291,o),
(523,237,o),
(523,193,qs),
(523,152,o),
(492,96,o),
(441,63,o),
(375,50,o),
(339,51,qs),
(315,51,o),
(259,60,o),
(208,80,o),
(168,115,o),
(160,141,q),
(92,141,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
48 1 1 2 1 76 0 4 3 2 3 4 2 128 8 1 7 1 0 1 7 0 128 0 2 0 1 7 2 1 103 0 3 3 5 97 0 5 5 27 77 0 0 0 6 97 0 6 6 28 6 78 0 0 0 61 0 61 46 36 20 41 33 40 36 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,0,l),
(503,146,l),
(591,146,l),
(591,206,l),
(503,206,l),
(503,707,l),
(407,707,l),
(57,198,l),
(57,146,l),
(438,146,l),
(438,0,l)
);
},
{
closed = 1;
nodes = (
(136,206,l),
(438,647,l),
(438,206,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
11 1 2 1 2 1 0 2 2 76 5 1 2 3 1 0 4 2 0 104 0 1 1 20 77 0 4 4 21 4 78 18 17 17 17 18 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE004;
unicode = 57348;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,350,o),
(304,386,o),
(346,386,qs),
(425,386,o),
(520,300,o),
(520,219,qs),
(520,176,o),
(492,113,o),
(443,71,o),
(374,51,o),
(333,51,qs),
(310,51,o),
(260,63,o),
(214,86,o),
(178,120,o),
(168,143,q),
(99,143,l),
(110,102,o),
(158,45,o),
(221,9,o),
(297,-8,o),
(336,-8,qs),
(389,-8,o),
(481,22,o),
(549,81,o),
(588,167,o),
(588,224,qs),
(588,274,o),
(556,356,o),
(498,414,o),
(416,446,o),
(366,446,qs),
(315,446,o),
(223,417,o),
(185,386,q),
(209,647,l),
(562,647,l),
(562,707,l),
(151,707,l),
(117,320,l),
(193,320,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
5 1 6 1 75 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE005;
unicode = 57349;
},
{
glyphname = uniE006;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,386,o),
(130,330,q),
(130,383,o),
(148,506,o),
(175,556,qs),
(199,600,o),
(281,656,o),
(344,656,qs),
(386,656,o),
(466,617,o),
(487,579,q),
(557,579,l),
(530,645,o),
(416,715,o),
(346,715,qs),
(290,715,o),
(199,679,o),
(165,645,qs),
(137,618,o),
(99,548,o),
(76,470,o),
(66,390,o),
(65,352,qs),
(63,297,o),
(83,172,o),
(109,121,qs),
(143,56,o),
(256,-8,o),
(329,-8,qs),
(381,-8,o),
(468,25,o),
(532,86,o),
(568,171,o),
(568,223,qs),
(568,272,o),
(534,354,o),
(474,412,o),
(392,445,o),
(340,445,qs),
(276,445,o)
);
},
{
closed = 1;
nodes = (
(473,118,o),
(427,75,o),
(365,51,o),
(330,51,qs),
(295,51,o),
(233,76,o),
(185,121,o),
(157,182,o),
(156,218,qs),
(155,254,o),
(185,315,o),
(234,360,o),
(300,385,o),
(335,385,qs),
(372,385,o),
(434,359,o),
(477,313,o),
(501,251,o),
(501,214,qs),
(501,178,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
37 1 6 5 1 76 0 3 4 0 4 3 0 128 7 1 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 27 77 0 6 6 1 97 0 1 1 28 1 78 1 0 56 54 46 44 32 30 28 27 25 23 11 9 0 39 1 39 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE006;
unicode = 57350;
},
{
glyphname = uniE007;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(586,646,l),
(586,707,l),
(126,707,l),
(126,647,l),
(516,647,l),
(221,0,l),
(295,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 2 0 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE007;
unicode = 57351;
},
{
glyphname = uniE008;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(508,349,o),
(448,366,q),
(500,383,o),
(562,472,o),
(562,532,qs),
(562,580,o),
(524,650,o),
(461,694,o),
(380,715,o),
(338,715,qs),
(295,715,o),
(215,694,o),
(152,650,o),
(114,580,o),
(114,532,qs),
(114,472,o),
(172,380,o),
(226,363,q),
(198,354,o),
(149,323,o),
(113,279,o),
(92,224,o),
(92,192,qs),
(92,137,o),
(132,61,o),
(200,13,o),
(289,-8,o),
(337,-8,qs),
(385,-8,o),
(474,14,o),
(542,62,o),
(583,138,o),
(583,192,qs),
(583,258,o)
);
},
{
closed = 1;
nodes = (
(429,640,o),
(471,607,o),
(494,554,o),
(494,517,qs),
(494,484,o),
(467,436,o),
(422,404,o),
(366,388,o),
(338,388,qs),
(307,388,o),
(250,403,o),
(207,436,o),
(182,486,o),
(182,521,qs),
(182,557,o),
(206,608,o),
(248,641,o),
(305,656,o),
(338,656,qs),
(372,656,o)
);
},
{
closed = 1;
nodes = (
(434,316,o),
(484,283,o),
(515,230,o),
(515,191,qs),
(515,152,o),
(485,98,o),
(435,65,o),
(372,51,o),
(338,51,qs),
(304,51,o),
(240,65,o),
(190,98,o),
(159,152,o),
(159,191,qs),
(159,230,o),
(190,283,o),
(241,316,o),
(305,331,o),
(338,331,qs),
(371,331,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
31 15 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 27 77 0 5 5 0 97 0 0 0 28 0 78 55 54 35 34 65 63 54 73 55 73 45 43 34 53 35 53 24 22 36 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE008;
unicode = 57352;
},
{
glyphname = uniE009;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,284,o),
(476,307,qs),
(496,322,o),
(529,363,o),
(537,387,q),
(537,380,o),
(538,362,o),
(538,355,qs),
(538,309,o),
(526,210,o),
(508,167,qs),
(460,51,o),
(334,51,qs),
(288,51,o),
(207,88,o),
(186,128,q),
(111,128,l),
(122,92,o),
(168,40,o),
(227,7,o),
(297,-8,o),
(332,-8,qs),
(403,-8,o),
(516,45,o),
(551,108,qs),
(582,162,o),
(602,292,o),
(601,353,qs),
(601,381,o),
(595,444,o),
(583,508,o),
(563,569,o),
(547,596,qs),
(477,715,o),
(339,715,qs),
(287,715,o),
(199,683,o),
(136,623,o),
(100,538,o),
(100,485,qs),
(100,435,o),
(134,354,o),
(194,296,o),
(276,264,o),
(324,264,qs),
(364,263,o)
);
},
{
closed = 1;
nodes = (
(194,588,o),
(240,632,o),
(302,656,o),
(337,656,qs),
(375,656,o),
(437,630,o),
(482,583,o),
(507,520,o),
(507,483,qs),
(507,447,o),
(479,389,o),
(432,348,o),
(370,325,o),
(336,325,qs),
(258,325,o),
(167,415,o),
(167,493,qs),
(167,529,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 3 0 4 0 3 4 128 0 5 7 1 0 3 5 0 105 0 6 6 1 97 0 1 1 27 77 0 4 4 2 97 0 2 2 28 2 78 1 0 60 58 50 48 33 31 29 28 24 22 11 9 0 45 1 45 8 7 22 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = uniE009;
unicode = 57353;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,87,l),
(352,43,l),
(688,334,l),
(352,624,l),
(314,581,l),
(574,363,l),
(20,363,l),
(20,305,l),
(574,305,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 1 0 1 76 4 3 2 0 74 7 6 2 1 73 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,581,l),
(356,625,l),
(20,334,l),
(356,44,l),
(394,87,l),
(134,305,l),
(688,305,l),
(688,363,l),
(134,363,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 0 1 1 76 7 6 2 1 74 4 3 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = uni2197;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,131,l),
(558,127,l),
(590,570,l),
(148,538,l),
(151,480,l),
(489,510,l),
(97,118,l),
(138,77,l),
(530,469,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
8 5 4 3 2 5 0 74 1 1 0 73 0 0 0 118 22 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni2197;
unicode = 8599;
},
{
glyphname = uni2196;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,480,l),
(561,538,l),
(118,570,l),
(150,128,l),
(208,131,l),
(178,469,l),
(570,77,l),
(611,118,l),
(219,510,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
8 7 6 5 2 5 0 74 1 1 0 73 0 0 0 118 19 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni2196;
unicode = 8598;
},
{
glyphname = uni2198;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,188,l),
(147,130,l),
(590,98,l),
(558,540,l),
(500,537,l),
(530,199,l),
(138,591,l),
(97,550,l),
(489,158,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 1 0 74 8 7 6 5 2 5 0 73 0 0 0 118 19 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni2198;
unicode = 8600;
},
{
glyphname = uni2199;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,537,l),
(150,541,l),
(118,98,l),
(560,130,l),
(557,188,l),
(219,158,l),
(611,550,l),
(570,591,l),
(178,199,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
1 1 0 74 8 5 4 3 2 5 0 73 0 0 0 118 22 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni2199;
unicode = 8601;
},
{
glyphname = uniE010;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,66,o),
(75,44,qs),
(75,22,o),
(103,-8,o),
(126,-8,qs),
(149,-8,o),
(176,22,o),
(176,44,qs),
(176,66,o),
(149,94,o),
(126,94,qs),
(103,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 28 1 78 1 0 7 5 0 11 1 11 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = uniE010;
unicode = 57360;
},
{
glyphname = uniE011;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,66,o),
(70,44,qs),
(70,19,o),
(98,-10,o),
(124,-8,q),
(119,-37,o),
(90,-79,o),
(68,-93,q),
(84,-119,l),
(127,-101,o),
(176,-18,o),
(175,27,qs),
(176,54,o),
(151,93,o),
(122,94,qs),
(99,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
10 7 6 3 0 73 1 1 0 0 118 1 0 0 15 1 15 2 7 22 
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = uniE011;
unicode = 57361;
},
{
glyphname = uniE012;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,430,o),
(75,408,qs),
(75,386,o),
(103,356,o),
(126,356,qs),
(149,356,o),
(176,386,o),
(176,408,qs),
(176,430,o),
(149,459,o),
(126,459,qs),
(103,459,o)
);
},
{
closed = 1;
nodes = (
(75,66,o),
(75,44,qs),
(75,22,o),
(103,-8,o),
(126,-8,qs),
(149,-8,o),
(176,22,o),
(176,44,qs),
(176,66,o),
(149,94,o),
(126,94,qs),
(103,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 28 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = uniE012;
unicode = 57362;
},
{
glyphname = uniE013;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,430,o),
(74,408,qs),
(74,386,o),
(101,356,o),
(124,356,qs),
(148,356,o),
(175,386,o),
(175,408,qs),
(175,430,o),
(147,459,o),
(124,459,qs),
(101,459,o)
);
},
{
closed = 1;
nodes = (
(71,66,o),
(71,44,qs),
(71,19,o),
(99,-10,o),
(125,-8,q),
(120,-37,o),
(91,-79,o),
(69,-93,q),
(85,-119,l),
(128,-101,o),
(177,-18,o),
(176,27,qs),
(177,54,o),
(152,93,o),
(123,94,qs),
(100,94,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
22 19 18 3 2 73 4 1 2 1 2 134 3 1 0 1 1 0 89 3 1 0 0 1 97 0 1 0 1 81 13 12 1 0 12 27 13 27 7 5 0 11 1 11 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = uniE013;
unicode = 57363;
},
{
glyphname = uniE014;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,707,l),
(100,486,l),
(146,486,l),
(156,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 20 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 247;
}
);
note = uniE014;
unicode = 57364;
},
{
glyphname = uniE015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,707,l),
(60,486,l),
(106,486,l),
(115,707,l)
);
},
{
closed = 1;
nodes = (
(192,707,l),
(202,486,l),
(248,486,l),
(257,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 20 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 307;
}
);
note = uniE015;
unicode = 57365;
},
{
glyphname = uniE016;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,703,o),
(70,681,qs),
(70,657,o),
(98,628,o),
(124,630,q),
(119,601,o),
(90,559,o),
(68,544,q),
(84,518,l),
(127,537,o),
(176,620,o),
(175,665,q),
(177,688,o),
(151,731,o),
(122,732,qs),
(99,732,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
10 7 6 3 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 27 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
1 0 0 15 1 15 2 7 22 
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = uniE016;
unicode = 57366;
},
{
glyphname = uniE017;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,703,o),
(24,681,qs),
(24,657,o),
(52,628,o),
(78,630,q),
(73,601,o),
(44,559,o),
(22,544,q),
(38,518,l),
(81,537,o),
(130,620,o),
(129,665,qs),
(130,690,o),
(105,731,o),
(76,732,qs),
(53,732,o)
);
},
{
closed = 1;
nodes = (
(207,703,o),
(207,681,qs),
(207,657,o),
(236,628,o),
(262,630,q),
(257,601,o),
(227,559,o),
(206,544,q),
(222,518,l),
(264,537,o),
(314,620,o),
(313,665,qs),
(314,690,o),
(289,731,o),
(260,732,qs),
(237,732,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
26 23 22 10 7 6 6 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 9 values pushed */
3 1 2 3 0 0 27 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
3 1 2 3 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
17 16 1 0 16 31 17 31 0 15 1 15 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 337;
}
);
note = uniE017;
unicode = 57367;
},
{
glyphname = uniE018;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,556,o),
(176,578,qs),
(176,602,o),
(147,631,o),
(122,629,q),
(127,658,o),
(156,700,o),
(177,714,q),
(161,740,l),
(140,731,o),
(106,700,o),
(82,661,o),
(69,616,o),
(70,594,qs),
(70,568,o),
(96,528,o),
(122,527,qs),
(147,527,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
12 9 8 3 0 74 1 1 0 0 118 1 0 0 17 1 17 2 7 22 
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = uniE018;
unicode = 57368;
},
{
glyphname = uniE019;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(312,556,o),
(312,578,qs),
(312,602,o),
(284,631,o),
(258,629,q),
(263,658,o),
(292,700,o),
(314,714,q),
(298,740,l),
(277,731,o),
(243,700,o),
(219,661,o),
(206,616,o),
(207,594,qs),
(206,569,o),
(231,528,o),
(260,527,qs),
(283,526,o)
);
},
{
closed = 1;
nodes = (
(129,556,o),
(129,578,qs),
(129,602,o),
(100,631,o),
(75,629,q),
(80,658,o),
(109,700,o),
(130,714,q),
(114,740,l),
(93,731,o),
(59,700,o),
(35,661,o),
(22,616,o),
(23,594,qs),
(23,569,o),
(47,528,o),
(76,527,qs),
(99,526,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
30 27 26 12 9 8 6 0 74 3 1 2 3 0 0 118 19 18 1 0 18 35 19 35 0 17 1 17 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 337;
}
);
note = uniE019;
unicode = 57369;
},
{
glyphname = uniE020;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,66,o),
(70,44,qs),
(70,19,o),
(98,-10,o),
(124,-8,q),
(119,-37,o),
(90,-79,o),
(68,-93,q),
(84,-119,l),
(127,-101,o),
(176,-18,o),
(175,29,qs),
(176,53,o),
(148,94,o),
(122,94,qs),
(100,95,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
10 7 6 3 0 73 1 1 0 0 118 1 0 0 15 1 15 2 7 22 
CALL[ ]	/* CallFunction */";
};
width = 252;
}
);
note = uniE020;
unicode = 57376;
},
{
glyphname = uniE021;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,66,o),
(24,44,qs),
(24,19,o),
(52,-10,o),
(78,-8,q),
(73,-37,o),
(44,-79,o),
(22,-93,q),
(38,-119,l),
(81,-101,o),
(130,-18,o),
(129,29,qs),
(130,53,o),
(102,94,o),
(76,94,qs),
(54,95,o)
);
},
{
closed = 1;
nodes = (
(207,66,o),
(207,44,qs),
(207,19,o),
(235,-10,o),
(261,-8,q),
(256,-37,o),
(227,-79,o),
(205,-93,q),
(221,-119,l),
(264,-101,o),
(313,-18,o),
(312,29,qs),
(313,53,o),
(285,94,o),
(259,94,qs),
(237,95,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
26 23 22 10 7 6 6 0 73 3 1 2 3 0 0 118 17 16 1 0 16 31 17 31 0 15 1 15 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 336;
}
);
note = uniE021;
unicode = 57377;
},
{
glyphname = uniE022;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,548,o),
(75,526,qs),
(75,504,o),
(103,474,o),
(126,474,qs),
(149,474,o),
(176,504,o),
(176,526,qs),
(176,548,o),
(149,577,o),
(126,577,qs),
(103,577,o)
);
},
{
closed = 1;
nodes = (
(75,184,o),
(75,162,qs),
(75,140,o),
(103,110,o),
(126,110,qs),
(149,110,o),
(176,140,o),
(176,162,qs),
(176,184,o),
(149,212,o),
(126,212,qs),
(103,212,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = uniE022;
unicode = 57378;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(532,707,l),
(187,707,ls),
(157,707,o),
(100,688,o),
(57,651,o),
(30,594,o),
(30,555,qs),
(30,511,o),
(58,451,o),
(101,415,o),
(155,400,o),
(182,400,qs),
(226,400,l),
(226,0,l),
(291,0,l),
(291,647,l),
(385,647,l),
(385,0,l),
(450,0,l),
(450,647,l),
(532,647,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 3 1 0 1 3 0 128 6 5 2 1 1 4 95 0 4 4 38 77 2 1 0 0 39 0 78 0 0 0 20 0 20 40 33 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,581,ls),
(297,611,o),
(286,661,o),
(259,697,o),
(215,718,o),
(182,718,qs),
(141,718,o),
(77,683,o),
(66,641,q),
(118,641,l),
(126,661,o),
(163,674,o),
(182,673,qs),
(221,671,o),
(248,628,o),
(250,593,q),
(167,593,ls),
(145,593,o),
(105,585,o),
(74,565,o),
(55,532,o),
(55,507,qs),
(55,485,o),
(72,452,o),
(100,431,o),
(138,421,o),
(158,421,qs),
(220,422,o),
(253,461,q),
(259,424,l),
(297,424,l)
);
},
{
closed = 1;
nodes = (
(103,485,o),
(103,511,qs),
(103,528,o),
(121,546,o),
(147,553,o),
(178,554,o),
(190,554,qs),
(250,554,l),
(250,465,o),
(162,465,qs),
(142,464,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
1 1 0 6 1 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
1 1 5 6 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
1 1 0 6 1 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 7 6 1 7 105 9 1 6 6 0 97 8 5 2 0 0 59 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 7 6 1 7 105 8 1 5 5 59 77 9 1 6 6 0 97 0 0 0 59 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 7 6 1 7 105 9 1 6 6 0 97 8 5 2 0 0 59 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
32 31 0 0 36 33 31 41 32 41 0 30 0 30 34 18 34 40 34 10 9 27 
CALL[ ]	/* CallFunction */";
};
width = 362;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,628,l),
(291,769,l),
(223,769,l),
(137,628,l)
);
},
{
closed = 1;
nodes = (
(328,628,l),
(427,769,l),
(359,769,l),
(273,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 512;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,652,l),
(441,707,l),
(122,707,l),
(122,652,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 563;
}
);
note = macron;
unicode = 175;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,376,o),
(72,354,qs),
(72,331,o),
(98,305,o),
(121,305,qs),
(144,305,o),
(171,331,o),
(171,354,qs),
(171,377,o),
(144,402,o),
(122,402,qs),
(99,402,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 243;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,459,o),
(181,482,qs),
(181,505,o),
(154,533,o),
(131,533,qs),
(108,533,o),
(82,504,o),
(82,482,qs),
(82,461,o),
(109,432,o),
(131,432,qs),
(154,432,o)
);
},
{
closed = 1;
nodes = (
(99,-182,l),
(163,-182,l),
(161,330,l),
(101,330,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 0 0 1 97 0 1 1 49 77 5 1 3 3 2 95 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
5 1 3 0 2 3 2 99 4 1 0 0 1 97 0 1 1 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 263;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,458,o),
(329,481,qs),
(329,504,o),
(302,533,o),
(279,533,qs),
(256,533,o),
(228,504,o),
(228,481,qs),
(228,458,o),
(256,431,o),
(279,431,qs),
(302,431,o)
);
},
{
closed = 1;
nodes = (
(243,284,o),
(234,245,o),
(218,225,qs),
(204,208,o),
(172,176,o),
(156,160,qs),
(115,122,o),
(60,40,o),
(60,-18,qs),
(60,-62,o),
(92,-126,o),
(146,-169,o),
(218,-190,o),
(259,-190,qs),
(293,-190,o),
(362,-174,o),
(419,-139,o),
(461,-86,o),
(468,-49,q),
(399,-49,l),
(392,-73,o),
(363,-104,o),
(325,-123,o),
(281,-131,o),
(259,-131,qs),
(232,-131,o),
(183,-116,o),
(147,-87,o),
(125,-43,o),
(125,-14,qs),
(125,22,o),
(162,82,o),
(186,107,qs),
(212,133,o),
(268,184,o),
(289,216,qs),
(302,236,o),
(314,285,o),
(312,309,q),
(245,309,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 0 3 2 126 6 1 0 0 1 97 0 1 1 49 77 0 2 2 4 98 0 4 4 43 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 0 3 0 5 3 128 0 3 2 0 3 2 126 0 2 0 4 2 4 102 6 1 0 0 1 97 0 1 1 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
12 12 1 0 12 51 12 51 38 36 32 31 27 25 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,654,o),
(272,694,o),
(224,718,o),
(191,718,qs),
(157,718,o),
(109,694,o),
(79,654,o),
(65,599,o),
(65,569,qs),
(65,539,o),
(79,485,o),
(109,444,o),
(157,421,o),
(191,421,qs),
(224,421,o),
(272,444,o),
(303,484,o),
(318,538,o),
(318,569,qs),
(318,599,o)
);
},
{
closed = 1;
nodes = (
(123,625,o),
(140,654,o),
(169,672,o),
(191,672,qs),
(213,672,o),
(242,654,o),
(259,625,o),
(266,588,o),
(266,569,qs),
(266,550,o),
(259,513,o),
(242,484,o),
(213,466,o),
(191,466,qs),
(169,466,o),
(140,484,o),
(123,513,o),
(116,550,o),
(116,569,qs),
(116,588,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 59 0 78 40 40 40 36 4 9 26 
CALL[ ]	/* CallFunction */";
};
width = 383;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(121,769,l),
(244,628,l),
(285,628,l),
(408,769,l),
(343,769,l),
(265,676,l),
(185,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
2 1 0 1 0 133 0 1 1 118 17 17 17 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 529;
}
);
note = caron;
unicode = 711;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,691,o),
(236,669,qs),
(236,646,o),
(262,620,o),
(285,620,qs),
(308,620,o),
(335,646,o),
(335,669,qs),
(335,691,o),
(308,717,o),
(286,717,qs),
(263,717,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 571;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,729,o),
(386,704,o),
(378,682,o),
(362,667,o),
(348,667,qs),
(333,667,o),
(306,691,o),
(276,719,o),
(239,743,o),
(215,743,qs),
(187,743,o),
(149,724,o),
(127,691,o),
(117,647,o),
(118,622,q),
(174,622,l),
(174,632,o),
(176,657,o),
(185,679,o),
(200,694,o),
(214,694,qs),
(228,694,o),
(255,671,o),
(285,642,o),
(322,619,o),
(347,619,qs),
(375,619,o),
(412,639,o),
(435,672,o),
(445,716,o),
(445,740,q),
(388,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
6 5 2 3 0 1 4 3 1 105 0 4 0 0 4 89 0 4 4 0 97 2 1 0 4 0 81 0 0 0 31 0 31 35 36 20 35 36 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 562;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,-168,o),
(295,-167,qs),
(264,-167,o),
(224,-133,o),
(224,-101,qs),
(224,-69,o),
(268,-17,o),
(295,0,q),
(254,7,l),
(217,-7,o),
(165,-68,o),
(165,-110,qs),
(165,-137,o),
(184,-177,o),
(216,-202,o),
(260,-215,o),
(285,-215,qs),
(302,-215,o),
(333,-209,o),
(349,-201,q),
(338,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
20 12 11 3 1 74 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 45 34 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 514;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,674,o),
(235,697,qs),
(235,720,o),
(261,749,o),
(284,749,qs),
(308,749,o),
(334,720,o),
(334,697,qs),
(334,674,o),
(308,646,o),
(284,646,qs),
(261,646,o)
);
},
{
closed = 1;
nodes = (
(191,738,o),
(191,696,qs),
(191,654,o),
(242,606,o),
(284,606,qs),
(326,606,o),
(379,654,o),
(379,696,qs),
(379,738,o),
(328,791,o),
(285,791,qs),
(243,791,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
5 1 2 0 1 0 2 1 105 4 1 0 3 3 0 89 4 1 0 0 3 97 0 3 0 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 570;
}
);
note = ring;
unicode = 730;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-283,628,l),
(-228,628,l),
(-312,769,l),
(-380,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 65532;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-285,628,l),
(-186,769,l),
(-254,769,l),
(-340,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-138,628,l),
(-261,769,l),
(-302,769,l),
(-425,628,l),
(-360,628,l),
(-282,721,l),
(-202,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 2 1 0 0 118 17 17 17 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-169,729,o),
(-171,704,o),
(-179,682,o),
(-195,667,o),
(-209,667,qs),
(-224,667,o),
(-251,691,o),
(-281,719,o),
(-318,743,o),
(-342,743,qs),
(-370,743,o),
(-408,724,o),
(-430,691,o),
(-440,647,o),
(-439,622,q),
(-383,622,l),
(-383,632,o),
(-381,657,o),
(-372,679,o),
(-357,694,o),
(-343,694,qs),
(-329,694,o),
(-302,671,o),
(-272,642,o),
(-235,619,o),
(-210,619,qs),
(-182,619,o),
(-145,639,o),
(-122,672,o),
(-112,716,o),
(-112,740,q),
(-169,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
6 5 2 3 0 1 4 3 1 105 0 4 0 0 4 89 0 4 4 0 97 2 1 0 4 0 81 0 0 0 31 0 31 35 36 20 35 36 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-123,652,l),
(-123,707,l),
(-442,707,l),
(-442,652,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-338,674,o),
(-365,690,o),
(-382,718,o),
(-385,740,q),
(-445,740,l),
(-442,705,o),
(-415,658,o),
(-373,630,o),
(-318,618,o),
(-286,618,qs),
(-255,618,o),
(-200,630,o),
(-156,658,o),
(-128,705,o),
(-125,740,q),
(-185,740,l),
(-188,718,o),
(-206,690,o),
(-232,674,o),
(-266,668,o),
(-285,668,qs),
(-304,668,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 133 4 1 0 2 2 0 89 4 1 0 0 2 97 0 2 0 2 81 1 0 17 16 12 10 6 5 0 21 1 21 5 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-340,691,o),
(-340,669,qs),
(-340,646,o),
(-314,620,o),
(-291,620,qs),
(-268,620,o),
(-241,646,o),
(-241,669,qs),
(-241,691,o),
(-268,717,o),
(-290,717,qs),
(-313,717,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-441,689,o),
(-441,669,qs),
(-441,649,o),
(-412,621,o),
(-392,621,qs),
(-372,621,o),
(-342,648,o),
(-342,669,qs),
(-342,690,o),
(-372,717,o),
(-392,717,qs),
(-412,717,o)
);
},
{
closed = 1;
nodes = (
(-214,689,o),
(-214,669,qs),
(-214,649,o),
(-186,621,o),
(-166,621,qs),
(-146,621,o),
(-116,648,o),
(-116,669,qs),
(-116,690,o),
(-146,717,o),
(-166,717,qs),
(-186,717,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-336,674,o),
(-336,697,qs),
(-336,720,o),
(-310,749,o),
(-287,749,qs),
(-263,749,o),
(-237,720,o),
(-237,697,qs),
(-237,674,o),
(-263,646,o),
(-287,646,qs),
(-310,646,o)
);
},
{
closed = 1;
nodes = (
(-380,738,o),
(-380,696,qs),
(-380,654,o),
(-329,606,o),
(-287,606,qs),
(-245,606,o),
(-192,654,o),
(-192,696,qs),
(-192,738,o),
(-243,791,o),
(-286,791,qs),
(-328,791,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
5 1 2 0 1 0 2 1 105 4 1 0 3 3 0 89 4 1 0 0 3 97 0 3 0 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-335,628,l),
(-236,769,l),
(-304,769,l),
(-390,628,l)
);
},
{
closed = 1;
nodes = (
(-199,628,l),
(-100,769,l),
(-168,769,l),
(-254,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-430,769,l),
(-307,628,l),
(-266,628,l),
(-143,769,l),
(-208,769,l),
(-286,676,l),
(-366,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
2 1 0 1 0 133 0 1 1 118 17 17 17 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-233,644,o),
(-233,666,qs),
(-233,690,o),
(-262,719,o),
(-287,717,q),
(-282,746,o),
(-253,788,o),
(-232,802,q),
(-248,828,l),
(-269,819,o),
(-303,788,o),
(-327,749,o),
(-340,704,o),
(-339,682,qs),
(-339,656,o),
(-313,616,o),
(-287,615,qs),
(-262,615,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
12 9 8 3 0 74 1 1 0 0 118 1 0 0 17 1 17 2 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-307,7,l),
(-339,-124,l),
(-327,-121,o),
(-292,-117,o),
(-279,-117,qs),
(-256,-117,o),
(-229,-137,o),
(-228,-159,qs),
(-228,-184,o),
(-251,-209,o),
(-285,-221,o),
(-325,-224,o),
(-342,-222,q),
(-342,-262,l),
(-314,-266,o),
(-256,-260,o),
(-208,-235,o),
(-177,-191,o),
(-177,-157,qs),
(-177,-109,o),
(-209,-89,qs),
(-241,-72,o),
(-286,-80,q),
(-264,7,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
21 10 9 3 0 73 0 1 0 0 1 87 0 1 1 0 97 0 0 1 0 81 23 22 19 17 2 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-62,-168,o),
(-85,-167,qs),
(-116,-167,o),
(-156,-133,o),
(-156,-101,qs),
(-156,-69,o),
(-112,-17,o),
(-85,0,q),
(-126,7,l),
(-163,-7,o),
(-215,-68,o),
(-215,-110,qs),
(-215,-137,o),
(-196,-177,o),
(-164,-202,o),
(-120,-215,o),
(-95,-215,qs),
(-78,-215,o),
(-47,-209,o),
(-31,-201,q),
(-42,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
20 12 11 3 1 74 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 45 34 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(860,0,l),
(860,60,l),
(498,60,l),
(498,321,l),
(820,321,l),
(820,381,l),
(498,381,l),
(498,647,l),
(860,647,l),
(860,707,l),
(388,707,l),
(15,0,l),
(92,0,l),
(173,157,l),
(433,157,l),
(433,0,l)
);
},
{
closed = 1;
nodes = (
(433,647,l),
(433,217,l),
(204,217,l),
(427,647,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
18 1 3 1 75 0 4 0 5 8 4 5 103 0 8 0 0 6 8 0 103 0 3 3 2 95 0 2 2 38 77 0 6 6 1 95 7 1 1 1 39 1 78 17 17 17 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 913;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,172,o),
(132,241,o),
(119,315,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(431,656,o),
(470,644,q),
(238,92,l),
(205,113,o)
);
},
{
closed = 1;
nodes = (
(606,534,o),
(634,465,o),
(647,390,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(336,51,o),
(297,63,q),
(529,616,l),
(561,594,o)
);
},
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,401,o),
(697,495,o),
(658,579,o),
(597,650,o),
(553,674,q),
(613,816,l),
(542,816,l),
(493,700,l),
(443,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,563,o),
(53,431,o),
(53,353,qs),
(53,305,o),
(70,211,o),
(108,127,o),
(169,56,o),
(213,32,q),
(154,-110,l),
(225,-110,l),
(273,7,l),
(322,-8,o),
(384,-8,qs),
(465,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
46 43 2 0 4 14 1 2 1 0 31 28 2 2 1 3 76 0 5 4 5 133 0 3 2 3 134 0 0 0 4 97 0 4 4 46 77 0 1 1 2 97 6 1 2 2 47 2 78 27 26 45 44 42 40 30 29 26 55 27 55 43 34 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(345,5,o),
(400,31,o),
(445,71,o),
(462,101,q),
(479,71,o),
(527,31,o),
(582,5,o),
(644,-6,o),
(675,-6,qs),
(709,-6,o),
(777,8,o),
(835,39,o),
(880,89,o),
(891,124,q),
(822,124,l),
(813,103,o),
(781,75,o),
(742,58,o),
(699,50,o),
(678,50,qs),
(634,50,o),
(566,78,o),
(520,129,o),
(495,200,o),
(493,242,q),
(901,242,l),
(903,297,o),
(880,402,o),
(826,483,o),
(738,533,o),
(676,533,qs),
(613,533,o),
(499,478,o),
(468,421,q),
(445,478,o),
(344,533,o),
(284,533,qs),
(253,533,o),
(188,521,o),
(132,493,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(189,457,o),
(224,471,o),
(263,477,o),
(282,477,qs),
(322,477,o),
(378,448,o),
(413,399,o),
(428,334,o),
(428,297,q),
(254,297,ls),
(215,297,o),
(143,284,o),
(87,250,o),
(54,193,o),
(54,148,qs),
(54,106,o),
(88,48,o),
(144,11,o),
(215,-6,o),
(251,-6,qs),
(283,-6,o)
);
},
{
closed = 1;
nodes = (
(496,334,o),
(521,400,o),
(566,449,o),
(629,477,o),
(668,477,qs),
(708,477,o),
(769,449,o),
(811,401,o),
(833,335,o),
(834,297,q),
(494,297,l)
);
},
{
closed = 1;
nodes = (
(427,214,ls),
(427,172,o),
(400,110,o),
(352,69,o),
(286,49,o),
(247,49,qs),
(223,49,o),
(177,61,o),
(142,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,223,o),
(203,240,o),
(262,242,o),
(288,242,qs),
(427,242,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 107 values pushed */
30 1 3 2 60 1 7 8 2 76 0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 15 11 2 1 16 12 2 6 8 1 6 103 10 1 2 2 4 97 5 1 4 4 49 77 13 1 7 7 0 97 9 14 2 0 0 50 0 78 78 76 65 65 1 0 87 85 76 92 78 92 65 75 65 75 71 69 56 54 50 49 45 43 39 38 34 32 28 26 22 21 17 15 11 9 0 64 1 64 17 8 22 
CALL[ ]	/* CallFunction */";
};
width = 952;
}
);
note = ae;
unicode = 230;
},
{
glyphname = oslash;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,218,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(340,477,o),
(372,465,q),
(177,94,l),
(142,126,o)
);
},
{
closed = 1;
nodes = (
(485,308,o),
(485,263,qs),
(485,218,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(263,50,o),
(230,61,q),
(425,431,l),
(460,399,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,198,o),
(94,78,o),
(148,39,q),
(79,-91,l),
(150,-91,l),
(203,10,l),
(245,-6,o),
(301,-6,qs),
(362,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,327,o),
(507,448,o),
(455,487,q),
(524,618,l),
(453,618,l),
(399,517,l),
(358,533,o),
(301,533,qs),
(239,533,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
27 24 2 0 2 12 1 2 1 0 40 37 2 4 1 3 76 0 3 2 3 133 0 5 4 5 134 0 0 0 2 97 6 1 2 2 49 77 0 1 1 4 97 0 4 4 50 4 78 23 22 39 38 36 34 26 25 22 47 23 47 41 34 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,560,ls),
(138,612,o),
(198,681,o),
(254,681,qs),
(275,681,o),
(313,670,o),
(343,648,o),
(361,615,o),
(361,594,qs),
(361,561,o),
(332,510,o),
(313,486,qs),
(291,457,o),
(251,399,o),
(251,364,qs),
(251,320,o),
(291,269,o),
(326,255,qs),
(349,245,o),
(396,232,o),
(419,224,qs),
(449,213,o),
(487,174,o),
(487,138,qs),
(487,91,o),
(428,49,o),
(385,50,qs),
(346,50,o),
(290,88,o),
(280,127,q),
(212,127,l),
(224,60,o),
(315,-6,o),
(381,-6,qs),
(418,-6,o),
(481,12,o),
(528,49,o),
(554,107,o),
(554,147,qs),
(554,198,o),
(500,257,o),
(453,274,qs),
(444,277,o),
(418,285,o),
(403,290,qs),
(388,294,o),
(356,306,o),
(330,324,o),
(314,349,o),
(315,368,qs),
(315,382,o),
(328,410,o),
(346,436,o),
(366,459,o),
(374,470,qs),
(397,499,o),
(431,559,o),
(431,597,qs),
(431,632,o),
(402,685,o),
(354,720,o),
(293,738,o),
(261,738,qs),
(168,738,o),
(72,641,o),
(72,549,qs),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 48 77 0 3 3 1 97 6 5 2 1 1 50 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 3 3 1 97 6 5 2 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 6 1 5 5 39 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 67 0 67 64 62 41 39 37 36 34 32 35 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,520,ls),
(151,552,o),
(174,602,o),
(216,637,o),
(273,656,o),
(307,656,qs),
(326,656,o),
(370,647,o),
(410,629,o),
(444,601,o),
(453,582,q),
(280,350,l),
(402,298,ls),
(432,285,o),
(489,254,o),
(532,215,o),
(559,169,o),
(559,142,qs),
(559,121,o),
(540,87,o),
(508,63,o),
(467,51,o),
(445,51,qs),
(400,51,o),
(329,84,o),
(318,123,q),
(248,123,l),
(254,91,o),
(290,42,o),
(342,9,o),
(407,-8,o),
(442,-8,qs),
(481,-8,o),
(547,13,o),
(595,52,o),
(623,110,o),
(623,146,qs),
(623,199,o),
(573,271,o),
(535,296,qs),
(498,320,o),
(411,361,o),
(369,379,q),
(525,577,l),
(519,611,o),
(478,663,o),
(419,697,o),
(350,715,o),
(315,715,qs),
(265,715,o),
(182,691,o),
(121,644,o),
(87,573,o),
(87,526,qs),
(87,0,l),
(151,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
44 43 12 11 4 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 3 3 1 97 6 5 2 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 6 1 5 5 39 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 55 0 55 47 34 20 47 37 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,648,ls),
(396,648,o),
(500,609,o),
(538,563,qs),
(575,519,o),
(603,409,o),
(603,353,qs),
(603,296,o),
(573,185,o),
(535,141,qs),
(496,96,o),
(390,59,o),
(332,59,qs),
(157,59,l),
(157,321,l),
(326,321,l),
(326,381,l),
(157,381,l),
(157,648,l)
);
},
{
closed = 1;
nodes = (
(7,381,l),
(7,321,l),
(92,321,l),
(92,0,l),
(339,0,ls),
(409,0,o),
(538,44,o),
(586,98,qs),
(633,151,o),
(670,284,o),
(670,353,qs),
(670,422,o),
(634,557,o),
(587,609,qs),
(539,663,o),
(410,707,o),
(339,707,qs),
(92,707,l),
(92,381,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 0 6 1 1 2 0 1 103 0 3 3 4 95 0 4 4 38 77 0 2 2 5 95 0 5 5 39 5 78 17 17 42 33 42 33 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = OE;
kernLeft = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,680,o),
(438,715,o),
(378,715,qs),
(296,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,275,o),
(92,143,o),
(171,47,o),
(293,-8,o),
(376,-8,qs),
(437,-8,o),
(540,28,o),
(578,67,q),
(578,0,l),
(1043,0,l),
(1043,60,l),
(643,60,l),
(643,321,l),
(1003,321,l),
(1003,381,l),
(643,381,l),
(643,647,l),
(1043,647,l),
(1043,707,l),
(578,707,l),
(578,643,l)
);
},
{
closed = 1;
nodes = (
(523,90,o),
(470,63,o),
(409,51,o),
(378,51,qs),
(310,51,o),
(213,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,526,o),
(213,608,o),
(310,656,o),
(377,656,qs),
(407,656,o),
(468,644,o),
(522,618,o),
(566,576,o),
(578,545,q),
(578,163,l),
(566,133,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
30 28 2 2 1 29 12 2 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 0 3 4 2 3 103 8 1 1 1 0 97 7 1 0 0 38 77 9 1 4 4 5 97 6 1 5 5 39 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 2 0 3 4 2 3 103 0 8 8 0 97 7 1 0 0 38 77 0 1 1 0 97 7 1 0 0 38 77 0 4 4 5 97 6 1 5 5 39 77 0 9 9 5 97 6 1 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 0 3 4 2 3 103 0 8 8 7 97 0 7 7 46 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 77 0 9 9 6 97 0 6 6 47 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
46 44 40 40 35 17 17 17 17 17 16 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 1096;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(958,298,o),
(934,403,o),
(880,484,o),
(792,533,o),
(731,533,qs),
(650,533,o),
(544,466,o),
(517,408,q),
(489,466,o),
(382,533,o),
(301,533,qs),
(239,533,o),
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(382,-6,o),
(489,60,o),
(517,118,q),
(543,60,o),
(649,-6,o),
(730,-6,qs),
(764,-6,o),
(832,8,o),
(890,39,o),
(935,89,o),
(946,124,q),
(877,124,l),
(868,103,o),
(836,75,o),
(797,58,o),
(754,50,o),
(733,50,qs),
(689,50,o),
(621,78,o),
(575,129,o),
(550,200,o),
(548,242,q),
(956,242,l)
);
},
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,218,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(418,443,o),
(463,385,o),
(485,307,o),
(485,263,qs),
(485,218,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(551,334,o),
(576,400,o),
(621,449,o),
(684,477,o),
(723,477,qs),
(763,477,o),
(824,449,o),
(866,401,o),
(888,335,o),
(889,297,q),
(549,297,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
35 1 10 8 19 1 0 1 2 76 0 1 6 0 6 1 0 128 13 1 10 11 1 6 1 10 6 103 9 1 8 8 4 97 5 1 4 4 49 77 12 7 2 0 0 2 97 3 1 2 2 50 2 78 64 64 45 44 0 0 64 74 64 74 70 68 55 53 44 63 45 63 0 43 0 43 36 40 36 36 20 36 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 1007;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,515,l),
(322,515,ls),
(365,515,o),
(433,498,o),
(480,459,o),
(505,397,o),
(505,352,qs),
(505,304,o),
(476,238,o),
(423,196,o),
(350,177,o),
(305,177,qs),
(157,177,l)
);
},
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,117,l),
(307,117,ls),
(363,117,o),
(460,144,o),
(531,201,o),
(572,288,o),
(572,348,qs),
(572,467,o),
(442,575,o),
(327,575,qs),
(157,575,l),
(157,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 2 0 1 0 2 1 103 6 1 0 0 3 4 0 3 103 0 5 5 38 77 0 4 4 39 4 78 1 0 27 26 25 24 23 21 15 13 11 9 0 12 1 12 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,84,o),
(159,142,o),
(137,218,o),
(137,261,qs),
(137,302,o),
(160,380,o),
(205,440,o),
(272,477,o),
(317,477,qs),
(365,477,o),
(433,442,o),
(475,383,o),
(494,305,o),
(494,262,qs),
(494,220,o),
(474,143,o),
(432,85,o),
(366,50,o),
(319,50,qs),
(272,50,o)
);
},
{
closed = 1;
nodes = (
(153,55,o),
(195,23,o),
(244,4,o),
(297,-5,o),
(323,-5,qs),
(381,-5,o),
(469,33,o),
(528,102,o),
(558,197,o),
(560,253,qs),
(561,309,o),
(536,412,o),
(481,490,o),
(392,536,o),
(331,536,qs),
(272,536,o),
(170,492,o),
(138,441,q),
(138,707,l),
(72,707,l),
(72,-197,l),
(138,-197,l),
(138,79,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
42 24 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 38 77 0 1 1 4 97 0 4 4 49 77 6 1 0 0 5 97 0 5 5 50 77 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 5 2 134 0 3 3 38 77 0 1 1 4 97 0 4 4 49 77 6 1 0 0 5 97 0 5 5 50 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 38 36 28 26 23 22 21 20 11 9 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = eth;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,81,o),
(139,132,o),
(118,199,o),
(118,236,qs),
(118,271,o),
(139,335,o),
(178,383,o),
(236,412,o),
(274,412,qs),
(316,412,o),
(379,383,o),
(420,332,o),
(441,265,o),
(441,226,qs),
(441,191,o),
(419,127,o),
(378,79,o),
(318,51,o),
(281,51,qs),
(242,51,o)
);
},
{
closed = 1;
nodes = (
(336,670,l),
(304,693,o),
(208,726,o),
(161,735,q),
(150,686,l),
(189,678,o),
(264,655,o),
(290,639,q),
(192,576,l),
(221,532,l),
(331,608,l),
(358,587,o),
(400,530,o),
(430,469,o),
(448,405,o),
(451,376,q),
(420,428,o),
(328,469,o),
(268,469,qs),
(217,469,o),
(137,434,o),
(82,373,o),
(52,288,o),
(52,239,qs),
(52,186,o),
(81,96,o),
(138,31,o),
(222,-5,o),
(278,-5,qs),
(346,-5,o),
(436,42,o),
(490,121,o),
(512,227,o),
(512,287,qs),
(512,339,o),
(500,435,o),
(470,523,o),
(419,604,o),
(380,640,q),
(478,703,l),
(450,746,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
44 1 0 1 1 76 60 59 56 55 52 51 50 49 21 9 3 74 0 3 0 1 0 3 1 105 4 1 0 0 2 97 0 2 2 50 2 78 1 0 42 40 32 30 11 9 0 19 1 19 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = eth;
unicode = 240;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
},
{
closed = 1;
nodes = (
(306,786,l),
(361,786,l),
(277,927,l),
(209,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
10 1 4 1 1 76 8 1 6 5 6 133 0 5 1 5 133 0 4 7 1 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 11 11 0 0 11 14 11 14 13 12 9 8 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
},
{
closed = 1;
nodes = (
(344,786,l),
(443,927,l),
(375,927,l),
(289,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
10 1 4 1 1 76 0 5 6 5 133 0 6 1 6 133 0 4 7 1 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 0 0 14 13 12 11 9 8 0 7 0 7 17 17 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
},
{
closed = 1;
nodes = (
(435,916,o),
(433,891,o),
(425,869,o),
(409,854,o),
(395,854,qs),
(380,854,o),
(353,878,o),
(323,906,o),
(286,930,o),
(262,930,qs),
(234,930,o),
(196,911,o),
(174,878,o),
(164,834,o),
(165,809,q),
(221,809,l),
(221,819,o),
(223,844,o),
(232,866,o),
(247,881,o),
(261,881,qs),
(275,881,o),
(302,858,o),
(332,829,o),
(369,806,o),
(394,806,qs),
(422,806,o),
(459,826,o),
(482,859,o),
(492,903,o),
(492,927,q),
(435,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
10 1 4 1 1 76 12 10 2 8 0 6 9 8 6 105 0 9 7 1 5 1 9 5 105 0 4 11 1 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 11 11 0 0 11 42 11 42 38 36 33 31 27 26 22 20 17 15 9 8 0 7 0 7 17 17 17 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
},
{
closed = 1;
nodes = (
(274,832,o),
(274,855,qs),
(274,878,o),
(300,907,o),
(323,907,qs),
(347,907,o),
(373,878,o),
(373,855,qs),
(373,832,o),
(347,804,o),
(323,804,qs),
(300,804,o)
);
},
{
closed = 1;
nodes = (
(230,896,o),
(230,854,qs),
(230,812,o),
(281,764,o),
(323,764,qs),
(365,764,o),
(418,812,o),
(418,854,qs),
(418,896,o),
(367,949,o),
(324,949,qs),
(282,949,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
10 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 1 5 0 8 1 5 8 105 0 4 9 1 3 0 4 3 104 0 6 6 7 97 11 1 7 7 44 77 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
11 1 7 0 6 5 7 6 105 10 1 5 0 8 1 5 8 105 0 4 9 1 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
24 23 12 11 0 0 30 28 23 34 24 34 18 16 11 22 12 22 9 8 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(325,786,l),
(380,786,l),
(296,927,l),
(228,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
8 1 7 6 7 133 0 6 0 6 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 15 12 15 18 17 17 17 17 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(323,786,l),
(422,927,l),
(354,927,l),
(268,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 6 7 6 133 0 7 0 7 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(169,872,o),
(169,852,qs),
(169,832,o),
(198,804,o),
(218,804,qs),
(238,804,o),
(268,831,o),
(268,852,qs),
(268,873,o),
(238,900,o),
(218,900,qs),
(198,900,o)
);
},
{
closed = 1;
nodes = (
(396,872,o),
(396,852,qs),
(396,832,o),
(424,804,o),
(444,804,qs),
(464,804,o),
(494,831,o),
(494,852,qs),
(494,873,o),
(464,900,o),
(444,900,qs),
(424,900,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 8 10 3 6 9 1 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 25 24 13 12 31 29 24 35 25 35 19 17 12 23 13 23 17 17 17 17 17 16 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
},
{
closed = 1;
nodes = (
(107,808,l),
(162,808,l),
(78,949,l),
(10,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 2 3 1 3 2 1 128 4 1 3 3 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 2 3 133 0 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
},
{
closed = 1;
nodes = (
(144,808,l),
(243,949,l),
(175,949,l),
(89,808,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 2 1 2 3 1 128 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
},
{
closed = 1;
nodes = (
(-18,872,o),
(-18,852,qs),
(-18,832,o),
(11,804,o),
(31,804,qs),
(51,804,o),
(81,831,o),
(81,852,qs),
(81,873,o),
(51,900,o),
(31,900,qs),
(11,900,o)
);
},
{
closed = 1;
nodes = (
(169,872,o),
(169,852,qs),
(169,832,o),
(197,804,o),
(217,804,qs),
(237,804,o),
(267,831,o),
(267,852,qs),
(267,873,o),
(237,900,o),
(217,900,qs),
(197,900,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,641,l),
(557,0,l),
(656,0,l),
(656,707,l),
(591,707,l),
(591,64,l),
(193,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
},
{
closed = 1;
nodes = (
(486,916,o),
(484,891,o),
(476,869,o),
(460,854,o),
(446,854,qs),
(431,854,o),
(404,878,o),
(374,906,o),
(337,930,o),
(313,930,qs),
(285,930,o),
(247,911,o),
(225,878,o),
(215,834,o),
(216,809,q),
(272,809,l),
(272,819,o),
(274,844,o),
(283,866,o),
(298,881,o),
(312,881,qs),
(326,881,o),
(353,858,o),
(383,829,o),
(420,806,o),
(445,806,qs),
(473,806,o),
(510,826,o),
(533,859,o),
(543,903,o),
(543,927,q),
(486,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
8 3 2 2 0 1 76 11 9 2 7 0 5 8 7 5 105 0 8 6 1 4 0 8 4 105 1 1 0 0 38 77 10 3 2 2 2 39 2 78 10 10 0 0 10 41 10 41 37 35 32 30 26 25 21 19 16 14 0 9 0 9 17 18 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
},
{
closed = 1;
nodes = (
(379,786,l),
(434,786,l),
(350,927,l),
(282,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
8 1 5 4 5 133 0 4 1 4 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
},
{
closed = 1;
nodes = (
(394,786,l),
(493,927,l),
(425,927,l),
(339,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 4 133 0 5 1 5 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
},
{
closed = 1;
nodes = (
(527,786,l),
(404,927,l),
(363,927,l),
(240,786,l),
(305,786,l),
(383,879,l),
(463,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 5 4 5 133 6 1 4 1 4 133 8 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 7 1 0 0 47 0 78 21 20 1 0 46 45 44 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
},
{
closed = 1;
nodes = (
(490,916,o),
(488,891,o),
(480,869,o),
(464,854,o),
(450,854,qs),
(435,854,o),
(408,878,o),
(378,906,o),
(341,930,o),
(317,930,qs),
(289,930,o),
(251,911,o),
(229,878,o),
(219,834,o),
(220,809,q),
(276,809,l),
(276,819,o),
(278,844,o),
(287,866,o),
(302,881,o),
(316,881,qs),
(330,881,o),
(357,858,o),
(387,829,o),
(424,806,o),
(449,806,qs),
(477,806,o),
(514,826,o),
(537,859,o),
(547,903,o),
(547,927,q),
(490,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
12 9 2 7 0 5 8 7 5 105 0 8 6 1 4 1 8 4 105 11 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 10 1 0 0 47 0 78 40 40 21 20 1 0 40 71 40 71 67 65 62 60 56 55 51 49 46 44 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(350,786,l),
(405,786,l),
(321,927,l),
(253,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
7 1 5 4 5 133 0 4 1 4 133 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 29 26 29 28 27 0 25 0 25 37 21 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(369,786,l),
(468,927,l),
(400,927,l),
(314,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 4 5 4 133 0 5 1 5 133 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 29 28 27 26 0 25 0 25 37 21 37 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(504,786,l),
(381,927,l),
(340,927,l),
(217,786,l),
(282,786,l),
(360,879,l),
(440,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 4 5 133 6 1 4 1 4 133 7 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 32 31 30 29 28 27 0 25 0 25 37 21 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,707,l),
(19,707,l),
(270,267,l),
(270,0,l),
(335,0,l),
(335,267,l),
(584,707,l),
(509,707,l),
(304,334,l)
);
},
{
closed = 1;
nodes = (
(319,786,l),
(418,927,l),
(350,927,l),
(264,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
8 5 2 3 1 0 1 76 0 3 4 3 133 0 4 0 4 133 2 1 0 0 38 77 0 1 1 39 1 78 17 18 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = agrave;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
},
{
closed = 1;
nodes = (
(282,628,l),
(337,628,l),
(253,769,l),
(185,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 104 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
11 1 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 104 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
55 55 40 38 55 58 55 58 57 56 49 47 38 54 40 54 21 36 20 36 40 34 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
},
{
closed = 1;
nodes = (
(288,628,l),
(387,769,l),
(319,769,l),
(233,628,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 9 8 133 0 9 4 9 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 8 9 8 133 0 9 4 9 133 0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
40 38 58 57 56 55 49 47 38 54 40 54 21 36 20 36 40 34 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = atilde;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
},
{
closed = 1;
nodes = (
(392,729,o),
(390,704,o),
(382,682,o),
(366,667,o),
(352,667,qs),
(337,667,o),
(310,691,o),
(280,719,o),
(243,743,o),
(219,743,qs),
(191,743,o),
(153,724,o),
(131,691,o),
(121,647,o),
(122,622,q),
(178,622,l),
(178,632,o),
(180,657,o),
(189,679,o),
(204,694,o),
(218,694,qs),
(232,694,o),
(259,671,o),
(289,642,o),
(326,619,o),
(351,619,qs),
(379,619,o),
(416,639,o),
(439,672,o),
(449,716,o),
(449,740,q),
(392,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 3 2 1 2 3 1 128 15 13 2 11 0 9 12 11 9 105 0 12 10 1 8 4 12 8 105 0 1 14 1 6 7 1 6 104 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
0 3 2 1 2 3 1 128 15 13 2 11 0 9 12 11 9 105 0 12 10 1 8 4 12 8 105 0 1 14 1 6 7 1 6 104 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
55 55 40 38 55 86 55 86 82 80 77 75 71 70 66 64 61 59 49 47 38 54 40 54 21 36 20 36 40 34 16 8 28 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = aring;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
},
{
closed = 1;
nodes = (
(236,658,o),
(236,681,qs),
(236,704,o),
(262,733,o),
(285,733,qs),
(309,733,o),
(335,704,o),
(335,681,qs),
(335,658,o),
(309,630,o),
(285,630,qs),
(262,630,o)
);
},
{
closed = 1;
nodes = (
(192,722,o),
(192,680,qs),
(192,638,o),
(243,590,o),
(285,590,qs),
(327,590,o),
(380,638,o),
(380,680,qs),
(380,722,o),
(329,775,o),
(286,775,qs),
(244,775,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 3 2 1 2 3 1 128 14 1 10 0 9 8 10 9 105 13 1 8 0 11 4 8 11 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 3 2 1 2 3 1 128 14 1 10 0 9 8 10 9 105 13 1 8 0 11 4 8 11 105 0 1 12 1 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
68 67 56 55 40 38 74 72 67 78 68 78 62 60 55 66 56 66 49 47 38 54 40 54 21 36 20 36 40 34 15 8 28 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = aring;
unicode = 229;
},
{
glyphname = egrave;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(308,628,l),
(363,628,l),
(279,769,l),
(211,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
11 1 8 7 8 133 0 7 3 7 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 43 43 32 32 0 0 43 46 43 46 45 44 32 42 32 42 38 36 0 31 0 31 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(302,628,l),
(401,769,l),
(333,769,l),
(247,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
0 7 8 7 133 0 8 3 8 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 32 32 0 0 46 45 44 43 32 42 32 42 38 36 0 31 0 31 40 36 20 36 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = edieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(137,689,o),
(137,669,qs),
(137,649,o),
(166,621,o),
(186,621,qs),
(206,621,o),
(236,648,o),
(236,669,qs),
(236,690,o),
(206,717,o),
(186,717,qs),
(166,717,o)
);
},
{
closed = 1;
nodes = (
(364,689,o),
(364,669,qs),
(364,649,o),
(392,621,o),
(412,621,qs),
(432,621,o),
(462,648,o),
(462,669,qs),
(462,690,o),
(432,717,o),
(412,717,qs),
(392,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
0 1 4 0 4 1 0 128 12 1 6 11 1 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 48 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 56 55 44 43 32 32 0 0 62 60 55 66 56 66 50 48 43 54 44 54 32 42 32 42 38 36 0 31 0 31 40 36 20 36 15 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,527,l)
);
},
{
closed = 1;
nodes = (
(96,628,l),
(151,628,l),
(67,769,l),
(-1,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 2 3 133 0 2 1 2 133 0 1 1 41 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,527,l)
);
},
{
closed = 1;
nodes = (
(124,628,l),
(223,769,l),
(155,769,l),
(69,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,527,l)
);
},
{
closed = 1;
nodes = (
(-18,689,o),
(-18,669,qs),
(-18,649,o),
(11,621,o),
(31,621,qs),
(51,621,o),
(81,648,o),
(81,669,qs),
(81,690,o),
(51,717,o),
(31,717,qs),
(11,717,o)
);
},
{
closed = 1;
nodes = (
(129,689,o),
(129,669,qs),
(129,649,o),
(157,621,o),
(177,621,qs),
(197,621,o),
(227,648,o),
(227,669,qs),
(227,690,o),
(197,717,o),
(177,717,qs),
(157,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 48 77 0 1 1 41 77 0 0 0 39 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(186,416,qs),
(209,443,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(373,533,o),
(330,533,qs),
(298,533,o),
(243,522,o),
(217,509,qs),
(194,498,o),
(152,461,o),
(138,437,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(417,729,o),
(415,704,o),
(407,682,o),
(391,667,o),
(377,667,qs),
(362,667,o),
(335,691,o),
(305,719,o),
(268,743,o),
(244,743,qs),
(216,743,o),
(178,724,o),
(156,691,o),
(146,647,o),
(147,622,q),
(203,622,l),
(203,632,o),
(205,657,o),
(214,679,o),
(229,694,o),
(243,694,qs),
(257,694,o),
(284,671,o),
(314,642,o),
(351,619,o),
(376,619,qs),
(404,619,o),
(441,639,o),
(464,672,o),
(474,716,o),
(474,740,q),
(417,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
12 10 2 8 0 6 9 8 6 105 0 9 7 1 5 0 9 5 105 0 3 3 0 97 1 1 0 0 41 77 11 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
12 10 2 8 0 6 9 8 6 105 0 9 7 1 5 1 9 5 105 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 11 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
32 32 0 0 32 63 32 63 59 57 54 52 48 47 43 41 38 36 0 31 0 31 38 22 38 17 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
},
{
closed = 1;
nodes = (
(301,628,l),
(356,628,l),
(272,769,l),
(204,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
8 1 5 4 5 133 0 4 2 4 133 0 1 1 2 97 7 1 2 2 49 77 6 1 0 0 3 97 0 3 3 50 3 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
},
{
closed = 1;
nodes = (
(314,628,l),
(413,769,l),
(345,769,l),
(259,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 4 133 0 5 2 5 133 0 1 1 2 97 7 1 2 2 49 77 6 1 0 0 3 97 0 3 3 50 3 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
},
{
closed = 1;
nodes = (
(452,628,l),
(329,769,l),
(288,769,l),
(165,628,l),
(230,628,l),
(308,721,l),
(388,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 5 4 5 133 6 1 4 2 4 133 0 1 1 2 97 8 1 2 2 49 77 7 1 0 0 3 97 0 3 3 50 3 78 21 20 1 0 46 45 44 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
},
{
closed = 1;
nodes = (
(409,729,o),
(407,704,o),
(399,682,o),
(383,667,o),
(369,667,qs),
(354,667,o),
(327,691,o),
(297,719,o),
(260,743,o),
(236,743,qs),
(208,743,o),
(170,724,o),
(148,691,o),
(138,647,o),
(139,622,q),
(195,622,l),
(195,632,o),
(197,657,o),
(206,679,o),
(221,694,o),
(235,694,qs),
(249,694,o),
(276,671,o),
(306,642,o),
(343,619,o),
(368,619,qs),
(396,619,o),
(433,639,o),
(456,672,o),
(466,716,o),
(466,740,q),
(409,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
12 9 2 7 0 5 8 7 5 105 0 8 6 1 4 2 8 4 105 0 1 1 2 97 11 1 2 2 49 77 10 1 0 0 3 97 0 3 3 50 3 78 40 40 21 20 1 0 40 71 40 71 67 65 62 60 56 55 51 49 46 44 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(286,628,l),
(341,628,l),
(257,769,l),
(189,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 5 4 5 133 0 4 1 4 133 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 22 22 1 0 22 25 22 25 24 23 16 15 12 10 7 6 0 21 1 21 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(293,628,l),
(392,769,l),
(324,769,l),
(238,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 5 4 133 0 5 1 5 133 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 1 0 25 24 23 22 16 15 12 10 7 6 0 21 1 21 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(434,628,l),
(311,769,l),
(270,769,l),
(147,628,l),
(212,628,l),
(290,721,l),
(370,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 5 4 5 133 6 1 4 1 4 133 3 1 1 1 41 77 7 1 0 0 2 97 0 2 2 50 2 78 1 0 28 27 26 25 24 23 16 15 12 10 7 6 0 21 1 21 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,274,ls),
(466,238,o),
(455,170,o),
(441,141,qs),
(421,100,o),
(348,51,o),
(291,50,qs),
(245,49,o),
(184,80,o),
(167,106,qs),
(147,136,o),
(138,222,o),
(138,267,qs),
(138,527,l),
(72,527,l),
(72,242,ls),
(72,185,o),
(93,85,o),
(122,53,qs),
(145,26,o),
(222,-8,o),
(276,-8,qs),
(303,-8,o),
(358,1,o),
(408,22,o),
(451,56,o),
(466,80,q),
(466,1,ls),
(466,-42,o),
(449,-114,o),
(428,-138,qs),
(407,-162,o),
(343,-188,o),
(297,-188,qs),
(249,-188,o),
(158,-155,o),
(118,-125,q),
(89,-179,l),
(131,-214,o),
(243,-246,o),
(297,-246,qs),
(345,-246,o),
(441,-220,o),
(475,-183,qs),
(506,-149,o),
(532,-62,o),
(532,0,qs),
(532,527,l),
(466,527,l)
);
},
{
closed = 1;
nodes = (
(305,628,l),
(404,769,l),
(336,769,l),
(250,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
21 1 4 3 11 10 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 6 7 6 133 0 7 3 7 133 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 7 6 133 0 7 3 7 133 0 1 0 0 1 0 101 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 52 51 50 49 0 48 0 48 38 22 42 37 38 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,274,ls),
(466,238,o),
(455,170,o),
(441,141,qs),
(421,100,o),
(348,51,o),
(291,50,qs),
(245,49,o),
(184,80,o),
(167,106,qs),
(147,136,o),
(138,222,o),
(138,267,qs),
(138,527,l),
(72,527,l),
(72,242,ls),
(72,185,o),
(93,85,o),
(122,53,qs),
(145,26,o),
(222,-8,o),
(276,-8,qs),
(303,-8,o),
(358,1,o),
(408,22,o),
(451,56,o),
(466,80,q),
(466,1,ls),
(466,-42,o),
(449,-114,o),
(428,-138,qs),
(407,-162,o),
(343,-188,o),
(297,-188,qs),
(249,-188,o),
(158,-155,o),
(118,-125,q),
(89,-179,l),
(131,-214,o),
(243,-246,o),
(297,-246,qs),
(345,-246,o),
(441,-220,o),
(475,-183,qs),
(506,-149,o),
(532,-62,o),
(532,0,qs),
(532,527,l),
(466,527,l)
);
},
{
closed = 1;
nodes = (
(141,689,o),
(141,669,qs),
(141,649,o),
(170,621,o),
(190,621,qs),
(210,621,o),
(240,648,o),
(240,669,qs),
(240,690,o),
(210,717,o),
(190,717,qs),
(170,717,o)
);
},
{
closed = 1;
nodes = (
(368,689,o),
(368,669,qs),
(368,649,o),
(396,621,o),
(416,621,qs),
(436,621,o),
(466,648,o),
(466,669,qs),
(466,690,o),
(436,717,o),
(416,717,qs),
(396,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
21 1 4 3 11 10 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 7 6 97 12 8 11 3 6 6 48 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 0 1 0 101 9 1 7 7 6 97 12 8 11 3 6 6 48 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
62 61 50 49 0 0 68 66 61 72 62 72 56 54 49 60 50 60 0 48 0 48 38 22 42 37 38 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,0,l),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l)
);
},
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
},
{
closed = 1;
nodes = (
(486,832,l),
(486,887,l),
(167,887,l),
(167,832,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
10 1 4 1 1 76 0 5 0 6 1 5 6 103 0 4 7 1 3 0 4 3 104 0 1 1 38 77 2 1 0 0 39 0 78 0 0 14 13 12 11 9 8 0 7 0 7 17 17 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(439,0,l)
);
},
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
},
{
closed = 1;
nodes = (
(446,652,l),
(446,707,l),
(127,707,l),
(127,652,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 9 9 8 95 0 8 8 38 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 3 2 1 2 3 1 128 0 1 10 1 6 7 1 6 103 0 9 9 8 95 0 8 8 38 77 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
40 38 58 57 56 55 49 47 38 54 40 54 21 36 20 36 40 34 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,217,l),
(168,217,l),
(324,646,l)
);
},
{
closed = 1;
nodes = (
(622,-168,o),
(599,-167,qs),
(568,-167,o),
(528,-133,o),
(528,-101,qs),
(528,-69,o),
(572,-17,o),
(599,0,q),
(633,0,l),
(370,707,l),
(279,707,l),
(15,0,l),
(88,0,l),
(146,157,l),
(502,157,l),
(557,7,l),
(521,-7,o),
(469,-68,o),
(469,-110,qs),
(469,-137,o),
(488,-177,o),
(520,-202,o),
(564,-215,o),
(589,-215,qs),
(606,-215,o),
(637,-209,o),
(653,-201,q),
(642,-158,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
2 1 0 4 14 1 3 2 30 1 6 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 2 3 0 2 104 0 4 4 38 77 5 1 3 3 39 77 0 6 6 1 97 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 2 3 0 2 104 0 6 0 1 6 1 101 0 4 4 38 77 5 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
37 17 17 17 24 36 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,212,ls),
(427,171,o),
(400,110,o),
(351,69,o),
(284,49,o),
(245,49,qs),
(221,49,o),
(176,61,o),
(141,87,o),
(120,125,o),
(120,152,qs),
(120,186,o),
(153,225,o),
(203,244,o),
(262,248,o),
(288,248,qs),
(427,248,l)
);
},
{
closed = 1;
nodes = (
(503,-168,o),
(480,-167,qs),
(449,-167,o),
(409,-133,o),
(409,-101,qs),
(409,-69,o),
(453,-17,o),
(480,0,q),
(493,0,l),
(493,286,ls),
(493,338,o),
(472,428,o),
(423,494,o),
(343,533,o),
(285,533,qs),
(253,533,o),
(188,521,o),
(131,492,o),
(89,447,o),
(80,414,q),
(152,414,l),
(161,432,o),
(190,457,o),
(225,471,o),
(264,477,o),
(283,477,qs),
(323,477,o),
(378,449,o),
(412,401,o),
(427,337,o),
(427,301,q),
(254,301,ls),
(215,301,o),
(143,286,o),
(88,250,o),
(54,190,o),
(54,145,qs),
(54,108,o),
(85,49,o),
(137,11,o),
(202,-6,o),
(237,-6,qs),
(295,-6,o),
(392,30,o),
(430,76,q),
(438,7,l),
(401,-7,o),
(376,-37,qs),
(350,-68,o),
(350,-110,qs),
(350,-137,o),
(369,-177,o),
(401,-202,o),
(445,-215,o),
(470,-215,qs),
(487,-215,o),
(518,-209,o),
(534,-201,q),
(523,-158,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
30 1 1 0 29 1 3 1 75 1 9 3 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
30 1 1 0 29 1 8 1 75 1 9 3 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 5 4 5 6 4 128 0 4 10 1 0 1 4 0 103 0 5 5 7 97 0 7 7 49 77 0 1 1 3 97 8 1 3 3 50 77 0 9 9 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 6 5 4 5 6 4 128 0 4 10 1 0 1 4 0 103 0 9 0 2 9 2 101 0 5 5 7 97 0 7 7 49 77 0 1 1 3 97 8 1 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 6 5 4 5 6 4 128 0 4 10 1 0 1 4 0 103 0 9 0 2 9 2 101 0 5 5 7 97 0 7 7 49 77 0 8 8 39 77 0 1 1 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
2 0 74 72 67 66 61 59 55 54 50 48 44 42 34 32 21 19 11 9 0 16 2 16 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,643,o),
(524,614,o),
(567,570,o),
(579,539,q),
(645,539,l),
(631,586,o),
(580,653,o),
(509,695,o),
(424,715,o),
(378,715,qs),
(296,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,275,o),
(92,143,o),
(171,47,o),
(293,-8,o),
(376,-8,qs),
(422,-8,o),
(511,12,o),
(586,54,o),
(643,121,o),
(658,168,q),
(585,168,l),
(573,137,o),
(529,93,o),
(473,64,o),
(409,51,o),
(378,51,qs),
(310,51,o),
(213,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,525,o),
(212,608,o),
(309,656,o),
(377,656,qs),
(408,656,o)
);
},
{
closed = 1;
nodes = (
(383,808,l),
(482,949,l),
(414,949,l),
(328,808,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 6 4 6 7 4 128 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 0 6 6 44 77 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 45 44 43 42 37 36 32 30 22 20 16 15 11 9 0 41 1 41 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,10,o),
(459,45,o),
(501,98,o),
(512,135,q),
(444,135,l),
(427,86,o),
(351,50,o),
(303,50,qs),
(255,50,o),
(184,84,o),
(139,142,o),
(117,219,o),
(117,262,qs),
(117,306,o),
(139,384,o),
(184,443,o),
(253,477,o),
(300,477,qs),
(346,477,o),
(423,435,o),
(437,391,q),
(504,391,l),
(485,463,o),
(376,533,o),
(304,533,qs),
(242,533,o),
(148,493,o),
(84,421,o),
(52,322,o),
(52,262,qs),
(52,204,o),
(83,106,o),
(145,34,o),
(237,-6,o),
(299,-6,qs),
(334,-6,o)
);
},
{
closed = 1;
nodes = (
(309,628,l),
(408,769,l),
(340,769,l),
(254,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
0 6 7 6 133 0 7 1 7 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 50 0 78 1 0 39 38 37 36 31 30 28 26 18 16 14 13 11 9 0 35 1 35 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,643,o),
(524,614,o),
(567,570,o),
(579,539,q),
(645,539,l),
(631,586,o),
(580,653,o),
(509,695,o),
(424,715,o),
(378,715,qs),
(296,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,275,o),
(92,143,o),
(171,47,o),
(293,-8,o),
(376,-8,qs),
(422,-8,o),
(511,12,o),
(586,54,o),
(643,121,o),
(658,168,q),
(585,168,l),
(573,137,o),
(529,93,o),
(473,64,o),
(409,51,o),
(378,51,qs),
(310,51,o),
(213,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,525,o),
(212,608,o),
(309,656,o),
(377,656,qs),
(408,656,o)
);
},
{
closed = 1;
nodes = (
(522,786,l),
(399,927,l),
(358,927,l),
(235,786,l),
(300,786,l),
(378,879,l),
(458,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 7 6 7 133 8 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 1 0 48 47 46 45 44 43 37 36 32 30 22 20 16 15 11 9 0 41 1 41 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,10,o),
(459,45,o),
(501,98,o),
(512,135,q),
(444,135,l),
(427,86,o),
(351,50,o),
(303,50,qs),
(255,50,o),
(184,84,o),
(139,142,o),
(117,219,o),
(117,262,qs),
(117,306,o),
(139,384,o),
(184,443,o),
(253,477,o),
(300,477,qs),
(346,477,o),
(423,435,o),
(437,391,q),
(504,391,l),
(485,463,o),
(376,533,o),
(304,533,qs),
(242,533,o),
(148,493,o),
(84,421,o),
(52,322,o),
(52,262,qs),
(52,204,o),
(83,106,o),
(145,34,o),
(237,-6,o),
(299,-6,qs),
(334,-6,o)
);
},
{
closed = 1;
nodes = (
(445,628,l),
(322,769,l),
(281,769,l),
(158,628,l),
(223,628,l),
(301,721,l),
(381,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 7 6 7 133 8 1 6 1 6 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 50 0 78 1 0 42 41 40 39 38 37 31 30 28 26 18 16 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,643,o),
(524,614,o),
(567,570,o),
(579,539,q),
(645,539,l),
(631,586,o),
(580,653,o),
(509,695,o),
(424,715,o),
(378,715,qs),
(296,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,275,o),
(92,143,o),
(171,47,o),
(293,-8,o),
(376,-8,qs),
(422,-8,o),
(511,12,o),
(586,54,o),
(643,121,o),
(658,168,q),
(585,168,l),
(573,137,o),
(529,93,o),
(473,64,o),
(409,51,o),
(378,51,qs),
(310,51,o),
(213,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,525,o),
(212,608,o),
(309,656,o),
(377,656,qs),
(408,656,o)
);
},
{
closed = 1;
nodes = (
(326,871,o),
(326,849,qs),
(326,826,o),
(352,800,o),
(375,800,qs),
(398,800,o),
(425,826,o),
(425,849,qs),
(425,871,o),
(398,897,o),
(376,897,qs),
(353,897,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 6 0 7 4 6 7 105 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 43 42 1 0 49 47 42 53 43 53 37 36 32 30 22 20 16 15 11 9 0 41 1 41 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,10,o),
(459,45,o),
(501,98,o),
(512,135,q),
(444,135,l),
(427,86,o),
(351,50,o),
(303,50,qs),
(255,50,o),
(184,84,o),
(139,142,o),
(117,219,o),
(117,262,qs),
(117,306,o),
(139,384,o),
(184,443,o),
(253,477,o),
(300,477,qs),
(346,477,o),
(423,435,o),
(437,391,q),
(504,391,l),
(485,463,o),
(376,533,o),
(304,533,qs),
(242,533,o),
(148,493,o),
(84,421,o),
(52,322,o),
(52,262,qs),
(52,204,o),
(83,106,o),
(145,34,o),
(237,-6,o),
(299,-6,qs),
(334,-6,o)
);
},
{
closed = 1;
nodes = (
(244,691,o),
(244,669,qs),
(244,646,o),
(270,620,o),
(293,620,qs),
(316,620,o),
(343,646,o),
(343,669,qs),
(343,691,o),
(316,717,o),
(294,717,qs),
(271,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 7 7 6 97 9 1 6 6 48 77 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 50 0 78 37 36 1 0 43 41 36 47 37 47 31 30 28 26 18 16 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,643,o),
(524,614,o),
(567,570,o),
(579,539,q),
(645,539,l),
(631,586,o),
(580,653,o),
(509,695,o),
(424,715,o),
(378,715,qs),
(296,715,o),
(174,660,o),
(93,563,o),
(53,430,o),
(53,353,qs),
(53,275,o),
(92,143,o),
(171,47,o),
(293,-8,o),
(376,-8,qs),
(422,-8,o),
(511,12,o),
(586,54,o),
(643,121,o),
(658,168,q),
(585,168,l),
(573,137,o),
(529,93,o),
(473,64,o),
(409,51,o),
(378,51,qs),
(310,51,o),
(213,100,o),
(150,183,o),
(120,293,o),
(120,355,qs),
(120,416,o),
(150,525,o),
(212,608,o),
(309,656,o),
(377,656,qs),
(408,656,o)
);
},
{
closed = 1;
nodes = (
(232,927,l),
(355,786,l),
(396,786,l),
(519,927,l),
(454,927,l),
(376,834,l),
(296,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
8 1 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 1 0 48 47 46 45 44 43 37 36 32 30 22 20 16 15 11 9 0 41 1 41 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,10,o),
(459,45,o),
(501,98,o),
(512,135,q),
(444,135,l),
(427,86,o),
(351,50,o),
(303,50,qs),
(255,50,o),
(184,84,o),
(139,142,o),
(117,219,o),
(117,262,qs),
(117,306,o),
(139,384,o),
(184,443,o),
(253,477,o),
(300,477,qs),
(346,477,o),
(423,435,o),
(437,391,q),
(504,391,l),
(485,463,o),
(376,533,o),
(304,533,qs),
(242,533,o),
(148,493,o),
(84,421,o),
(52,322,o),
(52,262,qs),
(52,204,o),
(83,106,o),
(145,34,o),
(237,-6,o),
(299,-6,qs),
(334,-6,o)
);
},
{
closed = 1;
nodes = (
(156,769,l),
(279,628,l),
(320,628,l),
(443,769,l),
(378,769,l),
(300,676,l),
(220,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
0 7 6 1 6 7 1 128 0 5 2 4 2 5 4 128 8 1 6 0 2 5 6 2 103 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 50 0 78 1 0 42 41 40 39 38 37 31 30 28 26 18 16 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 558;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,0,ls),
(420,0,o),
(544,52,o),
(627,145,o),
(670,275,o),
(670,353,qs),
(670,432,o),
(628,563,o),
(545,656,o),
(421,707,o),
(339,707,qs),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(405,648,o),
(505,603,o),
(571,524,o),
(603,416,o),
(603,353,qs),
(603,288,o),
(569,180,o),
(501,102,o),
(399,59,o),
(332,59,qs),
(157,59,l),
(157,648,l),
(338,648,ls)
);
},
{
closed = 1;
nodes = (
(171,927,l),
(294,786,l),
(335,786,l),
(458,927,l),
(393,927,l),
(315,834,l),
(235,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
6 1 4 5 4 133 0 5 0 5 133 7 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 13 13 32 31 30 29 28 27 13 25 13 24 34 40 32 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,648,ls),
(396,648,o),
(500,609,o),
(538,563,qs),
(575,519,o),
(603,409,o),
(603,353,qs),
(603,296,o),
(573,185,o),
(535,141,qs),
(496,96,o),
(390,59,o),
(332,59,qs),
(157,59,l),
(157,321,l),
(326,321,l),
(326,381,l),
(157,381,l),
(157,648,l)
);
},
{
closed = 1;
nodes = (
(7,381,l),
(7,321,l),
(92,321,l),
(92,0,l),
(339,0,ls),
(409,0,o),
(538,44,o),
(586,98,qs),
(633,151,o),
(670,284,o),
(670,353,qs),
(670,422,o),
(634,557,o),
(587,609,qs),
(539,663,o),
(410,707,o),
(339,707,qs),
(92,707,l),
(92,381,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 0 6 1 1 2 0 1 103 0 3 3 4 95 0 4 4 38 77 0 2 2 5 95 0 5 5 39 5 78 17 17 42 33 42 33 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 724;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(496,832,l),
(496,887,l),
(177,887,l),
(177,832,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 6 0 7 0 6 7 103 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(457,652,l),
(457,707,l),
(138,707,l),
(138,652,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 95 0 7 7 38 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 32 32 0 0 46 45 44 43 32 42 32 42 38 36 0 31 0 31 40 36 20 36 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = dcroat;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,458,o),
(404,441,qs),
(445,410,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(325,477,o)
);
},
{
closed = 1;
nodes = (
(475,572,l),
(475,449,l),
(460,472,o),
(420,504,o),
(373,524,o),
(321,533,o),
(295,533,qs),
(238,533,o),
(149,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(220,-6,o),
(282,-6,qs),
(342,-6,o),
(442,38,o),
(475,83,q),
(475,0,l),
(541,0,l),
(541,572,l),
(629,572,l),
(629,632,l),
(541,632,l),
(541,707,l),
(475,707,l),
(475,632,l),
(372,632,l),
(372,572,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
50 32 2 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 9 1 5 8 2 5 103 0 3 3 38 77 10 1 0 0 8 97 0 8 8 49 77 0 1 1 6 97 7 1 6 6 39 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 9 1 5 8 2 5 103 0 3 3 38 77 10 1 0 0 8 97 0 8 8 49 77 0 6 6 39 77 0 1 1 7 97 0 7 7 50 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 52 51 46 44 36 34 31 30 29 28 27 26 25 24 23 22 11 9 0 21 1 21 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = dcaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,472,o),
(420,504,o),
(373,524,o),
(321,533,o),
(295,533,qs),
(238,533,o),
(149,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(220,-6,o),
(282,-6,qs),
(342,-6,o),
(442,38,o),
(475,83,q),
(475,0,l),
(541,0,l),
(541,707,l),
(475,707,l),
(475,449,l)
);
},
{
closed = 1;
nodes = (
(381,458,o),
(404,441,qs),
(445,410,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(325,477,o)
);
},
{
closed = 1;
nodes = (
(587,685,o),
(587,663,qs),
(587,639,o),
(617,610,o),
(641,612,q),
(636,583,o),
(607,541,o),
(585,526,q),
(601,500,l),
(644,519,o),
(693,602,o),
(694,647,qs),
(694,676,o),
(668,713,o),
(641,714,qs),
(616,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
55 1 3 0 52 51 2 4 3 22 4 2 5 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
8 6 2 0 0 38 77 7 1 4 4 3 97 0 3 3 49 77 0 5 5 1 97 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 6 46 77 0 0 0 38 77 7 1 4 4 3 97 0 3 3 49 77 0 1 1 39 77 0 5 5 2 97 0 2 2 50 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
46 45 24 23 45 60 46 60 34 32 23 44 24 44 40 35 17 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(284,871,o),
(284,849,qs),
(284,826,o),
(310,800,o),
(333,800,qs),
(356,800,o),
(383,826,o),
(383,849,qs),
(383,871,o),
(356,897,o),
(334,897,qs),
(311,897,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
8 1 6 0 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 13 12 19 17 12 23 13 23 17 17 17 17 17 16 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(249,691,o),
(249,669,qs),
(249,646,o),
(275,620,o),
(298,620,qs),
(321,620,o),
(348,646,o),
(348,669,qs),
(348,691,o),
(321,717,o),
(299,717,qs),
(276,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 97 11 1 7 7 48 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 44 43 32 32 0 0 50 48 43 54 44 54 32 42 32 42 38 36 0 31 0 31 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,-168,o),
(379,-167,qs),
(348,-167,o),
(308,-133,o),
(308,-101,qs),
(308,-69,o),
(352,-17,o),
(379,0,q),
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l),
(319,0,l),
(294,-14,o),
(275,-37,qs),
(249,-68,o),
(249,-110,qs),
(249,-137,o),
(268,-177,o),
(300,-202,o),
(344,-215,o),
(369,-215,qs),
(386,-215,o),
(417,-209,o),
(433,-201,q),
(422,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
33 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 0 5 6 4 5 103 0 3 3 2 95 0 2 2 38 77 0 6 6 1 95 7 1 1 1 39 77 0 8 8 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 0 5 6 4 5 103 0 8 0 0 8 0 101 0 3 3 2 95 0 2 2 38 77 0 6 6 1 95 7 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
37 17 17 17 17 17 17 24 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(380,-168,o),
(357,-167,qs),
(326,-167,o),
(286,-133,o),
(286,-101,qs),
(286,-69,o),
(308,-43,qs),
(329,-18,o),
(355,-1,q),
(361,0,o),
(367,1,qs),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l),
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(190,14,qs),
(233,-4,o),
(288,-6,q),
(269,-19,o),
(253,-37,qs),
(227,-68,o),
(227,-110,qs),
(227,-137,o),
(246,-177,o),
(278,-202,o),
(322,-215,o),
(347,-215,qs),
(364,-215,o),
(395,-209,o),
(411,-201,q),
(400,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
66 1 8 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 7 5 6 5 7 6 128 9 1 1 0 5 7 1 5 103 0 0 0 4 97 0 4 4 49 77 0 6 6 3 97 0 3 3 50 77 0 8 8 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 7 5 6 5 7 6 128 9 1 1 0 5 7 1 5 103 0 8 0 2 8 2 101 0 0 0 4 97 0 4 4 49 77 0 6 6 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 65 63 51 50 46 44 40 39 35 33 24 23 15 13 0 10 0 10 36 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(186,927,l),
(309,786,l),
(350,786,l),
(473,927,l),
(408,927,l),
(330,834,l),
(250,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
8 1 6 7 6 133 0 7 0 7 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 18 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(157,769,l),
(280,628,l),
(321,628,l),
(444,769,l),
(379,769,l),
(301,676,l),
(221,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
9 1 7 8 7 133 0 8 3 8 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 32 32 0 0 49 48 47 46 45 44 32 42 32 42 38 36 0 31 0 31 40 36 20 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,642,o),
(523,614,o),
(566,570,o),
(578,539,q),
(651,539,l),
(636,586,o),
(581,653,o),
(508,695,o),
(421,715,o),
(374,715,qs),
(290,715,o),
(169,656,o),
(90,556,o),
(53,420,o),
(54,344,qs),
(55,268,o),
(95,139,o),
(175,45,o),
(295,-8,o),
(376,-8,qs),
(444,-8,o),
(554,36,o),
(631,117,o),
(673,228,o),
(673,296,qs),
(673,346,l),
(373,346,l),
(373,286,l),
(613,286,l),
(612,233,o),
(579,146,o),
(519,85,o),
(432,51,o),
(377,51,qs),
(310,51,o),
(214,99,o),
(152,180,o),
(122,288,o),
(121,349,qs),
(120,409,o),
(148,520,o),
(209,605,o),
(306,656,o),
(375,656,qs),
(406,656,o)
);
},
{
closed = 1;
nodes = (
(320,861,o),
(293,877,o),
(276,905,o),
(273,927,q),
(213,927,l),
(216,892,o),
(243,845,o),
(285,817,o),
(340,805,o),
(372,805,qs),
(403,805,o),
(458,817,o),
(502,845,o),
(530,892,o),
(533,927,q),
(473,927,l),
(470,905,o),
(452,877,o),
(426,861,o),
(392,855,o),
(373,855,qs),
(354,855,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
10 1 8 7 8 133 0 6 0 3 0 6 3 128 12 1 7 0 9 5 7 9 105 0 3 0 2 1 3 2 103 11 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 46 45 1 0 62 61 57 55 51 50 45 66 46 66 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,495,o),
(350,533,o),
(295,533,qs),
(237,533,o),
(147,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(222,-6,o),
(285,-6,qs),
(345,-6,o),
(442,36,o),
(475,84,q),
(475,18,ls),
(475,-27,o),
(460,-102,o),
(423,-158,o),
(358,-189,o),
(307,-189,qs),
(284,-189,o),
(237,-180,o),
(195,-161,o),
(162,-129,o),
(154,-105,q),
(86,-105,l),
(96,-143,o),
(137,-196,o),
(194,-230,o),
(264,-245,o),
(303,-245,qs),
(367,-245,o),
(458,-209,o),
(515,-142,o),
(541,-49,o),
(541,17,qs),
(541,527,l),
(479,527,l),
(475,452,l)
);
},
{
closed = 1;
nodes = (
(405,442,qs),
(446,411,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(358,477,o)
);
},
{
closed = 1;
nodes = (
(246,674,o),
(219,690,o),
(202,718,o),
(199,740,q),
(139,740,l),
(142,705,o),
(169,658,o),
(211,630,o),
(266,618,o),
(298,618,qs),
(329,618,o),
(384,630,o),
(428,658,o),
(456,705,o),
(459,740,q),
(399,740,l),
(396,718,o),
(378,690,o),
(352,674,o),
(318,668,o),
(299,668,qs),
(280,668,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
40 24 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
11 1 9 8 9 133 0 2 4 3 4 2 3 128 13 1 8 0 10 0 8 10 105 12 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
11 1 9 8 9 133 0 2 4 3 4 2 3 128 13 1 8 0 10 0 8 10 105 0 3 0 1 3 1 101 12 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
11 1 9 8 9 133 0 2 4 3 4 2 3 128 13 1 8 0 10 5 8 10 105 0 3 0 1 3 1 101 0 0 0 41 77 12 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
63 62 42 41 79 78 74 72 68 67 62 83 63 83 52 50 41 61 42 61 40 39 36 20 37 16 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,642,o),
(523,614,o),
(566,570,o),
(578,539,q),
(651,539,l),
(636,586,o),
(581,653,o),
(508,695,o),
(421,715,o),
(374,715,qs),
(290,715,o),
(169,656,o),
(90,556,o),
(53,420,o),
(54,344,qs),
(55,268,o),
(95,139,o),
(175,45,o),
(295,-8,o),
(376,-8,qs),
(444,-8,o),
(554,36,o),
(631,117,o),
(673,228,o),
(673,296,qs),
(673,346,l),
(373,346,l),
(373,286,l),
(613,286,l),
(612,233,o),
(579,146,o),
(519,85,o),
(432,51,o),
(377,51,qs),
(310,51,o),
(214,99,o),
(152,180,o),
(122,288,o),
(121,349,qs),
(120,409,o),
(148,520,o),
(209,605,o),
(306,656,o),
(375,656,qs),
(406,656,o)
);
},
{
closed = 1;
nodes = (
(330,871,o),
(330,849,qs),
(330,826,o),
(356,800,o),
(379,800,qs),
(402,800,o),
(429,826,o),
(429,849,qs),
(429,871,o),
(402,897,o),
(380,897,qs),
(357,897,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 6 0 3 0 6 3 128 10 1 7 0 8 5 7 8 105 0 3 0 2 1 3 2 103 9 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 46 45 1 0 52 50 45 56 46 56 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,495,o),
(350,533,o),
(295,533,qs),
(237,533,o),
(147,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(222,-6,o),
(285,-6,qs),
(345,-6,o),
(442,36,o),
(475,84,q),
(475,18,ls),
(475,-27,o),
(460,-102,o),
(423,-158,o),
(358,-189,o),
(307,-189,qs),
(284,-189,o),
(237,-180,o),
(195,-161,o),
(162,-129,o),
(154,-105,q),
(86,-105,l),
(96,-143,o),
(137,-196,o),
(194,-230,o),
(264,-245,o),
(303,-245,qs),
(367,-245,o),
(458,-209,o),
(515,-142,o),
(541,-49,o),
(541,17,qs),
(541,527,l),
(479,527,l),
(475,452,l)
);
},
{
closed = 1;
nodes = (
(405,442,qs),
(446,411,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(358,477,o)
);
},
{
closed = 1;
nodes = (
(250,691,o),
(250,669,qs),
(250,646,o),
(276,620,o),
(299,620,qs),
(322,620,o),
(349,646,o),
(349,669,qs),
(349,691,o),
(322,717,o),
(300,717,qs),
(277,717,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
40 24 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 4 3 4 2 3 128 0 9 9 8 97 11 1 8 8 48 77 10 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 9 9 8 97 11 1 8 8 48 77 10 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 9 9 8 97 11 1 8 8 48 77 0 0 0 41 77 10 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
63 62 42 41 69 67 62 73 63 73 52 50 41 61 42 61 40 39 36 20 37 16 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = uni0122;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,642,o),
(523,614,o),
(566,570,o),
(578,539,q),
(651,539,l),
(636,586,o),
(581,653,o),
(508,695,o),
(421,715,o),
(374,715,qs),
(290,715,o),
(169,656,o),
(90,556,o),
(53,420,o),
(54,344,qs),
(55,268,o),
(95,139,o),
(175,45,o),
(295,-8,o),
(376,-8,qs),
(444,-8,o),
(554,36,o),
(631,117,o),
(673,228,o),
(673,296,qs),
(673,346,l),
(373,346,l),
(373,286,l),
(613,286,l),
(612,233,o),
(579,146,o),
(519,85,o),
(432,51,o),
(377,51,qs),
(310,51,o),
(214,99,o),
(152,180,o),
(122,288,o),
(121,349,qs),
(120,409,o),
(148,520,o),
(209,605,o),
(306,656,o),
(375,656,qs),
(406,656,o)
);
},
{
closed = 1;
nodes = (
(326,-120,o),
(326,-142,qs),
(326,-166,o),
(354,-195,o),
(380,-193,q),
(375,-222,o),
(346,-264,o),
(324,-278,q),
(340,-304,l),
(383,-286,o),
(433,-203,o),
(432,-158,qs),
(433,-132,o),
(406,-92,o),
(378,-91,qs),
(355,-90,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
55 52 51 3 7 73 0 6 0 3 0 6 3 128 9 1 7 4 7 134 0 3 0 2 1 3 2 103 8 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 46 45 1 0 45 60 46 60 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,495,o),
(350,533,o),
(295,533,qs),
(237,533,o),
(147,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(222,-6,o),
(285,-6,qs),
(345,-6,o),
(442,36,o),
(475,84,q),
(475,18,ls),
(475,-27,o),
(460,-102,o),
(423,-158,o),
(358,-189,o),
(307,-189,qs),
(284,-189,o),
(237,-180,o),
(195,-161,o),
(162,-129,o),
(154,-105,q),
(86,-105,l),
(96,-143,o),
(137,-196,o),
(194,-230,o),
(264,-245,o),
(303,-245,qs),
(367,-245,o),
(458,-209,o),
(515,-142,o),
(541,-49,o),
(541,17,qs),
(541,527,l),
(479,527,l),
(475,452,l)
);
},
{
closed = 1;
nodes = (
(405,442,qs),
(446,411,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(358,477,o)
);
},
{
closed = 1;
nodes = (
(350,644,o),
(350,666,qs),
(350,690,o),
(321,719,o),
(296,717,q),
(301,746,o),
(330,788,o),
(351,802,q),
(335,828,l),
(314,819,o),
(280,788,o),
(256,749,o),
(243,704,o),
(244,682,qs),
(244,656,o),
(270,616,o),
(296,615,qs),
(321,615,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
40 24 2 7 6 1 76 74 71 70 3 8 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
10 1 8 0 8 133 0 2 4 3 4 2 3 128 9 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
10 1 8 0 8 133 0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 9 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 8 5 8 133 0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 0 0 41 77 9 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
63 62 42 41 62 79 63 79 52 50 41 61 42 61 40 39 36 20 37 16 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,508,l),
(92,0,l),
(157,0,l),
(157,317,l),
(573,317,l),
(573,0,l),
(638,0,l),
(638,508,l),
(714,508,l),
(714,563,l),
(638,563,l),
(638,707,l),
(573,707,l),
(573,563,l),
(157,563,l),
(157,707,l),
(92,707,l),
(92,563,l),
(16,563,l),
(16,508,l)
);
},
{
closed = 1;
nodes = (
(157,508,l),
(573,508,l),
(573,377,l),
(157,377,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
4 2 2 0 10 9 2 5 11 0 5 103 12 1 11 0 7 6 11 7 103 3 1 1 1 38 77 8 1 6 6 39 6 78 20 20 20 23 20 23 22 21 19 18 17 17 17 17 17 17 17 17 16 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(185,416,qs),
(208,444,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(372,533,o),
(330,533,qs),
(297,533,o),
(241,522,o),
(216,510,qs),
(191,497,o),
(152,463,o),
(138,439,q),
(138,572,l),
(256,572,l),
(256,627,l),
(138,627,l),
(138,707,l),
(72,707,l),
(72,627,l),
(-8,627,l),
(-8,572,l),
(72,572,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
11 1 6 7 1 76 3 1 1 4 1 0 5 1 0 103 0 2 2 38 77 0 7 7 5 97 0 5 5 49 77 9 8 2 6 6 39 6 78 0 0 0 39 0 39 38 22 38 17 17 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
},
{
closed = 1;
nodes = (
(264,832,l),
(264,887,l),
(-15,887,l),
(-15,832,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 3 1 2 3 103 0 1 1 38 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,527,l)
);
},
{
closed = 1;
nodes = (
(224,652,l),
(224,707,l),
(-15,707,l),
(-15,652,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 2 95 0 2 2 38 77 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,-168,o),
(153,-167,qs),
(122,-167,o),
(82,-133,o),
(82,-101,qs),
(82,-69,o),
(126,-17,o),
(153,0,q),
(157,0,l),
(157,707,l),
(92,707,l),
(92,0,l),
(95,0,l),
(69,-14,o),
(49,-37,qs),
(23,-68,o),
(23,-110,qs),
(23,-137,o),
(42,-177,o),
(74,-202,o),
(118,-215,o),
(143,-215,qs),
(160,-215,o),
(191,-209,o),
(207,-201,q),
(196,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
25 16 12 3 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 2 2 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 2 0 0 2 0 101 0 1 1 38 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
39 26 34 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,692,o),
(64,669,qs),
(64,646,o),
(91,620,o),
(113,620,qs),
(135,620,o),
(163,646,o),
(163,669,qs),
(163,691,o),
(135,717,o),
(113,717,qs),
(91,717,o)
);
},
{
closed = 1;
nodes = (
(164,-168,o),
(141,-167,qs),
(110,-167,o),
(70,-133,o),
(70,-101,qs),
(70,-69,o),
(114,-17,o),
(141,0,q),
(146,0,l),
(146,527,l),
(80,527,l),
(80,0,l),
(83,0,l),
(57,-14,o),
(37,-37,qs),
(11,-68,o),
(11,-110,qs),
(11,-137,o),
(30,-177,o),
(62,-202,o),
(106,-215,o),
(131,-215,qs),
(148,-215,o),
(179,-209,o),
(195,-201,q),
(184,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
37 28 24 3 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 97 5 1 0 0 48 77 0 3 3 41 77 0 4 4 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 0 2 4 2 101 0 1 1 0 97 5 1 0 0 48 77 0 3 3 41 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 36 34 27 26 16 14 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 227;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
},
{
closed = 1;
nodes = (
(239,80,o),
(350,-8,o),
(441,-8,qs),
(503,-8,o),
(587,34,o),
(633,103,o),
(651,192,o),
(651,239,qs),
(651,707,l),
(586,707,l),
(586,241,ls),
(586,203,o),
(576,134,o),
(546,82,o),
(491,51,o),
(446,51,qs),
(381,51,o),
(304,113,o),
(296,179,q),
(228,179,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 1 2 1 5 2 128 3 1 1 1 38 77 0 2 2 0 97 4 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
6 1 5 1 2 1 5 2 128 3 1 1 1 38 77 0 0 0 39 77 0 2 2 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
4 4 4 23 4 23 37 21 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,692,o),
(64,669,qs),
(64,646,o),
(91,620,o),
(113,620,qs),
(135,620,o),
(163,646,o),
(163,669,qs),
(163,691,o),
(135,717,o),
(113,717,qs),
(91,717,o)
);
},
{
closed = 1;
nodes = (
(146,0,l),
(146,527,l),
(80,527,l),
(80,0,l)
);
},
{
closed = 1;
nodes = (
(300,692,o),
(300,669,qs),
(300,646,o),
(327,620,o),
(349,620,qs),
(372,620,o),
(399,646,o),
(399,669,qs),
(399,691,o),
(372,717,o),
(349,717,qs),
(327,717,o)
);
},
{
closed = 1;
nodes = (
(317,527,l),
(317,2,ls),
(317,-45,o),
(307,-92,o),
(292,-107,qs),
(278,-122,o),
(231,-132,o),
(211,-132,qs),
(186,-132,l),
(186,-187,l),
(222,-187,ls),
(310,-187,o),
(346,-148,qs),
(359,-133,o),
(374,-98,o),
(382,-59,o),
(383,-19,o),
(383,0,qs),
(383,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
5 1 1 1 0 97 10 4 9 3 0 0 48 77 8 1 2 2 41 77 0 3 3 39 77 0 7 7 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 6 7 6 101 5 1 1 1 0 97 10 4 9 3 0 0 48 77 8 1 2 2 41 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
17 16 1 0 46 45 39 37 36 34 23 21 16 27 17 27 15 14 13 12 7 5 0 11 1 11 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 463;
}
);
note = ij;
unicode = 307;
},
{
glyphname = uni0136;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,312,l),
(292,312,l),
(519,0,l),
(597,0,l),
(342,355,l),
(595,707,l),
(518,707,l),
(281,372,l),
(157,372,l),
(157,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
},
{
closed = 1;
nodes = (
(275,-119,o),
(275,-141,qs),
(275,-165,o),
(303,-194,o),
(329,-192,q),
(324,-221,o),
(295,-263,o),
(273,-277,q),
(289,-303,l),
(332,-285,o),
(382,-202,o),
(381,-157,qs),
(382,-131,o),
(355,-91,o),
(327,-90,qs),
(304,-89,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
7 1 4 1 1 76 23 20 19 3 6 73 8 1 6 3 6 134 0 1 0 4 3 1 4 103 2 1 0 0 38 77 7 5 2 3 3 39 3 78 14 13 0 0 13 28 14 28 0 12 0 12 17 18 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,236,l),
(258,236,l),
(428,0,l),
(504,0,l),
(310,274,l),
(487,527,l),
(414,527,l),
(251,291,l),
(138,291,l),
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(222,-120,o),
(222,-142,qs),
(222,-166,o),
(250,-195,o),
(276,-193,q),
(271,-222,o),
(242,-264,o),
(220,-278,q),
(236,-304,l),
(279,-286,o),
(329,-203,o),
(328,-158,qs),
(329,-132,o),
(302,-92,o),
(274,-91,qs),
(251,-90,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
7 1 4 1 1 76 23 20 19 3 6 73 8 1 6 3 6 134 0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 7 5 2 3 3 39 3 78 14 13 0 0 13 28 14 28 0 12 0 12 17 18 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l),
(557,0,l)
);
},
{
closed = 1;
nodes = (
(179,786,l),
(278,927,l),
(210,927,l),
(124,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 4 3 133 0 4 0 4 133 0 0 0 38 77 0 1 1 2 95 5 1 2 2 39 2 78 0 0 9 8 7 6 0 5 0 5 17 17 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(133,786,l),
(232,927,l),
(164,927,l),
(78,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 2 3 2 133 0 3 0 3 133 0 0 0 38 77 4 1 1 1 39 1 78 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l),
(557,0,l)
);
},
{
closed = 1;
nodes = (
(285,-119,o),
(285,-141,qs),
(285,-165,o),
(313,-194,o),
(339,-192,q),
(334,-221,o),
(305,-263,o),
(283,-277,q),
(299,-303,l),
(342,-285,o),
(392,-202,o),
(391,-157,qs),
(392,-131,o),
(365,-91,o),
(337,-90,qs),
(314,-89,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
16 13 12 3 3 73 5 1 3 2 3 134 0 0 0 38 77 0 1 1 2 95 4 1 2 2 39 2 78 7 6 0 0 6 21 7 21 0 5 0 5 17 17 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(54,-119,o),
(54,-141,qs),
(54,-165,o),
(82,-194,o),
(108,-192,q),
(103,-221,o),
(74,-263,o),
(52,-277,q),
(68,-303,l),
(111,-285,o),
(161,-202,o),
(160,-157,qs),
(161,-131,o),
(134,-91,o),
(106,-90,qs),
(83,-89,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
14 11 10 3 2 73 4 1 2 1 2 134 0 0 0 38 77 3 1 1 1 39 1 78 5 4 0 0 4 19 5 19 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,685,o),
(276,663,qs),
(276,639,o),
(306,610,o),
(330,612,q),
(325,583,o),
(296,541,o),
(274,526,q),
(290,500,l),
(333,519,o),
(382,602,o),
(383,647,qs),
(383,676,o),
(357,713,o),
(330,714,qs),
(305,714,o)
);
},
{
closed = 1;
nodes = (
(557,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l),
(557,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 8 values pushed */
10 7 6 3 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 8 values pushed */
10 7 6 3 2 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
1 4 2 0 0 46 77 0 2 2 3 95 5 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 1 0 0 46 77 0 1 1 38 77 0 2 2 3 95 5 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
16 16 1 0 16 21 16 21 20 19 18 17 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,685,o),
(186,663,qs),
(186,639,o),
(216,610,o),
(240,612,q),
(235,583,o),
(206,541,o),
(184,526,q),
(200,500,l),
(243,519,o),
(292,602,o),
(293,647,qs),
(293,676,o),
(267,713,o),
(240,714,qs),
(215,714,o)
);
},
{
closed = 1;
nodes = (
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 8 values pushed */
10 7 6 3 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 8 values pushed */
10 7 6 3 2 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
1 3 2 0 0 46 77 4 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
3 1 0 0 46 77 0 1 1 38 77 4 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
16 16 1 0 16 19 16 19 18 17 0 15 1 15 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,60,l),
(157,60,l),
(157,707,l),
(92,707,l),
(92,0,l),
(557,0,l)
);
},
{
closed = 1;
nodes = (
(308,401,o),
(308,379,qs),
(308,356,o),
(334,330,o),
(357,330,qs),
(380,330,o),
(407,356,o),
(407,379,qs),
(407,402,o),
(380,427,o),
(358,427,qs),
(335,427,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
6 1 3 0 4 1 3 4 105 0 0 0 38 77 0 1 1 2 95 5 1 2 2 39 2 78 7 6 0 0 13 11 6 17 7 17 0 5 0 5 17 17 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(199,373,o),
(199,351,qs),
(199,328,o),
(225,302,o),
(248,302,qs),
(271,302,o),
(298,328,o),
(298,351,qs),
(298,374,o),
(271,399,o),
(249,399,qs),
(226,399,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 2 0 3 1 2 3 105 0 0 0 38 77 4 1 1 1 39 1 78 5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 291;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,641,l),
(557,0,l),
(656,0,l),
(656,707,l),
(591,707,l),
(591,64,l),
(193,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
},
{
closed = 1;
nodes = (
(381,786,l),
(480,927,l),
(412,927,l),
(326,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
8 3 2 2 0 1 76 0 4 5 4 133 0 5 0 5 133 1 1 0 0 38 77 6 3 2 2 2 39 2 78 0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(186,416,qs),
(209,443,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(373,533,o),
(330,533,qs),
(298,533,o),
(243,522,o),
(217,509,qs),
(194,498,o),
(152,461,o),
(138,437,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(299,628,l),
(398,769,l),
(330,769,l),
(244,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 6 5 133 0 6 0 6 133 0 3 3 0 97 1 1 0 0 41 77 7 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 6 5 133 0 6 1 6 133 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 7 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 35 34 33 32 0 31 0 31 38 22 38 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,641,l),
(557,0,l),
(656,0,l),
(656,707,l),
(591,707,l),
(591,64,l),
(193,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
},
{
closed = 1;
nodes = (
(239,927,l),
(362,786,l),
(403,786,l),
(526,927,l),
(461,927,l),
(383,834,l),
(303,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
8 3 2 2 0 1 76 6 1 4 5 4 133 0 5 0 5 133 1 1 0 0 38 77 7 3 2 2 2 39 2 78 0 0 16 15 14 13 12 11 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(186,416,qs),
(209,443,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(373,533,o),
(330,533,qs),
(298,533,o),
(243,522,o),
(217,509,qs),
(194,498,o),
(152,461,o),
(138,437,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(163,769,l),
(286,628,l),
(327,628,l),
(450,769,l),
(385,769,l),
(307,676,l),
(227,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 5 6 5 133 0 6 0 6 133 0 3 3 0 97 1 1 0 0 41 77 8 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
7 1 5 6 5 133 0 6 1 6 133 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 38 37 36 35 34 33 0 31 0 31 38 22 38 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(591,707,l),
(591,64,l),
(193,707,l),
(92,707,l),
(92,0,l),
(157,0,l),
(157,641,l),
(557,0,l),
(590,0,l),
(590,-45,o),
(580,-92,o),
(565,-107,qs),
(551,-122,o),
(504,-132,o),
(484,-132,qs),
(459,-132,l),
(459,-187,l),
(495,-187,ls),
(583,-187,o),
(619,-148,qs),
(632,-133,o),
(647,-98,o),
(655,-59,o),
(656,-19,o),
(656,0,qs),
(656,707,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 18 2 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 4 38 77 3 1 2 2 39 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 0 1 0 101 5 1 4 4 38 77 3 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 17 18 21 33 38 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(373,533,o),
(330,533,qs),
(298,533,o),
(243,522,o),
(217,509,qs),
(194,498,o),
(152,461,o),
(138,437,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l),
(138,265,ls),
(138,308,o),
(160,386,o),
(186,416,qs),
(209,443,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,ls),
(463,-45,o),
(453,-92,o),
(438,-107,qs),
(424,-122,o),
(377,-132,o),
(357,-132,qs),
(332,-132,l),
(332,-187,l),
(368,-187,ls),
(456,-187,o),
(492,-148,qs),
(505,-133,o),
(520,-98,o),
(528,-59,o),
(529,-19,o),
(529,0,qs),
(529,292,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 4 97 5 1 4 4 41 77 0 3 3 39 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 1 0 101 0 2 2 4 97 5 1 4 4 41 77 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 0 101 0 4 4 41 77 0 2 2 5 97 0 5 5 49 77 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 17 22 43 33 38 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,0,l),
(557,60,l),
(157,60,l),
(157,321,l),
(517,321,l),
(517,381,l),
(157,381,l),
(157,647,l),
(557,647,l),
(557,707,l),
(92,707,l),
(92,0,l)
);
},
{
closed = 1;
nodes = (
(276,854,o),
(249,870,o),
(232,898,o),
(229,920,q),
(169,920,l),
(172,885,o),
(199,838,o),
(241,810,o),
(296,798,o),
(328,798,qs),
(359,798,o),
(414,810,o),
(458,838,o),
(486,885,o),
(489,920,q),
(429,920,l),
(426,898,o),
(408,870,o),
(382,854,o),
(348,848,o),
(329,848,qs),
(310,848,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
9 1 7 6 7 133 10 1 6 0 8 0 6 8 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 13 12 29 28 24 22 18 17 12 33 13 33 17 17 17 17 17 16 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,297,o),
(504,402,o),
(450,483,o),
(363,533,o),
(300,533,qs),
(240,533,o),
(147,494,o),
(84,423,o),
(52,323,o),
(52,263,qs),
(52,204,o),
(82,105,o),
(144,34,o),
(237,-6,o),
(299,-6,qs),
(333,-6,o),
(401,8,o),
(459,39,o),
(504,89,o),
(515,124,q),
(446,124,l),
(437,103,o),
(405,75,o),
(366,58,o),
(323,50,o),
(302,50,qs),
(257,50,o),
(190,79,o),
(144,130,o),
(119,200,o),
(117,242,q),
(525,242,l)
);
},
{
closed = 1;
nodes = (
(120,332,o),
(144,397,o),
(188,447,o),
(251,477,o),
(292,477,qs),
(333,477,o),
(395,448,o),
(436,399,o),
(457,333,o),
(458,297,q),
(118,297,l)
);
},
{
closed = 1;
nodes = (
(237,674,o),
(210,690,o),
(193,718,o),
(190,740,q),
(130,740,l),
(133,705,o),
(160,658,o),
(202,630,o),
(257,618,o),
(289,618,qs),
(320,618,o),
(375,630,o),
(419,658,o),
(447,705,o),
(450,740,q),
(390,740,l),
(387,718,o),
(369,690,o),
(343,674,o),
(309,668,o),
(290,668,qs),
(271,668,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
10 1 8 7 8 133 0 1 4 0 4 1 0 128 13 1 7 0 9 3 7 9 105 12 1 6 11 1 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 50 2 78 44 43 32 32 0 0 60 59 55 53 49 48 43 64 44 64 32 42 32 42 38 36 0 31 0 31 40 36 20 36 14 8 26 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,642,o),
(523,614,o),
(566,570,o),
(578,539,q),
(651,539,l),
(636,586,o),
(581,653,o),
(508,695,o),
(421,715,o),
(374,715,qs),
(290,715,o),
(169,656,o),
(90,556,o),
(53,420,o),
(54,344,qs),
(55,268,o),
(95,139,o),
(175,45,o),
(295,-8,o),
(376,-8,qs),
(444,-8,o),
(554,36,o),
(631,117,o),
(673,228,o),
(673,296,qs),
(673,346,l),
(373,346,l),
(373,286,l),
(613,286,l),
(612,233,o),
(579,146,o),
(519,85,o),
(432,51,o),
(377,51,qs),
(310,51,o),
(214,99,o),
(152,180,o),
(122,288,o),
(121,349,qs),
(120,409,o),
(148,520,o),
(209,605,o),
(306,656,o),
(375,656,qs),
(406,656,o)
);
},
{
closed = 1;
nodes = (
(519,786,l),
(396,927,l),
(355,927,l),
(232,786,l),
(297,786,l),
(375,879,l),
(455,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 8 7 8 133 9 1 7 5 7 133 0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 10 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 1 0 51 50 49 48 47 46 40 39 35 33 25 23 18 17 16 15 11 9 0 44 1 44 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,495,o),
(350,533,o),
(295,533,qs),
(237,533,o),
(147,494,o),
(87,425,o),
(54,332,o),
(53,277,qs),
(51,221,o),
(76,118,o),
(131,40,o),
(222,-6,o),
(285,-6,qs),
(345,-6,o),
(442,36,o),
(475,84,q),
(475,18,ls),
(475,-27,o),
(460,-102,o),
(423,-158,o),
(358,-189,o),
(307,-189,qs),
(284,-189,o),
(237,-180,o),
(195,-161,o),
(162,-129,o),
(154,-105,q),
(86,-105,l),
(96,-143,o),
(137,-196,o),
(194,-230,o),
(264,-245,o),
(303,-245,qs),
(367,-245,o),
(458,-209,o),
(515,-142,o),
(541,-49,o),
(541,17,qs),
(541,527,l),
(479,527,l),
(475,452,l)
);
},
{
closed = 1;
nodes = (
(405,442,qs),
(446,411,o),
(477,314,o),
(477,265,qs),
(477,224,o),
(457,149,o),
(434,119,qs),
(411,89,o),
(340,50,o),
(296,50,qs),
(247,50,o),
(180,85,o),
(138,143,o),
(119,221,o),
(119,265,qs),
(119,307,o),
(139,383,o),
(181,442,o),
(247,477,o),
(294,477,qs),
(358,477,o)
);
},
{
closed = 1;
nodes = (
(444,628,l),
(321,769,l),
(280,769,l),
(157,628,l),
(222,628,l),
(300,721,l),
(380,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
40 24 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 9 8 9 133 10 1 8 0 8 133 0 2 4 3 4 2 3 128 11 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 77 0 3 3 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 9 8 9 133 10 1 8 0 8 133 0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 11 1 6 6 0 97 5 1 0 0 41 77 0 7 7 4 97 0 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 9 8 9 133 10 1 8 5 8 133 0 2 4 3 4 2 3 128 0 3 0 1 3 1 101 0 0 0 41 77 11 1 6 6 5 97 0 5 5 49 77 0 7 7 4 97 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
42 41 68 67 66 65 64 63 52 50 41 61 42 61 40 39 36 20 37 16 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,707,l),
(92,707,l),
(92,0,l),
(157,0,l),
(157,317,l),
(573,317,l),
(573,0,l),
(638,0,l),
(638,707,l),
(573,707,l),
(573,377,l),
(157,377,l)
);
},
{
closed = 1;
nodes = (
(505,786,l),
(382,927,l),
(341,927,l),
(218,786,l),
(283,786,l),
(361,879,l),
(441,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 7 6 7 133 8 1 6 0 6 133 9 1 5 0 2 1 5 2 103 4 1 0 0 38 77 3 1 1 1 39 1 78 0 0 18 17 16 15 14 13 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(185,416,qs),
(208,444,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(372,533,o),
(330,533,qs),
(300,533,o),
(241,522,o),
(216,510,qs),
(191,497,o),
(152,463,o),
(138,439,q),
(138,707,l),
(72,707,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(450,769,l),
(327,910,l),
(286,910,l),
(163,769,l),
(228,769,l),
(306,862,l),
(386,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
3 1 2 3 1 76 0 6 5 6 133 7 1 5 0 5 133 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 0 0 38 37 36 35 34 33 0 31 0 31 38 22 38 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
},
{
closed = 1;
nodes = (
(240,916,o),
(238,891,o),
(230,869,o),
(214,854,o),
(200,854,qs),
(185,854,o),
(158,878,o),
(128,906,o),
(91,930,o),
(67,930,qs),
(39,930,o),
(1,911,o),
(-21,878,o),
(-31,834,o),
(-30,809,q),
(26,809,l),
(26,819,o),
(28,844,o),
(37,866,o),
(52,881,o),
(66,881,qs),
(80,881,o),
(107,858,o),
(137,829,o),
(174,806,o),
(199,806,qs),
(227,806,o),
(264,826,o),
(287,859,o),
(297,903,o),
(297,927,q),
(240,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
8 7 2 5 0 3 6 5 3 105 0 6 4 1 2 1 6 2 105 0 1 1 38 77 0 0 0 39 0 78 4 4 4 35 4 35 35 36 20 35 37 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,527,l)
);
},
{
closed = 1;
nodes = (
(218,727,o),
(216,702,o),
(208,680,o),
(192,665,o),
(178,665,qs),
(163,665,o),
(136,689,o),
(106,717,o),
(69,741,o),
(45,741,qs),
(17,741,o),
(-21,722,o),
(-43,689,o),
(-53,645,o),
(-52,620,q),
(4,620,l),
(4,630,o),
(6,655,o),
(15,677,o),
(30,692,o),
(44,692,qs),
(58,692,o),
(85,669,o),
(115,640,o),
(152,617,o),
(177,617,qs),
(205,617,o),
(242,637,o),
(265,670,o),
(275,714,o),
(275,738,q),
(218,738,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 6 4 1 2 1 6 2 105 0 3 3 5 97 8 7 2 5 5 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
8 7 2 5 0 3 6 5 3 105 0 6 4 1 2 1 6 2 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
4 4 4 35 4 35 35 36 20 35 37 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,707,l),
(92,0,l),
(157,0,l),
(157,707,l)
);
},
{
closed = 1;
nodes = (
(71,861,o),
(44,877,o),
(27,905,o),
(24,927,q),
(-36,927,l),
(-33,892,o),
(-6,845,o),
(36,817,o),
(91,805,o),
(123,805,qs),
(154,805,o),
(209,817,o),
(253,845,o),
(281,892,o),
(284,927,q),
(224,927,l),
(221,905,o),
(203,877,o),
(177,861,o),
(143,855,o),
(124,855,qs),
(105,855,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 3 2 3 133 6 1 2 0 4 1 2 4 105 0 1 1 38 77 0 0 0 39 0 78 5 4 21 20 16 14 10 9 4 25 5 25 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 249;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,527,l),
(72,0,l),
(138,0,l),
(138,527,l)
);
},
{
closed = 1;
nodes = (
(52,674,o),
(25,690,o),
(8,718,o),
(5,740,q),
(-55,740,l),
(-52,705,o),
(-25,658,o),
(17,630,o),
(72,618,o),
(104,618,qs),
(135,618,o),
(190,630,o),
(234,658,o),
(262,705,o),
(265,740,q),
(205,740,l),
(202,718,o),
(184,690,o),
(158,674,o),
(124,668,o),
(105,668,qs),
(86,668,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 3 2 3 133 6 1 2 0 4 1 2 4 105 0 1 1 41 77 0 0 0 39 0 78 5 4 21 20 16 14 10 9 4 25 5 25 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,80,o),
(169,-8,o),
(260,-8,qs),
(322,-8,o),
(406,34,o),
(452,103,o),
(470,192,o),
(470,239,qs),
(470,707,l),
(405,707,l),
(405,241,ls),
(405,203,o),
(395,134,o),
(365,82,o),
(310,51,o),
(265,51,qs),
(200,51,o),
(123,113,o),
(115,179,q),
(47,179,l)
);
},
{
closed = 1;
nodes = (
(576,786,l),
(453,927,l),
(412,927,l),
(289,786,l),
(354,786,l),
(432,879,l),
(512,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 5 4 5 133 6 1 4 1 4 133 7 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 0 0 26 25 24 23 22 21 0 19 0 19 37 21 34 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,527,l),
(105,2,ls),
(105,-45,o),
(95,-92,o),
(80,-107,qs),
(66,-122,o),
(19,-132,o),
(-1,-132,qs),
(-26,-132,l),
(-26,-187,l),
(10,-187,ls),
(98,-187,o),
(134,-148,qs),
(147,-133,o),
(162,-98,o),
(170,-59,o),
(171,-19,o),
(171,0,qs),
(171,527,l)
);
},
{
closed = 1;
nodes = (
(281,628,l),
(158,769,l),
(117,769,l),
(-6,628,l),
(59,628,l),
(137,721,l),
(217,628,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 3 4 133 5 1 3 2 3 133 0 2 2 41 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 3 4 133 5 1 3 2 3 133 0 1 0 0 1 0 101 0 2 2 41 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 18 22 33 38 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,236,l),
(258,236,l),
(428,0,l),
(504,0,l),
(310,274,l),
(487,527,l),
(414,527,l),
(251,291,l),
(138,291,l),
(138,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
},
{
closed = 1;
nodes = (
(547,832,l),
(547,887,l),
(228,887,l),
(228,832,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 4 0 5 1 4 5 103 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
},
{
closed = 1;
nodes = (
(462,652,l),
(462,707,l),
(143,707,l),
(143,652,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 5 4 95 0 4 4 38 77 0 1 1 2 97 7 1 2 2 49 77 6 1 0 0 3 97 0 3 3 50 3 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
},
{
closed = 1;
nodes = (
(333,861,o),
(306,877,o),
(289,905,o),
(286,927,q),
(226,927,l),
(229,892,o),
(256,845,o),
(298,817,o),
(353,805,o),
(385,805,qs),
(416,805,o),
(471,817,o),
(515,845,o),
(543,892,o),
(546,927,q),
(486,927,l),
(483,905,o),
(465,877,o),
(439,861,o),
(405,855,o),
(386,855,qs),
(367,855,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
7 1 5 4 5 133 10 1 4 0 6 1 4 6 105 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 41 40 21 20 1 0 57 56 52 50 46 45 40 61 41 61 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
},
{
closed = 1;
nodes = (
(250,674,o),
(223,690,o),
(206,718,o),
(203,740,q),
(143,740,l),
(146,705,o),
(173,658,o),
(215,630,o),
(270,618,o),
(302,618,qs),
(333,618,o),
(388,630,o),
(432,658,o),
(460,705,o),
(463,740,q),
(403,740,l),
(400,718,o),
(382,690,o),
(356,674,o),
(322,668,o),
(303,668,qs),
(284,668,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
7 1 5 4 5 133 10 1 4 0 6 2 4 6 105 0 1 1 2 97 9 1 2 2 49 77 8 1 0 0 3 97 0 3 3 50 3 78 41 40 21 20 1 0 57 56 52 50 46 45 40 61 41 61 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(589,47,o),
(672,143,o),
(714,275,o),
(714,353,qs),
(714,431,o),
(672,563,o),
(589,660,o),
(466,715,o),
(384,715,qs),
(302,715,o),
(178,660,o),
(95,564,o),
(53,431,o),
(53,353,qs),
(53,275,o),
(95,143,o),
(178,46,o),
(302,-8,o),
(384,-8,qs),
(466,-8,o)
);
},
{
closed = 1;
nodes = (
(550,608,o),
(615,525,o),
(647,415,o),
(647,353,qs),
(647,290,o),
(615,180,o),
(551,98,o),
(451,51,o),
(384,51,qs),
(317,51,o),
(218,99,o),
(152,181,o),
(119,291,o),
(119,353,qs),
(119,415,o),
(151,525,o),
(217,608,o),
(317,656,o),
(384,656,qs),
(451,656,o)
);
},
{
closed = 1;
nodes = (
(328,786,l),
(427,927,l),
(359,927,l),
(273,786,l)
);
},
{
closed = 1;
nodes = (
(464,786,l),
(563,927,l),
(495,927,l),
(409,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 4 7 1 5 1 4 5 103 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 21 20 1 0 47 46 45 44 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,83,o),
(138,141,o),
(117,219,o),
(117,263,qs),
(117,307,o),
(138,385,o),
(183,443,o),
(253,477,o),
(301,477,qs),
(349,477,o),
(419,443,o),
(464,385,o),
(485,307,o),
(485,263,qs),
(485,219,o),
(464,141,o),
(419,83,o),
(349,50,o),
(301,50,qs),
(253,50,o)
);
},
{
closed = 1;
nodes = (
(146,493,o),
(83,421,o),
(52,322,o),
(52,263,qs),
(52,204,o),
(83,105,o),
(146,34,o),
(239,-6,o),
(301,-6,qs),
(363,-6,o),
(456,34,o),
(519,105,o),
(551,204,o),
(551,263,qs),
(551,322,o),
(519,421,o),
(456,493,o),
(363,533,o),
(301,533,qs),
(239,533,o)
);
},
{
closed = 1;
nodes = (
(246,628,l),
(345,769,l),
(277,769,l),
(191,628,l)
);
},
{
closed = 1;
nodes = (
(382,628,l),
(481,769,l),
(413,769,l),
(327,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 4 7 1 5 2 4 5 103 0 1 1 2 97 9 1 2 2 49 77 8 1 0 0 3 97 0 3 3 50 3 78 21 20 1 0 47 46 45 44 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,0,l),
(593,0,l),
(439,287,l),
(518,307,o),
(602,409,o),
(602,490,qs),
(602,550,o),
(566,633,o),
(500,684,o),
(408,707,o),
(353,707,qs),
(92,707,l),
(92,0,l),
(157,0,l),
(157,276,l),
(372,276,l)
);
},
{
closed = 1;
nodes = (
(157,647,l),
(344,647,ls),
(385,647,o),
(455,633,o),
(506,599,o),
(535,539,o),
(535,493,qs),
(535,444,o),
(501,383,o),
(445,348,o),
(370,336,o),
(330,336,qs),
(157,336,l)
);
},
{
closed = 1;
nodes = (
(321,786,l),
(420,927,l),
(352,927,l),
(266,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
12 1 3 4 1 76 0 6 7 6 133 0 7 1 7 133 9 1 4 8 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 17 16 0 0 32 31 30 29 27 25 16 28 17 28 0 15 0 15 24 33 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,258,ls),
(138,303,o),
(157,385,o),
(189,418,qs),
(212,443,o),
(282,472,o),
(330,472,qs),
(348,472,l),
(348,532,l),
(315,533,o),
(255,526,o),
(201,504,o),
(156,466,o),
(138,436,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(214,628,l),
(313,769,l),
(245,769,l),
(159,628,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 5 4 133 0 5 0 5 133 0 2 2 0 97 1 1 0 0 41 77 6 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 5 4 133 0 5 1 5 133 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 6 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 21 20 19 18 0 17 0 17 33 21 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,0,l),
(593,0,l),
(439,287,l),
(518,307,o),
(602,409,o),
(602,490,qs),
(602,550,o),
(566,633,o),
(500,684,o),
(408,707,o),
(353,707,qs),
(92,707,l),
(92,0,l),
(157,0,l),
(157,276,l),
(372,276,l)
);
},
{
closed = 1;
nodes = (
(157,647,l),
(344,647,ls),
(385,647,o),
(455,633,o),
(506,599,o),
(535,539,o),
(535,493,qs),
(535,444,o),
(501,383,o),
(445,348,o),
(370,336,o),
(330,336,qs),
(157,336,l)
);
},
{
closed = 1;
nodes = (
(183,927,l),
(306,786,l),
(347,786,l),
(470,927,l),
(405,927,l),
(327,834,l),
(247,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
12 1 3 4 1 76 8 1 6 7 6 133 0 7 1 7 133 10 1 4 9 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 17 16 0 0 35 34 33 32 31 30 27 25 16 28 17 28 0 15 0 15 24 33 17 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,258,ls),
(138,303,o),
(157,385,o),
(189,418,qs),
(212,443,o),
(282,472,o),
(330,472,qs),
(348,472,l),
(348,532,l),
(315,533,o),
(255,526,o),
(201,504,o),
(156,466,o),
(138,436,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(73,769,l),
(196,628,l),
(237,628,l),
(360,769,l),
(295,769,l),
(217,676,l),
(137,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 4 5 4 133 0 5 0 5 133 0 2 2 0 97 1 1 0 0 41 77 7 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 5 4 133 0 5 1 5 133 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 7 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 24 23 22 21 20 19 0 17 0 17 33 21 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,645,o),
(464,619,o),
(497,576,o),
(503,543,q),
(569,543,l),
(563,590,o),
(519,655,o),
(454,696,o),
(374,715,o),
(331,715,qs),
(284,715,o),
(196,695,o),
(127,649,o),
(86,576,o),
(86,522,qs),
(86,448,o),
(171,362,o),
(239,344,qs),
(279,333,o),
(356,317,o),
(396,307,qs),
(422,301,o),
(468,282,o),
(502,252,o),
(522,211,o),
(522,182,qs),
(522,146,o),
(491,96,o),
(441,65,o),
(379,51,o),
(348,51,qs),
(315,51,o),
(250,63,o),
(191,90,o),
(145,135,o),
(132,168,q),
(62,168,l),
(75,119,o),
(131,52,o),
(206,10,o),
(294,-8,o),
(341,-8,qs),
(392,-8,o),
(482,14,o),
(549,63,o),
(589,142,o),
(589,198,qs),
(589,233,o),
(566,286,o),
(526,325,o),
(472,351,o),
(441,360,qs),
(400,371,o),
(324,388,o),
(284,399,qs),
(258,406,o),
(211,426,o),
(175,457,o),
(154,500,o),
(154,530,qs),
(154,567,o),
(186,616,o),
(237,645,o),
(300,656,o),
(331,656,qs),
(361,656,o)
);
},
{
closed = 1;
nodes = (
(346,786,l),
(445,927,l),
(377,927,l),
(291,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
0 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 69 68 67 66 61 60 56 54 35 33 29 28 24 22 0 65 1 65 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,469,o),
(352,453,o),
(380,426,o),
(387,408,q),
(448,408,l),
(442,442,o),
(405,490,o),
(353,520,o),
(290,533,o),
(259,533,qs),
(224,533,o),
(152,519,o),
(95,486,o),
(59,430,o),
(59,387,qs),
(59,327,o),
(131,260,o),
(186,247,qs),
(218,239,o),
(278,228,o),
(309,221,qs),
(326,217,o),
(359,206,o),
(385,188,o),
(401,160,o),
(401,140,qs),
(401,111,o),
(375,75,o),
(335,56,o),
(286,50,o),
(263,50,qs),
(240,50,o),
(195,58,o),
(155,75,o),
(122,104,o),
(111,127,q),
(44,127,l),
(52,89,o),
(96,39,o),
(156,8,o),
(226,-6,o),
(260,-6,qs),
(297,-6,o),
(371,7,o),
(429,42,o),
(466,100,o),
(466,144,qs),
(466,202,o),
(399,264,o),
(346,275,qs),
(314,283,o),
(252,295,o),
(220,302,qs),
(202,306,o),
(168,318,o),
(141,338,o),
(124,368,o),
(124,389,qs),
(124,416,o),
(149,450,o),
(187,469,o),
(234,477,o),
(257,477,qs),
(276,477,o)
);
},
{
closed = 1;
nodes = (
(266,628,l),
(365,769,l),
(297,769,l),
(211,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
0 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 67 66 65 64 59 58 54 52 33 31 27 26 22 20 0 63 1 63 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,645,o),
(464,619,o),
(497,576,o),
(503,543,q),
(569,543,l),
(563,590,o),
(519,655,o),
(454,696,o),
(374,715,o),
(331,715,qs),
(284,715,o),
(196,695,o),
(127,649,o),
(86,576,o),
(86,522,qs),
(86,448,o),
(171,362,o),
(239,344,qs),
(279,333,o),
(356,317,o),
(396,307,qs),
(422,301,o),
(468,282,o),
(502,252,o),
(522,211,o),
(522,182,qs),
(522,146,o),
(491,96,o),
(441,65,o),
(379,51,o),
(348,51,qs),
(315,51,o),
(250,63,o),
(191,90,o),
(145,135,o),
(132,168,q),
(62,168,l),
(75,119,o),
(131,52,o),
(206,10,o),
(294,-8,o),
(341,-8,qs),
(392,-8,o),
(482,14,o),
(549,63,o),
(589,142,o),
(589,198,qs),
(589,233,o),
(566,286,o),
(526,325,o),
(472,351,o),
(441,360,qs),
(400,371,o),
(324,388,o),
(284,399,qs),
(258,406,o),
(211,426,o),
(175,457,o),
(154,500,o),
(154,530,qs),
(154,567,o),
(186,616,o),
(237,645,o),
(300,656,o),
(331,656,qs),
(361,656,o)
);
},
{
closed = 1;
nodes = (
(480,786,l),
(357,927,l),
(316,927,l),
(193,786,l),
(258,786,l),
(336,879,l),
(416,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 7 6 7 133 8 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 72 71 70 69 68 67 61 60 56 54 35 33 29 28 24 22 0 65 1 65 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,469,o),
(352,453,o),
(380,426,o),
(387,408,q),
(448,408,l),
(442,442,o),
(405,490,o),
(353,520,o),
(290,533,o),
(259,533,qs),
(224,533,o),
(152,519,o),
(95,486,o),
(59,430,o),
(59,387,qs),
(59,327,o),
(131,260,o),
(186,247,qs),
(218,239,o),
(278,228,o),
(309,221,qs),
(326,217,o),
(359,206,o),
(385,188,o),
(401,160,o),
(401,140,qs),
(401,111,o),
(375,75,o),
(335,56,o),
(286,50,o),
(263,50,qs),
(240,50,o),
(195,58,o),
(155,75,o),
(122,104,o),
(111,127,q),
(44,127,l),
(52,89,o),
(96,39,o),
(156,8,o),
(226,-6,o),
(260,-6,qs),
(297,-6,o),
(371,7,o),
(429,42,o),
(466,100,o),
(466,144,qs),
(466,202,o),
(399,264,o),
(346,275,qs),
(314,283,o),
(252,295,o),
(220,302,qs),
(202,306,o),
(168,318,o),
(141,338,o),
(124,368,o),
(124,389,qs),
(124,416,o),
(149,450,o),
(187,469,o),
(234,477,o),
(257,477,qs),
(276,477,o)
);
},
{
closed = 1;
nodes = (
(403,628,l),
(280,769,l),
(239,769,l),
(116,628,l),
(181,628,l),
(259,721,l),
(339,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 7 6 7 133 8 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 70 69 68 67 66 65 59 58 54 52 33 31 27 26 22 20 0 63 1 63 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scaron;
kernLeft = O;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,645,o),
(464,619,o),
(497,576,o),
(503,543,q),
(569,543,l),
(563,590,o),
(519,655,o),
(454,696,o),
(374,715,o),
(331,715,qs),
(284,715,o),
(196,695,o),
(127,649,o),
(86,576,o),
(86,522,qs),
(86,448,o),
(171,362,o),
(239,344,qs),
(279,333,o),
(356,317,o),
(396,307,qs),
(422,301,o),
(468,282,o),
(502,252,o),
(522,211,o),
(522,182,qs),
(522,146,o),
(491,96,o),
(441,65,o),
(379,51,o),
(348,51,qs),
(315,51,o),
(250,63,o),
(191,90,o),
(145,135,o),
(132,168,q),
(62,168,l),
(75,119,o),
(131,52,o),
(206,10,o),
(294,-8,o),
(341,-8,qs),
(392,-8,o),
(482,14,o),
(549,63,o),
(589,142,o),
(589,198,qs),
(589,233,o),
(566,286,o),
(526,325,o),
(472,351,o),
(441,360,qs),
(400,371,o),
(324,388,o),
(284,399,qs),
(258,406,o),
(211,426,o),
(175,457,o),
(154,500,o),
(154,530,qs),
(154,567,o),
(186,616,o),
(237,645,o),
(300,656,o),
(331,656,qs),
(361,656,o)
);
},
{
closed = 1;
nodes = (
(191,927,l),
(314,786,l),
(355,786,l),
(478,927,l),
(413,927,l),
(335,834,l),
(255,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
8 1 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 72 71 70 69 68 67 61 60 56 54 35 33 29 28 24 22 0 65 1 65 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,469,o),
(352,453,o),
(380,426,o),
(387,408,q),
(448,408,l),
(442,442,o),
(405,490,o),
(353,520,o),
(290,533,o),
(259,533,qs),
(224,533,o),
(152,519,o),
(95,486,o),
(59,430,o),
(59,387,qs),
(59,327,o),
(131,260,o),
(186,247,qs),
(218,239,o),
(278,228,o),
(309,221,qs),
(326,217,o),
(359,206,o),
(385,188,o),
(401,160,o),
(401,140,qs),
(401,111,o),
(375,75,o),
(335,56,o),
(286,50,o),
(263,50,qs),
(240,50,o),
(195,58,o),
(155,75,o),
(122,104,o),
(111,127,q),
(44,127,l),
(52,89,o),
(96,39,o),
(156,8,o),
(226,-6,o),
(260,-6,qs),
(297,-6,o),
(371,7,o),
(429,42,o),
(466,100,o),
(466,144,qs),
(466,202,o),
(399,264,o),
(346,275,qs),
(314,283,o),
(252,295,o),
(220,302,qs),
(202,306,o),
(168,318,o),
(141,338,o),
(124,368,o),
(124,389,qs),
(124,416,o),
(149,450,o),
(187,469,o),
(234,477,o),
(257,477,qs),
(276,477,o)
);
},
{
closed = 1;
nodes = (
(118,769,l),
(241,628,l),
(282,628,l),
(405,769,l),
(340,769,l),
(262,676,l),
(182,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
0 7 6 4 6 7 4 128 0 2 5 3 5 2 3 128 8 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 50 1 78 1 0 70 69 68 67 66 65 59 58 54 52 33 31 27 26 22 20 0 63 1 63 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcaron;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,707,l),
(19,647,l),
(253,647,l),
(253,0,l),
(318,0,l),
(318,647,l),
(552,647,l),
(552,707,l)
);
},
{
closed = 1;
nodes = (
(144,927,l),
(267,786,l),
(308,786,l),
(431,927,l),
(366,927,l),
(288,834,l),
(208,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
6 1 4 5 4 133 0 5 3 5 133 2 1 0 0 3 95 0 3 3 38 77 0 1 1 39 1 78 17 17 18 17 17 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(473,916,o),
(471,891,o),
(463,869,o),
(447,854,o),
(433,854,qs),
(418,854,o),
(391,878,o),
(361,906,o),
(324,930,o),
(300,930,qs),
(272,930,o),
(234,911,o),
(212,878,o),
(202,834,o),
(203,809,q),
(259,809,l),
(259,819,o),
(261,844,o),
(270,866,o),
(285,881,o),
(299,881,qs),
(313,881,o),
(340,858,o),
(370,829,o),
(407,806,o),
(432,806,qs),
(460,806,o),
(497,826,o),
(520,859,o),
(530,903,o),
(530,927,q),
(473,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
11 9 2 7 0 5 8 7 5 105 0 8 6 1 4 1 8 4 105 10 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 57 26 57 53 51 48 46 42 41 37 35 32 30 0 25 0 25 37 21 37 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(401,729,o),
(399,704,o),
(391,682,o),
(375,667,o),
(361,667,qs),
(346,667,o),
(319,691,o),
(289,719,o),
(252,743,o),
(228,743,qs),
(200,743,o),
(162,724,o),
(140,691,o),
(130,647,o),
(131,622,q),
(187,622,l),
(187,632,o),
(189,657,o),
(198,679,o),
(213,694,o),
(227,694,qs),
(241,694,o),
(268,671,o),
(298,642,o),
(335,619,o),
(360,619,qs),
(388,619,o),
(425,639,o),
(448,672,o),
(458,716,o),
(458,740,q),
(401,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
11 9 2 7 0 5 8 7 5 105 0 8 6 1 4 1 8 4 105 3 1 1 1 41 77 10 1 0 0 2 97 0 2 2 50 2 78 22 22 1 0 22 53 22 53 49 47 44 42 38 37 33 31 28 26 16 15 12 10 7 6 0 21 1 21 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(519,832,l),
(519,887,l),
(200,887,l),
(200,832,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 4 0 5 1 4 5 103 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 29 28 27 26 0 25 0 25 37 21 37 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(452,652,l),
(452,707,l),
(133,707,l),
(133,652,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 5 4 95 0 4 4 38 77 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 50 2 78 1 0 25 24 23 22 16 15 12 10 7 6 0 21 1 21 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(309,861,o),
(282,877,o),
(265,905,o),
(262,927,q),
(202,927,l),
(205,892,o),
(232,845,o),
(274,817,o),
(329,805,o),
(361,805,qs),
(392,805,o),
(447,817,o),
(491,845,o),
(519,892,o),
(522,927,q),
(462,927,l),
(459,905,o),
(441,877,o),
(415,861,o),
(381,855,o),
(362,855,qs),
(343,855,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 1 5 4 5 133 9 1 4 0 6 1 4 6 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 27 26 0 0 43 42 38 36 32 31 26 47 27 47 0 25 0 25 37 21 37 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(236,674,o),
(209,690,o),
(192,718,o),
(189,740,q),
(129,740,l),
(132,705,o),
(159,658,o),
(201,630,o),
(256,618,o),
(288,618,qs),
(319,618,o),
(374,630,o),
(418,658,o),
(446,705,o),
(449,740,q),
(389,740,l),
(386,718,o),
(368,690,o),
(342,674,o),
(308,668,o),
(289,668,qs),
(270,668,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
7 1 5 4 5 133 9 1 4 0 6 1 4 6 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 23 22 1 0 39 38 34 32 28 27 22 43 23 43 16 15 12 10 7 6 0 21 1 21 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(311,832,o),
(311,855,qs),
(311,878,o),
(337,907,o),
(360,907,qs),
(384,907,o),
(410,878,o),
(410,855,qs),
(410,832,o),
(384,804,o),
(360,804,qs),
(337,804,o)
);
},
{
closed = 1;
nodes = (
(267,896,o),
(267,854,qs),
(267,812,o),
(318,764,o),
(360,764,qs),
(402,764,o),
(455,812,o),
(455,854,qs),
(455,896,o),
(404,949,o),
(361,949,qs),
(319,949,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 4 0 7 1 4 7 105 0 5 5 6 97 10 1 6 6 44 77 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
10 1 6 0 5 4 6 5 105 9 1 4 0 7 1 4 7 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
39 38 27 26 0 0 45 43 38 49 39 49 33 31 26 37 27 37 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(239,674,o),
(239,697,qs),
(239,720,o),
(265,749,o),
(288,749,qs),
(312,749,o),
(338,720,o),
(338,697,qs),
(338,674,o),
(312,646,o),
(288,646,qs),
(265,646,o)
);
},
{
closed = 1;
nodes = (
(195,738,o),
(195,696,qs),
(195,654,o),
(246,606,o),
(288,606,qs),
(330,606,o),
(383,654,o),
(383,696,qs),
(383,738,o),
(332,791,o),
(289,791,qs),
(247,791,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
10 1 6 0 5 4 6 5 105 9 1 4 0 7 1 4 7 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 35 34 23 22 1 0 41 39 34 45 35 45 29 27 22 33 23 33 16 15 12 10 7 6 0 21 1 21 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(289,-8,o),
(361,-8,qs),
(433,-8,o),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l)
);
},
{
closed = 1;
nodes = (
(309,786,l),
(408,927,l),
(340,927,l),
(254,786,l)
);
},
{
closed = 1;
nodes = (
(445,786,l),
(544,927,l),
(476,927,l),
(390,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
6 1 4 7 1 5 1 4 5 103 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 33 32 31 30 29 28 27 26 0 25 0 25 37 21 37 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(175,-6,o),
(288,-6,qs),
(404,-6,o),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o)
);
},
{
closed = 1;
nodes = (
(233,628,l),
(332,769,l),
(264,769,l),
(178,628,l)
);
},
{
closed = 1;
nodes = (
(369,628,l),
(468,769,l),
(400,769,l),
(314,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
6 1 4 7 1 5 1 4 5 103 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 50 2 78 1 0 29 28 27 26 25 24 23 22 16 15 12 10 7 6 0 21 1 21 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,-168,o),
(421,-167,qs),
(390,-167,o),
(350,-133,o),
(350,-101,qs),
(350,-69,o),
(372,-43,qs),
(391,-20,o),
(414,-4,q),
(453,1,o),
(485,15,qs),
(537,38,o),
(604,120,o),
(635,233,o),
(635,301,qs),
(635,707,l),
(570,707,l),
(570,305,ls),
(570,252,o),
(549,160,o),
(500,91,o),
(420,51,o),
(362,51,qs),
(304,51,o),
(224,90,o),
(174,159,o),
(152,252,o),
(152,305,qs),
(152,707,l),
(87,707,l),
(87,301,ls),
(87,233,o),
(118,120,o),
(185,38,o),
(237,15,qs),
(284,-6,o),
(349,-8,q),
(331,-20,o),
(317,-37,qs),
(291,-68,o),
(291,-110,qs),
(291,-137,o),
(310,-177,o),
(342,-202,o),
(386,-215,o),
(411,-215,qs),
(428,-215,o),
(459,-209,o),
(475,-201,q),
(464,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
49 1 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
4 1 2 2 38 77 0 3 3 1 97 0 1 1 47 77 0 5 5 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 0 0 5 0 101 4 1 2 2 38 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
45 21 37 22 24 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,-168,o),
(342,-167,qs),
(311,-167,o),
(271,-133,o),
(271,-101,qs),
(271,-69,o),
(294,-41,qs),
(313,-19,o),
(337,-3,q),
(416,8,o),
(456,55,qs),
(508,117,o),
(508,229,qs),
(508,527,l),
(442,527,l),
(442,231,ls),
(442,191,o),
(426,125,o),
(390,77,o),
(331,50,o),
(288,50,qs),
(246,50,o),
(188,78,o),
(152,127,o),
(136,193,o),
(136,231,qs),
(136,527,l),
(70,527,l),
(70,229,ls),
(70,117,o),
(122,55,qs),
(171,-2,o),
(274,-6,q),
(254,-18,o),
(238,-37,qs),
(212,-68,o),
(212,-110,qs),
(212,-137,o),
(231,-177,o),
(263,-202,o),
(307,-215,o),
(332,-215,qs),
(349,-215,o),
(380,-209,o),
(396,-201,q),
(385,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
45 1 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
4 1 2 2 41 77 0 3 3 1 97 0 1 1 50 77 0 5 5 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 5 0 0 5 0 101 4 1 2 2 41 77 0 3 3 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
43 21 37 20 24 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,648,l),
(641,0,l),
(742,0,l),
(934,707,l),
(860,707,l),
(692,60,l),
(530,707,l),
(425,707,l),
(262,60,l),
(94,707,l),
(19,707,l),
(211,0,l),
(313,0,l)
);
},
{
closed = 1;
nodes = (
(620,786,l),
(497,927,l),
(456,927,l),
(333,786,l),
(398,786,l),
(476,879,l),
(556,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
11 6 3 3 3 0 1 76 0 6 5 6 133 7 1 5 0 5 133 2 1 2 0 0 38 77 8 4 2 3 3 39 3 78 0 0 19 18 17 16 15 14 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 953;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,527,l),
(226,55,l),
(92,527,l),
(17,527,l),
(179,0,l),
(273,0,l),
(411,474,l),
(549,0,l),
(642,0,l),
(802,527,l),
(727,527,l),
(596,55,l),
(462,527,l)
);
},
{
closed = 1;
nodes = (
(553,628,l),
(430,769,l),
(389,769,l),
(266,628,l),
(331,628,l),
(409,721,l),
(489,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
10 5 2 1 0 1 76 0 6 5 6 133 7 1 5 0 5 133 4 3 2 0 0 41 77 2 1 1 1 39 1 78 17 17 18 18 17 18 17 17 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,707,l),
(19,707,l),
(270,267,l),
(270,0,l),
(335,0,l),
(335,267,l),
(584,707,l),
(509,707,l),
(304,334,l)
);
},
{
closed = 1;
nodes = (
(448,786,l),
(325,927,l),
(284,927,l),
(161,786,l),
(226,786,l),
(304,879,l),
(384,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
8 5 2 3 1 0 1 76 0 4 3 4 133 5 1 3 0 3 133 2 1 0 0 38 77 0 1 1 39 1 78 17 17 19 18 18 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,274,ls),
(466,238,o),
(455,170,o),
(441,141,qs),
(421,100,o),
(348,51,o),
(291,50,qs),
(245,49,o),
(184,80,o),
(167,106,qs),
(147,136,o),
(138,222,o),
(138,267,qs),
(138,527,l),
(72,527,l),
(72,242,ls),
(72,185,o),
(93,85,o),
(122,53,qs),
(145,26,o),
(222,-8,o),
(276,-8,qs),
(303,-8,o),
(358,1,o),
(408,22,o),
(451,56,o),
(466,80,q),
(466,1,ls),
(466,-42,o),
(449,-114,o),
(428,-138,qs),
(407,-162,o),
(343,-188,o),
(297,-188,qs),
(249,-188,o),
(158,-155,o),
(118,-125,q),
(89,-179,l),
(131,-214,o),
(243,-246,o),
(297,-246,qs),
(345,-246,o),
(441,-220,o),
(475,-183,qs),
(506,-149,o),
(532,-62,o),
(532,0,qs),
(532,527,l),
(466,527,l)
);
},
{
closed = 1;
nodes = (
(443,628,l),
(320,769,l),
(279,769,l),
(156,628,l),
(221,628,l),
(299,721,l),
(379,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
21 1 4 3 11 10 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 7 6 7 133 8 1 6 3 6 133 9 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 7 6 7 133 8 1 6 3 6 133 0 1 0 0 1 0 101 9 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 55 54 53 52 51 50 0 48 0 48 38 22 42 37 38 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,707,l),
(19,707,l),
(270,267,l),
(270,0,l),
(335,0,l),
(335,267,l),
(584,707,l),
(509,707,l),
(304,334,l)
);
},
{
closed = 1;
nodes = (
(143,869,o),
(143,849,qs),
(143,829,o),
(172,801,o),
(192,801,qs),
(212,801,o),
(242,828,o),
(242,849,qs),
(242,870,o),
(212,897,o),
(192,897,qs),
(172,897,o)
);
},
{
closed = 1;
nodes = (
(366,869,o),
(366,849,qs),
(366,829,o),
(394,801,o),
(414,801,qs),
(434,801,o),
(464,828,o),
(464,849,qs),
(464,870,o),
(434,897,o),
(414,897,qs),
(394,897,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 5 2 3 1 0 1 76 8 5 7 3 3 6 1 4 0 3 4 105 2 1 0 0 38 77 0 1 1 39 1 78 22 21 10 9 28 26 21 32 22 32 16 14 9 20 10 20 18 18 16 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,57,l),
(49,0,l),
(545,0,l),
(545,60,l),
(127,60,l),
(550,651,l),
(550,707,l),
(63,707,l),
(63,647,l),
(466,647,l)
);
},
{
closed = 1;
nodes = (
(315,786,l),
(414,927,l),
(346,927,l),
(260,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
3 1 3 0 8 1 2 1 2 76 0 4 5 4 133 0 5 0 5 133 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,527,l),
(57,472,l),
(394,472,l),
(52,60,l),
(52,0,l),
(472,0,l),
(472,55,l),
(127,55,l),
(472,468,l),
(472,527,l)
);
},
{
closed = 1;
nodes = (
(272,628,l),
(371,769,l),
(303,769,l),
(217,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
5 0 2 0 2 1 76 0 4 5 4 133 0 5 3 5 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 17 17 18 17 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,57,l),
(49,0,l),
(545,0,l),
(545,60,l),
(127,60,l),
(550,651,l),
(550,707,l),
(63,707,l),
(63,647,l),
(466,647,l)
);
},
{
closed = 1;
nodes = (
(261,871,o),
(261,849,qs),
(261,826,o),
(287,800,o),
(310,800,qs),
(333,800,o),
(360,826,o),
(360,849,qs),
(360,871,o),
(333,897,o),
(311,897,qs),
(288,897,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
3 1 3 0 8 1 2 1 2 76 7 1 4 0 5 0 4 5 105 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 11 10 0 0 17 15 10 21 11 21 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,527,l),
(57,472,l),
(394,472,l),
(52,60,l),
(52,0,l),
(472,0,l),
(472,55,l),
(127,55,l),
(472,468,l),
(472,527,l)
);
},
{
closed = 1;
nodes = (
(220,691,o),
(220,669,qs),
(220,646,o),
(246,620,o),
(269,620,qs),
(292,620,o),
(319,646,o),
(319,669,qs),
(319,691,o),
(292,717,o),
(270,717,qs),
(247,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
5 0 2 0 2 1 76 0 5 5 4 97 6 1 4 4 48 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 11 10 17 15 10 21 11 21 17 18 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,57,l),
(49,0,l),
(545,0,l),
(545,60,l),
(127,60,l),
(550,651,l),
(550,707,l),
(63,707,l),
(63,647,l),
(466,647,l)
);
},
{
closed = 1;
nodes = (
(168,927,l),
(291,786,l),
(332,786,l),
(455,927,l),
(390,927,l),
(312,834,l),
(232,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
3 1 3 0 8 1 2 1 2 76 6 1 4 5 4 133 0 5 0 5 133 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 16 15 14 13 12 11 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,527,l),
(57,472,l),
(394,472,l),
(52,60,l),
(52,0,l),
(472,0,l),
(472,55,l),
(127,55,l),
(472,468,l),
(472,527,l)
);
},
{
closed = 1;
nodes = (
(127,769,l),
(250,628,l),
(291,628,l),
(414,769,l),
(349,769,l),
(271,676,l),
(191,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
5 0 2 0 2 1 76 6 1 4 5 4 133 0 5 3 5 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 17 18 17 18 17 17 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,304,l),
(253,0,l),
(318,0,l),
(318,304,l),
(445,304,l),
(445,359,l),
(318,359,l),
(318,647,l),
(552,647,l),
(552,707,l),
(19,707,l),
(19,647,l),
(253,647,l),
(253,359,l),
(126,359,l),
(126,304,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
4 1 0 7 1 5 6 0 5 103 3 1 1 1 2 95 0 2 2 38 77 0 6 6 39 6 78 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,262,l),
(123,171,ls),
(123,128,o),
(140,61,o),
(159,41,qs),
(184,16,o),
(251,0,o),
(285,0,qs),
(331,0,l),
(331,57,l),
(291,57,ls),
(274,57,o),
(238,64,o),
(225,72,qs),
(200,88,o),
(189,148,o),
(189,175,qs),
(189,262,l),
(336,262,l),
(336,317,l),
(189,317,l),
(189,471,l),
(336,471,l),
(336,527,l),
(189,527,l),
(189,678,l),
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,317,l),
(34,317,l),
(34,262,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 3 2 3 133 6 1 0 10 1 7 8 0 7 103 5 1 1 1 2 95 4 1 2 2 41 77 0 8 8 9 97 0 9 9 39 9 78 33 32 26 24 38 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,685,o),
(329,663,qs),
(329,639,o),
(359,610,o),
(383,612,q),
(378,583,o),
(349,541,o),
(327,526,q),
(343,500,l),
(386,519,o),
(435,602,o),
(436,647,qs),
(436,676,o),
(410,713,o),
(383,714,qs),
(358,714,o)
);
},
{
closed = 1;
nodes = (
(123,678,l),
(123,527,l),
(34,527,l),
(34,471,l),
(123,471,l),
(123,171,ls),
(123,128,o),
(140,61,o),
(159,41,qs),
(184,16,o),
(251,0,o),
(285,0,qs),
(331,0,l),
(331,57,l),
(291,57,ls),
(274,57,o),
(238,64,o),
(225,72,qs),
(200,88,o),
(189,148,o),
(189,175,qs),
(189,471,l),
(303,471,l),
(303,527,l),
(189,527,l),
(189,678,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
10 1 1 7 7 6 2 2 1 2 76 0 7 0 1 0 7 1 128 8 1 0 0 46 77 5 1 2 2 1 95 6 1 1 1 41 77 0 3 3 4 97 0 4 4 39 4 78 1 0 41 40 39 38 37 36 30 28 27 25 19 18 17 16 0 15 1 15 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 416;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(521,0,l),
(593,0,l),
(439,287,l),
(518,307,o),
(602,409,o),
(602,490,qs),
(602,550,o),
(566,633,o),
(500,684,o),
(408,707,o),
(353,707,qs),
(92,707,l),
(92,0,l),
(157,0,l),
(157,276,l),
(372,276,l)
);
},
{
closed = 1;
nodes = (
(157,647,l),
(344,647,ls),
(385,647,o),
(455,633,o),
(506,599,o),
(535,539,o),
(535,493,qs),
(535,444,o),
(501,383,o),
(445,348,o),
(370,336,o),
(330,336,qs),
(157,336,l)
);
},
{
closed = 1;
nodes = (
(286,-120,o),
(286,-142,qs),
(286,-166,o),
(314,-195,o),
(340,-193,q),
(335,-222,o),
(306,-264,o),
(284,-278,q),
(300,-304,l),
(343,-286,o),
(393,-203,o),
(392,-158,qs),
(393,-132,o),
(366,-92,o),
(338,-91,qs),
(315,-90,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
12 1 3 4 1 76 39 36 35 3 6 73 9 1 6 0 6 134 8 1 4 7 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 30 29 17 16 0 0 29 44 30 44 27 25 16 28 17 28 0 15 0 15 24 33 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,258,ls),
(138,303,o),
(157,385,o),
(189,418,qs),
(212,443,o),
(282,472,o),
(330,472,qs),
(348,472,l),
(348,532,l),
(315,533,o),
(255,526,o),
(201,504,o),
(156,466,o),
(138,436,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(54,-120,o),
(54,-142,qs),
(54,-166,o),
(82,-195,o),
(108,-193,q),
(103,-222,o),
(74,-264,o),
(52,-278,q),
(68,-304,l),
(111,-286,o),
(161,-203,o),
(160,-158,qs),
(161,-132,o),
(134,-92,o),
(106,-91,qs),
(83,-90,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
3 1 3 2 1 76 28 25 24 3 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
6 1 4 3 4 134 0 2 2 0 97 1 1 0 0 41 77 5 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 3 4 134 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 5 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
19 18 0 0 18 33 19 33 0 17 0 17 33 21 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 370;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,641,l),
(557,0,l),
(656,0,l),
(656,707,l),
(591,707,l),
(591,64,l),
(193,707,l),
(92,707,l),
(92,0,l),
(157,0,l)
);
},
{
closed = 1;
nodes = (
(330,-120,o),
(330,-142,qs),
(330,-166,o),
(358,-195,o),
(384,-193,q),
(379,-222,o),
(350,-264,o),
(328,-278,q),
(344,-304,l),
(387,-286,o),
(437,-203,o),
(436,-158,qs),
(437,-132,o),
(410,-92,o),
(382,-91,qs),
(359,-90,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
8 3 2 2 0 1 76 20 17 16 3 4 73 6 1 4 2 4 134 1 1 0 0 38 77 5 3 2 2 2 39 2 78 11 10 0 0 10 25 11 25 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 748;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,265,ls),
(138,308,o),
(160,386,o),
(186,416,qs),
(209,443,o),
(277,477,o),
(318,477,qs),
(356,477,o),
(406,453,o),
(423,433,qs),
(448,402,o),
(463,315,o),
(463,268,qs),
(463,0,l),
(529,0,l),
(529,292,ls),
(529,355,o),
(499,457,o),
(461,489,qs),
(438,509,o),
(373,533,o),
(330,533,qs),
(298,533,o),
(243,522,o),
(217,509,qs),
(194,498,o),
(152,461,o),
(138,437,q),
(136,527,l),
(72,527,l),
(72,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(256,-120,o),
(256,-142,qs),
(256,-166,o),
(284,-195,o),
(310,-193,q),
(305,-222,o),
(276,-264,o),
(254,-278,q),
(270,-304,l),
(313,-286,o),
(363,-203,o),
(362,-158,qs),
(363,-132,o),
(336,-92,o),
(308,-91,qs),
(285,-90,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
3 1 2 3 1 76 42 39 38 3 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
7 1 5 2 5 134 0 3 3 0 97 1 1 0 0 41 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 2 5 134 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
33 32 0 0 32 47 33 47 0 31 0 31 38 22 38 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,265,ls),
(208,308,o),
(230,386,o),
(256,416,qs),
(279,443,o),
(347,477,o),
(388,477,qs),
(426,477,o),
(476,453,o),
(493,433,qs),
(518,402,o),
(533,315,o),
(533,268,qs),
(533,0,l),
(599,0,l),
(599,292,ls),
(599,355,o),
(569,457,o),
(531,489,qs),
(508,509,o),
(443,533,o),
(400,533,qs),
(368,533,o),
(313,522,o),
(287,509,qs),
(264,498,o),
(222,461,o),
(208,437,q),
(206,527,l),
(142,527,l),
(142,0,l),
(208,0,l)
);
},
{
closed = 1;
nodes = (
(-13,685,o),
(-13,663,qs),
(-13,639,o),
(17,610,o),
(41,612,q),
(36,583,o),
(7,541,o),
(-15,526,q),
(1,500,l),
(44,519,o),
(93,602,o),
(94,647,qs),
(94,676,o),
(68,713,o),
(41,714,qs),
(16,714,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
42 1 0 5 39 38 2 3 0 3 1 2 3 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
42 1 1 5 39 38 2 3 0 3 1 2 3 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
7 1 5 5 46 77 0 3 3 0 97 1 1 0 0 41 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 5 46 77 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
33 32 0 0 32 47 33 47 0 31 0 31 38 22 38 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,707,l),
(92,707,l),
(92,366,l),
(-13,298,l),
(19,248,l),
(92,295,l),
(92,0,l),
(557,0,l),
(557,60,l),
(157,60,l),
(157,338,l),
(308,437,l),
(276,486,l),
(157,408,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
13 10 9 8 7 2 1 7 0 2 1 76 0 2 2 38 77 0 0 0 1 95 0 1 1 39 1 78 21 17 19 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,340,l),
(272,428,l),
(240,477,l),
(138,410,l),
(138,707,l),
(72,707,l),
(72,367,l),
(-49,289,l),
(-17,239,l),
(72,297,l),
(72,0,l),
(138,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 8 7 4 3 2 1 8 1 0 1 76 0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 11 0 11 21 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,527,l),
(105,2,ls),
(105,-45,o),
(95,-92,o),
(80,-107,qs),
(66,-122,o),
(19,-132,o),
(-1,-132,qs),
(-26,-132,l),
(-26,-187,l),
(10,-187,ls),
(98,-187,o),
(134,-148,qs),
(147,-133,o),
(162,-98,o),
(170,-59,o),
(171,-19,o),
(171,0,qs),
(171,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 41 77 0 1 1 0 97 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 1 0 0 1 0 101 0 2 2 41 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
22 33 38 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,648,l),
(641,0,l),
(742,0,l),
(934,707,l),
(860,707,l),
(692,60,l),
(530,707,l),
(425,707,l),
(262,60,l),
(94,707,l),
(19,707,l),
(211,0,l),
(313,0,l)
);
},
{
closed = 1;
nodes = (
(478,786,l),
(533,786,l),
(449,927,l),
(381,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
11 6 3 3 3 0 1 76 8 1 6 5 6 133 0 5 0 5 133 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 13 13 0 0 13 16 13 16 15 14 0 12 0 12 17 18 18 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 953;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,527,l),
(226,55,l),
(92,527,l),
(17,527,l),
(179,0,l),
(273,0,l),
(411,474,l),
(549,0,l),
(642,0,l),
(802,527,l),
(727,527,l),
(596,55,l),
(462,527,l)
);
},
{
closed = 1;
nodes = (
(412,628,l),
(467,628,l),
(383,769,l),
(315,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
10 5 2 1 0 1 76 7 1 6 5 6 133 0 5 0 5 133 4 3 2 0 0 41 77 2 1 1 1 39 1 78 13 13 13 16 13 16 18 18 17 18 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,648,l),
(641,0,l),
(742,0,l),
(934,707,l),
(860,707,l),
(692,60,l),
(530,707,l),
(425,707,l),
(262,60,l),
(94,707,l),
(19,707,l),
(211,0,l),
(313,0,l)
);
},
{
closed = 1;
nodes = (
(487,808,l),
(586,949,l),
(518,949,l),
(432,808,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 3 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 5 0 5 6 0 128 0 5 5 44 77 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 5 6 5 133 0 6 0 6 133 2 1 2 0 0 38 77 7 4 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 16 15 14 13 0 12 0 12 17 18 18 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 953;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,527,l),
(226,55,l),
(92,527,l),
(17,527,l),
(179,0,l),
(273,0,l),
(411,474,l),
(549,0,l),
(642,0,l),
(802,527,l),
(727,527,l),
(596,55,l),
(462,527,l)
);
},
{
closed = 1;
nodes = (
(425,628,l),
(524,769,l),
(456,769,l),
(370,628,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
10 5 2 1 0 1 76 0 5 6 5 133 0 6 0 6 133 4 3 2 0 0 41 77 2 1 1 1 39 1 78 17 17 18 17 18 17 17 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,648,l),
(641,0,l),
(742,0,l),
(934,707,l),
(860,707,l),
(692,60,l),
(530,707,l),
(425,707,l),
(262,60,l),
(94,707,l),
(19,707,l),
(211,0,l),
(313,0,l)
);
},
{
closed = 1;
nodes = (
(314,869,o),
(314,849,qs),
(314,829,o),
(343,801,o),
(363,801,qs),
(383,801,o),
(413,828,o),
(413,849,qs),
(413,870,o),
(383,897,o),
(363,897,qs),
(343,897,o)
);
},
{
closed = 1;
nodes = (
(541,869,o),
(541,849,qs),
(541,829,o),
(569,801,o),
(589,801,qs),
(609,801,o),
(639,828,o),
(639,849,qs),
(639,870,o),
(609,897,o),
(589,897,qs),
(569,897,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
11 6 3 3 3 0 1 76 11 7 10 3 5 8 1 6 0 5 6 105 2 1 2 0 0 38 77 9 4 2 3 3 39 3 78 26 25 14 13 0 0 32 30 25 36 26 36 20 18 13 24 14 24 0 12 0 12 17 18 18 17 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 953;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,527,l),
(226,55,l),
(92,527,l),
(17,527,l),
(179,0,l),
(273,0,l),
(411,474,l),
(549,0,l),
(642,0,l),
(802,527,l),
(727,527,l),
(596,55,l),
(462,527,l)
);
},
{
closed = 1;
nodes = (
(247,689,o),
(247,669,qs),
(247,649,o),
(276,621,o),
(296,621,qs),
(316,621,o),
(346,648,o),
(346,669,qs),
(346,690,o),
(316,717,o),
(296,717,qs),
(276,717,o)
);
},
{
closed = 1;
nodes = (
(474,689,o),
(474,669,qs),
(474,649,o),
(502,621,o),
(522,621,qs),
(542,621,o),
(572,648,o),
(572,669,qs),
(572,690,o),
(542,717,o),
(522,717,qs),
(502,717,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
10 5 2 1 0 1 76 8 1 6 6 5 97 10 7 9 3 5 5 48 77 4 3 2 0 0 41 77 2 1 1 1 39 1 78 26 25 14 13 32 30 25 36 26 36 20 18 13 24 14 24 18 17 18 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,707,l),
(19,707,l),
(270,267,l),
(270,0,l),
(335,0,l),
(335,267,l),
(584,707,l),
(509,707,l),
(304,334,l)
);
},
{
closed = 1;
nodes = (
(304,786,l),
(359,786,l),
(275,927,l),
(207,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
8 5 2 3 1 0 1 76 5 1 4 3 4 133 0 3 0 3 133 2 1 0 0 38 77 0 1 1 39 1 78 9 9 9 12 9 12 19 18 18 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,274,ls),
(466,238,o),
(455,170,o),
(441,141,qs),
(421,100,o),
(348,51,o),
(291,50,qs),
(245,49,o),
(184,80,o),
(167,106,qs),
(147,136,o),
(138,222,o),
(138,267,qs),
(138,527,l),
(72,527,l),
(72,242,ls),
(72,185,o),
(93,85,o),
(122,53,qs),
(145,26,o),
(222,-8,o),
(276,-8,qs),
(303,-8,o),
(358,1,o),
(408,22,o),
(451,56,o),
(466,80,q),
(466,1,ls),
(466,-42,o),
(449,-114,o),
(428,-138,qs),
(407,-162,o),
(343,-188,o),
(297,-188,qs),
(249,-188,o),
(158,-155,o),
(118,-125,q),
(89,-179,l),
(131,-214,o),
(243,-246,o),
(297,-246,qs),
(345,-246,o),
(441,-220,o),
(475,-183,qs),
(506,-149,o),
(532,-62,o),
(532,0,qs),
(532,527,l),
(466,527,l)
);
},
{
closed = 1;
nodes = (
(299,628,l),
(354,628,l),
(270,769,l),
(202,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
21 1 4 3 11 10 2 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
9 1 7 6 7 133 0 6 3 6 133 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 1 7 6 7 133 0 6 3 6 133 0 1 0 0 1 0 101 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
49 49 0 0 49 52 49 52 51 50 0 48 0 48 38 22 42 37 38 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni0405;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,645,o),
(464,619,o),
(497,576,o),
(503,543,q),
(569,543,l),
(563,590,o),
(519,655,o),
(454,696,o),
(374,715,o),
(331,715,qs),
(284,715,o),
(196,695,o),
(127,649,o),
(86,576,o),
(86,522,qs),
(86,448,o),
(171,362,o),
(239,344,qs),
(279,333,o),
(356,317,o),
(396,307,qs),
(422,301,o),
(468,282,o),
(502,252,o),
(522,211,o),
(522,182,qs),
(522,146,o),
(491,96,o),
(441,65,o),
(379,51,o),
(348,51,qs),
(315,51,o),
(250,63,o),
(191,90,o),
(145,135,o),
(132,168,q),
(62,168,l),
(75,119,o),
(131,52,o),
(206,10,o),
(294,-8,o),
(341,-8,qs),
(392,-8,o),
(482,14,o),
(549,63,o),
(589,142,o),
(589,198,qs),
(589,233,o),
(566,286,o),
(526,325,o),
(472,351,o),
(441,360,qs),
(400,371,o),
(324,388,o),
(284,399,qs),
(258,406,o),
(211,426,o),
(175,457,o),
(154,500,o),
(154,530,qs),
(154,567,o),
(186,616,o),
(237,645,o),
(300,656,o),
(331,656,qs),
(361,656,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 28 1 78 1 0 61 60 56 54 35 33 29 28 24 22 0 65 1 65 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = uni0405;
unicode = 1029;
},
{
glyphname = uni0455;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,469,o),
(352,453,o),
(380,426,o),
(387,408,q),
(448,408,l),
(442,442,o),
(405,490,o),
(353,520,o),
(290,533,o),
(259,533,qs),
(224,533,o),
(152,519,o),
(95,486,o),
(59,430,o),
(59,387,qs),
(59,327,o),
(131,260,o),
(186,247,qs),
(218,239,o),
(278,228,o),
(309,221,qs),
(326,217,o),
(359,206,o),
(385,188,o),
(401,160,o),
(401,140,qs),
(401,111,o),
(375,75,o),
(335,56,o),
(286,50,o),
(263,50,qs),
(240,50,o),
(195,58,o),
(155,75,o),
(122,104,o),
(111,127,q),
(44,127,l),
(52,89,o),
(96,39,o),
(156,8,o),
(226,-6,o),
(260,-6,qs),
(297,-6,o),
(371,7,o),
(429,42,o),
(466,100,o),
(466,144,qs),
(466,202,o),
(399,264,o),
(346,275,qs),
(314,283,o),
(252,295,o),
(220,302,qs),
(202,306,o),
(168,318,o),
(141,338,o),
(124,368,o),
(124,389,qs),
(124,416,o),
(149,450,o),
(187,469,o),
(234,477,o),
(257,477,qs),
(276,477,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 30 1 78 1 0 59 58 54 52 33 31 27 26 22 20 0 63 1 63 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = uni0455;
unicode = 1109;
},
{
glyphname = uni0458;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,692,o),
(88,669,qs),
(88,646,o),
(115,620,o),
(137,620,qs),
(160,620,o),
(187,646,o),
(187,669,qs),
(187,691,o),
(160,717,o),
(137,717,qs),
(115,717,o)
);
},
{
closed = 1;
nodes = (
(105,527,l),
(105,2,ls),
(105,-45,o),
(95,-92,o),
(80,-107,qs),
(66,-122,o),
(19,-132,o),
(-1,-132,qs),
(-26,-132,l),
(-26,-187,l),
(10,-187,ls),
(98,-187,o),
(134,-148,qs),
(147,-133,o),
(162,-98,o),
(170,-59,o),
(171,-19,o),
(171,0,qs),
(171,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 97 5 1 0 0 27 77 0 4 4 22 77 0 3 3 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 3 2 101 0 1 1 0 97 5 1 0 0 27 77 0 4 4 22 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 30 29 23 21 20 18 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = uni0458;
unicode = 1112;
},
{
glyphname = uni0408;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,80,o),
(169,-8,o),
(260,-8,qs),
(322,-8,o),
(406,34,o),
(452,103,o),
(470,192,o),
(470,239,qs),
(470,707,l),
(405,707,l),
(405,241,ls),
(405,203,o),
(395,134,o),
(365,82,o),
(310,51,o),
(265,51,qs),
(200,51,o),
(123,113,o),
(115,179,q),
(47,179,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 20 77 0 0 0 2 97 0 2 2 28 2 78 0 0 0 19 0 19 37 21 34 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = uni0408;
unicode = 1032;
},
{
glyphname = uni040E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,-1,o),
(225,16,o),
(258,41,qs),
(294,68,o),
(340,140,o),
(360,179,qs),
(393,244,o),
(449,376,o),
(503,509,o),
(557,641,o),
(587,707,q),
(512,707,l),
(325,245,l),
(100,707,l),
(20,707,l),
(286,177,l),
(269,147,o),
(236,104,o),
(215,90,qs),
(193,76,o),
(142,64,o),
(107,63,q),
(107,-1,l)
);
},
{
closed = 1;
nodes = (
(261,861,o),
(234,877,o),
(217,905,o),
(214,927,q),
(154,927,l),
(157,892,o),
(184,845,o),
(226,817,o),
(281,805,o),
(313,805,qs),
(344,805,o),
(399,817,o),
(443,845,o),
(471,892,o),
(474,927,q),
(414,927,l),
(411,905,o),
(393,877,o),
(367,861,o),
(333,855,o),
(314,855,qs),
(295,855,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
9 6 2 0 1 1 76 7 1 5 4 5 133 8 1 4 0 6 1 4 6 105 2 1 1 1 20 77 0 0 0 3 97 0 3 3 21 3 78 24 23 40 39 35 33 29 28 23 44 24 44 26 18 22 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = uni040E;
unicode = 1038;
},
{
glyphname = uni045E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,527,l),
(22,527,l),
(255,-32,l),
(247,-52,o),
(227,-93,o),
(201,-129,o),
(168,-158,o),
(146,-165,qs),
(133,-170,o),
(101,-172,o),
(83,-172,q),
(83,-235,l),
(134,-235,o),
(207,-217,o),
(239,-185,qs),
(256,-169,o),
(289,-115,o),
(318,-55,o),
(342,5,o),
(350,28,qs),
(526,527,l),
(450,527,l),
(293,52,l)
);
},
{
closed = 1;
nodes = (
(228,674,o),
(201,690,o),
(184,718,o),
(181,740,q),
(121,740,l),
(124,705,o),
(151,658,o),
(193,630,o),
(248,618,o),
(280,618,qs),
(311,618,o),
(366,630,o),
(410,658,o),
(438,705,o),
(441,740,q),
(381,740,l),
(378,718,o),
(360,690,o),
(334,674,o),
(300,668,o),
(281,668,qs),
(262,668,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 19 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 4 5 133 8 1 4 0 6 0 4 6 105 3 1 0 0 22 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 4 5 133 8 1 4 0 6 0 4 6 105 0 2 0 1 2 1 101 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
24 23 40 39 35 33 29 28 23 44 24 44 23 33 24 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 543;
}
);
note = uni045E;
unicode = 1118;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Light;
properties = (
{
key = styleNames;
values = (
{
language = ENG;
value = Light;
}
);
},
{
key = postscriptFullName;
value = "Onest Light";
},
{
key = postscriptFontName;
value = "Onest-Light";
}
);
weightClass = 300;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 15;
"@MMK_R_O" = -12;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_colon" = 20;
"@MMK_R_period" = 30;
"@MMK_R_uni0422" = -50;
"@MMK_R_w" = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -15;
"@MMK_R_O" = 5;
"@MMK_R_W" = -5;
"@MMK_R_Y" = -20;
"@MMK_R_period" = -20;
"@MMK_R_uni0417" = 5;
};
"@MMK_L_K_alt" = {
"@MMK_R_abreve" = -10;
"@MMK_R_uni0422" = 10;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_O" = -5;
"@MMK_R_abreve" = -35;
"@MMK_R_period" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -60;
"@MMK_R_O" = -20;
"@MMK_R_abreve" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_d" = -70;
"@MMK_R_period" = -80;
"@MMK_R_r" = -30;
"@MMK_R_w" = -20;
};
"@MMK_L_period" = {
"@MMK_R_A" = 30;
"@MMK_R_O" = -20;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -80;
"@MMK_R_uni0422" = -80;
};
"@MMK_L_r" = {
"@MMK_R_d" = -10;
"@MMK_R_t" = 30;
};
"@MMK_L_uni0413" = {
"@MMK_R_colon" = -40;
"@MMK_R_period" = -100;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0432" = -40;
"@MMK_R_uni0433" = -50;
"@MMK_R_uni0444" = -80;
};
"@MMK_L_uni0414" = {
"@MMK_R_period" = 30;
};
"@MMK_L_uni0417" = {
"@MMK_R_uni0417" = 5;
};
"@MMK_L_uni0422" = {
"@MMK_R_A" = -50;
"@MMK_R_abreve" = -60;
"@MMK_R_colon" = -20;
"@MMK_R_d" = -50;
"@MMK_R_period" = -80;
"@MMK_R_r" = -20;
"@MMK_R_uni0422" = 40;
};
"@MMK_L_uni0433" = {
"@MMK_R_period" = -40;
"@MMK_R_uni0444" = -10;
};
"@MMK_L_uni0434" = {
"@MMK_R_period" = 40;
};
A = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aacute = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Acircumflex = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Adieresis = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Agrave = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Amacron = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aogonek = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aring = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Atilde = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
B = {
V = -10;
W = -10;
W_alt = -10;
Wacute = -10;
Wcircumflex = -10;
Wdieresis = -10;
Wgrave = -10;
X = -10;
Y = -10;
Yacute = -10;
Ycircumflex = -10;
Ydieresis = -10;
Ygrave = -10;
};
C = {
J = 10;
V = -25;
X = -15;
};
Cacute = {
J = 10;
V = -25;
X = -15;
};
Ccaron = {
J = 10;
V = -25;
X = -15;
};
Ccedilla = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ccircumflex = {
J = 10;
V = -25;
X = -15;
};
Cdotaccent = {
J = 10;
V = -25;
X = -15;
};
D = {
C = 15;
Cacute = 15;
Ccaron = 15;
Ccedilla = 15;
Ccircumflex = 15;
Cdotaccent = 15;
G = 15;
Gbreve = 15;
Gcircumflex = 15;
Gdotaccent = 15;
J = 10;
O = 15;
OE = 15;
Oacute = 15;
Obreve = 15;
Ocircumflex = 15;
Odieresis = 15;
Ograve = 15;
Ohungarumlaut = 15;
Omacron = 15;
Oslash = 15;
Otilde = 15;
Q = 15;
S = 15;
Sacute = 15;
Scaron = 15;
Scedilla = 15;
Scircumflex = 15;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
d = 10;
uni0122 = 15;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Dcaron = {
J = 10;
V = -25;
X = -15;
};
Dcroat = {
J = 10;
V = -25;
X = -15;
};
E = {
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
};
Eth = {
J = 10;
V = -25;
X = -15;
};
F = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
J = -30;
T = 20;
Tcaron = 20;
a = -30;
a00E2.alt = -30;
a00E4.alt = -30;
a0103.alt = -30;
a2_alt = -25;
a_alt = -30;
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
agrave = -30;
amacron = -30;
aogonek = -30;
aring = -30;
atilde = -30;
c = -25;
c_alt = -25;
cacute = -25;
ccaron = -25;
ccedilla = -25;
ccircumflex = -25;
cdotaccent = -25;
comma = -30;
d = -25;
dcaron = -25;
dcroat = -25;
e = -25;
eacute = -25;
ebreve = -25;
ecaron = -25;
ecircumflex = -25;
edieresis = -25;
edotaccent = -25;
egrave = -25;
emacron = -25;
eogonek = -25;
eth = -25;
g = -25;
gbreve = -25;
gcircumflex = -25;
gdotaccent = -25;
o = -25;
oacute = -25;
obreve = -25;
ocircumflex = -25;
odieresis = -25;
oe = -25;
ograve = -25;
ohungarumlaut = -25;
omacron = -25;
oslash = -25;
otilde = -25;
period = -30;
q = -25;
quotedblbase = -30;
quotedblright = 20;
quoteright = 20;
s = -25;
s_alt = -25;
sacute = -25;
scaron = -25;
scedilla = -25;
scircumflex = -25;
uni0123 = -25;
uni0162 = 20;
uni0219 = -25;
uni021A = 20;
uni0410 = -50;
uni0422 = 20;
uni0430 = -30;
};
G = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -15;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Gbreve = {
J = 10;
V = -25;
X = -15;
};
Gcircumflex = {
J = 10;
V = -25;
X = -15;
};
Gdotaccent = {
J = 10;
V = -25;
X = -15;
};
I = {
bracketright = 40;
};
J = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -10;
};
K = {
v = -30;
y2_alt = -40;
};
K_alt = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
d = -20;
uni0122 = -30;
v = -30;
w = -20;
w_alt = -20;
wacute = -20;
wcircumflex = -20;
wdieresis = -20;
wgrave = -20;
y2_alt = -40;
};
L = {
A = 20;
Aacute = 20;
Acircumflex = 20;
Adieresis = 20;
Agrave = 20;
Amacron = 20;
Aogonek = 20;
Aring = 20;
Atilde = 20;
J = 30;
T = -40;
Tcaron = -40;
V = -50;
W = -40;
W_alt = -40;
Wacute = -40;
Wcircumflex = -40;
Wdieresis = -40;
Wgrave = -40;
X = 10;
Y = -80;
Yacute = -80;
Ycircumflex = -80;
Ydieresis = -80;
Ygrave = -80;
a = 10;
a00E2.alt = 10;
a00E4.alt = 10;
a0103.alt = 10;
a2_alt = 10;
a_alt = 10;
aacute = 10;
abreve = 10;
acircumflex = 10;
adieresis = 10;
agrave = 10;
amacron = 10;
aogonek = 10;
aring = 10;
atilde = 10;
c = 10;
c_alt = 10;
cacute = 10;
ccaron = 10;
ccedilla = 10;
ccircumflex = 10;
cdotaccent = 10;
colon = 20;
comma = 40;
d = 10;
dcaron = 10;
dcroat = 10;
e = 10;
eacute = 10;
ebreve = 10;
ecaron = 10;
ecircumflex = 10;
edieresis = 10;
edotaccent = 10;
egrave = 10;
emacron = 10;
eogonek = 10;
eth = 10;
g = 10;
gbreve = 10;
gcircumflex = 10;
gdotaccent = 10;
j = 20;
o = 10;
oacute = 10;
obreve = 10;
ocircumflex = 10;
odieresis = 10;
oe = 10;
ograve = 10;
ohungarumlaut = 10;
omacron = 10;
oslash = 10;
otilde = 10;
period = 40;
q = 10;
quotedblbase = 40;
quoteright = -60;
s = 10;
s_alt = 10;
sacute = 10;
scaron = 10;
scedilla = 10;
scircumflex = 10;
semicolon = 20;
uni0123 = 10;
uni0162 = -40;
uni0219 = 10;
uni021A = -40;
uni0410 = 20;
uni0422 = -40;
uni0430 = 10;
y2_alt = -10;
z = 20;
};
O = {
J = 10;
V = -25;
X = -15;
};
Oacute = {
J = 10;
V = -25;
X = -15;
};
Obreve = {
J = 10;
V = -25;
X = -15;
};
Ocircumflex = {
J = 10;
V = -25;
X = -15;
};
Odieresis = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ograve = {
J = 10;
V = -25;
X = -15;
};
Ohungarumlaut = {
J = 10;
V = -25;
X = -15;
};
Omacron = {
J = 10;
V = -25;
X = -15;
};
Oslash = {
J = 10;
V = -25;
X = -15;
};
Otilde = {
J = 10;
V = -25;
X = -15;
};
P = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = 10;
Ccedilla = 10;
G = 10;
J = -50;
Odieresis = 10;
Q = 10;
S = 10;
X = -25;
Y = -15;
Yacute = -15;
Ycircumflex = -15;
Ydieresis = -15;
Ygrave = -15;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
j = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -90;
q = -10;
quotedblbase = -60;
quotedblright = 20;
quoteright = 20;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -50;
uni0430 = -20;
};
Q = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -15;
colon = 20;
semicolon = 20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
R = {
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
a = -10;
a00E2.alt = -10;
a00E4.alt = -10;
a0103.alt = -10;
a2_alt = -10;
a_alt = -10;
aacute = -10;
abreve = -10;
acircumflex = -10;
adieresis = -10;
agrave = -10;
amacron = -10;
aogonek = -10;
aring = -10;
atilde = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0430 = -10;
};
S = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Sacute = {
J = 10;
V = -25;
X = -15;
};
Scaron = {
J = 10;
V = -25;
X = -15;
};
Scedilla = {
J = 10;
V = -25;
X = -15;
};
Scircumflex = {
J = 10;
V = -25;
X = -15;
};
T = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
Tcaron = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
U = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -60;
q = -10;
quotedblbase = -60;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -10;
uni0430 = -20;
};
V = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = -25;
Cacute = -25;
Ccaron = -25;
Ccedilla = -25;
Ccircumflex = -25;
Cdotaccent = -25;
G = -25;
Gbreve = -25;
Gcircumflex = -25;
Gdotaccent = -25;
J = -80;
O = -25;
OE = -25;
Oacute = -25;
Obreve = -25;
Ocircumflex = -25;
Odieresis = -25;
Ograve = -25;
Ohungarumlaut = -25;
Omacron = -25;
Oslash = -25;
Otilde = -25;
Q = -25;
S = -25;
Sacute = -25;
Scaron = -25;
Scedilla = -25;
Scircumflex = -25;
a = -50;
a00E2.alt = -50;
a00E4.alt = -50;
a0103.alt = -50;
a2_alt = -50;
a_alt = -50;
aacute = -50;
abreve = -50;
acircumflex = -50;
adieresis = -50;
agrave = -50;
amacron = -50;
aogonek = -50;
aring = -50;
atilde = -50;
braceright = 20;
bracketright = 40;
c = -50;
c_alt = -50;
cacute = -50;
ccaron = -50;
ccedilla = -50;
ccircumflex = -50;
cdotaccent = -50;
colon = -20;
comma = -80;
d = -50;
dcaron = -50;
dcroat = -50;
e = -50;
eacute = -50;
ebreve = -50;
ecaron = -50;
ecircumflex = -50;
edieresis = -50;
edotaccent = -50;
egrave = -50;
emacron = -50;
eogonek = -50;
eth = -50;
g = -50;
gbreve = -50;
gcircumflex = -50;
gdotaccent = -50;
m = -20;
n = -20;
o = -50;
oacute = -50;
obreve = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
ohungarumlaut = -50;
omacron = -50;
oslash = -50;
otilde = -50;
p = -20;
period = -80;
q = -50;
quotedblbase = -80;
quotedblright = 10;
quoteright = 20;
r = -20;
racute = -20;
rcaron = -20;
s = -50;
s_alt = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
scircumflex = -50;
semicolon = -20;
space = -80;
u = -20;
uni0122 = -25;
uni0123 = -50;
uni0157 = -20;
uni0219 = -50;
uni0410 = -50;
uni0430 = -50;
z = -20;
};
W = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
W_alt = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
uni0410 = -40;
};
Wacute = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wcircumflex = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wdieresis = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wgrave = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
X = {
C = -15;
Cacute = -15;
Ccaron = -15;
Ccedilla = -30;
Ccircumflex = -15;
Cdotaccent = -15;
G = -15;
Gbreve = -15;
Gcircumflex = -15;
Gdotaccent = -15;
O = -15;
OE = -15;
Oacute = -15;
Obreve = -15;
Ocircumflex = -15;
Odieresis = -30;
Ograve = -15;
Ohungarumlaut = -15;
Omacron = -15;
Oslash = -15;
Otilde = -15;
Q = -15;
S = -30;
Sacute = -15;
Scaron = -15;
Scedilla = -15;
Scircumflex = -15;
bracketright = 40;
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
uni0122 = -15;
};
Y = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Yacute = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ycircumflex = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ydieresis = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ygrave = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Z = {
bracketright = 20;
colon = 30;
quoteright = 20;
quotesingle = 40;
semicolon = 30;
};
b = {
c = 10;
d = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
backslash = {
a2_alt = 20;
backslash = -210;
uni0414 = 60;
uni0432 = 40;
uni0433 = 40;
uni0434 = 60;
uni0435 = 20;
uni0436 = 40;
uni0437 = 20;
uni0438 = 40;
uni043A = 40;
uni043C = 40;
uni043D = 40;
uni043E = 20;
uni043F = 40;
uni0440 = 40;
uni0441 = 20;
uni0444 = 20;
uni0446 = 40;
uni0447 = -20;
uni0448 = 40;
uni0449 = 40;
uni044B = 40;
uni044C = 40;
uni044D = 20;
uni044E = 40;
uni044F = 40;
uni0451 = 20;
uni0491 = 40;
};
braceleft = {
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
j = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0434 = 40;
};
bracketleft = {
I = 40;
T = 40;
Tcaron = 40;
V = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
X = 40;
Y = 40;
Yacute = 40;
Ycircumflex = 40;
Ydieresis = 40;
Ygrave = 40;
Z = 20;
i = 40;
j = 40;
l = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0425 = 40;
uni0434 = 40;
uni0443 = 20;
};
c = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
c_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
cacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
ccircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
cdotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
colon = {
backslash = -70;
slash = -30;
};
comma = {
U = -60;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 30;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -40;
uni0443 = -40;
v = -40;
y2_alt = -40;
zero = -20;
};
dcaron = {
a2_alt = -40;
c = -40;
c_alt = -40;
cacute = -40;
ccaron = -40;
ccedilla = -40;
ccircumflex = -40;
cdotaccent = -40;
d = -40;
dcaron = -40;
dcroat = -40;
e = -40;
eacute = -40;
ebreve = -40;
ecaron = -40;
ecircumflex = -40;
edieresis = -40;
edotaccent = -40;
egrave = -40;
emacron = -40;
eogonek = -40;
eth = -40;
g = -40;
gbreve = -40;
gcircumflex = -40;
gdotaccent = -40;
o = -40;
oacute = -40;
obreve = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
ohungarumlaut = -40;
omacron = -40;
oslash = -40;
otilde = -40;
q = -40;
s = -40;
s_alt = -40;
sacute = -40;
scaron = -40;
scedilla = -40;
scircumflex = -40;
uni0123 = -40;
uni0219 = -40;
};
e = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ebreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecircumflex = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
edieresis = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edotaccent = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
egrave = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
emacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eogonek = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eth = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
f = {
a2_alt = -10;
bracketright = 40;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 50;
quotesingle = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
four = {
four = 20;
};
i = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
j = {
bracketright = 40;
j = 20;
quoteright = 20;
};
k_alt = {
d = -10;
};
l = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
lcaron = {
a2_alt = -40;
c = -40;
c_alt = -40;
cacute = -40;
ccaron = -40;
ccedilla = -40;
ccircumflex = -40;
cdotaccent = -40;
d = -40;
dcaron = -40;
dcroat = -40;
e = -40;
eacute = -40;
ebreve = -40;
ecaron = -40;
ecircumflex = -40;
edieresis = -40;
edotaccent = -40;
egrave = -40;
emacron = -40;
eogonek = -40;
eth = -40;
g = -40;
gbreve = -40;
gcircumflex = -40;
gdotaccent = -40;
o = -40;
oacute = -40;
obreve = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
ohungarumlaut = -40;
omacron = -40;
oslash = -40;
otilde = -40;
q = -40;
s = -40;
s_alt = -40;
sacute = -40;
scaron = -40;
scedilla = -40;
scircumflex = -40;
uni0123 = -40;
uni0219 = -40;
};
nine = {
comma = -20;
period = -20;
quotedblbase = -20;
seven = -20;
};
o = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
obreve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ocircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
odieresis = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
oe = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ograve = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ohungarumlaut = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
omacron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oslash = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
otilde = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
p = {
c = 10;
f = -20;
parenright = -20;
quotedblright = -20;
t = -20;
t_alt = -20;
tbar = -20;
uni0163 = -20;
uni021B = -20;
x = -10;
y2_alt = -5;
};
parenleft = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
uni0414 = 40;
uni0422 = 40;
uni0434 = 40;
uni0443 = 10;
};
period = {
U = -60;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 30;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0442 = -40;
uni0443 = -40;
v = -40;
y2_alt = -40;
zero = -20;
};
q = {
j = 20;
};
quotedblbase = {
U = -60;
V = -80;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 30;
uni0410 = 40;
uni0414 = 40;
uni0416 = 20;
uni0417 = -20;
uni041B = 20;
uni041E = -30;
uni0421 = -30;
uni0424 = -50;
uni0425 = 20;
uni0427 = -80;
uni042D = -30;
uni0434 = 60;
uni0436 = 20;
uni043B = 40;
uni0442 = -40;
uni0443 = -30;
uni0445 = 20;
uni0447 = -40;
v = -40;
y2_alt = -40;
zero = -20;
};
quotedblleft = {
J = -100;
T = 40;
Tcaron = 40;
V = 10;
W = 10;
W_alt = 10;
Wacute = 10;
Wcircumflex = 10;
Wdieresis = 10;
Wgrave = 10;
a2_alt = -30;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -30;
uni0162 = 40;
uni0163 = 40;
uni0219 = -30;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -40;
uni0422 = 30;
uni0423 = 30;
uni0434 = -40;
uni043B = -40;
uni0442 = 40;
uni0443 = 40;
uni0444 = -30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quotedblright = {
comma = -50;
period = -50;
quotedblbase = -50;
};
quoteleft = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
J = -100;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
comma = -50;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
f = 40;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
period = -50;
q = -20;
quotedblbase = -50;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -20;
uni0162 = 40;
uni0163 = 40;
uni0219 = -20;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -20;
uni041B = -20;
uni0422 = 40;
uni0423 = 40;
uni042A = 20;
uni0434 = -30;
uni043B = -30;
uni0442 = 30;
uni0443 = 30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quoteright = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -60;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -30;
b = 20;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
j = 20;
k = 20;
k_alt = 20;
kgreenlandic = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
uni0123 = -30;
uni0137 = 20;
uni0162 = 40;
uni0219 = -30;
uni021A = 40;
uni0410 = -40;
uni0422 = 40;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0442 = 40;
uni0443 = 40;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
quotesingle = {
A = -20;
Aacute = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
J = -80;
T = 40;
Tcaron = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
Z = 40;
b = 40;
f = 40;
t = 40;
t_alt = 40;
tbar = 40;
uni0162 = 40;
uni0163 = 40;
uni021A = 40;
uni021B = 40;
uni0410 = -20;
uni0422 = 20;
uni0423 = 20;
uni0427 = 20;
uni0442 = 40;
};
r = {
quotedblright = 40;
quoteright = 40;
};
racute = {
quotedblright = 40;
quoteright = 40;
};
rcaron = {
quotedblright = 40;
quoteright = 40;
};
s = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
t = -10;
t_alt = -10;
tbar = -10;
uni0163 = -10;
uni021B = -10;
x = -15;
y2_alt = -5;
};
s_alt = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
sacute = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scaron = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scedilla = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
scircumflex = {
f = -10;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
seven = {
comma = -90;
four = -60;
one = 20;
period = -90;
quotedblbase = -90;
quotesingle = 20;
seven = 30;
three = -10;
};
slash = {
slash = -210;
uni0422 = 30;
uni0423 = 30;
};
space = {
V = -80;
W = -60;
W_alt = -60;
Wacute = -60;
Wcircumflex = -60;
Wdieresis = -60;
Wgrave = -60;
five = 40;
};
t = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
t_alt = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tbar = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tcaron = {
a2_alt = -45;
c = -45;
c_alt = -45;
cacute = -45;
ccaron = -45;
ccedilla = -45;
ccircumflex = -45;
cdotaccent = -45;
d = -45;
dcaron = -45;
dcroat = -45;
e = -45;
eacute = -45;
ebreve = -45;
ecaron = -45;
ecircumflex = -45;
edieresis = -45;
edotaccent = -45;
egrave = -45;
emacron = -45;
eogonek = -45;
eth = -45;
g = -45;
gbreve = -45;
gcircumflex = -45;
gdotaccent = -45;
o = -45;
oacute = -45;
obreve = -45;
ocircumflex = -45;
odieresis = -45;
oe = -45;
ograve = -45;
ohungarumlaut = -45;
omacron = -45;
oslash = -45;
otilde = -45;
q = -45;
s = -45;
s_alt = -45;
sacute = -45;
scaron = -45;
scedilla = -45;
scircumflex = -45;
uni0123 = -45;
uni0219 = -45;
};
two = {
comma = 30;
four = -20;
period = 30;
quotedblbase = 30;
two = 15;
};
uni0122 = {
J = 10;
V = -25;
X = -15;
};
uni0136 = {
v = -30;
y2_alt = -40;
};
uni0157 = {
quotedblright = 40;
quoteright = 40;
};
uni0162 = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni0163 = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0219 = {
c = 10;
f = -10;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
uni021A = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni021B = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0401 = {
quotedblright = 20;
uni043B = 10;
};
uni0405 = {
J = 10;
V = -25;
X = -15;
};
uni0410 = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quotedblleft = -40;
quotedblright = -40;
quoteright = -40;
quotesingle = -20;
uni0410 = 15;
uni0414 = 20;
uni0417 = -15;
uni041B = 10;
uni041E = -12;
uni0421 = -15;
uni0422 = -50;
uni0423 = -40;
uni0424 = -15;
uni0427 = -70;
uni042D = -15;
uni0434 = 10;
uni0436 = 10;
uni043B = 10;
uni0442 = -20;
uni0443 = -25;
uni0447 = -35;
v = -30;
x = 5;
y2_alt = -30;
};
uni0411 = {
uni0414 = -20;
uni042F = -20;
uni0434 = -10;
uni0436 = -20;
uni0445 = -20;
};
uni0412 = {
uni0423 = -30;
};
uni0413 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
};
uni0414 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0415 = {
quotedblright = 20;
uni043B = 10;
};
uni0416 = {
a2_alt = -20;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
uni0430 = -10;
uni0431 = -10;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0442 = -20;
uni0443 = -20;
uni0444 = -20;
uni0447 = -40;
uni044D = -20;
uni0451 = -20;
};
uni0417 = {
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni0417 = 15;
uni041B = -15;
uni041E = 15;
uni0421 = 15;
uni0422 = -20;
uni0423 = -20;
uni0424 = 15;
uni0425 = -20;
uni042D = 15;
uni0431 = 10;
uni0442 = 10;
uni0444 = 10;
};
uni041A = {
a2_alt = -20;
colon = 20;
semicolon = 20;
slash = 20;
uni0417 = -30;
uni041E = -30;
uni0421 = -30;
uni0424 = -30;
uni042D = -30;
uni0430 = -10;
uni0431 = -20;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0443 = -30;
uni0444 = -20;
uni044D = -20;
uni0451 = -20;
};
uni041E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -15;
uni0431 = 10;
uni0442 = 10;
};
uni0420 = {
a2_alt = -10;
comma = -90;
period = -90;
quotedblbase = -90;
quotedblleft = 20;
uni0410 = -60;
uni0414 = -50;
uni0416 = -20;
uni0417 = 10;
uni041E = 10;
uni0421 = 10;
uni0424 = 10;
uni0425 = -20;
uni042D = 10;
uni0430 = -10;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043B = -35;
uni043E = -10;
uni0441 = -10;
uni0442 = 20;
uni0444 = -10;
uni044D = -10;
uni044F = -10;
uni0451 = -10;
};
uni0421 = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -10;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0422 = {
Ccedilla = -10;
G = -10;
J = -80;
Odieresis = -10;
Q = -10;
S = -10;
a2_alt = -50;
backslash = 40;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
parenright = 40;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
u = -20;
uni0410 = -50;
uni0414 = -10;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0422 = 20;
uni0423 = 10;
uni0424 = -20;
uni042D = -20;
uni0432 = -40;
uni0433 = -40;
uni0434 = -40;
uni0435 = -50;
uni0437 = -50;
uni0438 = -40;
uni043A = -40;
uni043B = -40;
uni043C = -40;
uni043D = -40;
uni043E = -50;
uni043F = -40;
uni0440 = -40;
uni0441 = -50;
uni0444 = -50;
uni0445 = -20;
uni0446 = -40;
uni0447 = -40;
uni0448 = -40;
uni0449 = -40;
uni044B = -40;
uni044C = -40;
uni044D = -50;
uni044E = -40;
uni044F = -40;
uni0451 = -30;
uni0491 = -40;
};
uni0423 = {
a2_alt = -55;
braceright = 40;
bracketright = 40;
colon = -20;
comma = -100;
period = -100;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
semicolon = -20;
slash = -30;
uni0410 = -70;
uni0414 = -40;
uni0417 = -15;
uni041E = -15;
uni0421 = -15;
uni0422 = 10;
uni0423 = 16;
uni0424 = -15;
uni042D = -15;
uni042F = -20;
uni0430 = -60;
uni0431 = -20;
uni0432 = -30;
uni0433 = -30;
uni0434 = -70;
uni0435 = -55;
uni0436 = -10;
uni0437 = -55;
uni0438 = -30;
uni0439 = -20;
uni043A = -30;
uni043B = -50;
uni043C = -30;
uni043D = -30;
uni043E = -55;
uni043F = -30;
uni0440 = -30;
uni0441 = -55;
uni0444 = -55;
uni0446 = -30;
uni0447 = -30;
uni0448 = -30;
uni0449 = -30;
uni044B = -30;
uni044C = -30;
uni044D = -55;
uni044E = -30;
uni044F = -30;
uni0451 = -30;
uni0491 = -30;
};
uni0424 = {
comma = -50;
period = -50;
quotedblbase = -50;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0434 = -20;
uni0442 = 10;
};
uni0425 = {
bracketright = 40;
uni0417 = -20;
uni041E = -15;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
};
uni0426 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0429 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni042A = {
quotedblright = -40;
quoteright = -20;
uni0422 = -50;
};
uni042C = {
quotedblleft = -60;
quotedblright = -40;
quoteright = -40;
uni0416 = -20;
uni0422 = -50;
uni0427 = -30;
};
uni042D = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni042E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0431 = {
quoteright = 20;
uni0431 = 15;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0444 = 10;
uni0445 = -10;
};
uni0432 = {
uni0436 = -10;
uni0445 = -15;
uni044F = -10;
};
uni0433 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
uni0434 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0435 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0436 = {
a2_alt = -10;
slash = 30;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0437 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni043A = {
a2_alt = -10;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni043E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0440 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0441 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0442 = {
colon = 20;
comma = -40;
period = -40;
quotedblbase = -40;
quotedblright = 40;
quoteright = 40;
uni0434 = -20;
uni0442 = 30;
uni0443 = 20;
uni044A = 20;
};
uni0443 = {
comma = -30;
period = -30;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
uni0442 = 10;
uni0443 = 10;
};
uni0444 = {
quotedblright = -30;
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0445 = {
a2_alt = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0446 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0449 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni044C = {
quotedblright = -40;
uni0442 = -30;
uni044F = -10;
};
uni044D = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni044E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0451 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0490 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0433 = -40;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
uni0491 = -40;
};
uni0491 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
v = {
comma = -40;
period = -40;
quotedblbase = -40;
quotedblright = 40;
quoteright = 40;
};
w = {
quotedblright = 40;
quoteright = 40;
};
w_alt = {
quotedblright = 40;
quoteright = 40;
};
wacute = {
quotedblright = 40;
quoteright = 40;
};
wcircumflex = {
quotedblright = 40;
quoteright = 40;
};
wdieresis = {
quotedblright = 40;
quoteright = 40;
};
wgrave = {
quotedblright = 40;
quoteright = 40;
};
x = {
a2_alt = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
y2_alt = {
a2_alt = -5;
c = -5;
c_alt = -5;
cacute = -5;
ccaron = -5;
ccedilla = -5;
ccircumflex = -5;
cdotaccent = -5;
comma = -30;
d = -5;
dcaron = -5;
dcroat = -5;
e = -5;
eacute = -5;
ebreve = -5;
ecaron = -5;
ecircumflex = -5;
edieresis = -5;
edotaccent = -5;
egrave = -5;
emacron = -5;
eogonek = -5;
eth = -5;
g = -5;
gbreve = -5;
gcircumflex = -5;
gdotaccent = -5;
o = -5;
oacute = -5;
obreve = -5;
ocircumflex = -5;
odieresis = -5;
oe = -5;
ograve = -5;
ohungarumlaut = -5;
omacron = -5;
oslash = -5;
otilde = -5;
period = -30;
q = -5;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
s = -5;
s_alt = -5;
sacute = -5;
scaron = -5;
scedilla = -5;
scircumflex = -5;
uni0123 = -5;
uni0219 = -5;
};
z = {
quotedblright = 40;
quoteright = 40;
};
zero = {
comma = -20;
period = -20;
quotedblbase = -20;
two = -15;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The Onest Project Authors (https://github.com/googlefonts/onest)";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Onest;
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Dmitri Voloshin, Andrey Kudryavtsev";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Andrey Kudryavtsev, Dmitri Voloshin";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://onest.md";
},
{
key = designerURL;
value = "https://onest.md";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
