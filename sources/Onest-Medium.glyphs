{
.appVersion = "3112";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = PYRS;
},
{
name = panose;
value = (
2,
11,
6,
3,
3,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
9,
31,
33,
35,
37,
38,
47
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1251",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
NULL,
uni000D,
space,
E,
F,
H,
I,
L,
M,
N,
P,
R,
U,
V,
W,
X,
Y,
Z,
b,
d,
h,
i,
l,
m,
n,
p,
q,
u,
v,
w,
x,
z,
period,
comma,
A,
breve,
circumflex,
uni0326,
exclam,
quotedbl,
quotesingle,
numbersign,
percent,
asterisk,
plus,
slash,
colon,
semicolon,
less,
equal,
greater,
at,
bracketleft,
bracketright,
backslash,
asciicircum,
underscore,
braceleft,
bar,
braceright,
Euro,
quotedblbase,
quotesinglbase,
quotedblright,
quoteright,
quotedblleft,
quoteleft,
minus,
hyphen,
endash,
emdash,
grave,
acute,
guillemotright,
guilsinglright,
guillemotleft,
guilsinglleft,
uni00AD,
ellipsis,
uni0445,
uni0431,
uni0432,
uni0433,
uni0434,
uni0436,
uni043A,
uni0438,
uni0439,
uni043B,
uni043C,
uni043D,
uni043F,
uni0442,
uni0444,
uni0446,
uni0447,
uni0448,
uni0449,
uni044A,
uni044B,
uni044C,
uni044E,
uni044F,
uni0410,
uni0415,
uni041C,
uni041D,
uni0420,
uni0422,
uni0425,
T,
uni0412,
uni041F,
uni0413,
uni041B,
uni0414,
uni0411,
uni0416,
uni0417,
uni0418,
uni0419,
uni041A,
uni0423,
uni0424,
uni0426,
uni0427,
uni0428,
uni0429,
uni042A,
uni042B,
uni042C,
uni042D,
uni042E,
uni042F,
uni0440,
O,
a,
c,
e,
f,
g,
j,
o,
r,
t,
y2_alt,
uni0443,
uni0451,
uni0437,
uni044D,
C,
S,
uni0421,
G,
uni041E,
Q,
J,
K_alt,
K,
k_alt,
k,
i_alt,
j_alt,
s_alt,
s,
c_alt,
copyright,
ampersand,
dollar,
parenleft,
parenright,
cent,
section,
uni04C1,
uni04C2,
w_alt,
W_alt,
zero,
one,
two,
three,
four,
seven,
eight,
nine,
uni0430,
uni0435,
uni043E,
uni0441,
uni0218,
uni0219,
uni021A,
uni021B,
question,
uni2116,
uni0401,
asciitilde,
trademark,
registered,
degree,
bullet,
uni27F5,
uni27F6,
arrowup,
arrowdown,
uni21BA,
uni21BB,
uni21B7,
uni21B6,
five,
six,
cedilla,
dotlessi,
ccedilla,
uni0162,
uni0163,
Ccedilla,
scedilla,
uni21A9,
uni2713,
divide,
multiply,
yen,
uni20BD,
uni20B4,
sterling,
Scedilla,
t_alt,
alt_1,
uni2117,
colon.uc,
y_alt,
u_alt,
be_alt,
g_alt,
y,
t2.alt,
f_alt,
hyphen.uc,
uni00AD.uc,
endash.uc,
emdash.uc,
a_alt,
D,
B,
uni0490,
uni0491,
uni0404,
uni0454,
uni0406,
uni0456,
uni0407,
uni0457,
t0163.alt,
t021b.alt,
uni202F,
uni2009,
uni00A0,
map,
logo,
a00E2.alt,
a0103.alt,
a00E4.alt,
a2_alt,
logom,
plusminus,
greaterequal,
lessequal,
twosuperior,
threesuperior,
notequal,
approxequal,
tab_1,
I_alt,
l_alt,
l2_alt,
uniE000,
uniE001,
uniE002,
uniE003,
uniE004,
uniE005,
uniE006,
uniE007,
uniE008,
uniE009,
arrowright,
arrowleft,
uni2197,
uni2198,
uni2199,
uni2196,
uniE010,
uniE011,
uniE012,
uniE013,
uniE014,
uniE015,
uniE016,
uniE017,
uniE018,
uniE019,
uniE020,
uniE021,
uniE022,
uni1E9E,
germandbls,
questiondown,
exclamdown,
ordfeminine,
ordmasculine,
macron,
paragraph,
periodcentered,
caron,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
gravecomb,
acutecomb,
uni0302,
tildecomb,
uni0304,
uni0306,
uni0307,
uni0308,
uni030A,
uni030B,
uni030C,
dieresis,
uni0312,
uni0327,
uni0328,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
ydieresis,
AE,
Eth,
Oslash,
Thorn,
ae,
eth,
oslash,
thorn,
Dcroat,
OE,
oe,
Hbar,
hbar,
Eng,
eng,
Lslash,
lslash,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Ccircumflex,
ccircumflex,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gcircumflex,
gcircumflex,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
Hcircumflex,
hcircumflex,
Itilde,
itilde,
Imacron,
imacron,
Ibreve,
ibreve,
Iogonek,
iogonek,
Idotaccent,
Jcircumflex,
jcircumflex,
Lacute,
lacute,
Nacute,
nacute,
Ncaron,
ncaron,
Omacron,
omacron,
Obreve,
obreve,
Ohungarumlaut,
ohungarumlaut,
Racute,
racute,
Rcaron,
rcaron,
Sacute,
sacute,
Scircumflex,
scircumflex,
Scaron,
scaron,
Tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
kgreenlandic,
uni0122,
uni0136,
uni0137,
uni013B,
uni013C,
uni0145,
uni0146,
uni0156,
uni0157,
Ldot,
ldot,
Tbar,
tbar,
IJ,
ij,
uni0123,
Lcaron,
lcaron,
tcaron,
napostrophe,
dcaron,
dcroat,
uni0237,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
Ygrave,
ygrave,
uni0408,
uni0458,
uni0405,
uni0455,
uni045E,
uni040E
);
}
);
date = "2022-02-06 07:34:46 +0000";
familyName = Onest;
featurePrefixes = (
{
code = "lookup SUB_22 {
	sub colon by colon.uc;
	sub hyphen by hyphen.uc;
	sub endash by endash.uc;
	sub emdash by emdash.uc;
	sub uni00AD by uni00AD.uc;
	sub t by t2.alt;
	sub uni021B by t021b.alt;
	sub uni0163 by t0163.alt;
} SUB_22;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_0 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_0;
lookup SUB_0;
script cyrl;
language dflt;
lookup SUB_0;
lookup SUB_1 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_1;
lookup SUB_0;
script latn;
language dflt;
lookup SUB_0;
lookup SUB_2 {
	sub I by I_alt;
	sub W by W_alt;
	sub i by i_alt;
	sub l by l_alt;
	sub u by u_alt;
	sub w by w_alt;
	sub uni0431 by be_alt;
	sub uni041A by K_alt;
	sub a by a_alt;
	sub c by c_alt;
	sub j by j_alt;
	sub K by K_alt;
	sub k by k_alt;
	sub s by s_alt;
	sub one by alt_1;
	sub uni0430 by a_alt;
	sub uni0441 by c_alt;
	sub y by y_alt;
} SUB_2;
lookup SUB_0;
language AZE;
lookup SUB_0;
lookup SUB_0;
language MOL;
lookup SUB_0;
lookup SUB_0;
language ROM;
lookup SUB_0;
lookup SUB_0;
language TRK;
lookup SUB_0;
lookup SUB_0;
";
tag = salt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 useExtension {
	sub colon by colon.uc;
} SUB_3;
script cyrl;
language dflt;
lookup SUB_3;
script latn;
language dflt;
lookup SUB_3;
language AZE;
lookup SUB_3;
language MOL;
lookup SUB_3;
language ROM;
lookup SUB_3;
language TRK;
lookup SUB_3;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	@SUB_4_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_0_BT_0 colon' lookup SUB_22;
	@SUB_4_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_1_BT_0 hyphen' lookup SUB_22;
	@SUB_4_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_2_BT_0 endash' lookup SUB_22;
	@SUB_4_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_3_BT_0 emdash' lookup SUB_22;
	@SUB_4_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_4_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_4_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_4_5_LA_0;
	@SUB_4_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_4_6_LA_0;
	@SUB_4_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_4_7_LA_0;
} SUB_4;
lookup SUB_5 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_5;
script cyrl;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_6 {
	@SUB_6_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_0_BT_0 colon' lookup SUB_22;
	@SUB_6_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_1_BT_0 hyphen' lookup SUB_22;
	@SUB_6_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_2_BT_0 endash' lookup SUB_22;
	@SUB_6_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_3_BT_0 emdash' lookup SUB_22;
	@SUB_6_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_6_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_6_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_6_5_LA_0;
	@SUB_6_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_6_6_LA_0;
	@SUB_6_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_6_7_LA_0;
} SUB_6;
lookup SUB_7 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_7;
script latn;
language dflt;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8 {
	@SUB_8_0_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_0_BT_0 colon' lookup SUB_22;
	@SUB_8_1_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_1_BT_0 hyphen' lookup SUB_22;
	@SUB_8_2_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_2_BT_0 endash' lookup SUB_22;
	@SUB_8_3_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_3_BT_0 emdash' lookup SUB_22;
	@SUB_8_4_BT_0 = [A Abreve Acircumflex Adieresis B C Ccedilla D E Ecircumflex F G H I Icircumflex Idotaccent J K K_alt L M N O Odieresis P Q R S Scedilla T U Udieresis V W W_alt X Y Z eight five four nine one seven six three two uni0162 uni0218 uni021A uni0401 uni0410 uni0411 uni0412 uni0413 uni0414 uni0415 uni0416 uni0417 uni0418 uni0419 uni041A uni041B uni041C uni041D uni041E uni041F uni0420 uni0421 uni0422 uni0423 uni0424 uni0425 uni0426 uni0427 uni0428 uni0429 uni042A uni042B uni042C uni042D uni042E uni042F uni04C1 zero];
	sub @SUB_8_4_BT_0 uni00AD' lookup SUB_22;
	@SUB_8_5_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub t' lookup SUB_22 @SUB_8_5_LA_0;
	@SUB_8_6_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni0163' lookup SUB_22 @SUB_8_6_LA_0;
	@SUB_8_7_LA_0 = [a a00E2.alt a00E4.alt a0103.alt a2_alt a_alt abreve acircumflex adieresis c c_alt ccedilla d e ecircumflex eight emdash emdash.uc endash endash.uc f five g g_alt hyphen hyphen.uc minus nine o odieresis one q s s_alt scedilla seven six space t t0163.alt t021b.alt t2.alt t_alt three u u_alt udieresis uni00AD uni00AD.uc uni0163 uni0219 uni021B uni0430 uni0431 uni0435 uni0437 uni043E uni0441 uni0444 uni044D uni0451 v y y_alt zero];
	sub uni021B' lookup SUB_22 @SUB_8_7_LA_0;
} SUB_8;
lookup SUB_9 {
	sub asterisk M o l d o v a asterisk by logo;
	sub asterisk m o l d o v a asterisk by logo;
	sub asterisk uni043C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni041C uni043E uni043B uni0434 uni043E uni0432 uni0430 asterisk by logo;
	sub asterisk uni0434 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0414 uni043E uni043B uni043B uni0430 uni0440 asterisk by dollar;
	sub asterisk uni0421 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk uni0441 uni0442 uni0440 uni0430 uni043D uni0430 asterisk by map;
	sub asterisk R u b l a asterisk by uni20BD;
	sub asterisk d o l a r asterisk by dollar;
	sub asterisk uni0420 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk uni0440 uni0443 uni0431 uni043B uni044C asterisk by uni20BD;
	sub asterisk r u b l a asterisk by uni20BD;
	sub asterisk D o l a r asterisk by dollar;
	sub asterisk E u r o asterisk by Euro;
	sub asterisk uni0415 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk e u r o asterisk by Euro;
	sub asterisk uni0435 uni0432 uni0440 uni043E asterisk by Euro;
	sub asterisk uni021A a r a asterisk by map;
	sub asterisk uni021B a r a asterisk by map;
	sub asterisk E U R asterisk by Euro;
	sub asterisk R U B asterisk by uni20BD;
	sub asterisk U A H asterisk by uni20B4;
	sub asterisk U S D asterisk by dollar;
	sub asterisk G B P asterisk by sterling;
	sub asterisk space asterisk by uni202F;
	sub asterisk M asterisk by logom;
} SUB_9;
language AZE;
lookup SUB_4;
lookup SUB_5;
language MOL;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language ROM;
lookup SUB_4;
lookup SUB_5;
lookup SUB_8;
lookup SUB_9;
language TRK;
lookup SUB_4;
lookup SUB_5;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_10;
script cyrl;
language dflt;
lookup SUB_10;
lookup SUB_11 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_11;
script latn;
language dflt;
lookup SUB_10;
lookup SUB_12 {
	sub l by l_alt;
	sub a by a_alt;
	sub f by f_alt;
	sub g by g_alt;
	sub t by t_alt;
	sub one by tab_1;
	sub uni0430 by a_alt;
	sub y by y_alt;
	sub acircumflex by a00E2.alt;
	sub adieresis by a00E4.alt;
	sub abreve by a0103.alt;
} SUB_12;
language AZE;
lookup SUB_10;
language MOL;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_13;
script cyrl;
language dflt;
lookup SUB_13;
lookup SUB_14 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_14;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15 {
	sub l by l2_alt;
	sub a by a2_alt;
	sub t by t2.alt;
	sub uni0430 by a2_alt;
	sub y by y2_alt;
} SUB_15;
language AZE;
lookup SUB_13;
language MOL;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_16 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_16;
script cyrl;
language dflt;
lookup SUB_16;
lookup SUB_18 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_18;
script latn;
language dflt;
lookup SUB_16;
lookup SUB_17 {
	sub uniE000 by zero;
	sub uniE001 by one;
	sub uniE002 by two;
	sub uniE003 by three;
	sub uniE004 by four;
	sub uniE005 by five;
	sub uniE006 by six;
	sub uniE007 by seven;
	sub uniE008 by eight;
	sub uniE009 by nine;
	sub uniE010 by period;
	sub uniE011 by comma;
	sub uniE012 by colon;
	sub uniE013 by semicolon;
	sub uniE014 by quotesingle;
	sub uniE015 by quotedbl;
	sub uniE016 by quoteright;
	sub uniE017 by quotedblright;
	sub uniE018 by quoteleft;
	sub uniE019 by quotedblleft;
	sub uniE020 by quotesinglbase;
	sub uniE021 by quotedblbase;
	sub uniE022 by colon.uc;
} SUB_17;
language AZE;
lookup SUB_16;
language MOL;
lookup SUB_16;
language ROM;
lookup SUB_16;
language TRK;
lookup SUB_16;
script cyrl;
language MOL;
lookup SUB_18;
language ROM;
lookup SUB_18;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_19;
script cyrl;
language dflt;
lookup SUB_19;
lookup SUB_21 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_21;
script latn;
language dflt;
lookup SUB_19;
lookup SUB_20 {
	sub period by uniE010;
	sub comma by uniE011;
	sub quotedbl by uniE015;
	sub quotesingle by uniE014;
	sub colon by uniE012;
	sub semicolon by uniE013;
	sub quotedblbase by uniE021;
	sub quotesinglbase by uniE020;
	sub quotedblright by uniE017;
	sub quoteright by uniE016;
	sub quotedblleft by uniE019;
	sub quoteleft by uniE018;
	sub zero by uniE000;
	sub one by uniE001;
	sub two by uniE002;
	sub three by uniE003;
	sub four by uniE004;
	sub seven by uniE007;
	sub eight by uniE008;
	sub nine by uniE009;
	sub five by uniE005;
	sub six by uniE006;
	sub colon.uc by uniE022;
} SUB_20;
language AZE;
lookup SUB_19;
language MOL;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
script cyrl;
language MOL;
lookup SUB_21;
language ROM;
lookup SUB_21;
";
tag = tnum;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 970;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 970;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 970;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 49 29 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01256 4 36 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01262 2 46 6 27 5 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0123648 2368 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 -100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01258 4 38 8 20 7 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    113,\012    113,\012    100,\012    100,\012    707,\012    0,\012    527,\012    0,\012    \"-200\",\012    970,\012    \"-305\",\012    716,\012    \"-7\",\012    536,\012    \"-7\",\012    \"-251\",\012    970,\012    \"-305\",\012    113,\012    113,\012    100,\012    100,\012    707,\012    0,\012    707,\012    527,\012    0,\012    \"-205\",\012    970,\012    \"-305\",\012    716,\012    \"-7\",\012    747,\012    536,\012    \"-7\",\012    \"-253\",\012    970,\012    \"-305\",\012    24,\012    24,\012    24,\012    24,\012    776,\012    403,\012    970,\012    \"-305\",\012    776,\012    400,\012    970,\012    \"-305\"\012)";
}
);
id = m01;
metricValues = (
{
pos = 970;
},
{
pos = 707;
},
{
pos = 527;
},
{
},
{
pos = -305;
},
{
}
);
name = Medium;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,-295,l),
(520,960,l),
(20,960,l),
(20,-295,l)
);
},
{
closed = 1;
nodes = (
(510,950,l),
(510,-285,l),
(30,-285,l),
(30,950,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 0 95 0 0 0 68 77 0 2 2 1 95 0 1 1 69 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = ".notdef";
},
{
glyphname = NULL;
layers = (
{
layerId = m01;
width = 0;
}
);
note = NULL;
unicode = 0;
},
{
glyphname = uni000D;
layers = (
{
layerId = m01;
width = 190;
}
);
note = uni000D;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 270;
}
);
note = space;
unicode = 32;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,276,l),
(514,276,l),
(514,379,l),
(198,379,l),
(198,603,l),
(567,603,l),
(567,707,l),
(82,707,l),
(82,0,l),
(198,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 5 1 4 4 39 4 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = F;
unicode = 70;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,707,l),
(82,707,l),
(82,0,l),
(198,0,l),
(198,296,l),
(544,296,l),
(544,0,l),
(660,0,l),
(660,707,l),
(544,707,l),
(544,400,l),
(198,400,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 1 5 0 2 1 5 2 103 4 1 0 0 38 77 3 1 1 1 39 1 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = I;
unicode = 73;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,0,l),
(565,103,l),
(197,103,l),
(197,707,l),
(82,707,l),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,551,l),
(410,184,l),
(462,184,l),
(675,551,l),
(675,0,l),
(790,0,l),
(790,707,l),
(648,707,l),
(439,345,l),
(228,707,l),
(82,707,l),
(82,0,l),
(197,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 3 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 38 77 5 4 2 2 2 39 2 78 0 0 0 12 0 12 18 17 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 872;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,529,l),
(550,0,l),
(674,0,l),
(674,707,l),
(559,707,l),
(559,176,l),
(207,707,l),
(82,707,l),
(82,0,l),
(196,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 38 77 4 3 2 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = N;
unicode = 78;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,0,l),
(198,222,l),
(337,222,ls),
(397,222,o),
(495,254,o),
(566,316,o),
(605,408,o),
(605,467,qs),
(605,531,o),
(568,622,o),
(499,680,o),
(402,707,o),
(341,707,qs),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(198,603,l),
(338,603,ls),
(412,603,o),
(489,537,o),
(489,462,qs),
(487,391,o),
(398,324,o),
(331,324,qs),
(198,324,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 38 77 0 2 2 39 2 78 16 15 22 20 15 23 16 23 17 40 32 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 649;
}
);
note = P;
unicode = 80;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,194,o),
(454,65,o),
(489,0,q),
(618,0,l),
(465,274,l),
(497,282,o),
(553,317,o),
(595,370,o),
(620,441,o),
(620,484,qs),
(620,547,o),
(579,633,o),
(508,685,o),
(412,707,o),
(357,707,qs),
(82,707,l),
(82,0,l),
(198,0,l),
(198,259,l),
(347,259,l)
);
},
{
closed = 1;
nodes = (
(198,603,l),
(353,603,ls),
(387,603,o),
(443,592,o),
(483,565,o),
(504,521,o),
(504,487,qs),
(504,449,o),
(479,400,o),
(435,372,o),
(375,360,o),
(341,360,qs),
(198,360,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
14 1 3 4 1 76 7 1 4 6 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 21 20 0 0 31 29 20 32 21 32 0 19 0 19 26 33 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = R;
unicode = 82;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
4 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 0 25 0 25 37 21 37 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,0,l),
(417,0,l),
(683,707,l),
(558,707,l),
(348,124,l),
(137,707,l),
(9,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
1 1 1 0 1 76 3 2 2 0 0 38 77 0 1 1 39 1 78 0 0 0 6 0 6 17 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,115,l),
(141,707,l),
(9,707,l),
(193,0,l),
(359,0,l),
(488,590,l),
(617,0,l),
(781,0,l),
(959,707,l),
(834,707,l),
(700,115,l),
(573,707,l),
(407,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 1 3 1 0 1 76 5 4 3 3 0 0 38 77 2 1 1 1 39 1 78 0 0 0 12 0 12 17 18 17 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 968;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,707,l),
(16,707,l),
(244,354,l),
(9,0,l),
(141,0,l),
(314,263,l),
(483,0,l),
(620,0,l),
(386,355,l),
(613,707,l),
(477,707,l),
(316,444,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,707,l),
(9,707,l),
(267,264,l),
(267,0,l),
(383,0,l),
(383,265,l),
(638,707,l),
(507,707,l),
(326,377,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
8 5 2 3 1 0 1 76 2 1 0 0 38 77 0 1 1 39 1 78 18 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,92,l),
(39,0,l),
(568,0,l),
(568,103,l),
(185,103,l),
(575,616,l),
(575,707,l),
(50,707,l),
(50,603,l),
(427,603,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 3 0 8 1 2 1 2 76 4 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Z;
unicode = 90;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,17,o),
(175,49,o),
(176,66,q),
(236,-7,o),
(349,-7,qs),
(408,-7,o),
(495,35,o),
(553,109,o),
(581,208,o),
(581,265,qs),
(581,327,o),
(550,426,o),
(490,497,o),
(404,536,o),
(349,536,qs),
(300,536,o),
(205,493,o),
(176,453,q),
(176,707,l),
(62,707,l),
(62,0,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(229,121,o),
(193,167,o),
(175,228,o),
(175,262,qs),
(175,293,o),
(193,355,o),
(229,404,o),
(286,434,o),
(323,434,qs),
(361,434,o),
(416,408,o),
(451,362,o),
(468,299,o),
(468,263,qs),
(468,227,o),
(451,165,o),
(416,119,o),
(362,92,o),
(325,92,qs),
(285,92,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
3 1 5 1 18 1 2 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
3 1 5 1 18 1 3 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 38 77 0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 6 3 2 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 38 77 0 5 5 1 97 0 1 1 49 77 6 1 3 3 39 77 7 1 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
23 22 0 0 33 31 22 41 23 41 0 21 0 21 40 35 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = b;
unicode = 98;
},
{
glyphname = d;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,707,l),
(447,470,l),
(416,508,o),
(328,536,o),
(285,536,qs),
(225,536,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,260,qs),
(42,206,o),
(69,110,o),
(127,37,o),
(215,-6,o),
(276,-7,qs),
(331,-5,o),
(419,31,o),
(448,73,q),
(454,0,l),
(561,0,l),
(561,707,l)
);
},
{
closed = 1;
nodes = (
(394,405,o),
(430,360,o),
(447,298,o),
(447,263,qs),
(447,230,o),
(429,168,o),
(392,120,o),
(337,91,o),
(300,91,qs),
(261,91,o),
(206,118,o),
(171,164,o),
(155,226,o),
(155,262,qs),
(155,298,o),
(171,361,o),
(206,407,o),
(260,433,o),
(298,433,qs),
(338,432,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
18 1 4 2 2 1 0 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 3 38 77 6 1 4 4 2 97 0 2 2 49 77 0 5 5 0 97 1 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 38 77 6 1 4 4 2 97 0 2 2 49 77 0 0 0 39 77 0 5 5 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 40 22 40 19 40 35 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = d;
unicode = 100;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,258,ls),
(176,287,o),
(186,348,o),
(222,402,o),
(278,434,o),
(310,434,qs),
(347,434,o),
(395,409,o),
(421,364,o),
(431,305,o),
(431,271,qs),
(431,0,l),
(545,0,l),
(545,289,ls),
(545,343,o),
(524,433,o),
(475,498,o),
(398,536,o),
(342,536,qs),
(293,536,o),
(204,494,o),
(176,452,q),
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 3 1 1 76 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 0 0 0 25 0 25 37 21 35 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,708,o),
(54,675,qs),
(54,643,o),
(94,605,o),
(127,605,qs),
(158,605,o),
(199,643,o),
(199,675,qs),
(199,708,o),
(158,746,o),
(127,746,qs),
(94,746,o)
);
},
{
closed = 1;
nodes = (
(183,527,l),
(69,527,l),
(69,0,l),
(183,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 1 0 97 4 1 0 0 48 77 0 2 2 41 77 5 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
4 1 0 0 1 2 0 1 105 0 2 2 41 77 5 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = i;
unicode = 105;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,0,l),
(175,0,l),
(175,278,ls),
(175,301,o),
(183,356,o),
(207,403,o),
(252,434,o),
(282,434,qs),
(313,434,o),
(348,409,o),
(366,371,o),
(371,324,o),
(371,301,qs),
(371,0,l),
(484,0,l),
(484,278,ls),
(484,305,o),
(492,360,o),
(515,404,o),
(556,434,o),
(588,434,qs),
(618,434,o),
(654,410,o),
(673,371,o),
(679,323,o),
(679,299,qs),
(679,0,l),
(793,0,l),
(793,341,ls),
(793,381,o),
(775,452,o),
(736,506,o),
(671,536,o),
(626,536,qs),
(573,536,o),
(494,493,o),
(463,451,q),
(444,490,o),
(376,536,o),
(320,536,qs),
(231,536,o),
(176,462,q),
(171,527,l),
(62,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
6 1 2 3 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
6 1 2 3 7 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
5 1 3 3 0 97 8 7 1 3 0 0 49 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
8 1 7 7 41 77 5 1 3 3 0 97 1 1 0 0 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 43 0 43 21 37 21 37 21 36 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 850;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,251,ls),
(176,281,o),
(189,347,o),
(220,401,o),
(277,434,o),
(312,434,qs),
(349,434,o),
(396,409,o),
(422,364,o),
(431,306,o),
(431,272,qs),
(431,0,l),
(545,0,l),
(545,289,ls),
(545,342,o),
(524,432,o),
(475,498,o),
(398,536,o),
(342,536,qs),
(293,536,o),
(206,495,o),
(177,454,q),
(171,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 3 0 97 1 1 0 0 41 77 5 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 5 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 25 0 25 37 21 35 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = n;
unicode = 110;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,57,l),
(208,24,o),
(297,-7,o),
(347,-7,qs),
(405,-7,o),
(492,33,o),
(551,106,o),
(581,206,o),
(581,265,qs),
(581,328,o),
(550,427,o),
(489,497,o),
(403,536,o),
(349,536,qs),
(297,536,o),
(207,494,o),
(176,452,q),
(170,527,l),
(62,527,l),
(62,-205,l),
(176,-205,l)
);
},
{
closed = 1;
nodes = (
(175,191,o),
(175,264,qs),
(175,297,o),
(194,360,o),
(232,406,o),
(286,434,o),
(323,434,qs),
(361,434,o),
(416,408,o),
(451,362,o),
(468,299,o),
(468,263,qs),
(468,227,o),
(451,165,o),
(416,119,o),
(362,92,o),
(325,92,qs),
(251,93,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 5 0 19 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 0 97 1 1 0 0 41 77 7 1 4 4 2 97 0 2 2 47 77 6 1 3 3 43 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 5 0 97 1 1 0 0 41 77 7 1 4 4 2 97 0 2 2 47 77 6 1 3 3 0 97 1 1 0 0 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 0 2 2 47 77 6 1 3 3 0 95 0 0 0 41 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 21 0 0 32 30 21 38 22 38 0 20 0 20 40 35 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,527,l),
(450,471,l),
(422,504,o),
(338,535,o),
(292,536,qs),
(226,535,o),
(134,492,o),
(72,418,o),
(42,319,o),
(42,260,qs),
(42,206,o),
(70,109,o),
(129,35,o),
(217,-8,o),
(283,-8,qs),
(332,-8,o),
(418,24,o),
(447,58,q),
(447,-205,l),
(561,-205,l),
(561,527,l)
);
},
{
closed = 1;
nodes = (
(395,405,o),
(431,358,o),
(447,296,o),
(447,262,qs),
(447,229,o),
(429,167,o),
(393,120,o),
(338,91,o),
(301,91,qs),
(262,91,o),
(207,118,o),
(172,164,o),
(155,226,o),
(155,262,qs),
(155,298,o),
(171,361,o),
(206,407,o),
(261,434,o),
(299,434,qs),
(339,433,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 2 2 1 1 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 3 2 1 1 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 2 97 3 1 2 2 49 77 0 5 5 1 97 0 1 1 47 77 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 4 4 2 97 3 1 2 2 49 77 0 5 5 1 97 0 1 1 47 77 0 0 0 2 97 3 1 2 2 49 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 2 97 0 2 2 49 77 0 5 5 1 97 0 1 1 47 77 0 0 0 3 95 0 3 3 41 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 40 22 40 19 40 35 16 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = q;
unicode = 113;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 41 77 4 1 0 0 2 97 0 2 2 47 2 78 1 0 16 15 12 10 5 4 0 19 1 19 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,0,l),
(545,527,l),
(419,527,l),
(274,109,l),
(128,527,l),
(2,527,l),
(200,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 2 0 1 76 1 1 0 0 41 77 0 2 2 39 2 78 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,0,l),
(424,388,l),
(543,0,l),
(677,0,l),
(841,527,l),
(719,527,l),
(609,121,l),
(490,527,l),
(362,527,l),
(243,121,l),
(133,527,l),
(7,527,l),
(170,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
10 5 2 3 3 0 1 76 2 1 2 0 0 41 77 4 1 3 3 39 3 78 18 17 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,265,l),
(507,527,l),
(377,527,l),
(265,341,l),
(150,527,l),
(18,527,l),
(190,268,l),
(9,0,l),
(135,0,l),
(259,188,l),
(387,0,l),
(518,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 7 4 1 4 0 1 1 76 2 1 1 1 41 77 4 3 2 0 0 39 0 78 0 0 0 11 0 11 18 18 18 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = x;
unicode = 120;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,527,l),
(42,428,l),
(328,428,l),
(42,87,l),
(42,0,l),
(474,0,l),
(474,98,l),
(186,98,l),
(474,440,l),
(474,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 5 1 1 0 2 76 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 517;
}
);
note = z;
unicode = 122;
},
{
glyphname = period;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,99,o),
(62,65,qs),
(62,30,o),
(103,-8,o),
(135,-8,qs),
(167,-8,o),
(208,30,o),
(208,65,qs),
(208,99,o),
(167,139,o),
(135,139,qs),
(103,139,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 47 1 78 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,-91,o),
(62,-108,q),
(92,-149,l),
(117,-141,o),
(163,-104,o),
(199,-54,o),
(221,3,o),
(221,32,qs),
(221,37,o),
(221,42,qs),
(221,74,o),
(187,132,o),
(142,135,qs),
(139,135,o),
(136,135,qs),
(109,135,o),
(65,98,o),
(65,63,qs),
(65,31,o),
(104,-6,o),
(134,-8,q),
(126,-39,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
19 18 2 0 73 0 1 1 0 97 0 0 0 47 0 78 68 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
note = comma;
unicode = 44;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 1 4 2 1 76 6 1 4 0 0 1 4 0 104 0 2 2 38 77 5 3 2 1 1 39 1 78 8 8 0 0 8 10 8 10 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = A;
unicode = 65;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,702,o),
(143,646,o),
(191,611,o),
(255,595,o),
(292,595,qs),
(329,595,o),
(393,611,o),
(442,647,o),
(471,703,o),
(472,743,q),
(378,743,l),
(376,705,o),
(328,675,o),
(293,675,qs),
(258,675,o),
(210,705,o),
(208,743,q),
(114,743,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 0 0 0 17 0 17 36 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 586;
}
);
note = breve;
unicode = 728;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,769,l),
(108,599,l),
(213,599,l),
(286,692,l),
(360,599,l),
(466,599,l),
(323,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 574;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-340,-256,o),
(-360,-270,q),
(-336,-303,l),
(-313,-295,o),
(-273,-264,o),
(-244,-222,o),
(-227,-175,o),
(-227,-152,qs),
(-227,-121,o),
(-261,-74,o),
(-296,-74,qs),
(-322,-74,o),
(-358,-106,o),
(-358,-132,qs),
(-358,-157,o),
(-325,-187,o),
(-299,-189,q),
(-305,-214,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
15 14 2 0 73 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,707,l),
(83,707,l),
(96,225,l),
(193,225,l)
);
},
{
closed = 1;
nodes = (
(72,96,o),
(72,63,qs),
(72,30,o),
(112,-8,o),
(145,-8,qs),
(177,-8,o),
(218,31,o),
(218,63,qs),
(218,96,o),
(178,137,o),
(145,137,qs),
(112,137,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 2 2 3 97 0 3 3 47 3 78 5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 290;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,707,l),
(67,455,l),
(152,455,l),
(165,707,l)
);
},
{
closed = 1;
nodes = (
(223,707,l),
(236,455,l),
(321,455,l),
(335,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 38 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,707,l),
(75,455,l),
(160,455,l),
(173,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 38 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 235;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,433,l),
(178,433,l),
(160,273,l),
(54,273,l),
(54,175,l),
(149,175,l),
(129,0,l),
(230,0,l),
(249,175,l),
(369,175,l),
(349,0,l),
(449,0,l),
(469,175,l),
(575,175,l),
(575,273,l),
(480,273,l),
(498,433,l),
(604,433,l),
(604,531,l),
(509,531,l),
(528,707,l),
(428,707,l),
(408,531,l),
(289,531,l),
(309,707,l),
(209,707,l),
(207,685,o),
(204,663,qs),
(195,576,ls),
(193,554,o),
(190,531,q),
(83,531,l)
);
},
{
closed = 1;
nodes = (
(397,433,l),
(380,273,l),
(260,273,l),
(278,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
14 11 2 5 10 8 2 6 7 5 6 103 2 1 0 0 38 77 15 12 2 4 4 1 95 16 13 3 3 1 1 41 77 9 1 7 7 39 7 78 0 0 35 34 33 32 0 31 0 31 30 29 28 27 26 25 24 23 17 17 17 17 17 17 17 17 21 17 8 31 
CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,415,o),
(349,459,o),
(370,519,o),
(370,554,qs),
(370,626,o),
(289,719,o),
(213,719,qs),
(135,719,o),
(54,626,o),
(54,554,qs),
(54,519,o),
(74,459,o),
(115,415,o),
(174,389,o),
(213,389,qs),
(251,389,o)
);
},
{
closed = 1;
nodes = (
(694,707,l),
(580,707,l),
(136,0,l),
(250,0,l)
);
},
{
closed = 1;
nodes = (
(277,585,o),
(277,554,qs),
(277,523,o),
(249,476,o),
(213,476,qs),
(175,476,o),
(145,522,o),
(145,554,qs),
(145,585,o),
(175,632,o),
(213,632,qs),
(249,632,o)
);
},
{
closed = 1;
nodes = (
(720,15,o),
(760,59,o),
(781,119,o),
(781,154,qs),
(781,226,o),
(699,319,o),
(623,319,qs),
(545,319,o),
(464,226,o),
(464,154,qs),
(464,119,o),
(484,59,o),
(525,15,o),
(584,-11,o),
(623,-11,qs),
(661,-11,o)
);
},
{
closed = 1;
nodes = (
(666,219,o),
(681,198,o),
(687,170,o),
(687,154,qs),
(687,123,o),
(659,76,o),
(622,76,qs),
(586,76,o),
(555,122,o),
(555,154,qs),
(555,186,o),
(586,232,o),
(622,232,qs),
(641,232,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 10 1 0 7 5 0 105 0 7 14 1 8 9 7 8 106 12 1 4 4 1 97 2 1 1 1 46 77 0 9 9 3 97 13 6 11 3 3 3 39 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 10 1 0 7 5 0 105 0 7 14 1 8 9 7 8 106 0 2 2 38 77 12 1 4 4 1 97 0 1 1 46 77 0 9 9 3 97 13 6 11 3 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 10 1 0 7 5 0 105 0 7 14 1 8 9 7 8 106 0 2 2 38 77 12 1 4 4 1 97 0 1 1 46 77 11 1 3 3 39 77 0 9 9 6 97 13 1 6 6 47 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
49 48 33 32 21 20 16 16 1 0 55 53 48 61 49 61 41 39 32 47 33 47 27 25 20 31 21 31 16 19 16 19 18 17 9 7 0 15 1 15 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 835;
}
);
note = percent;
unicode = 37;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,630,l),
(87,661,l),
(64,589,l),
(161,559,l),
(98,476,l),
(162,430,l),
(220,510,l),
(279,429,l),
(342,475,l),
(282,556,l),
(377,587,l),
(353,661,l),
(259,630,l),
(259,729,l),
(181,729,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
13 12 11 10 9 8 7 6 5 4 3 2 1 13 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 38 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
0 0 0 14 0 14 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,308,l),
(233,140,l),
(330,140,l),
(330,308,l),
(495,308,l),
(495,406,l),
(330,406,l),
(330,573,l),
(233,573,l),
(233,406,l),
(69,406,l),
(69,308,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 1 0 4 1 87 2 1 0 5 1 3 4 0 3 103 0 1 1 4 95 0 4 1 4 79 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = plus;
unicode = 43;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,-169,l),
(452,792,l),
(339,792,l),
(34,-169,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = slash;
unicode = 47;
},
{
glyphname = colon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,455,o),
(62,422,qs),
(62,387,o),
(102,349,o),
(135,349,qs),
(167,349,o),
(208,387,o),
(208,422,qs),
(208,455,o),
(168,496,o),
(135,496,qs),
(102,496,o)
);
},
{
closed = 1;
nodes = (
(62,97,o),
(62,64,qs),
(62,30,o),
(102,-9,o),
(135,-9,qs),
(167,-9,o),
(208,30,o),
(208,64,qs),
(208,97,o),
(168,138,o),
(135,138,qs),
(102,138,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 47 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
kernLeft = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,455,o),
(70,422,qs),
(70,387,o),
(109,349,o),
(143,349,qs),
(176,349,o),
(216,387,o),
(216,422,qs),
(216,455,o),
(176,496,o),
(143,496,qs),
(109,496,o)
);
},
{
closed = 1;
nodes = (
(87,-90,o),
(62,-107,q),
(92,-149,l),
(118,-140,o),
(165,-101,o),
(200,-51,o),
(221,7,o),
(221,35,qs),
(221,53,o),
(213,89,o),
(194,117,o),
(164,136,o),
(142,136,qs),
(139,136,o),
(136,136,qs),
(108,136,o),
(65,99,o),
(65,64,qs),
(65,33,o),
(102,-5,o),
(133,-7,q),
(126,-37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
31 30 2 2 73 4 1 0 0 1 3 0 1 105 0 3 3 2 97 0 2 2 47 2 78 1 0 21 17 13 12 7 5 0 11 1 11 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,90,l),
(403,206,l),
(165,357,l),
(403,506,l),
(403,621,l),
(34,382,l),
(34,327,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,436,l),
(490,534,l),
(64,534,l),
(64,436,l)
);
},
{
closed = 1;
nodes = (
(490,180,l),
(490,278,l),
(64,278,l),
(64,180,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
0 2 0 3 2 3 99 0 1 1 0 95 0 0 0 41 1 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,621,l),
(64,505,l),
(302,355,l),
(64,205,l),
(64,90,l),
(433,329,l),
(433,384,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = greater;
unicode = 62;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(699,39,o),
(742,39,qs),
(798,39,o),
(870,91,o),
(911,172,o),
(927,270,o),
(927,315,qs),
(927,403,o),
(870,552,o),
(764,661,o),
(615,722,o),
(522,722,qs),
(420,722,o),
(251,655,o),
(131,530,o),
(65,353,o),
(65,244,qs),
(65,152,o),
(123,-3,o),
(232,-115,o),
(387,-177,o),
(484,-177,qs),
(522,-177,o),
(582,-171,o),
(616,-163,q),
(613,-139,o),
(607,-88,o),
(605,-64,q),
(589,-67,o),
(564,-72,o),
(539,-75,o),
(511,-76,o),
(492,-76,qs),
(415,-76,o),
(294,-26,o),
(212,63,o),
(169,186,o),
(169,260,qs),
(170,338,o),
(216,472,o),
(305,571,o),
(437,627,o),
(525,627,qs),
(597,627,o),
(711,580,o),
(789,493,o),
(831,371,o),
(831,296,qs),
(831,269,o),
(824,210,o),
(804,159,o),
(771,126,o),
(744,126,qs),
(718,128,o),
(693,154,o),
(684,189,o),
(684,207,qs),
(684,209,o),
(685,232,o),
(687,250,qs),
(693,306,o),
(707,416,o),
(717,471,q),
(651,479,l),
(627,431,l),
(619,449,o),
(591,475,o),
(556,491,o),
(519,498,o),
(501,498,qs),
(450,498,o),
(370,459,o),
(314,392,o),
(284,304,o),
(284,255,qs),
(284,213,o),
(306,136,o),
(352,78,o),
(421,44,o),
(468,44,qs),
(511,44,o),
(590,78,o),
(617,117,q),
(632,78,o)
);
},
{
closed = 1;
nodes = (
(565,390,o),
(588,357,o),
(599,314,o),
(599,292,qs),
(599,266,o),
(586,209,o),
(557,161,o),
(512,130,o),
(479,130,qs),
(452,130,o),
(413,152,o),
(388,189,o),
(378,232,o),
(378,253,qs),
(378,257,o),
(378,261,qs),
(379,291,o),
(396,346,o),
(428,386,o),
(474,410,o),
(503,410,qs),
(529,410,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
20 19 18 3 8 1 55 1 4 0 58 1 5 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
20 19 18 3 8 1 55 1 4 7 58 1 5 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 10 1 8 2 1 8 105 9 1 2 7 1 0 4 2 0 105 0 4 0 5 4 5 101 0 3 3 6 97 0 6 6 46 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 10 1 8 2 1 8 105 0 0 7 2 0 89 9 1 2 0 7 4 2 7 105 0 4 0 5 4 5 101 0 3 3 6 97 0 6 6 46 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
85 84 97 95 84 105 85 105 82 80 72 70 62 60 52 49 41 39 31 30 40 34 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 991;
}
);
note = at;
unicode = 64;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,-84,l),
(191,-84,l),
(191,693,l),
(307,693,l),
(307,787,l),
(82,787,l),
(82,-178,l),
(307,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 4 1 3 2 3 79 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 337;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,693,l),
(146,693,l),
(146,-84,l),
(30,-84,l),
(30,-178,l),
(255,-178,l),
(255,787,l),
(30,787,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 337;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,792,l),
(34,792,l),
(339,-170,l),
(452,-170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,486,l),
(160,486,l),
(247,623,l),
(332,486,l),
(441,486,l),
(287,712,l),
(206,712,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 495;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(451,-159,l),
(451,-62,l),
(-8,-62,l),
(-8,-159,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 443;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,787,l),
(257,787,ls),
(190,787,o),
(131,727,o),
(131,649,qs),
(131,445,ls),
(131,422,o),
(114,380,o),
(73,350,o),
(32,350,q),
(32,259,l),
(67,259,o),
(107,240,o),
(126,208,o),
(131,168,o),
(131,147,qs),
(131,-61,ls),
(131,-126,o),
(197,-178,o),
(257,-178,qs),
(353,-178,l),
(353,-84,l),
(288,-84,ls),
(270,-84,o),
(251,-75,o),
(241,-56,o),
(239,-25,o),
(239,-4,qs),
(239,175,ls),
(239,194,o),
(233,234,o),
(219,269,o),
(194,296,o),
(175,304,q),
(194,312,o),
(219,340,o),
(233,374,o),
(239,413,o),
(239,433,qs),
(239,609,ls),
(239,624,o),
(240,654,o),
(248,678,o),
(268,693,o),
(288,693,qs),
(353,693,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
11 1 3 4 1 76 0 5 6 1 0 4 5 0 105 0 4 0 3 1 4 3 105 0 1 2 2 1 89 0 1 1 2 95 0 2 1 2 79 1 0 44 42 36 35 34 33 26 24 23 21 0 45 1 45 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,800,l),
(82,800,l),
(82,-171,l),
(189,-171,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 271;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,-178,l),
(150,-178,ls),
(217,-178,o),
(276,-118,o),
(276,-40,qs),
(276,165,ls),
(276,187,o),
(292,229,o),
(334,259,o),
(375,259,q),
(375,350,l),
(340,350,o),
(300,369,o),
(281,401,o),
(276,441,o),
(276,462,qs),
(276,670,ls),
(276,735,o),
(214,787,o),
(154,787,qs),
(54,787,l),
(54,693,l),
(119,693,ls),
(137,693,o),
(156,684,o),
(166,665,o),
(168,634,o),
(168,613,qs),
(168,434,ls),
(168,415,o),
(174,375,o),
(188,340,o),
(213,312,o),
(232,305,q),
(213,297,o),
(188,269,o),
(174,235,o),
(168,195,o),
(168,176,qs),
(168,0,ls),
(168,-15,o),
(167,-45,o),
(159,-69,o),
(138,-84,o),
(119,-84,qs),
(54,-84,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 4 3 1 76 0 2 0 1 3 2 1 105 0 3 0 4 0 3 4 105 6 1 0 5 5 0 89 6 1 0 0 5 95 0 5 0 5 79 1 0 44 42 36 35 34 33 26 24 23 21 0 45 1 45 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(625,34,o),
(665,76,q),
(651,96,o),
(622,134,o),
(607,154,q),
(572,121,o),
(502,94,o),
(454,94,qs),
(388,94,o),
(290,161,o),
(275,221,q),
(492,221,l),
(508,314,l),
(255,314,l),
(253,333,o),
(253,374,o),
(255,393,q),
(523,393,l),
(539,486,l),
(275,486,l),
(293,546,o),
(384,611,o),
(448,611,qs),
(496,611,o),
(564,581,o),
(599,551,q),
(659,633,l),
(617,675,o),
(517,714,o),
(449,714,qs),
(333,714,o),
(184,596,o),
(154,486,q),
(63,486,l),
(47,393,l),
(141,393,l),
(138,374,o),
(138,334,o),
(139,314,q),
(60,314,l),
(44,221,l),
(151,221,l),
(180,111,o),
(332,-8,o),
(452,-8,qs),
(519,-8,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 91 values pushed */
18 1 6 5 19 1 4 6 40 1 11 1 43 1 0 11 4 76 7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 46 77 0 11 11 0 97 12 1 0 0 47 0 78 1 0 38 36 34 33 32 31 28 27 26 25 23 21 16 14 12 11 10 9 6 5 4 3 0 45 1 45 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = quotedblbase;
kernLeft = period;
kernRight = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,-82,o),
(62,-100,q),
(91,-139,l),
(116,-131,o),
(161,-93,o),
(195,-44,o),
(216,12,o),
(216,40,qs),
(216,42,o),
(216,44,qs),
(216,78,o),
(178,133,o),
(140,136,qs),
(138,136,o),
(137,136,qs),
(106,136,o),
(65,99,o),
(65,67,qs),
(65,37,o),
(101,0,o),
(131,-2,q),
(124,-32,o)
);
},
{
closed = 1;
nodes = (
(292,-82,o),
(267,-100,q),
(296,-139,l),
(321,-131,o),
(366,-93,o),
(400,-44,o),
(421,12,o),
(421,40,qs),
(421,42,o),
(421,44,qs),
(421,78,o),
(383,133,o),
(345,136,qs),
(343,136,o),
(342,136,qs),
(311,136,o),
(270,99,o),
(270,67,qs),
(270,37,o),
(306,0,o),
(336,-2,q),
(329,-32,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
41 40 19 18 4 0 73 3 1 1 1 0 97 2 1 0 0 39 0 78 28 27 23 22 20 16 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,-82,o),
(62,-100,q),
(91,-139,l),
(116,-131,o),
(161,-93,o),
(195,-44,o),
(216,12,o),
(216,40,qs),
(216,42,o),
(216,44,qs),
(216,78,o),
(177,133,o),
(140,135,qs),
(137,135,o),
(134,135,qs),
(106,135,o),
(65,99,o),
(65,67,qs),
(65,37,o),
(101,0,o),
(131,-2,q),
(124,-32,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
19 18 2 0 73 0 1 1 0 97 0 0 0 39 0 78 68 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,513,o),
(62,496,q),
(91,456,l),
(116,464,o),
(161,501,o),
(196,550,o),
(216,606,o),
(216,633,qs),
(216,652,o),
(208,687,o),
(190,714,o),
(161,730,o),
(140,731,qs),
(138,731,o),
(137,731,qs),
(107,731,o),
(65,695,o),
(65,661,qs),
(65,631,o),
(100,595,o),
(131,593,q),
(124,564,o)
);
},
{
closed = 1;
nodes = (
(292,513,o),
(267,496,q),
(296,456,l),
(321,464,o),
(366,501,o),
(401,550,o),
(421,606,o),
(421,633,qs),
(421,635,o),
(421,637,qs),
(421,672,o),
(385,729,o),
(345,731,qs),
(343,731,o),
(342,731,qs),
(312,731,o),
(270,695,o),
(270,661,qs),
(270,631,o),
(305,595,o),
(336,593,q),
(329,564,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
41 40 19 18 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 0 1 97 3 1 1 1 46 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
68 29 68 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,513,o),
(62,496,q),
(91,456,l),
(116,464,o),
(161,501,o),
(195,550,o),
(216,606,o),
(216,633,qs),
(216,652,o),
(208,687,o),
(190,714,o),
(160,731,o),
(140,731,qs),
(109,731,o),
(65,695,o),
(65,661,qs),
(65,631,o),
(101,595,o),
(131,593,q),
(124,564,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 97 0 1 1 46 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,694,o),
(423,711,q),
(394,751,l),
(368,742,o),
(323,705,o),
(288,656,o),
(268,600,o),
(268,573,qs),
(268,555,o),
(276,520,o),
(295,493,o),
(324,475,o),
(345,475,qs),
(348,475,o),
(351,475,qs),
(378,475,o),
(420,511,o),
(420,545,qs),
(420,574,o),
(384,611,o),
(353,613,q),
(360,643,o)
);
},
{
closed = 1;
nodes = (
(193,694,o),
(218,711,q),
(189,751,l),
(163,742,o),
(118,705,o),
(83,656,o),
(63,600,o),
(63,573,qs),
(63,555,o),
(71,520,o),
(89,493,o),
(118,475,o),
(139,475,qs),
(142,475,o),
(145,475,qs),
(173,475,o),
(215,511,o),
(215,545,qs),
(215,574,o),
(179,611,o),
(148,613,q),
(155,643,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
41 40 19 18 4 0 74 2 1 0 1 1 0 89 2 1 0 0 1 97 3 1 1 0 1 81 68 29 68 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 485;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,694,o),
(217,711,q),
(188,751,l),
(163,742,o),
(118,705,o),
(83,656,o),
(63,600,o),
(63,573,qs),
(63,555,o),
(71,520,o),
(89,493,o),
(118,475,o),
(139,475,qs),
(142,475,o),
(145,475,qs),
(172,475,o),
(214,511,o),
(214,545,qs),
(214,574,o),
(178,611,o),
(148,613,q),
(155,643,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
19 18 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 68 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(471,308,l),
(471,406,l),
(69,406,l),
(69,308,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,237,l),
(388,335,l),
(69,335,l),
(69,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(533,237,l),
(533,335,l),
(69,335,l),
(69,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(736,237,l),
(736,335,l),
(69,335,l),
(69,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 805;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,769,l),
(167,606,l),
(262,606,l),
(165,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 1 133 0 0 0 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 362;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,606,l),
(312,769,l),
(197,769,l),
(100,606,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 362;
}
);
note = acute;
unicode = 180;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,86,l),
(171,86,l),
(291,267,l),
(171,449,l),
(54,449,l),
(176,267,l)
);
},
{
closed = 1;
nodes = (
(252,86,l),
(370,86,l),
(491,267,l),
(370,449,l),
(252,449,l),
(377,267,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,86,l),
(171,86,l),
(292,267,l),
(171,449,l),
(54,449,l),
(177,265,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 326;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,449,l),
(154,449,l),
(34,267,l),
(154,86,l),
(272,86,l),
(147,267,l)
);
},
{
closed = 1;
nodes = (
(471,449,l),
(353,449,l),
(233,267,l),
(353,86,l),
(471,86,l),
(348,267,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 8 5 2 4 0 1 1 76 3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 18 18 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 525;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,449,l),
(155,449,l),
(34,267,l),
(154,86,l),
(273,86,l),
(148,270,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
5 2 2 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 327;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,237,l),
(386,335,l),
(69,335,l),
(69,237,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,99,o),
(52,65,qs),
(52,30,o),
(93,-8,o),
(125,-8,qs),
(157,-8,o),
(198,30,o),
(198,65,qs),
(198,99,o),
(157,139,o),
(125,139,qs),
(93,139,o)
);
},
{
closed = 1;
nodes = (
(299,99,o),
(299,65,qs),
(299,30,o),
(340,-8,o),
(372,-8,qs),
(404,-8,o),
(445,30,o),
(445,65,qs),
(445,99,o),
(404,139,o),
(372,139,qs),
(340,139,o)
);
},
{
closed = 1;
nodes = (
(545,99,o),
(545,65,qs),
(545,30,o),
(586,-8,o),
(618,-8,qs),
(650,-8,o),
(691,30,o),
(691,65,qs),
(691,99,o),
(650,139,o),
(618,139,qs),
(586,139,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 4 7 2 6 5 0 0 1 97 5 3 2 1 1 47 1 78 25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = uni0445;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,265,l),
(507,527,l),
(377,527,l),
(265,341,l),
(150,527,l),
(18,527,l),
(191,267,l),
(9,0,l),
(135,0,l),
(259,188,l),
(387,0,l),
(518,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 7 4 1 4 0 1 1 76 2 1 1 1 22 77 4 3 2 0 0 21 0 78 0 0 0 11 0 11 18 18 18 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = uni0445;
unicode = 1093;
},
{
glyphname = uni0431;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,511,o),
(197,558,o),
(246,591,o),
(278,596,qs),
(305,600,o),
(375,607,o),
(447,614,o),
(511,623,o),
(529,631,q),
(529,740,l),
(494,728,o),
(421,720,o),
(386,716,qs),
(340,710,o),
(254,698,o),
(178,673,o),
(115,626,o),
(91,586,qs),
(62,535,o),
(43,403,o),
(43,340,qs),
(43,277,o),
(65,154,o),
(123,56,o),
(224,-6,o),
(303,-7,qs),
(363,-7,o),
(458,31,o),
(525,100,o),
(560,198,o),
(560,256,qs),
(560,310,o),
(528,397,o),
(468,459,o),
(383,493,o),
(329,493,qs),
(280,493,o),
(184,458,o),
(152,418,q),
(153,450,o)
);
},
{
closed = 1;
nodes = (
(216,119,o),
(181,161,o),
(165,216,o),
(165,246,qs),
(166,277,o),
(188,331,o),
(225,370,o),
(278,391,o),
(311,391,qs),
(343,391,o),
(393,369,o),
(428,330,o),
(447,275,o),
(447,244,qs),
(447,214,o),
(429,159,o),
(393,118,o),
(340,92,o),
(306,92,qs),
(269,92,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 3 0 1 76 30 29 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 28 1 78 41 40 51 49 40 59 41 59 40 34 5 7 24 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = uni0431;
unicode = 1073;
},
{
glyphname = uni0432;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(312,0,ls),
(353,0,o),
(427,17,o),
(483,54,o),
(517,115,o),
(517,157,qs),
(517,202,o),
(472,267,o),
(424,280,q),
(459,299,o),
(491,359,o),
(491,394,qs),
(490,439,o),
(453,492,o),
(394,520,o),
(322,527,o),
(287,527,qs),
(62,527,l),
(62,0,l)
);
},
{
closed = 1;
nodes = (
(300,432,o),
(335,430,o),
(363,418,o),
(382,395,o),
(382,374,qs),
(382,350,o),
(357,324,o),
(318,312,o),
(269,311,o),
(246,311,qs),
(177,311,l),
(177,432,l),
(285,432,ls)
);
},
{
closed = 1;
nodes = (
(177,225,l),
(322,225,ls),
(356,225,o),
(403,199,o),
(403,161,qs),
(403,140,o),
(383,115,o),
(352,100,o),
(313,96,o),
(293,96,qs),
(177,96,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 22 77 7 1 4 4 1 95 0 1 1 21 1 78 33 32 19 19 41 39 32 42 33 42 19 31 19 29 50 46 32 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = uni0432;
unicode = 1074;
},
{
glyphname = uni0433;
kernLeft = uni0432;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,428,l),
(443,428,l),
(443,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 22 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = uni0433;
unicode = 1075;
},
{
glyphname = uni0434;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,282,o),
(109,228,o),
(99,173,o),
(92,155,qs),
(85,134,o),
(46,97,o),
(17,97,q),
(17,-154,l),
(128,-154,l),
(128,0,l),
(488,0,l),
(488,-154,l),
(599,-154,l),
(599,97,l),
(530,97,l),
(530,527,l),
(124,527,l),
(124,478,o),
(122,387,o),
(120,354,qs),
(119,328,o)
);
},
{
closed = 1;
nodes = (
(183,97,l),
(195,117,o),
(209,161,o),
(217,206,o),
(221,247,o),
(222,269,qs),
(224,308,o),
(226,392,o),
(228,428,q),
(416,428,l),
(416,97,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 2 1 2 83 0 6 6 0 95 0 0 0 22 77 7 5 2 1 1 3 95 0 3 3 21 3 78 24 23 17 17 17 17 17 19 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0434;
unicode = 1076;
},
{
glyphname = uni0436;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,213,l),
(542,213,l),
(664,0,l),
(798,0,l),
(631,276,l),
(784,527,l),
(657,527,l),
(534,311,l),
(460,311,l),
(460,527,l),
(347,527,l),
(347,311,l),
(273,311,l),
(150,527,l),
(23,527,l),
(176,276,l),
(9,0,l),
(143,0,l),
(265,213,l),
(347,213,l),
(347,0,l),
(460,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
16 5 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 22 77 10 9 7 3 1 1 21 1 78 0 0 0 21 0 21 17 18 17 17 17 17 18 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = uni0436;
unicode = 1078;
},
{
glyphname = uni043A;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,213,l),
(263,213,l),
(402,0,l),
(534,0,l),
(354,276,l),
(521,527,l),
(391,527,l),
(256,312,l),
(175,312,l),
(175,527,l),
(62,527,l),
(62,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 12 0 12 17 18 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = uni043A;
unicode = 1082;
},
{
glyphname = uni0438;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(433,355,q),
(433,0,l),
(547,0,l),
(547,527,l),
(444,527,l),
(176,165,l),
(176,527,l),
(62,527,l),
(62,0,l),
(168,0,l),
(432,353,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
9 4 2 0 1 1 76 2 1 1 1 22 77 3 1 0 0 21 0 78 17 18 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = uni0438;
unicode = 1080;
},
{
glyphname = uni0439;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,700,o),
(228,735,q),
(128,735,l),
(134,657,o),
(231,585,o),
(313,585,qs),
(393,585,o),
(490,657,o),
(497,735,q),
(397,735,l),
(394,700,o),
(348,668,o),
(313,668,qs),
(277,668,o)
);
},
{
closed = 1;
nodes = (
(433,354,q),
(433,0,l),
(547,0,l),
(547,527,l),
(444,527,l),
(176,165,l),
(176,527,l),
(62,527,l),
(62,0,l),
(168,0,l),
(432,352,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
23 18 2 4 5 1 76 3 1 1 0 1 133 8 1 0 0 2 5 0 2 105 6 1 5 5 22 77 7 1 4 4 21 4 78 1 0 22 21 20 19 17 16 15 14 11 10 8 6 4 3 0 13 1 13 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = uni0439;
unicode = 1081;
},
{
glyphname = uni043B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,172,o),
(81,127,o),
(44,98,o),
(14,98,q),
(14,0,l),
(42,0,ls),
(87,0,o),
(156,27,o),
(177,57,qs),
(189,75,o),
(205,118,o),
(213,167,o),
(218,216,o),
(219,234,qs),
(222,282,o),
(225,379,o),
(227,428,q),
(400,428,l),
(400,0,l),
(515,0,l),
(515,527,l),
(121,527,l),
(119,454,o),
(116,319,o),
(111,251,qs),
(109,225,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 2 2 0 95 0 0 0 22 77 0 4 4 1 97 3 1 1 1 21 1 78 17 42 17 17 19 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni043B;
unicode = 1083;
},
{
glyphname = uni043C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(174,378,l),
(344,118,l),
(371,118,l),
(538,378,l),
(538,0,l),
(650,0,l),
(650,527,l),
(516,527,l),
(358,276,l),
(199,527,l),
(62,527,l),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
10 7 2 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 22 77 4 1 2 2 21 2 78 18 18 17 18 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 713;
}
);
note = uni043C;
unicode = 1084;
},
{
glyphname = uni043D;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,211,l),
(410,211,l),
(410,0,l),
(524,0,l),
(524,527,l),
(410,527,l),
(410,310,l),
(176,310,l),
(176,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 22 77 6 5 2 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = uni043D;
unicode = 1085;
},
{
glyphname = uni043F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,428,l),
(410,428,l),
(410,0,l),
(524,0,l),
(524,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 2 2 0 95 0 0 0 22 77 4 3 2 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = uni043F;
unicode = 1087;
},
{
glyphname = uni0442;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,428,l),
(182,428,l),
(182,0,l),
(295,0,l),
(295,428,l),
(473,428,l),
(473,527,l),
(4,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 3 95 4 1 3 3 22 77 0 1 1 21 1 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = uni0442;
unicode = 1090;
},
{
glyphname = uni0444;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,535,o),
(151,498,o),
(77,429,o),
(38,327,o),
(38,259,qs),
(38,193,o),
(80,93,o),
(156,28,o),
(259,-6,o),
(322,-7,q),
(322,-200,l),
(435,-200,l),
(435,-7,l),
(496,-6,o),
(601,28,o),
(676,94,o),
(719,194,o),
(719,261,qs),
(719,329,o),
(677,430,o),
(602,498,o),
(498,534,o),
(435,535,q),
(435,703,l),
(322,703,l),
(322,535,l)
);
},
{
closed = 1;
nodes = (
(517,437,o),
(604,349,o),
(604,263,qs),
(604,179,o),
(519,89,o),
(435,89,q),
(435,437,l)
);
},
{
closed = 1;
nodes = (
(238,90,o),
(153,178,o),
(153,263,qs),
(153,349,o),
(239,437,o),
(322,437,q),
(322,89,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 0 0 20 77 8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 28 77 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
8 1 7 7 1 97 5 1 1 1 29 77 9 1 6 6 2 97 4 1 2 2 28 77 0 3 3 0 95 0 0 0 20 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
39 38 17 20 17 24 17 17 24 17 16 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 757;
}
);
note = uni0444;
unicode = 1092;
},
{
glyphname = uni0446;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,527,l),
(62,527,l),
(62,0,l),
(478,0,l),
(478,-154,l),
(590,-154,l),
(590,97,l),
(519,97,l),
(519,527,l),
(405,527,l),
(405,97,l),
(175,97,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 1 2 84 4 1 0 0 22 77 6 5 2 1 1 3 96 0 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = uni0446;
unicode = 1094;
},
{
glyphname = uni0447;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,335,o),
(65,253,o),
(116,204,o),
(190,181,o),
(238,180,qs),
(270,180,o),
(299,181,o),
(349,185,o),
(371,188,q),
(371,0,l),
(484,0,l),
(484,527,l),
(371,527,l),
(371,287,l),
(352,284,o),
(294,279,o),
(269,279,qs),
(230,279,o),
(184,294,o),
(160,329,o),
(153,383,o),
(153,423,qs),
(153,527,l),
(39,527,l),
(39,395,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 1 1 0 15 1 4 1 2 76 0 1 0 4 3 1 4 105 2 1 0 0 22 77 0 3 3 21 3 78 51 17 19 37 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = uni0447;
unicode = 1095;
},
{
glyphname = uni0448;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(756,0,l),
(756,527,l),
(642,527,l),
(642,97,l),
(465,97,l),
(465,527,l),
(352,527,l),
(352,97,l),
(176,97,l),
(176,527,l),
(62,527,l),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 22 77 3 1 1 1 5 96 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 818;
}
);
note = uni0448;
unicode = 1096;
},
{
glyphname = uni0449;
kernLeft = uni0432;
kernRight = uni0434;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(716,0,l),
(716,-154,l),
(826,-154,l),
(826,97,l),
(756,97,l),
(756,527,l),
(642,527,l),
(642,97,l),
(465,97,l),
(465,527,l),
(352,527,l),
(352,97,l),
(176,97,l),
(176,527,l),
(62,527,l),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 6 1 6 84 4 2 2 0 0 22 77 5 3 2 1 1 7 96 0 7 7 21 7 78 17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 843;
}
);
note = uni0449;
unicode = 1097;
},
{
glyphname = uni044A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,0,ls),
(392,0,o),
(471,17,o),
(534,59,o),
(572,131,o),
(572,185,qs),
(572,231,o),
(541,294,o),
(486,333,o),
(411,349,o),
(367,349,qs),
(250,349,l),
(250,527,l),
(9,527,l),
(9,428,l),
(136,428,l),
(136,0,l)
);
},
{
closed = 1;
nodes = (
(250,251,l),
(337,251,ls),
(354,251,o),
(396,249,o),
(434,236,o),
(459,205,o),
(459,177,qs),
(459,153,o),
(439,122,o),
(407,104,o),
(366,96,o),
(345,96,qs),
(250,96,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 22 77 6 1 4 4 3 95 0 3 3 21 3 78 18 17 28 25 17 29 18 29 40 33 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = uni044A;
unicode = 1098;
},
{
glyphname = uni044B;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,0,ls),
(295,0,o),
(375,16,o),
(439,57,o),
(479,128,o),
(479,182,qs),
(479,230,o),
(447,294,o),
(392,333,o),
(316,349,o),
(272,349,qs),
(177,349,l),
(177,527,l),
(62,527,l),
(62,0,l)
);
},
{
closed = 1;
nodes = (
(660,527,l),
(547,527,l),
(547,0,l),
(660,0,l)
);
},
{
closed = 1;
nodes = (
(177,251,l),
(278,251,ls),
(294,250,o),
(326,244,o),
(351,227,o),
(366,199,o),
(366,177,qs),
(366,151,o),
(346,119,o),
(312,102,o),
(268,95,o),
(246,95,qs),
(177,96,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 1 0 6 5 1 6 103 3 1 0 0 22 77 8 1 5 5 2 96 7 4 2 2 2 21 2 78 20 19 15 15 30 28 19 31 20 31 15 18 15 18 18 40 33 16 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 723;
}
);
note = uni044B;
unicode = 1099;
},
{
glyphname = uni044C;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,0,ls),
(319,0,o),
(399,17,o),
(462,59,o),
(501,130,o),
(501,183,qs),
(501,230,o),
(470,294,o),
(415,334,o),
(340,349,o),
(294,349,qs),
(176,349,l),
(176,527,l),
(62,527,l),
(62,0,l)
);
},
{
closed = 1;
nodes = (
(176,251,l),
(267,251,ls),
(285,251,o),
(328,249,o),
(364,235,o),
(388,205,o),
(388,177,qs),
(387,151,o),
(366,119,o),
(333,102,o),
(288,95,o),
(265,95,qs),
(176,96,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 1 0 4 3 1 4 103 0 0 0 22 77 5 1 3 3 2 96 0 2 2 21 2 78 16 15 26 23 15 27 16 27 40 33 16 6 7 25 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni044C;
unicode = 1100;
},
{
glyphname = uni044E;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(265,414,o),
(253,313,q),
(176,313,l),
(176,527,l),
(62,527,l),
(62,0,l),
(176,0,l),
(176,214,l),
(253,214,l),
(264,112,o),
(386,-7,o),
(500,-7,qs),
(564,-7,o),
(659,31,o),
(723,102,o),
(755,201,o),
(755,263,qs),
(755,324,o),
(722,424,o),
(657,496,o),
(563,536,o),
(500,536,qs),
(387,536,o)
);
},
{
closed = 1;
nodes = (
(409,119,o),
(375,164,o),
(359,225,o),
(359,261,qs),
(359,297,o),
(374,361,o),
(408,407,o),
(462,434,o),
(500,434,qs),
(539,434,o),
(593,407,o),
(627,361,o),
(643,297,o),
(643,261,qs),
(643,225,o),
(627,164,o),
(592,119,o),
(538,92,o),
(500,92,qs),
(462,92,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 0 2 6 5 2 103 0 7 7 0 97 4 8 2 0 0 29 77 9 1 6 6 1 97 3 1 1 1 28 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 0 2 6 5 2 103 0 4 4 22 77 0 7 7 0 97 8 1 0 0 29 77 9 1 6 6 1 97 3 1 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 0 2 6 5 2 103 0 4 4 22 77 0 7 7 0 97 8 1 0 0 29 77 0 3 3 21 77 9 1 6 6 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
24 23 1 0 34 32 23 42 24 42 20 19 18 17 16 15 14 13 11 9 0 22 1 22 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 793;
}
);
note = uni044E;
unicode = 1102;
},
{
glyphname = uni044F;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,527,ls),
(216,527,o),
(140,511,o),
(81,470,o),
(48,404,o),
(48,355,qs),
(48,293,o),
(111,213,o),
(172,198,q),
(29,0,l),
(163,0,l),
(286,180,l),
(381,180,l),
(381,0,l),
(494,0,l),
(494,527,l)
);
},
{
closed = 1;
nodes = (
(300,274,ls),
(280,274,o),
(240,277,o),
(192,292,o),
(162,328,o),
(162,354,qs),
(162,356,o),
(162,359,qs),
(162,380,o),
(180,410,o),
(211,427,o),
(249,432,o),
(268,432,qs),
(381,432,l),
(381,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 1 1 5 1 76 0 5 0 1 0 5 1 103 0 4 4 3 95 0 3 3 22 77 2 1 0 0 21 0 78 42 33 40 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = uni044F;
unicode = 1103;
},
{
glyphname = uni0410;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l),
(418,707,l),
(273,707,l)
);
},
{
closed = 1;
nodes = (
(345,592,l),
(469,247,l),
(220,247,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 1 4 3 1 76 6 1 4 0 1 0 4 1 104 5 1 3 3 20 77 2 1 0 0 21 0 78 8 8 0 0 8 10 8 10 0 7 0 7 17 17 17 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = uni0410;
unicode = 1040;
},
{
glyphname = uni0415;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l),
(573,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0415;
unicode = 1045;
},
{
glyphname = uni041C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,551,l),
(410,184,l),
(462,184,l),
(675,551,l),
(675,0,l),
(790,0,l),
(790,707,l),
(648,707,l),
(439,345,l),
(228,707,l),
(82,707,l),
(82,0,l),
(197,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 3 3 3 0 1 76 0 3 0 2 0 3 2 128 1 1 0 0 20 77 5 4 2 2 2 21 2 78 0 0 0 12 0 12 18 17 18 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 872;
}
);
note = uni041C;
unicode = 1052;
},
{
glyphname = uni041D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,296,l),
(537,296,l),
(537,0,l),
(653,0,l),
(653,707,l),
(537,707,l),
(537,400,l),
(198,400,l),
(198,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 0 0 3 2 0 3 103 5 1 1 1 20 77 4 1 2 2 21 2 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 735;
}
);
note = uni041D;
unicode = 1053;
},
{
glyphname = uni0420;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,221,l),
(336,221,ls),
(397,221,o),
(496,255,o),
(566,318,o),
(604,410,o),
(604,468,qs),
(604,531,o),
(567,622,o),
(499,680,o),
(402,707,o),
(341,707,qs),
(82,707,l),
(82,0,l),
(197,0,l)
);
},
{
closed = 1;
nodes = (
(337,603,ls),
(411,603,o),
(488,537,o),
(488,462,qs),
(487,426,o),
(462,374,o),
(420,340,o),
(363,324,o),
(330,324,qs),
(197,324,l),
(197,603,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 20 77 5 1 2 2 21 2 78 0 0 25 23 17 15 0 14 0 14 40 33 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = uni0420;
unicode = 1056;
},
{
glyphname = uni0422;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(574,603,l),
(574,707,l),
(9,707,l),
(9,603,l),
(234,603,l),
(234,0,l),
(350,0,l),
(350,603,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 1 1 2 95 0 2 2 20 77 0 0 0 21 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = uni0422;
unicode = 1058;
},
{
glyphname = uni0425;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,707,l),
(16,707,l),
(244,354,l),
(9,0,l),
(140,0,l),
(313,264,l),
(482,0,l),
(620,0,l),
(386,355,l),
(613,707,l),
(477,707,l),
(316,444,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 5 2 4 1 0 1 76 3 1 0 0 20 77 2 1 1 1 21 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = uni0425;
unicode = 1061;
},
{
glyphname = T;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,603,l),
(574,603,l),
(574,707,l),
(9,707,l),
(9,603,l),
(233,603,l),
(233,0,l),
(349,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 1 95 0 1 1 38 77 4 1 3 3 39 3 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = T;
unicode = 84;
},
{
glyphname = uni0412;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,0,o),
(488,15,o),
(572,59,o),
(626,140,o),
(626,207,qs),
(626,271,o),
(566,360,o),
(501,376,q),
(549,399,o),
(591,479,o),
(591,530,qs),
(591,583,o),
(553,651,o),
(490,691,o),
(407,707,o),
(362,707,qs),
(81,707,l),
(81,0,l),
(341,0,ls)
);
},
{
closed = 1;
nodes = (
(374,603,o),
(421,598,o),
(457,579,o),
(479,542,o),
(479,511,qs),
(479,479,o),
(452,440,o),
(410,417,o),
(357,409,o),
(332,409,qs),
(197,409,l),
(197,603,l),
(349,603,ls)
);
},
{
closed = 1;
nodes = (
(219,308,o),
(241,308,qs),
(327,309,ls),
(349,309,o),
(371,309,qs),
(396,309,o),
(445,301,o),
(485,280,o),
(510,241,o),
(510,211,qs),
(510,175,o),
(477,133,o),
(427,110,o),
(366,103,o),
(339,103,qs),
(197,103,l),
(197,308,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
10 1 5 2 1 76 0 2 0 5 4 2 5 103 7 1 3 3 0 95 0 0 0 20 77 0 4 4 1 95 6 1 1 1 21 1 78 19 19 0 0 48 42 34 32 19 31 19 30 22 20 0 18 0 17 33 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = uni0412;
unicode = 1042;
},
{
glyphname = uni041F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,603,l),
(540,603,l),
(540,0,l),
(656,0,l),
(656,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
0 1 1 3 95 0 3 3 20 77 2 1 0 0 21 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = uni041F;
unicode = 1055;
},
{
glyphname = uni0413;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,603,l),
(555,603,l),
(555,707,l),
(82,707,l),
(82,0,l),
(198,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 95 0 0 0 20 77 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = uni0413;
unicode = 1043;
},
{
glyphname = uni041B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(621,707,l),
(135,707,l),
(134,671,o),
(134,600,o),
(132,518,o),
(130,419,o),
(129,355,qs),
(127,308,o),
(120,217,o),
(97,146,o),
(52,102,o),
(14,102,q),
(14,-4,l),
(91,-4,o),
(183,45,o),
(210,100,qs),
(220,120,o),
(231,170,o),
(238,226,o),
(241,283,o),
(241,310,qs),
(243,367,o),
(245,453,o),
(246,521,o),
(246,572,o),
(247,603,q),
(505,603,l),
(505,0,l),
(621,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 3 95 0 3 3 20 77 0 2 2 1 97 5 4 2 1 1 21 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 3 95 0 3 3 20 77 0 2 2 1 97 5 4 2 1 1 28 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 3 95 0 3 3 20 77 0 2 2 1 97 5 4 2 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 3 95 0 3 3 20 77 0 2 2 1 97 5 4 2 1 1 28 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 28 0 28 25 17 28 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = uni041B;
unicode = 1051;
},
{
glyphname = uni0414;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,0,l),
(595,0,l),
(595,-187,l),
(710,-187,l),
(710,103,l),
(625,103,l),
(625,707,l),
(144,707,l),
(142,607,o),
(139,416,o),
(133,316,qs),
(130,271,o),
(119,194,o),
(95,136,o),
(56,103,o),
(25,103,qs),
(17,103,l),
(17,-187,l),
(132,-187,l)
);
},
{
closed = 1;
nodes = (
(222,131,o),
(236,198,o),
(243,265,o),
(246,328,o),
(247,352,qs),
(254,603,l),
(509,603,l),
(509,103,l),
(211,103,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 6 1 95 0 1 1 20 77 9 7 2 3 0 0 4 95 0 4 4 21 77 9 7 2 3 0 0 3 95 8 5 2 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 5 2 3 0 3 83 0 6 6 1 95 0 1 1 20 77 9 7 2 3 0 0 4 95 0 4 4 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
19 19 0 0 19 27 19 27 21 20 0 18 0 18 17 17 17 23 33 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = uni0414;
unicode = 1044;
},
{
glyphname = uni0411;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,0,ls),
(394,0,o),
(494,21,o),
(572,72,o),
(619,158,o),
(619,222,qs),
(619,280,o),
(582,359,o),
(515,407,o),
(418,426,o),
(360,426,qs),
(198,426,l),
(198,603,l),
(579,603,l),
(579,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(343,323,ls),
(373,323,o),
(431,318,o),
(476,297,o),
(504,255,o),
(504,219,qs),
(504,180,o),
(474,134,o),
(426,110,o),
(364,103,o),
(332,103,qs),
(198,103,l),
(198,323,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 1 1 0 95 0 0 0 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 669;
}
);
note = uni0411;
unicode = 1041;
},
{
glyphname = uni0416;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,297,l),
(608,297,l),
(767,0,l),
(899,0,l),
(700,363,l),
(897,707,l),
(767,707,l),
(602,401,l),
(512,401,l),
(512,707,l),
(396,707,l),
(396,401,l),
(307,401,l),
(142,707,l),
(11,707,l),
(208,363,l),
(158,272,o),
(60,91,o),
(9,0,q),
(141,0,l),
(300,297,l),
(396,297,l),
(396,0,l),
(512,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
18 7 2 0 3 1 76 5 1 3 8 1 0 1 3 0 103 6 4 2 2 2 20 77 10 9 7 3 1 1 21 1 78 0 0 0 23 0 23 17 18 17 17 17 17 20 17 17 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 908;
}
);
note = uni0416;
unicode = 1046;
},
{
glyphname = uni0417;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,15,o),
(555,66,o),
(602,149,o),
(602,209,qs),
(602,271,o),
(539,362,o),
(479,377,q),
(506,391,o),
(543,428,o),
(564,468,o),
(573,511,o),
(573,531,qs),
(573,585,o),
(529,656,o),
(458,698,o),
(368,715,o),
(321,715,qs),
(268,715,o),
(172,692,o),
(99,643,o),
(56,568,o),
(56,516,q),
(169,516,l),
(170,541,o),
(196,577,o),
(238,601,o),
(291,612,o),
(318,612,qs),
(342,612,o),
(392,604,o),
(433,582,o),
(460,543,o),
(460,512,qs),
(458,482,o),
(432,443,o),
(392,420,o),
(342,410,o),
(318,409,qs),
(238,409,l),
(238,310,l),
(328,310,ls),
(352,310,o),
(407,306,o),
(454,287,o),
(486,246,o),
(486,209,qs),
(486,174,o),
(456,130,o),
(411,106,o),
(356,97,o),
(331,97,qs),
(309,97,o),
(251,103,o),
(199,123,o),
(156,164,o),
(152,199,q),
(39,199,l),
(45,130,o),
(112,48,o),
(202,5,o),
(295,-7,o),
(326,-7,qs),
(378,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
55 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 27 77 0 2 2 0 97 8 1 0 0 28 0 78 1 0 46 44 40 39 35 33 25 23 22 20 12 10 6 5 0 62 1 62 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 646;
}
);
note = uni0417;
unicode = 1047;
},
{
glyphname = uni0418;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,514,l),
(549,0,l),
(665,0,l),
(665,707,l),
(561,707,l),
(198,188,l),
(198,707,l),
(82,707,l),
(82,0,l),
(186,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 9 0 9 17 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = uni0418;
unicode = 1048;
},
{
glyphname = uni0419;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,883,o),
(291,917,q),
(188,917,l),
(194,840,o),
(294,761,o),
(378,761,qs),
(462,761,o),
(562,840,o),
(569,917,q),
(466,917,l),
(462,884,o),
(416,848,o),
(379,848,qs),
(341,848,o)
);
},
{
closed = 1;
nodes = (
(549,514,l),
(549,0,l),
(665,0,l),
(665,707,l),
(561,707,l),
(198,188,l),
(198,707,l),
(82,707,l),
(82,0,l),
(186,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
22 17 2 6 4 1 76 3 1 1 0 1 133 8 1 0 0 2 4 0 2 105 5 1 4 4 20 77 9 7 2 6 6 21 6 78 14 14 1 0 14 23 14 23 21 20 19 18 16 15 11 10 8 6 4 3 0 13 1 13 10 7 22 
CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
note = uni0419;
unicode = 1049;
},
{
glyphname = uni041A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,295,l),
(508,0,l),
(643,0,l),
(388,364,l),
(640,707,l),
(507,707,l),
(289,398,l),
(198,398,l),
(198,707,l),
(82,707,l),
(82,0,l),
(198,0,l),
(198,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
8 1 5 2 1 76 0 2 0 5 0 2 5 103 3 1 1 1 20 77 4 1 0 0 21 0 78 17 18 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = uni041A;
unicode = 1050;
},
{
glyphname = uni0423;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,707,l),
(273,194,l),
(255,160,o),
(213,124,o),
(168,107,o),
(124,105,o),
(103,105,q),
(103,0,l),
(167,0,o),
(259,20,o),
(295,47,qs),
(331,74,o),
(380,151,o),
(398,190,qs),
(618,707,l),
(490,707,l),
(453,615,o),
(402,488,o),
(368,403,o),
(348,353,o),
(338,327,o),
(335,318,o),
(334,315,q),
(145,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
21 1 2 0 1 76 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 20 33 22 23 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = uni0423;
unicode = 1059;
},
{
glyphname = uni0424;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(484,100,l),
(542,100,ls),
(605,100,o),
(704,139,o),
(772,211,o),
(809,312,o),
(809,375,qs),
(808,438,o),
(768,537,o),
(695,605,o),
(595,641,o),
(534,641,qs),
(484,641,l),
(484,743,l),
(368,743,l),
(368,641,l),
(315,641,ls),
(254,641,o),
(154,605,o),
(82,536,o),
(43,436,o),
(43,372,qs),
(43,310,o),
(79,210,o),
(148,139,o),
(247,100,o),
(310,100,qs),
(368,100,l),
(368,-13,l),
(484,-13,l)
);
},
{
closed = 1;
nodes = (
(368,198,l),
(318,198,ls),
(277,198,o),
(217,224,o),
(177,272,o),
(158,338,o),
(158,377,qs),
(158,451,o),
(240,544,o),
(318,544,qs),
(368,544,l)
);
},
{
closed = 1;
nodes = (
(532,544,ls),
(570,544,o),
(630,519,o),
(672,473,o),
(694,410,o),
(694,373,qs),
(694,335,o),
(676,271,o),
(637,225,o),
(577,198,o),
(536,198,qs),
(484,198,l),
(484,544,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
3 1 1 9 11 2 6 7 1 6 105 8 1 7 4 1 0 5 7 0 105 0 2 2 5 95 10 1 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 2 1 5 2 87 3 1 1 9 11 2 6 7 1 6 105 8 1 7 4 1 0 5 7 0 105 0 2 2 5 95 10 1 5 2 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
31 30 0 0 53 51 43 41 39 37 30 40 31 40 0 29 0 29 40 33 17 40 33 12 7 27 
CALL[ ]	/* CallFunction */";
};
width = 852;
}
);
note = uni0424;
unicode = 1060;
},
{
glyphname = uni0426;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(608,-187,l),
(723,-187,l),
(723,103,l),
(638,103,l),
(638,707,l),
(523,707,l),
(523,103,l),
(198,103,l),
(198,707,l),
(82,707,l),
(82,0,l),
(608,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 20 77 3 1 1 1 5 96 6 1 5 5 21 77 3 1 1 1 4 96 0 4 4 24 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 1 4 84 2 1 0 0 20 77 3 1 1 1 5 96 6 1 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
note = uni0426;
unicode = 1062;
},
{
glyphname = uni0427;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,356,o),
(194,389,o),
(175,446,o),
(175,492,qs),
(175,707,l),
(59,707,l),
(59,470,ls),
(59,404,o),
(94,315,o),
(163,261,o),
(262,238,o),
(327,238,qs),
(365,238,o),
(446,244,o),
(480,250,q),
(480,0,l),
(596,0,l),
(596,707,l),
(480,707,l),
(480,354,l),
(439,348,o),
(371,343,o),
(336,343,qs),
(294,344,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
3 1 0 1 8 1 3 0 2 76 5 1 0 0 3 2 0 3 105 4 1 1 1 20 77 0 2 2 21 2 78 1 0 18 17 12 10 7 6 5 4 0 23 1 23 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 678;
}
);
note = uni0427;
unicode = 1063;
},
{
glyphname = uni0428;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(908,0,l),
(908,707,l),
(792,707,l),
(792,103,l),
(553,103,l),
(553,707,l),
(437,707,l),
(437,103,l),
(198,103,l),
(198,707,l),
(82,707,l),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
4 2 2 0 0 20 77 3 1 1 1 5 96 0 5 5 21 5 78 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 990;
}
);
note = uni0428;
unicode = 1064;
},
{
glyphname = uni0429;
kernRight = uni0414;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(877,0,l),
(877,-187,l),
(992,-187,l),
(992,103,l),
(907,103,l),
(907,707,l),
(791,707,l),
(791,103,l),
(552,103,l),
(552,707,l),
(437,707,l),
(437,103,l),
(197,103,l),
(197,707,l),
(82,707,l),
(82,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
4 2 2 0 0 20 77 5 3 2 1 1 7 96 0 7 7 21 77 5 3 2 1 1 6 96 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 6 1 6 84 4 2 2 0 0 20 77 5 3 2 1 1 7 96 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 1006;
}
);
note = uni0429;
unicode = 1065;
},
{
glyphname = uni042A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,0,ls),
(482,0,o),
(585,22,o),
(661,74,o),
(705,160,o),
(705,225,qs),
(705,285,o),
(665,365,o),
(596,413,o),
(502,434,o),
(447,434,qs),
(290,434,l),
(290,707,l),
(9,707,l),
(9,603,l),
(174,603,l),
(174,0,l)
);
},
{
closed = 1;
nodes = (
(430,330,ls),
(460,330,o),
(517,324,o),
(562,301,o),
(590,258,o),
(590,222,qs),
(590,183,o),
(560,137,o),
(512,111,o),
(450,103,o),
(418,103,qs),
(290,103,l),
(290,330,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 5 4 2 5 103 0 0 0 1 95 0 1 1 20 77 0 4 4 3 95 0 3 3 21 3 78 40 33 40 33 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 750;
}
);
note = uni042A;
unicode = 1066;
},
{
glyphname = uni042B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,0,ls),
(365,0,o),
(468,22,o),
(543,74,o),
(587,160,o),
(587,225,qs),
(587,284,o),
(547,364,o),
(478,414,o),
(384,434,o),
(329,434,qs),
(197,434,l),
(197,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(800,707,l),
(684,707,l),
(684,0,l),
(800,0,l)
);
},
{
closed = 1;
nodes = (
(312,330,ls),
(342,330,o),
(400,324,o),
(445,302,o),
(472,259,o),
(472,222,qs),
(472,183,o),
(442,137,o),
(394,111,o),
(332,103,o),
(300,103,qs),
(197,103,l),
(197,330,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 6 5 1 6 103 3 1 0 0 20 77 0 5 5 2 96 7 4 2 2 2 21 2 78 15 15 31 29 21 19 15 18 15 18 18 40 33 16 8 7 26 
CALL[ ]	/* CallFunction */";
};
width = 882;
}
);
note = uni042B;
unicode = 1067;
},
{
glyphname = uni042C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,0,ls),
(388,0,o),
(490,22,o),
(566,74,o),
(611,160,o),
(611,225,qs),
(610,285,o),
(571,365,o),
(502,414,o),
(408,434,o),
(353,434,qs),
(197,434,l),
(197,707,l),
(81,707,l),
(81,0,l)
);
},
{
closed = 1;
nodes = (
(335,330,ls),
(366,330,o),
(424,323,o),
(469,301,o),
(496,257,o),
(496,220,qs),
(496,182,o),
(466,136,o),
(418,111,o),
(356,103,o),
(325,103,qs),
(197,103,l),
(197,330,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 1 0 4 3 1 4 103 0 0 0 20 77 0 3 3 2 96 0 2 2 21 2 78 40 33 40 33 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
note = uni042C;
unicode = 1068;
},
{
glyphname = uni042D;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,579,o),
(517,522,o),
(545,446,o),
(548,404,q),
(247,404,l),
(247,303,l),
(548,303,l),
(546,259,o),
(518,183,o),
(466,128,o),
(391,97,o),
(343,97,qs),
(313,97,o),
(255,109,o),
(206,135,o),
(169,178,o),
(161,208,q),
(43,208,l),
(52,152,o),
(107,71,o),
(187,18,o),
(287,-7,o),
(341,-7,qs),
(423,-7,o),
(547,47,o),
(629,143,o),
(670,274,o),
(670,351,qs),
(670,427,o),
(632,561,o),
(553,659,o),
(431,716,o),
(347,716,qs),
(293,716,o),
(193,689,o),
(113,635,o),
(59,553,o),
(50,499,q),
(165,499,l),
(179,551,o),
(275,612,o),
(344,612,qs),
(393,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 0 7 0 6 4 7 6 103 8 1 0 0 2 97 0 2 2 27 77 0 5 5 3 97 0 3 3 28 3 78 1 0 38 37 36 35 31 29 25 24 20 18 10 8 4 3 0 42 1 42 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 713;
}
);
note = uni042D;
unicode = 1069;
},
{
glyphname = uni042E;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,299,l),
(300,299,l),
(306,231,o),
(354,119,o),
(437,38,o),
(553,-7,o),
(628,-7,qs),
(710,-7,o),
(836,48,o),
(921,145,o),
(965,277,o),
(965,355,qs),
(965,433,o),
(922,565,o),
(836,661,o),
(710,715,o),
(628,715,qs),
(552,715,o),
(435,669,o),
(352,586,o),
(305,471,o),
(299,403,q),
(198,403,l),
(198,707,l),
(82,707,l),
(82,0,l),
(198,0,l)
);
},
{
closed = 1;
nodes = (
(767,569,o),
(820,498,o),
(846,405,o),
(846,354,qs),
(846,351,o),
(846,347,qs),
(846,302,o),
(820,209,o),
(766,139,o),
(684,97,o),
(627,97,qs),
(570,97,o),
(489,139,o),
(438,210,o),
(415,303,o),
(415,354,qs),
(415,405,o),
(439,498,o),
(490,569,o),
(571,611,o),
(627,611,qs),
(684,611,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 0 4 7 1 4 103 9 1 6 6 0 97 2 1 0 0 20 77 0 7 7 3 97 8 5 2 3 3 28 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 0 4 7 1 4 103 0 0 0 20 77 9 1 6 6 2 97 0 2 2 27 77 0 7 7 3 97 8 5 2 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 4 7 1 4 103 0 0 0 20 77 9 1 6 6 2 97 0 2 2 27 77 8 1 5 5 21 77 0 7 7 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
28 27 0 0 38 36 27 48 28 48 0 26 0 26 20 40 36 17 17 10 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1008;
}
);
note = uni042E;
unicode = 1070;
},
{
glyphname = uni042F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,0,l),
(594,0,l),
(594,707,l),
(326,707,ls),
(265,707,o),
(165,682,o),
(95,626,o),
(56,538,o),
(56,474,qs),
(56,389,o),
(144,285,o),
(219,268,q),
(50,0,l),
(183,0,l),
(337,252,l),
(479,252,l)
);
},
{
closed = 1;
nodes = (
(319,354,o),
(256,363,o),
(206,388,o),
(172,437,o),
(171,475,qs),
(171,546,o),
(249,603,o),
(326,603,qs),
(479,603,l),
(479,354,l),
(348,354,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
3 1 3 5 1 76 7 1 5 6 1 3 0 5 3 103 0 4 4 1 95 0 1 1 20 77 2 1 0 0 21 0 78 16 16 0 0 16 26 16 25 19 17 0 15 0 15 17 40 17 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni042F;
unicode = 1071;
},
{
glyphname = uni0440;
kernLeft = uni0432;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,24,o),
(295,-7,o),
(343,-7,qs),
(405,-7,o),
(492,33,o),
(551,106,o),
(581,206,o),
(581,265,qs),
(581,328,o),
(550,427,o),
(489,497,o),
(403,536,o),
(349,536,qs),
(298,536,o),
(205,493,o),
(176,452,q),
(170,527,l),
(62,527,l),
(62,-205,l),
(176,-205,l),
(176,60,l)
);
},
{
closed = 1;
nodes = (
(230,120,o),
(193,165,o),
(175,228,o),
(175,264,qs),
(175,297,o),
(194,360,o),
(232,406,o),
(289,434,o),
(323,434,qs),
(361,434,o),
(416,408,o),
(451,362,o),
(468,299,o),
(468,263,qs),
(468,227,o),
(451,165,o),
(416,119,o),
(362,92,o),
(325,92,qs),
(286,92,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
4 1 5 1 20 1 3 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 1 97 2 1 1 1 22 77 6 1 4 4 3 97 0 3 3 28 77 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 5 5 1 97 2 1 1 1 22 77 6 1 4 4 3 97 0 3 3 28 77 0 0 0 1 97 2 1 1 1 22 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 2 97 0 2 2 29 77 6 1 4 4 3 97 0 3 3 28 77 0 0 0 1 95 0 1 1 22 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 40 22 40 40 35 17 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
note = uni0440;
unicode = 1088;
},
{
glyphname = O;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 4 1 0 0 47 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = O;
unicode = 79;
},
{
glyphname = a;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
37 33 22 36 18 34 40 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = a;
unicode = 97;
},
{
glyphname = c;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,12,o),
(475,54,o),
(518,120,o),
(526,165,q),
(408,165,l),
(400,132,o),
(341,92,o),
(296,92,qs),
(258,92,o),
(204,119,o),
(170,164,o),
(154,226,o),
(154,261,qs),
(154,295,o),
(169,358,o),
(203,406,o),
(257,434,o),
(295,434,qs),
(338,434,o),
(398,398,o),
(407,363,q),
(524,363,l),
(508,453,o),
(388,536,o),
(297,536,qs),
(235,536,o),
(141,494,o),
(75,422,o),
(42,322,o),
(42,262,qs),
(42,202,o),
(73,103,o),
(136,32,o),
(230,-7,o),
(294,-7,qs),
(337,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 6 1 0 0 47 0 78 1 0 31 30 28 26 18 16 14 13 11 9 0 35 1 35 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = c;
unicode = 99;
},
{
glyphname = e;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 32 32 0 0 32 40 32 40 36 34 0 31 0 31 40 36 18 36 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,428,l),
(358,428,l),
(358,527,l),
(223,527,l),
(223,576,ls),
(223,617,o),
(251,661,o),
(293,661,qs),
(358,661,l),
(358,760,l),
(286,760,ls),
(194,760,o),
(111,677,o),
(111,589,qs),
(111,527,l),
(27,527,l),
(27,428,l),
(111,428,l),
(111,0,l),
(223,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 41 77 7 1 6 6 39 6 78 0 0 0 19 0 19 17 19 33 35 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 375;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,527,l),
(451,464,l),
(421,500,o),
(340,535,o),
(288,536,qs),
(227,535,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,259,qs),
(42,205,o),
(70,109,o),
(128,35,o),
(217,-8,o),
(285,-7,qs),
(344,-8,o),
(423,28,o),
(448,67,q),
(448,23,o),
(440,-56,o),
(410,-117,o),
(353,-152,o),
(305,-152,qs),
(263,-152,o),
(194,-116,o),
(186,-80,q),
(67,-80,l),
(74,-126,o),
(118,-191,o),
(181,-233,o),
(260,-253,o),
(304,-253,qs),
(398,-253,o),
(524,-169,o),
(548,-84,qs),
(560,-39,o),
(562,49,o),
(562,93,qs),
(562,527,l)
);
},
{
closed = 1;
nodes = (
(394,406,o),
(431,361,o),
(449,299,o),
(449,265,qs),
(449,232,o),
(431,170,o),
(395,121,o),
(340,91,o),
(301,91,qs),
(263,91,o),
(208,118,o),
(172,164,o),
(155,225,o),
(155,261,qs),
(155,297,o),
(172,360,o),
(207,406,o),
(262,434,o),
(300,434,qs),
(338,434,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 4 20 1 3 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 5 20 1 3 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 3 2 3 1 2 128 8 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 8 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 5 5 41 77 8 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
40 39 50 48 39 58 40 58 19 40 38 34 20 37 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = g;
unicode = 103;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,708,o),
(61,675,qs),
(61,643,o),
(102,604,o),
(134,604,qs),
(166,604,o),
(207,643,o),
(207,675,qs),
(207,708,o),
(166,747,o),
(134,747,qs),
(102,747,o)
);
},
{
closed = 1;
nodes = (
(77,-24,ls),
(77,-66,o),
(47,-112,o),
(3,-112,qs),
(-36,-112,l),
(-36,-211,l),
(24,-211,ls),
(116,-211,o),
(191,-126,o),
(191,-37,qs),
(191,527,l),
(77,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 1 1 0 97 5 1 0 0 48 77 6 1 4 4 41 77 0 3 3 2 98 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 2 3 2 102 0 1 1 0 97 5 1 0 0 48 77 6 1 4 4 41 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 0 0 1 4 0 1 105 0 3 0 2 3 2 102 6 1 4 4 41 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
12 12 1 0 12 23 12 23 20 18 17 15 7 5 0 11 1 11 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = j;
unicode = 106;
},
{
glyphname = o;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 0 97 4 1 0 0 49 77 5 1 2 2 1 97 0 1 1 47 1 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = o;
unicode = 111;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,247,ls),
(176,284,o),
(192,349,o),
(229,397,o),
(288,426,o),
(332,427,qs),
(343,427,o),
(366,428,o),
(378,428,q),
(378,534,l),
(370,535,o),
(351,536,o),
(341,536,qs),
(236,536,o),
(175,452,q),
(169,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
3 1 2 0 1 76 8 1 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
8 1 0 1 3 1 2 0 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 1 1 0 0 41 77 4 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 4 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 18 0 18 66 50 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = r;
unicode = 114;
},
{
glyphname = t;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,676,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,171,ls),
(107,80,o),
(190,0,o),
(287,0,qs),
(349,0,l),
(349,98,l),
(297,98,ls),
(252,98,o),
(220,142,o),
(220,187,qs),
(220,428,l),
(353,428,l),
(353,527,l),
(220,527,l),
(220,676,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 17 17 19 33 35 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = t;
unicode = 116;
},
{
glyphname = y2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,527,l),
(15,527,l),
(251,-33,l),
(239,-62,o),
(211,-107,o),
(173,-135,o),
(128,-149,o),
(102,-149,qs),
(95,-149,o),
(88,-149,q),
(88,-251,l),
(105,-251,ls),
(180,-251,o),
(274,-207,o),
(339,-122,o),
(387,5,o),
(414,86,qs),
(562,527,l),
(440,527,l),
(309,108,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
21 49 37 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 569;
}
);
note = y2_alt;
},
{
glyphname = uni0443;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,527,l),
(17,527,l),
(251,-33,l),
(239,-62,o),
(211,-107,o),
(173,-135,o),
(126,-149,o),
(96,-149,qs),
(92,-149,o),
(88,-149,q),
(88,-251,l),
(105,-251,ls),
(180,-251,o),
(273,-208,o),
(337,-124,o),
(384,2,o),
(413,84,qs),
(565,527,l),
(440,527,l),
(310,110,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
21 49 37 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = uni0443;
unicode = 1091;
},
{
glyphname = uni0451;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,688,o),
(108,656,qs),
(108,624,o),
(148,586,o),
(179,586,qs),
(211,586,o),
(252,624,o),
(252,656,qs),
(252,688,o),
(211,727,o),
(179,727,qs),
(148,727,o)
);
},
{
closed = 1;
nodes = (
(343,688,o),
(343,656,qs),
(343,624,o),
(382,586,o),
(414,586,qs),
(446,586,o),
(486,624,o),
(486,656,qs),
(486,688,o),
(446,727,o),
(414,727,qs),
(382,727,o)
);
},
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(355,536,o),
(293,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(233,-7,o),
(296,-7,qs),
(337,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 5 8 4 8 5 4 128 14 1 10 13 1 8 5 10 8 103 3 1 1 1 0 97 12 2 11 3 0 0 27 77 0 9 9 7 97 0 7 7 29 77 0 4 4 6 97 0 6 6 28 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 8 4 8 5 4 128 12 2 11 3 0 3 1 1 7 0 1 105 14 1 10 13 1 8 5 10 8 103 0 9 9 7 97 0 7 7 29 77 0 4 4 6 97 0 6 6 28 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 41 values pushed */
56 56 24 24 13 12 1 0 56 64 56 64 60 58 24 55 24 55 49 47 39 37 33 32 30 28 19 17 12 23 13 23 7 5 0 11 1 11 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni0451;
unicode = 1105;
},
{
glyphname = uni0437;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,351,o),
(470,389,qs),
(470,431,o),
(437,484,o),
(377,522,o),
(306,536,o),
(269,536,qs),
(232,536,o),
(157,522,o),
(95,486,o),
(53,425,o),
(49,378,q),
(158,378,l),
(160,397,o),
(182,421,o),
(214,435,o),
(250,440,o),
(267,440,qs),
(280,440,o),
(314,435,o),
(342,421,o),
(361,396,o),
(361,377,qs),
(361,340,o),
(309,310,o),
(272,310,qs),
(193,310,l),
(193,220,l),
(281,220,ls),
(324,220,o),
(381,194,o),
(381,156,qs),
(381,134,o),
(359,107,o),
(326,92,o),
(284,87,o),
(266,87,qs),
(249,87,o),
(209,93,o),
(173,109,o),
(146,135,o),
(142,155,q),
(32,155,l),
(35,108,o),
(79,46,o),
(146,8,o),
(227,-7,o),
(266,-7,qs),
(306,-7,o),
(383,7,o),
(450,46,o),
(490,112,o),
(490,162,qs),
(490,164,o),
(490,166,qs),
(490,205,o),
(450,268,o),
(408,282,q),
(435,297,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 103 0 5 5 7 97 0 7 7 29 77 0 2 2 0 97 0 0 0 28 0 78 36 20 38 33 38 36 20 41 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 529;
}
);
note = uni0437;
unicode = 1079;
},
{
glyphname = uni044D;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,216,l),
(404,216,l),
(402,161,o),
(336,91,o),
(270,91,qs),
(251,91,o),
(214,98,o),
(182,113,o),
(157,136,o),
(151,151,q),
(34,151,l),
(43,107,o),
(91,47,o),
(156,9,o),
(231,-7,o),
(268,-7,qs),
(333,-7,o),
(426,32,o),
(486,103,o),
(516,203,o),
(516,263,qs),
(516,324,o),
(485,424,o),
(425,495,o),
(333,536,o),
(271,536,qs),
(230,536,o),
(154,518,o),
(91,477,o),
(46,415,o),
(36,372,q),
(154,372,l),
(159,389,o),
(183,413,o),
(215,428,o),
(252,434,o),
(271,434,qs),
(336,434,o),
(401,364,o),
(405,309,q),
(191,309,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 0 7 0 1 7 128 0 4 6 5 6 4 5 128 8 1 7 0 6 4 7 6 103 0 0 0 2 97 0 2 2 29 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 40 0 40 18 36 20 40 36 20 34 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = uni044D;
unicode = 1101;
},
{
glyphname = C;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,551,o),
(549,499,q),
(663,499,l),
(647,606,o),
(495,716,o),
(378,716,qs),
(295,716,o),
(170,661,o),
(86,564,o),
(43,431,o),
(43,354,qs),
(43,275,o),
(85,143,o),
(169,47,o),
(294,-7,o),
(377,-7,qs),
(434,-7,o),
(534,22,o),
(610,77,o),
(661,157,o),
(669,208,q),
(553,208,l),
(541,157,o),
(448,97,o),
(379,97,qs),
(323,97,o),
(241,139,o),
(188,210,o),
(162,304,o),
(162,356,qs),
(162,407,o),
(187,500,o),
(239,570,o),
(320,612,o),
(376,612,qs),
(446,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 1 0 33 32 30 28 20 18 14 13 11 9 0 35 1 35 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = C;
unicode = 67;
},
{
glyphname = S;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,601,o),
(441,578,o),
(466,542,o),
(470,515,q),
(584,515,l),
(580,569,o),
(537,645,o),
(467,693,o),
(377,716,o),
(327,716,qs),
(280,716,o),
(190,695,o),
(119,647,o),
(75,568,o),
(75,510,qs),
(75,472,o),
(96,415,o),
(134,373,o),
(184,343,o),
(214,332,qs),
(259,315,o),
(360,294,o),
(408,280,qs),
(443,271,o),
(485,234,o),
(485,194,qs),
(485,165,o),
(461,129,o),
(423,107,o),
(371,98,o),
(343,98,qs),
(317,98,o),
(263,108,o),
(216,132,o),
(180,172,o),
(172,202,q),
(52,202,l),
(59,146,o),
(111,66,o),
(189,15,o),
(288,-8,o),
(343,-8,qs),
(397,-8,o),
(491,16,o),
(561,68,o),
(602,148,o),
(602,205,qs),
(602,253,o),
(569,318,o),
(513,361,o),
(438,387,o),
(396,396,qs),
(372,401,o),
(315,415,o),
(287,423,qs),
(248,434,o),
(192,477,o),
(192,519,qs),
(192,547,o),
(218,584,o),
(258,605,o),
(306,613,o),
(329,613,qs),
(356,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 59 58 54 52 33 31 27 26 22 20 0 63 1 63 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = S;
unicode = 83;
},
{
glyphname = uni0421;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,551,o),
(549,499,q),
(663,499,l),
(647,606,o),
(495,716,o),
(378,716,qs),
(295,716,o),
(170,661,o),
(86,564,o),
(43,431,o),
(43,354,qs),
(43,275,o),
(85,143,o),
(169,47,o),
(294,-7,o),
(377,-7,qs),
(434,-7,o),
(534,22,o),
(610,77,o),
(661,157,o),
(669,208,q),
(553,208,l),
(541,157,o),
(448,97,o),
(379,97,qs),
(323,97,o),
(241,139,o),
(188,210,o),
(162,304,o),
(162,356,qs),
(162,407,o),
(187,500,o),
(239,570,o),
(320,612,o),
(376,612,qs),
(446,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 6 1 0 0 4 97 0 4 4 27 77 0 1 1 3 97 0 3 3 28 3 78 1 0 33 32 30 28 20 18 14 13 11 9 0 35 1 35 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = uni0421;
unicode = 1057;
},
{
glyphname = G;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(537,552,o),
(550,499,q),
(667,499,l),
(659,551,o),
(609,632,o),
(533,687,o),
(434,716,o),
(376,716,qs),
(293,716,o),
(168,662,o),
(85,565,o),
(43,431,o),
(43,352,qs),
(43,274,o),
(85,142,o),
(169,46,o),
(294,-7,o),
(377,-7,qs),
(441,-7,o),
(540,27,o),
(612,85,o),
(658,164,o),
(670,209,qs),
(680,251,o),
(683,328,o),
(683,366,q),
(365,366,l),
(365,268,l),
(572,268,l),
(570,192,o),
(469,97,o),
(378,97,qs),
(322,97,o),
(240,138,o),
(187,209,o),
(162,302,o),
(162,354,qs),
(162,406,o),
(186,499,o),
(237,569,o),
(317,611,o),
(373,612,qs),
(442,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 7 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 1 0 40 39 35 33 25 23 16 15 14 13 11 9 0 42 1 42 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = G;
unicode = 71;
},
{
glyphname = uni041E;
kernLeft = uni0417;
kernRight = uni0417;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 1 97 0 1 1 27 77 0 3 3 0 97 4 1 0 0 28 0 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = uni041E;
unicode = 1054;
},
{
glyphname = Q;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(715,-51,l),
(618,78,l),
(671,127,o),
(725,269,o),
(725,355,qs),
(725,434,o),
(680,567,o),
(593,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(87,144,o),
(174,48,o),
(300,-7,o),
(383,-7,qs),
(460,-7,o),
(522,17,q),
(625,-120,l)
);
},
{
closed = 1;
nodes = (
(524,570,o),
(579,499,o),
(606,406,o),
(606,354,qs),
(606,301,o),
(579,208,o),
(524,138,o),
(440,97,o),
(384,97,qs),
(327,97,o),
(243,139,o),
(188,211,o),
(161,304,o),
(161,355,qs),
(161,406,o),
(188,500,o),
(244,570,o),
(328,612,o),
(384,612,qs),
(441,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
20 1 0 3 1 76 22 21 2 0 73 4 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 0 0 0 47 0 78 24 23 34 32 23 42 24 42 40 33 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 768;
}
);
note = Q;
unicode = 81;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,103,o),
(166,-7,o),
(278,-7,qs),
(338,-7,o),
(422,30,o),
(476,97,o),
(500,187,o),
(500,244,qs),
(500,707,l),
(384,707,l),
(384,231,ls),
(384,201,o),
(373,151,o),
(346,116,o),
(302,96,o),
(269,96,qs),
(212,96,o),
(157,163,o),
(154,216,q),
(37,216,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 0 0 0 19 0 19 37 21 34 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = J;
unicode = 74;
},
{
glyphname = K_alt;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,249,l),
(264,318,l),
(508,0,l),
(643,0,l),
(345,390,l),
(643,707,l),
(507,707,l),
(198,373,l),
(198,707,l),
(82,707,l),
(82,0,l),
(198,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 6 3 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = K_alt;
},
{
glyphname = K;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,295,l),
(299,295,l),
(507,0,l),
(643,0,l),
(388,364,l),
(640,707,l),
(506,707,l),
(288,398,l),
(198,398,l),
(198,707,l),
(82,707,l),
(82,0,l),
(198,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 38 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = K;
unicode = 75;
},
{
glyphname = k_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,173,l),
(237,235,l),
(410,0,l),
(539,0,l),
(317,306,l),
(529,527,l),
(394,527,l),
(176,293,l),
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
10 9 6 3 4 2 1 1 76 0 0 0 20 77 0 1 1 22 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = k_alt;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,213,l),
(264,213,l),
(403,0,l),
(535,0,l),
(355,276,l),
(521,527,l),
(393,527,l),
(257,312,l),
(175,312,l),
(175,707,l),
(62,707,l),
(62,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 537;
}
);
note = k;
unicode = 107;
},
{
glyphname = i_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(74,708,o),
(74,675,qs),
(74,643,o),
(115,605,o),
(147,605,qs),
(179,605,o),
(219,643,o),
(219,675,qs),
(219,708,o),
(179,746,o),
(147,746,qs),
(115,746,o)
);
},
{
closed = 1;
nodes = (
(203,527,l),
(7,527,l),
(7,428,l),
(89,428,l),
(89,0,l),
(203,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
5 1 0 0 1 3 0 1 105 0 2 2 3 95 0 3 3 22 77 6 1 4 4 21 4 78 12 12 1 0 12 17 12 17 16 15 14 13 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = i_alt;
},
{
glyphname = j_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,708,o),
(65,675,qs),
(65,643,o),
(107,604,o),
(139,604,qs),
(170,604,o),
(211,643,o),
(211,675,qs),
(211,708,o),
(170,747,o),
(139,747,qs),
(107,747,o)
);
},
{
closed = 1;
nodes = (
(-2,527,l),
(-2,428,l),
(81,428,l),
(81,-23,ls),
(81,-65,o),
(45,-112,o),
(1,-112,qs),
(-23,-112,l),
(-23,-211,l),
(21,-211,ls),
(113,-211,o),
(196,-126,o),
(196,-37,qs),
(196,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 1 5 0 1 105 0 4 4 5 95 0 5 5 22 77 0 3 3 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 1 0 0 1 5 0 1 105 0 3 0 2 3 2 101 0 4 4 5 95 0 5 5 22 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 25 24 23 22 19 17 16 14 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 265;
}
);
note = j_alt;
},
{
glyphname = s_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,410,o),
(387,375,q),
(492,375,l),
(490,412,o),
(458,471,o),
(401,514,o),
(323,536,o),
(276,536,qs),
(236,536,o),
(157,520,o),
(94,481,o),
(56,419,o),
(56,373,qs),
(56,317,o),
(111,256,o),
(193,228,o),
(290,213,o),
(335,206,qs),
(364,200,o),
(397,174,o),
(397,147,qs),
(397,127,o),
(375,104,o),
(359,97,qs),
(335,87,o),
(295,87,qs),
(292,87,o),
(288,87,qs),
(269,87,o),
(226,93,o),
(186,111,o),
(155,139,o),
(150,161,q),
(38,161,l),
(41,113,o),
(86,47,o),
(158,7,o),
(242,-10,o),
(292,-10,qs),
(331,-10,o),
(408,7,o),
(469,46,o),
(509,110,o),
(509,157,qs),
(509,202,o),
(465,270,o),
(415,287,qs),
(381,298,o),
(294,312,o),
(213,325,o),
(167,353,o),
(167,381,qs),
(167,399,o),
(189,424,o),
(221,436,o),
(257,440,o),
(272,440,qs),
(316,439,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 28 1 78 1 0 55 54 50 48 32 28 24 23 19 17 0 57 1 57 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = s_alt;
},
{
glyphname = s;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,412,o),
(353,380,q),
(460,380,l),
(455,456,o),
(344,536,o),
(257,536,qs),
(221,536,o),
(147,521,o),
(87,482,o),
(49,420,o),
(49,372,qs),
(49,327,o),
(91,269,o),
(156,240,o),
(231,222,o),
(264,216,qs),
(285,211,o),
(323,202,o),
(350,186,o),
(366,163,o),
(366,146,qs),
(366,128,o),
(345,105,o),
(315,91,o),
(280,87,o),
(268,87,qs),
(252,87,o),
(214,93,o),
(179,109,o),
(153,135,o),
(149,155,q),
(34,155,l),
(39,110,o),
(82,47,o),
(147,9,o),
(225,-7,o),
(265,-7,qs),
(305,-7,o),
(380,9,o),
(439,46,o),
(476,108,o),
(476,153,qs),
(476,195,o),
(449,247,o),
(401,280,o),
(332,301,o),
(289,309,qs),
(273,312,o),
(228,321,o),
(187,334,o),
(159,360,o),
(159,381,qs),
(159,400,o),
(178,424,o),
(207,437,o),
(240,441,o),
(255,441,qs),
(293,440,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 55 54 52 50 32 30 26 25 21 19 0 57 1 57 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = s;
unicode = 115;
},
{
glyphname = c_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,9,o),
(463,44,o),
(507,99,o),
(518,139,q),
(397,139,l),
(384,115,o),
(329,92,o),
(296,92,qs),
(257,92,o),
(202,120,o),
(167,166,o),
(150,228,o),
(150,263,qs),
(150,298,o),
(166,361,o),
(201,407,o),
(255,434,o),
(293,434,qs),
(333,434,o),
(390,401,o),
(401,372,q),
(519,372,l),
(510,415,o),
(469,476,o),
(411,517,o),
(338,536,o),
(294,536,qs),
(233,536,o),
(138,496,o),
(72,424,o),
(38,325,o),
(38,264,qs),
(38,204,o),
(69,105,o),
(133,32,o),
(228,-7,o),
(292,-7,qs),
(332,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 28 0 78 1 0 33 32 30 28 20 18 16 15 11 9 0 37 1 37 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
note = c_alt;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,663,o),
(113,555,o),
(54,402,o),
(54,308,qs),
(54,212,o),
(112,59,o),
(219,-48,o),
(369,-105,o),
(461,-105,qs),
(552,-105,o),
(702,-48,o),
(808,59,o),
(866,212,o),
(866,308,qs),
(866,401,o),
(807,554,o),
(700,662,o),
(551,722,o),
(461,722,qs),
(371,722,o)
);
},
{
closed = 1;
nodes = (
(649,591,o),
(732,505,o),
(778,383,o),
(778,307,qs),
(778,230,o),
(734,109,o),
(651,24,o),
(535,-21,o),
(463,-21,qs),
(391,-21,o),
(274,24,o),
(190,109,o),
(145,230,o),
(145,307,qs),
(145,383,o),
(191,505,o),
(275,591,o),
(392,637,o),
(463,637,qs),
(533,637,o)
);
},
{
closed = 1;
nodes = (
(636,162,o),
(649,235,q),
(552,235,l),
(546,210,o),
(505,181,o),
(472,181,qs),
(443,181,o),
(403,201,o),
(378,236,o),
(366,282,o),
(366,309,qs),
(366,335,o),
(377,381,o),
(402,415,o),
(441,435,o),
(469,435,qs),
(501,435,o),
(544,406,o),
(551,380,q),
(647,380,l),
(634,453,o),
(541,519,o),
(469,519,qs),
(421,519,o),
(348,488,o),
(298,432,o),
(272,355,o),
(272,309,qs),
(272,262,o),
(297,183,o),
(346,127,o),
(420,96,o),
(470,96,qs),
(541,96,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 10 1 0 11 1 2 5 0 2 105 0 5 0 7 6 5 7 105 0 8 12 1 4 3 8 4 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 41 40 21 20 1 0 71 70 68 66 58 56 54 53 51 49 40 73 41 73 31 29 20 39 21 39 11 9 0 19 1 19 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 920;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(675,0,l),
(554,133,l),
(584,177,o),
(618,272,o),
(623,322,q),
(519,322,l),
(515,292,o),
(498,234,o),
(484,208,q),
(354,359,l),
(382,375,o),
(435,415,o),
(474,463,o),
(498,520,o),
(498,552,qs),
(498,591,o),
(470,651,o),
(420,692,o),
(354,713,o),
(317,713,qs),
(276,713,o),
(206,689,o),
(154,642,o),
(124,574,o),
(124,531,qs),
(124,487,o),
(163,411,o),
(197,378,q),
(137,346,o),
(62,252,o),
(62,183,qs),
(62,136,o),
(97,63,o),
(156,14,o),
(236,-12,o),
(281,-12,qs),
(342,-12,o),
(441,20,o),
(481,55,q),
(532,0,l)
);
},
{
closed = 1;
nodes = (
(257,461,o),
(239,488,o),
(228,520,o),
(228,538,qs),
(228,577,o),
(277,617,o),
(315,617,qs),
(350,617,o),
(393,576,o),
(393,541,qs),
(393,522,o),
(372,488,o),
(340,458,o),
(304,434,o),
(289,425,q),
(279,437,o)
);
},
{
closed = 1;
nodes = (
(392,107,o),
(330,86,o),
(298,86,qs),
(274,86,o),
(229,98,o),
(193,123,o),
(171,162,o),
(171,189,qs),
(171,230,o),
(222,287,o),
(258,307,q),
(418,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
29 11 2 2 4 67 37 30 3 5 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 4 1 97 0 1 1 46 77 0 2 2 0 97 3 1 0 0 47 77 0 5 5 0 97 3 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 1 97 0 1 1 46 77 0 2 2 3 95 0 3 3 39 77 0 5 5 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
46 40 20 29 46 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 694;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(243,708,o),
(169,681,o),
(112,632,o),
(77,560,o),
(77,512,qs),
(77,464,o),
(110,396,o),
(169,348,o),
(249,317,o),
(297,307,qs),
(327,300,o),
(396,290,o),
(455,269,o),
(494,232,o),
(494,198,qs),
(494,169,o),
(468,130,o),
(427,107,o),
(375,98,o),
(348,98,qs),
(320,98,o),
(262,109,o),
(212,135,o),
(176,178,o),
(170,210,q),
(54,210,l),
(58,163,o),
(94,90,o),
(153,36,o),
(232,3,o),
(279,-3,q),
(279,-137,l),
(386,-137,l),
(386,-6,l),
(431,-3,o),
(512,24,o),
(573,75,o),
(609,152,o),
(609,205,qs),
(609,257,o),
(573,325,o),
(510,369,o),
(424,393,o),
(374,402,qs),
(343,408,o),
(280,421,o),
(229,446,o),
(197,488,o),
(197,523,qs),
(197,550,o),
(223,587,o),
(243,597,qs),
(262,607,o),
(310,613,o),
(330,613,qs),
(361,613,o),
(412,602,o),
(452,577,o),
(478,537,o),
(482,507,q),
(592,507,l),
(587,599,o),
(478,702,o),
(391,712,q),
(391,846,l),
(283,846,l),
(283,713,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
66 2 2 2 0 35 1 3 6 2 76 0 1 2 5 2 1 5 128 0 5 6 2 5 6 126 0 0 0 2 1 0 2 105 0 6 0 4 6 4 99 0 3 3 47 3 78 47 45 41 40 34 33 32 31 36 20 16 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,759,o),
(124,636,o),
(81,504,o),
(60,369,o),
(60,304,qs),
(60,239,o),
(81,105,o),
(123,-26,o),
(187,-149,o),
(230,-203,q),
(358,-203,l),
(260,-81,o),
(176,172,o),
(174,304,qs),
(175,369,o),
(195,499,o),
(239,627,o),
(309,752,o),
(359,813,q),
(231,813,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 19 0 19 24 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,-149,o),
(199,-26,o),
(242,105,o),
(264,240,o),
(264,305,qs),
(264,370,o),
(243,505,o),
(200,636,o),
(136,759,o),
(93,813,q),
(-34,813,l),
(64,691,o),
(148,437,o),
(150,305,qs),
(148,174,o),
(64,-81,o),
(-35,-203,q),
(92,-203,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 95 2 1 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 17 0 17 22 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,-155,l),
(358,-7,l),
(427,3,o),
(525,84,o),
(539,163,q),
(421,163,l),
(413,130,o),
(355,91,o),
(311,91,qs),
(271,91,o),
(217,119,o),
(183,166,o),
(167,228,o),
(167,263,qs),
(167,298,o),
(183,361,o),
(217,408,o),
(271,435,o),
(310,435,qs),
(352,435,o),
(411,397,o),
(419,363,q),
(537,363,l),
(524,441,o),
(429,523,o),
(358,533,q),
(358,675,l),
(249,675,l),
(249,531,l),
(202,522,o),
(129,475,o),
(79,406,o),
(54,316,o),
(54,263,qs),
(54,156,o),
(150,12,o),
(249,-5,q),
(249,-155,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
11 8 2 2 0 35 0 2 5 3 2 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 5 5 3 89 0 3 3 5 95 0 5 3 5 79 20 18 40 34 20 25 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 593;
}
);
note = cent;
unicode = 162;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,616,o),
(360,601,o),
(380,578,o),
(383,563,q),
(484,563,l),
(481,603,o),
(445,660,o),
(390,697,o),
(318,714,o),
(279,714,qs),
(243,714,o),
(170,699,o),
(111,663,o),
(74,604,o),
(74,561,qs),
(74,530,o),
(98,482,o),
(119,464,q),
(68,422,o),
(68,355,qs),
(68,305,o),
(115,248,o),
(186,217,o),
(268,202,o),
(315,193,o),
(326,190,qs),
(348,186,o),
(386,165,o),
(386,142,qs),
(386,121,o),
(366,97,o),
(336,85,o),
(299,81,o),
(281,81,qs),
(264,81,o),
(228,88,o),
(194,104,o),
(167,132,o),
(161,154,q),
(54,154,l),
(57,107,o),
(97,45,o),
(162,8,o),
(243,-7,o),
(286,-7,qs),
(325,-7,o),
(401,9,o),
(460,45,o),
(497,104,o),
(497,148,qs),
(497,179,o),
(474,230,o),
(451,247,q),
(472,266,o),
(497,318,o),
(497,347,qs),
(497,393,o),
(457,457,o),
(408,474,qs),
(382,482,o),
(308,496,o),
(274,503,qs),
(261,506,o),
(229,513,o),
(200,526,o),
(180,547,o),
(180,564,qs),
(180,585,o),
(201,608,o),
(231,620,o),
(265,623,o),
(279,623,qs),
(296,623,o)
);
},
{
closed = 1;
nodes = (
(286,408,o),
(329,399,qs),
(355,393,o),
(393,366,o),
(393,338,qs),
(393,319,o),
(374,290,o),
(360,282,q),
(332,287,o),
(267,298,o),
(212,311,o),
(175,340,o),
(175,366,qs),
(175,383,o),
(192,415,o),
(205,425,q),
(230,418,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
81 54 19 3 2 5 1 76 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 68 67 63 61 39 37 33 32 28 26 0 72 1 72 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = section;
unicode = 167;
},
{
glyphname = uni04C1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(376,890,o),
(371,922,q),
(271,922,l),
(277,848,o),
(374,777,o),
(454,777,qs),
(535,777,o),
(632,848,o),
(639,922,q),
(539,922,l),
(534,890,o),
(490,859,o),
(455,859,qs),
(420,859,o)
);
},
{
closed = 1;
nodes = (
(512,297,l),
(595,297,l),
(766,0,l),
(899,0,l),
(687,363,l),
(897,707,l),
(766,707,l),
(589,401,l),
(512,401,l),
(512,707,l),
(396,707,l),
(396,401,l),
(320,401,l),
(144,707,l),
(11,707,l),
(221,363,l),
(9,0,l),
(142,0,l),
(313,297,l),
(396,297,l),
(396,0,l),
(512,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
30 19 2 4 7 1 76 3 1 1 0 1 133 14 1 0 0 2 6 0 2 105 9 1 7 12 1 4 5 7 4 104 10 8 2 6 6 20 77 15 13 11 3 5 5 21 5 78 14 14 1 0 14 35 14 35 34 33 32 31 29 28 27 26 25 24 23 22 21 20 18 17 16 15 11 10 8 6 4 3 0 13 1 13 16 7 22 
CALL[ ]	/* CallFunction */";
};
width = 908;
}
);
note = uni04C1;
unicode = 1217;
},
{
glyphname = uni04C2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,706,o),
(317,738,q),
(216,738,l),
(222,663,o),
(320,592,o),
(401,592,qs),
(481,592,o),
(579,663,o),
(586,738,q),
(485,738,l),
(480,706,o),
(436,674,o),
(401,674,qs),
(366,674,o)
);
},
{
closed = 1;
nodes = (
(521,213,l),
(658,0,l),
(792,0,l),
(608,276,l),
(778,527,l),
(649,527,l),
(512,311,l),
(457,311,l),
(457,527,l),
(344,527,l),
(344,311,l),
(289,311,l),
(152,527,l),
(23,527,l),
(193,276,l),
(9,0,l),
(144,0,l),
(280,213,l),
(344,213,l),
(344,0,l),
(457,0,l),
(457,213,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
31 20 2 5 8 1 76 3 1 1 0 1 133 14 1 0 0 2 7 0 2 105 10 1 8 13 1 5 4 8 5 104 11 9 2 7 7 22 77 12 6 2 4 4 21 4 78 1 0 35 34 33 32 30 29 28 27 26 25 24 23 22 21 19 18 17 16 15 14 11 10 8 6 4 3 0 13 1 13 15 7 22 
CALL[ ]	/* CallFunction */";
};
width = 801;
}
);
note = uni04C2;
unicode = 1218;
},
{
glyphname = w_alt;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,409,l),
(245,118,l),
(135,527,l),
(9,527,l),
(172,0,l),
(311,0,l),
(390,272,l),
(471,0,l),
(607,0,l),
(770,527,l),
(649,527,l),
(538,118,l),
(448,409,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
10 5 2 1 4 1 76 0 4 0 1 0 4 1 128 3 1 0 0 22 77 2 1 1 1 21 1 78 18 17 18 17 17 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = w_alt;
},
{
glyphname = W_alt;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,115,l),
(140,707,l),
(9,707,l),
(182,0,l),
(348,0,l),
(449,431,l),
(550,0,l),
(714,0,l),
(881,707,l),
(757,707,l),
(633,115,l),
(529,548,l),
(373,548,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 1 3 1 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 0 0 20 77 5 1 4 4 22 77 2 1 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
5 1 4 0 1 0 4 1 128 3 1 0 0 20 77 2 1 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 17 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 890;
}
);
note = W_alt;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(572,568,o),
(503,664,o),
(399,716,o),
(329,716,qs),
(257,716,o),
(152,663,o),
(84,565,o),
(52,429,o),
(52,347,qs),
(52,267,o),
(86,137,o),
(154,45,o),
(258,-6,o),
(329,-6,qs),
(400,-6,o),
(504,46,o),
(573,140,o),
(606,273,o),
(606,354,qs),
(606,435,o)
);
},
{
closed = 1;
nodes = (
(183,503,o),
(221,572,o),
(283,612,o),
(329,612,qs),
(374,612,o),
(436,572,o),
(474,503,o),
(490,408,o),
(490,354,qs),
(490,299,o),
(474,205,o),
(436,136,o),
(374,97,o),
(329,97,qs),
(283,97,o),
(221,136,o),
(183,205,o),
(167,299,o),
(167,354,qs),
(167,408,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 46 77 0 2 2 0 97 0 0 0 47 0 78 40 40 40 36 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,707,l),
(169,660,o),
(79,625,o),
(20,623,q),
(20,544,l),
(164,544,l),
(164,0,l),
(280,0,l),
(280,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 38 77 0 0 0 39 0 78 18 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 382;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,0,l),
(506,0,l),
(506,103,l),
(183,103,l),
(199,117,o),
(235,146,o),
(279,182,o),
(334,227,o),
(370,258,qs),
(397,281,o),
(446,333,o),
(484,393,o),
(506,463,o),
(506,505,qs),
(506,558,o),
(469,637,o),
(406,689,o),
(322,715,o),
(274,715,qs),
(223,715,o),
(144,694,o),
(78,648,o),
(35,576,o),
(31,530,q),
(145,530,l),
(153,567,o),
(219,611,o),
(267,611,qs),
(327,611,o),
(391,545,o),
(391,491,qs),
(391,454,o),
(356,390,o),
(303,335,o),
(244,285,o),
(220,264,qs),
(25,95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
36 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 46 77 0 3 3 4 95 0 4 4 39 4 78 17 30 36 18 39 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(440,17,o),
(509,70,o),
(552,151,o),
(552,209,qs),
(552,272,o),
(490,361,o),
(427,378,q),
(482,406,o),
(523,488,o),
(523,530,qs),
(523,581,o),
(485,652,o),
(421,696,o),
(338,716,o),
(293,716,qs),
(247,716,o),
(164,694,o),
(98,649,o),
(56,578,o),
(50,529,q),
(164,529,l),
(175,575,o),
(247,612,o),
(288,612,qs),
(312,612,o),
(355,603,o),
(389,580,o),
(409,541,o),
(409,512,qs),
(409,482,o),
(382,442,o),
(339,418,o),
(287,408,o),
(263,408,qs),
(222,408,l),
(222,310,l),
(292,310,ls),
(318,310,o),
(369,302,o),
(410,280,o),
(435,240,o),
(435,208,qs),
(435,173,o),
(408,130,o),
(367,106,o),
(317,97,o),
(294,97,qs),
(272,97,o),
(226,104,o),
(185,124,o),
(153,156,o),
(145,182,q),
(28,182,l),
(35,131,o),
(84,59,o),
(155,14,o),
(245,-7,o),
(294,-7,qs),
(346,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
51 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 46 77 0 2 2 0 97 8 1 0 0 47 0 78 1 0 44 42 38 37 35 33 25 23 22 20 12 10 6 5 0 58 1 58 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,219,l),
(37,136,l),
(402,136,l),
(402,0,l),
(517,0,l),
(517,136,l),
(598,136,l),
(598,238,l),
(517,238,l),
(517,707,l),
(368,707,l)
);
},
{
closed = 1;
nodes = (
(402,238,l),
(171,238,l),
(402,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
13 1 0 4 9 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 6 1 4 4 38 77 0 2 2 39 2 78 0 0 12 11 0 10 0 10 17 17 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = four;
unicode = 52;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,617,l),
(489,707,l),
(7,707,l),
(7,603,l),
(358,603,l),
(85,0,l),
(214,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,351,o),
(454,374,q),
(479,386,o),
(515,422,o),
(536,462,o),
(546,506,o),
(546,526,qs),
(546,577,o),
(507,649,o),
(442,695,o),
(357,716,o),
(312,716,qs),
(266,716,o),
(181,695,o),
(115,649,o),
(76,577,o),
(76,526,qs),
(76,506,o),
(85,462,o),
(106,421,o),
(141,385,o),
(167,372,q),
(107,349,o),
(52,259,o),
(52,198,qs),
(52,141,o),
(96,63,o),
(169,14,o),
(262,-8,o),
(311,-8,qs),
(359,-8,o),
(451,13,o),
(524,61,o),
(569,140,o),
(569,198,qs),
(569,259,o)
);
},
{
closed = 1;
nodes = (
(379,603,o),
(411,577,o),
(430,537,o),
(430,509,qs),
(430,483,o),
(411,445,o),
(379,420,o),
(335,408,o),
(311,408,qs),
(260,408,o),
(191,459,o),
(191,513,qs),
(191,540,o),
(210,579,o),
(243,603,o),
(287,614,o),
(311,614,qs),
(335,614,o)
);
},
{
closed = 1;
nodes = (
(388,303,o),
(428,277,o),
(452,235,o),
(452,205,qs),
(452,172,o),
(425,129,o),
(384,104,o),
(334,94,o),
(311,94,qs),
(288,94,o),
(238,104,o),
(196,129,o),
(168,172,o),
(168,205,qs),
(168,235,o),
(192,277,o),
(232,303,o),
(283,315,o),
(310,315,qs),
(337,315,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
33 13 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 46 77 0 5 5 0 97 0 0 0 47 0 78 55 54 37 36 65 63 54 73 55 73 45 43 36 53 37 53 24 22 36 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,235,o),
(439,202,qs),
(431,180,o),
(405,141,o),
(369,113,o),
(323,96,o),
(293,96,qs),
(255,96,o),
(187,131,o),
(174,167,q),
(55,167,l),
(62,122,o),
(106,57,o),
(170,14,o),
(249,-7,o),
(293,-7,qs),
(373,-7,o),
(479,54,o),
(542,155,o),
(568,285,o),
(568,353,qs),
(566,418,o),
(541,547,o),
(482,648,o),
(373,715,o),
(299,714,qs),
(246,714,o),
(155,681,o),
(88,620,o),
(49,532,o),
(49,478,qs),
(49,425,o),
(83,341,o),
(145,283,o),
(228,252,o),
(278,252,qs),
(304,252,o),
(356,262,o),
(403,283,o),
(443,315,o),
(458,338,q),
(458,304,o)
);
},
{
closed = 1;
nodes = (
(241,611,o),
(299,611,qs),
(329,611,o),
(378,589,o),
(412,552,o),
(430,502,o),
(430,474,qs),
(429,447,o),
(408,402,o),
(372,371,o),
(323,354,o),
(296,354,qs),
(236,354,o),
(165,424,o),
(165,485,qs),
(166,543,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 0 5 1 76 0 3 0 4 0 3 4 128 0 5 0 0 3 5 0 105 0 6 6 1 97 0 1 1 46 77 0 4 4 2 97 0 2 2 47 2 78 40 41 34 20 40 40 36 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
note = nine;
unicode = 57;
},
{
glyphname = uni0430;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 7 7 0 97 5 1 0 0 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 29 77 0 5 5 21 77 0 7 7 0 97 0 0 0 28 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
37 33 22 36 18 34 40 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = uni0430;
unicode = 1072;
},
{
glyphname = uni0435;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(333,87,o),
(297,87,qs),
(263,87,o),
(212,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(421,373,o),
(424,311,q),
(157,311,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 4 0 4 1 0 128 8 1 6 7 1 4 1 6 4 103 0 5 5 3 97 0 3 3 29 77 0 0 0 2 97 0 2 2 28 2 78 32 32 0 0 32 40 32 40 36 34 0 31 0 31 40 36 18 36 9 7 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni0435;
unicode = 1077;
},
{
glyphname = uni043E;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(206,408,o),
(263,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 0 97 4 1 0 0 29 77 5 1 2 2 1 97 0 1 1 28 1 78 21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = uni043E;
unicode = 1086;
},
{
glyphname = uni0441;
kernLeft = uni0444;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,12,o),
(475,54,o),
(518,120,o),
(526,165,q),
(409,165,l),
(401,132,o),
(342,92,o),
(297,92,qs),
(259,92,o),
(205,119,o),
(170,164,o),
(154,226,o),
(154,261,qs),
(154,295,o),
(169,358,o),
(203,406,o),
(257,434,o),
(295,434,qs),
(338,434,o),
(397,397,o),
(406,363,q),
(524,363,l),
(516,409,o),
(474,474,o),
(416,517,o),
(341,536,o),
(297,536,qs),
(235,536,o),
(141,494,o),
(75,422,o),
(42,322,o),
(42,262,qs),
(42,202,o),
(73,103,o),
(136,32,o),
(231,-7,o),
(294,-7,qs),
(337,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 29 77 0 4 4 0 97 6 1 0 0 28 0 78 1 0 33 32 30 28 20 18 16 15 11 9 0 37 1 37 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = uni0441;
unicode = 1089;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,601,o),
(432,578,o),
(457,542,o),
(460,515,q),
(575,515,l),
(571,569,o),
(527,646,o),
(457,694,o),
(367,716,o),
(317,716,qs),
(271,716,o),
(181,695,o),
(109,648,o),
(65,570,o),
(65,513,qs),
(65,467,o),
(94,403,o),
(144,358,o),
(211,329,o),
(285,308,o),
(362,290,o),
(398,280,qs),
(431,270,o),
(475,235,o),
(475,194,qs),
(475,167,o),
(452,130,o),
(413,107,o),
(362,98,o),
(334,98,qs),
(306,98,o),
(252,108,o),
(205,132,o),
(170,172,o),
(162,202,q),
(43,202,l),
(50,146,o),
(101,66,o),
(179,15,o),
(278,-8,o),
(333,-8,qs),
(387,-8,o),
(481,16,o),
(551,68,o),
(592,148,o),
(592,205,qs),
(592,253,o),
(559,318,o),
(503,360,o),
(429,386,o),
(388,397,q),
(366,401,o),
(275,424,qs),
(235,435,o),
(183,479,o),
(183,519,qs),
(183,547,o),
(208,584,o),
(248,605,o),
(296,613,o),
(319,613,qs),
(346,612,o)
);
},
{
closed = 1;
nodes = (
(277,-256,o),
(257,-270,q),
(281,-304,l),
(304,-296,o),
(344,-264,o),
(373,-222,o),
(390,-175,o),
(390,-152,qs),
(390,-121,o),
(356,-74,o),
(321,-74,qs),
(295,-74,o),
(259,-106,o),
(259,-132,qs),
(259,-157,o),
(292,-187,o),
(318,-189,q),
(312,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
77 76 2 6 73 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 7 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 1 0 69 67 57 56 52 50 32 30 26 25 21 19 0 61 1 61 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,412,o),
(357,380,q),
(464,380,l),
(459,456,o),
(348,536,o),
(261,536,qs),
(225,536,o),
(151,521,o),
(91,482,o),
(53,420,o),
(53,372,qs),
(53,333,o),
(82,282,o),
(129,252,o),
(188,233,o),
(217,227,qs),
(246,221,o),
(305,209,o),
(344,194,o),
(370,167,o),
(370,145,qs),
(370,124,o),
(346,100,o),
(313,89,o),
(279,87,o),
(270,87,qs),
(254,87,o),
(218,93,o),
(185,109,o),
(159,135,o),
(154,155,q),
(38,155,l),
(43,109,o),
(87,46,o),
(153,9,o),
(232,-7,o),
(272,-7,qs),
(310,-7,o),
(385,9,o),
(443,46,o),
(480,108,o),
(480,153,qs),
(480,200,o),
(447,255,o),
(387,288,o),
(304,308,o),
(253,317,qs),
(200,327,o),
(163,361,o),
(163,381,qs),
(163,400,o),
(182,424,o),
(211,437,o),
(244,441,o),
(259,441,qs),
(297,439,o)
);
},
{
closed = 1;
nodes = (
(229,-257,o),
(209,-271,q),
(233,-306,l),
(256,-297,o),
(296,-265,o),
(326,-223,o),
(343,-176,o),
(343,-153,qs),
(343,-122,o),
(309,-74,o),
(273,-74,qs),
(247,-74,o),
(211,-107,o),
(211,-133,qs),
(211,-158,o),
(244,-188,o),
(270,-190,q),
(264,-215,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
71 70 2 6 73 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 6 1 6 134 7 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 63 61 53 52 50 48 31 28 24 23 19 17 0 55 1 55 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(569,603,l),
(569,707,l),
(9,707,l),
(9,603,l),
(231,603,l),
(231,0,l),
(347,0,l),
(347,603,l)
);
},
{
closed = 1;
nodes = (
(244,-256,o),
(224,-270,q),
(248,-304,l),
(271,-296,o),
(311,-264,o),
(340,-222,o),
(357,-175,o),
(357,-152,qs),
(357,-121,o),
(323,-74,o),
(288,-74,qs),
(262,-74,o),
(226,-106,o),
(226,-132,qs),
(226,-157,o),
(259,-187,o),
(285,-189,q),
(279,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
23 22 2 4 73 0 4 0 4 134 3 1 1 1 2 95 0 2 2 38 77 0 0 0 39 0 78 38 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 578;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,676,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,171,ls),
(107,80,o),
(190,0,o),
(288,0,qs),
(346,0,l),
(346,98,l),
(305,98,ls),
(258,98,o),
(220,141,o),
(220,185,qs),
(220,428,l),
(354,428,l),
(354,527,l),
(220,527,l),
(220,676,l)
);
},
{
closed = 1;
nodes = (
(171,-257,o),
(151,-271,q),
(175,-306,l),
(198,-297,o),
(238,-265,o),
(267,-223,o),
(284,-176,o),
(284,-153,qs),
(284,-122,o),
(250,-74,o),
(215,-74,qs),
(189,-74,o),
(153,-107,o),
(153,-133,qs),
(153,-158,o),
(186,-188,o),
(212,-190,q),
(206,-215,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
35 34 2 7 73 0 6 0 6 133 0 7 3 7 134 4 1 1 1 0 95 5 1 0 0 41 77 0 2 2 3 98 0 3 3 39 3 78 38 17 17 19 33 35 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 388;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,225,ls),
(298,252,o),
(319,296,o),
(352,335,o),
(392,371,o),
(410,391,qs),
(440,423,o),
(472,492,o),
(472,537,qs),
(472,585,o),
(437,653,o),
(378,696,o),
(300,716,o),
(258,716,qs),
(205,716,o),
(123,688,o),
(66,640,o),
(34,573,o),
(32,534,q),
(143,534,l),
(146,555,o),
(166,585,o),
(196,603,o),
(232,612,o),
(251,612,qs),
(302,612,o),
(358,570,o),
(358,525,qs),
(357,498,o),
(331,453,o),
(294,412,o),
(250,373,o),
(213,329,o),
(188,279,o),
(188,249,qs),
(188,241,o),
(188,226,o),
(190,218,q),
(298,218,l)
);
},
{
closed = 1;
nodes = (
(171,96,o),
(171,63,qs),
(171,30,o),
(211,-8,o),
(245,-8,qs),
(279,-8,o),
(318,31,o),
(318,63,qs),
(318,96,o),
(279,137,o),
(245,137,qs),
(211,137,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 1 0 3 0 1 3 128 6 1 3 4 0 3 4 126 0 0 0 2 97 0 2 2 46 77 7 1 4 4 5 97 0 5 5 47 5 78 40 39 0 0 46 44 39 50 40 50 0 38 0 37 36 20 44 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = question;
unicode = 63;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(953,417,o),
(993,462,o),
(1014,521,o),
(1014,556,qs),
(1014,592,o),
(994,651,o),
(954,695,o),
(895,719,o),
(857,719,qs),
(779,719,o),
(698,628,o),
(698,556,qs),
(698,521,o),
(718,462,o),
(759,417,o),
(818,392,o),
(857,392,qs),
(895,392,o)
);
},
{
closed = 1;
nodes = (
(169,526,l),
(488,0,l),
(613,0,l),
(613,707,l),
(498,707,l),
(498,179,l),
(180,707,l),
(54,707,l),
(54,0,l),
(169,0,l)
);
},
{
closed = 1;
nodes = (
(923,586,o),
(923,556,qs),
(923,524,o),
(893,479,o),
(857,479,qs),
(819,479,o),
(788,524,o),
(788,556,qs),
(788,586,o),
(819,632,o),
(857,632,qs),
(893,632,o)
);
},
{
closed = 1;
nodes = (
(1002,260,l),
(1002,348,l),
(709,348,l),
(709,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
26 1 7 6 21 1 4 9 2 76 3 1 2 1 6 1 2 6 128 11 5 2 4 9 4 134 0 1 12 1 6 7 1 6 105 0 7 10 1 0 8 7 0 105 0 8 9 9 8 87 0 8 8 9 95 0 9 8 9 79 29 28 18 18 1 0 43 42 41 40 35 33 28 39 29 39 18 27 18 27 25 24 23 22 20 19 9 7 0 17 1 17 13 6 22 
CALL[ ]	/* CallFunction */";
};
width = 1068;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = uni0401;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,892,o),
(143,859,qs),
(143,826,o),
(183,789,o),
(215,789,qs),
(247,789,o),
(286,826,o),
(286,859,qs),
(286,892,o),
(246,928,o),
(215,928,qs),
(184,928,o)
);
},
{
closed = 1;
nodes = (
(380,892,o),
(380,859,qs),
(380,826,o),
(419,789,o),
(452,789,qs),
(484,789,o),
(523,826,o),
(523,859,qs),
(523,892,o),
(483,928,o),
(452,928,qs),
(420,928,o)
);
},
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,296,l),
(530,296,l),
(530,400,l),
(198,400,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
11 2 10 3 0 3 1 1 4 0 1 105 0 6 0 7 8 6 7 103 0 5 5 4 95 0 4 4 20 77 0 8 8 9 95 0 9 9 21 9 78 13 12 1 0 35 34 33 32 31 30 29 28 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 12 7 22 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0401;
unicode = 1025;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,268,o),
(189,304,o),
(196,338,o),
(214,363,o),
(231,363,qs),
(250,363,o),
(289,328,o),
(335,286,o),
(397,251,o),
(431,251,qs),
(478,251,o),
(536,287,o),
(569,344,o),
(581,416,o),
(581,452,q),
(476,452,l),
(476,440,o),
(475,404,o),
(467,370,o),
(448,346,o),
(431,346,qs),
(419,346,o),
(393,363,o),
(366,388,o),
(335,417,o),
(299,442,o),
(256,458,o),
(230,458,qs),
(184,457,o),
(126,422,o),
(93,365,o),
(82,298,o),
(82,267,qs),
(82,262,o),
(82,257,q),
(188,257,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
2 1 0 0 4 1 0 4 105 0 1 3 3 1 89 0 1 1 3 97 6 5 2 3 1 3 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 5 1 3 1 5 3 128 2 1 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 0 4 0 2 4 128 6 1 5 1 3 1 5 3 128 0 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 35 0 35 35 36 20 37 38 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 663;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,707,l),
(344,707,l),
(344,421,l),
(423,421,l),
(423,602,l),
(489,477,l),
(522,477,l),
(588,602,l),
(588,421,l),
(666,421,l),
(666,707,l),
(571,707,l),
(507,585,l)
);
},
{
closed = 1;
nodes = (
(225,421,l),
(225,634,l),
(319,634,l),
(319,707,l),
(54,707,l),
(54,634,l),
(146,634,l),
(146,421,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
12 7 4 3 2 5 1 76 0 2 5 1 5 2 1 128 8 3 2 1 1 132 6 4 2 0 5 5 0 87 6 4 2 0 0 5 95 7 1 5 0 5 79 17 17 17 18 17 18 18 17 16 9 6 31 
CALL[ ]	/* CallFunction */";
};
width = 720;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,636,o),
(47,545,qs),
(47,454,o),
(151,356,o),
(239,356,qs),
(326,356,o),
(429,454,o),
(429,545,qs),
(429,636,o),
(326,738,o),
(239,738,qs),
(152,738,o)
);
},
{
closed = 1;
nodes = (
(378,613,o),
(378,545,qs),
(378,477,o),
(303,405,o),
(239,405,qs),
(174,405,o),
(98,477,o),
(98,545,qs),
(98,613,o),
(174,691,o),
(239,691,qs),
(304,691,o)
);
},
{
closed = 1;
nodes = (
(320,542,o),
(320,586,qs),
(320,623,o),
(278,649,o),
(246,649,qs),
(165,649,l),
(165,452,l),
(210,452,l),
(210,521,l),
(232,521,l),
(279,452,l),
(333,452,l),
(283,527,l)
);
},
{
closed = 1;
nodes = (
(210,607,l),
(248,607,ls),
(259,607,o),
(275,598,o),
(275,585,qs),
(275,573,o),
(257,561,o),
(246,561,qs),
(210,561,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 93 values pushed */
36 1 5 8 1 76 6 1 4 5 3 5 4 3 128 10 1 0 11 1 2 7 0 2 105 0 7 0 9 8 7 9 105 12 1 8 0 5 4 8 5 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 38 37 13 12 1 0 44 42 37 45 38 45 32 30 29 28 27 26 25 24 19 17 12 23 13 23 7 5 0 11 1 11 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 476;
}
);
note = registered;
unicode = 174;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,767,o),
(76,730,o),
(54,676,o),
(54,643,qs),
(54,575,o),
(132,504,o),
(194,504,qs),
(255,504,o),
(335,575,o),
(335,643,qs),
(335,677,o),
(314,730,o),
(276,767,o),
(225,787,o),
(195,787,qs),
(165,787,o)
);
},
{
closed = 1;
nodes = (
(127,610,o),
(127,644,qs),
(127,679,o),
(166,716,o),
(195,716,qs),
(224,716,o),
(261,679,o),
(261,644,qs),
(261,610,o),
(224,574,o),
(195,574,qs),
(165,574,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 3 2 0 3 105 5 1 2 1 1 2 89 5 1 2 2 1 97 0 1 2 1 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 389;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,424,o),
(54,363,qs),
(54,305,o),
(127,239,o),
(181,239,qs),
(235,239,o),
(308,305,o),
(308,363,qs),
(308,424,o),
(235,491,o),
(181,491,qs),
(127,491,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 362;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = uni27F5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,513,l),
(392,591,l),
(54,270,l),
(392,-51,l),
(455,26,l),
(241,220,l),
(1324,220,l),
(1324,318,l),
(239,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 0 1 1 76 7 6 2 1 74 4 3 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1378;
}
);
note = uni27F5;
unicode = 10229;
},
{
glyphname = uni27F6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(986,-51,l),
(1324,269,l),
(985,591,l),
(923,512,l),
(1137,318,l),
(54,318,l),
(54,220,l),
(1137,220,l),
(923,26,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 1 0 1 1 76 5 4 2 1 74 8 7 2 0 73 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1378;
}
);
note = uni27F6;
unicode = 10230;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(595,255,l),
(671,317,l),
(362,672,l),
(54,317,l),
(129,255,l),
(314,478,l),
(314,0,l),
(410,0,l),
(410,478,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
8 7 6 5 4 3 2 7 0 74 0 0 0 118 16 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,0,l),
(671,354,l),
(596,416,l),
(411,194,l),
(411,672,l),
(315,672,l),
(315,194,l),
(130,416,l),
(54,354,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
8 7 6 5 4 1 6 0 73 0 0 0 118 18 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni21BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(901,721,l),
(516,767,l),
(509,385,l),
(600,385,l),
(603,596,l),
(624,579,o),
(663,532,o),
(693,474,o),
(713,410,o),
(716,376,qs),
(718,356,o),
(718,337,qs),
(718,296,o),
(693,201,o),
(622,114,o),
(515,61,o),
(446,60,qs),
(443,60,o),
(441,60,qs),
(380,60,o),
(279,104,o),
(206,181,o),
(166,284,o),
(166,341,qs),
(166,343,o),
(166,346,qs),
(166,412,o),
(220,540,o),
(275,590,q),
(204,669,l),
(130,607,o),
(55,442,o),
(55,355,qs),
(55,351,o),
(55,346,qs),
(56,258,o),
(114,113,o),
(219,9,o),
(361,-45,o),
(444,-45,qs),
(450,-45,o),
(456,-45,qs),
(549,-42,o),
(697,29,o),
(795,147,o),
(829,279,o),
(829,337,qs),
(829,363,o),
(826,390,qs),
(818,463,o),
(743,613,o),
(676,661,q),
(887,629,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
52 50 47 23 22 5 2 74 0 2 1 2 133 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 49 48 36 32 73 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 955;
}
);
note = uni21BA;
unicode = 8634;
},
{
glyphname = uni21BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,610,o),
(136,467,o),
(130,390,q),
(125,357,o),
(125,326,qs),
(125,274,o),
(160,147,o),
(258,29,o),
(406,-42,o),
(499,-45,qs),
(505,-45,o),
(511,-45,qs),
(594,-45,o),
(735,9,o),
(840,113,o),
(898,258,o),
(900,346,qs),
(900,351,o),
(900,355,qs),
(900,442,o),
(825,607,o),
(751,669,q),
(679,590,l),
(735,540,o),
(789,412,o),
(789,346,qs),
(789,343,o),
(789,341,qs),
(789,284,o),
(749,181,o),
(676,104,o),
(575,60,o),
(514,60,qs),
(512,60,o),
(509,60,qs),
(440,61,o),
(332,114,o),
(262,201,o),
(237,294,o),
(237,334,qs),
(237,354,o),
(240,376,qs),
(242,409,o),
(262,474,o),
(292,532,o),
(331,579,o),
(352,596,q),
(355,385,l),
(446,385,l),
(439,767,l),
(54,721,l),
(68,629,l),
(278,661,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
10 1 1 0 1 76 52 30 29 5 2 5 0 74 0 0 1 0 133 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 43 39 76 19 3 6 24 
CALL[ ]	/* CallFunction */";
};
width = 955;
}
);
note = uni21BB;
unicode = 8635;
},
{
glyphname = uni21B7;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(787,165,o),
(824,285,o),
(824,347,qs),
(824,431,o),
(770,574,o),
(670,678,o),
(528,736,o),
(440,736,qs),
(356,736,o),
(218,680,o),
(117,580,o),
(58,444,o),
(54,365,q),
(164,365,l),
(168,422,o),
(211,519,o),
(284,590,o),
(382,630,o),
(440,630,qs),
(502,630,o),
(604,587,o),
(676,510,o),
(715,406,o),
(715,346,qs),
(715,295,o),
(683,190,o),
(655,152,q),
(599,361,l),
(510,341,l),
(616,-33,l),
(976,106,l),
(939,191,l),
(751,114,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
32 5 4 3 2 1 6 1 73 0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 36 20 44 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = uni21B7;
unicode = 8631;
},
{
glyphname = uni21B6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,106,l),
(415,-33,l),
(521,341,l),
(431,361,l),
(375,152,l),
(346,190,o),
(315,295,o),
(315,346,qs),
(315,406,o),
(354,510,o),
(426,587,o),
(528,630,o),
(590,630,qs),
(648,630,o),
(746,590,o),
(819,519,o),
(862,422,o),
(866,365,q),
(976,365,l),
(971,444,o),
(913,580,o),
(812,680,o),
(674,736,o),
(590,736,qs),
(502,736,o),
(360,678,o),
(260,574,o),
(206,431,o),
(206,347,qs),
(206,285,o),
(243,165,o),
(279,114,q),
(91,191,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
32 31 30 29 28 27 6 1 73 0 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 36 20 39 3 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = uni21B6;
unicode = 8630;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,334,o),
(273,360,o),
(311,360,qs),
(372,360,o),
(447,292,o),
(447,228,qs),
(447,193,o),
(425,144,o),
(386,112,o),
(334,97,o),
(304,97,qs),
(283,97,o),
(241,108,o),
(205,130,o),
(178,162,o),
(172,183,q),
(57,183,l),
(64,133,o),
(109,60,o),
(176,14,o),
(259,-8,o),
(306,-8,qs),
(361,-8,o),
(455,25,o),
(525,87,o),
(565,177,o),
(565,234,qs),
(565,287,o),
(532,371,o),
(470,429,o),
(384,460,o),
(331,460,qs),
(284,460,o),
(217,439,o),
(188,420,q),
(208,604,l),
(537,604,l),
(537,707,l),
(111,707,l),
(73,311,l),
(186,311,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 38 77 0 5 5 3 97 0 3 3 47 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,454,o),
(187,506,o),
(213,552,o),
(231,570,qs),
(251,590,o),
(304,612,o),
(336,612,qs),
(374,612,o),
(438,577,o),
(452,540,q),
(568,540,l),
(551,629,o),
(427,715,o),
(340,715,qs),
(282,715,o),
(192,679,o),
(160,648,qs),
(130,619,o),
(89,545,o),
(64,462,o),
(53,372,o),
(53,327,qs),
(54,261,o),
(83,140,o),
(148,49,o),
(253,-6,o),
(329,-6,qs),
(380,-6,o),
(468,28,o),
(534,90,o),
(571,176,o),
(571,229,qs),
(571,281,o),
(538,366,o),
(478,424,o),
(392,456,o),
(340,456,qs),
(288,456,o),
(196,416,o),
(163,374,q),
(163,400,o)
);
},
{
closed = 1;
nodes = (
(381,96,o),
(323,96,qs),
(294,96,o),
(245,117,o),
(209,152,o),
(189,199,o),
(189,225,qs),
(189,253,o),
(210,301,o),
(247,335,o),
(296,354,o),
(324,354,qs),
(384,354,o),
(455,281,o),
(455,221,qs),
(455,165,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 5 0 1 76 0 3 4 0 4 3 0 128 0 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 46 77 0 6 6 1 97 0 1 1 47 1 78 40 41 34 18 43 40 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = six;
unicode = 54;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,-112,l),
(225,-110,o),
(254,-108,o),
(268,-108,qs),
(295,-108,o),
(323,-124,o),
(323,-143,qs),
(323,-166,o),
(281,-187,o),
(245,-187,qs),
(237,-187,o),
(221,-186,o),
(213,-185,q),
(212,-252,l),
(239,-255,o),
(261,-255,qs),
(288,-255,o),
(341,-242,o),
(383,-213,o),
(409,-166,o),
(409,-133,qs),
(409,-91,o),
(362,-49,o),
(324,-49,qs),
(319,-49,o),
(311,-49,o),
(304,-50,q),
(321,16,l),
(247,16,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 57 values pushed */
27 15 2 2 3 14 1 1 2 2 76 0 0 4 3 4 0 3 128 5 1 4 0 3 2 4 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 0 0 0 28 0 28 52 51 38 65 6 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 605;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 41 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = ccedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,-190,o),
(251,-190,qs),
(245,-190,o),
(227,-189,o),
(220,-188,q),
(219,-256,l),
(243,-259,o),
(264,-259,qs),
(292,-259,o),
(348,-246,o),
(392,-217,o),
(418,-171,o),
(418,-138,qs),
(418,-95,o),
(371,-50,o),
(333,-50,qs),
(331,-50,o),
(320,-50,o),
(312,-51,q),
(323,-5,l),
(359,-2,o),
(426,21,o),
(479,62,o),
(516,124,o),
(523,165,q),
(406,165,l),
(398,132,o),
(340,92,o),
(295,92,qs),
(257,92,o),
(203,119,o),
(168,164,o),
(151,226,o),
(151,261,qs),
(151,295,o),
(166,358,o),
(200,406,o),
(253,434,o),
(292,434,qs),
(335,434,o),
(394,398,o),
(403,363,q),
(521,363,l),
(505,453,o),
(385,536,o),
(294,536,qs),
(232,536,o),
(138,494,o),
(72,422,o),
(39,322,o),
(39,262,qs),
(39,207,o),
(64,115,o),
(117,45,o),
(195,2,o),
(248,-4,q),
(221,-114,l),
(233,-112,o),
(262,-110,o),
(277,-110,qs),
(299,-110,o),
(331,-126,o),
(331,-145,qs),
(331,-170,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
7 1 6 4 58 6 2 8 0 57 1 7 8 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 6 4 0 4 6 0 128 0 4 0 0 8 4 0 105 0 3 3 1 97 0 1 1 49 77 0 8 8 7 97 0 7 7 51 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 6 4 0 4 6 0 128 0 4 0 0 8 4 0 105 0 8 0 7 8 7 101 0 3 3 1 97 0 1 1 49 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 38 55 18 40 34 18 43 50 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 559;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = uni0162;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(350,603,l),
(574,603,l),
(574,707,l),
(9,707,l),
(9,603,l),
(234,603,l),
(234,0,l),
(255,0,l),
(225,-112,l),
(234,-109,o),
(259,-107,o),
(272,-107,qs),
(283,-107,o),
(305,-109,o),
(324,-117,o),
(334,-132,o),
(334,-143,qs),
(334,-168,o),
(293,-188,o),
(258,-188,qs),
(250,-188,o),
(233,-187,o),
(224,-186,q),
(223,-252,l),
(250,-255,o),
(271,-255,qs),
(299,-255,o),
(353,-242,o),
(395,-213,o),
(420,-167,o),
(420,-135,qs),
(420,-93,o),
(371,-49,o),
(334,-49,qs),
(330,-49,o),
(322,-49,o),
(314,-50,q),
(327,0,l),
(350,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
1 1 3 0 29 15 2 2 3 14 1 1 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 0 4 3 4 0 3 128 0 3 2 4 3 2 126 7 1 5 5 6 95 0 6 6 38 77 9 8 2 4 4 39 77 0 2 2 1 97 0 1 1 51 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 0 4 3 4 0 3 128 0 3 2 4 3 2 126 0 2 0 1 2 1 101 7 1 5 5 6 95 0 6 6 38 77 9 8 2 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 38 0 38 17 17 17 19 38 51 38 50 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,676,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,171,ls),
(107,109,o),
(145,31,o),
(190,14,q),
(155,-114,l),
(166,-112,o),
(197,-110,o),
(208,-110,qs),
(233,-110,o),
(264,-125,o),
(264,-145,qs),
(264,-170,o),
(223,-191,o),
(187,-191,qs),
(179,-191,o),
(163,-190,o),
(154,-188,q),
(153,-256,l),
(177,-259,o),
(198,-259,qs),
(228,-259,o),
(283,-245,o),
(326,-215,o),
(351,-168,o),
(351,-136,qs),
(351,-92,o),
(303,-50,o),
(265,-50,qs),
(260,-50,o),
(253,-50,o),
(244,-51,q),
(260,0,l),
(343,0,l),
(343,98,l),
(304,98,ls),
(258,98,o),
(220,140,o),
(220,185,qs),
(220,428,l),
(353,428,l),
(353,527,l),
(220,527,l),
(220,676,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
38 1 3 2 11 1 7 4 37 25 2 6 7 24 1 5 6 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 10 0 10 133 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 8 1 1 1 0 95 9 1 0 0 41 77 0 2 2 3 95 0 3 3 39 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 10 0 10 133 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 8 1 1 1 0 95 9 1 0 0 41 77 0 2 2 3 95 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
47 46 45 44 22 52 51 38 50 17 35 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Ccedilla;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,551,o),
(549,499,q),
(663,499,l),
(647,606,o),
(495,716,o),
(378,716,qs),
(295,716,o),
(170,661,o),
(86,564,o),
(43,431,o),
(43,354,qs),
(43,281,o),
(79,156,o),
(152,61,o),
(260,3,o),
(332,-4,q),
(304,-112,l),
(312,-110,o),
(337,-107,o),
(353,-107,qs),
(377,-107,o),
(412,-122,o),
(413,-143,qs),
(412,-168,o),
(370,-188,o),
(332,-188,qs),
(325,-188,o),
(311,-188,o),
(303,-187,q),
(302,-252,l),
(329,-255,o),
(350,-255,qs),
(378,-255,o),
(432,-242,o),
(474,-212,o),
(499,-166,o),
(499,-133,qs),
(499,-91,o),
(451,-49,o),
(413,-49,qs),
(410,-49,o),
(403,-49,o),
(393,-50,q),
(404,-5,l),
(456,-2,o),
(546,29,o),
(616,83,o),
(662,160,o),
(670,208,q),
(552,208,l),
(540,155,o),
(447,97,o),
(378,97,qs),
(322,97,o),
(240,139,o),
(187,210,o),
(162,304,o),
(162,356,qs),
(162,406,o),
(186,499,o),
(238,570,o),
(319,612,o),
(376,612,qs),
(446,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
20 1 7 4 46 34 2 6 7 33 1 5 6 3 76 47 1 3 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 112 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 39 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 112 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 47 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 39 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 47 77 0 6 6 5 97 0 5 5 51 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 9 0 2 0 9 2 128 0 2 1 0 2 1 126 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 10 1 0 0 8 97 0 8 8 46 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 61 60 58 56 44 42 38 35 32 30 24 21 19 18 14 13 11 9 0 63 1 63 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 713;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = scedilla;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,412,o),
(357,380,q),
(464,380,l),
(459,456,o),
(348,536,o),
(261,536,qs),
(224,536,o),
(150,520,o),
(90,482,o),
(53,419,o),
(53,372,qs),
(53,322,o),
(100,265,o),
(171,235,o),
(252,219,o),
(326,203,o),
(370,174,o),
(370,145,qs),
(370,127,o),
(352,103,o),
(320,90,o),
(289,87,o),
(271,87,qs),
(255,87,o),
(219,93,o),
(185,109,o),
(159,135,o),
(154,155,q),
(38,155,l),
(41,116,o),
(74,59,o),
(124,22,o),
(186,1,o),
(219,-3,q),
(191,-115,l),
(202,-113,o),
(230,-111,o),
(247,-111,qs),
(270,-111,o),
(300,-126,o),
(300,-146,qs),
(300,-171,o),
(258,-190,o),
(222,-190,qs),
(214,-190,o),
(198,-189,o),
(190,-188,q),
(189,-255,l),
(216,-258,o),
(237,-258,qs),
(265,-258,o),
(320,-245,o),
(362,-215,o),
(387,-169,o),
(387,-136,qs),
(387,-93,o),
(339,-51,o),
(300,-51,qs),
(295,-51,o),
(285,-51,o),
(280,-52,q),
(292,-6,l),
(329,-5,o),
(397,14,o),
(449,52,o),
(480,112,o),
(480,153,qs),
(480,204,o),
(441,261,o),
(374,293,o),
(283,312,o),
(236,321,qs),
(202,327,o),
(163,355,o),
(163,381,qs),
(163,400,o),
(182,424,o),
(211,437,o),
(244,441,o),
(259,441,qs),
(297,439,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
46 1 1 7 45 33 2 4 5 32 1 3 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 7 0 5 4 7 5 105 10 1 0 0 8 97 0 8 8 49 77 0 1 1 47 77 0 4 4 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 7 0 5 4 7 5 105 0 4 0 3 4 3 101 10 1 0 0 8 97 0 8 8 49 77 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 78 77 75 73 58 56 52 51 43 41 37 34 31 29 23 19 18 17 0 80 1 80 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = uni21A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(780,0,ls),
(853,0,o),
(974,50,o),
(1060,142,o),
(1105,266,o),
(1105,338,qs),
(1105,410,o),
(1060,534,o),
(974,625,o),
(853,676,o),
(780,676,qs),
(180,676,l),
(180,579,l),
(776,579,ls),
(827,579,o),
(911,541,o),
(970,476,o),
(1001,389,o),
(1001,339,qs),
(1001,288,o),
(970,200,o),
(911,134,o),
(828,97,o),
(776,97,qs),
(239,97,l),
(452,291,l),
(393,370,l),
(54,49,l),
(392,-273,l),
(452,-196,l),
(239,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 3 2 0 1 2 1 3 0 2 76 1 1 3 73 0 2 0 1 0 2 1 103 0 0 3 3 0 87 0 0 0 3 95 0 3 0 3 79 40 33 40 37 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 1159;
}
);
note = uni21A9;
unicode = 8617;
},
{
glyphname = uni2713;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,449,l),
(54,372,l),
(383,-7,l),
(1004,748,l),
(924,826,l),
(384,165,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
2 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 1058;
}
);
note = uni2713;
unicode = 10003;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,578,o),
(188,546,qs),
(188,514,o),
(225,477,o),
(257,477,qs),
(289,477,o),
(327,514,o),
(327,546,qs),
(327,578,o),
(289,617,o),
(257,617,qs),
(225,617,o)
);
},
{
closed = 1;
nodes = (
(462,313,l),
(462,408,l),
(54,408,l),
(54,313,l)
);
},
{
closed = 1;
nodes = (
(188,201,o),
(188,169,qs),
(188,137,o),
(225,99,o),
(257,99,qs),
(289,99,o),
(327,137,o),
(327,169,qs),
(327,201,o),
(289,239,o),
(257,239,qs),
(225,239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 0 0 1 2 0 1 105 0 2 0 3 4 2 3 103 7 1 4 5 5 4 89 7 1 4 4 5 97 0 5 4 5 81 17 16 1 0 23 21 16 27 17 27 15 14 13 12 7 5 0 11 1 11 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = divide;
unicode = 247;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,211,l),
(329,357,l),
(476,504,l),
(409,570,l),
(263,423,l),
(116,571,l),
(50,504,l),
(196,357,l),
(50,210,l),
(116,143,l),
(263,292,l),
(409,143,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 526;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,707,l),
(34,707,l),
(249,337,l),
(141,337,l),
(141,250,l),
(291,250,l),
(291,173,l),
(141,173,l),
(141,86,l),
(291,86,l),
(291,0,l),
(407,0,l),
(407,86,l),
(556,86,l),
(556,173,l),
(407,173,l),
(407,250,l),
(556,250,l),
(556,337,l),
(448,337,l),
(663,707,l),
(531,707,l),
(351,373,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
22 1 1 0 1 76 9 1 1 8 1 2 3 1 2 104 7 1 3 6 1 4 5 3 4 103 10 1 0 0 38 77 0 5 5 39 5 78 21 20 19 18 17 17 17 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,82,l),
(143,0,l),
(259,0,l),
(259,82,l),
(460,82,l),
(460,174,l),
(259,174,l),
(259,252,l),
(395,252,ls),
(452,252,o),
(550,280,o),
(620,337,o),
(660,425,o),
(660,477,qs),
(660,479,o),
(660,482,qs),
(660,545,o),
(623,631,o),
(555,684,o),
(459,707,o),
(400,707,qs),
(143,707,l),
(143,350,l),
(54,350,l),
(54,252,l),
(143,252,l),
(143,174,l),
(54,174,l),
(54,82,l)
);
},
{
closed = 1;
nodes = (
(259,603,l),
(393,603,ls),
(430,603,o),
(486,592,o),
(525,563,o),
(545,514,o),
(545,477,qs),
(544,442,o),
(519,394,o),
(477,364,o),
(422,350,o),
(390,350,qs),
(259,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
11 9 2 2 4 1 1 0 2 1 103 5 1 0 8 1 6 7 0 6 103 0 10 10 3 95 0 3 3 38 77 0 7 7 39 7 78 30 29 40 38 29 41 30 41 17 17 17 17 42 33 17 17 16 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B4;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,695,o),
(120,653,o),
(79,586,o),
(76,538,q),
(191,538,l),
(194,561,o),
(217,589,o),
(250,605,o),
(288,611,o),
(307,611,qs),
(354,610,o),
(408,569,o),
(408,532,qs),
(408,522,o),
(401,499,o),
(389,478,o),
(374,461,o),
(367,457,q),
(42,457,l),
(42,376,l),
(261,376,l),
(156,305,l),
(42,305,l),
(42,225,l),
(94,225,l),
(83,211,o),
(73,170,o),
(73,155,qs),
(73,112,o),
(110,50,o),
(170,9,o),
(246,-10,o),
(286,-10,qs),
(331,-10,o),
(414,8,o),
(478,49,o),
(519,114,o),
(521,161,q),
(409,161,l),
(405,140,o),
(384,113,o),
(354,98,o),
(317,93,o),
(296,93,qs),
(277,93,o),
(238,101,o),
(207,119,o),
(187,150,o),
(187,173,qs),
(187,187,o),
(202,219,o),
(213,225,q),
(538,225,l),
(538,305,l),
(313,305,l),
(418,376,l),
(538,376,l),
(538,457,l),
(485,457,l),
(502,474,o),
(518,525,o),
(518,550,qs),
(518,595,o),
(481,658,o),
(422,697,o),
(348,714,o),
(311,714,qs),
(267,714,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
0 13 12 1 12 13 1 128 0 6 4 5 4 6 5 128 11 1 1 10 1 2 3 1 2 103 9 1 3 8 1 4 6 3 4 103 0 12 12 0 97 14 1 0 0 46 77 0 5 5 7 97 0 7 7 47 7 78 1 0 63 62 58 56 49 48 47 46 45 44 43 42 35 33 29 28 24 22 15 14 13 12 11 10 9 8 0 67 1 67 15 8 22 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = uni20B4;
unicode = 8372;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,514,ls),
(249,573,o),
(304,621,o),
(345,621,qs),
(428,621,o),
(437,548,q),
(545,548,l),
(540,633,o),
(437,716,o),
(348,716,qs),
(250,716,o),
(137,612,o),
(137,514,qs),
(137,386,l),
(54,386,l),
(54,286,l),
(137,286,l),
(137,103,l),
(54,103,l),
(54,0,l),
(551,0,l),
(551,103,l),
(249,103,l),
(249,286,l),
(459,286,l),
(459,386,l),
(249,386,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 7 8 5 8 7 5 128 10 9 2 5 4 1 0 1 5 0 103 0 8 8 6 97 0 6 6 46 77 3 1 1 1 2 95 0 2 2 39 2 78 0 0 0 26 0 26 33 18 35 17 17 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 605;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = Scedilla;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,601,o),
(432,578,o),
(457,542,o),
(460,515,q),
(575,515,l),
(571,569,o),
(527,645,o),
(457,694,o),
(367,716,o),
(317,716,qs),
(271,716,o),
(181,695,o),
(109,648,o),
(65,570,o),
(65,513,qs),
(65,466,o),
(94,401,o),
(143,356,o),
(209,328,o),
(283,308,o),
(361,291,o),
(398,280,qs),
(431,270,o),
(475,232,o),
(475,197,qs),
(475,196,o),
(475,194,qs),
(475,167,o),
(452,130,o),
(413,107,o),
(362,98,o),
(334,98,qs),
(306,98,o),
(252,108,o),
(205,132,o),
(170,172,o),
(162,202,q),
(43,202,l),
(49,153,o),
(89,80,o),
(151,30,o),
(232,1,o),
(278,-4,q),
(251,-114,l),
(261,-112,o),
(286,-109,o),
(303,-109,qs),
(327,-109,o),
(360,-124,o),
(360,-144,qs),
(360,-170,o),
(318,-189,o),
(282,-189,qs),
(274,-189,o),
(258,-188,o),
(250,-187,q),
(249,-254,l),
(274,-257,o),
(296,-257,qs),
(325,-257,o),
(379,-243,o),
(421,-214,o),
(446,-168,o),
(446,-135,qs),
(446,-93,o),
(398,-51,o),
(361,-51,qs),
(358,-51,o),
(350,-51,o),
(340,-52,q),
(350,-7,l),
(401,-6,o),
(489,20,o),
(554,72,o),
(592,151,o),
(592,205,qs),
(592,257,o),
(554,325,o),
(490,368,o),
(405,393,o),
(358,403,qs),
(332,408,o),
(268,423,o),
(218,446,o),
(183,487,o),
(183,519,qs),
(183,547,o),
(208,584,o),
(248,605,o),
(296,613,o),
(319,613,qs),
(346,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
48 1 1 7 21 1 5 2 47 35 2 4 5 34 1 3 4 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 5 4 1 5 112 10 1 0 0 8 97 0 8 8 46 77 0 7 7 1 97 0 1 1 47 77 0 4 4 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 10 1 0 0 8 97 0 8 8 46 77 0 7 7 1 97 0 1 1 47 77 0 4 4 3 97 0 3 3 51 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 9 0 6 0 9 6 128 0 6 7 0 6 7 126 0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 4 0 3 4 3 101 10 1 0 0 8 97 0 8 8 46 77 0 7 7 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 87 86 82 80 60 58 54 53 45 43 39 36 33 31 25 22 20 19 0 91 1 91 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = t_alt;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,676,l),
(109,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,171,ls),
(107,80,o),
(190,0,o),
(287,0,qs),
(343,0,l),
(343,98,l),
(304,98,ls),
(258,98,o),
(220,141,o),
(220,185,qs),
(220,428,l),
(353,428,l),
(353,527,l),
(220,527,l),
(220,676,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 98 0 3 3 21 3 78 17 17 19 33 35 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = t_alt;
},
{
glyphname = alt_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,707,l),
(238,681,o),
(196,648,o),
(146,629,o),
(90,622,o),
(61,621,q),
(61,544,l),
(222,544,l),
(222,103,l),
(42,103,l),
(42,0,l),
(493,0,l),
(493,103,l),
(338,103,l),
(338,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 0 4 3 103 0 5 5 20 77 2 1 0 0 1 96 0 1 1 21 1 78 20 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 507;
}
);
note = alt_1;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,663,o),
(113,555,o),
(54,402,o),
(54,308,qs),
(54,212,o),
(112,59,o),
(219,-48,o),
(369,-105,o),
(461,-105,qs),
(552,-105,o),
(702,-48,o),
(808,59,o),
(866,212,o),
(866,308,qs),
(866,401,o),
(807,554,o),
(700,662,o),
(551,722,o),
(461,722,qs),
(371,722,o)
);
},
{
closed = 1;
nodes = (
(649,591,o),
(732,505,o),
(778,383,o),
(778,307,qs),
(778,230,o),
(734,109,o),
(651,24,o),
(535,-21,o),
(463,-21,qs),
(391,-21,o),
(274,24,o),
(190,109,o),
(145,230,o),
(145,307,qs),
(145,383,o),
(191,505,o),
(275,591,o),
(392,637,o),
(463,637,qs),
(533,637,o)
);
},
{
closed = 1;
nodes = (
(484,211,ls),
(560,211,o),
(654,292,o),
(654,372,qs),
(653,450,o),
(564,522,o),
(487,522,qs),
(319,522,l),
(319,75,l),
(406,75,l),
(406,211,l)
);
},
{
closed = 1;
nodes = (
(406,442,l),
(484,442,ls),
(522,442,o),
(568,407,o),
(568,371,qs),
(568,328,o),
(518,290,o),
(480,290,qs),
(406,290,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
0 4 6 3 6 4 3 128 9 1 0 10 1 2 5 0 2 105 0 5 0 8 7 5 8 103 11 1 7 0 6 4 7 6 103 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 52 51 21 20 1 0 58 56 51 59 52 59 50 48 44 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 920;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = colon.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,552,o),
(62,519,qs),
(62,484,o),
(102,446,o),
(135,446,qs),
(167,446,o),
(208,484,o),
(208,519,qs),
(208,552,o),
(168,593,o),
(135,593,qs),
(102,593,o)
);
},
{
closed = 1;
nodes = (
(62,194,o),
(62,161,qs),
(62,127,o),
(102,88,o),
(135,88,qs),
(167,88,o),
(208,127,o),
(208,161,qs),
(208,194,o),
(168,235,o),
(135,235,qs),
(102,235,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 270;
}
);
note = colon.uc;
},
{
glyphname = y_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,274,ls),
(438,239,o),
(425,173,o),
(394,122,o),
(342,91,o),
(303,91,qs),
(263,91,o),
(214,118,o),
(187,163,o),
(178,222,o),
(178,255,qs),
(178,527,l),
(64,527,l),
(64,234,ls),
(64,180,o),
(85,91,o),
(136,27,o),
(216,-8,o),
(276,-8,qs),
(329,-8,o),
(413,26,o),
(438,68,q),
(438,26,o),
(432,-54,o),
(404,-116,o),
(348,-153,o),
(297,-153,qs),
(256,-153,o),
(189,-117,o),
(181,-81,q),
(62,-81,l),
(69,-127,o),
(113,-192,o),
(174,-234,o),
(252,-254,o),
(296,-254,qs),
(385,-254,o),
(496,-188,o),
(523,-130,qs),
(535,-105,o),
(546,-49,o),
(551,7,o),
(551,34,qs),
(551,527,l),
(438,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 3 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 3 2 3 1 2 128 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 7 6 2 4 4 22 77 0 5 5 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 44 0 44 37 21 38 34 20 39 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = y_alt;
},
{
glyphname = u_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,274,ls),
(425,238,o),
(411,173,o),
(380,122,o),
(328,91,o),
(290,91,qs),
(250,91,o),
(203,119,o),
(178,164,o),
(171,222,o),
(171,252,qs),
(171,527,l),
(57,527,l),
(57,234,ls),
(57,182,o),
(76,93,o),
(124,28,o),
(202,-8,o),
(261,-8,qs),
(310,-8,o),
(354,8,qs),
(405,29,o),
(431,72,q),
(439,0,l),
(538,0,l),
(538,527,l),
(425,527,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
5 4 2 2 2 22 77 0 3 3 0 97 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 4 2 2 2 22 77 0 0 0 21 77 0 3 3 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 26 0 26 37 21 36 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = u_alt;
},
{
glyphname = be_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,140,o),
(125,49,o),
(224,-6,o),
(299,-7,qs),
(360,-7,o),
(454,31,o),
(521,100,o),
(556,197,o),
(556,256,qs),
(556,310,o),
(524,397,o),
(464,459,o),
(379,493,o),
(327,493,qs),
(277,493,o),
(188,458,o),
(154,420,q),
(156,479,o),
(208,561,o),
(264,582,qs),
(300,595,o),
(391,621,o),
(476,648,o),
(544,687,o),
(555,715,q),
(492,793,l),
(480,779,o),
(447,759,o),
(427,751,qs),
(366,728,o),
(239,689,o),
(185,660,qs),
(151,640,o),
(95,585,o),
(76,546,qs),
(51,494,o),
(39,371,o),
(39,312,qs),
(40,253,o)
);
},
{
closed = 1;
nodes = (
(214,117,o),
(178,158,o),
(160,210,o),
(160,239,qs),
(160,309,o),
(239,391,o),
(307,391,qs),
(339,391,o),
(389,369,o),
(424,330,o),
(443,275,o),
(443,244,qs),
(443,214,o),
(424,159,o),
(388,118,o),
(336,92,o),
(301,92,qs),
(267,92,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
21 1 3 0 1 76 13 12 2 0 74 0 0 0 3 2 0 3 105 4 1 2 2 1 97 0 1 1 28 1 78 40 39 50 48 39 56 40 56 35 33 25 23 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = be_alt;
},
{
glyphname = g_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,502,o),
(327,535,o),
(284,535,qs),
(223,535,o),
(131,493,o),
(69,421,o),
(38,320,o),
(38,259,qs),
(38,203,o),
(67,106,o),
(127,34,o),
(218,-7,o),
(278,-7,qs),
(332,-7,o),
(420,28,o),
(444,66,q),
(445,52,o),
(445,39,qs),
(445,18,o),
(440,-39,o),
(426,-71,qs),
(409,-109,o),
(344,-151,o),
(286,-151,qs),
(234,-151,o),
(143,-114,o),
(111,-90,q),
(103,-113,o),
(80,-166,o),
(70,-189,q),
(119,-223,o),
(234,-254,o),
(297,-254,qs),
(374,-254,o),
(478,-206,o),
(509,-163,qs),
(529,-135,o),
(549,-70,o),
(558,-4,o),
(558,29,qs),
(558,527,l),
(456,527,l),
(447,465,l)
);
},
{
closed = 1;
nodes = (
(390,406,o),
(427,361,o),
(445,299,o),
(445,265,qs),
(445,232,o),
(427,170,o),
(391,121,o),
(336,91,o),
(297,91,qs),
(259,91,o),
(204,118,o),
(168,164,o),
(151,225,o),
(151,261,qs),
(151,297,o),
(168,360,o),
(203,406,o),
(258,432,o),
(296,432,qs),
(334,432,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
42 1 5 0 26 1 3 6 15 1 2 3 12 1 1 2 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 5 0 97 4 1 0 0 22 77 0 6 6 3 97 0 3 3 28 77 0 2 2 1 97 0 1 1 31 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 1 2 1 101 7 1 5 5 0 97 4 1 0 0 22 77 0 6 6 3 97 0 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 1 2 1 101 0 0 0 22 77 7 1 5 5 4 97 0 4 4 29 77 0 6 6 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
44 43 54 52 43 62 44 62 40 41 39 39 16 8 7 27 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = g_alt;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,275,ls),
(435,240,o),
(422,174,o),
(391,123,o),
(338,91,o),
(298,91,qs),
(259,91,o),
(211,118,o),
(184,163,o),
(175,222,o),
(175,254,qs),
(175,527,l),
(62,527,l),
(62,232,ls),
(62,180,o),
(82,92,o),
(130,28,o),
(214,-8,o),
(273,-7,qs),
(325,-8,o),
(408,26,o),
(436,66,q),
(436,25,o),
(427,-54,o),
(396,-115,o),
(336,-151,o),
(283,-151,qs),
(228,-151,o),
(143,-115,o),
(110,-89,q),
(99,-113,o),
(78,-162,o),
(67,-185,q),
(116,-222,o),
(227,-253,o),
(287,-253,qs),
(388,-253,o),
(508,-172,o),
(531,-100,qs),
(546,-55,o),
(549,39,o),
(549,84,qs),
(549,527,l),
(435,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 1 2 4 13 1 1 2 10 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 0 1 0 101 6 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 43 0 43 37 21 38 39 38 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = y;
unicode = 121;
},
{
glyphname = t2.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,677,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,174,ls),
(107,81,o),
(189,-6,o),
(275,-6,qs),
(308,-6,o),
(376,13,o),
(402,33,q),
(364,118,l),
(334,93,o),
(292,93,qs),
(268,93,o),
(240,111,o),
(225,140,o),
(220,176,o),
(220,196,qs),
(220,428,l),
(378,428,l),
(378,527,l),
(220,527,l),
(220,677,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
11 1 2 1 12 1 3 2 2 76 0 6 0 6 133 4 1 1 1 0 95 5 1 0 0 22 77 0 2 2 3 98 0 3 3 28 3 78 17 17 19 36 37 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = t2.alt;
},
{
glyphname = f_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,428,l),
(364,428,l),
(364,527,l),
(220,527,l),
(220,572,ls),
(220,614,o),
(251,661,o),
(290,661,qs),
(312,661,o),
(344,650,o),
(358,640,q),
(397,727,l),
(371,745,o),
(312,761,o),
(279,761,qs),
(196,761,o),
(107,674,o),
(107,586,qs),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,0,l),
(220,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
11 1 3 2 12 1 1 3 2 76 0 2 0 3 1 2 3 105 5 1 0 0 1 95 4 1 1 1 22 77 7 1 6 6 21 6 78 0 0 0 23 0 23 17 19 37 35 17 17 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = f_alt;
},
{
glyphname = hyphen.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,300,l),
(388,398,l),
(69,398,l),
(69,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = hyphen.uc;
},
{
glyphname = uni00AD.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,300,l),
(388,398,l),
(69,398,l),
(69,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = uni00AD.uc;
},
{
glyphname = endash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(533,300,l),
(533,398,l),
(69,398,l),
(69,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = endash.uc;
},
{
glyphname = emdash.uc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(736,300,l),
(736,398,l),
(69,398,l),
(69,300,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 805;
}
);
note = emdash.uc;
},
{
glyphname = a_alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,286,ls),
(506,338,o),
(487,433,o),
(458,468,qs),
(429,505,o),
(338,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(178,382,l),
(182,397,o),
(204,419,o),
(231,432,o),
(263,438,o),
(278,438,qs),
(339,438,o),
(395,379,o),
(395,324,q),
(339,322,o),
(215,311,o),
(109,278,o),
(44,204,o),
(44,145,qs),
(45,107,o),
(74,49,o),
(126,12,o),
(192,-6,o),
(230,-6,qs),
(277,-6,o),
(370,28,o),
(398,61,q),
(405,0,l)
);
},
{
closed = 1;
nodes = (
(183,202,o),
(226,220,o),
(278,231,o),
(333,236,o),
(381,239,o),
(397,239,q),
(397,200,o),
(373,142,o),
(332,104,o),
(278,85,o),
(248,85,qs),
(232,85,o),
(204,90,o),
(176,104,o),
(157,130,o),
(157,149,qs),
(157,171,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 2 1 2 3 1 128 0 1 0 7 6 1 7 105 0 2 2 4 97 0 4 4 29 77 0 6 6 0 97 5 1 0 0 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 1 2 3 1 128 0 1 0 7 6 1 7 105 0 2 2 4 97 0 4 4 29 77 0 5 5 21 77 0 6 6 0 97 0 0 0 28 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 37 22 36 20 34 24 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = a_alt;
},
{
glyphname = D;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,0,ls),
(426,0,o),
(553,48,o),
(638,140,o),
(682,270,o),
(682,353,qs),
(682,435,o),
(638,567,o),
(551,658,o),
(422,707,o),
(338,707,qs),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(448,603,o),
(563,471,o),
(563,353,qs),
(563,296,o),
(536,204,o),
(481,139,o),
(397,103,o),
(339,103,qs),
(198,103,l),
(198,603,l),
(338,603,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 13 13 13 23 13 22 34 40 32 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = D;
unicode = 68;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,0,ls),
(390,0,o),
(491,17,o),
(573,63,o),
(626,147,o),
(626,210,qs),
(626,273,o),
(569,360,o),
(501,376,q),
(549,399,o),
(591,479,o),
(591,530,qs),
(591,585,o),
(550,654,o),
(484,693,o),
(402,707,o),
(362,707,qs),
(81,707,l),
(81,0,l)
);
},
{
closed = 1;
nodes = (
(374,603,o),
(421,598,o),
(457,579,o),
(479,542,o),
(479,511,qs),
(479,477,o),
(451,437,o),
(408,416,o),
(354,409,o),
(329,409,qs),
(197,409,l),
(197,603,l),
(349,603,ls)
);
},
{
closed = 1;
nodes = (
(197,308,l),
(219,308,o),
(241,308,qs),
(327,309,ls),
(349,309,o),
(371,309,qs),
(396,309,o),
(445,301,o),
(485,280,o),
(510,241,o),
(510,211,qs),
(510,174,o),
(477,131,o),
(427,109,o),
(367,103,o),
(339,103,qs),
(197,103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 1 5 2 1 76 0 2 0 5 4 2 5 103 6 1 3 3 0 95 0 0 0 38 77 7 1 4 4 1 95 0 1 1 39 1 78 33 32 19 19 47 41 32 48 33 48 19 31 19 30 34 46 32 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = B;
unicode = 66;
},
{
glyphname = uni0490;
kernRight = uni0413;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,603,l),
(555,603,l),
(555,832,l),
(439,832,l),
(439,707,l),
(82,707,l),
(82,0,l),
(198,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 0 1 112 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 20 77 4 1 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = uni0490;
unicode = 1168;
},
{
glyphname = uni0491;
kernLeft = uni0433;
kernRight = uni0433;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,428,l),
(443,428,l),
(443,668,l),
(332,668,l),
(332,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 2 2 0 95 0 0 0 22 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = uni0491;
unicode = 1169;
},
{
glyphname = uni0404;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,599,o),
(504,572,o),
(540,529,o),
(548,499,q),
(661,499,l),
(652,554,o),
(599,636,o),
(523,690,o),
(426,716,o),
(373,716,qs),
(290,716,o),
(167,662,o),
(84,564,o),
(43,430,o),
(43,351,qs),
(43,273,o),
(84,142,o),
(165,46,o),
(287,-7,o),
(369,-7,qs),
(421,-7,o),
(521,18,o),
(603,71,o),
(660,152,o),
(669,208,q),
(552,208,l),
(544,177,o),
(508,135,o),
(459,109,o),
(402,97,o),
(373,97,qs),
(325,97,o),
(250,127,o),
(197,181,o),
(167,257,o),
(165,303,q),
(466,303,l),
(466,404,l),
(165,404,l),
(168,449,o),
(197,525,o),
(248,580,o),
(322,612,o),
(370,612,qs),
(399,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 7 0 1 0 7 1 128 0 4 2 3 2 4 3 128 0 1 0 2 4 1 2 103 8 1 0 0 6 97 0 6 6 27 77 0 3 3 5 97 0 5 5 28 5 78 1 0 40 39 35 33 25 23 19 18 14 12 8 7 6 5 0 44 1 44 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = uni0404;
unicode = 1028;
},
{
glyphname = uni0454;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,434,o),
(284,434,qs),
(300,434,o),
(338,428,o),
(370,414,o),
(396,388,o),
(400,372,q),
(517,372,l),
(507,415,o),
(463,477,o),
(404,517,o),
(330,536,o),
(287,536,qs),
(224,536,o),
(131,494,o),
(69,422,o),
(38,322,o),
(38,263,qs),
(38,203,o),
(68,103,o),
(130,32,o),
(223,-7,o),
(287,-7,qs),
(326,-7,o),
(401,11,o),
(464,50,o),
(511,110,o),
(519,151,q),
(403,151,l),
(396,134,o),
(371,111,o),
(339,97,o),
(304,91,o),
(287,91,qs),
(228,91,o),
(152,155,o),
(150,216,q),
(363,216,l),
(363,309,l),
(149,309,l),
(154,369,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 7 0 7 6 0 128 0 3 1 2 1 3 2 128 0 0 0 1 3 0 1 103 0 7 7 5 97 0 5 5 29 77 0 2 2 4 97 0 4 4 28 4 78 36 20 40 36 20 34 17 16 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = uni0454;
unicode = 1108;
},
{
glyphname = uni0406;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 20 77 0 0 0 21 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = uni0406;
unicode = 1030;
},
{
glyphname = uni0456;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,708,o),
(54,675,qs),
(54,643,o),
(94,605,o),
(127,605,qs),
(158,605,o),
(199,643,o),
(199,675,qs),
(199,708,o),
(158,746,o),
(127,746,qs),
(94,746,o)
);
},
{
closed = 1;
nodes = (
(183,527,l),
(69,527,l),
(69,0,l),
(183,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 0 2 2 22 77 5 1 3 3 21 3 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = uni0456;
unicode = 1110;
},
{
glyphname = uni0407;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(155,847,o),
(155,817,qs),
(155,786,o),
(190,751,o),
(219,751,qs),
(247,751,o),
(283,786,o),
(283,817,qs),
(283,847,o),
(247,883,o),
(219,883,qs),
(190,883,o)
);
},
{
closed = 1;
nodes = (
(-3,847,o),
(-3,817,qs),
(-3,786,o),
(32,751,o),
(61,751,qs),
(90,751,o),
(126,786,o),
(126,817,qs),
(126,847,o),
(90,883,o),
(61,883,qs),
(32,883,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 20 77 0 0 0 21 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = uni0407;
unicode = 1031;
},
{
glyphname = uni0457;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,527,l),
(70,527,l),
(70,0,l),
(184,0,l)
);
},
{
closed = 1;
nodes = (
(142,697,o),
(142,666,qs),
(142,635,o),
(177,600,o),
(206,600,qs),
(234,600,o),
(270,636,o),
(270,666,qs),
(270,696,o),
(234,733,o),
(206,733,qs),
(177,733,o)
);
},
{
closed = 1;
nodes = (
(-17,697,o),
(-17,666,qs),
(-17,635,o),
(18,600,o),
(47,600,qs),
(76,600,o),
(113,636,o),
(113,666,qs),
(113,696,o),
(76,733,o),
(47,733,qs),
(18,733,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 3 2 97 8 4 7 3 2 2 27 77 0 0 0 22 77 6 1 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
8 4 7 3 2 5 1 3 0 2 3 105 0 0 0 22 77 6 1 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
17 16 5 4 0 0 23 21 16 27 17 27 11 9 4 15 5 15 0 3 0 3 17 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = uni0457;
unicode = 1111;
},
{
glyphname = t0163.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,677,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,174,ls),
(107,81,o),
(148,37,qs),
(164,20,o),
(187,10,q),
(153,-114,l),
(164,-112,o),
(193,-110,o),
(209,-110,qs),
(230,-110,o),
(262,-124,o),
(262,-145,qs),
(262,-170,o),
(221,-191,o),
(185,-191,qs),
(177,-191,o),
(161,-190,o),
(152,-189,q),
(152,-206,l),
(151,-239,l),
(151,-256,l),
(175,-259,o),
(196,-259,qs),
(226,-259,o),
(281,-245,o),
(324,-215,o),
(349,-168,o),
(349,-136,qs),
(349,-92,o),
(300,-50,o),
(263,-50,qs),
(252,-50,ls),
(247,-50,o),
(242,-51,q),
(256,-5,l),
(265,-6,o),
(275,-6,qs),
(308,-6,o),
(376,13,o),
(402,33,q),
(364,118,l),
(334,93,o),
(292,93,qs),
(268,93,o),
(240,111,o),
(225,140,o),
(220,176,o),
(220,196,qs),
(220,428,l),
(378,428,l),
(378,527,l),
(220,527,l),
(220,677,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
11 1 2 1 47 12 2 3 2 18 1 7 4 46 34 2 6 7 31 1 5 6 5 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 10 0 10 133 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 8 1 1 1 0 95 9 1 0 0 22 77 0 2 2 3 97 0 3 3 28 77 0 6 6 5 97 0 5 5 31 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 10 0 10 133 0 4 3 7 3 4 7 128 0 7 6 3 7 6 126 0 6 0 5 6 5 101 8 1 1 1 0 95 9 1 0 0 22 77 0 2 2 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
57 56 55 54 23 52 53 38 36 36 37 17 16 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = t0163.alt;
},
{
glyphname = t021b.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,-257,o),
(164,-271,q),
(188,-306,l),
(211,-297,o),
(251,-265,o),
(280,-223,o),
(297,-176,o),
(297,-153,qs),
(297,-122,o),
(263,-74,o),
(228,-74,qs),
(202,-74,o),
(166,-107,o),
(166,-133,qs),
(166,-158,o),
(199,-188,o),
(225,-190,q),
(219,-215,o)
);
},
{
closed = 1;
nodes = (
(107,677,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,174,ls),
(107,81,o),
(189,-6,o),
(275,-6,qs),
(308,-6,o),
(376,13,o),
(402,33,q),
(364,118,l),
(334,93,o),
(292,93,qs),
(268,93,o),
(240,111,o),
(225,140,o),
(220,176,o),
(220,196,qs),
(220,428,l),
(378,428,l),
(378,527,l),
(220,527,l),
(220,677,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
29 1 3 2 30 1 4 3 2 76 15 14 2 0 73 0 7 1 7 133 0 0 4 0 134 5 1 2 2 1 95 6 1 1 1 22 77 0 3 3 4 98 0 4 4 28 4 78 17 17 19 36 37 17 27 37 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = t021b.alt;
},
{
glyphname = uni202F;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni202F;
unicode = 8239;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 110;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 270;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = map;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,664,qs),
(42,662,ls),
(42,657,o),
(47,657,qs),
(89,657,ls),
(91,657,o),
(93,655,qs),
(116,632,ls),
(117,631,o),
(117,628,qs),
(117,602,ls),
(117,600,o),
(119,598,qs),
(140,577,ls),
(142,575,o),
(142,573,qs),
(142,544,ls),
(142,541,o),
(143,540,qs),
(174,510,ls),
(175,509,o),
(175,506,qs),
(175,480,ls),
(175,479,o),
(177,477,qs),
(223,431,ls),
(224,430,o),
(224,427,qs),
(224,406,ls),
(224,404,o),
(226,402,qs),
(272,355,l),
(274,355,o),
(274,352,qs),
(274,329,ls),
(274,326,o),
(275,325,qs),
(288,313,ls),
(289,312,o),
(289,309,qs),
(289,190,ls),
(289,187,o),
(288,186,qs),
(274,173,ls),
(273,172,o),
(273,169,qs),
(273,84,ls),
(273,81,o),
(274,80,qs),
(286,68,l),
(292,64,o),
(286,60,q),
(274,48,ls),
(270,44,o),
(274,41,qs),
(283,32,ls),
(285,30,o),
(285,28,qs),
(285,5,ls),
(285,0,o),
(290,0,qs),
(293,0,ls),
(295,0,o),
(296,1,o),
(297,1,q),
(311,16,ls),
(312,17,o),
(315,17,qs),
(335,17,ls),
(340,17,o),
(340,23,qs),
(340,61,ls),
(340,63,o),
(342,65,qs),
(352,75,ls),
(353,76,o),
(355,76,qs),
(364,76,ls),
(365,76,o),
(367,78,qs),
(379,90,ls),
(381,92,o),
(381,94,qs),
(381,106,ls),
(381,108,o),
(382,109,qs),
(404,131,ls),
(406,133,o),
(406,135,qs),
(406,160,ls),
(406,163,o),
(407,164,qs),
(427,184,ls),
(430,187,o),
(427,191,qs),
(417,201,ls),
(416,202,o),
(416,205,qs),
(416,232,ls),
(416,234,o),
(417,235,qs),
(439,257,ls),
(441,259,o),
(448,257,o),
(448,253,qs),
(448,219,ls),
(448,213,o),
(453,213,qs),
(462,213,ls),
(463,213,o),
(465,215,qs),
(492,242,l),
(497,245,o),
(500,242,qs),
(515,227,ls),
(518,224,o),
(523,227,q),
(534,238,ls),
(537,241,o),
(541,238,qs),
(550,229,ls),
(551,228,o),
(553,228,qs),
(567,228,l),
(586,228,ls),
(591,228,o),
(591,233,qs),
(591,236,o),
(590,237,qs),
(569,257,ls),
(565,261,o),
(569,265,qs),
(575,270,ls),
(577,272,o),
(577,274,qs),
(577,311,ls),
(577,313,o),
(575,315,qs),
(559,332,ls),
(558,333,o),
(555,333,qs),
(543,333,ls),
(541,333,o),
(539,335,qs),
(517,357,ls),
(515,359,o),
(515,361,qs),
(515,398,l),
(515,432,ls),
(515,437,o),
(510,437,qs),
(498,437,ls),
(496,437,o),
(495,438,qs),
(436,497,ls),
(432,501,o),
(436,505,qs),
(442,511,ls),
(444,513,o),
(444,515,qs),
(444,594,ls),
(444,599,o),
(438,599,qs),
(432,599,ls),
(429,599,o),
(428,598,qs),
(418,588,ls),
(414,584,o),
(411,588,q),
(391,608,ls),
(389,610,o),
(389,612,qs),
(389,638,ls),
(389,643,o),
(384,643,qs),
(352,643,ls),
(349,643,o),
(348,642,qs),
(332,625,ls),
(331,624,o),
(328,624,qs),
(322,624,ls),
(316,624,o),
(316,629,qs),
(316,654,ls),
(316,659,o),
(311,659,qs),
(278,659,ls),
(276,659,o),
(275,660,qs),
(229,706,ls),
(227,708,o),
(225,708,qs),
(129,708,ls),
(127,708,o),
(125,706,qs),
(106,687,ls),
(105,686,o),
(102,686,qs),
(63,686,ls),
(61,686,o),
(59,684,qs),
(43,668,ls),
(42,667,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
201 1 2 0 193 30 19 18 4 3 8 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 64 values pushed */
201 1 2 0 18 1 4 8 193 30 19 3 3 4 190 187 184 181 178 46 43 42 40 34 31 11 5 3 169 166 163 102 98 89 83 71 68 65 56 54 12 6 5 160 157 154 148 145 132 129 120 117 114 111 108 105 97 95 86 16 7 6 6 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 8 0 2 8 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 4 1 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 1 1 20 77 0 8 8 0 95 0 0 0 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 1 1 20 77 0 3 3 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 0 8 0 2 8 128 0 4 8 3 8 4 3 128 0 5 3 6 3 5 6 128 0 6 7 3 6 7 126 0 0 0 8 4 0 8 103 0 3 0 7 3 7 99 0 1 1 20 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
199 196 135 134 80 77 52 49 50 37 51 51 49 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = map;
},
{
glyphname = logo;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(794,512,qs),
(794,520,o),
(788,526,qs),
(776,539,ls),
(770,545,o),
(762,545,qs),
(736,545,l),
(735,546,o),
(734,546,o),
(733,547,qs),
(702,572,ls),
(697,576,o),
(690,576,qs),
(651,576,l),
(646,589,o),
(633,589,qs),
(625,589,o),
(619,583,qs),
(612,576,l),
(557,576,ls),
(550,576,o),
(543,571,q),
(539,566,l),
(539,586,l),
(565,613,l),
(701,613,l),
(720,593,l),
(727,588,o),
(734,588,qs),
(746,588,ls),
(753,588,o),
(760,593,q),
(773,606,ls),
(779,612,o),
(779,620,qs),
(779,627,o),
(774,632,q),
(779,639,o),
(779,645,qs),
(779,653,o),
(773,659,qs),
(760,671,ls),
(754,677,o),
(746,677,qs),
(734,677,ls),
(726,677,o),
(720,671,qs),
(701,652,l),
(665,652,l),
(665,680,l),
(677,680,o),
(690,710,o),
(690,721,qs),
(690,758,ls),
(690,766,o),
(679,778,o),
(671,778,qs),
(620,778,ls),
(612,778,o),
(601,766,o),
(601,758,qs),
(601,721,ls),
(601,710,o),
(614,680,o),
(626,680,q),
(626,652,l),
(601,652,l),
(601,654,o),
(602,656,o),
(602,657,qs),
(602,665,o),
(591,677,o),
(583,677,qs),
(573,677,o),
(569,671,q),
(532,635,l),
(527,639,o),
(519,639,qs),
(511,639,o),
(500,628,o),
(500,620,qs),
(500,464,l),
(438,402,l),
(438,473,l),
(470,505,ls),
(476,511,o),
(476,519,qs),
(476,526,o),
(467,538,o),
(456,538,qs),
(448,538,o),
(443,533,qs),
(438,528,l),
(438,612,l),
(533,707,l),
(539,711,o),
(539,721,qs),
(539,739,l),
(545,739,ls),
(553,739,o),
(564,750,o),
(564,758,qs),
(564,766,o),
(553,778,o),
(545,778,qs),
(539,778,l),
(539,784,ls),
(539,792,o),
(527,803,o),
(519,803,qs),
(511,803,o),
(500,792,o),
(500,784,qs),
(500,778,l),
(494,778,ls),
(486,778,o),
(475,766,o),
(475,758,qs),
(475,750,o),
(486,739,o),
(494,739,qs),
(500,739,l),
(500,729,l),
(438,667,l),
(438,787,l),
(440,789,o),
(440,790,q),
(495,845,ls),
(501,851,o),
(501,859,qs),
(501,867,o),
(495,873,qs),
(483,886,l),
(480,888,o),
(476,890,q),
(476,910,ls),
(476,918,o),
(470,924,qs),
(458,936,ls),
(452,942,o),
(444,942,qs),
(437,942,o),
(433,939,q),
(427,945,o),
(419,945,qs),
(410,945,o),
(404,939,q),
(399,942,o),
(393,942,qs),
(384,942,o),
(380,936,q),
(367,924,ls),
(361,918,o),
(361,910,qs),
(361,890,l),
(359,889,o),
(356,888,o),
(354,886,qs),
(342,873,ls),
(336,867,o),
(336,859,qs),
(336,851,o),
(342,845,qs),
(397,790,l),
(397,789,o),
(399,787,q),
(399,667,l),
(337,729,l),
(337,739,l),
(343,739,ls),
(351,739,o),
(362,750,o),
(362,758,qs),
(362,766,o),
(351,778,o),
(343,778,qs),
(337,778,l),
(337,784,ls),
(337,792,o),
(326,803,o),
(318,803,qs),
(310,803,o),
(298,792,o),
(298,784,qs),
(298,778,l),
(292,778,ls),
(284,778,o),
(273,766,o),
(273,758,qs),
(273,750,o),
(284,739,o),
(292,739,qs),
(298,739,l),
(298,721,ls),
(298,711,o),
(304,707,q),
(399,612,l),
(399,528,l),
(395,533,l),
(388,538,o),
(381,538,qs),
(373,538,o),
(361,527,o),
(361,519,qs),
(361,511,o),
(367,505,qs),
(399,473,l),
(399,402,l),
(337,464,l),
(337,620,ls),
(337,628,o),
(326,639,o),
(318,639,qs),
(310,639,o),
(305,635,q),
(269,671,ls),
(263,677,o),
(255,677,qs),
(246,677,o),
(235,665,o),
(235,657,qs),
(235,654,o),
(236,652,q),
(211,652,l),
(211,680,l),
(223,680,o),
(236,710,o),
(236,721,qs),
(236,758,ls),
(236,766,o),
(225,778,o),
(217,778,qs),
(166,778,ls),
(158,778,o),
(147,766,o),
(147,758,qs),
(147,721,ls),
(147,710,o),
(160,680,o),
(172,680,q),
(172,652,l),
(137,652,l),
(117,671,ls),
(111,677,o),
(103,677,qs),
(91,677,ls),
(83,677,o),
(77,671,qs),
(64,659,l),
(59,652,o),
(59,645,qs),
(59,637,o),
(63,632,q),
(59,628,o),
(59,620,qs),
(59,613,o),
(64,606,q),
(77,593,l),
(84,588,o),
(91,588,qs),
(103,588,ls),
(110,588,o),
(117,593,q),
(137,613,l),
(272,613,l),
(298,586,l),
(298,566,l),
(294,571,l),
(287,576,o),
(280,576,qs),
(225,576,l),
(218,583,ls),
(212,589,o),
(204,589,qs),
(191,589,o),
(186,576,q),
(147,576,ls),
(140,576,o),
(135,572,qs),
(104,547,ls),
(102,545,o),
(102,545,q),
(75,545,ls),
(67,545,o),
(61,539,qs),
(49,526,ls),
(42,519,o),
(42,512,qs),
(42,504,o),
(52,495,o),
(59,493,q),
(59,485,o),
(70,474,o),
(78,474,q),
(80,459,o),
(97,459,qs),
(104,459,o),
(111,464,q),
(123,477,ls),
(129,483,o),
(129,491,qs),
(129,517,l),
(154,537,l),
(272,537,l),
(298,511,l),
(298,475,l),
(192,475,l),
(191,475,l),
(154,475,ls),
(147,475,o),
(140,470,q),
(115,444,ls),
(108,437,o),
(108,430,qs),
(108,422,o),
(121,411,o),
(129,411,qs),
(166,411,ls),
(175,411,o),
(180,417,q),
(200,436,l),
(310,436,l),
(403,342,l),
(405,342,o),
(413,335,o),
(419,335,qs),
(424,335,o),
(432,342,o),
(434,342,q),
(528,436,l),
(637,436,l),
(657,417,ls),
(663,411,o),
(671,411,qs),
(709,411,ls),
(717,411,o),
(728,422,o),
(728,430,qs),
(728,438,o),
(722,444,qs),
(697,470,ls),
(692,475,o),
(683,475,qs),
(539,475,l),
(539,511,l),
(565,537,l),
(683,537,l),
(708,517,l),
(708,491,ls),
(708,483,o),
(714,477,qs),
(726,464,l),
(733,459,o),
(740,459,qs),
(756,459,o),
(759,474,q),
(767,474,o),
(779,485,o),
(779,493,q),
(789,496,o),
(793,505,qs),
(794,507,o)
);
},
{
closed = 1;
nodes = (
(270,235,o),
(274,235,qs),
(276,235,o),
(277,234,qs),
(395,116,l),
(406,107,o),
(417,107,qs),
(418,107,ls),
(429,107,o),
(440,116,q),
(558,234,ls),
(559,235,o),
(560,235,qs),
(564,235,o),
(564,232,qs),
(564,13,ls),
(564,0,o),
(577,0,qs),
(638,0,ls),
(650,0,o),
(650,13,qs),
(650,362,ls),
(650,375,o),
(638,375,qs),
(577,375,ls),
(565,375,o),
(556,366,qs),
(424,234,ls),
(422,232,o),
(417,232,qs),
(413,232,o),
(411,234,qs),
(279,366,ls),
(270,375,o),
(258,375,qs),
(197,375,ls),
(185,375,o),
(185,362,qs),
(185,13,ls),
(185,0,o),
(197,0,qs),
(258,0,ls),
(270,0,o),
(270,13,qs),
(270,232,ls)
);
},
{
closed = 1;
nodes = (
(779,351,o),
(727,299,o),
(698,228,o),
(698,188,qs),
(698,143,o),
(728,71,o),
(781,21,o),
(854,-6,o),
(897,-6,qs),
(940,-6,o),
(1013,23,o),
(1066,74,o),
(1096,145,o),
(1096,188,qs),
(1096,233,o),
(1066,304,o),
(1013,354,o),
(940,381,o),
(897,381,qs),
(852,381,o)
);
},
{
closed = 1;
nodes = (
(835,91,o),
(806,122,o),
(789,164,o),
(789,188,qs),
(789,239,o),
(850,301,o),
(897,301,qs),
(942,301,o),
(1005,239,o),
(1005,188,qs),
(1005,141,o),
(950,74,o),
(897,74,qs),
(874,74,o)
);
},
{
closed = 1;
nodes = (
(1140,0,o),
(1149,0,qs),
(1369,0,ls),
(1378,0,o),
(1378,9,qs),
(1378,72,ls),
(1378,81,o),
(1369,81,qs),
(1230,81,ls),
(1225,81,o),
(1225,85,qs),
(1225,366,ls),
(1225,375,o),
(1216,375,qs),
(1149,375,ls),
(1140,375,o),
(1140,366,qs),
(1140,9,ls)
);
},
{
closed = 1;
nodes = (
(1426,0,o),
(1435,0,qs),
(1462,0,o),
(1525,-1,o),
(1540,-1,qs),
(1593,-1,o),
(1673,29,o),
(1727,82,o),
(1754,152,o),
(1754,191,qs),
(1754,228,o),
(1731,295,o),
(1680,346,o),
(1600,376,o),
(1544,376,qs),
(1535,376,o),
(1505,376,o),
(1472,375,o),
(1443,375,o),
(1435,375,qs),
(1426,375,o),
(1426,366,qs),
(1426,9,ls)
);
},
{
closed = 1;
nodes = (
(1537,296,o),
(1543,296,qs),
(1595,296,o),
(1663,243,o),
(1663,191,qs),
(1663,137,o),
(1598,80,o),
(1542,80,qs),
(1534,80,o),
(1511,79,o),
(1511,85,qs),
(1511,290,ls),
(1511,295,o),
(1516,295,qs),
(1523,296,o)
);
},
{
closed = 1;
nodes = (
(1878,351,o),
(1826,299,o),
(1797,228,o),
(1797,188,qs),
(1797,143,o),
(1827,71,o),
(1880,21,o),
(1953,-6,o),
(1996,-6,qs),
(2039,-6,o),
(2112,23,o),
(2165,74,o),
(2195,145,o),
(2195,188,qs),
(2195,233,o),
(2165,304,o),
(2112,354,o),
(2039,381,o),
(1996,381,qs),
(1951,381,o)
);
},
{
closed = 1;
nodes = (
(1934,91,o),
(1905,122,o),
(1888,164,o),
(1888,188,qs),
(1888,239,o),
(1949,301,o),
(1996,301,qs),
(2041,301,o),
(2104,239,o),
(2104,188,qs),
(2104,141,o),
(2049,74,o),
(1996,74,qs),
(1973,74,o)
);
},
{
closed = 1;
nodes = (
(2555,367,o),
(2556,368,o),
(2556,369,qs),
(2556,375,o),
(2550,375,qs),
(2480,375,ls),
(2471,375,o),
(2467,366,qs),
(2380,132,l),
(2380,131,o),
(2379,130,q),
(2377,130,o),
(2377,132,q),
(2286,366,ls),
(2282,375,o),
(2274,375,qs),
(2198,375,ls),
(2192,375,o),
(2192,369,qs),
(2192,367,o),
(2193,366,q),
(2339,9,ls),
(2343,0,o),
(2351,0,qs),
(2400,0,ls),
(2409,0,o),
(2413,9,qs),
(2555,366,l)
);
},
{
closed = 1;
nodes = (
(2484,8,o),
(2484,6,qs),
(2484,0,o),
(2490,0,qs),
(2555,0,ls),
(2563,0,o),
(2567,9,qs),
(2591,75,ls),
(2593,79,o),
(2597,79,qs),
(2730,79,ls),
(2734,79,o),
(2736,75,qs),
(2761,9,l),
(2763,0,o),
(2772,0,qs),
(2842,0,ls),
(2848,0,o),
(2848,6,qs),
(2848,7,o),
(2847,8,o),
(2847,9,q),
(2706,367,l),
(2702,375,o),
(2694,375,qs),
(2638,375,ls),
(2630,375,o),
(2626,367,q),
(2485,9,l)
);
},
{
closed = 1;
nodes = (
(2662,261,o),
(2664,262,q),
(2665,261,l),
(2702,163,l),
(2702,162,ls),
(2702,159,o),
(2699,159,qs),
(2628,159,ls),
(2625,159,o),
(2625,162,qs),
(2625,163,l),
(2662,261,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 18 267 164 2 16 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 77 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 53 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 60 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 98 values pushed */
226 218 214 207 206 5 28 31 234 195 2 20 28 300 125 2 26 20 238 193 2 19 26 237 194 2 18 17 324 285 280 146 4 15 24 267 164 2 13 15 337 95 2 12 16 338 94 2 11 12 268 163 60 59 56 16 13 7 2 1 279 277 154 152 4 0 2 278 153 2 57 3 596 406 391 3 79 67 545 1 56 79 485 447 2 62 56 15 76 295 1 18 1 75 220 1 31 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 175 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 15 19 114 7 1 3 4 53 4 3 114 0 56 79 77 79 56 77 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 39 24 22 4 18 47 1 15 16 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 49 48 14 13 5 12 9 1 1 2 12 1 103 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 189 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 53 4 3 114 0 56 79 77 79 56 77 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 10 1 0 0 11 97 51 38 25 3 11 11 29 77 83 70 66 62 81 5 59 59 52 98 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 210 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 53 4 3 114 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 75 74 73 82 68 64 61 80 57 54 10 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 0 62 62 52 98 78 76 72 69 65 63 58 55 8 52 52 21 77 83 70 66 81 4 59 59 52 97 78 76 72 69 65 63 58 55 8 52 52 21 52 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 206 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 82 68 80 3 57 53 60 57 89 32 1 31 0 5 60 31 5 105 75 74 73 64 61 54 6 53 71 67 2 60 79 53 60 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 63 55 5 52 52 21 77 83 70 81 3 59 59 58 97 69 65 2 58 58 28 58 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 207 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 114 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 28 58 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 208 values pushed */
35 1 28 31 20 31 28 20 128 43 41 21 3 19 26 17 26 19 17 128 39 1 24 18 15 18 24 15 128 49 1 13 15 16 12 13 114 7 1 3 4 57 4 3 57 128 0 56 79 62 79 56 62 128 42 36 34 29 27 5 20 37 33 30 3 26 19 20 26 105 44 22 2 18 47 1 15 13 18 15 104 45 40 23 3 17 46 1 16 12 17 16 105 50 48 14 3 12 9 1 1 2 12 1 104 8 1 2 6 1 4 3 2 4 103 32 1 31 0 5 60 31 5 105 82 68 80 3 57 71 1 60 67 57 60 105 75 74 73 64 61 54 6 53 0 67 79 53 67 105 0 79 0 77 59 79 77 104 38 1 25 25 29 77 10 1 0 0 11 97 51 1 11 11 29 77 66 1 62 62 52 98 78 76 72 65 63 55 6 52 52 21 77 83 70 81 3 59 59 58 97 69 1 58 58 28 58 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 170 values pushed */
518 517 498 497 428 427 408 407 592 588 583 581 577 576 572 569 562 560 553 551 542 540 534 532 524 522 517 530 518 530 508 506 497 516 498 516 496 493 489 487 480 475 467 460 457 454 451 449 445 442 434 432 427 440 428 440 418 416 407 426 408 426 400 397 389 386 383 380 372 369 366 363 355 351 348 347 346 344 342 340 336 335 332 330 317 315 313 312 311 310 304 302 297 296 288 287 284 282 272 270 263 261 257 255 252 250 247 245 241 239 216 215 212 211 192 190 186 184 181 179 176 174 170 168 161 159 149 147 143 142 138 137 136 135 129 127 122 121 120 119 116 114 101 99 97 96 91 90 87 86 85 83 79 77 66 64 58 57 71 34 19 35 19 38 34 23 22 84 7 31 
CALL[ ]	/* CallFunction */";
};
width = 2930;
}
);
note = logo;
},
{
glyphname = a00E2.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(112,601,l),
(219,601,l),
(292,699,l),
(366,601,l),
(473,601,l),
(327,790,l),
(257,790,l)
);
},
{
closed = 1;
nodes = (
(506,0,l),
(506,286,ls),
(506,338,o),
(487,433,o),
(458,468,qs),
(429,505,o),
(338,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(178,382,l),
(182,397,o),
(204,419,o),
(231,432,o),
(263,438,o),
(278,438,qs),
(339,438,o),
(395,379,o),
(395,324,q),
(339,322,o),
(215,311,o),
(110,279,o),
(44,204,o),
(44,145,qs),
(45,107,o),
(74,49,o),
(126,12,o),
(192,-6,o),
(230,-6,qs),
(277,-6,o),
(363,23,o),
(398,61,q),
(405,0,l)
);
},
{
closed = 1;
nodes = (
(183,202,o),
(226,220,o),
(278,231,o),
(333,236,o),
(381,239,o),
(397,239,q),
(397,200,o),
(373,142,o),
(332,104,o),
(278,85,o),
(248,85,qs),
(234,85,o),
(204,90,o),
(176,105,o),
(157,130,o),
(157,149,qs),
(157,171,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
11 1 2 0 2 133 1 1 0 7 0 133 0 6 5 4 5 6 4 128 0 4 0 10 9 4 10 105 0 5 5 7 97 0 7 7 29 77 0 9 9 3 97 8 1 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
11 1 2 0 2 133 1 1 0 7 0 133 0 6 5 4 5 6 4 128 0 4 0 10 9 4 10 105 0 5 5 7 97 0 7 7 29 77 0 8 8 21 77 0 9 9 3 97 0 3 3 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
0 0 55 53 49 47 42 41 35 33 29 28 24 22 20 19 11 9 0 6 0 6 18 17 12 7 24 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = a00E2.alt;
},
{
glyphname = a0103.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(211,715,o),
(208,750,q),
(108,750,l),
(113,670,o),
(212,601,o),
(293,601,qs),
(372,601,o),
(469,674,o),
(474,750,q),
(373,750,l),
(369,715,o),
(327,683,o),
(291,683,qs),
(255,683,o)
);
},
{
closed = 1;
nodes = (
(506,0,l),
(506,286,ls),
(506,338,o),
(487,433,o),
(458,468,qs),
(429,505,o),
(338,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(178,382,l),
(182,397,o),
(204,419,o),
(231,432,o),
(263,438,o),
(278,438,qs),
(339,438,o),
(395,379,o),
(395,324,q),
(339,322,o),
(215,311,o),
(110,279,o),
(44,204,o),
(44,145,qs),
(45,107,o),
(74,49,o),
(126,12,o),
(192,-6,o),
(230,-6,qs),
(277,-6,o),
(363,23,o),
(398,61,q),
(405,0,l)
);
},
{
closed = 1;
nodes = (
(183,202,o),
(226,220,o),
(278,231,o),
(333,236,o),
(381,239,o),
(397,239,q),
(397,200,o),
(373,142,o),
(332,104,o),
(278,85,o),
(248,85,qs),
(234,85,o),
(204,90,o),
(176,105,o),
(157,130,o),
(157,149,qs),
(157,171,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
3 1 1 0 7 5 1 7 103 0 5 0 11 10 5 11 106 0 2 2 0 97 12 1 0 0 20 77 0 6 6 8 97 0 8 8 29 77 0 10 10 4 97 9 1 4 4 28 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
12 1 0 0 2 8 0 2 105 3 1 1 0 7 5 1 7 103 0 5 0 11 10 5 11 106 0 6 6 8 97 0 8 8 29 77 0 10 10 4 97 9 1 4 4 28 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
12 1 0 0 2 8 0 2 105 3 1 1 0 7 5 1 7 103 0 5 0 11 10 5 11 106 0 6 6 8 97 0 8 8 29 77 0 9 9 21 77 0 10 10 4 97 0 4 4 28 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
1 0 62 60 56 54 49 48 42 40 36 35 31 29 27 26 18 16 11 10 8 6 4 3 0 13 1 13 13 7 22 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = a0103.alt;
},
{
glyphname = a00E4.alt;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,691,o),
(106,659,qs),
(106,627,o),
(146,588,o),
(178,588,qs),
(210,588,o),
(250,627,o),
(250,659,qs),
(250,691,o),
(210,729,o),
(178,729,qs),
(146,729,o)
);
},
{
closed = 1;
nodes = (
(334,691,o),
(334,659,qs),
(334,627,o),
(374,588,o),
(405,588,qs),
(437,588,o),
(477,627,o),
(477,659,qs),
(477,691,o),
(437,729,o),
(405,729,qs),
(374,729,o)
);
},
{
closed = 1;
nodes = (
(506,0,l),
(506,286,ls),
(506,338,o),
(487,433,o),
(458,468,qs),
(429,505,o),
(338,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(178,382,l),
(182,397,o),
(204,419,o),
(231,432,o),
(263,438,o),
(278,438,qs),
(339,438,o),
(395,379,o),
(395,324,q),
(339,322,o),
(215,311,o),
(110,279,o),
(44,204,o),
(44,145,qs),
(45,107,o),
(74,49,o),
(126,12,o),
(192,-6,o),
(230,-6,qs),
(277,-6,o),
(363,23,o),
(398,61,q),
(405,0,l)
);
},
{
closed = 1;
nodes = (
(183,202,o),
(226,220,o),
(278,231,o),
(333,236,o),
(381,239,o),
(397,239,q),
(397,200,o),
(373,142,o),
(332,104,o),
(278,85,o),
(248,85,qs),
(234,85,o),
(204,90,o),
(176,105,o),
(157,130,o),
(157,149,qs),
(157,171,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 6 5 6 7 5 128 0 5 0 11 10 5 11 105 3 1 1 1 0 97 13 2 12 3 0 0 27 77 0 6 6 8 97 0 8 8 29 77 0 10 10 4 97 9 1 4 4 28 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 6 5 6 7 5 128 13 2 12 3 0 3 1 1 8 0 1 105 0 5 0 11 10 5 11 105 0 6 6 8 97 0 8 8 29 77 0 9 9 21 77 0 10 10 4 97 0 4 4 28 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
13 12 1 0 72 70 66 64 59 58 52 50 46 45 41 39 37 36 28 26 19 17 12 23 13 23 7 5 0 11 1 11 14 7 22 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = a00E4.alt;
},
{
glyphname = a2_alt;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,527,l),
(450,471,l),
(422,504,o),
(339,535,o),
(293,535,qs),
(227,535,o),
(135,492,o),
(72,418,o),
(42,319,o),
(42,260,qs),
(42,206,o),
(70,109,o),
(129,35,o),
(221,-8,o),
(283,-8,qs),
(332,-8,o),
(418,24,o),
(447,58,q),
(451,0,l),
(561,0,l),
(561,527,l)
);
},
{
closed = 1;
nodes = (
(395,405,o),
(431,358,o),
(447,296,o),
(447,262,qs),
(447,229,o),
(429,167,o),
(393,120,o),
(338,91,o),
(301,91,qs),
(262,91,o),
(207,118,o),
(172,164,o),
(155,226,o),
(155,262,qs),
(155,298,o),
(171,361,o),
(206,407,o),
(261,433,o),
(299,433,qs),
(339,432,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 2 2 1 0 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
18 1 4 3 2 1 0 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
6 1 4 4 2 97 3 1 2 2 29 77 0 5 5 0 97 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 22 77 6 1 4 4 2 97 0 2 2 29 77 0 0 0 21 77 0 5 5 1 97 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
22 21 32 30 21 40 22 40 19 40 35 16 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = a2_alt;
},
{
glyphname = logom;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(791,529,qs),
(783,537,o),
(775,545,o),
(767,548,o),
(753,548,o),
(738,548,q),
(704,575,l),
(699,580,o),
(692,580,qs),
(653,580,l),
(648,592,o),
(635,592,qs),
(627,592,o),
(619,585,o),
(614,580,q),
(559,580,ls),
(552,580,o),
(545,574,o),
(540,569,q),
(540,590,l),
(567,616,l),
(703,616,l),
(722,597,ls),
(728,591,o),
(736,591,qs),
(744,591,o),
(758,592,o),
(763,597,qs),
(770,604,o),
(787,624,o),
(777,636,q),
(787,650,o),
(776,663,qs),
(769,670,o),
(757,681,o),
(749,681,qs),
(739,681,o),
(730,680,o),
(722,676,o),
(713,666,o),
(703,656,q),
(667,656,l),
(667,684,l),
(679,689,o),
(693,711,o),
(693,725,qs),
(693,763,ls),
(693,771,o),
(681,783,o),
(673,783,qs),
(622,783,ls),
(614,783,o),
(602,771,o),
(602,763,qs),
(602,725,ls),
(602,711,o),
(616,689,o),
(628,684,q),
(628,656,l),
(603,656,l),
(605,663,o),
(599,676,o),
(589,682,o),
(575,681,o),
(570,675,q),
(533,639,l),
(523,647,o),
(501,636,o),
(501,623,qs),
(501,467,l),
(439,404,l),
(439,476,l),
(471,508,ls),
(480,517,o),
(471,542,o),
(457,542,qs),
(450,542,o),
(443,536,o),
(439,531,q),
(439,615,l),
(535,711,ls),
(540,717,o),
(540,733,o),
(540,743,q),
(546,743,ls),
(556,743,o),
(565,755,o),
(565,770,o),
(556,783,o),
(546,783,qs),
(540,783,l),
(540,788,ls),
(540,798,o),
(528,807,o),
(513,807,o),
(501,798,o),
(501,788,qs),
(501,783,l),
(495,783,ls),
(485,783,o),
(475,770,o),
(475,755,o),
(485,743,o),
(495,743,qs),
(501,743,l),
(501,733,l),
(439,671,l),
(439,792,ls),
(439,793,o),
(455,810,o),
(475,830,o),
(493,848,o),
(496,851,qs),
(502,856,o),
(502,873,o),
(496,879,qs),
(492,883,o),
(482,894,o),
(477,896,q),
(477,906,o),
(477,923,o),
(471,929,qs),
(467,933,o),
(459,941,o),
(450,947,o),
(440,949,o),
(434,945,q),
(430,950,o),
(412,952,o),
(404,945,q),
(390,954,o),
(380,942,qs),
(372,934,o),
(364,926,o),
(361,919,o),
(361,908,o),
(361,896,q),
(356,894,o),
(346,883,o),
(342,879,qs),
(336,873,o),
(336,856,o),
(342,851,qs),
(345,848,o),
(363,830,o),
(383,810,o),
(399,793,o),
(399,792,qs),
(399,671,l),
(337,733,l),
(337,743,l),
(343,743,ls),
(353,743,o),
(362,755,o),
(362,770,o),
(353,783,o),
(343,783,qs),
(337,783,l),
(337,788,ls),
(337,798,o),
(325,807,o),
(310,807,o),
(298,798,o),
(298,788,qs),
(298,783,l),
(292,783,ls),
(282,783,o),
(272,770,o),
(272,755,o),
(282,743,o),
(292,743,qs),
(298,743,l),
(298,733,o),
(298,717,o),
(304,711,qs),
(399,615,l),
(399,531,l),
(395,536,ls),
(388,543,o),
(372,541,o),
(362,530,o),
(360,515,o),
(367,508,qs),
(399,476,l),
(399,404,l),
(337,467,l),
(337,623,ls),
(337,631,o),
(325,643,o),
(317,643,qs),
(312,643,o),
(308,641,qs),
(306,640,o),
(305,639,q),
(268,675,l),
(263,681,o),
(249,682,o),
(239,676,o),
(233,663,o),
(235,656,q),
(210,656,l),
(210,684,l),
(222,689,o),
(236,711,o),
(236,725,qs),
(236,763,ls),
(236,771,o),
(224,783,o),
(216,783,qs),
(165,783,ls),
(157,783,o),
(145,771,o),
(145,763,qs),
(145,725,ls),
(145,711,o),
(159,689,o),
(171,684,q),
(171,656,l),
(135,656,l),
(116,675,ls),
(110,681,o),
(102,681,qs),
(94,681,o),
(80,681,o),
(75,675,qs),
(72,672,o),
(62,663,o),
(56,654,o),
(56,642,o),
(61,636,q),
(51,622,o),
(62,609,qs),
(69,602,o),
(81,591,o),
(89,591,qs),
(99,591,o),
(108,591,o),
(116,596,o),
(125,606,o),
(135,616,q),
(271,616,l),
(298,590,l),
(298,569,l),
(293,574,o),
(286,580,o),
(279,580,qs),
(224,580,l),
(217,587,ls),
(209,594,o),
(189,590,o),
(185,580,q),
(146,580,ls),
(139,580,o),
(134,575,q),
(100,548,l),
(86,548,o),
(72,548,o),
(63,545,o),
(55,537,o),
(47,529,qs),
(39,521,o),
(45,498,o),
(57,496,q),
(57,488,o),
(68,477,o),
(76,477,q),
(78,465,o),
(101,459,o),
(109,467,qs),
(117,475,o),
(125,483,o),
(128,492,o),
(128,506,o),
(128,520,q),
(153,540,l),
(271,540,l),
(298,514,l),
(298,478,l),
(152,478,ls),
(144,478,o),
(138,472,qs),
(113,447,ls),
(104,437,o),
(114,413,o),
(127,413,qs),
(165,413,ls),
(173,413,o),
(179,419,qs),
(199,439,l),
(309,439,l),
(404,344,l),
(410,336,o),
(427,336,o),
(434,344,qs),
(529,439,l),
(639,439,l),
(651,427,o),
(661,416,o),
(672,412,o),
(691,413,o),
(711,413,qs),
(724,413,o),
(734,438,o),
(725,447,qs),
(700,472,ls),
(694,478,o),
(686,478,qs),
(540,478,l),
(540,514,l),
(567,540,l),
(685,540,l),
(710,520,l),
(710,506,o),
(710,492,o),
(713,483,o),
(721,475,o),
(729,467,qs),
(737,459,o),
(760,466,o),
(762,477,q),
(770,477,o),
(781,488,o),
(781,496,q),
(791,499,o),
(796,508,qs),
(801,520,o)
);
},
{
closed = 1;
nodes = (
(270,235,o),
(274,238,o),
(276,236,qs),
(396,116,ls),
(405,108,o),
(431,108,o),
(440,116,qs),
(559,236,ls),
(561,238,o),
(566,235,o),
(566,233,qs),
(566,13,ls),
(566,0,o),
(579,0,qs),
(640,0,ls),
(652,0,o),
(652,13,qs),
(652,364,ls),
(652,377,o),
(640,377,qs),
(579,377,ls),
(568,377,o),
(557,368,q),
(424,235,ls),
(418,229,o),
(411,235,qs),
(279,368,l),
(268,377,o),
(257,377,qs),
(196,377,ls),
(183,377,o),
(183,364,qs),
(183,13,ls),
(183,0,o),
(196,0,qs),
(257,0,ls),
(270,0,o),
(270,13,qs),
(270,233,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 15 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 13 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
ELSE[ ]	/* Else */
NPUSHW[ ]	/* 83 values pushed */
233 228 177 166 161 5 16 21 271 112 2 19 16 282 267 219 175 123 108 6 14 19 218 176 2 15 14 294 259 131 95 4 12 18 245 149 2 37 12 305 83 2 10 13 306 82 2 9 10 246 148 51 48 16 13 6 1 0 255 253 141 139 4 3 1 254 140 2 41 2 364 353 2 44 4 12 76 206 198 195 3 21 74 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 111 values pushed */
26 1 21 16 21 133 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 18 17 4 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 38 37 36 11 4 10 8 1 0 1 10 0 103 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 118 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 13 15 12 104 33 1 14 34 1 13 10 14 13 105 38 37 36 11 4 10 8 1 0 1 10 0 103 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 124 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 39 29 2 9 9 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 128 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 39 1 9 9 29 77 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 131 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 114 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 132 values pushed */
26 1 21 16 21 133 0 18 15 12 15 18 12 128 0 37 12 13 10 37 114 39 1 9 10 29 10 9 29 128 6 1 2 3 41 3 2 41 128 0 4 41 44 41 4 44 128 0 44 40 41 44 40 126 31 27 25 22 20 5 16 28 24 23 3 19 14 16 19 105 32 30 17 3 15 35 1 12 37 15 12 104 33 1 14 34 1 13 10 14 13 105 38 36 11 3 10 8 1 0 1 10 0 104 7 1 1 5 1 3 2 1 3 103 0 29 29 29 77 42 1 41 41 40 97 43 1 40 40 21 40 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHW[ ]	/* 84 values pushed */
359 358 351 348 345 342 336 333 330 327 321 319 316 315 314 312 310 308 304 303 301 299 289 288 284 283 275 273 266 265 250 248 240 239 236 235 231 230 226 225 222 220 173 172 169 168 164 163 159 158 155 153 136 134 125 124 116 114 107 106 104 101 90 88 85 84 79 78 74 72 70 68 18 36 50 18 18 19 53 18 30 45 7 31 
CALL[ ]	/* CallFunction */";
};
width = 839;
}
);
note = logom;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,388,l),
(233,264,l),
(330,264,l),
(330,388,l),
(495,388,l),
(495,486,l),
(330,486,l),
(330,653,l),
(233,653,l),
(233,486,l),
(69,486,l),
(69,388,l)
);
},
{
closed = 1;
nodes = (
(495,125,l),
(495,223,l),
(69,223,l),
(69,125,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
2 1 0 5 1 3 4 0 3 103 0 1 0 4 6 1 4 103 0 6 7 7 6 87 0 6 6 7 95 0 7 6 7 79 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 564;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,125,l),
(467,223,l),
(64,223,l),
(64,125,l)
);
},
{
closed = 1;
nodes = (
(64,659,l),
(64,552,l),
(311,449,l),
(64,343,l),
(64,238,l),
(467,416,l),
(467,481,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
10 9 8 7 6 5 4 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(467,125,l),
(467,223,l),
(64,223,l),
(64,125,l)
);
},
{
closed = 1;
nodes = (
(467,238,l),
(467,344,l),
(220,448,l),
(467,553,l),
(467,659,l),
(64,481,l),
(64,415,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
10 9 8 7 6 5 4 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 531;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = twosuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,527,o),
(254,543,qs),
(279,567,o),
(313,623,o),
(313,659,qs),
(313,687,o),
(293,731,o),
(259,761,o),
(213,776,o),
(186,776,qs),
(129,776,o),
(52,715,o),
(50,655,q),
(132,655,l),
(136,677,o),
(161,694,o),
(182,694,qs),
(201,694,o),
(225,674,o),
(225,654,qs),
(225,640,o),
(209,612,o),
(187,587,o),
(161,566,o),
(151,557,qs),
(127,535,o),
(78,495,o),
(53,475,q),
(53,403,l),
(309,403,l),
(309,484,l),
(183,484,l),
(201,498,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 2 0 2 3 114 0 2 2 4 97 0 4 4 58 77 0 0 0 1 95 0 1 1 59 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 2 0 2 3 0 128 0 2 2 4 97 0 4 4 58 77 0 0 0 1 95 0 1 1 59 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
34 18 43 17 16 5 9 27 
CALL[ ]	/* CallFunction */";
};
width = 363;
}
);
note = twosuperior;
unicode = 178;
},
{
glyphname = threesuperior;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,653,o),
(327,675,qs),
(327,702,o),
(305,741,o),
(269,765,o),
(223,776,o),
(199,776,qs),
(142,776,o),
(65,718,o),
(60,658,q),
(146,658,l),
(150,678,o),
(176,695,o),
(195,695,qs),
(210,695,o),
(235,681,o),
(236,664,qs),
(236,644,o),
(211,627,o),
(193,627,qs),
(162,627,l),
(162,553,l),
(207,553,ls),
(224,553,o),
(248,539,o),
(248,520,qs),
(248,497,o),
(218,481,o),
(198,481,qs),
(176,481,o),
(142,499,o),
(137,523,q),
(50,523,l),
(52,491,o),
(77,444,o),
(117,414,o),
(170,400,o),
(200,400,qs),
(228,400,o),
(279,413,o),
(317,441,o),
(340,485,o),
(340,516,qs),
(341,545,o),
(315,592,o),
(289,603,q),
(306,615,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 4 5 6 114 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 97 0 0 0 63 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 58 77 0 2 2 0 97 0 0 0 63 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
34 18 36 33 36 34 20 39 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = threesuperior;
unicode = 179;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,436,l),
(189,278,l),
(64,278,l),
(64,180,l),
(145,180,l),
(64,0,l),
(174,0,l),
(255,180,l),
(490,180,l),
(490,278,l),
(299,278,l),
(370,436,l),
(490,436,l),
(490,534,l),
(414,534,l),
(490,703,l),
(380,703,l),
(304,534,l),
(64,534,l),
(64,436,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 0 1 133 0 6 5 6 134 2 1 0 9 1 3 4 0 3 103 8 1 4 5 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 19 18 17 17 17 17 17 17 17 17 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,174,o),
(172,204,o),
(181,229,o),
(198,247,o),
(213,247,qs),
(231,247,o),
(271,215,o),
(319,176,o),
(377,144,o),
(413,144,qs),
(456,144,o),
(513,173,o),
(547,221,o),
(562,284,o),
(563,317,q),
(458,317,l),
(458,305,o),
(455,275,o),
(446,250,o),
(428,232,o),
(413,232,qs),
(394,232,o),
(356,264,o),
(309,303,o),
(251,335,o),
(212,335,qs),
(168,334,o),
(111,305,o),
(78,257,o),
(65,196,o),
(64,162,q),
(170,162,l)
);
},
{
closed = 1;
nodes = (
(170,397,o),
(172,427,o),
(181,452,o),
(198,470,o),
(213,470,qs),
(231,470,o),
(271,438,o),
(319,399,o),
(377,367,o),
(413,367,qs),
(456,367,o),
(513,396,o),
(547,444,o),
(562,507,o),
(563,540,q),
(458,540,l),
(458,528,o),
(455,498,o),
(446,473,o),
(428,455,o),
(413,455,qs),
(394,455,o),
(356,487,o),
(309,525,o),
(251,557,o),
(212,557,qs),
(168,556,o),
(111,527,o),
(78,480,o),
(65,418,o),
(64,385,q),
(170,385,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 104 values pushed */
0 8 6 10 6 8 10 128 13 1 11 7 9 7 11 9 128 0 2 0 4 0 2 4 128 12 1 5 1 3 1 5 3 128 0 6 0 10 7 6 10 105 0 7 0 9 0 7 9 105 0 0 0 4 1 0 4 105 0 1 5 3 1 89 0 1 1 3 97 0 3 1 3 81 32 32 0 0 32 63 32 63 59 57 54 52 48 47 43 41 38 36 0 31 0 31 35 36 20 35 36 14 6 27 
CALL[ ]	/* CallFunction */";
};
width = 627;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = tab_1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,707,l),
(294,682,o),
(252,648,o),
(226,638,qs),
(199,628,o),
(142,622,o),
(113,621,q),
(113,544,l),
(277,544,l),
(277,103,l),
(89,103,l),
(89,0,l),
(560,0,l),
(560,103,l),
(393,103,l),
(393,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 4 0 3 0 4 3 103 0 5 5 20 77 2 1 0 0 1 96 0 1 1 21 1 78 21 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = tab_1;
},
{
glyphname = I_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,0,l),
(564,0,l),
(564,104,l),
(360,104,l),
(360,603,l),
(564,603,l),
(564,707,l),
(40,707,l),
(40,603,l),
(244,603,l),
(244,104,l),
(40,104,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
2 1 0 0 1 95 0 1 1 20 77 6 5 2 3 3 4 95 0 4 4 21 4 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = I_alt;
},
{
glyphname = l_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,707,l),
(62,171,ls),
(62,81,o),
(103,40,qs),
(144,0,o),
(242,0,qs),
(297,0,l),
(297,98,l),
(257,98,ls),
(208,98,o),
(190,123,qs),
(176,144,o),
(176,187,qs),
(176,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 2 2 20 77 0 0 0 1 98 0 1 1 21 1 78 20 33 35 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 321;
}
);
note = l_alt;
},
{
glyphname = l2_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,707,l),
(62,175,ls),
(62,85,o),
(141,-6,o),
(234,-6,qs),
(267,-6,o),
(332,13,o),
(358,33,q),
(320,118,l),
(305,105,o),
(271,91,o),
(248,93,qs),
(224,94,o),
(196,113,o),
(181,141,o),
(176,177,o),
(176,196,qs),
(176,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
8 1 0 2 9 1 1 0 2 76 0 2 2 20 77 0 0 0 1 98 0 1 1 28 1 78 19 38 20 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
note = l2_alt;
},
{
glyphname = uniE000;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,568,o),
(506,664,o),
(402,716,o),
(332,716,qs),
(260,716,o),
(155,663,o),
(87,565,o),
(55,429,o),
(55,347,qs),
(55,267,o),
(89,137,o),
(157,45,o),
(261,-6,o),
(332,-6,qs),
(403,-6,o),
(507,46,o),
(576,140,o),
(609,273,o),
(609,354,qs),
(609,435,o)
);
},
{
closed = 1;
nodes = (
(186,503,o),
(224,572,o),
(286,612,o),
(332,612,qs),
(377,612,o),
(439,572,o),
(477,503,o),
(493,408,o),
(493,354,qs),
(493,299,o),
(477,205,o),
(439,136,o),
(377,97,o),
(332,97,qs),
(286,97,o),
(224,136,o),
(186,205,o),
(170,299,o),
(170,354,qs),
(170,408,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 27 77 0 2 2 0 97 0 0 0 28 0 78 40 40 40 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE000;
unicode = 57344;
},
{
glyphname = uniE001;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,707,l),
(281,660,o),
(191,625,o),
(132,623,q),
(132,544,l),
(276,544,l),
(276,0,l),
(392,0,l),
(392,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 2 0 1 0 2 1 103 0 3 3 20 77 0 0 0 21 0 78 18 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE001;
unicode = 57345;
},
{
glyphname = uniE002;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,0,l),
(569,0,l),
(569,103,l),
(246,103,l),
(262,117,o),
(298,146,o),
(342,182,o),
(397,227,o),
(433,258,qs),
(460,281,o),
(509,333,o),
(547,393,o),
(569,463,o),
(569,505,qs),
(569,558,o),
(532,637,o),
(469,689,o),
(385,715,o),
(337,715,qs),
(286,715,o),
(207,694,o),
(141,648,o),
(98,576,o),
(94,530,q),
(208,530,l),
(216,567,o),
(282,611,o),
(330,611,qs),
(390,611,o),
(454,545,o),
(454,491,qs),
(454,453,o),
(418,387,o),
(366,335,o),
(307,285,o),
(283,264,qs),
(88,95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
36 1 4 3 1 76 0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 27 77 0 3 3 4 95 0 4 4 21 4 78 17 30 36 18 39 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE002;
unicode = 57346;
},
{
glyphname = uniE003;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,17,o),
(548,70,o),
(591,151,o),
(591,209,qs),
(591,272,o),
(529,361,o),
(466,378,q),
(521,406,o),
(562,488,o),
(562,530,qs),
(562,581,o),
(524,652,o),
(460,696,o),
(377,716,o),
(332,716,qs),
(286,716,o),
(203,694,o),
(137,649,o),
(95,578,o),
(89,529,q),
(203,529,l),
(213,575,o),
(286,612,o),
(327,612,qs),
(351,612,o),
(394,603,o),
(428,580,o),
(448,541,o),
(448,512,qs),
(448,482,o),
(421,442,o),
(378,418,o),
(326,408,o),
(302,408,qs),
(261,408,l),
(261,310,l),
(331,310,ls),
(357,310,o),
(408,302,o),
(449,280,o),
(474,240,o),
(474,208,qs),
(474,173,o),
(447,130,o),
(406,106,o),
(356,97,o),
(333,97,qs),
(311,97,o),
(265,104,o),
(224,124,o),
(192,156,o),
(184,182,q),
(67,182,l),
(74,131,o),
(123,59,o),
(194,14,o),
(284,-7,o),
(333,-7,qs),
(385,-7,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
51 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 27 77 0 2 2 0 97 8 1 0 0 28 0 78 1 0 44 42 38 37 35 33 25 23 22 20 12 10 6 5 0 58 1 58 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE003;
unicode = 57347;
},
{
glyphname = uniE004;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,219,l),
(52,136,l),
(417,136,l),
(417,0,l),
(532,0,l),
(532,136,l),
(613,136,l),
(613,238,l),
(532,238,l),
(532,707,l),
(383,707,l)
);
},
{
closed = 1;
nodes = (
(417,238,l),
(186,238,l),
(417,584,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
13 1 0 4 9 1 1 0 2 76 5 1 0 3 1 1 2 0 1 104 6 1 4 4 20 77 0 2 2 21 2 78 0 0 12 11 0 10 0 10 17 17 17 17 7 7 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE004;
unicode = 57348;
},
{
glyphname = uniE005;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,334,o),
(299,360,o),
(337,360,qs),
(398,360,o),
(473,292,o),
(473,228,qs),
(473,193,o),
(451,144,o),
(412,112,o),
(360,97,o),
(330,97,qs),
(309,97,o),
(267,108,o),
(231,130,o),
(204,162,o),
(198,183,q),
(83,183,l),
(90,133,o),
(135,60,o),
(202,14,o),
(285,-8,o),
(332,-8,qs),
(387,-8,o),
(481,25,o),
(551,87,o),
(591,177,o),
(591,234,qs),
(591,287,o),
(558,371,o),
(496,429,o),
(410,460,o),
(357,460,qs),
(310,460,o),
(243,439,o),
(214,420,q),
(234,604,l),
(563,604,l),
(563,707,l),
(137,707,l),
(99,311,l),
(212,311,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
5 1 6 2 1 76 8 1 7 6 4 6 7 4 128 0 4 5 6 4 5 126 0 2 0 6 7 2 6 105 0 1 1 0 95 0 0 0 20 77 0 5 5 3 97 0 3 3 28 3 78 0 0 0 40 0 40 38 36 20 40 35 17 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE005;
unicode = 57349;
},
{
glyphname = uniE006;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,454,o),
(191,506,o),
(217,552,o),
(235,570,qs),
(255,590,o),
(308,612,o),
(340,612,qs),
(378,612,o),
(442,577,o),
(456,540,q),
(572,540,l),
(555,629,o),
(431,715,o),
(344,715,qs),
(286,715,o),
(196,679,o),
(164,648,qs),
(134,619,o),
(93,545,o),
(68,462,o),
(57,372,o),
(57,327,qs),
(58,261,o),
(87,140,o),
(152,49,o),
(257,-6,o),
(333,-6,qs),
(384,-6,o),
(472,28,o),
(538,90,o),
(575,176,o),
(575,229,qs),
(575,281,o),
(542,366,o),
(482,424,o),
(396,456,o),
(344,456,qs),
(292,456,o),
(200,416,o),
(167,374,q),
(167,400,o)
);
},
{
closed = 1;
nodes = (
(385,96,o),
(327,96,qs),
(298,96,o),
(249,117,o),
(213,152,o),
(193,199,o),
(193,225,qs),
(193,253,o),
(214,301,o),
(251,335,o),
(300,354,o),
(328,354,qs),
(388,354,o),
(459,281,o),
(459,221,qs),
(459,165,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 5 0 1 76 0 3 4 0 4 3 0 128 0 0 0 5 6 0 5 105 0 4 4 2 97 0 2 2 27 77 0 6 6 1 97 0 1 1 28 1 78 40 41 34 18 43 40 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE006;
unicode = 57350;
},
{
glyphname = uniE007;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,617,l),
(582,707,l),
(100,707,l),
(100,603,l),
(451,603,l),
(178,0,l),
(307,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE007;
unicode = 57351;
},
{
glyphname = uniE008;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(534,351,o),
(474,374,q),
(499,386,o),
(535,422,o),
(556,462,o),
(566,506,o),
(566,526,qs),
(566,577,o),
(527,649,o),
(462,695,o),
(377,716,o),
(332,716,qs),
(286,716,o),
(201,695,o),
(135,649,o),
(96,577,o),
(96,526,qs),
(96,506,o),
(105,462,o),
(126,421,o),
(161,385,o),
(187,372,q),
(127,349,o),
(72,259,o),
(72,198,qs),
(72,141,o),
(116,63,o),
(189,14,o),
(282,-8,o),
(331,-8,qs),
(379,-8,o),
(471,13,o),
(544,61,o),
(589,140,o),
(589,198,qs),
(589,259,o)
);
},
{
closed = 1;
nodes = (
(399,603,o),
(432,577,o),
(450,537,o),
(450,509,qs),
(450,483,o),
(431,445,o),
(399,420,o),
(355,408,o),
(331,408,qs),
(280,408,o),
(211,459,o),
(211,513,qs),
(211,540,o),
(230,579,o),
(263,603,o),
(307,614,o),
(331,614,qs),
(355,614,o)
);
},
{
closed = 1;
nodes = (
(408,303,o),
(448,277,o),
(472,235,o),
(472,205,qs),
(472,172,o),
(445,129,o),
(404,104,o),
(354,94,o),
(331,94,qs),
(308,94,o),
(258,104,o),
(216,129,o),
(188,172,o),
(188,205,qs),
(188,235,o),
(212,277,o),
(252,303,o),
(303,315,o),
(330,315,qs),
(357,315,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
33 13 2 4 3 1 76 0 3 7 1 4 5 3 4 105 6 1 2 2 1 97 0 1 1 27 77 0 5 5 0 97 0 0 0 28 0 78 55 54 37 36 65 63 54 73 55 73 45 43 36 53 37 53 24 22 36 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE008;
unicode = 57352;
},
{
glyphname = uniE009;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,235,o),
(475,202,qs),
(467,180,o),
(441,141,o),
(405,113,o),
(359,96,o),
(329,96,qs),
(291,96,o),
(223,131,o),
(210,167,q),
(91,167,l),
(98,122,o),
(142,57,o),
(206,14,o),
(285,-7,o),
(329,-7,qs),
(409,-7,o),
(515,54,o),
(578,155,o),
(604,285,o),
(604,353,qs),
(602,418,o),
(577,544,o),
(518,648,o),
(409,715,o),
(335,714,qs),
(282,714,o),
(191,681,o),
(124,620,o),
(85,532,o),
(85,478,qs),
(85,425,o),
(119,341,o),
(181,283,o),
(264,252,o),
(314,252,qs),
(340,252,o),
(392,262,o),
(439,283,o),
(479,315,o),
(494,338,q),
(494,304,o)
);
},
{
closed = 1;
nodes = (
(277,611,o),
(335,611,qs),
(365,611,o),
(414,589,o),
(448,552,o),
(466,502,o),
(466,474,qs),
(465,447,o),
(444,402,o),
(408,371,o),
(359,354,o),
(332,354,qs),
(272,354,o),
(201,424,o),
(201,485,qs),
(202,543,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
0 1 0 5 1 76 0 3 0 4 0 3 4 128 0 5 0 0 3 5 0 105 0 6 6 1 97 0 1 1 27 77 0 4 4 2 97 0 2 2 28 2 78 40 41 34 20 40 40 36 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 664;
}
);
note = uniE009;
unicode = 57353;
},
{
glyphname = arrowright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,103,l),
(343,27,l),
(698,336,l),
(343,644,l),
(281,569,l),
(504,384,l),
(26,384,l),
(26,288,l),
(504,288,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 1 0 1 76 4 3 2 0 74 7 6 2 1 73 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = arrowright;
unicode = 8594;
},
{
glyphname = arrowleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,569,l),
(381,645,l),
(26,336,l),
(381,28,l),
(443,103,l),
(220,288,l),
(698,288,l),
(698,384,l),
(220,384,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 0 1 1 76 7 6 2 1 74 4 3 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 8 0 8 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = arrowleft;
unicode = 8592;
},
{
glyphname = uni2197;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(469,114,l),
(567,104,l),
(600,574,l),
(131,540,l),
(140,443,l),
(428,470,l),
(90,132,l),
(158,64,l),
(496,402,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni2197;
unicode = 8599;
},
{
glyphname = uni2198;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,229,l),
(130,131,l),
(600,98,l),
(566,567,l),
(469,558,l),
(496,270,l),
(158,608,l),
(90,540,l),
(428,202,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 8 values pushed */
8 7 3 2 1 5 0 74 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
21 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni2198;
unicode = 8600;
},
{
glyphname = uni2199;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,558,l),
(157,568,l),
(124,98,l),
(593,132,l),
(584,229,l),
(296,202,l),
(634,540,l),
(566,608,l),
(228,270,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni2199;
unicode = 8601;
},
{
glyphname = uni2196;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,443,l),
(594,541,l),
(124,574,l),
(158,105,l),
(255,114,l),
(228,402,l),
(566,64,l),
(634,132,l),
(296,470,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 8 values pushed */
8 7 3 2 1 5 0 73 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
ELSE[ ]	/* Else */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
21 1 6 23 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = uni2196;
unicode = 8598;
},
{
glyphname = uniE010;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,99,o),
(75,65,qs),
(75,30,o),
(116,-8,o),
(148,-8,qs),
(180,-8,o),
(221,30,o),
(221,65,qs),
(221,99,o),
(180,139,o),
(148,139,qs),
(116,139,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 1 97 0 1 1 28 1 78 1 0 7 5 0 11 1 11 3 7 22 
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = uniE010;
unicode = 57360;
},
{
glyphname = uniE011;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,-91,o),
(68,-108,q),
(98,-149,l),
(123,-141,o),
(169,-104,o),
(205,-54,o),
(227,3,o),
(227,32,qs),
(227,37,o),
(227,42,qs),
(227,74,o),
(193,132,o),
(148,135,qs),
(145,135,o),
(142,135,qs),
(115,135,o),
(71,98,o),
(71,63,qs),
(71,31,o),
(110,-6,o),
(140,-8,q),
(132,-39,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
19 18 2 0 73 0 1 1 0 97 0 0 0 28 0 78 68 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = uniE011;
unicode = 57361;
},
{
glyphname = uniE012;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,455,o),
(75,422,qs),
(75,387,o),
(115,349,o),
(148,349,qs),
(180,349,o),
(221,387,o),
(221,422,qs),
(221,455,o),
(181,496,o),
(148,496,qs),
(115,496,o)
);
},
{
closed = 1;
nodes = (
(75,97,o),
(75,64,qs),
(75,30,o),
(115,-9,o),
(148,-9,qs),
(180,-9,o),
(221,30,o),
(221,64,qs),
(221,97,o),
(181,138,o),
(148,138,qs),
(115,138,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 2 3 97 0 3 3 28 3 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = uniE012;
unicode = 57362;
},
{
glyphname = uniE013;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,455,o),
(77,422,qs),
(77,387,o),
(116,349,o),
(150,349,qs),
(183,349,o),
(223,387,o),
(223,422,qs),
(223,455,o),
(183,496,o),
(150,496,qs),
(116,496,o)
);
},
{
closed = 1;
nodes = (
(94,-90,o),
(69,-107,q),
(99,-149,l),
(125,-140,o),
(172,-101,o),
(207,-51,o),
(228,7,o),
(228,35,qs),
(228,53,o),
(220,89,o),
(201,117,o),
(171,136,o),
(149,136,qs),
(146,136,o),
(143,136,qs),
(115,136,o),
(72,99,o),
(72,64,qs),
(72,33,o),
(109,-5,o),
(140,-7,q),
(133,-37,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
31 30 2 2 73 4 1 0 0 1 3 0 1 105 0 3 3 2 97 0 2 2 28 2 78 1 0 21 17 13 12 7 5 0 11 1 11 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = uniE013;
unicode = 57363;
},
{
glyphname = uniE014;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,707,l),
(104,455,l),
(189,455,l),
(202,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 20 0 78 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = uniE014;
unicode = 57364;
},
{
glyphname = uniE015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,707,l),
(63,455,l),
(148,455,l),
(161,707,l)
);
},
{
closed = 1;
nodes = (
(219,707,l),
(232,455,l),
(317,455,l),
(331,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 0 0 1 95 3 1 1 1 20 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 381;
}
);
note = uniE015;
unicode = 57365;
},
{
glyphname = uniE016;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,513,o),
(68,496,q),
(97,456,l),
(122,464,o),
(167,501,o),
(201,550,o),
(222,606,o),
(222,633,qs),
(222,652,o),
(214,687,o),
(196,714,o),
(166,731,o),
(146,731,qs),
(115,731,o),
(71,695,o),
(71,661,qs),
(71,631,o),
(107,595,o),
(137,593,q),
(130,564,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
17 16 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 97 0 1 1 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = uniE016;
unicode = 57366;
},
{
glyphname = uniE017;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,513,o),
(22,496,q),
(51,456,l),
(76,464,o),
(121,501,o),
(156,550,o),
(176,606,o),
(176,633,qs),
(176,652,o),
(168,687,o),
(150,714,o),
(121,730,o),
(100,731,qs),
(98,731,o),
(97,731,qs),
(67,731,o),
(25,695,o),
(25,661,qs),
(25,631,o),
(60,595,o),
(91,593,q),
(84,564,o)
);
},
{
closed = 1;
nodes = (
(252,513,o),
(227,496,q),
(256,456,l),
(281,464,o),
(326,501,o),
(361,550,o),
(381,606,o),
(381,633,qs),
(381,635,o),
(381,637,qs),
(381,672,o),
(345,729,o),
(305,731,qs),
(303,731,o),
(302,731,qs),
(272,731,o),
(230,695,o),
(230,661,qs),
(230,631,o),
(265,595,o),
(296,593,q),
(289,564,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
41 40 19 18 4 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 0 1 97 3 1 1 1 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
68 29 68 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = uniE017;
unicode = 57367;
},
{
glyphname = uniE018;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,694,o),
(223,711,q),
(194,751,l),
(170,741,o),
(124,705,o),
(89,656,o),
(69,600,o),
(69,573,qs),
(69,555,o),
(77,520,o),
(95,493,o),
(126,475,o),
(148,475,qs),
(178,475,o),
(220,511,o),
(220,545,qs),
(220,574,o),
(184,611,o),
(154,613,q),
(161,643,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
17 16 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = uniE018;
unicode = 57368;
},
{
glyphname = uniE019;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,694,o),
(382,711,q),
(353,751,l),
(327,742,o),
(282,705,o),
(247,656,o),
(227,600,o),
(227,573,qs),
(227,555,o),
(235,520,o),
(254,493,o),
(283,475,o),
(304,475,qs),
(307,475,o),
(310,475,qs),
(337,475,o),
(379,511,o),
(379,545,qs),
(379,574,o),
(343,611,o),
(312,613,q),
(319,643,o)
);
},
{
closed = 1;
nodes = (
(152,694,o),
(177,711,q),
(148,751,l),
(122,742,o),
(77,705,o),
(42,656,o),
(22,600,o),
(22,573,qs),
(22,555,o),
(30,520,o),
(48,493,o),
(77,475,o),
(98,475,qs),
(101,475,o),
(104,475,qs),
(132,475,o),
(174,511,o),
(174,545,qs),
(174,574,o),
(138,611,o),
(107,613,q),
(114,643,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
41 40 19 18 4 0 74 2 1 0 1 1 0 89 2 1 0 0 1 97 3 1 1 0 1 81 68 29 68 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 405;
}
);
note = uniE019;
unicode = 57369;
},
{
glyphname = uniE020;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(93,-82,o),
(68,-100,q),
(97,-139,l),
(122,-131,o),
(167,-93,o),
(201,-44,o),
(222,12,o),
(222,40,qs),
(222,42,o),
(222,44,qs),
(222,78,o),
(183,133,o),
(146,135,qs),
(143,135,o),
(140,135,qs),
(112,135,o),
(71,99,o),
(71,67,qs),
(71,37,o),
(107,0,o),
(137,-2,q),
(130,-32,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
19 18 2 0 73 0 1 1 0 97 0 0 0 21 0 78 68 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = uniE020;
unicode = 57376;
},
{
glyphname = uniE021;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,-82,o),
(22,-100,q),
(51,-139,l),
(76,-131,o),
(121,-93,o),
(155,-44,o),
(176,12,o),
(176,40,qs),
(176,42,o),
(176,44,qs),
(176,78,o),
(138,133,o),
(100,136,qs),
(98,136,o),
(97,136,qs),
(66,136,o),
(25,99,o),
(25,67,qs),
(25,37,o),
(61,0,o),
(91,-2,q),
(84,-32,o)
);
},
{
closed = 1;
nodes = (
(252,-82,o),
(227,-100,q),
(256,-139,l),
(281,-131,o),
(326,-93,o),
(360,-44,o),
(381,12,o),
(381,40,qs),
(381,42,o),
(381,44,qs),
(381,78,o),
(343,133,o),
(305,136,qs),
(303,136,o),
(302,136,qs),
(271,136,o),
(230,99,o),
(230,67,qs),
(230,37,o),
(266,0,o),
(296,-2,q),
(289,-32,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
41 40 19 18 4 0 73 3 1 1 1 0 97 2 1 0 0 21 0 78 28 27 23 22 20 16 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = uniE021;
unicode = 57377;
},
{
glyphname = uniE022;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,552,o),
(75,519,qs),
(75,484,o),
(115,446,o),
(148,446,qs),
(180,446,o),
(221,484,o),
(221,519,qs),
(221,552,o),
(181,593,o),
(148,593,qs),
(115,593,o)
);
},
{
closed = 1;
nodes = (
(75,194,o),
(75,161,qs),
(75,127,o),
(115,88,o),
(148,88,qs),
(180,88,o),
(221,127,o),
(221,161,qs),
(221,194,o),
(181,235,o),
(148,235,qs),
(115,235,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 0 0 1 2 0 1 105 5 1 2 3 3 2 89 5 1 2 2 3 97 0 3 2 3 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22 
CALL[ ]	/* CallFunction */";
};
width = 296;
}
);
note = uniE022;
unicode = 57378;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,0,l),
(198,491,ls),
(198,521,o),
(220,567,o),
(257,597,o),
(307,612,o),
(335,612,qs),
(352,612,o),
(390,606,o),
(425,591,o),
(454,567,o),
(462,549,q),
(306,342,l),
(420,299,ls),
(449,287,o),
(502,260,o),
(543,228,o),
(567,190,o),
(567,167,qs),
(567,135,o),
(518,97,o),
(482,97,qs),
(444,97,o),
(390,124,o),
(385,155,q),
(273,155,l),
(281,77,o),
(395,-7,o),
(482,-7,qs),
(574,-7,o),
(681,87,o),
(681,166,qs),
(681,215,o),
(640,283,o),
(606,309,qs),
(573,334,o),
(493,372,o),
(455,388,q),
(589,553,l),
(580,593,o),
(530,654,o),
(462,695,o),
(381,716,o),
(340,716,qs),
(285,716,o),
(190,689,o),
(121,635,o),
(82,555,o),
(82,501,qs),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
37 36 11 10 4 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 3 3 1 97 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 46 77 0 5 5 39 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
21 45 34 18 45 36 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,0,l),
(176,554,ls),
(176,599,o),
(231,652,o),
(276,652,qs),
(292,652,o),
(325,643,o),
(350,625,o),
(366,598,o),
(366,580,qs),
(366,560,o),
(351,527,o),
(330,497,o),
(305,467,o),
(294,452,qs),
(280,433,o),
(263,393,o),
(263,369,qs),
(263,320,o),
(316,266,o),
(358,250,qs),
(420,226,ls),
(453,215,o),
(490,184,o),
(490,156,qs),
(490,121,o),
(448,86,o),
(413,87,qs),
(384,87,o),
(339,117,o),
(333,152,q),
(222,152,l),
(230,72,o),
(336,-7,o),
(413,-7,qs),
(453,-7,o),
(523,13,o),
(574,54,o),
(604,116,o),
(604,159,qs),
(605,213,o),
(553,277,o),
(505,296,qs),
(417,330,ls),
(399,337,o),
(373,360,o),
(373,381,qs),
(373,403,o),
(407,445,o),
(428,469,qs),
(453,498,o),
(484,556,o),
(484,595,qs),
(484,635,o),
(448,695,o),
(389,734,o),
(317,753,o),
(281,753,qs),
(233,753,o),
(153,729,o),
(94,679,o),
(62,605,o),
(62,556,qs),
(62,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 48 77 0 3 3 1 97 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 3 3 1 97 5 1 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 5 5 39 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
63 62 59 57 36 34 32 31 29 27 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,302,ls),
(224,275,o),
(203,231,o),
(170,192,o),
(130,156,o),
(112,136,qs),
(82,104,o),
(50,35,o),
(50,-10,qs),
(50,-58,o),
(85,-126,o),
(145,-169,o),
(222,-189,o),
(264,-189,qs),
(317,-189,o),
(399,-161,o),
(456,-113,o),
(488,-46,o),
(490,-7,q),
(379,-7,l),
(376,-28,o),
(356,-58,o),
(326,-76,o),
(290,-85,o),
(271,-85,qs),
(220,-85,o),
(164,-43,o),
(164,2,qs),
(165,29,o),
(189,72,o),
(228,115,o),
(272,154,o),
(309,198,o),
(334,248,o),
(334,278,qs),
(334,284,o),
(334,292,o),
(332,309,q),
(224,309,l)
);
},
{
closed = 1;
nodes = (
(351,432,o),
(351,465,qs),
(351,498,o),
(311,536,o),
(277,536,qs),
(243,536,o),
(204,497,o),
(204,465,qs),
(204,432,o),
(243,391,o),
(277,391,qs),
(311,391,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
6 1 3 4 1 4 3 1 128 0 1 0 4 1 0 126 7 1 4 4 5 97 0 5 5 49 77 0 0 0 2 98 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
6 1 3 4 1 4 3 1 128 0 1 0 4 1 0 126 0 0 0 2 0 2 102 7 1 4 4 5 97 0 5 5 49 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
40 39 0 0 46 44 39 50 40 50 0 38 0 37 36 20 44 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,-179,l),
(207,-179,l),
(194,303,l),
(97,303,l)
);
},
{
closed = 1;
nodes = (
(218,432,o),
(218,465,qs),
(218,497,o),
(178,536,o),
(145,536,qs),
(113,536,o),
(72,497,o),
(72,465,qs),
(72,432,o),
(112,391,o),
(145,391,qs),
(178,391,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
4 1 1 0 0 1 0 99 5 1 2 2 3 97 0 3 3 49 2 78 5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 290;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(249,429,o),
(250,421,q),
(313,421,l),
(313,587,ls),
(313,620,o),
(299,673,o),
(268,712,o),
(219,733,o),
(184,733,qs),
(136,733,o),
(62,687,o),
(54,636,q),
(130,636,l),
(133,653,o),
(164,666,o),
(181,666,qs),
(213,665,o),
(242,634,o),
(242,607,q),
(172,607,ls),
(148,607,o),
(102,599,o),
(67,578,o),
(45,541,o),
(45,513,qs),
(45,466,o),
(108,417,o),
(152,417,qs),
(209,417,o),
(246,455,q),
(247,447,o)
);
},
{
closed = 1;
nodes = (
(201,481,o),
(166,481,qs),
(148,480,o),
(118,496,o),
(118,517,qs),
(118,530,o),
(132,544,o),
(153,550,o),
(176,550,o),
(186,550,qs),
(242,550,l),
(241,514,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 1 5 7 1 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 1 0 7 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
0 1 5 7 1 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 5 5 59 77 0 7 7 0 97 0 0 0 59 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 7 0 97 5 1 0 0 59 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 1 2 3 1 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 5 5 59 77 0 7 7 0 97 0 0 0 59 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 2 1 2 3 1 128 0 5 7 0 7 5 0 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 7 0 97 0 0 0 59 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 3 2 1 2 3 1 128 0 5 7 0 7 5 0 128 0 4 0 2 3 4 2 105 0 1 0 6 7 1 6 105 0 7 5 0 7 89 0 7 7 0 97 0 0 7 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
37 51 21 34 18 34 38 33 8 9 30 
CALL[ ]	/* CallFunction */";
};
width = 368;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,706,o),
(71,663,o),
(55,605,o),
(55,572,qs),
(55,539,o),
(71,482,o),
(104,439,o),
(156,415,o),
(192,415,qs),
(228,415,o),
(280,439,o),
(314,482,o),
(330,539,o),
(330,572,qs),
(330,605,o),
(314,663,o),
(281,706,o),
(229,731,o),
(193,731,qs),
(157,731,o)
);
},
{
closed = 1;
nodes = (
(237,647,o),
(251,621,o),
(256,589,o),
(256,573,qs),
(256,556,o),
(251,524,o),
(237,498,o),
(212,482,o),
(192,482,qs),
(172,482,o),
(147,498,o),
(133,524,o),
(128,556,o),
(128,573,qs),
(128,589,o),
(133,621,o),
(148,647,o),
(173,663,o),
(193,663,qs),
(212,663,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 3 1 97 0 1 1 59 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 9 22 
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,629,l),
(455,629,l),
(455,722,l),
(117,722,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 572;
}
);
note = macron;
unicode = 175;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,707,ls),
(191,707,o),
(157,695,qs),
(124,683,o),
(94,660,qs),
(66,636,o),
(48,599,qs),
(30,563,o),
(30,518,qs),
(30,462,o),
(48,423,qs),
(65,385,o),
(97,360,qs),
(130,335,o),
(168,325,qs),
(186,320,o),
(225,315,o),
(245,314,qs),
(255,314,l),
(255,0,l),
(366,0,l),
(366,606,l),
(455,606,l),
(455,0,l),
(566,0,l),
(566,606,l),
(657,606,l),
(657,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 4 0 1 0 4 1 128 2 1 0 0 5 95 0 5 5 38 77 3 1 1 1 39 1 78 47 33 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 687;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,392,o),
(62,361,qs),
(62,330,o),
(100,292,o),
(131,292,qs),
(162,292,o),
(202,331,o),
(202,361,qs),
(202,392,o),
(161,430,o),
(131,430,qs),
(101,430,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,599,l),
(466,769,l),
(361,769,l),
(288,676,l),
(214,769,l),
(108,769,l),
(250,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 1 76 1 1 0 2 0 133 0 2 2 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 574;
}
);
note = caron;
unicode = 711;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,696,o),
(120,666,qs),
(120,634,o),
(158,597,o),
(189,597,qs),
(220,597,o),
(260,635,o),
(260,666,qs),
(260,695,o),
(219,735,o),
(189,734,qs),
(159,734,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 380;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,743,o),
(120,695,qs),
(120,647,o),
(179,593,o),
(227,593,qs),
(274,593,o),
(334,647,o),
(334,695,qs),
(334,743,o),
(275,802,o),
(227,802,qs),
(180,802,o)
);
},
{
closed = 1;
nodes = (
(269,716,o),
(269,697,qs),
(269,677,o),
(246,654,o),
(227,654,qs),
(207,654,o),
(185,677,o),
(185,697,qs),
(185,716,o),
(207,740,o),
(227,740,qs),
(246,740,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 454;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,-65,o),
(155,-107,qs),
(155,-136,o),
(175,-179,o),
(209,-207,o),
(255,-222,o),
(282,-222,qs),
(302,-222,o),
(339,-214,o),
(358,-204,q),
(343,-135,l),
(322,-146,o),
(298,-146,qs),
(272,-146,o),
(238,-117,o),
(239,-90,qs),
(239,-74,o),
(253,-46,o),
(276,-22,o),
(303,-2,o),
(316,4,q),
(298,6,o),
(263,12,o),
(245,14,q),
(208,-2,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
14 1 1 0 1 76 13 3 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 42 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 513;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,618,o),
(193,641,o),
(198,662,o),
(211,676,o),
(222,676,qs),
(234,676,o),
(260,656,o),
(293,627,o),
(332,605,o),
(359,605,qs),
(408,605,o),
(459,666,o),
(463,714,qs),
(465,730,o),
(464,749,q),
(383,749,l),
(383,741,o),
(383,718,o),
(378,698,o),
(365,684,o),
(353,684,qs),
(341,684,o),
(315,706,o),
(283,733,o),
(245,755,o),
(220,755,qs),
(171,755,o),
(120,699,o),
(114,655,qs),
(112,634,o),
(112,621,o),
(112,610,q),
(192,610,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
17 1 1 0 0 1 2 3 2 76 0 1 3 2 1 89 0 0 0 3 2 0 3 105 0 1 1 2 97 0 2 1 2 81 35 41 35 37 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 577;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,599,l),
(190,599,l),
(294,769,l),
(182,769,l)
);
},
{
closed = 1;
nodes = (
(268,599,l),
(360,599,l),
(474,769,l),
(362,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
5 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 524;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-420,769,l),
(-303,606,l),
(-208,606,l),
(-305,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 1 133 0 0 0 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-245,606,l),
(-128,769,l),
(-243,769,l),
(-340,606,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-319,769,l),
(-460,599,l),
(-355,599,l),
(-282,692,l),
(-208,599,l),
(-102,599,l),
(-245,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-380,618,o),
(-379,641,o),
(-374,662,o),
(-361,676,o),
(-350,676,qs),
(-338,676,o),
(-312,656,o),
(-279,627,o),
(-240,605,o),
(-213,605,qs),
(-164,605,o),
(-113,666,o),
(-109,714,qs),
(-107,730,o),
(-108,749,q),
(-189,749,l),
(-189,741,o),
(-189,718,o),
(-194,698,o),
(-207,684,o),
(-219,684,qs),
(-231,684,o),
(-257,706,o),
(-289,733,o),
(-327,755,o),
(-352,755,qs),
(-401,755,o),
(-452,699,o),
(-458,655,qs),
(-460,634,o),
(-460,621,o),
(-460,610,q),
(-380,610,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
17 1 1 0 0 1 2 3 2 76 0 1 3 2 1 89 0 0 0 3 2 0 3 105 0 1 1 2 97 0 2 1 2 81 35 41 35 37 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-450,629,l),
(-112,629,l),
(-112,722,l),
(-450,722,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-454,702,o),
(-426,646,o),
(-378,611,o),
(-314,595,o),
(-277,595,qs),
(-240,595,o),
(-176,611,o),
(-127,647,o),
(-98,703,o),
(-97,743,q),
(-191,743,l),
(-193,705,o),
(-241,675,o),
(-276,675,qs),
(-311,675,o),
(-359,705,o),
(-361,743,q),
(-455,743,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
4 3 2 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 0 0 0 17 0 17 36 18 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-350,696,o),
(-350,666,qs),
(-350,634,o),
(-312,597,o),
(-281,597,qs),
(-250,597,o),
(-210,635,o),
(-210,666,qs),
(-210,695,o),
(-251,735,o),
(-281,734,qs),
(-311,734,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 1 0 7 5 0 11 1 11 3 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-223,696,o),
(-223,666,qs),
(-223,634,o),
(-185,597,o),
(-154,597,qs),
(-123,597,o),
(-83,635,o),
(-83,666,qs),
(-83,695,o),
(-124,735,o),
(-154,734,qs),
(-184,734,o)
);
},
{
closed = 1;
nodes = (
(-465,696,o),
(-465,666,qs),
(-465,634,o),
(-427,597,o),
(-396,597,qs),
(-365,597,o),
(-325,635,o),
(-325,666,qs),
(-325,695,o),
(-366,735,o),
(-396,734,qs),
(-426,734,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-385,743,o),
(-385,695,qs),
(-385,647,o),
(-326,593,o),
(-278,593,qs),
(-231,593,o),
(-171,647,o),
(-171,695,qs),
(-171,743,o),
(-230,802,o),
(-278,802,qs),
(-325,802,o)
);
},
{
closed = 1;
nodes = (
(-236,716,o),
(-236,697,qs),
(-236,677,o),
(-259,654,o),
(-278,654,qs),
(-298,654,o),
(-320,677,o),
(-320,697,qs),
(-320,716,o),
(-298,740,o),
(-278,740,qs),
(-259,740,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 0 5 1 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-420,599,l),
(-330,599,l),
(-226,769,l),
(-338,769,l)
);
},
{
closed = 1;
nodes = (
(-252,599,l),
(-160,599,l),
(-46,769,l),
(-158,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
5 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-243,599,l),
(-102,769,l),
(-207,769,l),
(-280,676,l),
(-354,769,l),
(-460,769,l),
(-318,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 1 76 1 1 0 2 0 133 0 2 2 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,696,o),
(354,666,qs),
(354,634,o),
(392,597,o),
(423,597,qs),
(454,597,o),
(494,635,o),
(494,666,qs),
(494,695,o),
(453,735,o),
(423,734,qs),
(393,734,o)
);
},
{
closed = 1;
nodes = (
(112,696,o),
(112,666,qs),
(112,634,o),
(150,597,o),
(181,597,qs),
(212,597,o),
(252,635,o),
(252,666,qs),
(252,695,o),
(211,735,o),
(181,734,qs),
(151,734,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
5 2 4 3 0 1 1 0 89 5 2 4 3 0 0 1 97 3 1 1 0 1 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 606;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-229,806,o),
(-206,822,q),
(-233,860,l),
(-255,850,o),
(-300,813,o),
(-330,769,o),
(-349,716,o),
(-350,687,qs),
(-350,670,o),
(-343,637,o),
(-325,612,o),
(-296,597,o),
(-276,597,qs),
(-247,597,o),
(-209,632,o),
(-209,664,qs),
(-209,692,o),
(-242,726,o),
(-270,728,q),
(-264,757,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
17 16 2 0 74 0 0 0 118 37 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-368,-112,l),
(-357,-110,o),
(-328,-108,o),
(-314,-108,qs),
(-287,-108,o),
(-259,-124,o),
(-259,-143,qs),
(-259,-166,o),
(-301,-187,o),
(-337,-187,qs),
(-345,-187,o),
(-361,-186,o),
(-369,-185,q),
(-370,-252,l),
(-343,-255,o),
(-321,-255,qs),
(-294,-255,o),
(-241,-242,o),
(-199,-213,o),
(-173,-166,o),
(-173,-133,qs),
(-173,-91,o),
(-220,-49,o),
(-258,-49,qs),
(-263,-49,o),
(-271,-49,o),
(-278,-50,q),
(-261,16,l),
(-335,16,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 57 values pushed */
27 15 2 2 3 14 1 1 2 2 76 0 0 4 3 4 0 3 128 5 1 4 0 3 2 4 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 0 0 0 28 0 28 52 51 38 65 6 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-375,-65,o),
(-375,-107,qs),
(-375,-136,o),
(-355,-179,o),
(-321,-207,o),
(-275,-222,o),
(-248,-222,qs),
(-228,-222,o),
(-191,-214,o),
(-172,-204,q),
(-187,-135,l),
(-208,-146,o),
(-232,-146,qs),
(-258,-146,o),
(-292,-117,o),
(-291,-90,qs),
(-291,-74,o),
(-277,-46,o),
(-254,-22,o),
(-227,-2,o),
(-214,4,q),
(-232,6,o),
(-267,12,o),
(-285,14,q),
(-322,-2,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
14 1 1 0 1 76 13 3 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 36 42 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 65401;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(208,949,l),
(325,786,l),
(420,786,l),
(323,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 4 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 6 2 6 5 2 128 8 1 4 0 0 1 4 0 104 0 6 6 44 77 0 2 2 38 77 7 3 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 6 5 6 133 0 5 2 5 133 8 1 4 0 0 1 4 0 104 0 2 2 38 77 7 3 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
8 8 0 0 14 13 12 11 8 10 8 10 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(373,786,l),
(490,949,l),
(375,949,l),
(278,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 4 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 6 5 2 5 6 2 128 8 1 4 0 0 1 4 0 104 0 5 5 44 77 0 2 2 38 77 7 3 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 5 6 5 133 0 6 2 6 133 8 1 4 0 0 1 4 0 104 0 2 2 38 77 7 3 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
8 8 0 0 14 13 12 11 8 10 8 10 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(313,949,l),
(172,779,l),
(277,779,l),
(350,872,l),
(424,779,l),
(530,779,l),
(387,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
13 1 5 7 9 1 4 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
6 1 5 7 2 7 5 2 128 9 1 4 0 0 1 4 0 104 0 7 7 44 77 0 2 2 38 77 8 3 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 7 5 7 133 6 1 5 2 5 133 9 1 4 0 0 1 4 0 104 0 2 2 38 77 8 3 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 17 16 15 14 12 11 8 10 8 10 0 7 0 7 17 17 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(258,798,o),
(259,821,o),
(264,842,o),
(277,856,o),
(288,856,qs),
(300,856,o),
(326,836,o),
(359,807,o),
(398,785,o),
(425,785,qs),
(474,785,o),
(525,846,o),
(529,894,qs),
(531,910,o),
(530,929,q),
(449,929,l),
(449,921,o),
(449,898,o),
(444,878,o),
(431,864,o),
(419,864,qs),
(407,864,o),
(381,886,o),
(349,913,o),
(311,935,o),
(286,935,qs),
(237,935,o),
(186,879,o),
(180,835,qs),
(178,814,o),
(178,801,o),
(178,790,q),
(258,790,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
28 1 6 5 11 1 7 8 9 1 4 2 3 76 0 5 0 8 7 5 8 105 0 6 0 7 2 6 7 105 10 1 4 0 0 1 4 0 104 0 2 2 38 77 9 3 2 1 1 39 1 78 8 8 0 0 39 37 34 32 23 21 18 16 8 10 8 10 0 7 0 7 17 17 17 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(401,876,o),
(401,846,qs),
(401,814,o),
(439,777,o),
(470,777,qs),
(501,777,o),
(541,815,o),
(541,846,qs),
(541,875,o),
(500,915,o),
(470,914,qs),
(440,914,o)
);
},
{
closed = 1;
nodes = (
(159,876,o),
(159,846,qs),
(159,814,o),
(197,777,o),
(228,777,qs),
(259,777,o),
(299,815,o),
(299,846,qs),
(299,875,o),
(258,915,o),
(228,914,qs),
(198,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
9 1 4 2 1 76 12 7 11 3 5 8 1 6 2 5 6 105 10 1 4 0 0 1 4 0 104 0 2 2 38 77 9 3 2 1 1 39 1 78 24 23 12 11 8 8 0 0 30 28 23 34 24 34 18 16 11 22 12 22 8 10 8 10 0 7 0 7 17 17 17 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(238,907,o),
(238,859,qs),
(238,811,o),
(297,757,o),
(345,757,qs),
(392,757,o),
(452,811,o),
(452,859,qs),
(452,907,o),
(393,966,o),
(345,966,qs),
(298,966,o)
);
},
{
closed = 1;
nodes = (
(387,880,o),
(387,861,qs),
(387,841,o),
(364,818,o),
(345,818,qs),
(325,818,o),
(303,841,o),
(303,861,qs),
(303,880,o),
(325,904,o),
(345,904,qs),
(364,904,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
9 1 4 2 1 76 0 8 0 6 2 8 6 105 10 1 4 0 0 1 4 0 104 12 1 7 7 5 97 11 1 5 5 44 77 0 2 2 38 77 9 3 2 1 1 39 1 78 24 23 12 11 8 8 0 0 30 28 23 34 24 34 18 16 11 22 12 22 8 10 8 10 0 7 0 7 17 17 17 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(192,949,l),
(309,786,l),
(404,786,l),
(307,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 6 7 0 7 6 0 128 0 2 0 3 4 2 3 103 0 7 7 44 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 7 6 7 133 0 6 0 6 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(357,786,l),
(474,949,l),
(359,949,l),
(262,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 7 6 0 6 7 0 128 0 2 0 3 4 2 3 103 0 6 6 44 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 6 7 6 133 0 7 0 7 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(290,949,l),
(149,779,l),
(254,779,l),
(327,872,l),
(401,779,l),
(507,779,l),
(364,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
7 1 6 8 0 8 6 0 128 0 2 0 3 4 2 3 103 0 8 8 44 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 8 6 8 133 7 1 6 0 6 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 17 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(383,876,o),
(383,846,qs),
(383,814,o),
(421,777,o),
(452,777,qs),
(483,777,o),
(523,815,o),
(523,846,qs),
(523,875,o),
(482,915,o),
(452,914,qs),
(422,914,o)
);
},
{
closed = 1;
nodes = (
(141,876,o),
(141,846,qs),
(141,814,o),
(179,777,o),
(210,777,qs),
(241,777,o),
(281,815,o),
(281,846,qs),
(281,875,o),
(240,915,o),
(210,914,qs),
(180,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 8 10 3 6 9 1 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 25 24 13 12 31 29 24 35 25 35 19 17 12 23 13 23 17 17 17 17 17 16 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(-6,949,l),
(111,786,l),
(206,786,l),
(109,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 3 1 3 2 1 128 0 3 3 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 2 3 133 0 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(171,786,l),
(288,949,l),
(173,949,l),
(76,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 3 2 1 2 3 1 128 0 2 2 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(102,949,l),
(-39,779,l),
(66,779,l),
(139,872,l),
(213,779,l),
(319,779,l),
(176,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 1 2 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
3 1 2 4 1 4 2 1 128 0 4 4 44 77 0 1 1 38 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 4 2 4 133 3 1 2 1 2 133 0 1 1 38 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(181,876,o),
(181,846,qs),
(181,814,o),
(219,777,o),
(250,777,qs),
(281,777,o),
(321,815,o),
(321,846,qs),
(321,875,o),
(280,915,o),
(250,914,qs),
(220,914,o)
);
},
{
closed = 1;
nodes = (
(-41,876,o),
(-41,846,qs),
(-41,814,o),
(-3,777,o),
(28,777,qs),
(59,777,o),
(99,815,o),
(99,846,qs),
(99,875,o),
(58,915,o),
(28,914,qs),
(-2,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,529,l),
(550,0,l),
(674,0,l),
(674,707,l),
(559,707,l),
(559,176,l),
(207,707,l),
(82,707,l),
(82,0,l),
(196,0,l)
);
},
{
closed = 1;
nodes = (
(291,798,o),
(292,821,o),
(297,842,o),
(310,856,o),
(321,856,qs),
(333,856,o),
(359,836,o),
(392,807,o),
(431,785,o),
(458,785,qs),
(507,785,o),
(558,846,o),
(562,894,qs),
(564,910,o),
(563,929,q),
(482,929,l),
(482,921,o),
(482,898,o),
(477,878,o),
(464,864,o),
(452,864,qs),
(440,864,o),
(414,886,o),
(382,913,o),
(344,935,o),
(319,935,qs),
(270,935,o),
(219,879,o),
(213,835,qs),
(211,814,o),
(211,801,o),
(211,790,q),
(291,790,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
27 1 5 4 10 1 6 7 8 3 2 2 0 3 76 0 4 0 7 6 4 7 105 0 5 0 6 0 5 6 105 1 1 0 0 38 77 8 3 2 2 2 39 2 78 0 0 38 36 33 31 22 20 17 15 0 9 0 9 17 18 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(238,949,l),
(355,786,l),
(450,786,l),
(353,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 5 5 44 77 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 4 5 133 0 4 1 4 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(413,786,l),
(530,949,l),
(415,949,l),
(318,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 4 1 4 5 1 128 0 4 4 44 77 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 4 5 4 133 0 5 1 5 133 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(353,949,l),
(212,779,l),
(317,779,l),
(390,872,l),
(464,779,l),
(570,779,l),
(427,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
42 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
5 1 4 6 1 6 4 1 128 0 6 6 44 77 8 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 7 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 6 4 6 133 5 1 4 1 4 133 8 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 7 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
21 20 1 0 46 45 44 43 41 40 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(291,798,o),
(292,821,o),
(297,842,o),
(310,856,o),
(321,856,qs),
(333,856,o),
(359,836,o),
(392,807,o),
(431,785,o),
(458,785,qs),
(507,785,o),
(558,846,o),
(562,894,qs),
(564,910,o),
(563,929,q),
(482,929,l),
(482,921,o),
(482,898,o),
(477,878,o),
(464,864,o),
(452,864,qs),
(440,864,o),
(414,886,o),
(382,913,o),
(344,935,o),
(319,935,qs),
(270,935,o),
(219,879,o),
(213,835,qs),
(211,814,o),
(211,801,o),
(211,790,q),
(291,790,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
57 1 5 4 40 1 6 7 2 76 0 4 0 7 6 4 7 105 0 5 0 6 1 5 6 105 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 21 20 1 0 68 66 63 61 52 50 47 45 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(441,876,o),
(441,846,qs),
(441,814,o),
(479,777,o),
(510,777,qs),
(541,777,o),
(581,815,o),
(581,846,qs),
(581,875,o),
(540,915,o),
(510,914,qs),
(480,914,o)
);
},
{
closed = 1;
nodes = (
(199,876,o),
(199,846,qs),
(199,814,o),
(237,777,o),
(268,777,qs),
(299,777,o),
(339,815,o),
(339,846,qs),
(339,875,o),
(298,915,o),
(268,914,qs),
(238,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
11 6 10 3 4 7 1 5 1 4 5 105 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 53 52 41 40 21 20 1 0 59 57 52 63 53 63 47 45 40 51 41 51 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(227,949,l),
(344,786,l),
(439,786,l),
(342,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 5 1 5 4 1 128 0 5 5 44 77 6 3 2 1 1 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 4 5 133 0 4 1 4 133 6 3 2 1 1 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 29 28 27 26 0 25 0 25 37 21 37 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(399,786,l),
(516,949,l),
(401,949,l),
(304,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 5 4 1 4 5 1 128 0 4 4 44 77 6 3 2 1 1 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 5 4 133 0 5 1 5 133 6 3 2 1 1 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 29 28 27 26 0 25 0 25 37 21 37 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(334,949,l),
(193,779,l),
(298,779,l),
(371,872,l),
(445,779,l),
(551,779,l),
(408,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
28 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
5 1 4 6 1 6 4 1 128 0 6 6 44 77 7 3 2 1 1 38 77 0 2 2 0 98 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 6 4 6 133 5 1 4 1 4 133 7 3 2 1 1 38 77 0 2 2 0 98 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 32 31 30 29 27 26 0 25 0 25 37 21 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(422,876,o),
(422,846,qs),
(422,814,o),
(460,777,o),
(491,777,qs),
(522,777,o),
(562,815,o),
(562,846,qs),
(562,875,o),
(521,915,o),
(491,914,qs),
(461,914,o)
);
},
{
closed = 1;
nodes = (
(180,876,o),
(180,846,qs),
(180,814,o),
(218,777,o),
(249,777,qs),
(280,777,o),
(320,815,o),
(320,846,qs),
(320,875,o),
(279,915,o),
(249,914,qs),
(219,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 6 9 3 4 7 1 5 1 4 5 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 39 38 27 26 0 0 45 43 38 49 39 49 33 31 26 37 27 37 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,707,l),
(9,707,l),
(267,264,l),
(267,0,l),
(383,0,l),
(383,265,l),
(638,707,l),
(507,707,l),
(326,377,l)
);
},
{
closed = 1;
nodes = (
(362,786,l),
(479,949,l),
(364,949,l),
(267,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
8 5 2 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 3 0 3 4 0 128 0 3 3 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 4 3 0 3 4 0 128 2 1 0 0 38 77 0 3 3 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = agrave;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(137,769,l),
(254,606,l),
(349,606,l),
(252,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 114 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 9 8 9 133 0 8 4 8 133 0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
51 50 20 37 33 22 36 18 34 40 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(310,606,l),
(427,769,l),
(312,769,l),
(215,606,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 8 9 8 133 0 9 4 9 133 0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 8 9 8 133 0 9 4 9 133 0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
51 50 20 37 33 22 36 18 34 40 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(249,769,l),
(108,599,l),
(213,599,l),
(286,692,l),
(360,599,l),
(466,599,l),
(323,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
50 1 8 10 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 10 8 10 133 9 1 8 4 8 133 0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 10 8 10 133 9 1 8 4 8 133 0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
54 53 52 51 20 37 33 22 36 18 34 40 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(192,618,o),
(193,641,o),
(198,662,o),
(211,676,o),
(222,676,qs),
(234,676,o),
(260,656,o),
(293,627,o),
(332,605,o),
(359,605,qs),
(408,605,o),
(459,666,o),
(463,714,qs),
(465,730,o),
(464,749,q),
(383,749,l),
(383,741,o),
(383,718,o),
(378,698,o),
(365,684,o),
(353,684,qs),
(341,684,o),
(315,706,o),
(283,733,o),
(245,755,o),
(220,755,qs),
(171,755,o),
(120,699,o),
(114,655,qs),
(112,634,o),
(112,621,o),
(112,610,q),
(192,610,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
65 1 9 8 48 1 10 11 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 11 11 8 97 0 8 8 48 77 0 10 10 9 97 0 9 9 38 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 2 1 2 3 1 128 0 8 0 11 10 8 11 105 0 1 0 6 7 1 6 103 0 10 10 9 97 0 9 9 38 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 2 1 2 3 1 128 0 8 0 11 10 8 11 105 0 9 0 10 4 9 10 105 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 3 2 1 2 3 1 128 0 8 0 11 10 8 11 105 0 9 0 10 4 9 10 105 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
76 74 71 69 60 58 41 37 33 22 36 18 34 40 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(341,696,o),
(341,666,qs),
(341,634,o),
(379,597,o),
(410,597,qs),
(441,597,o),
(481,635,o),
(481,666,qs),
(481,695,o),
(440,735,o),
(410,734,qs),
(380,734,o)
);
},
{
closed = 1;
nodes = (
(99,696,o),
(99,666,qs),
(99,634,o),
(137,597,o),
(168,597,qs),
(199,597,o),
(239,635,o),
(239,666,qs),
(239,695,o),
(198,735,o),
(168,734,qs),
(138,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 11 1 9 9 8 97 13 10 12 3 8 8 48 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 11 1 9 9 8 97 13 10 12 3 8 8 46 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 3 2 1 2 3 1 128 13 10 12 3 8 11 1 9 4 8 9 105 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 3 2 1 2 3 1 128 13 10 12 3 8 11 1 9 4 8 9 105 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
61 60 49 48 67 65 60 71 61 71 55 53 48 59 49 59 37 33 22 36 18 34 40 34 14 8 30 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(180,743,o),
(180,695,qs),
(180,647,o),
(239,593,o),
(287,593,qs),
(334,593,o),
(394,647,o),
(394,695,qs),
(394,743,o),
(335,802,o),
(287,802,qs),
(240,802,o)
);
},
{
closed = 1;
nodes = (
(329,716,o),
(329,697,qs),
(329,677,o),
(306,654,o),
(287,654,qs),
(267,654,o),
(245,677,o),
(245,697,qs),
(245,716,o),
(267,740,o),
(287,740,qs),
(306,740,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 3 2 1 2 3 1 128 12 1 8 13 1 10 11 8 10 105 0 11 0 9 4 11 9 105 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 3 2 1 2 3 1 128 12 1 8 13 1 10 11 8 10 105 0 11 0 9 4 11 9 105 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
61 60 49 48 67 65 60 71 61 71 55 53 48 59 49 59 37 33 22 36 18 34 40 34 14 8 30 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = aring;
unicode = 229;
},
{
glyphname = egrave;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(152,769,l),
(269,606,l),
(364,606,l),
(267,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
0 8 7 8 133 0 7 3 7 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 32 32 0 0 44 43 42 41 32 40 32 40 36 34 0 31 0 31 40 36 18 36 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(327,606,l),
(444,769,l),
(329,769,l),
(232,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
0 7 8 7 133 0 8 3 8 133 0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 32 32 0 0 44 43 42 41 32 40 32 40 36 34 0 31 0 31 40 36 18 36 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(258,769,l),
(117,599,l),
(222,599,l),
(295,692,l),
(369,599,l),
(475,599,l),
(332,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
43 1 7 9 1 76 0 9 7 9 133 8 1 7 3 7 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 32 32 0 0 47 46 45 44 42 41 32 40 32 40 36 34 0 31 0 31 40 36 18 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(350,696,o),
(350,666,qs),
(350,634,o),
(388,597,o),
(419,597,qs),
(450,597,o),
(490,635,o),
(490,666,qs),
(490,695,o),
(449,735,o),
(419,734,qs),
(389,734,o)
);
},
{
closed = 1;
nodes = (
(108,696,o),
(108,666,qs),
(108,634,o),
(146,597,o),
(177,597,qs),
(208,597,o),
(248,635,o),
(248,666,qs),
(248,695,o),
(207,735,o),
(177,734,qs),
(147,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 1 4 0 4 1 0 128 12 1 6 11 1 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 48 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 1 4 0 4 1 0 128 12 1 6 11 1 4 1 6 4 103 10 1 8 8 7 97 14 9 13 3 7 7 46 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 1 4 0 4 1 0 128 14 9 13 3 7 10 1 8 3 7 8 105 12 1 6 11 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
54 53 42 41 32 32 0 0 60 58 53 64 54 64 48 46 41 52 42 52 32 40 32 40 36 34 0 31 0 31 40 36 18 36 15 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
},
{
closed = 1;
nodes = (
(-25,769,l),
(92,606,l),
(187,606,l),
(90,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 2 3 133 0 2 1 2 133 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
},
{
closed = 1;
nodes = (
(152,606,l),
(269,769,l),
(154,769,l),
(57,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 1 41 77 0 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
},
{
closed = 1;
nodes = (
(83,769,l),
(-58,599,l),
(47,599,l),
(120,692,l),
(194,599,l),
(300,599,l),
(157,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
6 1 2 4 1 76 0 4 2 4 133 3 1 2 1 2 133 0 1 1 41 77 0 0 0 39 0 78 17 18 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
},
{
closed = 1;
nodes = (
(160,696,o),
(160,666,qs),
(160,634,o),
(198,597,o),
(229,597,qs),
(260,597,o),
(300,635,o),
(300,666,qs),
(300,695,o),
(259,735,o),
(229,734,qs),
(199,734,o)
);
},
{
closed = 1;
nodes = (
(-62,696,o),
(-62,666,qs),
(-62,634,o),
(-24,597,o),
(7,597,qs),
(38,597,o),
(78,635,o),
(78,666,qs),
(78,695,o),
(37,735,o),
(7,734,qs),
(-23,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 48 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 3 2 97 7 4 6 3 2 2 46 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
7 4 6 3 2 5 1 3 1 2 3 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
17 16 5 4 23 21 16 27 17 27 11 9 4 15 5 15 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,251,ls),
(176,281,o),
(189,347,o),
(220,401,o),
(277,435,o),
(312,435,qs),
(349,435,o),
(396,409,o),
(422,364,o),
(431,306,o),
(431,272,qs),
(431,0,l),
(545,0,l),
(545,289,ls),
(545,342,o),
(524,432,o),
(475,498,o),
(398,536,o),
(342,536,qs),
(293,536,o),
(206,495,o),
(177,454,q),
(171,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(212,618,o),
(213,641,o),
(218,662,o),
(231,676,o),
(242,676,qs),
(254,676,o),
(280,656,o),
(313,627,o),
(352,605,o),
(379,605,qs),
(428,605,o),
(479,666,o),
(483,714,qs),
(485,730,o),
(484,749,q),
(403,749,l),
(403,741,o),
(403,718,o),
(398,698,o),
(385,684,o),
(373,684,qs),
(361,684,o),
(335,706,o),
(303,733,o),
(265,755,o),
(240,755,qs),
(191,755,o),
(140,699,o),
(134,655,qs),
(132,634,o),
(132,621,o),
(132,610,q),
(212,610,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
43 1 6 5 26 1 7 8 3 1 3 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 8 5 97 0 5 5 48 77 0 7 7 6 97 0 6 6 38 77 0 3 3 0 97 1 1 0 0 41 77 9 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 0 8 7 5 8 105 0 7 7 6 97 0 6 6 38 77 0 3 3 0 97 1 1 0 0 41 77 9 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 0 8 7 5 8 105 0 6 0 7 0 6 7 105 0 3 3 0 97 1 1 0 0 41 77 9 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 5 0 8 7 5 8 105 0 6 0 7 1 6 7 105 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 9 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 54 52 49 47 38 36 33 31 0 25 0 25 37 21 35 17 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(160,769,l),
(277,606,l),
(372,606,l),
(275,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 4 5 133 0 4 0 4 133 0 3 3 0 97 6 1 0 0 49 77 7 1 2 2 1 97 0 1 1 47 1 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(333,606,l),
(450,769,l),
(335,769,l),
(238,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 4 133 0 5 0 5 133 0 3 3 0 97 6 1 0 0 49 77 7 1 2 2 1 97 0 1 1 47 1 78 21 20 1 0 43 42 41 40 31 29 20 39 21 39 11 9 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(265,769,l),
(124,599,l),
(229,599,l),
(302,692,l),
(376,599,l),
(482,599,l),
(339,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
42 1 4 6 1 76 0 6 4 6 133 5 1 4 0 4 133 0 3 3 0 97 7 1 0 0 49 77 8 1 2 2 1 97 0 1 1 47 1 78 21 20 1 0 46 45 44 43 41 40 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(210,618,o),
(211,641,o),
(216,662,o),
(229,676,o),
(240,676,qs),
(252,676,o),
(278,656,o),
(311,627,o),
(350,605,o),
(377,605,qs),
(426,605,o),
(477,666,o),
(481,714,qs),
(483,730,o),
(482,749,q),
(401,749,l),
(401,741,o),
(401,718,o),
(396,698,o),
(383,684,o),
(371,684,qs),
(359,684,o),
(333,706,o),
(301,733,o),
(263,755,o),
(238,755,qs),
(189,755,o),
(138,699,o),
(132,655,qs),
(130,634,o),
(130,621,o),
(130,610,q),
(210,610,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
57 1 5 4 40 1 6 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 7 7 4 97 0 4 4 48 77 0 6 6 5 97 0 5 5 38 77 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 4 0 7 6 4 7 105 0 6 6 5 97 0 5 5 38 77 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 0 7 6 4 7 105 0 5 0 6 0 5 6 105 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
21 20 1 0 68 66 63 61 52 50 47 45 31 29 20 39 21 39 11 9 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(354,696,o),
(354,666,qs),
(354,634,o),
(392,597,o),
(423,597,qs),
(454,597,o),
(494,635,o),
(494,666,qs),
(494,695,o),
(453,735,o),
(423,734,qs),
(393,734,o)
);
},
{
closed = 1;
nodes = (
(112,696,o),
(112,666,qs),
(112,634,o),
(150,597,o),
(181,597,qs),
(212,597,o),
(252,635,o),
(252,666,qs),
(252,695,o),
(211,735,o),
(181,734,qs),
(151,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 5 5 4 97 11 6 10 3 4 4 48 77 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 5 5 4 97 11 6 10 3 4 4 46 77 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
11 6 10 3 4 7 1 5 0 4 5 105 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
53 52 41 40 21 20 1 0 59 57 52 63 53 63 47 45 40 51 41 51 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(148,769,l),
(265,606,l),
(360,606,l),
(263,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 5 4 5 133 0 4 1 4 133 3 1 1 1 41 77 6 1 0 0 2 98 0 2 2 47 2 78 1 0 23 22 21 20 16 15 12 10 5 4 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(333,606,l),
(450,769,l),
(335,769,l),
(238,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 5 4 133 0 5 1 5 133 3 1 1 1 41 77 6 1 0 0 2 98 0 2 2 47 2 78 1 0 23 22 21 20 16 15 12 10 5 4 0 19 1 19 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(258,769,l),
(117,599,l),
(222,599,l),
(295,692,l),
(369,599,l),
(475,599,l),
(332,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
22 1 4 6 1 76 0 6 4 6 133 5 1 4 1 4 133 3 1 1 1 41 77 7 1 0 0 2 98 0 2 2 47 2 78 1 0 26 25 24 23 21 20 16 15 12 10 5 4 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(348,696,o),
(348,666,qs),
(348,634,o),
(386,597,o),
(417,597,qs),
(448,597,o),
(488,635,o),
(488,666,qs),
(488,695,o),
(447,735,o),
(417,734,qs),
(387,734,o)
);
},
{
closed = 1;
nodes = (
(106,696,o),
(106,666,qs),
(106,634,o),
(144,597,o),
(175,597,qs),
(206,597,o),
(246,635,o),
(246,666,qs),
(246,695,o),
(205,735,o),
(175,734,qs),
(145,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 5 4 97 10 6 9 3 4 4 48 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 5 4 97 10 6 9 3 4 4 46 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
10 6 9 3 4 7 1 5 1 4 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
33 32 21 20 1 0 39 37 32 43 33 43 27 25 20 31 21 31 16 15 12 10 5 4 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,275,ls),
(435,240,o),
(422,174,o),
(391,123,o),
(338,91,o),
(298,91,qs),
(259,91,o),
(211,118,o),
(184,163,o),
(175,222,o),
(175,254,qs),
(175,527,l),
(62,527,l),
(62,232,ls),
(62,180,o),
(82,92,o),
(130,28,o),
(214,-8,o),
(273,-8,qs),
(325,-8,o),
(408,26,o),
(436,66,q),
(436,25,o),
(427,-54,o),
(396,-115,o),
(336,-151,o),
(283,-151,qs),
(228,-151,o),
(143,-115,o),
(110,-89,q),
(99,-113,o),
(78,-162,o),
(67,-185,q),
(116,-222,o),
(227,-254,o),
(287,-254,qs),
(388,-254,o),
(508,-172,o),
(531,-100,qs),
(546,-55,o),
(549,39,o),
(549,84,qs),
(549,527,l),
(435,527,l)
);
},
{
closed = 1;
nodes = (
(344,606,l),
(461,769,l),
(346,769,l),
(249,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 1 2 4 13 1 1 2 10 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 6 7 6 133 0 7 3 7 133 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 7 6 133 0 7 3 7 133 0 1 0 0 1 0 102 8 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 47 46 45 44 0 43 0 43 37 21 38 39 38 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,275,ls),
(435,240,o),
(422,174,o),
(391,123,o),
(338,91,o),
(298,91,qs),
(259,91,o),
(211,118,o),
(184,163,o),
(175,222,o),
(175,254,qs),
(175,527,l),
(62,527,l),
(62,232,ls),
(62,180,o),
(82,92,o),
(130,28,o),
(214,-8,o),
(273,-8,qs),
(325,-8,o),
(408,26,o),
(436,66,q),
(436,25,o),
(427,-54,o),
(396,-115,o),
(336,-151,o),
(283,-151,qs),
(228,-151,o),
(143,-115,o),
(110,-89,q),
(99,-113,o),
(78,-162,o),
(67,-185,q),
(116,-222,o),
(227,-254,o),
(287,-254,qs),
(388,-254,o),
(508,-172,o),
(531,-100,qs),
(546,-55,o),
(549,39,o),
(549,84,qs),
(549,527,l),
(435,527,l)
);
},
{
closed = 1;
nodes = (
(361,696,o),
(361,666,qs),
(361,634,o),
(399,597,o),
(430,597,qs),
(461,597,o),
(501,635,o),
(501,666,qs),
(501,695,o),
(460,735,o),
(430,734,qs),
(400,734,o)
);
},
{
closed = 1;
nodes = (
(119,696,o),
(119,666,qs),
(119,634,o),
(157,597,o),
(188,597,qs),
(219,597,o),
(259,635,o),
(259,666,qs),
(259,695,o),
(218,735,o),
(188,734,qs),
(158,734,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 1 2 4 13 1 1 2 10 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 7 6 97 12 8 11 3 6 6 48 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 0 1 0 101 9 1 7 7 6 97 12 8 11 3 6 6 48 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 0 1 0 101 9 1 7 7 6 97 12 8 11 3 6 6 46 77 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
12 8 11 3 6 9 1 7 3 6 7 105 0 1 0 0 1 0 101 10 5 2 3 3 41 77 0 4 4 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
57 56 45 44 0 0 63 61 56 67 57 67 51 49 44 55 45 55 0 43 0 43 37 21 38 39 38 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(428,143,l),
(428,0,l),
(887,0,l),
(887,103,l),
(544,103,l),
(544,297,l),
(844,297,l),
(844,402,l),
(544,402,l),
(544,603,l),
(887,603,l),
(887,707,l),
(349,707,l),
(5,0,l),
(131,0,l),
(199,143,l)
);
},
{
closed = 1;
nodes = (
(249,247,l),
(420,603,l),
(428,603,l),
(428,247,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
16 1 2 1 75 0 3 0 4 8 3 4 103 0 8 0 7 5 8 7 103 0 2 2 1 95 0 1 1 38 77 0 5 5 0 95 6 1 0 0 39 0 78 19 17 17 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 930;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Eth;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,402,l),
(198,402,l),
(198,603,l),
(338,603,ls),
(396,603,o),
(481,566,o),
(537,500,o),
(563,408,o),
(563,353,qs),
(563,298,o),
(537,206,o),
(482,140,o),
(397,103,o),
(339,103,qs),
(198,103,l),
(198,305,l),
(344,305,l)
);
},
{
closed = 1;
nodes = (
(4,402,l),
(4,305,l),
(82,305,l),
(82,0,l),
(342,0,ls),
(426,0,o),
(553,49,o),
(639,140,o),
(682,271,o),
(682,353,qs),
(682,435,o),
(637,567,o),
(550,658,o),
(422,707,o),
(338,707,qs),
(82,707,l),
(82,402,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 2 6 8 2 3 0 2 3 103 0 1 1 4 95 0 4 4 38 77 0 0 0 5 95 0 5 5 39 5 78 0 0 33 32 31 30 29 27 19 17 0 16 0 16 17 40 33 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,-3,o),
(361,-7,o),
(384,-7,qs),
(465,-7,o),
(593,47,o),
(680,143,o),
(726,276,o),
(726,355,qs),
(726,403,o),
(708,496,o),
(669,579,o),
(607,649,o),
(564,673,q),
(621,817,l),
(514,817,l),
(471,708,l),
(428,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,306,o),
(61,213,o),
(100,130,o),
(162,60,o),
(205,36,q),
(148,-111,l),
(255,-111,l),
(299,1,l)
);
},
{
closed = 1;
nodes = (
(162,297,o),
(162,355,qs),
(162,407,o),
(189,500,o),
(245,570,o),
(329,612,o),
(385,612,qs),
(397,612,o),
(420,610,o),
(431,608,q),
(247,143,l),
(201,181,o)
);
},
{
closed = 1;
nodes = (
(578,498,o),
(598,442,o),
(607,383,o),
(607,354,qs),
(607,302,o),
(580,209,o),
(525,138,o),
(442,97,o),
(385,97,qs),
(358,97,o),
(338,101,q),
(522,566,l),
(545,547,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
17 14 2 4 1 44 32 2 5 4 30 2 2 3 5 3 76 0 2 1 2 133 0 0 3 0 134 0 4 4 1 97 0 1 1 46 77 0 5 5 3 97 0 3 3 47 3 78 41 38 42 18 42 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,0,l),
(198,111,l),
(337,111,ls),
(395,111,o),
(493,142,o),
(565,203,o),
(605,295,o),
(605,356,qs),
(605,419,o),
(568,510,o),
(499,569,o),
(401,596,o),
(341,596,qs),
(198,596,l),
(198,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(411,492,o),
(489,427,o),
(489,351,qs),
(489,316,o),
(465,264,o),
(422,230,o),
(364,213,o),
(331,213,qs),
(198,213,l),
(198,492,l),
(338,492,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 6 1 5 4 1 5 103 0 4 0 2 3 4 2 103 0 0 0 38 77 0 3 3 39 3 78 17 17 17 27 17 26 34 17 40 33 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 649;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,36,o),
(445,81,q),
(460,57,o),
(505,23,o),
(557,2,o),
(614,-7,o),
(640,-7,qs),
(679,-7,o),
(753,10,o),
(815,46,o),
(860,104,o),
(870,145,q),
(753,145,l),
(739,111,o),
(678,87,o),
(643,87,qs),
(580,87,o),
(506,163,o),
(501,225,q),
(877,225,l),
(880,250,o),
(880,276,qs),
(880,333,o),
(849,428,o),
(787,497,o),
(697,536,o),
(638,536,qs),
(587,536,o),
(494,496,o),
(461,458,q),
(429,501,o),
(336,536,o),
(283,536,qs),
(245,536,o),
(170,519,o),
(109,483,o),
(66,424,o),
(60,382,q),
(177,382,l),
(185,414,o),
(247,438,o),
(279,438,qs),
(342,437,o),
(396,374,o),
(396,311,q),
(259,311,ls),
(219,311,o),
(142,298,o),
(81,263,o),
(44,202,o),
(44,154,qs),
(44,110,o),
(78,49,o),
(134,11,o),
(206,-7,o),
(244,-7,qs),
(316,-7,o)
);
},
{
closed = 1;
nodes = (
(509,368,o),
(579,438,o),
(638,438,qs),
(698,438,o),
(767,370,o),
(769,311,q),
(502,311,l)
);
},
{
closed = 1;
nodes = (
(382,151,o),
(368,133,qs),
(333,84,o),
(253,84,qs),
(235,84,o),
(200,92,o),
(174,110,o),
(158,138,o),
(158,159,qs),
(158,186,o),
(184,214,o),
(224,225,o),
(269,225,o),
(289,225,qs),
(396,225,l),
(396,202,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 102 values pushed */
26 1 2 4 54 1 0 7 2 76 0 3 2 1 2 3 1 128 0 8 6 7 6 8 7 128 15 11 2 1 12 1 6 8 1 6 103 10 1 2 2 4 97 5 1 4 4 49 77 13 1 7 7 0 97 9 14 2 0 0 47 0 78 57 57 1 0 76 74 67 64 57 63 57 63 61 59 50 48 44 43 41 39 37 36 30 28 24 22 18 17 15 13 11 9 0 56 1 56 16 8 22 
CALL[ ]	/* CallFunction */";
};
width = 921;
}
);
note = ae;
unicode = 230;
},
{
glyphname = eth;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,115,o),
(171,157,o),
(153,213,o),
(153,245,qs),
(153,275,o),
(170,328,o),
(203,367,o),
(252,390,o),
(284,390,qs),
(354,390,o),
(426,306,o),
(426,239,qs),
(426,208,o),
(408,154,o),
(373,114,o),
(323,91,o),
(291,91,qs),
(257,91,o)
);
},
{
closed = 1;
nodes = (
(341,595,l),
(358,583,o),
(391,540,o),
(417,491,o),
(434,440,o),
(435,419,q),
(406,459,o),
(319,492,o),
(271,492,qs),
(218,492,o),
(133,455,o),
(74,390,o),
(42,302,o),
(42,250,qs),
(42,193,o),
(75,99,o),
(137,31,o),
(228,-7,o),
(287,-7,qs),
(347,-6,o),
(450,37,o),
(486,85,qs),
(519,132,o),
(543,247,o),
(543,304,qs),
(543,353,o),
(532,446,o),
(504,534,o),
(458,614,o),
(422,649,q),
(510,705,l),
(466,774,l),
(352,702,l),
(311,728,o),
(220,758,o),
(172,766,q),
(153,685,l),
(184,680,o),
(246,661,o),
(269,646,q),
(187,595,l),
(231,526,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
53 1 1 3 1 76 59 58 29 28 27 26 23 22 19 9 3 74 0 3 0 1 0 3 1 105 4 1 0 0 2 97 0 2 2 47 2 78 1 0 51 49 41 39 9 7 0 17 1 17 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = eth;
unicode = 240;
},
{
glyphname = oslash;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,496,o),
(75,424,o),
(42,324,o),
(42,264,qs),
(42,200,o),
(84,80,o),
(137,41,q),
(69,-96,l),
(177,-96,l),
(225,1,l),
(260,-7,o),
(299,-7,qs),
(362,-7,o),
(459,31,o),
(525,101,o),
(559,202,o),
(559,264,qs),
(559,328,o),
(516,445,o),
(463,485,q),
(532,623,l),
(423,623,l),
(376,527,l),
(340,536,o),
(299,536,qs),
(236,536,o)
);
},
{
closed = 1;
nodes = (
(154,231,o),
(154,263,qs),
(154,298,o),
(170,360,o),
(205,407,o),
(260,434,o),
(299,434,qs),
(320,434,o),
(336,430,q),
(301,359,o),
(225,212,o),
(189,141,q),
(169,167,o)
);
},
{
closed = 1;
nodes = (
(445,294,o),
(445,263,qs),
(445,228,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(280,92,o),
(265,95,q),
(300,166,o),
(376,313,o),
(411,384,q),
(430,358,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
5 2 2 4 0 42 29 2 5 4 18 15 2 2 5 3 76 0 1 0 1 133 0 3 2 3 134 0 4 4 0 97 6 1 0 0 49 77 0 5 5 2 97 0 2 2 47 2 78 1 0 45 43 32 30 17 16 14 12 4 3 0 25 1 25 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,57,l),
(210,22,o),
(299,-7,o),
(347,-7,qs),
(407,-7,o),
(496,36,o),
(553,110,o),
(581,209,o),
(581,265,qs),
(581,320,o),
(553,418,o),
(496,492,o),
(409,536,o),
(347,536,qs),
(295,536,o),
(207,499,o),
(176,459,q),
(176,707,l),
(62,707,l),
(62,-205,l),
(176,-205,l)
);
},
{
closed = 1;
nodes = (
(230,119,o),
(193,166,o),
(175,228,o),
(175,264,qs),
(175,297,o),
(194,359,o),
(231,406,o),
(287,434,o),
(323,434,qs),
(362,434,o),
(417,407,o),
(452,360,o),
(468,298,o),
(468,263,qs),
(468,229,o),
(452,167,o),
(417,120,o),
(363,92,o),
(325,92,qs),
(287,92,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 5 1 19 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 38 77 0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 0 2 2 47 77 6 1 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 1 97 0 1 1 49 77 7 1 4 4 2 97 0 2 2 47 77 6 1 3 3 0 95 0 0 0 38 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 21 0 0 32 30 21 40 22 40 0 20 0 20 40 35 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = Dcroat;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,402,l),
(198,402,l),
(198,603,l),
(338,603,ls),
(396,603,o),
(481,566,o),
(537,500,o),
(563,408,o),
(563,353,qs),
(563,298,o),
(537,206,o),
(482,140,o),
(397,103,o),
(339,103,qs),
(198,103,l),
(198,305,l),
(344,305,l)
);
},
{
closed = 1;
nodes = (
(4,402,l),
(4,305,l),
(82,305,l),
(82,0,l),
(342,0,ls),
(426,0,o),
(553,49,o),
(639,140,o),
(682,271,o),
(682,353,qs),
(682,435,o),
(637,567,o),
(550,658,o),
(422,707,o),
(338,707,qs),
(82,707,l),
(82,402,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 2 6 8 2 3 0 2 3 103 0 1 1 4 95 0 4 4 38 77 0 0 0 5 95 0 5 5 39 5 78 0 0 33 32 31 30 29 27 19 17 0 16 0 16 17 40 33 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = OE;
kernLeft = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(553,686,o),
(445,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,275,o),
(89,143,o),
(176,47,o),
(303,-7,o),
(384,-7,qs),
(444,-7,o),
(553,25,o),
(600,65,q),
(600,0,l),
(1091,0,l),
(1091,103,l),
(716,103,l),
(716,297,l),
(1048,297,l),
(1048,402,l),
(716,402,l),
(716,603,l),
(1091,603,l),
(1091,707,l),
(600,707,l),
(600,646,l)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,302,o),
(580,209,o),
(525,138,o),
(442,97,o),
(385,97,qs),
(328,97,o),
(245,139,o),
(189,209,o),
(162,303,o),
(162,355,qs),
(162,407,o),
(189,500,o),
(245,570,o),
(329,612,o),
(385,612,qs),
(441,612,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
28 1 1 0 12 1 5 4 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
28 1 8 0 12 1 5 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
28 1 8 0 12 1 5 9 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 4 2 3 103 10 8 2 1 1 0 97 7 1 0 0 38 77 9 1 4 4 5 97 6 1 5 5 39 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 0 3 4 2 3 103 10 1 8 8 7 97 0 7 7 46 77 0 1 1 0 95 0 0 0 38 77 9 1 4 4 5 97 6 1 5 5 39 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 2 0 3 4 2 3 103 10 1 8 8 7 97 0 7 7 46 77 0 1 1 0 95 0 0 0 38 77 9 1 4 4 5 95 0 5 5 39 77 9 1 4 4 6 97 0 6 6 47 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 3 4 2 3 103 10 1 8 8 7 97 0 7 7 46 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 77 0 9 9 6 97 0 6 6 47 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
30 29 40 38 29 48 30 48 40 35 17 17 17 17 17 16 11 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1134;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(933,250,o),
(933,276,qs),
(933,333,o),
(901,428,o),
(840,497,o),
(749,536,o),
(690,536,qs),
(631,536,o),
(533,491,o),
(499,449,q),
(463,495,o),
(360,536,o),
(299,536,qs),
(236,536,o),
(140,496,o),
(75,424,o),
(42,324,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(360,-7,o),
(460,32,o),
(495,74,q),
(530,33,o),
(634,-7,o),
(694,-7,qs),
(733,-7,o),
(807,10,o),
(868,46,o),
(913,104,o),
(923,145,q),
(806,145,l),
(792,111,o),
(731,87,o),
(701,87,qs),
(633,87,o),
(558,163,o),
(553,225,q),
(930,225,l)
);
},
{
closed = 1;
nodes = (
(205,119,o),
(170,166,o),
(154,228,o),
(154,263,qs),
(154,298,o),
(170,360,o),
(205,407,o),
(260,434,o),
(299,434,qs),
(338,434,o),
(393,407,o),
(429,361,o),
(445,299,o),
(445,263,qs),
(445,228,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(260,92,o)
);
},
{
closed = 1;
nodes = (
(562,368,o),
(632,437,o),
(691,437,qs),
(750,437,o),
(820,370,o),
(822,311,q),
(555,311,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
31 1 8 4 15 1 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 6 0 6 1 0 128 13 1 10 11 1 6 1 10 6 103 9 1 8 8 4 97 5 1 4 4 49 77 12 7 2 0 0 2 97 3 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 1 6 7 6 1 7 128 13 1 10 11 1 6 1 10 6 103 9 1 8 8 4 97 5 1 4 4 49 77 12 1 7 7 2 97 3 1 2 2 47 77 0 0 0 2 97 3 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 31 values pushed */
62 62 43 42 0 0 62 68 62 68 66 64 53 51 42 61 43 61 0 41 0 41 36 40 36 36 18 34 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 975;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(5,503,l),
(82,503,l),
(82,0,l),
(198,0,l),
(198,288,l),
(544,288,l),
(544,0,l),
(660,0,l),
(660,503,l),
(738,503,l),
(738,595,l),
(660,595,l),
(660,707,l),
(544,707,l),
(544,595,l),
(198,595,l),
(198,707,l),
(82,707,l),
(82,595,l),
(5,595,l)
);
},
{
closed = 1;
nodes = (
(198,392,l),
(198,503,l),
(544,503,l),
(544,392,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
12 9 3 3 1 10 8 2 4 11 1 4 103 0 11 0 6 5 11 6 103 2 1 0 0 38 77 7 1 5 5 39 5 78 0 0 23 22 21 20 0 19 0 19 17 17 17 17 17 17 17 17 17 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,561,l),
(62,561,l),
(62,0,l),
(176,0,l),
(176,260,ls),
(176,290,o),
(191,353,o),
(224,404,o),
(278,436,o),
(314,437,qs),
(348,437,o),
(396,410,o),
(422,365,o),
(431,305,o),
(431,273,qs),
(431,0,l),
(545,0,l),
(545,291,ls),
(545,342,o),
(525,432,o),
(477,499,o),
(399,538,o),
(342,538,qs),
(292,538,o),
(204,496,o),
(176,454,q),
(176,561,l),
(275,561,l),
(275,643,l),
(176,643,l),
(176,707,l),
(62,707,l),
(62,643,l),
(-11,643,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
7 1 5 3 1 76 9 8 2 1 7 1 2 3 1 2 103 0 0 0 38 77 0 5 5 3 97 0 3 3 49 77 6 1 4 4 39 4 78 0 0 0 33 0 33 17 21 37 21 35 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,529,l),
(550,0,l),
(560,0,l),
(560,-24,ls),
(560,-65,o),
(530,-112,o),
(486,-112,qs),
(439,-112,l),
(439,-211,l),
(507,-211,ls),
(596,-211,o),
(674,-127,o),
(674,-37,qs),
(674,232,l),
(674,707,l),
(559,707,l),
(559,176,l),
(207,707,l),
(82,707,l),
(82,0,l),
(196,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 3 2 4 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
1 1 0 0 38 77 6 5 2 4 4 39 77 0 3 3 2 98 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 0 2 3 2 102 1 1 0 0 38 77 6 5 2 4 4 39 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 20 0 20 19 33 36 18 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,251,ls),
(176,283,o),
(190,348,o),
(222,401,o),
(274,434,o),
(312,434,qs),
(350,434,o),
(397,407,o),
(422,362,o),
(431,304,o),
(431,272,qs),
(431,-24,ls),
(431,-65,o),
(401,-112,o),
(357,-112,qs),
(310,-112,l),
(310,-211,l),
(378,-211,ls),
(469,-211,o),
(545,-127,o),
(545,-37,qs),
(545,289,ls),
(545,340,o),
(524,430,o),
(477,497,o),
(399,536,o),
(342,536,qs),
(292,536,o),
(206,495,o),
(177,454,q),
(171,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 4 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 1 1 0 0 41 77 6 1 5 5 39 77 0 3 3 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 0 2 3 2 101 0 4 4 0 97 1 1 0 0 41 77 6 1 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 3 0 2 3 2 101 0 0 0 41 77 0 4 4 1 97 0 1 1 49 77 6 1 5 5 39 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 33 0 33 39 33 39 35 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = eng;
unicode = 331;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-27,315,l),
(23,235,l),
(82,271,l),
(82,0,l),
(565,0,l),
(565,103,l),
(197,103,l),
(197,344,l),
(327,426,l),
(277,506,l),
(197,455,l),
(197,707,l),
(82,707,l),
(82,383,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
13 12 11 10 5 4 3 2 8 1 0 1 76 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 17 21 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,707,l),
(62,707,l),
(62,371,l),
(-52,300,l),
(-2,219,l),
(62,259,l),
(62,0,l),
(176,0,l),
(176,331,l),
(302,411,l),
(252,491,l),
(176,443,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
11 8 7 6 5 2 1 7 0 1 1 76 0 1 1 38 77 0 0 0 39 0 78 21 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(177,809,l),
(515,809,l),
(515,902,l),
(177,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
9 1 4 2 1 76 9 1 6 0 5 2 6 5 103 8 1 4 0 0 1 4 0 104 0 2 2 38 77 7 3 2 1 1 39 1 78 11 11 8 8 0 0 11 14 11 14 13 12 8 10 8 10 0 7 0 7 17 17 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(119,629,l),
(457,629,l),
(457,722,l),
(119,722,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 3 2 1 2 3 1 128 0 1 0 6 7 1 6 103 0 8 8 9 95 10 1 9 9 38 77 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 3 2 1 2 3 1 128 10 1 9 0 8 4 9 8 103 0 1 0 6 7 1 6 103 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
48 48 48 51 48 51 21 37 33 22 36 18 34 40 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(684,0,l)
);
},
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(169,882,o),
(197,826,o),
(245,791,o),
(309,775,o),
(346,775,qs),
(383,775,o),
(447,791,o),
(496,827,o),
(525,883,o),
(526,923,q),
(432,923,l),
(430,885,o),
(382,855,o),
(347,855,qs),
(312,855,o),
(264,885,o),
(262,923,q),
(168,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
9 1 4 2 1 76 11 8 2 6 5 6 133 0 5 0 7 2 5 7 105 10 1 4 0 0 1 4 0 104 0 2 2 38 77 9 3 2 1 1 39 1 78 11 11 8 8 0 0 11 28 11 28 24 22 18 17 15 13 8 10 8 10 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(111,702,o),
(139,646,o),
(187,611,o),
(251,595,o),
(288,595,qs),
(325,595,o),
(389,611,o),
(438,647,o),
(467,703,o),
(468,743,q),
(374,743,l),
(372,705,o),
(324,675,o),
(289,675,qs),
(254,675,o),
(206,705,o),
(204,743,q),
(110,743,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 8 0 10 4 8 10 105 12 11 2 9 0 3 1 9 3 103 0 1 0 6 7 1 6 104 0 2 2 4 97 0 4 4 49 77 0 7 7 0 97 5 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 8 0 10 4 8 10 105 12 11 2 9 0 3 1 9 3 103 0 1 0 6 7 1 6 104 0 2 2 4 97 0 4 4 49 77 0 5 5 39 77 0 7 7 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
48 48 48 65 48 65 61 59 55 54 38 37 33 22 36 18 34 40 34 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(345,593,l),
(469,247,l),
(220,247,l)
);
},
{
closed = 1;
nodes = (
(551,-13,o),
(534,-33,qs),
(508,-65,o),
(508,-107,qs),
(508,-136,o),
(528,-179,o),
(562,-207,o),
(608,-222,o),
(635,-222,qs),
(655,-222,o),
(692,-214,o),
(711,-204,q),
(696,-135,l),
(675,-146,o),
(651,-146,qs),
(625,-146,o),
(591,-117,o),
(592,-90,qs),
(592,-74,o),
(606,-46,o),
(628,-22,o),
(642,-12,qs),
(652,-5,o),
(661,0,q),
(684,0,l),
(417,707,l),
(273,707,l),
(5,0,l),
(131,0,l),
(184,143,l),
(505,143,l),
(557,0,l),
(571,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 0 3 22 1 5 2 23 1 6 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
8 1 0 0 1 2 0 1 104 0 3 3 38 77 9 7 4 3 2 2 39 77 0 5 5 6 97 0 6 6 43 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
8 1 0 0 1 2 0 1 104 0 5 0 6 5 6 101 0 3 3 38 77 9 7 4 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
3 3 0 0 3 35 3 35 27 25 21 19 11 10 9 8 7 6 5 4 0 2 0 2 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 689;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,137,o),
(337,100,o),
(284,84,o),
(253,84,qs),
(213,84,o),
(158,123,o),
(158,161,qs),
(158,192,o),
(199,225,o),
(257,234,o),
(286,234,qs),
(396,234,l),
(396,194,o)
);
},
{
closed = 1;
nodes = (
(409,0,l),
(389,-13,o),
(372,-33,qs),
(346,-65,o),
(346,-107,qs),
(346,-136,o),
(366,-179,o),
(400,-207,o),
(446,-222,o),
(473,-222,qs),
(493,-222,o),
(530,-214,o),
(549,-204,q),
(534,-135,l),
(513,-146,o),
(489,-146,qs),
(463,-146,o),
(429,-117,o),
(430,-90,qs),
(430,-74,o),
(444,-46,o),
(467,-22,o),
(480,-12,qs),
(489,-5,o),
(496,0,q),
(506,0,l),
(506,284,ls),
(506,343,o),
(482,443,o),
(447,479,qs),
(416,510,o),
(332,536,o),
(283,536,qs),
(245,536,o),
(170,520,o),
(109,482,o),
(66,424,o),
(60,382,q),
(177,382,l),
(186,412,o),
(241,438,o),
(279,438,qs),
(344,437,o),
(396,373,o),
(396,315,q),
(261,315,ls),
(217,315,o),
(137,296,o),
(78,258,o),
(44,197,o),
(44,154,qs),
(44,115,o),
(74,54,o),
(126,13,o),
(195,-7,o),
(237,-7,qs),
(290,-7,o),
(376,28,o),
(402,65,q),
(407,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
71 1 2 1 58 1 8 2 59 1 9 8 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
58 1 8 2 59 1 9 8 2 76 71 1 7 1 75 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 77 0 8 8 9 97 0 9 9 43 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 8 0 9 8 9 101 0 4 4 6 97 0 6 6 49 77 0 1 1 2 97 7 1 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 5 4 3 4 5 3 128 0 3 0 0 1 3 0 103 0 8 0 9 8 9 101 0 4 4 6 97 0 6 6 49 77 0 7 7 39 77 0 1 1 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
63 61 40 22 36 18 34 40 38 37 32 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,551,o),
(549,499,q),
(663,499,l),
(647,606,o),
(495,716,o),
(378,716,qs),
(295,716,o),
(170,661,o),
(86,564,o),
(43,431,o),
(43,354,qs),
(43,275,o),
(85,143,o),
(169,47,o),
(294,-7,o),
(377,-7,qs),
(434,-7,o),
(534,22,o),
(610,77,o),
(661,157,o),
(669,208,q),
(553,208,l),
(541,157,o),
(448,97,o),
(379,97,qs),
(323,97,o),
(241,139,o),
(188,210,o),
(162,304,o),
(162,356,qs),
(162,407,o),
(187,500,o),
(239,570,o),
(320,612,o),
(376,612,qs),
(446,612,o)
);
},
{
closed = 1;
nodes = (
(392,786,l),
(509,949,l),
(394,949,l),
(297,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 6 4 6 7 4 128 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 0 6 6 44 77 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 6 7 6 133 0 7 4 7 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 39 38 37 36 33 32 30 28 20 18 14 13 11 9 0 35 1 35 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,12,o),
(475,54,o),
(518,120,o),
(526,165,q),
(408,165,l),
(400,132,o),
(341,92,o),
(296,92,qs),
(258,92,o),
(204,119,o),
(170,164,o),
(154,226,o),
(154,261,qs),
(154,295,o),
(169,358,o),
(203,406,o),
(257,434,o),
(295,434,qs),
(338,434,o),
(398,398,o),
(407,363,q),
(524,363,l),
(508,453,o),
(388,536,o),
(297,536,qs),
(235,536,o),
(141,494,o),
(75,422,o),
(42,322,o),
(42,262,qs),
(42,202,o),
(73,103,o),
(136,32,o),
(230,-7,o),
(294,-7,qs),
(337,-7,o)
);
},
{
closed = 1;
nodes = (
(326,606,l),
(443,769,l),
(328,769,l),
(231,606,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 6 7 6 133 0 7 1 7 133 0 2 3 5 3 2 114 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 6 7 6 133 0 7 1 7 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 39 38 37 36 31 30 28 26 18 16 14 13 11 9 0 35 1 35 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Ccircumflex;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,551,o),
(549,499,q),
(663,499,l),
(647,606,o),
(495,716,o),
(378,716,qs),
(295,716,o),
(170,661,o),
(86,564,o),
(43,431,o),
(43,354,qs),
(43,275,o),
(85,143,o),
(169,47,o),
(294,-7,o),
(377,-7,qs),
(434,-7,o),
(534,22,o),
(610,77,o),
(661,157,o),
(669,208,q),
(553,208,l),
(541,157,o),
(448,97,o),
(379,97,qs),
(323,97,o),
(241,139,o),
(188,210,o),
(162,304,o),
(162,356,qs),
(162,407,o),
(187,500,o),
(239,570,o),
(320,612,o),
(376,612,qs),
(446,612,o)
);
},
{
closed = 1;
nodes = (
(343,949,l),
(202,779,l),
(307,779,l),
(380,872,l),
(454,779,l),
(560,779,l),
(417,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
38 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
7 1 6 8 4 8 6 4 128 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 0 8 8 44 77 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 42 41 40 39 37 36 33 32 30 28 20 18 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = ccircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,12,o),
(475,54,o),
(518,120,o),
(526,165,q),
(408,165,l),
(400,132,o),
(341,92,o),
(296,92,qs),
(258,92,o),
(204,119,o),
(170,164,o),
(154,226,o),
(154,261,qs),
(154,295,o),
(169,358,o),
(203,406,o),
(257,434,o),
(295,434,qs),
(338,434,o),
(398,398,o),
(407,363,q),
(524,363,l),
(508,453,o),
(388,536,o),
(297,536,qs),
(235,536,o),
(141,494,o),
(75,422,o),
(42,322,o),
(42,262,qs),
(42,202,o),
(73,103,o),
(136,32,o),
(230,-7,o),
(294,-7,qs),
(337,-7,o)
);
},
{
closed = 1;
nodes = (
(258,769,l),
(117,599,l),
(222,599,l),
(295,692,l),
(369,599,l),
(475,599,l),
(332,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
38 1 6 8 1 76 0 8 6 8 133 7 1 6 1 6 133 0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 47 0 78 1 0 42 41 40 39 37 36 31 30 28 26 18 16 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = Cdotaccent;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,551,o),
(549,499,q),
(663,499,l),
(647,606,o),
(495,716,o),
(378,716,qs),
(295,716,o),
(170,661,o),
(86,564,o),
(43,431,o),
(43,354,qs),
(43,275,o),
(85,143,o),
(169,47,o),
(294,-7,o),
(377,-7,qs),
(434,-7,o),
(534,22,o),
(610,77,o),
(661,157,o),
(669,208,q),
(553,208,l),
(541,157,o),
(448,97,o),
(379,97,qs),
(323,97,o),
(241,139,o),
(188,210,o),
(162,304,o),
(162,356,qs),
(162,407,o),
(187,500,o),
(239,570,o),
(320,612,o),
(376,612,qs),
(446,612,o)
);
},
{
closed = 1;
nodes = (
(307,876,o),
(307,846,qs),
(307,814,o),
(345,777,o),
(376,777,qs),
(407,777,o),
(447,815,o),
(447,846,qs),
(447,875,o),
(406,915,o),
(376,914,qs),
(346,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
0 5 0 2 0 5 2 128 0 2 1 0 2 1 126 9 1 6 0 7 4 6 7 105 8 1 0 0 4 97 0 4 4 46 77 0 1 1 3 97 0 3 3 47 3 78 37 36 1 0 43 41 36 47 37 47 33 32 30 28 20 18 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,12,o),
(475,54,o),
(518,120,o),
(526,165,q),
(408,165,l),
(400,132,o),
(341,92,o),
(296,92,qs),
(258,92,o),
(204,119,o),
(170,164,o),
(154,226,o),
(154,261,qs),
(154,295,o),
(169,358,o),
(203,406,o),
(257,434,o),
(295,434,qs),
(338,434,o),
(398,398,o),
(407,363,q),
(524,363,l),
(508,453,o),
(388,536,o),
(297,536,qs),
(235,536,o),
(141,494,o),
(75,422,o),
(42,322,o),
(42,262,qs),
(42,202,o),
(73,103,o),
(136,32,o),
(230,-7,o),
(294,-7,qs),
(337,-7,o)
);
},
{
closed = 1;
nodes = (
(228,696,o),
(228,666,qs),
(228,634,o),
(266,597,o),
(297,597,qs),
(328,597,o),
(368,635,o),
(368,666,qs),
(368,695,o),
(327,735,o),
(297,734,qs),
(267,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 7 7 6 97 9 1 6 6 48 77 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 7 7 6 97 9 1 6 6 46 77 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 9 1 6 0 7 1 6 7 105 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 8 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
37 36 1 0 43 41 36 47 37 47 31 30 28 26 18 16 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,551,o),
(549,499,q),
(663,499,l),
(647,606,o),
(495,716,o),
(378,716,qs),
(295,716,o),
(170,661,o),
(86,564,o),
(43,431,o),
(43,354,qs),
(43,275,o),
(85,143,o),
(169,47,o),
(294,-7,o),
(377,-7,qs),
(434,-7,o),
(534,22,o),
(610,77,o),
(661,157,o),
(669,208,q),
(553,208,l),
(541,157,o),
(448,97,o),
(379,97,qs),
(323,97,o),
(241,139,o),
(188,210,o),
(162,304,o),
(162,356,qs),
(162,407,o),
(187,500,o),
(239,570,o),
(320,612,o),
(376,612,qs),
(446,612,o)
);
},
{
closed = 1;
nodes = (
(411,779,l),
(552,949,l),
(447,949,l),
(374,856,l),
(300,949,l),
(194,949,l),
(336,779,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
38 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 6 4 6 8 4 128 0 2 5 1 5 2 1 128 9 1 0 0 4 97 0 4 4 46 77 0 5 5 6 95 7 1 6 6 44 77 0 1 1 3 98 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 6 4 6 8 4 128 0 2 5 1 5 2 1 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 46 77 0 1 1 3 98 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 42 41 40 39 37 36 33 32 30 28 20 18 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,12,o),
(475,54,o),
(518,120,o),
(526,165,q),
(408,165,l),
(400,132,o),
(341,92,o),
(296,92,qs),
(258,92,o),
(204,119,o),
(170,164,o),
(154,226,o),
(154,261,qs),
(154,295,o),
(169,358,o),
(203,406,o),
(257,434,o),
(295,434,qs),
(338,434,o),
(398,398,o),
(407,363,q),
(524,363,l),
(508,453,o),
(388,536,o),
(297,536,qs),
(235,536,o),
(141,494,o),
(75,422,o),
(42,322,o),
(42,262,qs),
(42,202,o),
(73,103,o),
(136,32,o),
(230,-7,o),
(294,-7,qs),
(337,-7,o)
);
},
{
closed = 1;
nodes = (
(334,599,l),
(475,769,l),
(370,769,l),
(297,676,l),
(223,769,l),
(117,769,l),
(259,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
38 1 8 6 1 76 0 8 6 1 6 8 1 128 0 5 2 4 2 5 4 128 7 1 6 0 2 5 6 2 103 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 9 1 0 0 47 0 78 1 0 42 41 40 39 37 36 31 30 28 26 18 16 14 13 11 9 0 35 1 35 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 562;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,0,ls),
(426,0,o),
(553,48,o),
(638,140,o),
(682,270,o),
(682,353,qs),
(682,435,o),
(638,567,o),
(551,658,o),
(422,707,o),
(338,707,qs),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(448,603,o),
(563,471,o),
(563,353,qs),
(563,296,o),
(536,204,o),
(481,139,o),
(397,103,o),
(339,103,qs),
(198,103,l),
(198,603,l),
(338,603,ls)
);
},
{
closed = 1;
nodes = (
(365,779,l),
(506,949,l),
(401,949,l),
(328,856,l),
(254,949,l),
(148,949,l),
(290,779,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
26 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 4 0 4 6 0 128 5 1 4 4 44 77 7 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 4 133 0 6 0 6 133 7 1 3 3 0 95 0 0 0 38 77 0 2 2 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
13 13 30 29 28 27 25 24 13 23 13 22 34 40 32 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(155,809,l),
(493,809,l),
(493,902,l),
(155,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 1 7 0 6 0 7 6 103 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 15 12 15 18 17 17 17 17 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(126,629,l),
(464,629,l),
(464,722,l),
(126,722,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 7 7 8 95 11 1 8 8 38 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 1 4 0 4 1 0 128 11 1 8 0 7 3 8 7 103 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
41 41 32 32 0 0 41 44 41 44 43 42 32 40 32 40 36 34 0 31 0 31 40 36 18 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(155,882,o),
(183,826,o),
(231,791,o),
(295,775,o),
(332,775,qs),
(369,775,o),
(433,791,o),
(482,827,o),
(511,883,o),
(512,923,q),
(418,923,l),
(416,885,o),
(368,855,o),
(333,855,qs),
(298,855,o),
(250,885,o),
(248,923,q),
(154,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
10 9 2 7 6 7 133 0 6 0 8 0 6 8 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 12 12 12 29 12 29 36 18 35 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(121,702,o),
(149,646,o),
(197,611,o),
(261,595,o),
(298,595,qs),
(335,595,o),
(399,611,o),
(448,647,o),
(477,703,o),
(478,743,q),
(384,743,l),
(382,705,o),
(334,675,o),
(299,675,qs),
(264,675,o),
(216,705,o),
(214,743,q),
(120,743,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 87 values pushed */
13 10 2 8 7 8 133 0 1 4 0 4 1 0 128 0 7 0 9 3 7 9 105 12 1 6 11 1 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 41 41 32 32 0 0 41 58 41 58 54 52 48 47 45 43 32 40 32 40 36 34 0 31 0 31 40 36 18 36 14 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(263,876,o),
(263,846,qs),
(263,814,o),
(301,777,o),
(332,777,qs),
(363,777,o),
(403,815,o),
(403,846,qs),
(403,875,o),
(362,915,o),
(332,914,qs),
(302,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
8 1 6 0 7 0 6 7 105 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 13 12 19 17 12 23 13 23 17 17 17 17 17 16 9 8 28 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(226,696,o),
(226,666,qs),
(226,634,o),
(264,597,o),
(295,597,qs),
(326,597,o),
(366,635,o),
(366,666,qs),
(366,695,o),
(325,735,o),
(295,734,qs),
(265,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 97 11 1 7 7 48 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 4 0 4 1 0 128 10 1 6 9 1 4 1 6 4 103 0 8 8 7 97 11 1 7 7 46 77 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 1 4 0 4 1 0 128 11 1 7 0 8 3 7 8 105 10 1 6 9 1 4 1 6 4 103 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
42 41 32 32 0 0 48 46 41 52 42 52 32 40 32 40 36 34 0 31 0 31 40 36 18 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,0,l),
(275,-13,o),
(258,-33,qs),
(232,-65,o),
(232,-107,qs),
(232,-136,o),
(252,-179,o),
(286,-207,o),
(332,-222,o),
(359,-222,qs),
(379,-222,o),
(416,-214,o),
(435,-204,q),
(420,-135,l),
(399,-146,o),
(375,-146,qs),
(349,-146,o),
(315,-117,o),
(316,-90,qs),
(316,-74,o),
(330,-46,o),
(353,-22,o),
(366,-12,qs),
(376,-5,o),
(385,0,q),
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 6 5 23 1 7 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 8 1 5 5 39 77 0 6 6 7 97 0 7 7 43 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 0 3 4 2 3 103 0 6 0 7 6 7 101 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 8 1 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
24 36 40 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(184,12,qs),
(218,-1,o),
(260,-5,q),
(245,-17,o),
(231,-33,qs),
(205,-65,o),
(205,-107,qs),
(205,-136,o),
(225,-179,o),
(259,-207,o),
(305,-222,o),
(332,-222,qs),
(352,-222,o),
(389,-214,o),
(408,-204,q),
(393,-135,l),
(372,-146,o),
(348,-146,qs),
(322,-146,o),
(288,-117,o),
(289,-90,qs),
(289,-74,o),
(303,-46,o),
(324,-23,o),
(339,-12,qs),
(346,-7,o),
(353,-2,q),
(363,0,o),
(372,1,q),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
48 35 2 4 2 36 1 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 7 2 7 3 2 128 0 2 4 7 2 4 126 8 1 1 9 1 7 3 1 7 103 0 0 0 6 97 0 6 6 49 77 0 4 4 5 98 0 5 5 43 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 7 2 7 3 2 128 0 2 4 7 2 4 126 8 1 1 9 1 7 3 1 7 103 0 4 0 5 4 5 102 0 0 0 6 97 0 6 6 49 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
9 9 0 0 9 66 9 66 60 58 40 38 34 32 18 17 15 13 0 8 0 8 34 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,0,l),
(573,103,l),
(198,103,l),
(198,297,l),
(530,297,l),
(530,402,l),
(198,402,l),
(198,603,l),
(573,603,l),
(573,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(371,779,l),
(512,949,l),
(407,949,l),
(334,856,l),
(260,949,l),
(154,949,l),
(296,779,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 8 6 0 6 8 0 128 0 2 0 3 4 2 3 103 7 1 6 6 44 77 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
7 1 6 8 6 133 0 8 0 8 133 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 38 77 0 4 4 5 95 0 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 18 17 17 17 17 17 17 16 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,250,o),
(535,276,qs),
(535,331,o),
(505,425,o),
(444,495,o),
(354,536,o),
(292,536,qs),
(233,536,o),
(141,495,o),
(76,423,o),
(42,324,o),
(42,264,qs),
(42,202,o),
(73,103,o),
(137,31,o),
(232,-7,o),
(295,-7,qs),
(336,-7,o),
(409,10,o),
(470,47,o),
(515,105,o),
(525,145,q),
(408,145,l),
(394,113,o),
(334,87,o),
(298,87,qs),
(264,87,o),
(213,109,o),
(178,146,o),
(158,196,o),
(156,225,q),
(532,225,l)
);
},
{
closed = 1;
nodes = (
(160,337,o),
(180,383,o),
(213,417,o),
(261,437,o),
(293,437,qs),
(350,437,o),
(422,371,o),
(424,311,q),
(157,311,l)
);
},
{
closed = 1;
nodes = (
(334,599,l),
(475,769,l),
(370,769,l),
(297,676,l),
(223,769,l),
(117,769,l),
(259,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
43 1 9 7 1 76 8 1 7 9 7 133 0 9 3 9 133 0 1 4 0 4 1 0 128 11 1 6 10 1 4 1 6 4 104 0 5 5 3 97 0 3 3 49 77 0 0 0 2 97 0 2 2 47 2 78 32 32 0 0 47 46 45 44 42 41 32 40 32 40 36 34 0 31 0 31 40 36 18 36 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gcircumflex;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(537,552,o),
(550,499,q),
(667,499,l),
(659,551,o),
(609,632,o),
(533,687,o),
(434,716,o),
(376,716,qs),
(293,716,o),
(168,662,o),
(85,565,o),
(43,431,o),
(43,352,qs),
(43,274,o),
(85,142,o),
(169,46,o),
(294,-7,o),
(377,-7,qs),
(441,-7,o),
(540,27,o),
(612,85,o),
(658,164,o),
(670,209,qs),
(680,251,o),
(683,328,o),
(683,366,q),
(365,366,l),
(365,268,l),
(572,268,l),
(570,192,o),
(469,97,o),
(378,97,qs),
(322,97,o),
(240,138,o),
(187,209,o),
(162,302,o),
(162,354,qs),
(162,406,o),
(186,499,o),
(237,569,o),
(317,611,o),
(373,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(339,949,l),
(198,779,l),
(303,779,l),
(376,872,l),
(450,779,l),
(556,779,l),
(413,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
45 1 7 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
8 1 7 9 5 9 7 5 128 0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 0 9 9 44 77 10 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 9 7 9 133 8 1 7 5 7 133 0 6 0 3 0 6 3 128 0 3 0 2 1 3 2 103 10 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 49 48 47 46 44 43 40 39 35 33 25 23 16 15 14 13 11 9 0 42 1 42 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = gcircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,527,l),
(451,464,l),
(421,500,o),
(340,535,o),
(288,536,qs),
(227,535,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,259,qs),
(42,205,o),
(70,109,o),
(128,35,o),
(217,-8,o),
(285,-7,qs),
(344,-8,o),
(423,28,o),
(448,67,q),
(448,23,o),
(440,-56,o),
(410,-117,o),
(353,-152,o),
(305,-152,qs),
(263,-152,o),
(194,-116,o),
(186,-80,q),
(67,-80,l),
(74,-126,o),
(118,-191,o),
(181,-233,o),
(260,-253,o),
(304,-253,qs),
(398,-253,o),
(524,-169,o),
(548,-84,qs),
(560,-39,o),
(562,49,o),
(562,93,qs),
(562,527,l)
);
},
{
closed = 1;
nodes = (
(394,406,o),
(431,361,o),
(449,299,o),
(449,265,qs),
(449,232,o),
(431,170,o),
(395,121,o),
(340,91,o),
(301,91,qs),
(263,91,o),
(208,118,o),
(172,164,o),
(155,225,o),
(155,261,qs),
(155,297,o),
(172,360,o),
(207,406,o),
(262,434,o),
(300,434,qs),
(338,434,o)
);
},
{
closed = 1;
nodes = (
(266,769,l),
(125,599,l),
(230,599,l),
(303,692,l),
(377,599,l),
(483,599,l),
(340,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
61 1 8 10 36 1 6 4 20 1 3 7 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
61 1 8 10 36 1 6 5 20 1 3 7 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 10 8 10 133 9 1 8 4 8 133 0 1 3 2 3 1 2 128 11 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 10 8 10 133 9 1 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 11 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 10 8 10 133 9 1 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 5 5 41 77 11 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
40 39 65 64 63 62 60 59 50 48 39 58 40 58 19 40 38 34 20 37 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = Gbreve;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(537,552,o),
(550,499,q),
(667,499,l),
(659,551,o),
(609,632,o),
(533,687,o),
(434,716,o),
(376,716,qs),
(293,716,o),
(168,662,o),
(85,565,o),
(43,431,o),
(43,352,qs),
(43,274,o),
(85,142,o),
(169,46,o),
(294,-7,o),
(377,-7,qs),
(441,-7,o),
(540,27,o),
(612,85,o),
(658,164,o),
(670,209,qs),
(680,251,o),
(683,328,o),
(683,366,q),
(365,366,l),
(365,268,l),
(572,268,l),
(570,192,o),
(469,97,o),
(378,97,qs),
(322,97,o),
(240,138,o),
(187,209,o),
(162,302,o),
(162,354,qs),
(162,406,o),
(186,499,o),
(237,569,o),
(317,611,o),
(373,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(200,882,o),
(228,826,o),
(276,791,o),
(340,775,o),
(377,775,qs),
(414,775,o),
(478,791,o),
(527,827,o),
(556,883,o),
(557,923,q),
(463,923,l),
(461,885,o),
(413,855,o),
(378,855,qs),
(343,855,o),
(295,885,o),
(293,923,q),
(199,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
0 7 0 9 5 7 9 105 12 10 2 8 0 6 3 8 6 103 0 3 0 2 1 3 2 103 11 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 43 43 1 0 43 60 43 60 56 54 50 49 47 45 40 39 35 33 25 23 16 15 14 13 11 9 0 42 1 42 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,527,l),
(451,464,l),
(421,500,o),
(340,535,o),
(288,536,qs),
(227,535,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,259,qs),
(42,205,o),
(70,109,o),
(128,35,o),
(217,-8,o),
(285,-7,qs),
(344,-8,o),
(423,28,o),
(448,67,q),
(448,23,o),
(440,-56,o),
(410,-117,o),
(353,-152,o),
(305,-152,qs),
(263,-152,o),
(194,-116,o),
(186,-80,q),
(67,-80,l),
(74,-126,o),
(118,-191,o),
(181,-233,o),
(260,-253,o),
(304,-253,qs),
(398,-253,o),
(524,-169,o),
(548,-84,qs),
(560,-39,o),
(562,49,o),
(562,93,qs),
(562,527,l)
);
},
{
closed = 1;
nodes = (
(394,406,o),
(431,361,o),
(449,299,o),
(449,265,qs),
(449,232,o),
(431,170,o),
(395,121,o),
(340,91,o),
(301,91,qs),
(263,91,o),
(208,118,o),
(172,164,o),
(155,225,o),
(155,261,qs),
(155,297,o),
(172,360,o),
(207,406,o),
(262,434,o),
(300,434,qs),
(338,434,o)
);
},
{
closed = 1;
nodes = (
(123,702,o),
(151,646,o),
(199,611,o),
(263,595,o),
(300,595,qs),
(337,595,o),
(401,611,o),
(450,647,o),
(479,703,o),
(480,743,q),
(386,743,l),
(384,705,o),
(336,675,o),
(301,675,qs),
(266,675,o),
(218,705,o),
(216,743,q),
(122,743,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 4 20 1 3 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 5 20 1 3 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
13 11 2 9 8 9 133 0 1 3 2 3 1 2 128 0 8 0 10 4 8 10 105 12 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 77 0 2 2 0 98 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
13 11 2 9 8 9 133 0 1 3 2 3 1 2 128 0 8 0 10 4 8 10 105 0 2 0 0 2 0 102 12 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
13 11 2 9 8 9 133 0 1 3 2 3 1 2 128 0 8 0 10 4 8 10 105 0 2 0 0 2 0 102 0 5 5 41 77 12 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
59 59 40 39 59 76 59 76 72 70 66 65 63 61 50 48 39 58 40 58 19 40 38 34 20 37 14 8 28 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(537,552,o),
(550,499,q),
(667,499,l),
(659,551,o),
(609,632,o),
(533,687,o),
(434,716,o),
(376,716,qs),
(293,716,o),
(168,662,o),
(85,565,o),
(43,431,o),
(43,352,qs),
(43,274,o),
(85,142,o),
(169,46,o),
(294,-7,o),
(377,-7,qs),
(441,-7,o),
(540,27,o),
(612,85,o),
(658,164,o),
(670,209,qs),
(680,251,o),
(683,328,o),
(683,366,q),
(365,366,l),
(365,268,l),
(572,268,l),
(570,192,o),
(469,97,o),
(378,97,qs),
(322,97,o),
(240,138,o),
(187,209,o),
(162,302,o),
(162,354,qs),
(162,406,o),
(186,499,o),
(237,569,o),
(317,611,o),
(373,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(305,876,o),
(305,846,qs),
(305,814,o),
(343,777,o),
(374,777,qs),
(405,777,o),
(445,815,o),
(445,846,qs),
(445,875,o),
(404,915,o),
(374,914,qs),
(344,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
0 6 0 3 0 6 3 128 10 1 7 0 8 5 7 8 105 0 3 0 2 1 3 2 103 9 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 44 43 1 0 50 48 43 54 44 54 40 39 35 33 25 23 16 15 14 13 11 9 0 42 1 42 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,527,l),
(451,464,l),
(421,500,o),
(340,535,o),
(288,536,qs),
(227,535,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,259,qs),
(42,205,o),
(70,109,o),
(128,35,o),
(217,-8,o),
(285,-7,qs),
(344,-8,o),
(423,28,o),
(448,67,q),
(448,23,o),
(440,-56,o),
(410,-117,o),
(353,-152,o),
(305,-152,qs),
(263,-152,o),
(194,-116,o),
(186,-80,q),
(67,-80,l),
(74,-126,o),
(118,-191,o),
(181,-233,o),
(260,-253,o),
(304,-253,qs),
(398,-253,o),
(524,-169,o),
(548,-84,qs),
(560,-39,o),
(562,49,o),
(562,93,qs),
(562,527,l)
);
},
{
closed = 1;
nodes = (
(394,406,o),
(431,361,o),
(449,299,o),
(449,265,qs),
(449,232,o),
(431,170,o),
(395,121,o),
(340,91,o),
(301,91,qs),
(263,91,o),
(208,118,o),
(172,164,o),
(155,225,o),
(155,261,qs),
(155,297,o),
(172,360,o),
(207,406,o),
(262,434,o),
(300,434,qs),
(338,434,o)
);
},
{
closed = 1;
nodes = (
(221,696,o),
(221,666,qs),
(221,634,o),
(259,597,o),
(290,597,qs),
(321,597,o),
(361,635,o),
(361,666,qs),
(361,695,o),
(320,735,o),
(290,734,qs),
(260,734,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 4 20 1 3 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
36 1 6 5 20 1 3 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 1 3 2 3 1 2 128 0 9 9 8 97 11 1 8 8 48 77 10 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 9 9 8 97 11 1 8 8 48 77 10 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 9 9 8 97 11 1 8 8 46 77 10 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 3 2 3 1 2 128 11 1 8 0 9 4 8 9 105 0 2 0 0 2 0 101 10 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 1 3 2 3 1 2 128 11 1 8 0 9 4 8 9 105 0 2 0 0 2 0 101 0 5 5 41 77 10 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
60 59 40 39 66 64 59 70 60 70 50 48 39 58 40 58 19 40 38 34 20 37 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,707,l),
(82,707,l),
(82,0,l),
(198,0,l),
(198,296,l),
(544,296,l),
(544,0,l),
(660,0,l),
(660,707,l),
(544,707,l),
(544,400,l),
(198,400,l)
);
},
{
closed = 1;
nodes = (
(335,949,l),
(194,779,l),
(299,779,l),
(372,872,l),
(446,779,l),
(552,779,l),
(409,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 6 8 0 8 6 0 128 9 1 5 0 2 1 5 2 104 0 8 8 44 77 4 1 0 0 38 77 3 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 8 6 8 133 7 1 6 0 6 133 9 1 5 0 2 1 5 2 104 4 1 0 0 38 77 3 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 18 17 16 15 13 12 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,258,ls),
(176,287,o),
(186,348,o),
(222,402,o),
(278,434,o),
(310,434,qs),
(347,434,o),
(395,409,o),
(421,364,o),
(431,305,o),
(431,271,qs),
(431,0,l),
(545,0,l),
(545,289,ls),
(545,343,o),
(524,433,o),
(475,498,o),
(398,536,o),
(342,536,qs),
(293,536,o),
(204,494,o),
(176,452,q),
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(276,939,l),
(135,769,l),
(240,769,l),
(313,862,l),
(387,769,l),
(493,769,l),
(350,939,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
28 1 5 7 3 1 3 1 2 76 0 7 5 7 133 6 1 5 0 5 133 0 0 0 38 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 0 0 32 31 30 29 27 26 0 25 0 25 37 21 35 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(47,798,o),
(48,821,o),
(53,842,o),
(66,856,o),
(77,856,qs),
(89,856,o),
(115,836,o),
(148,807,o),
(187,785,o),
(214,785,qs),
(263,785,o),
(314,846,o),
(318,894,qs),
(320,910,o),
(319,929,q),
(238,929,l),
(238,921,o),
(238,898,o),
(233,878,o),
(220,864,o),
(208,864,qs),
(196,864,o),
(170,886,o),
(138,913,o),
(100,935,o),
(75,935,qs),
(26,935,o),
(-25,879,o),
(-31,835,qs),
(-33,814,o),
(-33,801,o),
(-33,790,q),
(47,790,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
21 1 3 2 4 1 4 5 2 76 0 2 0 5 4 2 5 105 0 3 0 4 1 3 4 105 0 1 1 38 77 0 0 0 39 0 78 35 41 35 38 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
},
{
closed = 1;
nodes = (
(25,618,o),
(26,641,o),
(31,662,o),
(44,676,o),
(55,676,qs),
(67,676,o),
(93,656,o),
(126,627,o),
(165,605,o),
(192,605,qs),
(241,605,o),
(292,666,o),
(296,714,qs),
(298,730,o),
(297,749,q),
(216,749,l),
(216,741,o),
(216,718,o),
(211,698,o),
(198,684,o),
(186,684,qs),
(174,684,o),
(148,706,o),
(116,733,o),
(78,755,o),
(53,755,qs),
(4,755,o),
(-47,699,o),
(-53,655,qs),
(-55,634,o),
(-55,621,o),
(-55,610,q),
(25,610,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
21 1 3 2 4 1 4 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 2 97 0 2 2 48 77 0 4 4 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 5 4 2 5 105 0 4 4 3 97 0 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 2 0 5 4 2 5 105 0 3 0 4 1 3 4 105 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
35 41 35 38 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(-19,809,l),
(299,809,l),
(299,902,l),
(-19,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 38 77 0 0 0 39 0 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
},
{
closed = 1;
nodes = (
(-20,629,l),
(258,629,l),
(258,722,l),
(-20,722,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 3 95 4 1 3 3 38 77 0 1 1 41 77 0 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 41 77 0 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(-38,882,o),
(-10,826,o),
(38,791,o),
(102,775,o),
(139,775,qs),
(176,775,o),
(240,791,o),
(289,827,o),
(318,883,o),
(319,923,q),
(225,923,l),
(223,885,o),
(175,855,o),
(140,855,qs),
(105,855,o),
(57,885,o),
(55,923,q),
(-39,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 5 2 3 2 3 133 0 2 0 4 1 2 4 105 0 1 1 38 77 0 0 0 39 0 78 4 4 4 21 4 21 36 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,527,l),
(62,0,l),
(176,0,l),
(176,527,l)
);
},
{
closed = 1;
nodes = (
(-59,702,o),
(-31,646,o),
(17,611,o),
(81,595,o),
(118,595,qs),
(155,595,o),
(219,611,o),
(268,647,o),
(297,703,o),
(298,743,q),
(204,743,l),
(202,705,o),
(154,675,o),
(119,675,qs),
(84,675,o),
(36,705,o),
(34,743,q),
(-60,743,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 5 2 3 2 3 133 0 2 0 4 1 2 4 105 0 1 1 41 77 0 0 0 39 0 78 4 4 4 21 4 21 36 18 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(94,0,l),
(74,-13,o),
(57,-33,qs),
(31,-65,o),
(31,-107,qs),
(31,-136,o),
(51,-179,o),
(85,-207,o),
(131,-222,o),
(158,-222,qs),
(178,-222,o),
(215,-214,o),
(234,-204,q),
(219,-135,l),
(198,-146,o),
(174,-146,qs),
(148,-146,o),
(114,-117,o),
(115,-90,qs),
(115,-74,o),
(129,-46,o),
(152,-22,o),
(165,-12,qs),
(175,-5,o),
(184,0,q),
(198,0,l),
(198,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 1 0 13 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 4 4 38 77 3 1 0 0 39 77 0 1 1 2 97 0 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 1 2 101 0 4 4 38 77 3 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 24 36 40 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,708,o),
(54,675,qs),
(54,643,o),
(94,605,o),
(127,605,qs),
(158,605,o),
(199,643,o),
(199,675,qs),
(199,708,o),
(158,746,o),
(127,746,qs),
(94,746,o)
);
},
{
closed = 1;
nodes = (
(59,-13,o),
(42,-33,qs),
(16,-65,o),
(16,-107,qs),
(16,-136,o),
(36,-179,o),
(70,-207,o),
(116,-222,o),
(143,-222,qs),
(163,-222,o),
(200,-214,o),
(219,-204,q),
(204,-135,l),
(183,-146,o),
(159,-146,qs),
(133,-146,o),
(99,-117,o),
(100,-90,qs),
(100,-74,o),
(114,-46,o),
(137,-22,o),
(150,-12,qs),
(160,-5,o),
(169,0,q),
(183,0,l),
(183,527,l),
(69,527,l),
(69,0,l),
(79,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
27 1 4 3 28 1 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 97 7 1 0 0 48 77 0 2 2 41 77 8 6 2 3 3 39 77 0 4 4 5 97 0 5 5 43 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 0 5 4 5 101 0 1 1 0 97 7 1 0 0 48 77 0 2 2 41 77 8 6 2 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 1 0 0 1 2 0 1 105 0 4 0 5 4 5 101 0 2 2 41 77 8 6 2 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
12 12 1 0 12 40 12 40 32 30 26 24 16 15 14 13 7 5 0 11 1 11 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 253;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(70,876,o),
(70,846,qs),
(70,814,o),
(108,777,o),
(139,777,qs),
(170,777,o),
(210,815,o),
(210,846,qs),
(210,875,o),
(169,915,o),
(139,914,qs),
(109,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 3 1 2 3 105 0 1 1 38 77 0 0 0 39 0 78 5 4 11 9 4 15 5 15 17 16 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,103,o),
(166,-7,o),
(278,-7,qs),
(338,-7,o),
(422,30,o),
(476,97,o),
(500,187,o),
(500,244,qs),
(500,707,l),
(384,707,l),
(384,231,ls),
(384,201,o),
(373,151,o),
(346,116,o),
(302,96,o),
(269,96,qs),
(212,96,o),
(157,163,o),
(154,216,q),
(37,216,l)
);
},
{
closed = 1;
nodes = (
(390,949,l),
(249,779,l),
(354,779,l),
(427,872,l),
(501,779,l),
(607,779,l),
(464,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
5 1 4 6 1 6 4 1 128 7 1 3 1 0 1 3 0 128 0 6 6 44 77 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 4 6 133 5 1 4 1 4 133 7 1 3 1 0 1 3 0 128 0 1 1 38 77 0 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 26 25 24 23 21 20 0 19 0 19 37 21 34 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,-24,ls),
(77,-66,o),
(47,-112,o),
(3,-112,qs),
(-36,-112,l),
(-36,-211,l),
(24,-211,ls),
(116,-211,o),
(191,-126,o),
(191,-37,qs),
(191,527,l),
(77,527,l)
);
},
{
closed = 1;
nodes = (
(92,769,l),
(-49,599,l),
(56,599,l),
(129,692,l),
(203,599,l),
(309,599,l),
(166,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 3 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 3 5 133 4 1 3 2 3 133 6 1 2 2 41 77 0 1 1 0 98 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 5 3 5 133 4 1 3 2 3 133 0 1 0 0 1 0 102 6 1 2 2 41 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 18 17 16 15 13 12 0 11 0 11 33 35 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,0,l),
(565,103,l),
(197,103,l),
(197,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(249,786,l),
(366,949,l),
(251,949,l),
(154,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 3 0 3 4 0 128 0 3 3 44 77 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 4 3 133 0 4 0 4 133 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 17 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(152,768,l),
(269,931,l),
(154,931,l),
(57,768,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 2 3 2 133 0 3 0 3 133 0 0 0 38 77 4 1 1 1 39 1 78 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,529,l),
(550,0,l),
(674,0,l),
(674,707,l),
(559,707,l),
(559,176,l),
(207,707,l),
(82,707,l),
(82,0,l),
(196,0,l)
);
},
{
closed = 1;
nodes = (
(407,786,l),
(524,949,l),
(409,949,l),
(312,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
8 3 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 5 4 0 4 5 0 128 0 4 4 44 77 1 1 0 0 38 77 6 3 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 4 5 4 133 0 5 0 5 133 1 1 0 0 38 77 6 3 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,251,ls),
(176,281,o),
(189,347,o),
(220,401,o),
(277,434,o),
(312,434,qs),
(349,434,o),
(396,409,o),
(422,364,o),
(431,306,o),
(431,272,qs),
(431,0,l),
(545,0,l),
(545,289,ls),
(545,342,o),
(524,432,o),
(475,498,o),
(398,536,o),
(342,536,qs),
(293,536,o),
(206,495,o),
(177,454,q),
(171,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(356,606,l),
(473,769,l),
(358,769,l),
(261,606,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 5 0 5 6 0 128 0 5 5 2 95 7 4 2 2 2 39 77 0 3 3 0 97 1 1 0 0 41 77 7 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 6 5 1 5 6 1 128 0 5 5 2 95 7 4 2 2 2 39 77 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 7 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 29 28 27 26 0 25 0 25 37 21 35 17 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,529,l),
(550,0,l),
(674,0,l),
(674,707,l),
(559,707,l),
(559,176,l),
(207,707,l),
(82,707,l),
(82,0,l),
(196,0,l)
);
},
{
closed = 1;
nodes = (
(426,779,l),
(567,949,l),
(462,949,l),
(389,856,l),
(315,949,l),
(209,949,l),
(351,779,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
12 1 6 4 8 3 2 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 4 0 4 6 0 128 5 1 4 4 44 77 1 1 0 0 38 77 7 3 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
5 1 4 6 4 133 0 6 0 6 133 1 1 0 0 38 77 7 3 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 16 15 14 13 11 10 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,251,ls),
(176,281,o),
(189,347,o),
(220,401,o),
(277,434,o),
(312,434,qs),
(349,434,o),
(396,409,o),
(422,364,o),
(431,306,o),
(431,272,qs),
(431,0,l),
(545,0,l),
(545,289,ls),
(545,342,o),
(524,432,o),
(475,498,o),
(398,536,o),
(342,536,qs),
(293,536,o),
(206,495,o),
(177,454,q),
(171,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(373,599,l),
(514,769,l),
(409,769,l),
(336,676,l),
(262,769,l),
(156,769,l),
(298,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 7 5 3 1 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 5 0 5 7 0 128 6 1 5 5 2 95 8 4 2 2 2 39 77 0 3 3 0 97 1 1 0 0 41 77 8 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 7 5 1 5 7 1 128 6 1 5 5 2 95 8 4 2 2 2 39 77 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 8 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 32 31 30 29 27 26 0 25 0 25 37 21 35 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(217,809,l),
(555,809,l),
(555,902,l),
(217,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
8 1 5 0 4 1 5 4 103 7 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 6 1 0 0 47 0 78 40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(136,629,l),
(474,629,l),
(474,722,l),
(136,722,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 4 5 95 8 1 5 5 38 77 0 3 3 0 97 6 1 0 0 49 77 7 1 2 2 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
8 1 5 0 4 0 5 4 103 0 3 3 0 97 6 1 0 0 49 77 7 1 2 2 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
40 40 21 20 1 0 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = Obreve;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(206,882,o),
(234,826,o),
(282,791,o),
(346,775,o),
(383,775,qs),
(420,775,o),
(484,791,o),
(533,827,o),
(562,883,o),
(563,923,q),
(469,923,l),
(467,885,o),
(419,855,o),
(384,855,qs),
(349,855,o),
(301,885,o),
(299,923,q),
(205,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
10 7 2 5 4 5 133 0 4 0 6 1 4 6 105 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 40 40 21 20 1 0 40 57 40 57 53 51 47 46 44 42 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = obreve;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(127,702,o),
(155,646,o),
(203,611,o),
(267,595,o),
(304,595,qs),
(341,595,o),
(405,611,o),
(454,647,o),
(483,703,o),
(484,743,q),
(390,743,l),
(388,705,o),
(340,675,o),
(305,675,qs),
(270,675,o),
(222,705,o),
(220,743,q),
(126,743,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
10 7 2 5 4 5 133 0 4 0 6 0 4 6 105 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 40 40 21 20 1 0 40 57 40 57 53 51 47 46 44 42 31 29 20 39 21 39 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,48,o),
(681,144,o),
(726,277,o),
(726,355,qs),
(726,434,o),
(681,567,o),
(594,663,o),
(467,716,o),
(385,716,qs),
(303,716,o),
(176,662,o),
(89,566,o),
(43,433,o),
(43,354,qs),
(43,276,o),
(88,144,o),
(174,48,o),
(301,-7,o),
(384,-7,qs),
(466,-7,o)
);
},
{
closed = 1;
nodes = (
(525,570,o),
(580,499,o),
(607,406,o),
(607,354,qs),
(607,301,o),
(580,208,o),
(525,138,o),
(441,97,o),
(385,97,qs),
(328,97,o),
(244,139,o),
(189,211,o),
(162,304,o),
(162,355,qs),
(162,406,o),
(189,500,o),
(245,570,o),
(328,612,o),
(385,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(252,779,l),
(342,779,l),
(446,949,l),
(334,949,l)
);
},
{
closed = 1;
nodes = (
(420,779,l),
(512,779,l),
(626,949,l),
(514,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
6 1 4 4 5 95 11 7 10 3 5 5 44 77 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
11 7 10 3 5 6 1 4 1 5 4 103 9 1 2 2 1 97 0 1 1 46 77 0 3 3 0 97 8 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
44 44 40 40 21 20 1 0 44 47 44 47 46 45 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,496,o),
(75,425,o),
(42,325,o),
(42,264,qs),
(42,203,o),
(75,103,o),
(140,32,o),
(236,-7,o),
(299,-7,qs),
(363,-7,o),
(460,31,o),
(526,103,o),
(559,202,o),
(559,264,qs),
(559,325,o),
(525,425,o),
(458,496,o),
(362,536,o),
(299,536,qs),
(237,536,o)
);
},
{
closed = 1;
nodes = (
(206,119,o),
(171,165,o),
(154,227,o),
(154,263,qs),
(154,299,o),
(171,362,o),
(207,408,o),
(261,434,o),
(299,434,qs),
(338,434,o),
(393,408,o),
(428,362,o),
(445,299,o),
(445,263,qs),
(445,227,o),
(428,165,o),
(393,119,o),
(338,92,o),
(299,92,qs),
(261,92,o)
);
},
{
closed = 1;
nodes = (
(168,599,l),
(258,599,l),
(362,769,l),
(250,769,l)
);
},
{
closed = 1;
nodes = (
(336,599,l),
(428,599,l),
(542,769,l),
(430,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
11 7 10 3 5 6 1 4 0 5 4 103 0 3 3 0 97 8 1 0 0 49 77 9 1 2 2 1 97 0 1 1 47 1 78 44 44 40 40 21 20 1 0 44 47 44 47 46 45 40 43 40 43 42 41 31 29 20 39 21 39 11 9 0 19 1 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,194,o),
(454,65,o),
(489,0,q),
(618,0,l),
(465,274,l),
(497,282,o),
(553,317,o),
(595,370,o),
(620,441,o),
(620,484,qs),
(620,547,o),
(579,633,o),
(508,685,o),
(412,707,o),
(357,707,qs),
(82,707,l),
(82,0,l),
(198,0,l),
(198,259,l),
(347,259,l)
);
},
{
closed = 1;
nodes = (
(198,603,l),
(353,603,ls),
(387,603,o),
(443,592,o),
(483,565,o),
(504,521,o),
(504,487,qs),
(504,449,o),
(479,400,o),
(435,372,o),
(375,360,o),
(341,360,qs),
(198,360,l)
);
},
{
closed = 1;
nodes = (
(363,786,l),
(480,949,l),
(365,949,l),
(268,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 6 1 6 7 1 128 9 1 4 8 1 3 0 4 3 103 0 6 6 44 77 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 6 7 6 133 0 7 1 7 133 9 1 4 8 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
21 20 0 0 36 35 34 33 31 29 20 32 21 32 0 19 0 19 26 33 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,247,ls),
(176,284,o),
(192,349,o),
(229,397,o),
(288,426,o),
(332,427,qs),
(343,427,o),
(366,428,o),
(378,428,q),
(378,534,l),
(370,535,o),
(351,536,o),
(341,536,qs),
(236,536,o),
(175,452,q),
(169,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(269,606,l),
(386,769,l),
(271,769,l),
(174,606,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 1 0 5 3 1 2 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
8 1 0 1 3 1 2 0 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 5 4 133 0 5 0 5 133 0 2 2 0 97 1 1 0 0 41 77 6 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 5 4 133 0 5 1 5 133 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 6 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 20 19 0 18 0 18 66 50 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = racute;
unicode = 341;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,194,o),
(454,65,o),
(489,0,q),
(618,0,l),
(465,274,l),
(497,282,o),
(553,317,o),
(595,370,o),
(620,441,o),
(620,484,qs),
(620,547,o),
(579,633,o),
(508,685,o),
(412,707,o),
(357,707,qs),
(82,707,l),
(82,0,l),
(198,0,l),
(198,259,l),
(347,259,l)
);
},
{
closed = 1;
nodes = (
(198,603,l),
(353,603,ls),
(387,603,o),
(443,592,o),
(483,565,o),
(504,521,o),
(504,487,qs),
(504,449,o),
(479,400,o),
(435,372,o),
(375,360,o),
(341,360,qs),
(198,360,l)
);
},
{
closed = 1;
nodes = (
(372,779,l),
(513,949,l),
(408,949,l),
(335,856,l),
(261,949,l),
(155,949,l),
(297,779,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
35 1 8 6 14 1 3 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 8 6 1 6 8 1 128 10 1 4 9 1 3 0 4 3 103 7 1 6 6 44 77 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 8 6 1 6 8 1 128 10 1 4 9 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 7 1 6 6 0 95 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
21 20 0 0 39 38 37 36 34 33 31 29 20 32 21 32 0 19 0 19 26 33 17 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,247,ls),
(176,284,o),
(192,349,o),
(229,397,o),
(288,426,o),
(332,427,qs),
(343,427,o),
(366,428,o),
(378,428,q),
(378,534,l),
(370,535,o),
(351,536,o),
(341,536,qs),
(236,536,o),
(175,452,q),
(169,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(270,599,l),
(411,769,l),
(306,769,l),
(233,676,l),
(159,769,l),
(53,769,l),
(195,599,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
21 1 6 4 8 1 0 6 3 1 2 0 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
21 1 6 4 8 1 0 1 3 1 2 0 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 6 4 133 0 6 0 6 133 0 2 2 0 97 1 1 0 0 41 77 7 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 4 133 0 6 1 6 133 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 7 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 25 24 23 22 20 19 0 18 0 18 66 50 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,601,o),
(441,578,o),
(466,542,o),
(470,515,q),
(584,515,l),
(580,569,o),
(537,645,o),
(467,693,o),
(377,716,o),
(327,716,qs),
(280,716,o),
(190,695,o),
(119,647,o),
(75,568,o),
(75,510,qs),
(75,472,o),
(96,415,o),
(134,373,o),
(184,343,o),
(214,332,qs),
(259,315,o),
(360,294,o),
(408,280,qs),
(443,271,o),
(485,234,o),
(485,194,qs),
(485,165,o),
(461,129,o),
(423,107,o),
(371,98,o),
(343,98,qs),
(317,98,o),
(263,108,o),
(216,132,o),
(180,172,o),
(172,202,q),
(52,202,l),
(59,146,o),
(111,66,o),
(189,15,o),
(288,-8,o),
(343,-8,qs),
(397,-8,o),
(491,16,o),
(561,68,o),
(602,148,o),
(602,205,qs),
(602,253,o),
(569,318,o),
(513,361,o),
(438,387,o),
(396,396,qs),
(372,401,o),
(315,415,o),
(287,423,qs),
(248,434,o),
(192,477,o),
(192,519,qs),
(192,547,o),
(218,584,o),
(258,605,o),
(306,613,o),
(329,613,qs),
(356,612,o)
);
},
{
closed = 1;
nodes = (
(374,786,l),
(491,949,l),
(376,949,l),
(279,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 7 6 4 6 7 4 128 0 2 5 3 5 2 3 128 8 1 0 0 4 97 0 4 4 46 77 0 5 5 6 95 0 6 6 44 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 7 6 4 6 7 4 128 0 2 5 3 5 2 3 128 0 6 0 5 2 6 5 103 8 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 67 66 65 64 59 58 54 52 33 31 27 26 22 20 0 63 1 63 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,412,o),
(353,380,q),
(460,380,l),
(455,456,o),
(344,536,o),
(257,536,qs),
(221,536,o),
(147,521,o),
(87,482,o),
(49,420,o),
(49,372,qs),
(49,327,o),
(91,269,o),
(156,240,o),
(231,222,o),
(264,216,qs),
(285,211,o),
(323,202,o),
(350,186,o),
(366,163,o),
(366,146,qs),
(366,128,o),
(345,105,o),
(315,91,o),
(280,87,o),
(268,87,qs),
(252,87,o),
(214,93,o),
(179,109,o),
(153,135,o),
(149,155,q),
(34,155,l),
(39,110,o),
(82,47,o),
(147,9,o),
(225,-7,o),
(265,-7,qs),
(305,-7,o),
(380,9,o),
(439,46,o),
(476,108,o),
(476,153,qs),
(476,195,o),
(449,247,o),
(401,280,o),
(332,301,o),
(289,309,qs),
(273,312,o),
(228,321,o),
(187,334,o),
(159,360,o),
(159,381,qs),
(159,400,o),
(178,424,o),
(207,437,o),
(240,441,o),
(255,441,qs),
(293,440,o)
);
},
{
closed = 1;
nodes = (
(298,606,l),
(415,769,l),
(300,769,l),
(203,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 7 6 4 6 7 4 128 0 2 5 3 5 2 3 128 0 6 0 5 2 6 5 103 8 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 61 60 59 58 55 54 52 50 32 30 26 25 21 19 0 57 1 57 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = Scircumflex;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,601,o),
(441,578,o),
(466,542,o),
(470,515,q),
(584,515,l),
(580,569,o),
(537,645,o),
(467,693,o),
(377,716,o),
(327,716,qs),
(280,716,o),
(190,695,o),
(119,647,o),
(75,568,o),
(75,510,qs),
(75,472,o),
(96,415,o),
(134,373,o),
(184,343,o),
(214,332,qs),
(259,315,o),
(360,294,o),
(408,280,qs),
(443,271,o),
(485,234,o),
(485,194,qs),
(485,165,o),
(461,129,o),
(423,107,o),
(371,98,o),
(343,98,qs),
(317,98,o),
(263,108,o),
(216,132,o),
(180,172,o),
(172,202,q),
(52,202,l),
(59,146,o),
(111,66,o),
(189,15,o),
(288,-8,o),
(343,-8,qs),
(397,-8,o),
(491,16,o),
(561,68,o),
(602,148,o),
(602,205,qs),
(602,253,o),
(569,318,o),
(513,361,o),
(438,387,o),
(396,396,qs),
(372,401,o),
(315,415,o),
(287,423,qs),
(248,434,o),
(192,477,o),
(192,519,qs),
(192,547,o),
(218,584,o),
(258,605,o),
(306,613,o),
(329,613,qs),
(356,612,o)
);
},
{
closed = 1;
nodes = (
(303,949,l),
(162,779,l),
(267,779,l),
(340,872,l),
(414,779,l),
(520,779,l),
(377,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
66 1 6 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
7 1 6 8 4 8 6 4 128 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 0 8 8 44 77 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 70 69 68 67 65 64 59 58 54 52 33 31 27 26 22 20 0 63 1 63 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = scircumflex;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,412,o),
(353,380,q),
(460,380,l),
(455,456,o),
(344,536,o),
(257,536,qs),
(221,536,o),
(147,521,o),
(87,482,o),
(49,420,o),
(49,372,qs),
(49,327,o),
(91,269,o),
(156,240,o),
(231,222,o),
(264,216,qs),
(285,211,o),
(323,202,o),
(350,186,o),
(366,163,o),
(366,146,qs),
(366,128,o),
(345,105,o),
(315,91,o),
(280,87,o),
(268,87,qs),
(252,87,o),
(214,93,o),
(179,109,o),
(153,135,o),
(149,155,q),
(34,155,l),
(39,110,o),
(82,47,o),
(147,9,o),
(225,-7,o),
(265,-7,qs),
(305,-7,o),
(380,9,o),
(439,46,o),
(476,108,o),
(476,153,qs),
(476,195,o),
(449,247,o),
(401,280,o),
(332,301,o),
(289,309,qs),
(273,312,o),
(228,321,o),
(187,334,o),
(159,360,o),
(159,381,qs),
(159,400,o),
(178,424,o),
(207,437,o),
(240,441,o),
(255,441,qs),
(293,440,o)
);
},
{
closed = 1;
nodes = (
(221,769,l),
(80,599,l),
(185,599,l),
(258,692,l),
(332,599,l),
(438,599,l),
(295,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
60 1 6 8 1 76 0 8 6 8 133 7 1 6 4 6 133 0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 64 63 62 61 59 58 55 54 52 50 32 30 26 25 21 19 0 57 1 57 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = Scaron;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,601,o),
(441,578,o),
(466,542,o),
(470,515,q),
(584,515,l),
(580,569,o),
(537,645,o),
(467,693,o),
(377,716,o),
(327,716,qs),
(280,716,o),
(190,695,o),
(119,647,o),
(75,568,o),
(75,510,qs),
(75,472,o),
(96,415,o),
(134,373,o),
(184,343,o),
(214,332,qs),
(259,315,o),
(360,294,o),
(408,280,qs),
(443,271,o),
(485,234,o),
(485,194,qs),
(485,165,o),
(461,129,o),
(423,107,o),
(371,98,o),
(343,98,qs),
(317,98,o),
(263,108,o),
(216,132,o),
(180,172,o),
(172,202,q),
(52,202,l),
(59,146,o),
(111,66,o),
(189,15,o),
(288,-8,o),
(343,-8,qs),
(397,-8,o),
(491,16,o),
(561,68,o),
(602,148,o),
(602,205,qs),
(602,253,o),
(569,318,o),
(513,361,o),
(438,387,o),
(396,396,qs),
(372,401,o),
(315,415,o),
(287,423,qs),
(248,434,o),
(192,477,o),
(192,519,qs),
(192,547,o),
(218,584,o),
(258,605,o),
(306,613,o),
(329,613,qs),
(356,612,o)
);
},
{
closed = 1;
nodes = (
(371,779,l),
(512,949,l),
(407,949,l),
(334,856,l),
(260,949,l),
(154,949,l),
(296,779,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
66 1 8 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 9 1 0 0 4 97 0 4 4 46 77 0 5 5 6 95 7 1 6 6 44 77 0 3 3 1 97 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 46 77 0 3 3 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 70 69 68 67 65 64 59 58 54 52 33 31 27 26 22 20 0 63 1 63 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,412,o),
(353,380,q),
(460,380,l),
(455,456,o),
(344,536,o),
(257,536,qs),
(221,536,o),
(147,521,o),
(87,482,o),
(49,420,o),
(49,372,qs),
(49,327,o),
(91,269,o),
(156,240,o),
(231,222,o),
(264,216,qs),
(285,211,o),
(323,202,o),
(350,186,o),
(366,163,o),
(366,146,qs),
(366,128,o),
(345,105,o),
(315,91,o),
(280,87,o),
(268,87,qs),
(252,87,o),
(214,93,o),
(179,109,o),
(153,135,o),
(149,155,q),
(34,155,l),
(39,110,o),
(82,47,o),
(147,9,o),
(225,-7,o),
(265,-7,qs),
(305,-7,o),
(380,9,o),
(439,46,o),
(476,108,o),
(476,153,qs),
(476,195,o),
(449,247,o),
(401,280,o),
(332,301,o),
(289,309,qs),
(273,312,o),
(228,321,o),
(187,334,o),
(159,360,o),
(159,381,qs),
(159,400,o),
(178,424,o),
(207,437,o),
(240,441,o),
(255,441,qs),
(293,440,o)
);
},
{
closed = 1;
nodes = (
(298,599,l),
(439,769,l),
(334,769,l),
(261,676,l),
(187,769,l),
(81,769,l),
(223,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
60 1 8 6 1 76 0 8 6 4 6 8 4 128 0 2 5 3 5 2 3 128 7 1 6 0 5 2 6 5 103 9 1 0 0 4 97 0 4 4 49 77 0 3 3 1 97 0 1 1 47 1 78 1 0 64 63 62 61 59 58 55 54 52 50 32 30 26 25 21 19 0 57 1 57 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = Tcaron;
kernLeft = uni0422;
kernRight = uni0422;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,603,l),
(574,603,l),
(574,707,l),
(9,707,l),
(9,603,l),
(233,603,l),
(233,0,l),
(349,0,l)
);
},
{
closed = 1;
nodes = (
(331,779,l),
(472,949,l),
(367,949,l),
(294,856,l),
(220,949,l),
(114,949,l),
(256,779,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
10 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 6 4 1 4 6 1 128 5 1 4 4 44 77 2 1 0 0 1 95 0 1 1 38 77 7 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 6 4 133 0 6 1 6 133 2 1 0 0 1 95 0 1 1 38 77 7 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 14 13 12 11 9 8 0 7 0 7 17 17 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(280,798,o),
(281,821,o),
(286,842,o),
(299,856,o),
(310,856,qs),
(322,856,o),
(348,836,o),
(381,807,o),
(420,785,o),
(447,785,qs),
(496,785,o),
(547,846,o),
(551,894,qs),
(553,910,o),
(552,929,q),
(471,929,l),
(471,921,o),
(471,898,o),
(466,878,o),
(453,864,o),
(441,864,qs),
(429,864,o),
(403,886,o),
(371,913,o),
(333,935,o),
(308,935,qs),
(259,935,o),
(208,879,o),
(202,835,qs),
(200,814,o),
(200,801,o),
(200,790,q),
(280,790,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
43 1 5 4 26 1 6 7 2 76 0 4 0 7 6 4 7 105 0 5 0 6 1 5 6 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 0 0 54 52 49 47 38 36 33 31 0 25 0 25 37 21 37 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(202,618,o),
(203,641,o),
(208,662,o),
(221,676,o),
(232,676,qs),
(244,676,o),
(270,656,o),
(303,627,o),
(342,605,o),
(369,605,qs),
(418,605,o),
(469,666,o),
(473,714,qs),
(475,730,o),
(474,749,q),
(393,749,l),
(393,741,o),
(393,718,o),
(388,698,o),
(375,684,o),
(363,684,qs),
(351,684,o),
(325,706,o),
(293,733,o),
(255,755,o),
(230,755,qs),
(181,755,o),
(130,699,o),
(124,655,qs),
(122,634,o),
(122,621,o),
(122,610,q),
(202,610,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
37 1 5 4 20 1 6 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 7 4 97 0 4 4 48 77 0 6 6 5 97 0 5 5 38 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 7 6 4 7 105 0 6 6 5 97 0 5 5 38 77 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 0 7 6 4 7 105 0 5 0 6 1 5 6 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 48 46 43 41 32 30 27 25 16 15 12 10 5 4 0 19 1 19 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(200,809,l),
(538,809,l),
(538,902,l),
(200,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
7 1 5 0 4 1 5 4 103 6 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 29 26 29 28 27 0 25 0 25 37 21 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(130,629,l),
(468,629,l),
(468,722,l),
(130,722,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 4 5 95 7 1 5 5 38 77 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
7 1 5 0 4 1 5 4 103 3 1 1 1 41 77 6 1 0 0 2 97 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
20 20 1 0 20 23 20 23 22 21 16 15 12 10 5 4 0 19 1 19 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(195,882,o),
(223,826,o),
(271,791,o),
(335,775,o),
(372,775,qs),
(409,775,o),
(473,791,o),
(522,827,o),
(551,883,o),
(552,923,q),
(458,923,l),
(456,885,o),
(408,855,o),
(373,855,qs),
(338,855,o),
(290,885,o),
(288,923,q),
(194,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 105 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 26 26 0 0 26 43 26 43 39 37 33 32 30 28 0 25 0 25 37 21 37 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(119,702,o),
(147,646,o),
(195,611,o),
(259,595,o),
(296,595,qs),
(333,595,o),
(397,611,o),
(446,647,o),
(475,703,o),
(476,743,q),
(382,743,l),
(380,705,o),
(332,675,o),
(297,675,qs),
(262,675,o),
(214,705,o),
(212,743,q),
(118,743,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
9 7 2 5 4 5 133 0 4 0 6 1 4 6 105 3 1 1 1 41 77 8 1 0 0 2 98 0 2 2 47 2 78 20 20 1 0 20 37 20 37 33 31 27 26 24 22 16 15 12 10 5 4 0 19 1 19 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(263,908,o),
(263,860,qs),
(263,812,o),
(322,758,o),
(370,758,qs),
(417,758,o),
(477,812,o),
(477,860,qs),
(477,908,o),
(418,967,o),
(370,967,qs),
(323,967,o)
);
},
{
closed = 1;
nodes = (
(412,881,o),
(412,862,qs),
(412,842,o),
(389,819,o),
(370,819,qs),
(350,819,o),
(328,842,o),
(328,862,qs),
(328,881,o),
(350,905,o),
(370,905,qs),
(389,905,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
0 7 0 5 1 7 5 105 10 1 6 6 4 97 9 1 4 4 44 77 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 39 38 27 26 0 0 45 43 38 49 39 49 33 31 26 37 27 37 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(191,743,o),
(191,695,qs),
(191,647,o),
(250,593,o),
(298,593,qs),
(345,593,o),
(405,647,o),
(405,695,qs),
(405,743,o),
(346,802,o),
(298,802,qs),
(251,802,o)
);
},
{
closed = 1;
nodes = (
(340,716,o),
(340,697,qs),
(340,677,o),
(317,654,o),
(298,654,qs),
(278,654,o),
(256,677,o),
(256,697,qs),
(256,716,o),
(278,740,o),
(298,740,qs),
(317,740,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
9 1 4 10 1 6 7 4 6 105 0 7 0 5 1 7 5 105 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 33 32 21 20 1 0 39 37 32 43 33 43 27 25 20 31 21 31 16 15 12 10 5 4 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(292,-8,o),
(371,-8,qs),
(450,-8,o),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
},
{
closed = 1;
nodes = (
(236,779,l),
(326,779,l),
(430,949,l),
(318,949,l)
);
},
{
closed = 1;
nodes = (
(404,779,l),
(496,779,l),
(610,949,l),
(498,949,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 4 5 95 10 7 9 3 5 5 44 77 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
10 7 9 3 5 6 1 4 1 5 4 103 8 3 2 1 1 38 77 0 2 2 0 97 0 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
30 30 26 26 0 0 30 33 30 33 32 31 26 29 26 29 28 27 0 25 0 25 37 21 37 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(183,-7,o),
(293,-7,qs),
(345,-7,o),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
},
{
closed = 1;
nodes = (
(162,599,l),
(252,599,l),
(356,769,l),
(244,769,l)
);
},
{
closed = 1;
nodes = (
(330,599,l),
(422,599,l),
(536,769,l),
(424,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
10 7 9 3 5 6 1 4 1 5 4 103 3 1 1 1 41 77 8 1 0 0 2 97 0 2 2 47 2 78 24 24 20 20 1 0 24 27 24 27 26 25 20 23 20 23 22 21 16 15 12 10 5 4 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,312,ls),
(548,269,o),
(531,191,o),
(490,131,o),
(422,96,o),
(372,96,qs),
(321,96,o),
(253,131,o),
(211,190,o),
(193,268,o),
(193,312,qs),
(193,707,l),
(77,707,l),
(77,316,ls),
(77,244,o),
(110,125,o),
(181,40,o),
(236,16,qs),
(279,-2,o),
(335,-7,q),
(320,-18,o),
(307,-33,qs),
(281,-65,o),
(281,-107,qs),
(281,-136,o),
(301,-179,o),
(335,-207,o),
(381,-222,o),
(408,-222,qs),
(428,-222,o),
(465,-214,o),
(484,-204,q),
(469,-135,l),
(448,-146,o),
(424,-146,qs),
(398,-146,o),
(364,-117,o),
(365,-90,qs),
(365,-74,o),
(379,-46,o),
(402,-22,o),
(415,-12,qs),
(420,-8,o),
(425,-4,q),
(470,0,o),
(505,16,qs),
(561,40,o),
(631,126,o),
(664,245,o),
(664,316,qs),
(664,707,l),
(548,707,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
31 18 2 0 3 19 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 0 2 3 0 128 5 4 2 2 2 38 77 0 0 0 1 98 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 3 2 0 2 3 0 128 0 0 0 1 0 1 102 5 4 2 2 2 38 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 51 0 51 37 31 36 47 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,166,o),
(173,234,qs),
(173,527,l),
(60,527,l),
(60,230,ls),
(60,107,o),
(121,50,qs),
(174,1,o),
(261,-6,q),
(245,-18,o),
(232,-33,qs),
(206,-65,o),
(206,-107,qs),
(206,-136,o),
(226,-179,o),
(260,-207,o),
(306,-222,o),
(333,-222,qs),
(353,-222,o),
(390,-214,o),
(409,-204,q),
(394,-135,l),
(373,-146,o),
(349,-146,qs),
(323,-146,o),
(289,-117,o),
(290,-90,qs),
(290,-74,o),
(304,-46,o),
(327,-22,o),
(340,-12,qs),
(348,-6,o),
(355,-2,q),
(372,1,o),
(387,5,qs),
(430,18,o),
(492,73,o),
(528,164,o),
(528,230,qs),
(528,527,l),
(415,527,l),
(415,234,ls),
(415,166,o),
(359,92,o),
(293,92,qs),
(232,93,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
36 23 2 2 0 24 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 0 1 2 1 0 2 128 4 1 1 1 41 77 0 2 2 3 98 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 0 1 2 1 0 2 128 0 2 0 3 2 3 102 4 1 1 1 41 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 42 41 28 26 22 20 5 4 0 45 1 45 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,115,l),
(141,707,l),
(9,707,l),
(193,0,l),
(359,0,l),
(488,590,l),
(617,0,l),
(781,0,l),
(959,707,l),
(834,707,l),
(700,115,l),
(573,707,l),
(407,707,l)
);
},
{
closed = 1;
nodes = (
(452,949,l),
(311,779,l),
(416,779,l),
(489,872,l),
(563,779,l),
(669,779,l),
(526,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
15 1 5 7 11 6 1 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 5 7 0 7 5 0 128 0 7 7 44 77 8 4 3 3 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 7 5 7 133 6 1 5 0 5 133 8 4 3 3 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 19 18 17 16 14 13 0 12 0 12 17 18 17 18 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 968;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,0,l),
(424,388,l),
(543,0,l),
(677,0,l),
(841,527,l),
(719,527,l),
(609,121,l),
(490,527,l),
(362,527,l),
(243,121,l),
(133,527,l),
(7,527,l),
(170,0,l)
);
},
{
closed = 1;
nodes = (
(393,769,l),
(252,599,l),
(357,599,l),
(430,692,l),
(504,599,l),
(610,599,l),
(467,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
15 1 5 7 10 5 2 3 3 0 2 76 0 7 5 7 133 6 1 5 0 5 133 2 1 2 0 0 41 77 4 1 3 3 39 3 78 17 18 17 18 17 18 18 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,707,l),
(9,707,l),
(267,264,l),
(267,0,l),
(383,0,l),
(383,265,l),
(638,707,l),
(507,707,l),
(326,377,l)
);
},
{
closed = 1;
nodes = (
(290,949,l),
(149,779,l),
(254,779,l),
(327,872,l),
(401,779,l),
(507,779,l),
(364,949,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
11 1 3 5 8 5 2 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 5 0 5 3 0 128 0 5 5 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 5 0 5 3 0 128 2 1 0 0 38 77 0 5 5 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 18 18 18 18 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,275,ls),
(435,240,o),
(422,174,o),
(391,123,o),
(338,91,o),
(298,91,qs),
(259,91,o),
(211,118,o),
(184,163,o),
(175,222,o),
(175,254,qs),
(175,527,l),
(62,527,l),
(62,232,ls),
(62,180,o),
(82,92,o),
(130,28,o),
(214,-8,o),
(273,-7,qs),
(325,-8,o),
(408,26,o),
(436,66,q),
(436,25,o),
(427,-54,o),
(396,-115,o),
(336,-151,o),
(283,-151,qs),
(228,-151,o),
(143,-115,o),
(110,-89,q),
(99,-113,o),
(78,-162,o),
(67,-185,q),
(116,-222,o),
(227,-253,o),
(287,-253,qs),
(388,-253,o),
(508,-172,o),
(531,-100,qs),
(546,-55,o),
(549,39,o),
(549,84,qs),
(549,527,l),
(435,527,l)
);
},
{
closed = 1;
nodes = (
(275,769,l),
(134,599,l),
(239,599,l),
(312,692,l),
(386,599,l),
(492,599,l),
(349,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
46 1 6 8 21 1 2 4 13 1 1 2 10 1 0 1 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 8 6 8 133 7 1 6 3 6 133 9 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 8 6 8 133 7 1 6 3 6 133 0 1 0 0 1 0 101 9 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 50 49 48 47 45 44 0 43 0 43 37 21 38 39 38 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,707,l),
(9,707,l),
(267,264,l),
(267,0,l),
(383,0,l),
(383,265,l),
(638,707,l),
(507,707,l),
(326,377,l)
);
},
{
closed = 1;
nodes = (
(383,876,o),
(383,846,qs),
(383,814,o),
(421,777,o),
(452,777,qs),
(483,777,o),
(523,815,o),
(523,846,qs),
(523,875,o),
(482,915,o),
(452,914,qs),
(422,914,o)
);
},
{
closed = 1;
nodes = (
(141,876,o),
(141,846,qs),
(141,814,o),
(179,777,o),
(210,777,qs),
(241,777,o),
(281,815,o),
(281,846,qs),
(281,875,o),
(240,915,o),
(210,914,qs),
(180,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 5 2 3 1 0 1 76 8 5 7 3 3 6 1 4 0 3 4 105 2 1 0 0 38 77 0 1 1 39 1 78 22 21 10 9 28 26 21 32 22 32 16 14 9 20 10 20 18 18 16 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,92,l),
(39,0,l),
(568,0,l),
(568,103,l),
(185,103,l),
(575,616,l),
(575,707,l),
(50,707,l),
(50,603,l),
(427,603,l)
);
},
{
closed = 1;
nodes = (
(343,786,l),
(460,949,l),
(345,949,l),
(248,786,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 3 0 8 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 4 0 4 5 0 128 0 4 4 44 77 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 5 4 133 0 5 0 5 133 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 13 12 11 10 0 9 0 9 17 18 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,527,l),
(42,428,l),
(328,428,l),
(42,87,l),
(42,0,l),
(474,0,l),
(474,98,l),
(186,98,l),
(474,440,l),
(474,527,l)
);
},
{
closed = 1;
nodes = (
(292,606,l),
(409,769,l),
(294,769,l),
(197,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 1 2 3 5 1 1 0 2 76 0 4 5 4 133 0 5 3 5 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 17 17 18 17 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 517;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,92,l),
(39,0,l),
(568,0,l),
(568,103,l),
(185,103,l),
(575,616,l),
(575,707,l),
(50,707,l),
(50,603,l),
(427,603,l)
);
},
{
closed = 1;
nodes = (
(245,876,o),
(245,846,qs),
(245,814,o),
(283,777,o),
(314,777,qs),
(345,777,o),
(385,815,o),
(385,846,qs),
(385,875,o),
(344,915,o),
(314,914,qs),
(284,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
3 1 3 0 8 1 2 1 2 76 7 1 4 0 5 0 4 5 105 6 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 11 10 0 0 17 15 10 21 11 21 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,527,l),
(42,428,l),
(328,428,l),
(42,87,l),
(42,0,l),
(474,0,l),
(474,98,l),
(186,98,l),
(474,440,l),
(474,527,l)
);
},
{
closed = 1;
nodes = (
(191,696,o),
(191,666,qs),
(191,634,o),
(229,597,o),
(260,597,qs),
(291,597,o),
(331,635,o),
(331,666,qs),
(331,695,o),
(290,735,o),
(260,734,qs),
(230,734,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 2 3 5 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 97 6 1 4 4 48 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 4 97 6 1 4 4 46 77 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 0 5 3 4 5 105 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
11 10 17 15 10 21 11 21 17 18 17 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 517;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,92,l),
(39,0,l),
(568,0,l),
(568,103,l),
(185,103,l),
(575,616,l),
(575,707,l),
(50,707,l),
(50,603,l),
(427,603,l)
);
},
{
closed = 1;
nodes = (
(356,779,l),
(497,949,l),
(392,949,l),
(319,856,l),
(245,949,l),
(139,949,l),
(281,779,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
12 1 6 4 3 1 3 0 8 1 2 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 6 4 0 4 6 0 128 5 1 4 4 44 77 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
5 1 4 6 4 133 0 6 0 6 133 7 1 3 3 0 95 0 0 0 38 77 0 1 1 2 95 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 16 15 14 13 11 10 0 9 0 9 17 18 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 614;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,527,l),
(42,428,l),
(328,428,l),
(42,87,l),
(42,0,l),
(474,0,l),
(474,98,l),
(186,98,l),
(474,440,l),
(474,527,l)
);
},
{
closed = 1;
nodes = (
(307,599,l),
(448,769,l),
(343,769,l),
(270,676,l),
(196,769,l),
(90,769,l),
(232,599,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
12 1 6 4 0 1 2 3 5 1 1 0 3 76 5 1 4 6 4 133 0 6 3 6 133 0 2 2 3 95 0 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 17 18 17 17 18 17 17 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 517;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,213,l),
(264,213,l),
(403,0,l),
(535,0,l),
(355,276,l),
(521,527,l),
(393,527,l),
(257,312,l),
(175,312,l),
(175,527,l),
(62,527,l),
(62,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 4 1 1 76 0 1 0 4 3 1 4 103 2 1 0 0 41 77 6 5 2 3 3 39 3 78 0 0 0 12 0 12 17 18 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 537;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = uni0122;
kernLeft = O;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(537,552,o),
(550,499,q),
(667,499,l),
(659,551,o),
(609,632,o),
(533,687,o),
(434,716,o),
(376,716,qs),
(293,716,o),
(168,662,o),
(85,565,o),
(43,431,o),
(43,352,qs),
(43,274,o),
(85,142,o),
(169,46,o),
(294,-7,o),
(377,-7,qs),
(441,-7,o),
(540,27,o),
(612,85,o),
(658,164,o),
(670,209,qs),
(680,251,o),
(683,328,o),
(683,366,q),
(365,366,l),
(365,268,l),
(572,268,l),
(570,192,o),
(469,97,o),
(378,97,qs),
(322,97,o),
(240,138,o),
(187,209,o),
(162,302,o),
(162,354,qs),
(162,406,o),
(186,499,o),
(237,569,o),
(317,611,o),
(373,612,qs),
(442,612,o)
);
},
{
closed = 1;
nodes = (
(335,-256,o),
(315,-270,q),
(339,-303,l),
(362,-295,o),
(402,-264,o),
(431,-222,o),
(448,-175,o),
(448,-152,qs),
(448,-121,o),
(413,-74,o),
(379,-74,qs),
(353,-74,o),
(317,-106,o),
(317,-132,qs),
(317,-157,o),
(350,-187,o),
(376,-189,q),
(370,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
58 57 2 7 73 0 6 0 3 0 6 3 128 0 7 4 7 134 0 3 0 2 1 3 2 103 8 1 0 0 5 97 0 5 5 46 77 0 1 1 4 97 0 4 4 47 4 78 1 0 50 48 40 39 35 33 25 23 16 15 14 13 11 9 0 42 1 42 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 726;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0136;
kernRight = K_alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,295,l),
(299,295,l),
(507,0,l),
(643,0,l),
(388,364,l),
(640,707,l),
(506,707,l),
(288,398,l),
(198,398,l),
(198,707,l),
(82,707,l),
(82,0,l),
(198,0,l)
);
},
{
closed = 1;
nodes = (
(305,-256,o),
(285,-270,q),
(309,-303,l),
(332,-295,o),
(372,-264,o),
(401,-222,o),
(418,-175,o),
(418,-152,qs),
(418,-121,o),
(383,-74,o),
(349,-74,qs),
(323,-74,o),
(287,-106,o),
(287,-132,qs),
(287,-157,o),
(320,-187,o),
(346,-189,q),
(340,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
7 1 4 1 1 76 28 27 2 6 73 0 6 3 6 134 0 1 0 4 3 1 4 103 2 1 0 0 38 77 7 5 2 3 3 39 3 78 0 0 20 18 0 12 0 12 17 18 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 652;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,213,l),
(264,213,l),
(403,0,l),
(535,0,l),
(355,276,l),
(521,527,l),
(393,527,l),
(257,312,l),
(175,312,l),
(175,707,l),
(62,707,l),
(62,0,l),
(175,0,l)
);
},
{
closed = 1;
nodes = (
(247,-256,o),
(227,-270,q),
(251,-303,l),
(274,-295,o),
(314,-264,o),
(343,-222,o),
(360,-175,o),
(360,-152,qs),
(360,-121,o),
(325,-74,o),
(291,-74,qs),
(265,-74,o),
(229,-106,o),
(229,-132,qs),
(229,-157,o),
(262,-187,o),
(288,-189,q),
(282,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
7 1 4 1 1 76 28 27 2 6 73 0 6 3 6 134 0 1 0 4 3 1 4 103 0 0 0 38 77 0 2 2 41 77 7 5 2 3 3 39 3 78 0 0 20 18 0 12 0 12 17 18 17 17 17 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 537;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,0,l),
(565,103,l),
(197,103,l),
(197,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(284,-256,o),
(264,-270,q),
(288,-303,l),
(311,-295,o),
(351,-264,o),
(380,-222,o),
(397,-175,o),
(397,-152,qs),
(397,-121,o),
(362,-74,o),
(328,-74,qs),
(302,-74,o),
(266,-106,o),
(266,-132,qs),
(266,-157,o),
(299,-187,o),
(325,-189,q),
(319,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
21 20 2 3 73 0 3 2 3 134 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 38 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(74,-256,o),
(54,-270,q),
(78,-303,l),
(101,-295,o),
(141,-264,o),
(170,-222,o),
(187,-175,o),
(187,-152,qs),
(187,-121,o),
(152,-74,o),
(118,-74,qs),
(92,-74,o),
(56,-106,o),
(56,-132,qs),
(56,-157,o),
(89,-187,o),
(115,-189,q),
(109,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
19 18 2 2 73 0 2 1 2 134 0 0 0 38 77 3 1 1 1 39 1 78 0 0 11 9 0 3 0 3 17 4 8 23 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,529,l),
(550,0,l),
(674,0,l),
(674,707,l),
(559,707,l),
(559,176,l),
(207,707,l),
(82,707,l),
(82,0,l),
(196,0,l)
);
},
{
closed = 1;
nodes = (
(333,-256,o),
(313,-270,q),
(337,-303,l),
(360,-295,o),
(400,-264,o),
(429,-222,o),
(446,-175,o),
(446,-152,qs),
(446,-121,o),
(411,-74,o),
(377,-74,qs),
(351,-74,o),
(315,-106,o),
(315,-132,qs),
(315,-157,o),
(348,-187,o),
(374,-189,q),
(368,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
8 3 2 2 0 1 76 25 24 2 4 73 0 4 2 4 134 1 1 0 0 38 77 5 3 2 2 2 39 2 78 0 0 17 15 0 9 0 9 17 18 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,251,ls),
(176,281,o),
(189,347,o),
(220,401,o),
(277,434,o),
(312,434,qs),
(349,434,o),
(396,409,o),
(422,364,o),
(431,306,o),
(431,272,qs),
(431,0,l),
(545,0,l),
(545,289,ls),
(545,342,o),
(524,432,o),
(475,498,o),
(398,536,o),
(342,536,qs),
(293,536,o),
(206,495,o),
(177,454,q),
(171,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(260,-256,o),
(240,-270,q),
(264,-303,l),
(287,-295,o),
(327,-264,o),
(356,-222,o),
(373,-175,o),
(373,-152,qs),
(373,-121,o),
(338,-74,o),
(304,-74,qs),
(278,-74,o),
(242,-106,o),
(242,-132,qs),
(242,-157,o),
(275,-187,o),
(301,-189,q),
(295,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 3 0 1 76 41 40 2 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 2 5 134 0 3 3 0 97 1 1 0 0 41 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 2 5 134 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 33 31 0 25 0 25 37 21 35 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 604;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,194,o),
(454,65,o),
(489,0,q),
(618,0,l),
(465,274,l),
(497,282,o),
(553,317,o),
(595,370,o),
(620,441,o),
(620,484,qs),
(620,547,o),
(579,633,o),
(508,685,o),
(412,707,o),
(357,707,qs),
(82,707,l),
(82,0,l),
(198,0,l),
(198,259,l),
(347,259,l)
);
},
{
closed = 1;
nodes = (
(198,603,l),
(353,603,ls),
(387,603,o),
(443,592,o),
(483,565,o),
(504,521,o),
(504,487,qs),
(504,449,o),
(479,400,o),
(435,372,o),
(375,360,o),
(341,360,qs),
(198,360,l)
);
},
{
closed = 1;
nodes = (
(292,-256,o),
(272,-270,q),
(296,-303,l),
(319,-295,o),
(359,-264,o),
(388,-222,o),
(405,-175,o),
(405,-152,qs),
(405,-121,o),
(370,-74,o),
(336,-74,qs),
(310,-74,o),
(274,-106,o),
(274,-132,qs),
(274,-157,o),
(307,-187,o),
(333,-189,q),
(327,-214,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
14 1 3 4 1 76 48 47 2 6 73 0 6 0 6 134 8 1 4 7 1 3 0 4 3 103 0 5 5 1 95 0 1 1 38 77 2 1 0 0 39 0 78 21 20 0 0 40 38 31 29 20 32 21 32 0 19 0 19 26 33 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
kernLeft = r;
kernRight = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,247,ls),
(176,284,o),
(192,349,o),
(229,397,o),
(288,426,o),
(332,427,qs),
(343,427,o),
(366,428,o),
(378,428,q),
(378,534,l),
(370,535,o),
(351,536,o),
(341,536,qs),
(236,536,o),
(175,452,q),
(169,527,l),
(62,527,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(74,-256,o),
(54,-270,q),
(78,-303,l),
(101,-295,o),
(141,-264,o),
(170,-222,o),
(187,-175,o),
(187,-152,qs),
(187,-121,o),
(152,-74,o),
(118,-74,qs),
(92,-74,o),
(56,-106,o),
(56,-132,qs),
(56,-157,o),
(89,-187,o),
(115,-189,q),
(109,-214,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
3 1 2 0 1 76 8 1 0 74 34 33 2 4 73 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
8 1 0 1 3 1 2 0 2 76 34 33 2 4 73 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 3 4 134 0 2 2 0 97 1 1 0 0 41 77 5 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 3 4 134 0 0 0 41 77 0 2 2 1 97 0 1 1 49 77 5 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 26 24 0 18 0 18 66 50 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 390;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,0,l),
(565,103,l),
(197,103,l),
(197,707,l),
(82,707,l),
(82,0,l)
);
},
{
closed = 1;
nodes = (
(334,429,o),
(334,398,qs),
(334,367,o),
(372,329,o),
(403,329,qs),
(434,329,o),
(474,368,o),
(474,398,qs),
(474,429,o),
(433,467,o),
(403,467,qs),
(373,467,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 4 1 3 4 105 0 0 0 38 77 0 1 1 2 96 0 2 2 39 2 78 7 6 13 11 6 17 7 17 17 17 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
},
{
closed = 1;
nodes = (
(230,392,o),
(230,361,qs),
(230,330,o),
(268,292,o),
(299,292,qs),
(330,292,o),
(370,331,o),
(370,361,qs),
(370,392,o),
(329,430,o),
(299,430,qs),
(269,430,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 2 0 3 1 2 3 105 0 0 0 38 77 4 1 1 1 39 1 78 5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 365;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,603,l),
(574,603,l),
(574,707,l),
(9,707,l),
(9,603,l),
(233,603,l),
(233,370,l),
(125,370,l),
(125,277,l),
(233,277,l),
(233,0,l),
(349,0,l),
(349,277,l),
(463,277,l),
(463,370,l),
(349,370,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
8 7 2 3 2 1 0 1 3 0 103 6 1 4 4 5 95 0 5 5 38 77 0 1 1 39 1 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 583;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = tbar;
kernLeft = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,428,l),
(353,428,l),
(353,527,l),
(220,527,l),
(220,676,l),
(107,676,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,315,l),
(24,315,l),
(24,222,l),
(107,222,l),
(107,171,ls),
(107,80,o),
(190,0,o),
(287,0,qs),
(353,0,l),
(353,98,l),
(297,98,ls),
(252,98,o),
(220,142,o),
(220,187,qs),
(220,222,l),
(353,222,l),
(353,315,l),
(220,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
0 7 6 7 133 11 10 2 4 3 1 0 1 4 0 103 9 1 5 5 6 95 8 1 6 6 41 77 0 1 1 2 98 0 2 2 39 2 78 0 0 0 27 0 27 26 25 17 17 17 17 17 19 33 35 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,707,l),
(82,0,l),
(198,0,l),
(198,707,l)
);
},
{
closed = 1;
nodes = (
(269,103,o),
(396,-7,o),
(508,-7,qs),
(568,-7,o),
(652,30,o),
(706,97,o),
(730,187,o),
(730,244,qs),
(730,707,l),
(614,707,l),
(614,231,ls),
(614,201,o),
(603,151,o),
(576,116,o),
(532,96,o),
(499,96,qs),
(442,96,o),
(387,163,o),
(384,216,q),
(267,216,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
6 1 5 1 2 1 5 2 128 3 1 1 1 38 77 0 2 2 0 97 4 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
6 1 5 1 2 1 5 2 128 3 1 1 1 38 77 0 0 0 39 77 0 2 2 4 97 0 4 4 47 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
4 4 4 23 4 23 37 21 35 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,708,o),
(54,675,qs),
(54,643,o),
(94,605,o),
(127,605,qs),
(158,605,o),
(199,643,o),
(199,675,qs),
(199,708,o),
(158,746,o),
(127,746,qs),
(94,746,o)
);
},
{
closed = 1;
nodes = (
(183,527,l),
(69,527,l),
(69,0,l),
(183,0,l)
);
},
{
closed = 1;
nodes = (
(294,708,o),
(294,675,qs),
(294,643,o),
(335,604,o),
(367,604,qs),
(399,604,o),
(440,643,o),
(440,675,qs),
(440,708,o),
(399,747,o),
(367,747,qs),
(335,747,o)
);
},
{
closed = 1;
nodes = (
(310,-24,ls),
(310,-66,o),
(280,-112,o),
(236,-112,qs),
(197,-112,l),
(197,-211,l),
(257,-211,ls),
(349,-211,o),
(424,-126,o),
(424,-37,qs),
(424,527,l),
(310,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
5 1 1 1 0 97 11 4 9 3 0 0 48 77 12 8 2 2 2 41 77 10 1 3 3 39 77 0 7 7 6 98 0 6 6 43 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 7 0 6 7 6 102 5 1 1 1 0 97 11 4 9 3 0 0 48 77 12 8 2 2 2 41 77 10 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
11 4 9 3 0 5 1 1 2 0 1 105 0 7 0 6 7 6 102 12 8 2 2 2 41 77 10 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 37 values pushed */
28 28 17 16 12 12 1 0 28 39 28 39 36 34 33 31 23 21 16 27 17 27 12 15 12 15 14 13 7 5 0 11 1 11 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 494;
}
);
note = ij;
unicode = 307;
},
{
glyphname = uni0123;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,527,l),
(451,464,l),
(421,500,o),
(340,535,o),
(288,536,qs),
(227,535,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,259,qs),
(42,205,o),
(70,109,o),
(128,35,o),
(217,-8,o),
(285,-7,qs),
(344,-8,o),
(423,28,o),
(448,67,q),
(448,23,o),
(440,-56,o),
(410,-117,o),
(353,-152,o),
(305,-152,qs),
(263,-152,o),
(194,-116,o),
(186,-80,q),
(67,-80,l),
(74,-126,o),
(118,-191,o),
(181,-233,o),
(260,-253,o),
(304,-253,qs),
(398,-253,o),
(524,-169,o),
(548,-84,qs),
(560,-39,o),
(562,49,o),
(562,93,qs),
(562,527,l)
);
},
{
closed = 1;
nodes = (
(394,406,o),
(431,361,o),
(449,299,o),
(449,265,qs),
(449,232,o),
(431,170,o),
(395,121,o),
(340,91,o),
(301,91,qs),
(263,91,o),
(208,118,o),
(172,164,o),
(155,225,o),
(155,261,qs),
(155,297,o),
(172,360,o),
(207,406,o),
(262,434,o),
(300,434,qs),
(338,434,o)
);
},
{
closed = 1;
nodes = (
(346,806,o),
(369,822,q),
(342,860,l),
(320,850,o),
(275,813,o),
(245,769,o),
(226,716,o),
(225,687,qs),
(225,670,o),
(232,637,o),
(250,612,o),
(279,597,o),
(299,597,qs),
(328,597,o),
(366,632,o),
(366,664,qs),
(366,692,o),
(333,726,o),
(305,728,q),
(311,757,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
36 1 6 4 20 1 3 7 2 76 76 75 2 8 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
36 1 6 5 20 1 3 7 2 76 76 75 2 8 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 8 4 8 133 0 1 3 2 3 1 2 128 9 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 77 0 2 2 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 9 1 6 6 4 97 5 1 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 8 4 8 133 0 1 3 2 3 1 2 128 0 2 0 0 2 0 101 0 5 5 41 77 9 1 6 6 4 97 0 4 4 49 77 0 7 7 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
40 39 66 64 50 48 39 58 40 58 19 40 38 34 20 37 10 8 28 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,460,l),
(369,468,o),
(412,503,o),
(444,548,o),
(462,601,o),
(462,627,qs),
(462,662,o),
(428,716,o),
(389,716,qs),
(359,716,o),
(320,682,o),
(320,650,qs),
(320,621,o),
(356,588,o),
(384,586,q),
(381,575,o),
(365,550,o),
(346,528,o),
(324,508,o),
(314,502,q),
(314,502,l)
);
},
{
closed = 1;
nodes = (
(565,0,l),
(565,103,l),
(197,103,l),
(197,707,l),
(82,707,l),
(82,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
19 5 2 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
19 5 2 2 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
1 1 0 0 46 77 0 2 2 3 96 0 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 46 77 0 1 1 38 77 0 2 2 3 96 0 3 3 39 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 25 42 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,468,o),
(312,503,o),
(344,548,o),
(362,601,o),
(362,627,qs),
(362,662,o),
(326,716,o),
(289,716,qs),
(259,716,o),
(220,682,o),
(220,650,qs),
(220,621,o),
(256,588,o),
(284,586,q),
(281,575,o),
(265,550,o),
(246,528,o),
(224,508,o),
(214,502,q),
(244,460,l)
);
},
{
closed = 1;
nodes = (
(176,707,l),
(62,707,l),
(62,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
19 5 2 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 7 values pushed */
19 5 2 2 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 0 46 77 3 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 46 77 0 1 1 38 77 3 1 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
20 20 20 23 20 23 25 42 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 347;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,471,o),
(433,503,o),
(465,548,o),
(483,601,o),
(483,627,qs),
(483,662,o),
(447,716,o),
(410,716,qs),
(380,716,o),
(341,682,o),
(341,650,qs),
(341,621,o),
(377,588,o),
(405,586,q),
(402,575,o),
(386,550,o),
(367,528,o),
(348,511,o),
(338,505,q),
(368,463,l)
);
},
{
closed = 1;
nodes = (
(107,676,l),
(107,527,l),
(24,527,l),
(24,428,l),
(107,428,l),
(107,171,ls),
(107,80,o),
(190,0,o),
(287,0,qs),
(345,0,l),
(345,98,l),
(297,98,ls),
(252,98,o),
(220,142,o),
(220,187,qs),
(220,428,l),
(332,428,l),
(332,527,l),
(220,527,l),
(220,676,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
5 1 1 7 19 1 2 1 2 76 0 7 0 1 0 7 1 128 0 0 0 46 77 5 1 2 2 1 95 6 1 1 1 41 77 0 3 3 4 98 0 4 4 39 4 78 17 17 19 33 35 17 24 42 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 456;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(246,251,ls),
(246,281,o),
(259,347,o),
(290,401,o),
(347,434,o),
(382,434,qs),
(419,434,o),
(466,409,o),
(492,364,o),
(501,306,o),
(501,272,qs),
(501,0,l),
(615,0,l),
(615,289,ls),
(615,342,o),
(594,432,o),
(545,498,o),
(468,536,o),
(412,536,qs),
(363,536,o),
(276,495,o),
(247,454,q),
(241,527,l),
(132,527,l),
(132,0,l),
(246,0,l)
);
},
{
closed = 1;
nodes = (
(30,468,o),
(73,503,o),
(105,548,o),
(123,601,o),
(123,627,qs),
(123,662,o),
(87,716,o),
(50,716,qs),
(20,716,o),
(-19,682,o),
(-19,650,qs),
(-19,621,o),
(17,588,o),
(45,586,q),
(42,575,o),
(26,550,o),
(7,528,o),
(-15,508,o),
(-25,502,q),
(5,460,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
31 1 0 5 45 3 2 3 0 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
31 1 1 5 45 3 2 3 0 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 5 5 46 77 0 3 3 0 97 1 1 0 0 41 77 6 4 2 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 5 46 77 0 0 0 41 77 0 3 3 1 97 0 1 1 49 77 6 4 2 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 38 36 0 25 0 25 37 21 35 17 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = dcaron;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,707,l),
(447,470,l),
(416,508,o),
(328,536,o),
(285,536,qs),
(225,536,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,260,qs),
(42,206,o),
(69,110,o),
(127,37,o),
(215,-6,o),
(276,-7,qs),
(331,-5,o),
(419,31,o),
(448,73,q),
(454,0,l),
(561,0,l),
(561,707,l)
);
},
{
closed = 1;
nodes = (
(394,405,o),
(430,360,o),
(447,298,o),
(447,263,qs),
(447,230,o),
(429,168,o),
(392,120,o),
(337,91,o),
(300,91,qs),
(261,91,o),
(206,118,o),
(171,164,o),
(155,226,o),
(155,262,qs),
(155,298,o),
(171,361,o),
(206,407,o),
(260,433,o),
(298,433,qs),
(338,432,o)
);
},
{
closed = 1;
nodes = (
(654,468,o),
(697,503,o),
(729,548,o),
(747,601,o),
(747,627,qs),
(747,662,o),
(711,716,o),
(674,716,qs),
(644,716,o),
(605,682,o),
(605,650,qs),
(605,621,o),
(641,588,o),
(669,586,q),
(666,575,o),
(650,550,o),
(631,528,o),
(609,508,o),
(599,502,q),
(629,460,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
46 1 2 3 60 18 2 4 2 2 1 0 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 3 3 38 77 7 1 4 4 2 97 0 2 2 49 77 0 5 5 0 97 1 1 0 0 39 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 6 6 46 77 0 3 3 38 77 7 1 4 4 2 97 0 2 2 49 77 0 5 5 0 97 1 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 6 6 46 77 0 3 3 38 77 7 1 4 4 2 97 0 2 2 49 77 0 0 0 39 77 0 5 5 1 97 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
22 21 53 51 32 30 21 40 22 40 19 40 35 16 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 727;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,405,o),
(430,360,o),
(447,298,o),
(447,263,qs),
(447,230,o),
(429,168,o),
(392,120,o),
(337,91,o),
(300,91,qs),
(261,91,o),
(206,118,o),
(171,164,o),
(155,226,o),
(155,262,qs),
(155,298,o),
(171,361,o),
(206,407,o),
(260,433,o),
(298,433,qs),
(338,432,o)
);
},
{
closed = 1;
nodes = (
(447,561,l),
(447,470,l),
(416,508,o),
(328,536,o),
(285,536,qs),
(225,536,o),
(135,493,o),
(73,419,o),
(42,319,o),
(42,260,qs),
(42,206,o),
(69,110,o),
(127,37,o),
(215,-6,o),
(276,-7,qs),
(331,-5,o),
(419,31,o),
(448,73,q),
(454,0,l),
(561,0,l),
(561,561,l),
(634,561,l),
(634,643,l),
(561,643,l),
(561,707,l),
(447,707,l),
(447,643,l),
(344,643,l),
(344,561,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
46 1 0 8 30 1 6 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
4 1 2 9 1 5 8 2 5 103 0 3 3 38 77 10 1 0 0 8 97 0 8 8 49 77 0 1 1 6 97 7 1 6 6 39 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
4 1 2 9 1 5 8 2 5 103 0 3 3 38 77 10 1 0 0 8 97 0 8 8 49 77 0 6 6 39 77 0 1 1 7 97 0 7 7 47 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 48 47 44 42 34 32 29 28 27 26 25 24 23 22 21 20 11 9 0 19 1 19 11 8 22 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,-24,ls),
(77,-66,o),
(47,-112,o),
(3,-112,qs),
(-36,-112,l),
(-36,-211,l),
(24,-211,ls),
(116,-211,o),
(191,-126,o),
(191,-37,qs),
(191,527,l),
(77,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 2 41 77 0 1 1 0 98 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 1 0 102 3 1 2 2 41 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 11 0 11 33 35 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,115,l),
(141,707,l),
(9,707,l),
(193,0,l),
(359,0,l),
(488,590,l),
(617,0,l),
(781,0,l),
(959,707,l),
(834,707,l),
(700,115,l),
(573,707,l),
(407,707,l)
);
},
{
closed = 1;
nodes = (
(358,949,l),
(475,786,l),
(570,786,l),
(473,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 6 0 6 5 0 128 0 6 6 44 77 7 4 3 3 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 6 5 6 133 0 5 0 5 133 7 4 3 3 0 0 38 77 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 16 15 14 13 0 12 0 12 17 18 17 18 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 968;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,0,l),
(424,388,l),
(543,0,l),
(677,0,l),
(841,527,l),
(719,527,l),
(609,121,l),
(490,527,l),
(362,527,l),
(243,121,l),
(133,527,l),
(7,527,l),
(170,0,l)
);
},
{
closed = 1;
nodes = (
(284,769,l),
(401,606,l),
(496,606,l),
(399,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
10 5 2 3 3 0 1 76 0 5 6 0 6 5 0 128 2 1 2 0 0 41 77 0 6 6 3 95 4 1 3 3 39 3 78 17 17 18 17 18 18 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,115,l),
(141,707,l),
(9,707,l),
(193,0,l),
(359,0,l),
(488,590,l),
(617,0,l),
(781,0,l),
(959,707,l),
(834,707,l),
(700,115,l),
(573,707,l),
(407,707,l)
);
},
{
closed = 1;
nodes = (
(513,786,l),
(630,949,l),
(515,949,l),
(418,786,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
11 6 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 5 0 5 6 0 128 0 5 5 44 77 7 4 3 3 0 0 38 77 2 1 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 5 0 5 6 0 128 7 4 3 3 0 0 38 77 0 5 5 1 95 2 1 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 16 15 14 13 0 12 0 12 17 18 17 18 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 968;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,0,l),
(424,388,l),
(543,0,l),
(677,0,l),
(841,527,l),
(719,527,l),
(609,121,l),
(490,527,l),
(362,527,l),
(243,121,l),
(133,527,l),
(7,527,l),
(170,0,l)
);
},
{
closed = 1;
nodes = (
(463,606,l),
(580,769,l),
(465,769,l),
(368,606,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
10 5 2 3 3 0 1 76 0 6 5 0 5 6 0 128 2 1 2 0 0 41 77 0 5 5 3 95 4 1 3 3 39 3 78 17 17 18 17 18 18 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,115,l),
(141,707,l),
(9,707,l),
(193,0,l),
(359,0,l),
(488,590,l),
(617,0,l),
(781,0,l),
(959,707,l),
(834,707,l),
(700,115,l),
(573,707,l),
(407,707,l)
);
},
{
closed = 1;
nodes = (
(542,876,o),
(542,846,qs),
(542,814,o),
(580,777,o),
(611,777,qs),
(642,777,o),
(682,815,o),
(682,846,qs),
(682,875,o),
(641,915,o),
(611,914,qs),
(581,914,o)
);
},
{
closed = 1;
nodes = (
(300,876,o),
(300,846,qs),
(300,814,o),
(338,777,o),
(369,777,qs),
(400,777,o),
(440,815,o),
(440,846,qs),
(440,875,o),
(399,915,o),
(369,914,qs),
(339,914,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
11 6 1 3 1 0 1 76 11 7 10 3 5 8 1 6 0 5 6 105 9 4 3 3 0 0 38 77 2 1 1 1 39 1 78 26 25 14 13 0 0 32 30 25 36 26 36 20 18 13 24 14 24 0 12 0 12 17 18 17 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 968;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
kernLeft = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,0,l),
(424,388,l),
(543,0,l),
(677,0,l),
(841,527,l),
(719,527,l),
(609,121,l),
(490,527,l),
(362,527,l),
(243,121,l),
(133,527,l),
(7,527,l),
(170,0,l)
);
},
{
closed = 1;
nodes = (
(481,696,o),
(481,666,qs),
(481,634,o),
(519,597,o),
(550,597,qs),
(581,597,o),
(621,635,o),
(621,666,qs),
(621,695,o),
(580,735,o),
(550,734,qs),
(520,734,o)
);
},
{
closed = 1;
nodes = (
(239,696,o),
(239,666,qs),
(239,634,o),
(277,597,o),
(308,597,qs),
(339,597,o),
(379,635,o),
(379,666,qs),
(379,695,o),
(338,735,o),
(308,734,qs),
(278,734,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
10 5 2 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
8 1 6 6 5 97 10 7 9 3 5 5 48 77 2 1 2 0 0 41 77 4 1 3 3 39 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
8 1 6 6 5 97 10 7 9 3 5 5 46 77 2 1 2 0 0 41 77 4 1 3 3 39 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
10 7 9 3 5 8 1 6 0 5 6 105 2 1 2 0 0 41 77 4 1 3 3 39 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
26 25 14 13 32 30 25 36 26 36 20 18 13 24 14 24 18 17 18 18 16 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 848;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,707,l),
(9,707,l),
(267,264,l),
(267,0,l),
(383,0,l),
(383,265,l),
(638,707,l),
(507,707,l),
(326,377,l)
);
},
{
closed = 1;
nodes = (
(177,949,l),
(294,786,l),
(389,786,l),
(292,949,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
8 5 2 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 4 0 4 3 0 128 0 4 4 44 77 2 1 0 0 38 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 3 4 0 4 3 0 128 2 1 0 0 38 77 0 4 4 1 95 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 18 18 18 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,275,ls),
(435,240,o),
(422,174,o),
(391,123,o),
(338,91,o),
(298,91,qs),
(259,91,o),
(211,118,o),
(184,163,o),
(175,222,o),
(175,254,qs),
(175,527,l),
(62,527,l),
(62,232,ls),
(62,180,o),
(82,92,o),
(130,28,o),
(214,-8,o),
(273,-7,qs),
(325,-8,o),
(408,26,o),
(436,66,q),
(436,25,o),
(427,-54,o),
(396,-115,o),
(336,-151,o),
(283,-151,qs),
(228,-151,o),
(143,-115,o),
(110,-89,q),
(99,-113,o),
(78,-162,o),
(67,-185,q),
(116,-222,o),
(227,-253,o),
(287,-253,qs),
(388,-253,o),
(508,-172,o),
(531,-100,qs),
(546,-55,o),
(549,39,o),
(549,84,qs),
(549,527,l),
(435,527,l)
);
},
{
closed = 1;
nodes = (
(155,769,l),
(272,606,l),
(367,606,l),
(270,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 1 2 4 13 1 1 2 10 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 6 7 133 0 6 3 6 133 8 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 77 0 1 1 0 97 0 0 0 51 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 7 6 7 133 0 6 3 6 133 0 1 0 0 1 0 101 8 5 2 3 3 41 77 0 4 4 2 98 0 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 47 46 45 44 0 43 0 43 37 21 38 39 38 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni0408;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,103,o),
(166,-7,o),
(278,-7,qs),
(338,-7,o),
(422,30,o),
(476,97,o),
(500,187,o),
(500,244,qs),
(500,707,l),
(384,707,l),
(384,231,ls),
(384,201,o),
(373,151,o),
(346,116,o),
(302,96,o),
(269,96,qs),
(212,96,o),
(157,163,o),
(154,216,q),
(37,216,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 1 0 1 3 0 128 0 1 1 20 77 0 0 0 2 97 0 2 2 28 2 78 0 0 0 19 0 19 37 21 34 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni0408;
unicode = 1032;
},
{
glyphname = uni0458;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,708,o),
(61,675,qs),
(61,643,o),
(102,604,o),
(134,604,qs),
(166,604,o),
(207,643,o),
(207,675,qs),
(207,708,o),
(166,747,o),
(134,747,qs),
(102,747,o)
);
},
{
closed = 1;
nodes = (
(77,-24,ls),
(77,-66,o),
(47,-112,o),
(3,-112,qs),
(-36,-112,l),
(-36,-211,l),
(24,-211,ls),
(116,-211,o),
(191,-126,o),
(191,-37,qs),
(191,527,l),
(77,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 0 0 1 4 0 1 105 6 1 4 4 22 77 0 3 3 2 98 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 0 0 1 4 0 1 105 0 3 0 2 3 2 102 6 1 4 4 22 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
12 12 1 0 12 23 12 23 20 18 17 15 7 5 0 11 1 11 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = uni0458;
unicode = 1112;
},
{
glyphname = uni0405;
kernRight = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,601,o),
(441,578,o),
(466,542,o),
(470,515,q),
(584,515,l),
(580,569,o),
(537,645,o),
(467,693,o),
(377,716,o),
(327,716,qs),
(280,716,o),
(190,695,o),
(119,647,o),
(75,568,o),
(75,510,qs),
(75,472,o),
(96,415,o),
(134,373,o),
(184,343,o),
(214,332,qs),
(259,315,o),
(360,294,o),
(408,280,qs),
(443,271,o),
(485,234,o),
(485,194,qs),
(485,165,o),
(461,129,o),
(423,107,o),
(371,98,o),
(343,98,qs),
(317,98,o),
(263,108,o),
(216,132,o),
(180,172,o),
(172,202,q),
(52,202,l),
(59,146,o),
(111,66,o),
(189,15,o),
(288,-8,o),
(343,-8,qs),
(397,-8,o),
(491,16,o),
(561,68,o),
(602,148,o),
(602,205,qs),
(602,253,o),
(569,318,o),
(513,361,o),
(438,387,o),
(396,396,qs),
(372,401,o),
(315,415,o),
(287,423,qs),
(248,434,o),
(192,477,o),
(192,519,qs),
(192,547,o),
(218,584,o),
(258,605,o),
(306,613,o),
(329,613,qs),
(356,612,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 27 77 0 3 3 1 97 0 1 1 28 1 78 1 0 59 58 54 52 33 31 27 26 22 20 0 63 1 63 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = uni0405;
unicode = 1029;
},
{
glyphname = uni0455;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,412,o),
(353,380,q),
(460,380,l),
(455,456,o),
(344,536,o),
(257,536,qs),
(221,536,o),
(147,521,o),
(87,482,o),
(49,420,o),
(49,372,qs),
(49,327,o),
(91,269,o),
(156,240,o),
(231,222,o),
(264,216,qs),
(285,211,o),
(323,202,o),
(350,186,o),
(366,163,o),
(366,146,qs),
(366,128,o),
(345,105,o),
(315,91,o),
(280,87,o),
(268,87,qs),
(252,87,o),
(214,93,o),
(179,109,o),
(153,135,o),
(149,155,q),
(34,155,l),
(39,110,o),
(82,47,o),
(147,9,o),
(225,-7,o),
(265,-7,qs),
(305,-7,o),
(380,9,o),
(439,46,o),
(476,108,o),
(476,153,qs),
(476,195,o),
(449,247,o),
(401,280,o),
(332,301,o),
(289,309,qs),
(273,312,o),
(228,321,o),
(187,334,o),
(159,360,o),
(159,381,qs),
(159,400,o),
(178,424,o),
(207,437,o),
(240,441,o),
(255,441,qs),
(293,440,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 5 0 2 0 5 2 128 0 2 3 0 2 3 126 6 1 0 0 4 97 0 4 4 29 77 0 3 3 1 97 0 1 1 28 1 78 1 0 55 54 52 50 32 30 26 25 21 19 0 57 1 57 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = uni0455;
unicode = 1109;
},
{
glyphname = uni045E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,527,l),
(17,527,l),
(251,-33,l),
(239,-62,o),
(211,-107,o),
(173,-135,o),
(126,-149,o),
(96,-149,qs),
(92,-149,o),
(88,-149,q),
(88,-251,l),
(105,-251,ls),
(180,-251,o),
(273,-208,o),
(337,-124,o),
(384,2,o),
(413,84,qs),
(565,527,l),
(440,527,l),
(310,110,l)
);
},
{
closed = 1;
nodes = (
(120,702,o),
(148,646,o),
(196,611,o),
(260,595,o),
(297,595,qs),
(334,595,o),
(398,611,o),
(447,647,o),
(476,703,o),
(477,743,q),
(383,743,l),
(381,705,o),
(333,675,o),
(298,675,qs),
(263,675,o),
(215,705,o),
(213,743,q),
(119,743,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 3 1 0 0 22 77 0 2 2 1 98 0 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 0 2 0 1 2 1 102 3 1 0 0 22 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
20 20 20 37 20 37 36 18 36 21 49 37 16 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = uni045E;
unicode = 1118;
},
{
glyphname = uni040E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,707,l),
(273,194,l),
(255,160,o),
(213,124,o),
(168,107,o),
(124,105,o),
(103,105,q),
(103,0,l),
(167,0,o),
(259,20,o),
(295,47,qs),
(331,74,o),
(380,151,o),
(398,190,qs),
(618,707,l),
(490,707,l),
(453,615,o),
(402,488,o),
(368,403,o),
(348,353,o),
(338,327,o),
(335,318,o),
(334,315,q),
(145,707,l)
);
},
{
closed = 1;
nodes = (
(143,882,o),
(171,826,o),
(219,791,o),
(283,775,o),
(320,775,qs),
(357,775,o),
(421,791,o),
(470,827,o),
(499,883,o),
(500,923,q),
(406,923,l),
(404,885,o),
(356,855,o),
(321,855,qs),
(286,855,o),
(238,885,o),
(236,923,q),
(142,923,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
21 1 2 0 1 76 8 7 2 5 4 5 133 0 4 0 6 0 4 6 105 3 1 0 0 20 77 0 2 2 1 98 0 1 1 21 1 78 24 24 24 41 24 41 36 18 35 20 33 22 23 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = uni040E;
unicode = 1038;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Medium;
properties = (
{
key = styleNames;
values = (
{
language = ENG;
value = Medium;
}
);
},
{
key = postscriptFullName;
value = "Onest Medium";
},
{
key = postscriptFontName;
value = "Onest-Medium";
}
);
weightClass = 500;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 15;
"@MMK_R_O" = -18;
"@MMK_R_W" = -30;
"@MMK_R_Y" = -60;
"@MMK_R_colon" = 20;
"@MMK_R_period" = 30;
"@MMK_R_uni0422" = -50;
"@MMK_R_w" = -20;
};
"@MMK_L_K_alt" = {
"@MMK_R_a" = -10;
"@MMK_R_uni0422" = 10;
};
"@MMK_L_O" = {
"@MMK_R_A" = -20;
"@MMK_R_O" = 8;
"@MMK_R_W" = -5;
"@MMK_R_Y" = -20;
"@MMK_R_period" = -20;
};
"@MMK_L_W" = {
"@MMK_R_A" = -30;
"@MMK_R_O" = -5;
"@MMK_R_a" = -35;
"@MMK_R_period" = -40;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -60;
"@MMK_R_O" = -20;
"@MMK_R_a" = -70;
"@MMK_R_colon" = -30;
"@MMK_R_d" = -70;
"@MMK_R_period" = -80;
"@MMK_R_r" = -30;
"@MMK_R_w" = -20;
};
"@MMK_L_period" = {
"@MMK_R_A" = 30;
"@MMK_R_O" = -20;
"@MMK_R_W" = -40;
"@MMK_R_Y" = -80;
"@MMK_R_uni0422" = -80;
};
"@MMK_L_r" = {
"@MMK_R_d" = -10;
"@MMK_R_t" = 30;
};
"@MMK_L_uni0413" = {
"@MMK_R_colon" = -40;
"@MMK_R_period" = -100;
"@MMK_R_uni0417" = -30;
"@MMK_R_uni0432" = -40;
"@MMK_R_uni0433" = -50;
"@MMK_R_uni0444" = -80;
};
"@MMK_L_uni0414" = {
"@MMK_R_period" = 30;
};
"@MMK_L_uni0417" = {
"@MMK_R_uni0417" = 8;
};
"@MMK_L_uni0422" = {
"@MMK_R_A" = -50;
"@MMK_R_a" = -60;
"@MMK_R_colon" = -20;
"@MMK_R_d" = -50;
"@MMK_R_period" = -80;
"@MMK_R_r" = -20;
"@MMK_R_uni0422" = 40;
};
"@MMK_L_uni0433" = {
"@MMK_R_period" = -40;
"@MMK_R_uni0444" = -10;
};
"@MMK_L_uni0434" = {
"@MMK_R_period" = 40;
};
A = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aacute = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Acircumflex = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Adieresis = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Agrave = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Amacron = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aogonek = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Aring = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
Atilde = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quoteright = -40;
quotesingle = -20;
v = -30;
x = 5;
y2_alt = -30;
};
B = {
V = -10;
W = -10;
W_alt = -10;
Wacute = -10;
Wcircumflex = -10;
Wdieresis = -10;
Wgrave = -10;
X = -10;
Y = -10;
Yacute = -10;
Ycircumflex = -10;
Ydieresis = -10;
Ygrave = -10;
};
C = {
J = 10;
V = -25;
X = -27;
};
Cacute = {
J = 10;
V = -25;
X = -27;
};
Ccaron = {
J = 10;
V = -25;
X = -27;
};
Ccedilla = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Ccircumflex = {
J = 10;
V = -25;
X = -27;
};
Cdotaccent = {
J = 10;
V = -25;
X = -27;
};
D = {
C = 15;
Cacute = 15;
Ccaron = 15;
Ccedilla = 15;
Ccircumflex = 15;
Cdotaccent = 15;
G = 15;
Gbreve = 15;
Gcircumflex = 15;
Gdotaccent = 15;
J = 10;
O = 15;
OE = 15;
Oacute = 15;
Obreve = 15;
Ocircumflex = 15;
Odieresis = 15;
Ograve = 15;
Ohungarumlaut = 15;
Omacron = 15;
Oslash = 15;
Otilde = 15;
Q = 15;
S = 15;
Sacute = 15;
Scaron = 15;
Scedilla = 15;
Scircumflex = 15;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
d = 10;
uni0122 = 15;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Dcaron = {
J = 10;
V = -25;
X = -27;
};
Dcroat = {
J = 10;
V = -25;
X = -27;
};
E = {
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
};
Eth = {
J = 10;
V = -25;
X = -27;
};
F = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
J = -30;
T = 20;
Tcaron = 20;
a = -30;
a00E2.alt = -30;
a00E4.alt = -30;
a0103.alt = -30;
a2_alt = -25;
a_alt = -30;
aacute = -30;
abreve = -30;
acircumflex = -30;
adieresis = -30;
agrave = -30;
amacron = -30;
aogonek = -30;
aring = -30;
atilde = -30;
c = -25;
c_alt = -25;
cacute = -25;
ccaron = -25;
ccedilla = -25;
ccircumflex = -25;
cdotaccent = -25;
comma = -30;
d = -25;
dcaron = -25;
dcroat = -25;
e = -25;
eacute = -25;
ebreve = -25;
ecaron = -25;
ecircumflex = -25;
edieresis = -25;
edotaccent = -25;
egrave = -25;
emacron = -25;
eogonek = -25;
eth = -25;
g = -25;
gbreve = -25;
gcircumflex = -25;
gdotaccent = -25;
o = -25;
oacute = -25;
obreve = -25;
ocircumflex = -25;
odieresis = -25;
oe = -25;
ograve = -25;
ohungarumlaut = -25;
omacron = -25;
oslash = -25;
otilde = -25;
period = -30;
q = -25;
quotedblbase = -30;
quotedblright = 20;
quoteright = 20;
s = -25;
s_alt = -25;
sacute = -25;
scaron = -25;
scedilla = -25;
scircumflex = -25;
uni0123 = -25;
uni0162 = 20;
uni0219 = -25;
uni021A = 20;
uni0410 = -50;
uni0422 = 20;
uni0430 = -30;
};
G = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -27;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Gbreve = {
J = 10;
V = -25;
X = -27;
};
Gcircumflex = {
J = 10;
V = -25;
X = -27;
};
Gdotaccent = {
J = 10;
V = -25;
X = -27;
};
I = {
bracketright = 40;
};
J = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -10;
};
K = {
v = -30;
y2_alt = -40;
};
K_alt = {
C = -30;
Cacute = -30;
Ccaron = -30;
Ccedilla = -30;
Ccircumflex = -30;
Cdotaccent = -30;
G = -30;
Gbreve = -30;
Gcircumflex = -30;
Gdotaccent = -30;
O = -30;
OE = -30;
Oacute = -30;
Obreve = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Ohungarumlaut = -30;
Omacron = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
S = -30;
Sacute = -30;
Scaron = -30;
Scedilla = -30;
Scircumflex = -30;
d = -20;
uni0122 = -30;
v = -30;
w = -20;
w_alt = -20;
wacute = -20;
wcircumflex = -20;
wdieresis = -20;
wgrave = -20;
y2_alt = -40;
};
L = {
A = 20;
Aacute = 20;
Acircumflex = 20;
Adieresis = 20;
Agrave = 20;
Amacron = 20;
Aogonek = 20;
Aring = 20;
Atilde = 20;
J = 30;
T = -40;
Tcaron = -40;
V = -50;
W = -40;
W_alt = -40;
Wacute = -40;
Wcircumflex = -40;
Wdieresis = -40;
Wgrave = -40;
X = 10;
Y = -80;
Yacute = -80;
Ycircumflex = -80;
Ydieresis = -80;
Ygrave = -80;
a = 10;
a00E2.alt = 10;
a00E4.alt = 10;
a0103.alt = 10;
a2_alt = 10;
a_alt = 10;
aacute = 10;
abreve = 10;
acircumflex = 10;
adieresis = 10;
agrave = 10;
amacron = 10;
aogonek = 10;
aring = 10;
atilde = 10;
c = 10;
c_alt = 10;
cacute = 10;
ccaron = 10;
ccedilla = 10;
ccircumflex = 10;
cdotaccent = 10;
colon = 20;
comma = 40;
d = 10;
dcaron = 10;
dcroat = 10;
e = 10;
eacute = 10;
ebreve = 10;
ecaron = 10;
ecircumflex = 10;
edieresis = 10;
edotaccent = 10;
egrave = 10;
emacron = 10;
eogonek = 10;
eth = 10;
g = 10;
gbreve = 10;
gcircumflex = 10;
gdotaccent = 10;
j = 20;
o = 10;
oacute = 10;
obreve = 10;
ocircumflex = 10;
odieresis = 10;
oe = 10;
ograve = 10;
ohungarumlaut = 10;
omacron = 10;
oslash = 10;
otilde = 10;
period = 40;
q = 10;
quotedblbase = 40;
quoteright = -60;
s = 10;
s_alt = 10;
sacute = 10;
scaron = 10;
scedilla = 10;
scircumflex = 10;
semicolon = 20;
uni0123 = 10;
uni0162 = -40;
uni0219 = 10;
uni021A = -40;
uni0410 = 20;
uni0422 = -40;
uni0430 = 10;
y2_alt = -10;
z = 20;
};
O = {
J = 10;
V = -25;
X = -27;
};
Oacute = {
J = 10;
V = -25;
X = -27;
};
Obreve = {
J = 10;
V = -25;
X = -27;
};
Ocircumflex = {
J = 10;
V = -25;
X = -27;
};
Odieresis = {
J = 10;
V = -25;
X = -27;
};
Ograve = {
J = 10;
V = -25;
X = -27;
};
Ohungarumlaut = {
J = 10;
V = -25;
X = -27;
};
Omacron = {
J = 10;
V = -25;
X = -27;
};
Oslash = {
J = 10;
V = -25;
X = -27;
};
Otilde = {
J = 10;
V = -25;
X = -27;
};
P = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = 10;
Ccedilla = 10;
G = 10;
J = -50;
Q = 10;
S = 10;
X = -25;
Y = -15;
Yacute = -15;
Ycircumflex = -15;
Ydieresis = -15;
Ygrave = -15;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
j = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -90;
q = -10;
quotedblbase = -60;
quotedblright = 20;
quoteright = 20;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -50;
uni0430 = -20;
};
Q = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -27;
colon = 20;
semicolon = 20;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
R = {
Y = -20;
Yacute = -20;
Ycircumflex = -20;
Ydieresis = -20;
Ygrave = -20;
a = -10;
a00E2.alt = -10;
a00E4.alt = -10;
a0103.alt = -10;
a2_alt = -10;
a_alt = -10;
aacute = -10;
abreve = -10;
acircumflex = -10;
adieresis = -10;
agrave = -10;
amacron = -10;
aogonek = -10;
aring = -10;
atilde = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0430 = -10;
};
S = {
J = 10;
T = -10;
Tcaron = -10;
V = -25;
X = -30;
uni0162 = -10;
uni021A = -10;
uni0422 = -10;
};
Sacute = {
J = 10;
V = -25;
X = -27;
};
Scaron = {
J = 10;
V = -25;
X = -27;
};
Scedilla = {
J = 10;
V = -25;
X = -27;
};
Scircumflex = {
J = 10;
V = -25;
X = -27;
};
T = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
Tcaron = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
U = {
A = -10;
Aacute = -10;
Acircumflex = -10;
Adieresis = -10;
Agrave = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Atilde = -10;
a = -20;
a00E2.alt = -20;
a00E4.alt = -20;
a0103.alt = -20;
a2_alt = -10;
a_alt = -20;
aacute = -20;
abreve = -20;
acircumflex = -20;
adieresis = -20;
agrave = -20;
amacron = -20;
aogonek = -20;
aring = -20;
atilde = -20;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
comma = -60;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
period = -50;
q = -10;
quotedblbase = -60;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
uni0410 = -10;
uni0430 = -20;
};
V = {
A = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Amacron = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
C = -25;
Cacute = -25;
Ccaron = -25;
Ccedilla = -25;
Ccircumflex = -25;
Cdotaccent = -25;
G = -25;
Gbreve = -25;
Gcircumflex = -25;
Gdotaccent = -25;
J = -80;
O = -25;
OE = -25;
Oacute = -25;
Obreve = -25;
Ocircumflex = -25;
Odieresis = -25;
Ograve = -25;
Ohungarumlaut = -25;
Omacron = -25;
Oslash = -25;
Otilde = -25;
Q = -25;
S = -25;
Sacute = -25;
Scaron = -25;
Scedilla = -25;
Scircumflex = -25;
a = -50;
a00E2.alt = -50;
a00E4.alt = -50;
a0103.alt = -50;
a2_alt = -50;
a_alt = -50;
aacute = -50;
abreve = -50;
acircumflex = -50;
adieresis = -50;
agrave = -50;
amacron = -50;
aogonek = -50;
aring = -50;
atilde = -50;
braceright = 20;
bracketright = 40;
c = -50;
c_alt = -50;
cacute = -50;
ccaron = -50;
ccedilla = -50;
ccircumflex = -50;
cdotaccent = -50;
colon = -20;
comma = -80;
d = -50;
dcaron = -50;
dcroat = -50;
e = -50;
eacute = -50;
ebreve = -50;
ecaron = -50;
ecircumflex = -50;
edieresis = -50;
edotaccent = -50;
egrave = -50;
emacron = -50;
eogonek = -50;
eth = -50;
g = -50;
gbreve = -50;
gcircumflex = -50;
gdotaccent = -50;
m = -20;
n = -20;
o = -50;
oacute = -50;
obreve = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
ohungarumlaut = -50;
omacron = -50;
oslash = -50;
otilde = -50;
p = -20;
period = -80;
q = -50;
quotedblbase = -80;
quotedblright = 10;
quoteright = 20;
r = -20;
racute = -20;
rcaron = -20;
s = -50;
s_alt = -50;
sacute = -50;
scaron = -50;
scedilla = -50;
scircumflex = -50;
semicolon = -20;
space = -80;
u = -20;
uni0122 = -25;
uni0123 = -50;
uni0157 = -20;
uni0219 = -50;
uni0410 = -50;
uni0430 = -50;
z = -20;
};
W = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
W_alt = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
uni0410 = -40;
};
Wacute = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wcircumflex = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wdieresis = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
Wgrave = {
J = -30;
braceright = 20;
bracketright = 40;
d = -25;
quotedblright = 10;
quoteright = 20;
quotesingle = 40;
space = -60;
};
X = {
C = -25;
Cacute = -25;
Ccaron = -25;
Ccedilla = -30;
Ccircumflex = -25;
Cdotaccent = -25;
G = -25;
Gbreve = -25;
Gcircumflex = -25;
Gdotaccent = -25;
O = -25;
OE = -25;
Oacute = -25;
Obreve = -25;
Ocircumflex = -25;
Odieresis = -25;
Ograve = -25;
Ohungarumlaut = -25;
Omacron = -25;
Oslash = -25;
Otilde = -25;
Q = -25;
S = -30;
Sacute = -25;
Scaron = -25;
Scedilla = -25;
Scircumflex = -25;
bracketright = 40;
colon = 20;
comma = 20;
period = 20;
quotedblbase = 20;
quoteright = 20;
semicolon = 20;
uni0122 = -25;
};
Y = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Yacute = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ycircumflex = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ydieresis = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Ygrave = {
J = -90;
bracketright = 40;
f = -20;
m = -30;
n = -30;
p = -30;
quoteright = 20;
u = -30;
v = -30;
x = -20;
y2_alt = -20;
z = -30;
};
Z = {
bracketright = 20;
colon = 30;
quoteright = 20;
quotesingle = 40;
semicolon = 30;
};
b = {
c = 10;
d = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
backslash = {
a2_alt = 20;
backslash = -210;
uni0414 = 60;
uni0432 = 40;
uni0433 = 40;
uni0434 = 60;
uni0435 = 20;
uni0436 = 40;
uni0437 = 20;
uni0438 = 40;
uni043A = 40;
uni043C = 40;
uni043D = 40;
uni043E = 20;
uni043F = 40;
uni0440 = 40;
uni0441 = 20;
uni0444 = 20;
uni0446 = 40;
uni0447 = -20;
uni0448 = 40;
uni0449 = 40;
uni044B = 40;
uni044C = 40;
uni044D = 20;
uni044E = 40;
uni044F = 40;
uni0451 = 20;
uni0491 = 40;
};
braceleft = {
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
j = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0434 = 40;
};
bracketleft = {
I = 40;
T = 40;
Tcaron = 40;
V = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
X = 40;
Y = 40;
Yacute = 40;
Ycircumflex = 40;
Ydieresis = 40;
Ygrave = 40;
Z = 20;
i = 40;
j = 40;
l = 40;
uni0162 = 40;
uni021A = 40;
uni0414 = 40;
uni0422 = 40;
uni0423 = 40;
uni0425 = 40;
uni0434 = 40;
uni0443 = 20;
};
c = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
c_alt = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
cacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ccedilla = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
ccircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
cdotaccent = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
colon = {
backslash = -70;
slash = -30;
};
comma = {
U = -60;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 30;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0443 = -30;
v = -30;
y2_alt = -30;
zero = -20;
};
dcaron = {
a2_alt = -70;
c = -70;
c_alt = -70;
cacute = -70;
ccaron = -70;
ccedilla = -70;
ccircumflex = -70;
cdotaccent = -70;
d = -70;
dcaron = -70;
dcroat = -70;
e = -70;
eacute = -70;
ebreve = -70;
ecaron = -70;
ecircumflex = -70;
edieresis = -70;
edotaccent = -70;
egrave = -70;
emacron = -70;
eogonek = -70;
eth = -70;
g = -70;
gbreve = -70;
gcircumflex = -70;
gdotaccent = -70;
o = -70;
oacute = -70;
obreve = -70;
ocircumflex = -70;
odieresis = -70;
oe = -70;
ograve = -70;
ohungarumlaut = -70;
omacron = -70;
oslash = -70;
otilde = -70;
q = -70;
s = -70;
s_alt = -70;
sacute = -70;
scaron = -70;
scedilla = -70;
scircumflex = -70;
uni0123 = -70;
uni0219 = -70;
};
e = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ebreve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ecircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edieresis = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
edotaccent = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
egrave = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
emacron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eogonek = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
eth = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
f = {
a2_alt = -10;
bracketright = 40;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 50;
quotesingle = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
four = {
four = 20;
};
i = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
j = {
bracketright = 40;
j = 20;
quoteright = 20;
};
k_alt = {
d = -10;
};
l = {
bracketright = 40;
quotedblright = 20;
quoteright = 20;
};
lcaron = {
a2_alt = -70;
c = -70;
c_alt = -70;
cacute = -70;
ccaron = -70;
ccedilla = -70;
ccircumflex = -70;
cdotaccent = -70;
d = -70;
dcaron = -70;
dcroat = -70;
e = -70;
eacute = -70;
ebreve = -70;
ecaron = -70;
ecircumflex = -70;
edieresis = -70;
edotaccent = -70;
egrave = -70;
emacron = -70;
eogonek = -70;
eth = -70;
g = -70;
gbreve = -70;
gcircumflex = -70;
gdotaccent = -70;
o = -70;
oacute = -70;
obreve = -70;
ocircumflex = -70;
odieresis = -70;
oe = -70;
ograve = -70;
ohungarumlaut = -70;
omacron = -70;
oslash = -70;
otilde = -70;
q = -70;
s = -70;
s_alt = -70;
sacute = -70;
scaron = -70;
scedilla = -70;
scircumflex = -70;
uni0123 = -70;
uni0219 = -70;
};
nine = {
seven = -20;
};
o = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
obreve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ocircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
odieresis = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oe = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ograve = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
ohungarumlaut = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
omacron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
oslash = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
otilde = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
p = {
c = 10;
f = -20;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
t = -20;
t_alt = -20;
tbar = -20;
uni0163 = -20;
uni021B = -20;
x = -10;
y2_alt = -5;
};
parenleft = {
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
q = -20;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
uni0123 = -20;
uni0219 = -20;
uni0414 = 40;
uni0422 = 40;
uni0434 = 40;
uni0443 = 10;
};
period = {
U = -50;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 30;
uni0414 = 30;
uni0417 = -20;
uni0424 = -50;
uni0427 = -80;
uni0434 = 40;
uni0443 = -30;
v = -30;
y2_alt = -30;
zero = -20;
};
q = {
j = 20;
};
quotedblbase = {
U = -60;
V = -80;
one = -20;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
space = -50;
three = 10;
two = 30;
uni0410 = 40;
uni0414 = 40;
uni0416 = 20;
uni0417 = -20;
uni041B = 20;
uni041E = -30;
uni0421 = -30;
uni0424 = -50;
uni0425 = 20;
uni0427 = -80;
uni042D = -30;
uni0434 = 60;
uni0436 = 20;
uni043B = 40;
uni0442 = -40;
uni0443 = -30;
uni0445 = 20;
uni0447 = -40;
v = -30;
y2_alt = -30;
zero = -20;
};
quotedblleft = {
J = -100;
T = 40;
Tcaron = 40;
V = 10;
W = 10;
W_alt = 10;
Wacute = 10;
Wcircumflex = 10;
Wdieresis = 10;
Wgrave = 10;
a2_alt = -30;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -30;
uni0162 = 40;
uni0163 = 40;
uni0219 = -30;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -40;
uni0422 = 30;
uni0423 = 30;
uni0434 = -40;
uni043B = -40;
uni0442 = 40;
uni0443 = 40;
uni0444 = -30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quotedblright = {
comma = -50;
period = -50;
quotedblbase = -50;
};
quoteleft = {
A = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Amacron = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
J = -100;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -20;
c = -20;
c_alt = -20;
cacute = -20;
ccaron = -20;
ccedilla = -20;
ccircumflex = -20;
cdotaccent = -20;
comma = -50;
d = -20;
dcaron = -20;
dcroat = -20;
e = -20;
eacute = -20;
ebreve = -20;
ecaron = -20;
ecircumflex = -20;
edieresis = -20;
edotaccent = -20;
egrave = -20;
emacron = -20;
eogonek = -20;
eth = -20;
f = 40;
g = -20;
gbreve = -20;
gcircumflex = -20;
gdotaccent = -20;
o = -20;
oacute = -20;
obreve = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
ohungarumlaut = -20;
omacron = -20;
oslash = -20;
otilde = -20;
period = -50;
q = -20;
quotedblbase = -50;
s = -20;
s_alt = -20;
sacute = -20;
scaron = -20;
scedilla = -20;
scircumflex = -20;
t = 40;
t_alt = 40;
tbar = 40;
uni0123 = -20;
uni0162 = 40;
uni0163 = 40;
uni0219 = -20;
uni021A = 40;
uni021B = 40;
uni0410 = -40;
uni0414 = -20;
uni041B = -20;
uni0422 = 40;
uni0423 = 40;
uni042A = 20;
uni0434 = -30;
uni043B = -30;
uni0442 = 30;
uni0443 = 30;
v = 40;
w = 40;
w_alt = 40;
wacute = 40;
wcircumflex = 40;
wdieresis = 40;
wgrave = 40;
x = 40;
y2_alt = 40;
z = 40;
};
quoteright = {
A = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Amacron = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
J = -60;
T = 40;
Tcaron = 40;
V = 20;
W = 20;
W_alt = 20;
Wacute = 20;
Wcircumflex = 20;
Wdieresis = 20;
Wgrave = 20;
X = 20;
Y = 20;
Yacute = 20;
Ycircumflex = 20;
Ydieresis = 20;
Ygrave = 20;
Z = 20;
a2_alt = -30;
b = 20;
c = -30;
c_alt = -30;
cacute = -30;
ccaron = -30;
ccedilla = -30;
ccircumflex = -30;
cdotaccent = -30;
comma = -50;
d = -30;
dcaron = -30;
dcroat = -30;
e = -30;
eacute = -30;
ebreve = -30;
ecaron = -30;
ecircumflex = -30;
edieresis = -30;
edotaccent = -30;
egrave = -30;
emacron = -30;
eogonek = -30;
eth = -30;
f = 40;
g = -30;
gbreve = -30;
gcircumflex = -30;
gdotaccent = -30;
i = 20;
j = 20;
k = 20;
k_alt = 20;
kgreenlandic = 20;
l = 20;
o = -30;
oacute = -30;
obreve = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
ohungarumlaut = -30;
omacron = -30;
oslash = -30;
otilde = -30;
period = -50;
q = -30;
quotedblbase = -50;
s = -30;
s_alt = -30;
sacute = -30;
scaron = -30;
scedilla = -30;
scircumflex = -30;
uni0123 = -30;
uni0137 = 20;
uni0162 = 40;
uni0219 = -30;
uni021A = 40;
uni0410 = -40;
uni0422 = 40;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0442 = 40;
uni0443 = 40;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
quotesingle = {
A = -20;
Aacute = -20;
Acircumflex = -20;
Adieresis = -20;
Agrave = -20;
Amacron = -20;
Aogonek = -20;
Aring = -20;
Atilde = -20;
J = -80;
T = 40;
Tcaron = 40;
W = 40;
W_alt = 40;
Wacute = 40;
Wcircumflex = 40;
Wdieresis = 40;
Wgrave = 40;
Z = 40;
b = 40;
f = 40;
t = 40;
t_alt = 40;
tbar = 40;
uni0162 = 40;
uni0163 = 40;
uni021A = 40;
uni021B = 40;
uni0410 = -20;
uni0422 = 20;
uni0423 = 20;
uni0427 = 20;
uni0442 = 40;
};
r = {
quotedblright = 40;
quoteright = 40;
};
racute = {
quotedblright = 40;
quoteright = 40;
};
rcaron = {
quotedblright = 40;
quoteright = 40;
};
s = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
t = -10;
t_alt = -10;
tbar = -10;
uni0163 = -10;
uni021B = -10;
x = -15;
y2_alt = -5;
};
s_alt = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
sacute = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scaron = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
scedilla = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
scircumflex = {
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -10;
y2_alt = -5;
};
seven = {
comma = -90;
four = -60;
one = 20;
period = -90;
quotedblbase = -90;
quotesingle = 20;
seven = 30;
three = -10;
};
slash = {
slash = -210;
uni0422 = 30;
uni0423 = 30;
};
space = {
V = -80;
W = -60;
W_alt = -60;
Wacute = -60;
Wcircumflex = -60;
Wdieresis = -60;
Wgrave = -60;
five = 40;
};
t = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
t_alt = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tbar = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
tcaron = {
a2_alt = -60;
c = -60;
c_alt = -60;
cacute = -60;
ccaron = -60;
ccedilla = -60;
ccircumflex = -60;
cdotaccent = -60;
d = -60;
dcaron = -60;
dcroat = -60;
e = -60;
eacute = -60;
ebreve = -60;
ecaron = -60;
ecircumflex = -60;
edieresis = -60;
edotaccent = -60;
egrave = -60;
emacron = -60;
eogonek = -60;
eth = -60;
g = -60;
gbreve = -60;
gcircumflex = -60;
gdotaccent = -60;
o = -60;
oacute = -60;
obreve = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
ohungarumlaut = -60;
omacron = -60;
oslash = -60;
otilde = -60;
q = -60;
s = -60;
s_alt = -60;
sacute = -60;
scaron = -60;
scedilla = -60;
scircumflex = -60;
uni0123 = -60;
uni0219 = -60;
};
two = {
comma = 30;
four = -20;
period = 30;
quotedblbase = 30;
two = 15;
};
uni0122 = {
J = 10;
V = -25;
X = -27;
};
uni0136 = {
v = -30;
y2_alt = -40;
};
uni0157 = {
quotedblright = 40;
quoteright = 40;
};
uni0162 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni0163 = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0219 = {
c = 10;
f = -10;
napostrophe = -20;
parenright = -20;
quotedblright = -20;
x = -15;
y2_alt = -5;
};
uni021A = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
u = -20;
};
uni021B = {
quotedblright = 40;
quoteright = 40;
quotesingle = 40;
};
uni0401 = {
quotedblright = 20;
uni043B = 10;
};
uni0405 = {
J = 10;
V = -25;
X = -27;
};
uni0410 = {
J = 20;
U = -10;
V = -50;
W_alt = -40;
quotedblleft = -40;
quotedblright = -40;
quoteright = -40;
quotesingle = -20;
uni0410 = 15;
uni0414 = 20;
uni0417 = -15;
uni041B = 10;
uni041E = -18;
uni0421 = -15;
uni0422 = -50;
uni0423 = -40;
uni0424 = -15;
uni0427 = -70;
uni042D = -15;
uni0434 = 10;
uni0436 = 10;
uni043B = 10;
uni0442 = -20;
uni0443 = -25;
uni0447 = -35;
v = -30;
x = 5;
y2_alt = -30;
};
uni0411 = {
uni0414 = -20;
uni042F = -20;
uni0434 = -10;
uni0436 = -20;
uni0445 = -20;
};
uni0412 = {
uni0423 = -30;
};
uni0413 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
};
uni0414 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0415 = {
quotedblright = 20;
uni043B = 10;
};
uni0416 = {
a2_alt = -20;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
uni0430 = -10;
uni0431 = -10;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0442 = -20;
uni0443 = -20;
uni0444 = -20;
uni0447 = -40;
uni044D = -20;
uni0451 = -20;
};
uni0417 = {
comma = -20;
period = -20;
quotedblbase = -20;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni0417 = 15;
uni041B = -15;
uni041E = 15;
uni0421 = 15;
uni0422 = -20;
uni0423 = -20;
uni0424 = 15;
uni0425 = -20;
uni042D = 15;
uni0431 = 10;
uni0442 = 10;
uni0444 = 10;
};
uni041A = {
a2_alt = -20;
colon = 20;
semicolon = 20;
slash = 20;
uni0417 = -30;
uni041E = -30;
uni0421 = -30;
uni0424 = -30;
uni042D = -30;
uni0430 = -10;
uni0431 = -20;
uni0435 = -20;
uni0437 = -20;
uni043E = -20;
uni0441 = -20;
uni0443 = -30;
uni0444 = -20;
uni044D = -20;
uni0451 = -20;
};
uni041E = {
uni0410 = -20;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -25;
uni0423 = -20;
uni0425 = -27;
uni0431 = 10;
uni0442 = 10;
};
uni0420 = {
a2_alt = -10;
comma = -90;
period = -90;
quotedblbase = -90;
quotedblleft = 20;
uni0410 = -60;
uni0414 = -50;
uni0416 = -20;
uni0417 = 10;
uni041E = 10;
uni0421 = 10;
uni0424 = 10;
uni0425 = -20;
uni042D = 10;
uni0430 = -10;
uni0434 = -40;
uni0435 = -10;
uni0437 = -10;
uni043B = -35;
uni043E = -10;
uni0441 = -10;
uni0442 = 20;
uni0444 = -10;
uni044D = -10;
uni044F = -10;
uni0451 = -10;
};
uni0421 = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -10;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0422 = {
Ccedilla = -10;
G = -10;
J = -80;
Q = -10;
S = -10;
a2_alt = -50;
backslash = 40;
braceright = 40;
bracketright = 40;
m = -20;
n = -20;
p = -20;
parenright = 40;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
u = -20;
uni0410 = -50;
uni0414 = -10;
uni0417 = -20;
uni041E = -20;
uni0421 = -20;
uni0422 = 20;
uni0423 = 10;
uni0424 = -20;
uni042D = -20;
uni0430 = -60;
uni0432 = -40;
uni0433 = -40;
uni0434 = -40;
uni0435 = -50;
uni0437 = -50;
uni0438 = -40;
uni043A = -40;
uni043B = -40;
uni043C = -40;
uni043D = -40;
uni043E = -50;
uni043F = -40;
uni0440 = -40;
uni0441 = -50;
uni0444 = -50;
uni0445 = -20;
uni0446 = -40;
uni0447 = -40;
uni0448 = -40;
uni0449 = -40;
uni044B = -40;
uni044C = -40;
uni044D = -50;
uni044E = -40;
uni044F = -40;
uni0451 = -30;
uni0491 = -40;
};
uni0423 = {
a2_alt = -55;
braceright = 40;
bracketright = 40;
colon = -20;
comma = -100;
period = -100;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 30;
quoteright = 40;
quotesingle = 40;
semicolon = -20;
slash = -30;
uni0410 = -70;
uni0414 = -40;
uni0417 = -15;
uni041E = -15;
uni0421 = -15;
uni0422 = 10;
uni0423 = 16;
uni0424 = -15;
uni042D = -15;
uni042F = -20;
uni0430 = -60;
uni0431 = -20;
uni0432 = -30;
uni0433 = -30;
uni0434 = -70;
uni0435 = -55;
uni0436 = -10;
uni0437 = -55;
uni0438 = -30;
uni0439 = -20;
uni043A = -30;
uni043B = -50;
uni043C = -30;
uni043D = -30;
uni043E = -55;
uni043F = -30;
uni0440 = -30;
uni0441 = -55;
uni0444 = -55;
uni0446 = -30;
uni0447 = -30;
uni0448 = -30;
uni0449 = -30;
uni044B = -30;
uni044C = -30;
uni044D = -55;
uni044E = -30;
uni044F = -30;
uni0451 = -30;
uni0491 = -30;
};
uni0424 = {
comma = -50;
period = -50;
quotedblbase = -50;
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0434 = -20;
uni0442 = 10;
};
uni0425 = {
bracketright = 40;
uni0417 = -20;
uni041E = -25;
uni0421 = -20;
uni0424 = -20;
uni042D = -20;
};
uni0426 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni0429 = {
braceright = 40;
bracketright = 40;
colon = 30;
parenright = 40;
slash = 50;
uni0410 = 20;
uni0414 = 50;
uni041B = 20;
uni0422 = -10;
uni0427 = -20;
uni042A = -20;
uni0434 = 50;
uni043B = 20;
uni0440 = 20;
};
uni042A = {
quotedblright = -40;
quoteright = -20;
uni0422 = -50;
};
uni042C = {
quotedblleft = -60;
quotedblright = -40;
quoteright = -40;
uni0416 = -20;
uni0422 = -50;
uni0427 = -30;
};
uni042D = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni042E = {
uni0410 = -15;
uni0414 = -10;
uni0416 = -20;
uni041B = -15;
uni0422 = -20;
uni0423 = -20;
uni0425 = -20;
uni0431 = 10;
uni0442 = 10;
};
uni0431 = {
quoteright = 20;
uni0431 = 15;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0444 = 10;
uni0445 = -10;
};
uni0432 = {
uni0436 = -10;
uni0445 = -15;
uni044F = -10;
};
uni0433 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
uni0434 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0435 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0436 = {
a2_alt = -10;
slash = 30;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0437 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni043A = {
a2_alt = -10;
uni0430 = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni043E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0445 = -10;
};
uni0440 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0441 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0442 = {
colon = 20;
quotedblright = 40;
quoteright = 40;
uni0434 = -20;
uni0442 = 30;
uni0443 = 20;
uni044A = 20;
};
uni0443 = {
comma = -30;
period = -30;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
uni0442 = 10;
uni0443 = 10;
};
uni0444 = {
quotedblright = -30;
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0445 = {
a2_alt = -10;
uni0435 = -10;
uni0437 = -10;
uni043E = -10;
uni0441 = -10;
uni0444 = -10;
uni044D = -10;
uni0451 = -10;
};
uni0446 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni0449 = {
braceright = 40;
bracketright = 40;
colon = 20;
parenright = 40;
slash = 30;
uni0434 = 50;
uni043B = 20;
uni0442 = -10;
};
uni044C = {
quotedblright = -40;
uni0442 = -30;
uni044F = -10;
};
uni044D = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni044E = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0451 = {
uni0431 = 10;
uni0434 = -12;
uni0436 = -10;
uni043B = -5;
uni0441 = 10;
uni0445 = -10;
};
uni0490 = {
quotedblleft = 40;
quotedblright = 20;
quoteright = 20;
quotesingle = 40;
uni0410 = -100;
uni0414 = -60;
uni041B = -50;
uni042F = -20;
uni0430 = -80;
uni0431 = -20;
uni0432 = -50;
uni0433 = -40;
uni0434 = -70;
uni0436 = -20;
uni0439 = -40;
uni043B = -70;
uni0443 = -20;
uni0445 = -20;
uni0451 = -50;
uni0491 = -40;
};
uni0491 = {
colon = 20;
quotedblright = 40;
quoteright = 20;
uni0430 = -15;
uni0434 = -40;
uni0442 = 30;
};
v = {
comma = -30;
period = -30;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
};
w = {
quotedblright = 40;
quoteright = 40;
};
w_alt = {
quotedblright = 40;
quoteright = 40;
};
wacute = {
quotedblright = 40;
quoteright = 40;
};
wcircumflex = {
quotedblright = 40;
quoteright = 40;
};
wdieresis = {
quotedblright = 40;
quoteright = 40;
};
wgrave = {
quotedblright = 40;
quoteright = 40;
};
x = {
a2_alt = -10;
c = -10;
c_alt = -10;
cacute = -10;
ccaron = -10;
ccedilla = -10;
ccircumflex = -10;
cdotaccent = -10;
d = -10;
dcaron = -10;
dcroat = -10;
e = -10;
eacute = -10;
ebreve = -10;
ecaron = -10;
ecircumflex = -10;
edieresis = -10;
edotaccent = -10;
egrave = -10;
emacron = -10;
eogonek = -10;
eth = -10;
g = -10;
gbreve = -10;
gcircumflex = -10;
gdotaccent = -10;
o = -10;
oacute = -10;
obreve = -10;
ocircumflex = -10;
odieresis = -10;
oe = -10;
ograve = -10;
ohungarumlaut = -10;
omacron = -10;
oslash = -10;
otilde = -10;
q = -10;
quotedblright = 40;
quoteright = 40;
s = -10;
s_alt = -10;
sacute = -10;
scaron = -10;
scedilla = -10;
scircumflex = -10;
uni0123 = -10;
uni0219 = -10;
};
y2_alt = {
a2_alt = -5;
c = -5;
c_alt = -5;
cacute = -5;
ccaron = -5;
ccedilla = -5;
ccircumflex = -5;
cdotaccent = -5;
comma = -30;
d = -5;
dcaron = -5;
dcroat = -5;
e = -5;
eacute = -5;
ebreve = -5;
ecaron = -5;
ecircumflex = -5;
edieresis = -5;
edotaccent = -5;
egrave = -5;
emacron = -5;
eogonek = -5;
eth = -5;
g = -5;
gbreve = -5;
gcircumflex = -5;
gdotaccent = -5;
o = -5;
oacute = -5;
obreve = -5;
ocircumflex = -5;
odieresis = -5;
oe = -5;
ograve = -5;
ohungarumlaut = -5;
omacron = -5;
oslash = -5;
otilde = -5;
period = -30;
q = -5;
quotedblbase = -30;
quotedblright = 40;
quoteright = 40;
s = -5;
s_alt = -5;
sacute = -5;
scaron = -5;
scedilla = -5;
scircumflex = -5;
uni0123 = -5;
uni0219 = -5;
};
z = {
quotedblright = 40;
quoteright = 40;
};
zero = {
comma = -20;
period = -20;
quotedblbase = -20;
two = -15;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The Onest Project Authors (https://github.com/googlefonts/onest)";
}
);
},
{
key = familyNames;
values = (
{
language = ENG;
value = Onest;
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Dmitri Voloshin, Andrey Kudryavtsev";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Andrey Kudryavtsev, Dmitri Voloshin";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://onest.md";
},
{
key = designerURL;
value = "https://onest.md";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 0;
}
